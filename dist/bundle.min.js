!function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){n(9),t.exports=n(18)},function(t,e,n){var r,i;/*!
	 * jQuery JavaScript Library v3.1.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-09-22T22:30Z
	 */
!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,o){"use strict";function a(t,e){e=e||ot;var n=e.createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function u(t){var e=!!t&&"length"in t&&t.length,n=mt.type(t);return"function"!==n&&!mt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function s(t,e,n){return mt.isFunction(e)?mt.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?mt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?mt.grep(t,function(t){return lt.call(e,t)>-1!==n}):Ct.test(e)?mt.filter(e,t,n):(e=mt.filter(e,t),mt.grep(t,function(t){return lt.call(e,t)>-1!==n&&1===t.nodeType}))}function c(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function l(t){var e={};return mt.each(t.match(jt)||[],function(t,n){e[n]=!0}),e}function f(t){return t}function h(t){throw t}function p(t,e,n){var r;try{t&&mt.isFunction(r=t.promise)?r.call(t).done(e).fail(n):t&&mt.isFunction(r=t.then)?r.call(t,e,n):e.call(void 0,t)}catch(t){n.call(void 0,t)}}function d(){ot.removeEventListener("DOMContentLoaded",d),n.removeEventListener("load",d),mt.ready()}function g(){this.expando=mt.expando+g.uid++}function v(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:It.test(t)?JSON.parse(t):t)}function y(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(Ut,"-$&").toLowerCase(),n=t.getAttribute(r),"string"==typeof n){try{n=v(n)}catch(i){}Ht.set(t,e,n)}else n=void 0;return n}function m(t,e,n,r){var i,o=1,a=20,u=r?function(){return r.cur()}:function(){return mt.css(t,e,"")},s=u(),c=n&&n[3]||(mt.cssNumber[e]?"":"px"),l=(mt.cssNumber[e]||"px"!==c&&+s)&&$t.exec(mt.css(t,e));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+s||1;do o=o||".5",l/=o,mt.style(t,e,l+c);while(o!==(o=u()/s)&&1!==o&&--a)}return n&&(l=+l||+s||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function x(t){var e,n=t.ownerDocument,r=t.nodeName,i=Xt[r];return i?i:(e=n.body.appendChild(n.createElement(r)),i=mt.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),Xt[r]=i,i)}function b(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)r=t[o],r.style&&(n=r.style.display,e?("none"===n&&(i[o]=Ft.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Yt(r)&&(i[o]=x(r))):"none"!==n&&(i[o]="none",Ft.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}function w(t,e){var n;return n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&mt.nodeName(t,e)?mt.merge([t],n):n}function M(t,e){for(var n=0,r=t.length;n<r;n++)Ft.set(t[n],"globalEval",!e||Ft.get(e[n],"globalEval"))}function _(t,e,n,r,i){for(var o,a,u,s,c,l,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if(o=t[p],o||0===o)if("object"===mt.type(o))mt.merge(h,o.nodeType?[o]:o);else if(Kt.test(o)){for(a=a||f.appendChild(e.createElement("div")),u=(Zt.exec(o)||["",""])[1].toLowerCase(),s=Qt[u]||Qt._default,a.innerHTML=s[1]+mt.htmlPrefilter(o)+s[2],l=s[0];l--;)a=a.lastChild;mt.merge(h,a.childNodes),a=f.firstChild,a.textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&mt.inArray(o,r)>-1)i&&i.push(o);else if(c=mt.contains(o.ownerDocument,o),a=w(f.appendChild(o),"script"),c&&M(a),n)for(l=0;o=a[l++];)Jt.test(o.type||"")&&n.push(o);return f}function S(){return!0}function k(){return!1}function T(){try{return ot.activeElement}catch(t){}}function E(t,e,n,r,i,o){var a,u;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=void 0);for(u in e)E(t,u,n,r,e[u],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=k;else if(!i)return t;return 1===o&&(a=i,i=function(t){return mt().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=mt.guid++)),t.each(function(){mt.event.add(this,e,i,r,n)})}function C(t,e){return mt.nodeName(t,"table")&&mt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t:t}function N(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function A(t){var e=ue.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function L(t,e){var n,r,i,o,a,u,s,c;if(1===e.nodeType){if(Ft.hasData(t)&&(o=Ft.access(t),a=Ft.set(e,o),c=o.events)){delete a.handle,a.events={};for(i in c)for(n=0,r=c[i].length;n<r;n++)mt.event.add(e,i,c[i][n])}Ht.hasData(t)&&(u=Ht.access(t),s=mt.extend({},u),Ht.set(e,s))}}function q(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function D(t,e,n,r){e=st.apply([],e);var i,o,u,s,c,l,f=0,h=t.length,p=h-1,d=e[0],g=mt.isFunction(d);if(g||h>1&&"string"==typeof d&&!vt.checkClone&&ae.test(d))return t.each(function(i){var o=t.eq(i);g&&(e[0]=d.call(this,i,o.html())),D(o,e,n,r)});if(h&&(i=_(e,t[0].ownerDocument,!1,t,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=mt.map(w(i,"script"),N),s=u.length;f<h;f++)c=i,f!==p&&(c=mt.clone(c,!0,!0),s&&mt.merge(u,w(c,"script"))),n.call(t[f],c,f);if(s)for(l=u[u.length-1].ownerDocument,mt.map(u,A),f=0;f<s;f++)c=u[f],Jt.test(c.type||"")&&!Ft.access(c,"globalEval")&&mt.contains(l,c)&&(c.src?mt._evalUrl&&mt._evalUrl(c.src):a(c.textContent.replace(se,""),l))}return t}function j(t,e,n){for(var r,i=e?mt.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||mt.cleanData(w(r)),r.parentNode&&(n&&mt.contains(r.ownerDocument,r)&&M(w(r,"script")),r.parentNode.removeChild(r));return t}function R(t,e,n){var r,i,o,a,u=t.style;return n=n||fe(t),n&&(a=n.getPropertyValue(e)||n[e],""!==a||mt.contains(t.ownerDocument,t)||(a=mt.style(t,e)),!vt.pixelMarginRight()&&le.test(a)&&ce.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function P(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function O(t){if(t in ve)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ge.length;n--;)if(t=ge[n]+e,t in ve)return t}function z(t,e,n){var r=$t.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function F(t,e,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(a+=mt.css(t,n+Wt[o],!0,i)),r?("content"===n&&(a-=mt.css(t,"padding"+Wt[o],!0,i)),"margin"!==n&&(a-=mt.css(t,"border"+Wt[o]+"Width",!0,i))):(a+=mt.css(t,"padding"+Wt[o],!0,i),"padding"!==n&&(a+=mt.css(t,"border"+Wt[o]+"Width",!0,i)));return a}function H(t,e,n){var r,i=!0,o=fe(t),a="border-box"===mt.css(t,"boxSizing",!1,o);if(t.getClientRects().length&&(r=t.getBoundingClientRect()[e]),r<=0||null==r){if(r=R(t,e,o),(r<0||null==r)&&(r=t.style[e]),le.test(r))return r;i=a&&(vt.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+F(t,e,n||(a?"border":"content"),i,o)+"px"}function I(t,e,n,r,i){return new I.prototype.init(t,e,n,r,i)}function U(){me&&(n.requestAnimationFrame(U),mt.fx.tick())}function B(){return n.setTimeout(function(){ye=void 0}),ye=mt.now()}function $(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)n=Wt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function W(t,e,n){for(var r,i=(X.tweeners[e]||[]).concat(X.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function Y(t,e,n){var r,i,o,a,u,s,c,l,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&Yt(t),v=Ft.get(t,"fxshow");n.queue||(a=mt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,mt.queue(t,"fx").length||a.empty.fire()})}));for(r in e)if(i=e[r],xe.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}p[r]=v&&v[r]||mt.style(t,r)}if(s=!mt.isEmptyObject(e),s||!mt.isEmptyObject(p)){f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],c=v&&v.display,null==c&&(c=Ft.get(t,"display")),l=mt.css(t,"display"),"none"===l&&(c?l=c:(b([t],!0),c=t.style.display||c,l=mt.css(t,"display"),b([t]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===mt.css(t,"float")&&(s||(h.done(function(){d.display=c}),null==c&&(l=d.display,c="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),s=!1;for(r in p)s||(v?"hidden"in v&&(g=v.hidden):v=Ft.access(t,"fxshow",{display:c}),o&&(v.hidden=!g),g&&b([t],!0),h.done(function(){g||b([t]),Ft.remove(t,"fxshow");for(r in p)mt.style(t,r,p[r])})),s=W(g?v[r]:0,r,h),r in v||(v[r]=s.start,g&&(s.end=s.start,s.start=0))}}function V(t,e){var n,r,i,o,a;for(n in t)if(r=mt.camelCase(n),i=e[r],o=t[n],mt.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),a=mt.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function X(t,e,n){var r,i,o=0,a=X.prefilters.length,u=mt.Deferred().always(function(){delete s.elem}),s=function(){if(i)return!1;for(var e=ye||B(),n=Math.max(0,c.startTime+c.duration-e),r=n/c.duration||0,o=1-r,a=0,s=c.tweens.length;a<s;a++)c.tweens[a].run(o);return u.notifyWith(t,[c,o,n]),o<1&&s?n:(u.resolveWith(t,[c]),!1)},c=u.promise({elem:t,props:mt.extend({},e),opts:mt.extend(!0,{specialEasing:{},easing:mt.easing._default},n),originalProperties:e,originalOptions:n,startTime:ye||B(),duration:n.duration,tweens:[],createTween:function(e,n){var r=mt.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return e?(u.notifyWith(t,[c,1,0]),u.resolveWith(t,[c,e])):u.rejectWith(t,[c,e]),this}}),l=c.props;for(V(l,c.opts.specialEasing);o<a;o++)if(r=X.prefilters[o].call(c,t,l,c.opts))return mt.isFunction(r.stop)&&(mt._queueHooks(c.elem,c.opts.queue).stop=mt.proxy(r.stop,r)),r;return mt.map(l,W,c),mt.isFunction(c.opts.start)&&c.opts.start.call(t,c),mt.fx.timer(mt.extend(s,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function G(t){var e=t.match(jt)||[];return e.join(" ")}function Z(t){return t.getAttribute&&t.getAttribute("class")||""}function J(t,e,n,r){var i;if(mt.isArray(e))mt.each(e,function(e,i){n||Ae.test(t)?r(t,i):J(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==mt.type(e))r(t,e);else for(i in e)J(t+"["+i+"]",e[i],n,r)}function Q(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(jt)||[];if(mt.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function K(t,e,n,r){function i(u){var s;return o[u]=!0,mt.each(t[u]||[],function(t,u){var c=u(e,n,r);return"string"!=typeof c||a||o[c]?a?!(s=c):void 0:(e.dataTypes.unshift(c),i(c),!1)}),s}var o={},a=t===Ue;return i(e.dataTypes[0])||!o["*"]&&i("*")}function tt(t,e){var n,r,i=mt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&mt.extend(!0,t,r),t}function et(t,e,n){for(var r,i,o,a,u=t.contents,s=t.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in u)if(u[i]&&u[i].test(r)){s.unshift(i);break}if(s[0]in n)o=s[0];else{for(i in n){if(!s[0]||t.converters[i+" "+s[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==s[0]&&s.unshift(o),n[o]}function nt(t,e,n,r){var i,o,a,u,s,c={},l=t.dataTypes.slice();if(l[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!s&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),s=o,o=l.shift())if("*"===o)o=s;else if("*"!==s&&s!==o){if(a=c[s+" "+o]||c["* "+o],!a)for(i in c)if(u=i.split(" "),u[1]===o&&(a=c[s+" "+u[0]]||c["* "+u[0]])){a===!0?a=c[i]:c[i]!==!0&&(o=u[0],l.unshift(u[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+s+" to "+o}}}return{state:"success",data:e}}function rt(t){return mt.isWindow(t)?t:9===t.nodeType&&t.defaultView}var it=[],ot=n.document,at=Object.getPrototypeOf,ut=it.slice,st=it.concat,ct=it.push,lt=it.indexOf,ft={},ht=ft.toString,pt=ft.hasOwnProperty,dt=pt.toString,gt=dt.call(Object),vt={},yt="3.1.1",mt=function(t,e){return new mt.fn.init(t,e)},xt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,bt=/^-ms-/,wt=/-([a-z])/g,Mt=function(t,e){return e.toUpperCase()};mt.fn=mt.prototype={jquery:yt,constructor:mt,length:0,toArray:function(){return ut.call(this)},get:function(t){return null==t?ut.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=mt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return mt.each(this,t)},map:function(t){return this.pushStack(mt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(ut.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ct,sort:it.sort,splice:it.splice},mt.extend=mt.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},u=1,s=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[u]||{},u++),"object"==typeof a||mt.isFunction(a)||(a={}),u===s&&(a=this,u--);u<s;u++)if(null!=(t=arguments[u]))for(e in t)n=a[e],r=t[e],a!==r&&(c&&r&&(mt.isPlainObject(r)||(i=mt.isArray(r)))?(i?(i=!1,o=n&&mt.isArray(n)?n:[]):o=n&&mt.isPlainObject(n)?n:{},a[e]=mt.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},mt.extend({expando:"jQuery"+(yt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===mt.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=mt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==ht.call(t)||(e=at(t))&&(n=pt.call(e,"constructor")&&e.constructor,"function"!=typeof n||dt.call(n)!==gt))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?ft[ht.call(t)]||"object":typeof t},globalEval:function(t){a(t)},camelCase:function(t){return t.replace(bt,"ms-").replace(wt,Mt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,r=0;if(u(t))for(n=t.length;r<n&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(xt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(u(Object(t))?mt.merge(n,"string"==typeof t?[t]:t):ct.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:lt.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r,i=[],o=0,a=t.length,u=!n;o<a;o++)r=!e(t[o],o),r!==u&&i.push(t[o]);return i},map:function(t,e,n){var r,i,o=0,a=[];if(u(t))for(r=t.length;o<r;o++)i=e(t[o],o,n),null!=i&&a.push(i);else for(o in t)i=e(t[o],o,n),null!=i&&a.push(i);return st.apply([],a)},guid:1,proxy:function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),mt.isFunction(t))return r=ut.call(arguments,2),i=function(){return t.apply(e||this,r.concat(ut.call(arguments)))},i.guid=t.guid=t.guid||mt.guid++,i},now:Date.now,support:vt}),"function"==typeof Symbol&&(mt.fn[Symbol.iterator]=it[Symbol.iterator]),mt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){ft["[object "+e+"]"]=e.toLowerCase()});var _t=/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
function(t){function e(t,e,n,r){var i,o,a,u,s,c,l,h=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&((e?e.ownerDocument||e:I)!==D&&q(e),e=e||D,R)){if(11!==d&&(s=yt.exec(t)))if(i=s[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(h&&(a=h.getElementById(i))&&F(e,a)&&a.id===i)return n.push(a),n}else{if(s[2])return Q.apply(n,e.getElementsByTagName(t)),n;if((i=s[3])&&M.getElementsByClassName&&e.getElementsByClassName)return Q.apply(n,e.getElementsByClassName(i)),n}if(M.qsa&&!Y[t+" "]&&(!P||!P.test(t))){if(1!==d)h=e,l=t;else if("object"!==e.nodeName.toLowerCase()){for((u=e.getAttribute("id"))?u=u.replace(wt,Mt):e.setAttribute("id",u=H),c=T(t),o=c.length;o--;)c[o]="#"+u+" "+p(c[o]);l=c.join(","),h=mt.test(t)&&f(e.parentNode)||e}if(l)try{return Q.apply(n,h.querySelectorAll(l)),n}catch(g){}finally{u===H&&e.removeAttribute("id")}}}return C(t.replace(ut,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>_.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[H]=!0,t}function i(t){var e=D.createElement("fieldset");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=n.length;r--;)_.attrHandle[n[r]]=e}function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function u(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function s(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&St(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function l(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function f(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function d(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,u=B++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,s){var c,l,f,h=[U,u];if(s){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,s))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(f=e[H]||(e[H]={}),l=f[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((c=l[o])&&c[0]===U&&c[1]===u)return h[2]=c[2];if(l[o]=h,h[2]=t(e,n,s))return!0}return!1}}function g(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function v(t,n,r){for(var i=0,o=n.length;i<o;i++)e(t,n[i],r);return r}function y(t,e,n,r,i){for(var o,a=[],u=0,s=t.length,c=null!=e;u<s;u++)(o=t[u])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(u)));return a}function m(t,e,n,i,o,a){return i&&!i[H]&&(i=m(i)),o&&!o[H]&&(o=m(o,a)),r(function(r,a,u,s){var c,l,f,h=[],p=[],d=a.length,g=r||v(e||"*",u.nodeType?[u]:u,[]),m=!t||!r&&e?g:y(g,h,t,u,s),x=n?o||(r?t:d||i)?[]:a:m;if(n&&n(m,x,u,s),i)for(c=y(x,p),i(c,[],u,s),l=c.length;l--;)(f=c[l])&&(x[p[l]]=!(m[p[l]]=f));if(r){if(o||t){if(o){for(c=[],l=x.length;l--;)(f=x[l])&&c.push(m[l]=f);o(null,x=[],c,s)}for(l=x.length;l--;)(f=x[l])&&(c=o?tt(r,f):h[l])>-1&&(r[c]=!(a[c]=f))}}else x=y(x===a?x.splice(d,x.length):x),o?o(null,a,x,s):Q.apply(a,x)})}function x(t){for(var e,n,r,i=t.length,o=_.relative[t[0].type],a=o||_.relative[" "],u=o?1:0,s=d(function(t){return t===e},a,!0),c=d(function(t){return tt(e,t)>-1},a,!0),l=[function(t,n,r){var i=!o&&(r||n!==N)||((e=n).nodeType?s(t,n,r):c(t,n,r));return e=null,i}];u<i;u++)if(n=_.relative[t[u].type])l=[d(g(l),n)];else{if(n=_.filter[t[u].type].apply(null,t[u].matches),n[H]){for(r=++u;r<i&&!_.relative[t[r].type];r++);return m(u>1&&g(l),u>1&&p(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(ut,"$1"),n,u<r&&x(t.slice(u,r)),r<i&&x(t=t.slice(r)),r<i&&p(t))}l.push(n)}return g(l)}function b(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,u,s,c){var l,f,h,p=0,d="0",g=r&&[],v=[],m=N,x=r||o&&_.find.TAG("*",c),b=U+=null==m?1:Math.random()||.1,w=x.length;for(c&&(N=a===D||a||c);d!==w&&null!=(l=x[d]);d++){if(o&&l){for(f=0,a||l.ownerDocument===D||(q(l),u=!R);h=t[f++];)if(h(l,a||D,u)){s.push(l);break}c&&(U=b)}i&&((l=!h&&l)&&p--,r&&g.push(l))}if(p+=d,i&&d!==p){for(f=0;h=n[f++];)h(g,v,a,u);if(r){if(p>0)for(;d--;)g[d]||v[d]||(v[d]=Z.call(s));v=y(v)}Q.apply(s,v),c&&!r&&v.length>0&&p+n.length>1&&e.uniqueSort(s)}return c&&(U=b,N=m),g};return i?r(a):a}var w,M,_,S,k,T,E,C,N,A,L,q,D,j,R,P,O,z,F,H="sizzle"+1*new Date,I=t.document,U=0,B=0,$=n(),W=n(),Y=n(),V=function(t,e){return t===e&&(L=!0),0},X={}.hasOwnProperty,G=[],Z=G.pop,J=G.push,Q=G.push,K=G.slice,tt=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",it="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",ot=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),ut=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),st=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),lt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ft=new RegExp(ot),ht=new RegExp("^"+rt+"$"),pt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,mt=/[+~]/,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),bt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Mt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},_t=function(){q()},St=d(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Q.apply(G=K.call(I.childNodes),I.childNodes),G[I.childNodes.length].nodeType}catch(kt){Q={apply:G.length?function(t,e){J.apply(t,K.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}M=e.support={},k=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},q=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:I;return r!==D&&9===r.nodeType&&r.documentElement?(D=r,j=D.documentElement,R=!k(D),I!==D&&(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",_t,!1):n.attachEvent&&n.attachEvent("onunload",_t)),M.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),M.getElementsByTagName=i(function(t){return t.appendChild(D.createComment("")),!t.getElementsByTagName("*").length}),M.getElementsByClassName=vt.test(D.getElementsByClassName),M.getById=i(function(t){return j.appendChild(t).id=H,!D.getElementsByName||!D.getElementsByName(H).length}),M.getById?(_.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){return t.getAttribute("id")===e}},_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&R){var n=e.getElementById(t);return n?[n]:[]}}):(_.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&R){var n,r,i,o=e.getElementById(t);if(o){if(n=o.getAttributeNode("id"),n&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if(n=o.getAttributeNode("id"),n&&n.value===t)return[o]}return[]}}),_.find.TAG=M.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):M.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},_.find.CLASS=M.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&R)return e.getElementsByClassName(t)},O=[],P=[],(M.qsa=vt.test(D.querySelectorAll))&&(i(function(t){j.appendChild(t).innerHTML="<a id='"+H+"'></a><select id='"+H+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||P.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+H+"-]").length||P.push("~="),t.querySelectorAll(":checked").length||P.push(":checked"),t.querySelectorAll("a#"+H+"+*").length||P.push(".#.+[+~]")}),i(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=D.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&P.push("name"+nt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&P.push(":enabled",":disabled"),j.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&P.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),P.push(",.*:")})),(M.matchesSelector=vt.test(z=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&i(function(t){M.disconnectedMatch=z.call(t,"*"),z.call(t,"[s!='']:x"),O.push("!=",ot)}),P=P.length&&new RegExp(P.join("|")),O=O.length&&new RegExp(O.join("|")),e=vt.test(j.compareDocumentPosition),F=e||vt.test(j.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},V=e?function(t,e){if(t===e)return L=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!M.sortDetached&&e.compareDocumentPosition(t)===n?t===D||t.ownerDocument===I&&F(I,t)?-1:e===D||e.ownerDocument===I&&F(I,e)?1:A?tt(A,t)-tt(A,e):0:4&n?-1:1)}:function(t,e){if(t===e)return L=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,u=[t],s=[e];if(!i||!o)return t===D?-1:e===D?1:i?-1:o?1:A?tt(A,t)-tt(A,e):0;if(i===o)return a(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;u[r]===s[r];)r++;return r?a(u[r],s[r]):u[r]===I?-1:s[r]===I?1:0},D):D},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==D&&q(t),n=n.replace(lt,"='$1']"),M.matchesSelector&&R&&!Y[n+" "]&&(!O||!O.test(n))&&(!P||!P.test(n)))try{var r=z.call(t,n);if(r||M.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(i){}return e(n,D,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==D&&q(t),F(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==D&&q(t);var n=_.attrHandle[e.toLowerCase()],r=n&&X.call(_.attrHandle,e.toLowerCase())?n(t,e,!R):void 0;return void 0!==r?r:M.attributes||!R?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.escape=function(t){return(t+"").replace(wt,Mt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(L=!M.detectDuplicates,A=!M.sortStable&&t.slice(0),t.sort(V),L){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return A=null,t},S=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=S(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=S(e);return n},_=e.selectors={cacheLength:50,createPseudo:r,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,bt),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,bt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ft.test(n)&&(e=T(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,bt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=$[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&$(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(at," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),u="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,s){var c,l,f,h,p,d,g=o!==a?"nextSibling":"previousSibling",v=e.parentNode,y=u&&e.nodeName.toLowerCase(),m=!s&&!u,x=!1;if(v){if(o){for(;g;){for(h=e;h=h[g];)if(u?h.nodeName.toLowerCase()===y:1===h.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?v.firstChild:v.lastChild],a&&m){for(h=v,f=h[H]||(h[H]={}),l=f[h.uniqueID]||(f[h.uniqueID]={}),c=l[t]||[],p=c[0]===U&&c[1],x=p&&c[2],h=p&&v.childNodes[p];h=++p&&h&&h[g]||(x=p=0)||d.pop();)if(1===h.nodeType&&++x&&h===e){l[t]=[U,p,x];break}}else if(m&&(h=e,f=h[H]||(h[H]={}),l=f[h.uniqueID]||(f[h.uniqueID]={}),c=l[t]||[],p=c[0]===U&&c[1],x=p),x===!1)for(;(h=++p&&h&&h[g]||(x=p=0)||d.pop())&&((u?h.nodeName.toLowerCase()!==y:1!==h.nodeType)||!++x||(m&&(f=h[H]||(h[H]={}),l=f[h.uniqueID]||(f[h.uniqueID]={}),l[t]=[U,x]),h!==e)););return x-=i,x===r||x%r===0&&x/r>=0}}},PSEUDO:function(t,n){var i,o=_.pseudos[t]||_.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[H]?o(n):o.length>1?(i=[t,t,"",n],_.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)r=tt(t,i[a]),t[r]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=E(t.replace(ut,"$1"));return i[H]?r(function(t,e,n,r){for(var o,a=i(t,null,r,[]),u=t.length;u--;)(o=a[u])&&(t[u]=!(e[u]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(xt,bt),function(e){return(e.textContent||e.innerText||S(e)).indexOf(t)>-1}}),lang:r(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,bt).toLowerCase(),function(e){var n;do if(n=R?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===j},focus:function(t){return t===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!_.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:l(function(){return[0]}),last:l(function(t,e){return[e-1]}),eq:l(function(t,e,n){return[n<0?n+e:n]}),even:l(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:l(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:l(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:l(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}},_.pseudos.nth=_.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[w]=u(w);for(w in{submit:!0,reset:!0})_.pseudos[w]=s(w);return h.prototype=_.filters=_.pseudos,_.setFilters=new h,T=e.tokenize=function(t,n){var r,i,o,a,u,s,c,l=W[t+" "];if(l)return n?0:l.slice(0);for(u=t,s=[],c=_.preFilter;u;){r&&!(i=st.exec(u))||(i&&(u=u.slice(i[0].length)||u),s.push(o=[])),r=!1,(i=ct.exec(u))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ut," ")}),u=u.slice(r.length));for(a in _.filter)!(i=pt[a].exec(u))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),u=u.slice(r.length));if(!r)break}return n?u.length:u?e.error(t):W(t,s).slice(0)},E=e.compile=function(t,e){var n,r=[],i=[],o=Y[t+" "];if(!o){for(e||(e=T(t)),n=e.length;n--;)o=x(e[n]),o[H]?r.push(o):i.push(o);o=Y(t,b(i,r)),o.selector=t}return o},C=e.select=function(t,e,n,r){var i,o,a,u,s,c="function"==typeof t&&t,l=!r&&T(t=c.selector||t);if(n=n||[],1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===e.nodeType&&R&&_.relative[o[1].type]){if(e=(_.find.ID(a.matches[0].replace(xt,bt),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=pt.needsContext.test(t)?0:o.length;i--&&(a=o[i],!_.relative[u=a.type]);)if((s=_.find[u])&&(r=s(a.matches[0].replace(xt,bt),mt.test(o[0].type)&&f(e.parentNode)||e))){if(o.splice(i,1),t=r.length&&p(o),!t)return Q.apply(n,r),n;break}}return(c||E(t,l))(r,e,!R,n,!e||mt.test(t)&&f(e.parentNode)||e),n},M.sortStable=H.split("").sort(V).join("")===H,M.detectDuplicates=!!L,q(),M.sortDetached=i(function(t){return 1&t.compareDocumentPosition(D.createElement("fieldset"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),M.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var r;if(!n)return t[e]===!0?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(n);mt.find=_t,mt.expr=_t.selectors,mt.expr[":"]=mt.expr.pseudos,mt.uniqueSort=mt.unique=_t.uniqueSort,mt.text=_t.getText,mt.isXMLDoc=_t.isXML,mt.contains=_t.contains,mt.escapeSelector=_t.escape;var St=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&mt(t).is(n))break;r.push(t)}return r},kt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},Tt=mt.expr.match.needsContext,Et=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ct=/^.[^:#\[\.,]*$/;mt.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?mt.find.matchesSelector(r,t)?[r]:[]:mt.find.matches(t,mt.grep(e,function(t){return 1===t.nodeType}))},mt.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(mt(t).filter(function(){for(e=0;e<r;e++)if(mt.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)mt.find(t,i[e],n);return r>1?mt.uniqueSort(n):n},filter:function(t){return this.pushStack(s(this,t||[],!1))},not:function(t){return this.pushStack(s(this,t||[],!0))},is:function(t){return!!s(this,"string"==typeof t&&Tt.test(t)?mt(t):t||[],!1).length}});var Nt,At=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Lt=mt.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||Nt,"string"==typeof t){if(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:At.exec(t),!r||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof mt?e[0]:e,mt.merge(this,mt.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:ot,!0)),Et.test(r[1])&&mt.isPlainObject(e))for(r in e)mt.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return i=ot.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):mt.isFunction(t)?void 0!==n.ready?n.ready(t):t(mt):mt.makeArray(t,this)};Lt.prototype=mt.fn,Nt=mt(ot);var qt=/^(?:parents|prev(?:Until|All))/,Dt={children:!0,contents:!0,next:!0,prev:!0};mt.fn.extend({has:function(t){var e=mt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(mt.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&mt(t);if(!Tt.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&mt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?mt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?lt.call(mt(t),this[0]):lt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(mt.uniqueSort(mt.merge(this.get(),mt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),mt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return St(t,"parentNode")},parentsUntil:function(t,e,n){return St(t,"parentNode",n)},next:function(t){return c(t,"nextSibling")},prev:function(t){return c(t,"previousSibling")},nextAll:function(t){return St(t,"nextSibling")},prevAll:function(t){return St(t,"previousSibling")},nextUntil:function(t,e,n){return St(t,"nextSibling",n)},prevUntil:function(t,e,n){return St(t,"previousSibling",n)},siblings:function(t){return kt((t.parentNode||{}).firstChild,t)},children:function(t){return kt(t.firstChild)},contents:function(t){return t.contentDocument||mt.merge([],t.childNodes)}},function(t,e){mt.fn[t]=function(n,r){var i=mt.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=mt.filter(r,i)),this.length>1&&(Dt[t]||mt.uniqueSort(i),qt.test(t)&&i.reverse()),this.pushStack(i)}});var jt=/[^\x20\t\r\n\f]+/g;mt.Callbacks=function(t){t="string"==typeof t?l(t):mt.extend({},t);var e,n,r,i,o=[],a=[],u=-1,s=function(){for(i=t.once,r=e=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)o[u].apply(n[0],n[1])===!1&&t.stopOnFalse&&(u=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(u=o.length-1,a.push(n)),function r(e){mt.each(e,function(e,n){mt.isFunction(n)?t.unique&&c.has(n)||o.push(n):n&&n.length&&"string"!==mt.type(n)&&r(n)})}(arguments),n&&!e&&s()),this},remove:function(){return mt.each(arguments,function(t,e){for(var n;(n=mt.inArray(e,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(t){return t?mt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||s()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},mt.extend({Deferred:function(t){var e=[["notify","progress",mt.Callbacks("memory"),mt.Callbacks("memory"),2],["resolve","done",mt.Callbacks("once memory"),mt.Callbacks("once memory"),0,"resolved"],["reject","fail",mt.Callbacks("once memory"),mt.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(t){return i.then(null,t)},pipe:function(){var t=arguments;return mt.Deferred(function(n){mt.each(e,function(e,r){var i=mt.isFunction(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&mt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,r,i){function o(t,e,r,i){return function(){var u=this,s=arguments,c=function(){var n,c;if(!(t<a)){if(n=r.apply(u,s),n===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,mt.isFunction(c)?i?c.call(n,o(a,e,f,i),o(a,e,h,i)):(a++,c.call(n,o(a,e,f,i),o(a,e,h,i),o(a,e,f,e.notifyWith))):(r!==f&&(u=void 0,s=[n]),(i||e.resolveWith)(u,s))}},l=i?c:function(){try{c()}catch(n){mt.Deferred.exceptionHook&&mt.Deferred.exceptionHook(n,l.stackTrace),t+1>=a&&(r!==h&&(u=void 0,s=[n]),e.rejectWith(u,s))}};t?l():(mt.Deferred.getStackHook&&(l.stackTrace=mt.Deferred.getStackHook()),n.setTimeout(l))}}var a=0;return mt.Deferred(function(n){e[0][3].add(o(0,n,mt.isFunction(i)?i:f,n.notifyWith)),e[1][3].add(o(0,n,mt.isFunction(t)?t:f)),e[2][3].add(o(0,n,mt.isFunction(r)?r:h))}).promise()},promise:function(t){return null!=t?mt.extend(t,i):i}},o={};return mt.each(e,function(t,n){var a=n[2],u=n[5];i[n[1]]=a.add,u&&a.add(function(){r=u},e[3-t][2].disable,e[0][2].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=ut.call(arguments),o=mt.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?ut.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(p(t,o.done(a(n)).resolve,o.reject),"pending"===o.state()||mt.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)p(i[n],a(n),o.reject);return o.promise()}});var Rt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;mt.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&Rt.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},mt.readyException=function(t){n.setTimeout(function(){throw t})};var Pt=mt.Deferred();mt.fn.ready=function(t){return Pt.then(t)["catch"](function(t){mt.readyException(t)}),this},mt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?mt.readyWait++:mt.ready(!0)},ready:function(t){(t===!0?--mt.readyWait:mt.isReady)||(mt.isReady=!0,t!==!0&&--mt.readyWait>0||Pt.resolveWith(ot,[mt]))}}),mt.ready.then=Pt.then,"complete"===ot.readyState||"loading"!==ot.readyState&&!ot.documentElement.doScroll?n.setTimeout(mt.ready):(ot.addEventListener("DOMContentLoaded",d),n.addEventListener("load",d));var Ot=function(t,e,n,r,i,o,a){var u=0,s=t.length,c=null==n;if("object"===mt.type(n)){i=!0;for(u in n)Ot(t,e,u,n[u],!0,o,a)}else if(void 0!==r&&(i=!0,mt.isFunction(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(mt(t),n)})),e))for(;u<s;u++)e(t[u],n,a?r:r.call(t[u],u,e(t[u],n)));return i?t:c?e.call(t):s?e(t[0],n):o},zt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};g.uid=1,g.prototype={cache:function(t){var e=t[this.expando];return e||(e={},zt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[mt.camelCase(e)]=n;else for(r in e)i[mt.camelCase(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][mt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){mt.isArray(e)?e=e.map(mt.camelCase):(e=mt.camelCase(e),e=e in r?[e]:e.match(jt)||[]),n=e.length;for(;n--;)delete r[e[n]]}(void 0===e||mt.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!mt.isEmptyObject(e)}};var Ft=new g,Ht=new g,It=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ut=/[A-Z]/g;mt.extend({hasData:function(t){return Ht.hasData(t)||Ft.hasData(t)},data:function(t,e,n){return Ht.access(t,e,n)},removeData:function(t,e){Ht.remove(t,e)},_data:function(t,e,n){return Ft.access(t,e,n)},_removeData:function(t,e){Ft.remove(t,e)}}),mt.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=Ht.get(o),1===o.nodeType&&!Ft.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=mt.camelCase(r.slice(5)),y(o,r,i[r])));Ft.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Ht.set(this,t)}):Ot(this,function(e){var n;if(o&&void 0===e){if(n=Ht.get(o,t),void 0!==n)return n;if(n=y(o,t),void 0!==n)return n}else this.each(function(){Ht.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Ht.remove(this,t)})}}),mt.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Ft.get(t,e),n&&(!r||mt.isArray(n)?r=Ft.access(t,e,mt.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=mt.queue(t,e),r=n.length,i=n.shift(),o=mt._queueHooks(t,e),a=function(){mt.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Ft.get(t,n)||Ft.access(t,n,{empty:mt.Callbacks("once memory").add(function(){Ft.remove(t,[e+"queue",n])})})}}),mt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?mt.queue(this[0],t):void 0===e?this:this.each(function(){var n=mt.queue(this,t,e);mt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&mt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){mt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=mt.Deferred(),o=this,a=this.length,u=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)n=Ft.get(o[a],t+"queueHooks"),n&&n.empty&&(r++,n.empty.add(u));return u(),i.promise(e)}});var Bt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,$t=new RegExp("^(?:([+-])=|)("+Bt+")([a-z%]*)$","i"),Wt=["Top","Right","Bottom","Left"],Yt=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&mt.contains(t.ownerDocument,t)&&"none"===mt.css(t,"display")},Vt=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=a[o];return i},Xt={};mt.fn.extend({show:function(){return b(this,!0)},hide:function(){return b(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Yt(this)?mt(this).show():mt(this).hide()})}});var Gt=/^(?:checkbox|radio)$/i,Zt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Jt=/^$|\/(?:java|ecma)script/i,Qt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Qt.optgroup=Qt.option,Qt.tbody=Qt.tfoot=Qt.colgroup=Qt.caption=Qt.thead,
Qt.th=Qt.td;var Kt=/<|&#?\w+;/;!function(){var t=ot.createDocumentFragment(),e=t.appendChild(ot.createElement("div")),n=ot.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),vt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",vt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var te=ot.documentElement,ee=/^key/,ne=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,re=/^([^.]*)(?:\.(.+)|)/;mt.event={global:{},add:function(t,e,n,r,i){var o,a,u,s,c,l,f,h,p,d,g,v=Ft.get(t);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&mt.find.matchesSelector(te,i),n.guid||(n.guid=mt.guid++),(s=v.events)||(s=v.events={}),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof mt&&mt.event.triggered!==e.type?mt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(jt)||[""],c=e.length;c--;)u=re.exec(e[c])||[],p=g=u[1],d=(u[2]||"").split(".").sort(),p&&(f=mt.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=mt.event.special[p]||{},l=mt.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&mt.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=s[p])||(h=s[p]=[],h.delegateCount=0,f.setup&&f.setup.call(t,r,d,a)!==!1||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,l):h.push(l),mt.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,u,s,c,l,f,h,p,d,g,v=Ft.hasData(t)&&Ft.get(t);if(v&&(s=v.events)){for(e=(e||"").match(jt)||[""],c=e.length;c--;)if(u=re.exec(e[c])||[],p=g=u[1],d=(u[2]||"").split(".").sort(),p){for(f=mt.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,h=s[p]||[],u=u[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)l=h[o],!i&&g!==l.origType||n&&n.guid!==l.guid||u&&!u.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));a&&!h.length&&(f.teardown&&f.teardown.call(t,d,v.handle)!==!1||mt.removeEvent(t,p,v.handle),delete s[p])}else for(p in s)mt.event.remove(t,p+e[c],n,r,!0);mt.isEmptyObject(s)&&Ft.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,u=mt.event.fix(t),s=new Array(arguments.length),c=(Ft.get(this,"events")||{})[u.type]||[],l=mt.event.special[u.type]||{};for(s[0]=u,e=1;e<arguments.length;e++)s[e]=arguments[e];if(u.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,u)!==!1){for(a=mt.event.handlers.call(this,u,c),e=0;(i=a[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,r=((mt.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(u.result=r)===!1&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,a,u=[],s=e.delegateCount,c=t.target;if(s&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||c.disabled!==!0)){for(o=[],a={},n=0;n<s;n++)r=e[n],i=r.selector+" ",void 0===a[i]&&(a[i]=r.needsContext?mt(i,this).index(c)>-1:mt.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&u.push({elem:c,handlers:o})}return c=this,s<e.length&&u.push({elem:c,handlers:e.slice(s)}),u},addProp:function(t,e){Object.defineProperty(mt.Event.prototype,t,{enumerable:!0,configurable:!0,get:mt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[mt.expando]?t:new mt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&mt.nodeName(this,"input"))return this.click(),!1},_default:function(t){return mt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},mt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},mt.Event=function(t,e){return this instanceof mt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?S:k,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&mt.extend(this,e),this.timeStamp=t&&t.timeStamp||mt.now(),void(this[mt.expando]=!0)):new mt.Event(t,e)},mt.Event.prototype={constructor:mt.Event,isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=S,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=S,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=S,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},mt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&ee.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&ne.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},mt.event.addProp),mt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){mt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||mt.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),mt.fn.extend({on:function(t,e,n,r){return E(this,t,e,n,r)},one:function(t,e,n,r){return E(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,mt(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=k),this.each(function(){mt.event.remove(this,t,n,e)})}});var ie=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,oe=/<script|<style|<link/i,ae=/checked\s*(?:[^=]|=\s*.checked.)/i,ue=/^true\/(.*)/,se=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;mt.extend({htmlPrefilter:function(t){return t.replace(ie,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,u=t.cloneNode(!0),s=mt.contains(t.ownerDocument,t);if(!(vt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||mt.isXMLDoc(t)))for(a=w(u),o=w(t),r=0,i=o.length;r<i;r++)q(o[r],a[r]);if(e)if(n)for(o=o||w(t),a=a||w(u),r=0,i=o.length;r<i;r++)L(o[r],a[r]);else L(t,u);return a=w(u,"script"),a.length>0&&M(a,!s&&w(t,"script")),u},cleanData:function(t){for(var e,n,r,i=mt.event.special,o=0;void 0!==(n=t[o]);o++)if(zt(n)){if(e=n[Ft.expando]){if(e.events)for(r in e.events)i[r]?mt.event.remove(n,r):mt.removeEvent(n,r,e.handle);n[Ft.expando]=void 0}n[Ht.expando]&&(n[Ht.expando]=void 0)}}}),mt.fn.extend({detach:function(t){return j(this,t,!0)},remove:function(t){return j(this,t)},text:function(t){return Ot(this,function(t){return void 0===t?mt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return D(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=C(this,t);e.appendChild(t)}})},prepend:function(){return D(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=C(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return D(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return D(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(mt.cleanData(w(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return mt.clone(this,t,e)})},html:function(t){return Ot(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!oe.test(t)&&!Qt[(Zt.exec(t)||["",""])[1].toLowerCase()]){t=mt.htmlPrefilter(t);try{for(;n<r;n++)e=this[n]||{},1===e.nodeType&&(mt.cleanData(w(e,!1)),e.innerHTML=t);e=0}catch(i){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return D(this,arguments,function(e){var n=this.parentNode;mt.inArray(this,t)<0&&(mt.cleanData(w(this)),n&&n.replaceChild(e,this))},t)}}),mt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){mt.fn[t]=function(t){for(var n,r=[],i=mt(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),mt(i[a])[e](n),ct.apply(r,n.get());return this.pushStack(r)}});var ce=/^margin/,le=new RegExp("^("+Bt+")(?!px)[a-z%]+$","i"),fe=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)};!function(){function t(){if(u){u.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",u.innerHTML="",te.appendChild(a);var t=n.getComputedStyle(u);e="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,u.style.marginRight="50%",i="4px"===t.marginRight,te.removeChild(a),u=null}}var e,r,i,o,a=ot.createElement("div"),u=ot.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",vt.clearCloneStyle="content-box"===u.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(u),mt.extend(vt,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var he=/^(none|table(?!-c[ea]).+)/,pe={position:"absolute",visibility:"hidden",display:"block"},de={letterSpacing:"0",fontWeight:"400"},ge=["Webkit","Moz","ms"],ve=ot.createElement("div").style;mt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=R(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,u=mt.camelCase(e),s=t.style;return e=mt.cssProps[u]||(mt.cssProps[u]=O(u)||u),a=mt.cssHooks[e]||mt.cssHooks[u],void 0===n?a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:s[e]:(o=typeof n,"string"===o&&(i=$t.exec(n))&&i[1]&&(n=m(t,e,i),o="number"),void(null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(mt.cssNumber[u]?"":"px")),vt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(s[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(s[e]=n))))}},css:function(t,e,n,r){var i,o,a,u=mt.camelCase(e);return e=mt.cssProps[u]||(mt.cssProps[u]=O(u)||u),a=mt.cssHooks[e]||mt.cssHooks[u],a&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=R(t,e,r)),"normal"===i&&e in de&&(i=de[e]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),mt.each(["height","width"],function(t,e){mt.cssHooks[e]={get:function(t,n,r){if(n)return!he.test(mt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?H(t,e,r):Vt(t,pe,function(){return H(t,e,r)})},set:function(t,n,r){var i,o=r&&fe(t),a=r&&F(t,e,r,"border-box"===mt.css(t,"boxSizing",!1,o),o);return a&&(i=$t.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=mt.css(t,e)),z(t,n,a)}}}),mt.cssHooks.marginLeft=P(vt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(R(t,"marginLeft"))||t.getBoundingClientRect().left-Vt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),mt.each({margin:"",padding:"",border:"Width"},function(t,e){mt.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+Wt[r]+e]=o[r]||o[r-2]||o[0];return i}},ce.test(t)||(mt.cssHooks[t+e].set=z)}),mt.fn.extend({css:function(t,e){return Ot(this,function(t,e,n){var r,i,o={},a=0;if(mt.isArray(e)){for(r=fe(t),i=e.length;a<i;a++)o[e[a]]=mt.css(t,e[a],!1,r);return o}return void 0!==n?mt.style(t,e,n):mt.css(t,e)},t,e,arguments.length>1)}}),mt.Tween=I,I.prototype={constructor:I,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||mt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(mt.cssNumber[n]?"":"px")},cur:function(){var t=I.propHooks[this.prop];return t&&t.get?t.get(this):I.propHooks._default.get(this)},run:function(t){var e,n=I.propHooks[this.prop];return this.options.duration?this.pos=e=mt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=mt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){mt.fx.step[t.prop]?mt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[mt.cssProps[t.prop]]&&!mt.cssHooks[t.prop]?t.elem[t.prop]=t.now:mt.style(t.elem,t.prop,t.now+t.unit)}}},I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},mt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},mt.fx=I.prototype.init,mt.fx.step={};var ye,me,xe=/^(?:toggle|show|hide)$/,be=/queueHooks$/;mt.Animation=mt.extend(X,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return m(n.elem,t,$t.exec(e),n),n}]},tweener:function(t,e){mt.isFunction(t)?(e=t,t=["*"]):t=t.match(jt);for(var n,r=0,i=t.length;r<i;r++)n=t[r],X.tweeners[n]=X.tweeners[n]||[],X.tweeners[n].unshift(e)},prefilters:[Y],prefilter:function(t,e){e?X.prefilters.unshift(t):X.prefilters.push(t)}}),mt.speed=function(t,e,n){var r=t&&"object"==typeof t?mt.extend({},t):{complete:n||!n&&e||mt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!mt.isFunction(e)&&e};return mt.fx.off||ot.hidden?r.duration=0:"number"!=typeof r.duration&&(r.duration in mt.fx.speeds?r.duration=mt.fx.speeds[r.duration]:r.duration=mt.fx.speeds._default),null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){mt.isFunction(r.old)&&r.old.call(this),r.queue&&mt.dequeue(this,r.queue)},r},mt.fn.extend({fadeTo:function(t,e,n,r){return this.filter(Yt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=mt.isEmptyObject(t),o=mt.speed(e,n,r),a=function(){var e=X(this,mt.extend({},t),o);(i||Ft.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=mt.timers,a=Ft.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&be.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||mt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Ft.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=mt.timers,a=r?r.length:0;for(n.finish=!0,mt.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),mt.each(["toggle","show","hide"],function(t,e){var n=mt.fn[e];mt.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate($(e,!0),t,r,i)}}),mt.each({slideDown:$("show"),slideUp:$("hide"),slideToggle:$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){mt.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),mt.timers=[],mt.fx.tick=function(){var t,e=0,n=mt.timers;for(ye=mt.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||mt.fx.stop(),ye=void 0},mt.fx.timer=function(t){mt.timers.push(t),t()?mt.fx.start():mt.timers.pop()},mt.fx.interval=13,mt.fx.start=function(){me||(me=n.requestAnimationFrame?n.requestAnimationFrame(U):n.setInterval(mt.fx.tick,mt.fx.interval))},mt.fx.stop=function(){n.cancelAnimationFrame?n.cancelAnimationFrame(me):n.clearInterval(me),me=null},mt.fx.speeds={slow:600,fast:200,_default:400},mt.fn.delay=function(t,e){return t=mt.fx?mt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}})},function(){var t=ot.createElement("input"),e=ot.createElement("select"),n=e.appendChild(ot.createElement("option"));t.type="checkbox",vt.checkOn=""!==t.value,vt.optSelected=n.selected,t=ot.createElement("input"),t.value="t",t.type="radio",vt.radioValue="t"===t.value}();var we,Me=mt.expr.attrHandle;mt.fn.extend({attr:function(t,e){return Ot(this,mt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){mt.removeAttr(this,t)})}}),mt.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?mt.prop(t,e,n):(1===o&&mt.isXMLDoc(t)||(i=mt.attrHooks[e.toLowerCase()]||(mt.expr.match.bool.test(e)?we:void 0)),void 0!==n?null===n?void mt.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=mt.find.attr(t,e),null==r?void 0:r))},attrHooks:{type:{set:function(t,e){if(!vt.radioValue&&"radio"===e&&mt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(jt);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),we={set:function(t,e,n){return e===!1?mt.removeAttr(t,n):t.setAttribute(n,n),n}},mt.each(mt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=Me[e]||mt.find.attr;Me[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=Me[a],Me[a]=i,i=null!=n(t,e,r)?a:null,Me[a]=o),i}});var _e=/^(?:input|select|textarea|button)$/i,Se=/^(?:a|area)$/i;mt.fn.extend({prop:function(t,e){return Ot(this,mt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[mt.propFix[t]||t]})}}),mt.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&mt.isXMLDoc(t)||(e=mt.propFix[e]||e,i=mt.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=mt.find.attr(t,"tabindex");return e?parseInt(e,10):_e.test(t.nodeName)||Se.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),vt.optSelected||(mt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),mt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){mt.propFix[this.toLowerCase()]=this}),mt.fn.extend({addClass:function(t){var e,n,r,i,o,a,u,s=0;if(mt.isFunction(t))return this.each(function(e){mt(this).addClass(t.call(this,e,Z(this)))});if("string"==typeof t&&t)for(e=t.match(jt)||[];n=this[s++];)if(i=Z(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");u=G(r),i!==u&&n.setAttribute("class",u)}return this},removeClass:function(t){var e,n,r,i,o,a,u,s=0;if(mt.isFunction(t))return this.each(function(e){mt(this).removeClass(t.call(this,e,Z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(jt)||[];n=this[s++];)if(i=Z(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");u=G(r),i!==u&&n.setAttribute("class",u)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):mt.isFunction(t)?this.each(function(n){mt(this).toggleClass(t.call(this,n,Z(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(r=0,i=mt(this),o=t.match(jt)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||(e=Z(this),e&&Ft.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Ft.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+G(Z(n))+" ").indexOf(e)>-1)return!0;return!1}});var ke=/\r/g;mt.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=mt.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,mt(this).val()):t,null==i?i="":"number"==typeof i?i+="":mt.isArray(i)&&(i=mt.map(i,function(t){return null==t?"":t+""})),e=mt.valHooks[this.type]||mt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))})):i?(e=mt.valHooks[i.type]||mt.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(ke,""):null==n?"":n)):void 0}}),mt.extend({valHooks:{option:{get:function(t){var e=mt.find.attr(t,"value");return null!=e?e:G(mt.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,u=a?null:[],s=a?o+1:i.length;for(r=o<0?s:a?o:0;r<s;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!mt.nodeName(n.parentNode,"optgroup"))){if(e=mt(n).val(),a)return e;u.push(e)}return u},set:function(t,e){for(var n,r,i=t.options,o=mt.makeArray(e),a=i.length;a--;)r=i[a],(r.selected=mt.inArray(mt.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),mt.each(["radio","checkbox"],function(){mt.valHooks[this]={set:function(t,e){if(mt.isArray(e))return t.checked=mt.inArray(mt(t).val(),e)>-1}},vt.checkOn||(mt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Te=/^(?:focusinfocus|focusoutblur)$/;mt.extend(mt.event,{trigger:function(t,e,r,i){var o,a,u,s,c,l,f,h=[r||ot],p=pt.call(t,"type")?t.type:t,d=pt.call(t,"namespace")?t.namespace.split("."):[];if(a=u=r=r||ot,3!==r.nodeType&&8!==r.nodeType&&!Te.test(p+mt.event.triggered)&&(p.indexOf(".")>-1&&(d=p.split("."),p=d.shift(),d.sort()),c=p.indexOf(":")<0&&"on"+p,t=t[mt.expando]?t:new mt.Event(p,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:mt.makeArray(e,[t]),f=mt.event.special[p]||{},i||!f.trigger||f.trigger.apply(r,e)!==!1)){if(!i&&!f.noBubble&&!mt.isWindow(r)){for(s=f.delegateType||p,Te.test(s+p)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||ot)&&h.push(u.defaultView||u.parentWindow||n)}for(o=0;(a=h[o++])&&!t.isPropagationStopped();)t.type=o>1?s:f.bindType||p,l=(Ft.get(a,"events")||{})[t.type]&&Ft.get(a,"handle"),l&&l.apply(a,e),l=c&&a[c],l&&l.apply&&zt(a)&&(t.result=l.apply(a,e),t.result===!1&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),e)!==!1||!zt(r)||c&&mt.isFunction(r[p])&&!mt.isWindow(r)&&(u=r[c],u&&(r[c]=null),mt.event.triggered=p,r[p](),mt.event.triggered=void 0,u&&(r[c]=u)),t.result}},simulate:function(t,e,n){var r=mt.extend(new mt.Event,n,{type:t,isSimulated:!0});mt.event.trigger(r,null,e)}}),mt.fn.extend({trigger:function(t,e){return this.each(function(){mt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return mt.event.trigger(t,e,n,!0)}}),mt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){mt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),mt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),vt.focusin="onfocusin"in n,vt.focusin||mt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){mt.event.simulate(e,t.target,mt.event.fix(t))};mt.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Ft.access(r,e);i||r.addEventListener(t,n,!0),Ft.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ft.access(r,e)-1;i?Ft.access(r,e,i):(r.removeEventListener(t,n,!0),Ft.remove(r,e))}}});var Ee=n.location,Ce=mt.now(),Ne=/\?/;mt.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(r){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||mt.error("Invalid XML: "+t),e};var Ae=/\[\]$/,Le=/\r?\n/g,qe=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;mt.param=function(t,e){var n,r=[],i=function(t,e){var n=mt.isFunction(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(mt.isArray(t)||t.jquery&&!mt.isPlainObject(t))mt.each(t,function(){i(this.name,this.value)});else for(n in t)J(n,t[n],e,i);return r.join("&")},mt.fn.extend({serialize:function(){return mt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=mt.prop(this,"elements");return t?mt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!mt(this).is(":disabled")&&De.test(this.nodeName)&&!qe.test(t)&&(this.checked||!Gt.test(t))}).map(function(t,e){var n=mt(this).val();return null==n?null:mt.isArray(n)?mt.map(n,function(t){return{name:e.name,value:t.replace(Le,"\r\n")}}):{name:e.name,value:n.replace(Le,"\r\n")}}).get()}});var je=/%20/g,Re=/#.*$/,Pe=/([?&])_=[^&]*/,Oe=/^(.*?):[ \t]*([^\r\n]*)$/gm,ze=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Fe=/^(?:GET|HEAD)$/,He=/^\/\//,Ie={},Ue={},Be="*/".concat("*"),$e=ot.createElement("a");$e.href=Ee.href,mt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ee.href,type:"GET",isLocal:ze.test(Ee.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":mt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?tt(tt(t,mt.ajaxSettings),e):tt(mt.ajaxSettings,t)},ajaxPrefilter:Q(Ie),ajaxTransport:Q(Ue),ajax:function(t,e){function r(t,e,r,u){var c,h,p,b,w,M=e;l||(l=!0,s&&n.clearTimeout(s),i=void 0,a=u||"",_.readyState=t>0?4:0,c=t>=200&&t<300||304===t,r&&(b=et(d,_,r)),b=nt(d,b,_,c),c?(d.ifModified&&(w=_.getResponseHeader("Last-Modified"),w&&(mt.lastModified[o]=w),w=_.getResponseHeader("etag"),w&&(mt.etag[o]=w)),204===t||"HEAD"===d.type?M="nocontent":304===t?M="notmodified":(M=b.state,h=b.data,p=b.error,c=!p)):(p=M,!t&&M||(M="error",t<0&&(t=0))),_.status=t,_.statusText=(e||M)+"",c?y.resolveWith(g,[h,M,_]):y.rejectWith(g,[_,M,p]),_.statusCode(x),x=void 0,f&&v.trigger(c?"ajaxSuccess":"ajaxError",[_,d,c?h:p]),m.fireWith(g,[_,M]),f&&(v.trigger("ajaxComplete",[_,d]),--mt.active||mt.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,o,a,u,s,c,l,f,h,p,d=mt.ajaxSetup({},e),g=d.context||d,v=d.context&&(g.nodeType||g.jquery)?mt(g):mt.event,y=mt.Deferred(),m=mt.Callbacks("once memory"),x=d.statusCode||{},b={},w={},M="canceled",_={readyState:0,getResponseHeader:function(t){var e;if(l){if(!u)for(u={};e=Oe.exec(a);)u[e[1].toLowerCase()]=e[2];e=u[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return l?a:null},setRequestHeader:function(t,e){return null==l&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==l&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)_.always(t[_.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||M;return i&&i.abort(e),r(0,e),this}};if(y.promise(_),d.url=((t||d.url||Ee.href)+"").replace(He,Ee.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(jt)||[""],null==d.crossDomain){c=ot.createElement("a");try{c.href=d.url,c.href=c.href,d.crossDomain=$e.protocol+"//"+$e.host!=c.protocol+"//"+c.host}catch(S){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=mt.param(d.data,d.traditional)),K(Ie,d,e,_),l)return _;f=mt.event&&d.global,f&&0===mt.active++&&mt.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Fe.test(d.type),o=d.url.replace(Re,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(je,"+")):(p=d.url.slice(o.length),d.data&&(o+=(Ne.test(o)?"&":"?")+d.data,delete d.data),d.cache===!1&&(o=o.replace(Pe,"$1"),p=(Ne.test(o)?"&":"?")+"_="+Ce++ +p),d.url=o+p),d.ifModified&&(mt.lastModified[o]&&_.setRequestHeader("If-Modified-Since",mt.lastModified[o]),mt.etag[o]&&_.setRequestHeader("If-None-Match",mt.etag[o])),(d.data&&d.hasContent&&d.contentType!==!1||e.contentType)&&_.setRequestHeader("Content-Type",d.contentType),_.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]);for(h in d.headers)_.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(d.beforeSend.call(g,_,d)===!1||l))return _.abort();if(M="abort",m.add(d.complete),_.done(d.success),_.fail(d.error),i=K(Ue,d,e,_)){if(_.readyState=1,f&&v.trigger("ajaxSend",[_,d]),l)return _;d.async&&d.timeout>0&&(s=n.setTimeout(function(){_.abort("timeout")},d.timeout));try{l=!1,i.send(b,r)}catch(S){if(l)throw S;r(-1,S)}}else r(-1,"No Transport");return _},getJSON:function(t,e,n){return mt.get(t,e,n,"json")},getScript:function(t,e){return mt.get(t,void 0,e,"script")}}),mt.each(["get","post"],function(t,e){mt[e]=function(t,n,r,i){return mt.isFunction(n)&&(i=i||r,r=n,n=void 0),mt.ajax(mt.extend({url:t,type:e,dataType:i,data:n,success:r},mt.isPlainObject(t)&&t))}}),mt._evalUrl=function(t){return mt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},mt.fn.extend({wrapAll:function(t){var e;return this[0]&&(mt.isFunction(t)&&(t=t.call(this[0])),e=mt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return mt.isFunction(t)?this.each(function(e){mt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=mt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=mt.isFunction(t);return this.each(function(n){mt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){
return this.parent(t).not("body").each(function(){mt(this).replaceWith(this.childNodes)}),this}}),mt.expr.pseudos.hidden=function(t){return!mt.expr.pseudos.visible(t)},mt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},mt.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var We={0:200,1223:204},Ye=mt.ajaxSettings.xhr();vt.cors=!!Ye&&"withCredentials"in Ye,vt.ajax=Ye=!!Ye,mt.ajaxTransport(function(t){var e,r;if(vt.cors||Ye&&!t.crossDomain)return{send:function(i,o){var a,u=t.xhr();if(u.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)u[a]=t.xhrFields[a];t.mimeType&&u.overrideMimeType&&u.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)u.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=u.onload=u.onerror=u.onabort=u.onreadystatechange=null,"abort"===t?u.abort():"error"===t?"number"!=typeof u.status?o(0,"error"):o(u.status,u.statusText):o(We[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=e(),r=u.onerror=e("error"),void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){4===u.readyState&&n.setTimeout(function(){e&&r()})},e=e("abort");try{u.send(t.hasContent&&t.data||null)}catch(s){if(e)throw s}},abort:function(){e&&e()}}}),mt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),mt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return mt.globalEval(t),t}}}),mt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),mt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=mt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),ot.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ve=[],Xe=/(=)\?(?=&|$)|\?\?/;mt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||mt.expando+"_"+Ce++;return this[t]=!0,t}}),mt.ajaxPrefilter("json jsonp",function(t,e,r){var i,o,a,u=t.jsonp!==!1&&(Xe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xe.test(t.data)&&"data");if(u||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=mt.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,u?t[u]=t[u].replace(Xe,"$1"+i):t.jsonp!==!1&&(t.url+=(Ne.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||mt.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?mt(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(i)),a&&mt.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),vt.createHTMLDocument=function(){var t=ot.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),mt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var r,i,o;return e||(vt.createHTMLDocument?(e=ot.implementation.createHTMLDocument(""),r=e.createElement("base"),r.href=ot.location.href,e.head.appendChild(r)):e=ot),i=Et.exec(t),o=!n&&[],i?[e.createElement(i[1])]:(i=_([t],e,o),o&&o.length&&mt(o).remove(),mt.merge([],i.childNodes))},mt.fn.load=function(t,e,n){var r,i,o,a=this,u=t.indexOf(" ");return u>-1&&(r=G(t.slice(u)),t=t.slice(0,u)),mt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&mt.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?mt("<div>").append(mt.parseHTML(t)).find(r):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},mt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){mt.fn[e]=function(t){return this.on(e,t)}}),mt.expr.pseudos.animated=function(t){return mt.grep(mt.timers,function(e){return t===e.elem}).length},mt.offset={setOffset:function(t,e,n){var r,i,o,a,u,s,c,l=mt.css(t,"position"),f=mt(t),h={};"static"===l&&(t.style.position="relative"),u=f.offset(),o=mt.css(t,"top"),s=mt.css(t,"left"),c=("absolute"===l||"fixed"===l)&&(o+s).indexOf("auto")>-1,c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(s)||0),mt.isFunction(e)&&(e=e.call(t,n,mt.extend({},u))),null!=e.top&&(h.top=e.top-u.top+a),null!=e.left&&(h.left=e.left-u.left+i),"using"in e?e.using.call(t,h):f.css(h)}},mt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){mt.offset.setOffset(this,t,e)});var e,n,r,i,o=this[0];return o?o.getClientRects().length?(r=o.getBoundingClientRect(),r.width||r.height?(i=o.ownerDocument,n=rt(i),e=i.documentElement,{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===mt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),mt.nodeName(t[0],"html")||(r=t.offset()),r={top:r.top+mt.css(t[0],"borderTopWidth",!0),left:r.left+mt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-r.top-mt.css(n,"marginTop",!0),left:e.left-r.left-mt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===mt.css(t,"position");)t=t.offsetParent;return t||te})}}),mt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;mt.fn[t]=function(r){return Ot(this,function(t,r,i){var o=rt(t);return void 0===i?o?o[e]:t[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i)},t,r,arguments.length)}}),mt.each(["top","left"],function(t,e){mt.cssHooks[e]=P(vt.pixelPosition,function(t,n){if(n)return n=R(t,e),le.test(n)?mt(t).position()[e]+"px":n})}),mt.each({Height:"height",Width:"width"},function(t,e){mt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){mt.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),u=n||(i===!0||o===!0?"margin":"border");return Ot(this,function(e,n,i){var o;return mt.isWindow(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?mt.css(e,n,u):mt.style(e,n,i,u)},e,a?i:void 0,a)}})}),mt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),mt.parseJSON=JSON.parse,r=[],i=function(){return mt}.apply(e,r),!(void 0!==i&&(t.exports=i));var Ge=n.jQuery,Ze=n.$;return mt.noConflict=function(t){return n.$===mt&&(n.$=Ze),t&&n.jQuery===mt&&(n.jQuery=Ge),mt},o||(n.jQuery=n.$=mt),mt})},function(t,e,n){var r,i;!function(o,a){"use strict";r=a,i="function"==typeof r?r.call(e,n,e,t):r,!(void 0!==i&&(t.exports=i))}(this,function(){"use strict";function t(t){return typeof console!==u&&(void 0!==console[t]?e(console,t):void 0!==console.log?e(console,"log"):a)}function e(t,e){var n=t[e];if("function"==typeof n.bind)return n.bind(t);try{return Function.prototype.bind.call(n,t)}catch(r){return function(){return Function.prototype.apply.apply(n,[t,arguments])}}}function n(t,e,n){return function(){typeof console!==u&&(r.call(this,e,n),this[t].apply(this,arguments))}}function r(t,e){for(var n=0;n<s.length;n++){var r=s[n];this[r]=n<t?a:this.methodFactory(r,t,e)}}function i(e,r,i){return t(e)||n.apply(this,arguments)}function o(t,e,n){function o(t){var e=(s[t]||"silent").toUpperCase();try{return void(window.localStorage[f]=e)}catch(n){}try{window.document.cookie=encodeURIComponent(f)+"="+e+";"}catch(n){}}function a(){var t;try{t=window.localStorage[f]}catch(e){}if(typeof t===u)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(f)+"=");r&&(t=/^([^;]+)/.exec(n.slice(r))[1])}catch(e){}return void 0===l.levels[t]&&(t=void 0),t}var c,l=this,f="loglevel";t&&(f+=":"+t),l.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},l.methodFactory=n||i,l.getLevel=function(){return c},l.setLevel=function(e,n){if("string"==typeof e&&void 0!==l.levels[e.toUpperCase()]&&(e=l.levels[e.toUpperCase()]),!("number"==typeof e&&e>=0&&e<=l.levels.SILENT))throw"log.setLevel() called with invalid level: "+e;if(c=e,n!==!1&&o(e),r.call(l,e,t),typeof console===u&&e<l.levels.SILENT)return"No console available for logging"},l.setDefaultLevel=function(t){a()||l.setLevel(t,!1)},l.enableAll=function(t){l.setLevel(l.levels.TRACE,t)},l.disableAll=function(t){l.setLevel(l.levels.SILENT,t)};var h=a();null==h&&(h=null==e?"WARN":e),l.setLevel(h,!1)}var a=function(){},u="undefined",s=["trace","debug","info","warn","error"],c=new o,l={};c.getLogger=function(t){if("string"!=typeof t||""===t)throw new TypeError("You must supply a name when creating a logger.");var e=l[t];return e||(e=l[t]=new o(t,c.getLevel(),c.methodFactory)),e};var f=typeof window!==u?window.log:void 0;return c.noConflict=function(){return typeof window!==u&&window.log===c&&(window.log=f),c},c})},function(t,e,n){var r,i;!function(){function o(t){return t&&(t.ownerDocument||t.document||t).documentElement}function a(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}function u(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function s(t){return null===t?NaN:+t}function c(t){return!isNaN(t)}function l(t){return{left:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}}function f(t){return t.length}function h(t){for(var e=1;t*e%1;)e*=10;return e}function p(t,e){for(var n in e)Object.defineProperty(t.prototype,n,{value:e[n],enumerable:!1})}function d(){this._=Object.create(null)}function g(t){return(t+="")===Ta||t[0]===Ea?Ea+t:t}function v(t){return(t+="")[0]===Ea?t.slice(1):t}function y(t){return g(t)in this._}function m(t){return(t=g(t))in this._&&delete this._[t]}function x(){var t=[];for(var e in this._)t.push(v(e));return t}function b(){var t=0;for(var e in this._)++t;return t}function w(){for(var t in this._)return!1;return!0}function M(){this._=Object.create(null)}function _(t){return t}function S(t,e,n){return function(){var r=n.apply(e,arguments);return r===e?t:r}}function k(t,e){if(e in t)return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var n=0,r=Ca.length;n<r;++n){var i=Ca[n]+e;if(i in t)return i}}function T(){}function E(){}function C(t){function e(){for(var e,r=n,i=-1,o=r.length;++i<o;)(e=r[i].on)&&e.apply(this,arguments);return t}var n=[],r=new d;return e.on=function(e,i){var o,a=r.get(e);return arguments.length<2?a&&a.on:(a&&(a.on=null,n=n.slice(0,o=n.indexOf(a)).concat(n.slice(o+1)),r.remove(e)),i&&n.push(r.set(e,{on:i})),t)},e}function N(){pa.event.preventDefault()}function A(){for(var t,e=pa.event;t=e.sourceEvent;)e=t;return e}function L(t){for(var e=new E,n=0,r=arguments.length;++n<r;)e[arguments[n]]=C(e);return e.of=function(n,r){return function(i){try{var o=i.sourceEvent=pa.event;i.target=t,pa.event=i,e[i.type].apply(n,r)}finally{pa.event=o}}},e}function q(t){return Aa(t,ja),t}function D(t){return"function"==typeof t?t:function(){return La(t,this)}}function j(t){return"function"==typeof t?t:function(){return qa(t,this)}}function R(t,e){function n(){this.removeAttribute(t)}function r(){this.removeAttributeNS(t.space,t.local)}function i(){this.setAttribute(t,e)}function o(){this.setAttributeNS(t.space,t.local,e)}function a(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}function u(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}return t=pa.ns.qualify(t),null==e?t.local?r:n:"function"==typeof e?t.local?u:a:t.local?o:i}function P(t){return t.trim().replace(/\s+/g," ")}function O(t){return new RegExp("(?:^|\\s+)"+pa.requote(t)+"(?:\\s+|$)","g")}function z(t){return(t+"").trim().split(/^|\s+/)}function F(t,e){function n(){for(var n=-1;++n<i;)t[n](this,e)}function r(){for(var n=-1,r=e.apply(this,arguments);++n<i;)t[n](this,r)}t=z(t).map(H);var i=t.length;return"function"==typeof e?r:n}function H(t){var e=O(t);return function(n,r){if(i=n.classList)return r?i.add(t):i.remove(t);var i=n.getAttribute("class")||"";r?(e.lastIndex=0,e.test(i)||n.setAttribute("class",P(i+" "+t))):n.setAttribute("class",P(i.replace(e," ")))}}function I(t,e,n){function r(){this.style.removeProperty(t)}function i(){this.style.setProperty(t,e,n)}function o(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}return null==e?r:"function"==typeof e?o:i}function U(t,e){function n(){delete this[t]}function r(){this[t]=e}function i(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}return null==e?n:"function"==typeof e?i:r}function B(t){function e(){var e=this.ownerDocument,n=this.namespaceURI;return n===Ra&&e.documentElement.namespaceURI===Ra?e.createElement(t):e.createElementNS(n,t)}function n(){return this.ownerDocument.createElementNS(t.space,t.local)}return"function"==typeof t?t:(t=pa.ns.qualify(t)).local?n:e}function $(){var t=this.parentNode;t&&t.removeChild(this)}function W(t){return{__data__:t}}function Y(t){return function(){return Da(this,t)}}function V(t){return arguments.length||(t=u),function(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}}function X(t,e){for(var n=0,r=t.length;n<r;n++)for(var i,o=t[n],a=0,u=o.length;a<u;a++)(i=o[a])&&e(i,a,n);return t}function G(t){return Aa(t,Oa),t}function Z(t){var e,n;return function(r,i,o){var a,u=t[o].update,s=u.length;for(o!=n&&(n=o,e=0),i>=e&&(e=i+1);!(a=u[e])&&++e<s;);return a}}function J(t,e,n){function r(){var e=this[a];e&&(this.removeEventListener(t,e,e.$),delete this[a])}function i(){var i=s(e,ga(arguments));r.call(this),this.addEventListener(t,this[a]=i,i.$=n),i._=e}function o(){var e,n=new RegExp("^__on([^.]+)"+pa.requote(t)+"$");for(var r in this)if(e=r.match(n)){var i=this[r];this.removeEventListener(e[1],i,i.$),delete this[r]}}var a="__on"+t,u=t.indexOf("."),s=Q;u>0&&(t=t.slice(0,u));var c=za.get(t);return c&&(t=c,s=K),u?e?i:r:e?T:o}function Q(t,e){return function(n){var r=pa.event;pa.event=n,e[0]=this.__data__;try{t.apply(this,e)}finally{pa.event=r}}}function K(t,e){var n=Q(t,e);return function(t){var e=this,r=t.relatedTarget;r&&(r===e||8&r.compareDocumentPosition(e))||n.call(e,t)}}function tt(t){var e=".dragsuppress-"+ ++Ha,n="click"+e,r=pa.select(a(t)).on("touchmove"+e,N).on("dragstart"+e,N).on("selectstart"+e,N);if(null==Fa&&(Fa=!("onselectstart"in t)&&k(t.style,"userSelect")),Fa){var i=o(t).style,u=i[Fa];i[Fa]="none"}return function(t){if(r.on(e,null),Fa&&(i[Fa]=u),t){var o=function(){r.on(n,null)};r.on(n,function(){N(),o()},!0),setTimeout(o,0)}}}function et(t,e){e.changedTouches&&(e=e.changedTouches[0]);var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();if(Ia<0){var i=a(t);if(i.scrollX||i.scrollY){n=pa.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var o=n[0][0].getScreenCTM();Ia=!(o.f||o.e),n.remove()}}return Ia?(r.x=e.pageX,r.y=e.pageY):(r.x=e.clientX,r.y=e.clientY),r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var u=t.getBoundingClientRect();return[e.clientX-u.left-t.clientLeft,e.clientY-u.top-t.clientTop]}function nt(){return pa.event.changedTouches[0].identifier}function rt(t){return t>0?1:t<0?-1:0}function it(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function ot(t){return t>1?0:t<-1?$a:Math.acos(t)}function at(t){return t>1?Va:t<-1?-Va:Math.asin(t)}function ut(t){return((t=Math.exp(t))-1/t)/2}function st(t){return((t=Math.exp(t))+1/t)/2}function ct(t){return((t=Math.exp(2*t))-1)/(t+1)}function lt(t){return(t=Math.sin(t/2))*t}function ft(){}function ht(t,e,n){return this instanceof ht?(this.h=+t,this.s=+e,void(this.l=+n)):arguments.length<2?t instanceof ht?new ht(t.h,t.s,t.l):Tt(""+t,Et,ht):new ht(t,e,n)}function pt(t,e,n){function r(t){return t>360?t-=360:t<0&&(t+=360),t<60?o+(a-o)*t/60:t<180?a:t<240?o+(a-o)*(240-t)/60:o}function i(t){return Math.round(255*r(t))}var o,a;return t=isNaN(t)?0:(t%=360)<0?t+360:t,e=isNaN(e)?0:e<0?0:e>1?1:e,n=n<0?0:n>1?1:n,a=n<=.5?n*(1+e):n+e-n*e,o=2*n-a,new Mt(i(t+120),i(t),i(t-120))}function dt(t,e,n){return this instanceof dt?(this.h=+t,this.c=+e,void(this.l=+n)):arguments.length<2?t instanceof dt?new dt(t.h,t.c,t.l):t instanceof vt?mt(t.l,t.a,t.b):mt((t=Ct((t=pa.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new dt(t,e,n)}function gt(t,e,n){return isNaN(t)&&(t=0),isNaN(e)&&(e=0),new vt(n,Math.cos(t*=Xa)*e,Math.sin(t)*e)}function vt(t,e,n){return this instanceof vt?(this.l=+t,this.a=+e,void(this.b=+n)):arguments.length<2?t instanceof vt?new vt(t.l,t.a,t.b):t instanceof dt?gt(t.h,t.c,t.l):Ct((t=Mt(t)).r,t.g,t.b):new vt(t,e,n)}function yt(t,e,n){var r=(t+16)/116,i=r+e/500,o=r-n/200;return i=xt(i)*ou,r=xt(r)*au,o=xt(o)*uu,new Mt(wt(3.2404542*i-1.5371385*r-.4985314*o),wt(-.969266*i+1.8760108*r+.041556*o),wt(.0556434*i-.2040259*r+1.0572252*o))}function mt(t,e,n){return t>0?new dt(Math.atan2(n,e)*Ga,Math.sqrt(e*e+n*n),t):new dt(NaN,NaN,t)}function xt(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function bt(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function wt(t){return Math.round(255*(t<=.00304?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function Mt(t,e,n){return this instanceof Mt?(this.r=~~t,this.g=~~e,void(this.b=~~n)):arguments.length<2?t instanceof Mt?new Mt(t.r,t.g,t.b):Tt(""+t,Mt,pt):new Mt(t,e,n)}function _t(t){return new Mt(t>>16,t>>8&255,255&t)}function St(t){return _t(t)+""}function kt(t){return t<16?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function Tt(t,e,n){var r,i,o,a=0,u=0,s=0;if(r=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return n(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return e(At(i[0]),At(i[1]),At(i[2]))}return(o=lu.get(t))?e(o.r,o.g,o.b):(null==t||"#"!==t.charAt(0)||isNaN(o=parseInt(t.slice(1),16))||(4===t.length?(a=(3840&o)>>4,a=a>>4|a,u=240&o,u=u>>4|u,s=15&o,s=s<<4|s):7===t.length&&(a=(16711680&o)>>16,u=(65280&o)>>8,s=255&o)),e(a,u,s))}function Et(t,e,n){var r,i,o=Math.min(t/=255,e/=255,n/=255),a=Math.max(t,e,n),u=a-o,s=(a+o)/2;return u?(i=s<.5?u/(a+o):u/(2-a-o),r=t==a?(e-n)/u+(e<n?6:0):e==a?(n-t)/u+2:(t-e)/u+4,r*=60):(r=NaN,i=s>0&&s<1?0:r),new ht(r,i,s)}function Ct(t,e,n){t=Nt(t),e=Nt(e),n=Nt(n);var r=bt((.4124564*t+.3575761*e+.1804375*n)/ou),i=bt((.2126729*t+.7151522*e+.072175*n)/au),o=bt((.0193339*t+.119192*e+.9503041*n)/uu);return vt(116*i-16,500*(r-i),200*(i-o))}function Nt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function At(t){var e=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*e):e}function Lt(t){return"function"==typeof t?t:function(){return t}}function qt(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=null),Dt(e,n,t,r)}}function Dt(t,e,n,r){function i(){var t,e=s.status;if(!e&&Rt(s)||e>=200&&e<300||304===e){try{t=n.call(o,s)}catch(r){return void a.error.call(o,r)}a.load.call(o,t)}else a.error.call(o,s)}var o={},a=pa.dispatch("beforesend","progress","load","error"),u={},s=new XMLHttpRequest,c=null;return!this.XDomainRequest||"withCredentials"in s||!/^(http(s)?:)?\/\//.test(t)||(s=new XDomainRequest),"onload"in s?s.onload=s.onerror=i:s.onreadystatechange=function(){s.readyState>3&&i()},s.onprogress=function(t){var e=pa.event;pa.event=t;try{a.progress.call(o,s)}finally{pa.event=e}},o.header=function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?u[t]:(null==e?delete u[t]:u[t]=e+"",o)},o.mimeType=function(t){return arguments.length?(e=null==t?null:t+"",o):e},o.responseType=function(t){return arguments.length?(c=t,o):c},o.response=function(t){return n=t,o},["get","post"].forEach(function(t){o[t]=function(){return o.send.apply(o,[t].concat(ga(arguments)))}}),o.send=function(n,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),s.open(n,t,!0),null==e||"accept"in u||(u.accept=e+",*/*"),s.setRequestHeader)for(var l in u)s.setRequestHeader(l,u[l]);return null!=e&&s.overrideMimeType&&s.overrideMimeType(e),null!=c&&(s.responseType=c),null!=i&&o.on("error",i).on("load",function(t){i(null,t)}),a.beforesend.call(o,s),s.send(null==r?null:r),o},o.abort=function(){return s.abort(),o},pa.rebind(o,a,"on"),null==r?o:o.get(jt(r))}function jt(t){return 1===t.length?function(e,n){t(null==e?n:null)}:t}function Rt(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}function Pt(t,e,n){var r=arguments.length;r<2&&(e=0),r<3&&(n=Date.now());var i=n+e,o={c:t,t:i,n:null};return hu?hu.n=o:fu=o,hu=o,pu||(du=clearTimeout(du),pu=1,gu(Ot)),o}function Ot(){var t=zt(),e=Ft()-t;e>24?(isFinite(e)&&(clearTimeout(du),du=setTimeout(Ot,e)),pu=0):(pu=1,gu(Ot))}function zt(){for(var t=Date.now(),e=fu;e;)t>=e.t&&e.c(t-e.t)&&(e.c=null),e=e.n;return t}function Ft(){for(var t,e=fu,n=1/0;e;)e.c?(e.t<n&&(n=e.t),e=(t=e).n):e=t?t.n=e.n:fu=e.n;return hu=t,n}function Ht(t,e){return e-(t?Math.ceil(Math.log(t)/Math.LN10):1)}function It(t,e){var n=Math.pow(10,3*ka(8-e));return{scale:e>8?function(t){return t/n}:function(t){return t*n},symbol:t}}function Ut(t){var e=t.decimal,n=t.thousands,r=t.grouping,i=t.currency,o=r&&n?function(t,e){for(var i=t.length,o=[],a=0,u=r[0],s=0;i>0&&u>0&&(s+u+1>e&&(u=Math.max(1,e-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>e));)u=r[a=(a+1)%r.length];return o.reverse().join(n)}:_;return function(t){var n=yu.exec(t),r=n[1]||" ",a=n[2]||">",u=n[3]||"-",s=n[4]||"",c=n[5],l=+n[6],f=n[7],h=n[8],p=n[9],d=1,g="",v="",y=!1,m=!0;switch(h&&(h=+h.substring(1)),(c||"0"===r&&"="===a)&&(c=r="0",a="="),p){case"n":f=!0,p="g";break;case"%":d=100,v="%",p="f";break;case"p":d=100,v="%",p="r";break;case"b":case"o":case"x":case"X":"#"===s&&(g="0"+p.toLowerCase());case"c":m=!1;case"d":y=!0,h=0;break;case"s":d=-1,p="r"}"$"===s&&(g=i[0],v=i[1]),"r"!=p||h||(p="g"),null!=h&&("g"==p?h=Math.max(1,Math.min(21,h)):"e"!=p&&"f"!=p||(h=Math.max(0,Math.min(20,h)))),p=mu.get(p)||Bt;var x=c&&f;return function(t){var n=v;if(y&&t%1)return"";var i=t<0||0===t&&1/t<0?(t=-t,"-"):"-"===u?"":u;if(d<0){var s=pa.formatPrefix(t,h);t=s.scale(t),n=s.symbol+v}else t*=d;t=p(t,h);var b,w,M=t.lastIndexOf(".");if(M<0){var _=m?t.lastIndexOf("e"):-1;_<0?(b=t,w=""):(b=t.substring(0,_),w=t.substring(_))}else b=t.substring(0,M),w=e+t.substring(M+1);!c&&f&&(b=o(b,1/0));var S=g.length+b.length+w.length+(x?0:i.length),k=S<l?new Array(S=l-S+1).join(r):"";return x&&(b=o(k+b,k.length?l-w.length:1/0)),i+=g,t=b+w,("<"===a?i+t+k:">"===a?k+i+t:"^"===a?k.substring(0,S>>=1)+i+t+k.substring(S):i+(x?t:k+t))+n}}}function Bt(t){return t+""}function $t(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Wt(t,e,n){function r(e){var n=t(e),r=o(n,1);return e-n<r-e?n:r}function i(n){return e(n=t(new bu(n-1)),1),n}function o(t,n){return e(t=new bu((+t)),n),t}function a(t,r,o){var a=i(t),u=[];if(o>1)for(;a<r;)n(a)%o||u.push(new Date((+a))),e(a,1);else for(;a<r;)u.push(new Date((+a))),e(a,1);return u}function u(t,e,n){try{bu=$t;var r=new $t;return r._=t,a(r,e,n)}finally{bu=Date}}t.floor=t,t.round=r,t.ceil=i,t.offset=o,t.range=a;var s=t.utc=Yt(t);return s.floor=s,s.round=Yt(r),s.ceil=Yt(i),s.offset=Yt(o),s.range=u,t}function Yt(t){return function(e,n){try{bu=$t;var r=new $t;return r._=e,t(r,n)._}finally{bu=Date}}}function Vt(t){function e(t){function e(e){for(var n,i,o,a=[],u=-1,s=0;++u<r;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Mu[n=t.charAt(++u)])&&(n=t.charAt(++u)),(o=C[n])&&(n=o(e,null==i?"e"===n?" ":"0":i)),a.push(n),s=u+1);return a.push(t.slice(s,u)),a.join("")}var r=t.length;return e.parse=function(e){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},i=n(r,t,e,0);if(i!=e.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var o=null!=r.Z&&bu!==$t,a=new(o?$t:bu);return"j"in r?a.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),a.setFullYear(r.y,0,1),a.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(a.getDay()+5)%7:r.w+7*r.U-(a.getDay()+6)%7)):a.setFullYear(r.y,r.m,r.d),a.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),o?a._:a},e.toString=function(){return t},e}function n(t,e,n,r){for(var i,o,a,u=0,s=e.length,c=n.length;u<s;){if(r>=c)return-1;if(i=e.charCodeAt(u++),37===i){if(a=e.charAt(u++),o=N[a in Mu?e.charAt(u++):a],!o||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}function r(t,e,n){M.lastIndex=0;var r=M.exec(e.slice(n));return r?(t.w=_.get(r[0].toLowerCase()),n+r[0].length):-1}function i(t,e,n){b.lastIndex=0;var r=b.exec(e.slice(n));return r?(t.w=w.get(r[0].toLowerCase()),n+r[0].length):-1}function o(t,e,n){T.lastIndex=0;var r=T.exec(e.slice(n));return r?(t.m=E.get(r[0].toLowerCase()),n+r[0].length):-1}function a(t,e,n){S.lastIndex=0;var r=S.exec(e.slice(n));return r?(t.m=k.get(r[0].toLowerCase()),n+r[0].length):-1}function u(t,e,r){return n(t,C.c.toString(),e,r)}function s(t,e,r){return n(t,C.x.toString(),e,r)}function c(t,e,r){return n(t,C.X.toString(),e,r)}function l(t,e,n){var r=x.get(e.slice(n,n+=2).toLowerCase());return null==r?-1:(t.p=r,n)}var f=t.dateTime,h=t.date,p=t.time,d=t.periods,g=t.days,v=t.shortDays,y=t.months,m=t.shortMonths;e.utc=function(t){function n(t){try{bu=$t;var e=new bu;return e._=t,r(e)}finally{bu=Date}}var r=e(t);return n.parse=function(t){try{bu=$t;var e=r.parse(t);return e&&e._}finally{bu=Date}},n.toString=r.toString,n},e.multi=e.utc.multi=pe;var x=pa.map(),b=Gt(g),w=Zt(g),M=Gt(v),_=Zt(v),S=Gt(y),k=Zt(y),T=Gt(m),E=Zt(m);d.forEach(function(t,e){x.set(t.toLowerCase(),e)});var C={a:function(t){return v[t.getDay()]},A:function(t){return g[t.getDay()]},b:function(t){return m[t.getMonth()]},B:function(t){return y[t.getMonth()]},c:e(f),d:function(t,e){return Xt(t.getDate(),e,2)},e:function(t,e){return Xt(t.getDate(),e,2)},H:function(t,e){return Xt(t.getHours(),e,2)},I:function(t,e){return Xt(t.getHours()%12||12,e,2)},j:function(t,e){return Xt(1+xu.dayOfYear(t),e,3)},L:function(t,e){return Xt(t.getMilliseconds(),e,3)},m:function(t,e){return Xt(t.getMonth()+1,e,2)},M:function(t,e){return Xt(t.getMinutes(),e,2)},p:function(t){return d[+(t.getHours()>=12)]},S:function(t,e){return Xt(t.getSeconds(),e,2)},U:function(t,e){return Xt(xu.sundayOfYear(t),e,2)},w:function(t){return t.getDay()},W:function(t,e){return Xt(xu.mondayOfYear(t),e,2)},x:e(h),X:e(p),y:function(t,e){return Xt(t.getFullYear()%100,e,2)},Y:function(t,e){return Xt(t.getFullYear()%1e4,e,4)},Z:fe,"%":function(){return"%"}},N={a:r,A:i,b:o,B:a,c:u,d:oe,e:oe,H:ue,I:ue,j:ae,L:le,m:ie,M:se,p:l,S:ce,U:Qt,w:Jt,W:Kt,x:s,X:c,y:ee,Y:te,Z:ne,"%":he};return e}function Xt(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function Gt(t){return new RegExp("^(?:"+t.map(pa.requote).join("|")+")","i")}function Zt(t){for(var e=new d,n=-1,r=t.length;++n<r;)e.set(t[n].toLowerCase(),n);return e}function Jt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Qt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n));return r?(t.U=+r[0],n+r[0].length):-1}function Kt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n));return r?(t.W=+r[0],n+r[0].length):-1}function te(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ee(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.y=re(+r[0]),n+r[0].length):-1}function ne(t,e,n){return/^[+-]\d{4}$/.test(e=e.slice(n,n+5))?(t.Z=-e,n+5):-1}function re(t){return t+(t>68?1900:2e3)}function ie(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function oe(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function ae(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+3));return r?(t.j=+r[0],n+r[0].length):-1}function ue(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function se(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function ce(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function le(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function fe(t){var e=t.getTimezoneOffset(),n=e>0?"-":"+",r=ka(e)/60|0,i=ka(e)%60;return n+Xt(r,"0",2)+Xt(i,"0",2)}function he(t,e,n){Su.lastIndex=0;var r=Su.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function pe(t){for(var e=t.length,n=-1;++n<e;)t[n][0]=this(t[n][0]);return function(e){for(var n=0,r=t[n];!r[1](e);)r=t[++n];return r[0](e)}}function de(){}function ge(t,e,n){var r=n.s=t+e,i=r-t,o=r-i;n.t=t-o+(e-i)}function ve(t,e){t&&Cu.hasOwnProperty(t.type)&&Cu[t.type](t,e)}function ye(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function me(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)ye(t[n],e,1);e.polygonEnd()}function xe(){function t(t,e){t*=Xa,e=e*Xa/2+$a/4;var n=t-r,a=n>=0?1:-1,u=a*n,s=Math.cos(e),c=Math.sin(e),l=o*c,f=i*s+l*Math.cos(u),h=l*a*Math.sin(u);Au.add(Math.atan2(h,f)),r=t,i=s,o=c}var e,n,r,i,o;Lu.point=function(a,u){Lu.point=t,r=(e=a)*Xa,i=Math.cos(u=(n=u)*Xa/2+$a/4),o=Math.sin(u)},Lu.lineEnd=function(){t(e,n)}}function be(t){var e=t[0],n=t[1],r=Math.cos(n);return[r*Math.cos(e),r*Math.sin(e),Math.sin(n)]}function we(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Me(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function _e(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Se(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function ke(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function Te(t){return[Math.atan2(t[1],t[0]),at(t[2])]}function Ee(t,e){return ka(t[0]-e[0])<Ua&&ka(t[1]-e[1])<Ua}function Ce(t,e){t*=Xa;var n=Math.cos(e*=Xa);Ne(n*Math.cos(t),n*Math.sin(t),Math.sin(e))}function Ne(t,e,n){++qu,ju+=(t-ju)/qu,Ru+=(e-Ru)/qu,Pu+=(n-Pu)/qu}function Ae(){function t(t,i){t*=Xa;var o=Math.cos(i*=Xa),a=o*Math.cos(t),u=o*Math.sin(t),s=Math.sin(i),c=Math.atan2(Math.sqrt((c=n*s-r*u)*c+(c=r*a-e*s)*c+(c=e*u-n*a)*c),e*a+n*u+r*s);Du+=c,Ou+=c*(e+(e=a)),zu+=c*(n+(n=u)),Fu+=c*(r+(r=s)),Ne(e,n,r)}var e,n,r;Bu.point=function(i,o){i*=Xa;var a=Math.cos(o*=Xa);e=a*Math.cos(i),n=a*Math.sin(i),r=Math.sin(o),Bu.point=t,Ne(e,n,r)}}function Le(){Bu.point=Ce}function qe(){function t(t,e){t*=Xa;var n=Math.cos(e*=Xa),a=n*Math.cos(t),u=n*Math.sin(t),s=Math.sin(e),c=i*s-o*u,l=o*a-r*s,f=r*u-i*a,h=Math.sqrt(c*c+l*l+f*f),p=r*a+i*u+o*s,d=h&&-ot(p)/h,g=Math.atan2(h,p);Hu+=d*c,Iu+=d*l,Uu+=d*f,Du+=g,Ou+=g*(r+(r=a)),zu+=g*(i+(i=u)),Fu+=g*(o+(o=s)),Ne(r,i,o)}var e,n,r,i,o;Bu.point=function(a,u){e=a,n=u,Bu.point=t,a*=Xa;var s=Math.cos(u*=Xa);r=s*Math.cos(a),i=s*Math.sin(a),o=Math.sin(u),Ne(r,i,o)},Bu.lineEnd=function(){t(e,n),Bu.lineEnd=Le,Bu.point=Ce}}function De(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return n=e.invert(n,r),n&&t.invert(n[0],n[1])}),n}function je(){return!0}function Re(t,e,n,r,i){var o=[],a=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n=t[0],r=t[e];if(Ee(n,r)){i.lineStart();for(var u=0;u<e;++u)i.point((n=t[u])[0],n[1]);return void i.lineEnd()}var s=new Oe(n,t,null,(!0)),c=new Oe(n,null,s,(!1));s.o=c,o.push(s),a.push(c),s=new Oe(r,t,null,(!1)),c=new Oe(r,null,s,(!0)),s.o=c,o.push(s),a.push(c)}}),a.sort(e),Pe(o),Pe(a),o.length){for(var u=0,s=n,c=a.length;u<c;++u)a[u].e=s=!s;for(var l,f,h=o[0];;){for(var p=h,d=!0;p.v;)if((p=p.n)===h)return;l=p.z,i.lineStart();
do{if(p.v=p.o.v=!0,p.e){if(d)for(var u=0,c=l.length;u<c;++u)i.point((f=l[u])[0],f[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(d){l=p.p.z;for(var u=l.length-1;u>=0;--u)i.point((f=l[u])[0],f[1])}else r(p.x,p.p.x,-1,i);p=p.p}p=p.o,l=p.z,d=!d}while(!p.v);i.lineEnd()}}}function Pe(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function Oe(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function ze(t,e,n,r){return function(i,o){function a(e,n){var r=i(e,n);t(e=r[0],n=r[1])&&o.point(e,n)}function u(t,e){var n=i(t,e);v.point(n[0],n[1])}function s(){m.point=u,v.lineStart()}function c(){m.point=a,v.lineEnd()}function l(t,e){g.push([t,e]);var n=i(t,e);b.point(n[0],n[1])}function f(){b.lineStart(),g=[]}function h(){l(g[0][0],g[0][1]),b.lineEnd();var t,e=b.clean(),n=x.buffer(),r=n.length;if(g.pop(),d.push(g),g=null,r)if(1&e){t=n[0];var i,r=t.length-1,a=-1;if(r>0){for(w||(o.polygonStart(),w=!0),o.lineStart();++a<r;)o.point((i=t[a])[0],i[1]);o.lineEnd()}}else r>1&&2&e&&n.push(n.pop().concat(n.shift())),p.push(n.filter(Fe))}var p,d,g,v=e(o),y=i.invert(r[0],r[1]),m={point:a,lineStart:s,lineEnd:c,polygonStart:function(){m.point=l,m.lineStart=f,m.lineEnd=h,p=[],d=[]},polygonEnd:function(){m.point=a,m.lineStart=s,m.lineEnd=c,p=pa.merge(p);var t=We(y,d);p.length?(w||(o.polygonStart(),w=!0),Re(p,Ie,t,n,o)):t&&(w||(o.polygonStart(),w=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),w&&(o.polygonEnd(),w=!1),p=d=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}},x=He(),b=e(x),w=!1;return m}}function Fe(t){return t.length>1}function He(){var t,e=[];return{lineStart:function(){e.push(t=[])},point:function(e,n){t.push([e,n])},lineEnd:T,buffer:function(){var n=e;return e=[],t=null,n},rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))}}}function Ie(t,e){return((t=t.x)[0]<0?t[1]-Va-Ua:Va-t[1])-((e=e.x)[0]<0?e[1]-Va-Ua:Va-e[1])}function Ue(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var u=o>0?$a:-$a,s=ka(o-n);ka(s-$a)<Ua?(t.point(n,r=(r+a)/2>0?Va:-Va),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),e=0):i!==u&&s>=$a&&(ka(n-i)<Ua&&(n-=i*Ua),ka(o-u)<Ua&&(o-=u*Ua),r=Be(n,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=o,r=a),i=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}function Be(t,e,n,r){var i,o,a=Math.sin(t-n);return ka(a)>Ua?Math.atan((Math.sin(e)*(o=Math.cos(r))*Math.sin(n)-Math.sin(r)*(i=Math.cos(e))*Math.sin(t))/(i*o*a)):(e+r)/2}function $e(t,e,n,r){var i;if(null==t)i=n*Va,r.point(-$a,i),r.point(0,i),r.point($a,i),r.point($a,0),r.point($a,-i),r.point(0,-i),r.point(-$a,-i),r.point(-$a,0),r.point(-$a,i);else if(ka(t[0]-e[0])>Ua){var o=t[0]<e[0]?$a:-$a;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])}function We(t,e){var n=t[0],r=t[1],i=[Math.sin(n),-Math.cos(n),0],o=0,a=0;Au.reset();for(var u=0,s=e.length;u<s;++u){var c=e[u],l=c.length;if(l)for(var f=c[0],h=f[0],p=f[1]/2+$a/4,d=Math.sin(p),g=Math.cos(p),v=1;;){v===l&&(v=0),t=c[v];var y=t[0],m=t[1]/2+$a/4,x=Math.sin(m),b=Math.cos(m),w=y-h,M=w>=0?1:-1,_=M*w,S=_>$a,k=d*x;if(Au.add(Math.atan2(k*M*Math.sin(_),g*b+k*Math.cos(_))),o+=S?w+M*Wa:w,S^h>=n^y>=n){var T=Me(be(f),be(t));ke(T);var E=Me(i,T);ke(E);var C=(S^w>=0?-1:1)*at(E[2]);(r>C||r===C&&(T[0]||T[1]))&&(a+=S^w>=0?1:-1)}if(!v++)break;h=y,d=x,g=b,f=t}}return(o<-Ua||o<Ua&&Au<-Ua)^1&a}function Ye(t){function e(t,e){return Math.cos(t)*Math.cos(e)>o}function n(t){var n,o,s,c,l;return{lineStart:function(){c=s=!1,l=1},point:function(f,h){var p,d=[f,h],g=e(f,h),v=a?g?0:i(f,h):g?i(f+(f<0?$a:-$a),h):0;if(!n&&(c=s=g)&&t.lineStart(),g!==s&&(p=r(n,d),(Ee(n,p)||Ee(d,p))&&(d[0]+=Ua,d[1]+=Ua,g=e(d[0],d[1]))),g!==s)l=0,g?(t.lineStart(),p=r(d,n),t.point(p[0],p[1])):(p=r(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(u&&n&&a^g){var y;v&o||!(y=r(d,n,!0))||(l=0,a?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!g||n&&Ee(n,d)||t.point(d[0],d[1]),n=d,s=g,o=v},lineEnd:function(){s&&t.lineEnd(),n=null},clean:function(){return l|(c&&s)<<1}}}function r(t,e,n){var r=be(t),i=be(e),a=[1,0,0],u=Me(r,i),s=we(u,u),c=u[0],l=s-c*c;if(!l)return!n&&t;var f=o*s/l,h=-o*c/l,p=Me(a,u),d=Se(a,f),g=Se(u,h);_e(d,g);var v=p,y=we(d,v),m=we(v,v),x=y*y-m*(we(d,d)-1);if(!(x<0)){var b=Math.sqrt(x),w=Se(v,(-y-b)/m);if(_e(w,d),w=Te(w),!n)return w;var M,_=t[0],S=e[0],k=t[1],T=e[1];S<_&&(M=_,_=S,S=M);var E=S-_,C=ka(E-$a)<Ua,N=C||E<Ua;if(!C&&T<k&&(M=k,k=T,T=M),N?C?k+T>0^w[1]<(ka(w[0]-_)<Ua?k:T):k<=w[1]&&w[1]<=T:E>$a^(_<=w[0]&&w[0]<=S)){var A=Se(v,(-y+b)/m);return _e(A,d),[w,Te(A)]}}}function i(e,n){var r=a?t:$a-t,i=0;return e<-r?i|=1:e>r&&(i|=2),n<-r?i|=4:n>r&&(i|=8),i}var o=Math.cos(t),a=o>0,u=ka(o)>Ua,s=bn(t,6*Xa);return ze(e,n,s,a?[0,-t]:[-$a,t-$a])}function Ve(t,e,n,r){return function(i){var o,a=i.a,u=i.b,s=a.x,c=a.y,l=u.x,f=u.y,h=0,p=1,d=l-s,g=f-c;if(o=t-s,d||!(o>0)){if(o/=d,d<0){if(o<h)return;o<p&&(p=o)}else if(d>0){if(o>p)return;o>h&&(h=o)}if(o=n-s,d||!(o<0)){if(o/=d,d<0){if(o>p)return;o>h&&(h=o)}else if(d>0){if(o<h)return;o<p&&(p=o)}if(o=e-c,g||!(o>0)){if(o/=g,g<0){if(o<h)return;o<p&&(p=o)}else if(g>0){if(o>p)return;o>h&&(h=o)}if(o=r-c,g||!(o<0)){if(o/=g,g<0){if(o>p)return;o>h&&(h=o)}else if(g>0){if(o<h)return;o<p&&(p=o)}return h>0&&(i.a={x:s+h*d,y:c+h*g}),p<1&&(i.b={x:s+p*d,y:c+p*g}),i}}}}}}function Xe(t,e,n,r){function i(r,i){return ka(r[0]-t)<Ua?i>0?0:3:ka(r[0]-n)<Ua?i>0?2:1:ka(r[1]-e)<Ua?i>0?1:0:i>0?3:2}function o(t,e){return a(t.x,e.x)}function a(t,e){var n=i(t,1),r=i(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(u){function s(t){for(var e=0,n=v.length,r=t[1],i=0;i<n;++i)for(var o,a=1,u=v[i],s=u.length,c=u[0];a<s;++a)o=u[a],c[1]<=r?o[1]>r&&it(c,o,t)>0&&++e:o[1]<=r&&it(c,o,t)<0&&--e,c=o;return 0!==e}function c(o,u,s,c){var l=0,f=0;if(null==o||(l=i(o,s))!==(f=i(u,s))||a(o,u)<0^s>0){do c.point(0===l||3===l?t:n,l>1?r:e);while((l=(l+s+4)%4)!==f)}else c.point(u[0],u[1])}function l(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function f(t,e){l(t,e)&&u.point(t,e)}function h(){N.point=d,v&&v.push(y=[]),S=!0,_=!1,w=M=NaN}function p(){g&&(d(m,x),b&&_&&E.rejoin(),g.push(E.buffer())),N.point=f,_&&u.lineEnd()}function d(t,e){t=Math.max(-Wu,Math.min(Wu,t)),e=Math.max(-Wu,Math.min(Wu,e));var n=l(t,e);if(v&&y.push([t,e]),S)m=t,x=e,b=n,S=!1,n&&(u.lineStart(),u.point(t,e));else if(n&&_)u.point(t,e);else{var r={a:{x:w,y:M},b:{x:t,y:e}};C(r)?(_||(u.lineStart(),u.point(r.a.x,r.a.y)),u.point(r.b.x,r.b.y),n||u.lineEnd(),k=!1):n&&(u.lineStart(),u.point(t,e),k=!1)}w=t,M=e,_=n}var g,v,y,m,x,b,w,M,_,S,k,T=u,E=He(),C=Ve(t,e,n,r),N={point:f,lineStart:h,lineEnd:p,polygonStart:function(){u=E,g=[],v=[],k=!0},polygonEnd:function(){u=T,g=pa.merge(g);var e=s([t,r]),n=k&&e,i=g.length;(n||i)&&(u.polygonStart(),n&&(u.lineStart(),c(null,null,1,u),u.lineEnd()),i&&Re(g,o,e,c,u),u.polygonEnd()),g=v=y=null}};return N}}function Ge(t){var e=0,n=$a/3,r=hn(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*$a/180,n=t[1]*$a/180):[e/$a*180,n/$a*180]},i}function Ze(t,e){function n(t,e){var n=Math.sqrt(o-2*i*Math.sin(e))/i;return[n*Math.sin(t*=i),a-n*Math.cos(t)]}var r=Math.sin(t),i=(r+Math.sin(e))/2,o=1+r*(2*i-r),a=Math.sqrt(o)/i;return n.invert=function(t,e){var n=a-e;return[Math.atan2(t,n)/i,at((o-(t*t+n*n)*i*i)/(2*i))]},n}function Je(){function t(t,e){Vu+=i*t-r*e,r=t,i=e}var e,n,r,i;Qu.point=function(o,a){Qu.point=t,e=r=o,n=i=a},Qu.lineEnd=function(){t(e,n)}}function Qe(t,e){t<Xu&&(Xu=t),t>Zu&&(Zu=t),e<Gu&&(Gu=e),e>Ju&&(Ju=e)}function Ke(){function t(t,e){a.push("M",t,",",e,o)}function e(t,e){a.push("M",t,",",e),u.point=n}function n(t,e){a.push("L",t,",",e)}function r(){u.point=t}function i(){a.push("Z")}var o=tn(4.5),a=[],u={point:t,lineStart:function(){u.point=e},lineEnd:r,polygonStart:function(){u.lineEnd=i},polygonEnd:function(){u.lineEnd=r,u.point=t},pointRadius:function(t){return o=tn(t),u},result:function(){if(a.length){var t=a.join("");return a=[],t}}};return u}function tn(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function en(t,e){ju+=t,Ru+=e,++Pu}function nn(){function t(t,r){var i=t-e,o=r-n,a=Math.sqrt(i*i+o*o);Ou+=a*(e+t)/2,zu+=a*(n+r)/2,Fu+=a,en(e=t,n=r)}var e,n;ts.point=function(r,i){ts.point=t,en(e=r,n=i)}}function rn(){ts.point=en}function on(){function t(t,e){var n=t-r,o=e-i,a=Math.sqrt(n*n+o*o);Ou+=a*(r+t)/2,zu+=a*(i+e)/2,Fu+=a,a=i*t-r*e,Hu+=a*(r+t),Iu+=a*(i+e),Uu+=3*a,en(r=t,i=e)}var e,n,r,i;ts.point=function(o,a){ts.point=t,en(e=r=o,n=i=a)},ts.lineEnd=function(){t(e,n)}}function an(t){function e(e,n){t.moveTo(e+a,n),t.arc(e,n,a,0,Wa)}function n(e,n){t.moveTo(e,n),u.point=r}function r(e,n){t.lineTo(e,n)}function i(){u.point=e}function o(){t.closePath()}var a=4.5,u={point:e,lineStart:function(){u.point=n},lineEnd:i,polygonStart:function(){u.lineEnd=o},polygonEnd:function(){u.lineEnd=i,u.point=e},pointRadius:function(t){return a=t,u},result:T};return u}function un(t){function e(t){return(u?r:n)(t)}function n(e){return ln(e,function(n,r){n=t(n,r),e.point(n[0],n[1])})}function r(e){function n(n,r){n=t(n,r),e.point(n[0],n[1])}function r(){x=NaN,S.point=o,e.lineStart()}function o(n,r){var o=be([n,r]),a=t(n,r);i(x,b,m,w,M,_,x=a[0],b=a[1],m=n,w=o[0],M=o[1],_=o[2],u,e),e.point(x,b)}function a(){S.point=n,e.lineEnd()}function s(){r(),S.point=c,S.lineEnd=l}function c(t,e){o(f=t,h=e),p=x,d=b,g=w,v=M,y=_,S.point=o}function l(){i(x,b,m,w,M,_,p,d,f,g,v,y,u,e),S.lineEnd=a,a()}var f,h,p,d,g,v,y,m,x,b,w,M,_,S={point:n,lineStart:r,lineEnd:a,polygonStart:function(){e.polygonStart(),S.lineStart=s},polygonEnd:function(){e.polygonEnd(),S.lineStart=r}};return S}function i(e,n,r,u,s,c,l,f,h,p,d,g,v,y){var m=l-e,x=f-n,b=m*m+x*x;if(b>4*o&&v--){var w=u+p,M=s+d,_=c+g,S=Math.sqrt(w*w+M*M+_*_),k=Math.asin(_/=S),T=ka(ka(_)-1)<Ua||ka(r-h)<Ua?(r+h)/2:Math.atan2(M,w),E=t(T,k),C=E[0],N=E[1],A=C-e,L=N-n,q=x*A-m*L;(q*q/b>o||ka((m*A+x*L)/b-.5)>.3||u*p+s*d+c*g<a)&&(i(e,n,r,u,s,c,C,N,T,w/=S,M/=S,_,v,y),y.point(C,N),i(C,N,T,w,M,_,l,f,h,p,d,g,v,y))}}var o=.5,a=Math.cos(30*Xa),u=16;return e.precision=function(t){return arguments.length?(u=(o=t*t)>0&&16,e):Math.sqrt(o)},e}function sn(t){var e=un(function(e,n){return t([e*Ga,n*Ga])});return function(t){return pn(e(t))}}function cn(t){this.stream=t}function ln(t,e){return{point:e,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function fn(t){return hn(function(){return t})()}function hn(t){function e(t){return t=u(t[0]*Xa,t[1]*Xa),[t[0]*h+s,c-t[1]*h]}function n(t){return t=u.invert((t[0]-s)/h,(c-t[1])/h),t&&[t[0]*Ga,t[1]*Ga]}function r(){u=De(a=vn(y,m,x),o);var t=o(g,v);return s=p-t[0]*h,c=d+t[1]*h,i()}function i(){return l&&(l.valid=!1,l=null),e}var o,a,u,s,c,l,f=un(function(t,e){return t=o(t,e),[t[0]*h+s,c-t[1]*h]}),h=150,p=480,d=250,g=0,v=0,y=0,m=0,x=0,b=$u,w=_,M=null,S=null;return e.stream=function(t){return l&&(l.valid=!1),l=pn(b(a,f(w(t)))),l.valid=!0,l},e.clipAngle=function(t){return arguments.length?(b=null==t?(M=t,$u):Ye((M=+t)*Xa),i()):M},e.clipExtent=function(t){return arguments.length?(S=t,w=t?Xe(t[0][0],t[0][1],t[1][0],t[1][1]):_,i()):S},e.scale=function(t){return arguments.length?(h=+t,r()):h},e.translate=function(t){return arguments.length?(p=+t[0],d=+t[1],r()):[p,d]},e.center=function(t){return arguments.length?(g=t[0]%360*Xa,v=t[1]%360*Xa,r()):[g*Ga,v*Ga]},e.rotate=function(t){return arguments.length?(y=t[0]%360*Xa,m=t[1]%360*Xa,x=t.length>2?t[2]%360*Xa:0,r()):[y*Ga,m*Ga,x*Ga]},pa.rebind(e,f,"precision"),function(){return o=t.apply(this,arguments),e.invert=o.invert&&n,r()}}function pn(t){return ln(t,function(e,n){t.point(e*Xa,n*Xa)})}function dn(t,e){return[t,e]}function gn(t,e){return[t>$a?t-Wa:t<-$a?t+Wa:t,e]}function vn(t,e,n){return t?e||n?De(mn(t),xn(e,n)):mn(t):e||n?xn(e,n):gn}function yn(t){return function(e,n){return e+=t,[e>$a?e-Wa:e<-$a?e+Wa:e,n]}}function mn(t){var e=yn(t);return e.invert=yn(-t),e}function xn(t,e){function n(t,e){var n=Math.cos(e),u=Math.cos(t)*n,s=Math.sin(t)*n,c=Math.sin(e),l=c*r+u*i;return[Math.atan2(s*o-l*a,u*r-c*i),at(l*o+s*a)]}var r=Math.cos(t),i=Math.sin(t),o=Math.cos(e),a=Math.sin(e);return n.invert=function(t,e){var n=Math.cos(e),u=Math.cos(t)*n,s=Math.sin(t)*n,c=Math.sin(e),l=c*o-s*a;return[Math.atan2(s*o+c*a,u*r+l*i),at(l*r-u*i)]},n}function bn(t,e){var n=Math.cos(t),r=Math.sin(t);return function(i,o,a,u){var s=a*e;null!=i?(i=wn(n,i),o=wn(n,o),(a>0?i<o:i>o)&&(i+=a*Wa)):(i=t+a*Wa,o=t-.5*s);for(var c,l=i;a>0?l>o:l<o;l-=s)u.point((c=Te([n,-r*Math.cos(l),-r*Math.sin(l)]))[0],c[1])}}function wn(t,e){var n=be(e);n[0]-=t,ke(n);var r=ot(-n[1]);return((-n[2]<0?-r:r)+2*Math.PI-Ua)%(2*Math.PI)}function Mn(t,e,n){var r=pa.range(t,e-Ua,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function _n(t,e,n){var r=pa.range(t,e-Ua,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function Sn(t){return t.source}function kn(t){return t.target}function Tn(t,e,n,r){var i=Math.cos(e),o=Math.sin(e),a=Math.cos(r),u=Math.sin(r),s=i*Math.cos(t),c=i*Math.sin(t),l=a*Math.cos(n),f=a*Math.sin(n),h=2*Math.asin(Math.sqrt(lt(r-e)+i*a*lt(n-t))),p=1/Math.sin(h),d=h?function(t){var e=Math.sin(t*=h)*p,n=Math.sin(h-t)*p,r=n*s+e*l,i=n*c+e*f,a=n*o+e*u;return[Math.atan2(i,r)*Ga,Math.atan2(a,Math.sqrt(r*r+i*i))*Ga]}:function(){return[t*Ga,e*Ga]};return d.distance=h,d}function En(){function t(t,i){var o=Math.sin(i*=Xa),a=Math.cos(i),u=ka((t*=Xa)-e),s=Math.cos(u);es+=Math.atan2(Math.sqrt((u=a*Math.sin(u))*u+(u=r*o-n*a*s)*u),n*o+r*a*s),e=t,n=o,r=a}var e,n,r;ns.point=function(i,o){e=i*Xa,n=Math.sin(o*=Xa),r=Math.cos(o),ns.point=t},ns.lineEnd=function(){ns.point=ns.lineEnd=T}}function Cn(t,e){function n(e,n){var r=Math.cos(e),i=Math.cos(n),o=t(r*i);return[o*i*Math.sin(e),o*Math.sin(n)]}return n.invert=function(t,n){var r=Math.sqrt(t*t+n*n),i=e(r),o=Math.sin(i),a=Math.cos(i);return[Math.atan2(t*o,r*a),Math.asin(r&&n*o/r)]},n}function Nn(t,e){function n(t,e){a>0?e<-Va+Ua&&(e=-Va+Ua):e>Va-Ua&&(e=Va-Ua);var n=a/Math.pow(i(e),o);return[n*Math.sin(o*t),a-n*Math.cos(o*t)]}var r=Math.cos(t),i=function(t){return Math.tan($a/4+t/2)},o=t===e?Math.sin(t):Math.log(r/Math.cos(e))/Math.log(i(e)/i(t)),a=r*Math.pow(i(t),o)/o;return o?(n.invert=function(t,e){var n=a-e,r=rt(o)*Math.sqrt(t*t+n*n);return[Math.atan2(t,n)/o,2*Math.atan(Math.pow(a/r,1/o))-Va]},n):Ln}function An(t,e){function n(t,e){var n=o-e;return[n*Math.sin(i*t),o-n*Math.cos(i*t)]}var r=Math.cos(t),i=t===e?Math.sin(t):(r-Math.cos(e))/(e-t),o=r/i+t;return ka(i)<Ua?dn:(n.invert=function(t,e){var n=o-e;return[Math.atan2(t,n)/i,o-rt(i)*Math.sqrt(t*t+n*n)]},n)}function Ln(t,e){return[t,Math.log(Math.tan($a/4+e/2))]}function qn(t){var e,n=fn(t),r=n.scale,i=n.translate,o=n.clipExtent;return n.scale=function(){var t=r.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.translate=function(){var t=i.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.clipExtent=function(t){var a=o.apply(n,arguments);if(a===n){if(e=null==t){var u=$a*r(),s=i();o([[s[0]-u,s[1]-u],[s[0]+u,s[1]+u]])}}else e&&(a=null);return a},n.clipExtent(null)}function Dn(t,e){return[Math.log(Math.tan($a/4+e/2)),-t]}function jn(t){return t[0]}function Rn(t){return t[1]}function Pn(t){for(var e=t.length,n=[0,1],r=2,i=2;i<e;i++){for(;r>1&&it(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function On(t,e){return t[0]-e[0]||t[1]-e[1]}function zn(t,e,n){return(n[0]-e[0])*(t[1]-e[1])<(n[1]-e[1])*(t[0]-e[0])}function Fn(t,e,n,r){var i=t[0],o=n[0],a=e[0]-i,u=r[0]-o,s=t[1],c=n[1],l=e[1]-s,f=r[1]-c,h=(u*(s-c)-f*(i-o))/(f*a-u*l);return[i+h*a,s+h*l]}function Hn(t){var e=t[0],n=t[t.length-1];return!(e[0]-n[0]||e[1]-n[1])}function In(){sr(this),this.edge=this.site=this.circle=null}function Un(t){var e=ds.pop()||new In;return e.site=t,e}function Bn(t){Kn(t),fs.remove(t),ds.push(t),sr(t)}function $n(t){var e=t.circle,n=e.x,r=e.cy,i={x:n,y:r},o=t.P,a=t.N,u=[t];Bn(t);for(var s=o;s.circle&&ka(n-s.circle.x)<Ua&&ka(r-s.circle.cy)<Ua;)o=s.P,u.unshift(s),Bn(s),s=o;u.unshift(s),Kn(s);for(var c=a;c.circle&&ka(n-c.circle.x)<Ua&&ka(r-c.circle.cy)<Ua;)a=c.N,u.push(c),Bn(c),c=a;u.push(c),Kn(c);var l,f=u.length;for(l=1;l<f;++l)c=u[l],s=u[l-1],or(c.edge,s.site,c.site,i);s=u[0],c=u[f-1],c.edge=rr(s.site,c.site,null,i),Qn(s),Qn(c)}function Wn(t){for(var e,n,r,i,o=t.x,a=t.y,u=fs._;u;)if(r=Yn(u,a)-o,r>Ua)u=u.L;else{if(i=o-Vn(u,a),!(i>Ua)){r>-Ua?(e=u.P,n=u):i>-Ua?(e=u,n=u.N):e=n=u;break}if(!u.R){e=u;break}u=u.R}var s=Un(t);if(fs.insert(e,s),e||n){if(e===n)return Kn(e),n=Un(e.site),fs.insert(s,n),s.edge=n.edge=rr(e.site,s.site),Qn(e),void Qn(n);if(!n)return void(s.edge=rr(e.site,s.site));Kn(e),Kn(n);var c=e.site,l=c.x,f=c.y,h=t.x-l,p=t.y-f,d=n.site,g=d.x-l,v=d.y-f,y=2*(h*v-p*g),m=h*h+p*p,x=g*g+v*v,b={x:(v*m-p*x)/y+l,y:(h*x-g*m)/y+f};or(n.edge,c,d,b),s.edge=rr(c,t,null,b),n.edge=rr(t,d,null,b),Qn(e),Qn(n)}}function Yn(t,e){var n=t.site,r=n.x,i=n.y,o=i-e;if(!o)return r;var a=t.P;if(!a)return-(1/0);n=a.site;var u=n.x,s=n.y,c=s-e;if(!c)return u;var l=u-r,f=1/o-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-o/2)))/f+r:(r+u)/2}function Vn(t,e){var n=t.N;if(n)return Yn(n,e);var r=t.site;return r.y===e?r.x:1/0}function Xn(t){this.site=t,this.edges=[]}function Gn(t){for(var e,n,r,i,o,a,u,s,c,l,f=t[0][0],h=t[1][0],p=t[0][1],d=t[1][1],g=ls,v=g.length;v--;)if(o=g[v],o&&o.prepare())for(u=o.edges,s=u.length,a=0;a<s;)l=u[a].end(),r=l.x,i=l.y,c=u[++a%s].start(),e=c.x,n=c.y,(ka(r-e)>Ua||ka(i-n)>Ua)&&(u.splice(a,0,new ar(ir(o.site,l,ka(r-f)<Ua&&d-i>Ua?{x:f,y:ka(e-f)<Ua?n:d}:ka(i-d)<Ua&&h-r>Ua?{x:ka(n-d)<Ua?e:h,y:d}:ka(r-h)<Ua&&i-p>Ua?{x:h,y:ka(e-h)<Ua?n:p}:ka(i-p)<Ua&&r-f>Ua?{x:ka(n-p)<Ua?e:f,y:p}:null),o.site,null)),++s)}function Zn(t,e){return e.angle-t.angle}function Jn(){sr(this),this.x=this.y=this.arc=this.site=this.cy=null}function Qn(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i.x,u=i.y,s=r.x-a,c=r.y-u,l=o.x-a,f=o.y-u,h=2*(s*f-c*l);if(!(h>=-Ba)){var p=s*s+c*c,d=l*l+f*f,g=(f*p-c*d)/h,v=(s*d-l*p)/h,f=v+u,y=gs.pop()||new Jn;y.arc=t,y.site=i,y.x=g+a,y.y=f+Math.sqrt(g*g+v*v),y.cy=f,t.circle=y;for(var m=null,x=ps._;x;)if(y.y<x.y||y.y===x.y&&y.x<=x.x){if(!x.L){m=x.P;break}x=x.L}else{if(!x.R){m=x;break}x=x.R}ps.insert(m,y),m||(hs=y)}}}}function Kn(t){var e=t.circle;e&&(e.P||(hs=e.N),ps.remove(e),gs.push(e),sr(e),t.circle=null)}function tr(t){for(var e,n=cs,r=Ve(t[0][0],t[0][1],t[1][0],t[1][1]),i=n.length;i--;)e=n[i],(!er(e,t)||!r(e)||ka(e.a.x-e.b.x)<Ua&&ka(e.a.y-e.b.y)<Ua)&&(e.a=e.b=null,n.splice(i,1))}function er(t,e){var n=t.b;if(n)return!0;var r,i,o=t.a,a=e[0][0],u=e[1][0],s=e[0][1],c=e[1][1],l=t.l,f=t.r,h=l.x,p=l.y,d=f.x,g=f.y,v=(h+d)/2,y=(p+g)/2;if(g===p){if(v<a||v>=u)return;if(h>d){if(o){if(o.y>=c)return}else o={x:v,y:s};n={x:v,y:c}}else{if(o){if(o.y<s)return}else o={x:v,y:c};n={x:v,y:s}}}else if(r=(h-d)/(g-p),i=y-r*v,r<-1||r>1)if(h>d){if(o){if(o.y>=c)return}else o={x:(s-i)/r,y:s};n={x:(c-i)/r,y:c}}else{if(o){if(o.y<s)return}else o={x:(c-i)/r,y:c};n={x:(s-i)/r,y:s}}else if(p<g){if(o){if(o.x>=u)return}else o={x:a,y:r*a+i};n={x:u,y:r*u+i}}else{if(o){if(o.x<a)return}else o={x:u,y:r*u+i};n={x:a,y:r*a+i}}return t.a=o,t.b=n,!0}function nr(t,e){this.l=t,this.r=e,this.a=this.b=null}function rr(t,e,n,r){var i=new nr(t,e);return cs.push(i),n&&or(i,t,e,n),r&&or(i,e,t,r),ls[t.i].edges.push(new ar(i,t,e)),ls[e.i].edges.push(new ar(i,e,t)),i}function ir(t,e,n){var r=new nr(t,null);return r.a=e,r.b=n,cs.push(r),r}function or(t,e,n,r){t.a||t.b?t.l===n?t.b=r:t.a=r:(t.a=r,t.l=e,t.r=n)}function ar(t,e,n){var r=t.a,i=t.b;this.edge=t,this.site=e,this.angle=n?Math.atan2(n.y-e.y,n.x-e.x):t.l===e?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function ur(){this._=null}function sr(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function cr(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function lr(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function fr(t){for(;t.L;)t=t.L;return t}function hr(t,e){var n,r,i,o=t.sort(pr).pop();for(cs=[],ls=new Array(t.length),fs=new ur,ps=new ur;;)if(i=hs,o&&(!i||o.y<i.y||o.y===i.y&&o.x<i.x))o.x===n&&o.y===r||(ls[o.i]=new Xn(o),Wn(o),n=o.x,r=o.y),o=t.pop();else{if(!i)break;$n(i.arc)}e&&(tr(e),Gn(e));var a={cells:ls,edges:cs};return fs=ps=cs=ls=null,a}function pr(t,e){return e.y-t.y||e.x-t.x}function dr(t,e,n){return(t.x-n.x)*(e.y-t.y)-(t.x-e.x)*(n.y-t.y)}function gr(t){return t.x}function vr(t){return t.y}function yr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function mr(t,e,n,r,i,o){if(!t(e,n,r,i,o)){var a=.5*(n+i),u=.5*(r+o),s=e.nodes;s[0]&&mr(t,s[0],n,r,a,u),s[1]&&mr(t,s[1],a,r,i,u),s[2]&&mr(t,s[2],n,u,a,o),s[3]&&mr(t,s[3],a,u,i,o)}}function xr(t,e,n,r,i,o,a){var u,s=1/0;return function c(t,l,f,h,p){if(!(l>o||f>a||h<r||p<i)){if(d=t.point){var d,g=e-t.x,v=n-t.y,y=g*g+v*v;if(y<s){var m=Math.sqrt(s=y);r=e-m,i=n-m,o=e+m,a=n+m,u=d}}for(var x=t.nodes,b=.5*(l+h),w=.5*(f+p),M=e>=b,_=n>=w,S=_<<1|M,k=S+4;S<k;++S)if(t=x[3&S])switch(3&S){case 0:c(t,l,f,b,w);break;case 1:c(t,b,f,h,w);break;case 2:c(t,l,w,b,p);break;case 3:c(t,b,w,h,p)}}}(t,r,i,o,a),u}function br(t,e){t=pa.rgb(t),e=pa.rgb(e);var n=t.r,r=t.g,i=t.b,o=e.r-n,a=e.g-r,u=e.b-i;return function(t){return"#"+kt(Math.round(n+o*t))+kt(Math.round(r+a*t))+kt(Math.round(i+u*t))}}function wr(t,e){var n,r={},i={};for(n in t)n in e?r[n]=Sr(t[n],e[n]):i[n]=t[n];for(n in e)n in t||(i[n]=e[n]);return function(t){for(n in r)i[n]=r[n](t);return i}}function Mr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function _r(t,e){var n,r,i,o=ys.lastIndex=ms.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=ys.exec(t))&&(r=ms.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Mr(n,r)})),o=ms.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?(e=s[0].x,function(t){return e(t)+""}):function(){return e}:(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})}function Sr(t,e){for(var n,r=pa.interpolators.length;--r>=0&&!(n=pa.interpolators[r](t,e)););return n}function kr(t,e){var n,r=[],i=[],o=t.length,a=e.length,u=Math.min(t.length,e.length);for(n=0;n<u;++n)r.push(Sr(t[n],e[n]));for(;n<o;++n)i[n]=t[n];for(;n<a;++n)i[n]=e[n];return function(t){for(n=0;n<u;++n)i[n]=r[n](t);return i}}function Tr(t){return function(e){return e<=0?0:e>=1?1:t(e)}}function Er(t){return function(e){return 1-t(1-e)}}function Cr(t){return function(e){return.5*(e<.5?t(2*e):2-t(2-2*e))}}function Nr(t){return t*t}function Ar(t){return t*t*t}function Lr(t){if(t<=0)return 0;if(t>=1)return 1;var e=t*t,n=e*t;return 4*(t<.5?n:3*(t-e)+n-.75)}function qr(t){return function(e){return Math.pow(e,t)}}function Dr(t){return 1-Math.cos(t*Va)}function jr(t){return Math.pow(2,10*(t-1))}function Rr(t){return 1-Math.sqrt(1-t*t)}function Pr(t,e){var n;return arguments.length<2&&(e=.45),arguments.length?n=e/Wa*Math.asin(1/t):(t=1,n=e/4),function(r){return 1+t*Math.pow(2,-10*r)*Math.sin((r-n)*Wa/e)}}function Or(t){return t||(t=1.70158),function(e){return e*e*((t+1)*e-t)}}function zr(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function Fr(t,e){t=pa.hcl(t),e=pa.hcl(e);var n=t.h,r=t.c,i=t.l,o=e.h-n,a=e.c-r,u=e.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?e.c:r),isNaN(o)?(o=0,n=isNaN(n)?e.h:n):o>180?o-=360:o<-180&&(o+=360),function(t){return gt(n+o*t,r+a*t,i+u*t)+""}}function Hr(t,e){t=pa.hsl(t),e=pa.hsl(e);var n=t.h,r=t.s,i=t.l,o=e.h-n,a=e.s-r,u=e.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?e.s:r),isNaN(o)?(o=0,n=isNaN(n)?e.h:n):o>180?o-=360:o<-180&&(o+=360),function(t){return pt(n+o*t,r+a*t,i+u*t)+""}}function Ir(t,e){t=pa.lab(t),e=pa.lab(e);var n=t.l,r=t.a,i=t.b,o=e.l-n,a=e.a-r,u=e.b-i;return function(t){return yt(n+o*t,r+a*t,i+u*t)+""}}function Ur(t,e){return e-=t,function(n){return Math.round(t+e*n)}}function Br(t){var e=[t.a,t.b],n=[t.c,t.d],r=Wr(e),i=$r(e,n),o=Wr(Yr(n,e,-i))||0;e[0]*n[1]<n[0]*e[1]&&(e[0]*=-1,e[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(e[1],e[0]):Math.atan2(-n[0],n[1]))*Ga,this.translate=[t.e,t.f],this.scale=[r,o],this.skew=o?Math.atan2(i,o)*Ga:0}function $r(t,e){return t[0]*e[0]+t[1]*e[1]}function Wr(t){var e=Math.sqrt($r(t,t));return e&&(t[0]/=e,t[1]/=e),e}function Yr(t,e,n){return t[0]+=n*e[0],t[1]+=n*e[1],t}function Vr(t){return t.length?t.pop()+",":""}function Xr(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push("translate(",null,",",null,")");r.push({i:i-4,x:Mr(t[0],e[0])},{i:i-2,x:Mr(t[1],e[1])})}else(e[0]||e[1])&&n.push("translate("+e+")")}function Gr(t,e,n,r){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),r.push({i:n.push(Vr(n)+"rotate(",null,")")-2,x:Mr(t,e)})):e&&n.push(Vr(n)+"rotate("+e+")")}function Zr(t,e,n,r){t!==e?r.push({i:n.push(Vr(n)+"skewX(",null,")")-2,x:Mr(t,e)}):e&&n.push(Vr(n)+"skewX("+e+")")}function Jr(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push(Vr(n)+"scale(",null,",",null,")");r.push({i:i-4,x:Mr(t[0],e[0])},{i:i-2,x:Mr(t[1],e[1])})}else 1===e[0]&&1===e[1]||n.push(Vr(n)+"scale("+e+")")}function Qr(t,e){var n=[],r=[];return t=pa.transform(t),e=pa.transform(e),Xr(t.translate,e.translate,n,r),Gr(t.rotate,e.rotate,n,r),Zr(t.skew,e.skew,n,r),Jr(t.scale,e.scale,n,r),t=e=null,function(t){for(var e,i=-1,o=r.length;++i<o;)n[(e=r[i]).i]=e.x(t);return n.join("")}}function Kr(t,e){return e=(e-=t=+t)||1/e,function(n){return(n-t)/e}}function ti(t,e){return e=(e-=t=+t)||1/e,function(n){return Math.max(0,Math.min(1,(n-t)/e))}}function ei(t){for(var e=t.source,n=t.target,r=ri(e,n),i=[e];e!==r;)e=e.parent,i.push(e);for(var o=i.length;n!==r;)i.splice(o,0,n),n=n.parent;return i}function ni(t){for(var e=[],n=t.parent;null!=n;)e.push(t),t=n,n=n.parent;return e.push(t),e}function ri(t,e){if(t===e)return t;for(var n=ni(t),r=ni(e),i=n.pop(),o=r.pop(),a=null;i===o;)a=i,i=n.pop(),o=r.pop();return a}function ii(t){t.fixed|=2}function oi(t){t.fixed&=-7}function ai(t){t.fixed|=4,t.px=t.x,t.py=t.y}function ui(t){t.fixed&=-5}function si(t,e,n){var r=0,i=0;if(t.charge=0,!t.leaf)for(var o,a=t.nodes,u=a.length,s=-1;++s<u;)o=a[s],null!=o&&(si(o,e,n),t.charge+=o.charge,r+=o.charge*o.cx,i+=o.charge*o.cy);if(t.point){t.leaf||(t.point.x+=Math.random()-.5,t.point.y+=Math.random()-.5);var c=e*n[t.point.index];t.charge+=t.pointCharge=c,r+=c*t.point.x,i+=c*t.point.y}t.cx=r/t.charge,t.cy=i/t.charge}function ci(t,e){return pa.rebind(t,e,"sort","children","value"),t.nodes=t,t.links=gi,t}function li(t,e){for(var n=[t];null!=(t=n.pop());)if(e(t),(i=t.children)&&(r=i.length))for(var r,i;--r>=0;)n.push(i[r])}function fi(t,e){for(var n=[t],r=[];null!=(t=n.pop());)if(r.push(t),(o=t.children)&&(i=o.length))for(var i,o,a=-1;++a<i;)n.push(o[a]);for(;null!=(t=r.pop());)e(t)}function hi(t){return t.children}function pi(t){return t.value}function di(t,e){return e.value-t.value}function gi(t){return pa.merge(t.map(function(t){return(t.children||[]).map(function(e){return{source:t,target:e}})}))}function vi(t){return t.x}function yi(t){return t.y}function mi(t,e,n){t.y0=e,t.y=n}function xi(t){return pa.range(t.length)}function bi(t){for(var e=-1,n=t[0].length,r=[];++e<n;)r[e]=0;return r}function wi(t){for(var e,n=1,r=0,i=t[0][1],o=t.length;n<o;++n)(e=t[n][1])>i&&(r=n,i=e);return r}function Mi(t){return t.reduce(_i,0)}function _i(t,e){return t+e[1]}function Si(t,e){return ki(t,Math.ceil(Math.log(e.length)/Math.LN2+1))}function ki(t,e){for(var n=-1,r=+t[0],i=(t[1]-r)/e,o=[];++n<=e;)o[n]=i*n+r;return o}function Ti(t){return[pa.min(t),pa.max(t)]}function Ei(t,e){return t.value-e.value}function Ci(t,e){var n=t._pack_next;t._pack_next=e,e._pack_prev=t,e._pack_next=n,n._pack_prev=e}function Ni(t,e){t._pack_next=e,e._pack_prev=t}function Ai(t,e){var n=e.x-t.x,r=e.y-t.y,i=t.r+e.r;return.999*i*i>n*n+r*r}function Li(t){function e(t){l=Math.min(t.x-t.r,l),f=Math.max(t.x+t.r,f),h=Math.min(t.y-t.r,h),p=Math.max(t.y+t.r,p)}if((n=t.children)&&(c=n.length)){var n,r,i,o,a,u,s,c,l=1/0,f=-(1/0),h=1/0,p=-(1/0);if(n.forEach(qi),r=n[0],r.x=-r.r,r.y=0,e(r),c>1&&(i=n[1],i.x=i.r,i.y=0,e(i),c>2))for(o=n[2],Ri(r,i,o),e(o),Ci(r,o),r._pack_prev=o,Ci(o,i),i=r._pack_next,a=3;a<c;a++){Ri(r,i,o=n[a]);var d=0,g=1,v=1;for(u=i._pack_next;u!==i;u=u._pack_next,g++)if(Ai(u,o)){d=1;break}if(1==d)for(s=r._pack_prev;s!==u._pack_prev&&!Ai(s,o);s=s._pack_prev,v++);d?(g<v||g==v&&i.r<r.r?Ni(r,i=u):Ni(r=s,i),a--):(Ci(r,o),i=o,e(o))}var y=(l+f)/2,m=(h+p)/2,x=0;for(a=0;a<c;a++)o=n[a],o.x-=y,o.y-=m,x=Math.max(x,o.r+Math.sqrt(o.x*o.x+o.y*o.y));t.r=x,n.forEach(Di)}}function qi(t){t._pack_next=t._pack_prev=t}function Di(t){delete t._pack_next,delete t._pack_prev}function ji(t,e,n,r){var i=t.children;if(t.x=e+=r*t.x,t.y=n+=r*t.y,t.r*=r,i)for(var o=-1,a=i.length;++o<a;)ji(i[o],e,n,r)}function Ri(t,e,n){var r=t.r+n.r,i=e.x-t.x,o=e.y-t.y;if(r&&(i||o)){var a=e.r+n.r,u=i*i+o*o;a*=a,r*=r;var s=.5+(r-a)/(2*u),c=Math.sqrt(Math.max(0,2*a*(r+u)-(r-=u)*r-a*a))/(2*u);n.x=t.x+s*i+c*o,n.y=t.y+s*o-c*i}else n.x=t.x+r,n.y=t.y}function Pi(t,e){return t.parent==e.parent?1:2}function Oi(t){var e=t.children;return e.length?e[0]:t.t}function zi(t){var e,n=t.children;return(e=n.length)?n[e-1]:t.t}function Fi(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function Hi(t){for(var e,n=0,r=0,i=t.children,o=i.length;--o>=0;)e=i[o],e.z+=n,e.m+=n,n+=e.s+(r+=e.c)}function Ii(t,e,n){return t.a.parent===e.parent?t.a:n}function Ui(t){return 1+pa.max(t,function(t){return t.y})}function Bi(t){return t.reduce(function(t,e){return t+e.x},0)/t.length}function $i(t){var e=t.children;return e&&e.length?$i(e[0]):t}function Wi(t){var e,n=t.children;return n&&(e=n.length)?Wi(n[e-1]):t}function Yi(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function Vi(t,e){var n=t.x+e[3],r=t.y+e[0],i=t.dx-e[1]-e[3],o=t.dy-e[0]-e[2];return i<0&&(n+=i/2,i=0),o<0&&(r+=o/2,o=0),{x:n,y:r,dx:i,dy:o}}function Xi(t){var e=t[0],n=t[t.length-1];return e<n?[e,n]:[n,e]}function Gi(t){return t.rangeExtent?t.rangeExtent():Xi(t.range())}function Zi(t,e,n,r){var i=n(t[0],t[1]),o=r(e[0],e[1]);return function(t){return o(i(t))}}function Ji(t,e){var n,r=0,i=t.length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}function Qi(t){return t?{floor:function(e){return Math.floor(e/t)*t},ceil:function(e){return Math.ceil(e/t)*t}}:Ns}function Ki(t,e,n,r){var i=[],o=[],a=0,u=Math.min(t.length,e.length)-1;for(t[u]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<=u;)i.push(n(t[a-1],t[a])),o.push(r(e[a-1],e[a]));return function(e){var n=pa.bisect(t,e,1,u)-1;return o[n](i[n](e))}}function to(t,e,n,r){function i(){var i=Math.min(t.length,e.length)>2?Ki:Zi,s=r?ti:Kr;return a=i(t,e,s,n),u=i(e,t,s,Sr),o}function o(t){return a(t)}var a,u;return o.invert=function(t){return u(t)},o.domain=function(e){return arguments.length?(t=e.map(Number),i()):t},o.range=function(t){return arguments.length?(e=t,i()):e},o.rangeRound=function(t){return o.range(t).interpolate(Ur)},o.clamp=function(t){return arguments.length?(r=t,i()):r},o.interpolate=function(t){return arguments.length?(n=t,i()):n},o.ticks=function(e){return io(t,e)},o.tickFormat=function(e,n){return oo(t,e,n)},o.nice=function(e){return no(t,e),i()},o.copy=function(){return to(t,e,n,r)},i()}function eo(t,e){return pa.rebind(t,e,"range","rangeRound","interpolate","clamp")}function no(t,e){return Ji(t,Qi(ro(t,e)[2])),Ji(t,Qi(ro(t,e)[2])),t}function ro(t,e){null==e&&(e=10);var n=Xi(t),r=n[1]-n[0],i=Math.pow(10,Math.floor(Math.log(r/e)/Math.LN10)),o=e/r*i;return o<=.15?i*=10:o<=.35?i*=5:o<=.75&&(i*=2),n[0]=Math.ceil(n[0]/i)*i,n[1]=Math.floor(n[1]/i)*i+.5*i,n[2]=i,n}function io(t,e){return pa.range.apply(pa,ro(t,e))}function oo(t,e,n){var r=ro(t,e);if(n){var i=yu.exec(n);if(i.shift(),"s"===i[8]){var o=pa.formatPrefix(Math.max(ka(r[0]),ka(r[1])));return i[7]||(i[7]="."+ao(o.scale(r[2]))),
i[8]="f",n=pa.format(i.join("")),function(t){return n(o.scale(t))+o.symbol}}i[7]||(i[7]="."+uo(i[8],r)),n=i.join("")}else n=",."+ao(r[2])+"f";return pa.format(n)}function ao(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}function uo(t,e){var n=ao(e[2]);return t in As?Math.abs(n-ao(Math.max(ka(e[0]),ka(e[1]))))+ +("e"!==t):n-2*("%"===t)}function so(t,e,n,r){function i(t){return(n?Math.log(t<0?0:t):-Math.log(t>0?0:-t))/Math.log(e)}function o(t){return n?Math.pow(e,t):-Math.pow(e,-t)}function a(e){return t(i(e))}return a.invert=function(e){return o(t.invert(e))},a.domain=function(e){return arguments.length?(n=e[0]>=0,t.domain((r=e.map(Number)).map(i)),a):r},a.base=function(n){return arguments.length?(e=+n,t.domain(r.map(i)),a):e},a.nice=function(){var e=Ji(r.map(i),n?Math:qs);return t.domain(e),r=e.map(o),a},a.ticks=function(){var t=Xi(r),a=[],u=t[0],s=t[1],c=Math.floor(i(u)),l=Math.ceil(i(s)),f=e%1?2:e;if(isFinite(l-c)){if(n){for(;c<l;c++)for(var h=1;h<f;h++)a.push(o(c)*h);a.push(o(c))}else for(a.push(o(c));c++<l;)for(var h=f-1;h>0;h--)a.push(o(c)*h);for(c=0;a[c]<u;c++);for(l=a.length;a[l-1]>s;l--);a=a.slice(c,l)}return a},a.tickFormat=function(t,n){if(!arguments.length)return Ls;arguments.length<2?n=Ls:"function"!=typeof n&&(n=pa.format(n));var r=Math.max(1,e*t/a.ticks().length);return function(t){var a=t/o(Math.round(i(t)));return a*e<e-.5&&(a*=e),a<=r?n(t):""}},a.copy=function(){return so(t.copy(),e,n,r)},eo(a,t)}function co(t,e,n){function r(e){return t(i(e))}var i=lo(e),o=lo(1/e);return r.invert=function(e){return o(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain((n=e.map(Number)).map(i)),r):n},r.ticks=function(t){return io(n,t)},r.tickFormat=function(t,e){return oo(n,t,e)},r.nice=function(t){return r.domain(no(n,t))},r.exponent=function(a){return arguments.length?(i=lo(e=a),o=lo(1/e),t.domain(n.map(i)),r):e},r.copy=function(){return co(t.copy(),e,n)},eo(r,t)}function lo(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function fo(t,e){function n(n){return o[((i.get(n)||("range"===e.t?i.set(n,t.push(n)):NaN))-1)%o.length]}function r(e,n){return pa.range(t.length).map(function(t){return e+n*t})}var i,o,a;return n.domain=function(r){if(!arguments.length)return t;t=[],i=new d;for(var o,a=-1,u=r.length;++a<u;)i.has(o=r[a])||i.set(o,t.push(o));return n[e.t].apply(n,e.a)},n.range=function(t){return arguments.length?(o=t,a=0,e={t:"range",a:arguments},n):o},n.rangePoints=function(i,u){arguments.length<2&&(u=0);var s=i[0],c=i[1],l=t.length<2?(s=(s+c)/2,0):(c-s)/(t.length-1+u);return o=r(s+l*u/2,l),a=0,e={t:"rangePoints",a:arguments},n},n.rangeRoundPoints=function(i,u){arguments.length<2&&(u=0);var s=i[0],c=i[1],l=t.length<2?(s=c=Math.round((s+c)/2),0):(c-s)/(t.length-1+u)|0;return o=r(s+Math.round(l*u/2+(c-s-(t.length-1+u)*l)/2),l),a=0,e={t:"rangeRoundPoints",a:arguments},n},n.rangeBands=function(i,u,s){arguments.length<2&&(u=0),arguments.length<3&&(s=u);var c=i[1]<i[0],l=i[c-0],f=i[1-c],h=(f-l)/(t.length-u+2*s);return o=r(l+h*s,h),c&&o.reverse(),a=h*(1-u),e={t:"rangeBands",a:arguments},n},n.rangeRoundBands=function(i,u,s){arguments.length<2&&(u=0),arguments.length<3&&(s=u);var c=i[1]<i[0],l=i[c-0],f=i[1-c],h=Math.floor((f-l)/(t.length-u+2*s));return o=r(l+Math.round((f-l-(t.length-u)*h)/2),h),c&&o.reverse(),a=Math.round(h*(1-u)),e={t:"rangeRoundBands",a:arguments},n},n.rangeBand=function(){return a},n.rangeExtent=function(){return Xi(e.a[0])},n.copy=function(){return fo(t,e)},n.domain(t)}function ho(t,e){function n(){var n=0,o=e.length;for(i=[];++n<o;)i[n-1]=pa.quantile(t,n/o);return r}function r(t){if(!isNaN(t=+t))return e[pa.bisect(i,t)]}var i;return r.domain=function(e){return arguments.length?(t=e.map(s).filter(c).sort(u),n()):t},r.range=function(t){return arguments.length?(e=t,n()):e},r.quantiles=function(){return i},r.invertExtent=function(n){return n=e.indexOf(n),n<0?[NaN,NaN]:[n>0?i[n-1]:t[0],n<i.length?i[n]:t[t.length-1]]},r.copy=function(){return ho(t,e)},n()}function po(t,e,n){function r(e){return n[Math.max(0,Math.min(a,Math.floor(o*(e-t))))]}function i(){return o=n.length/(e-t),a=n.length-1,r}var o,a;return r.domain=function(n){return arguments.length?(t=+n[0],e=+n[n.length-1],i()):[t,e]},r.range=function(t){return arguments.length?(n=t,i()):n},r.invertExtent=function(e){return e=n.indexOf(e),e=e<0?NaN:e/o+t,[e,e+1/o]},r.copy=function(){return po(t,e,n)},i()}function go(t,e){function n(n){if(n<=n)return e[pa.bisect(t,n)]}return n.domain=function(e){return arguments.length?(t=e,n):t},n.range=function(t){return arguments.length?(e=t,n):e},n.invertExtent=function(n){return n=e.indexOf(n),[t[n-1],t[n]]},n.copy=function(){return go(t,e)},n}function vo(t){function e(t){return+t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=n.map(e),e):t},e.ticks=function(e){return io(t,e)},e.tickFormat=function(e,n){return oo(t,e,n)},e.copy=function(){return vo(t)},e}function yo(){return 0}function mo(t){return t.innerRadius}function xo(t){return t.outerRadius}function bo(t){return t.startAngle}function wo(t){return t.endAngle}function Mo(t){return t&&t.padAngle}function _o(t,e,n,r){return(t-n)*e-(e-r)*t>0?0:1}function So(t,e,n,r,i){var o=t[0]-e[0],a=t[1]-e[1],u=(i?r:-r)/Math.sqrt(o*o+a*a),s=u*a,c=-u*o,l=t[0]+s,f=t[1]+c,h=e[0]+s,p=e[1]+c,d=(l+h)/2,g=(f+p)/2,v=h-l,y=p-f,m=v*v+y*y,x=n-r,b=l*p-h*f,w=(y<0?-1:1)*Math.sqrt(Math.max(0,x*x*m-b*b)),M=(b*y-v*w)/m,_=(-b*v-y*w)/m,S=(b*y+v*w)/m,k=(-b*v+y*w)/m,T=M-d,E=_-g,C=S-d,N=k-g;return T*T+E*E>C*C+N*N&&(M=S,_=k),[[M-s,_-c],[M*n/x,_*n/x]]}function ko(t){function e(e){function a(){c.push("M",o(t(l),u))}for(var s,c=[],l=[],f=-1,h=e.length,p=Lt(n),d=Lt(r);++f<h;)i.call(this,s=e[f],f)?l.push([+p.call(this,s,f),+d.call(this,s,f)]):l.length&&(a(),l=[]);return l.length&&a(),c.length?c.join(""):null}var n=jn,r=Rn,i=je,o=To,a=o.key,u=.7;return e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(r=t,e):r},e.defined=function(t){return arguments.length?(i=t,e):i},e.interpolate=function(t){return arguments.length?(a="function"==typeof t?o=t:(o=zs.get(t)||To).key,e):a},e.tension=function(t){return arguments.length?(u=t,e):u},e}function To(t){return t.length>1?t.join("L"):t+"Z"}function Eo(t){return t.join("L")+"Z"}function Co(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r[0]+(r=t[e])[0])/2,"V",r[1]);return n>1&&i.push("H",r[0]),i.join("")}function No(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("V",(r=t[e])[1],"H",r[0]);return i.join("")}function Ao(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r=t[e])[0],"V",r[1]);return i.join("")}function Lo(t,e){return t.length<4?To(t):t[1]+jo(t.slice(1,-1),Ro(t,e))}function qo(t,e){return t.length<3?Eo(t):t[0]+jo((t.push(t[0]),t),Ro([t[t.length-2]].concat(t,[t[1]]),e))}function Do(t,e){return t.length<3?To(t):t[0]+jo(t,Ro(t,e))}function jo(t,e){if(e.length<1||t.length!=e.length&&t.length!=e.length+2)return To(t);var n=t.length!=e.length,r="",i=t[0],o=t[1],a=e[0],u=a,s=1;if(n&&(r+="Q"+(o[0]-2*a[0]/3)+","+(o[1]-2*a[1]/3)+","+o[0]+","+o[1],i=t[1],s=2),e.length>1){u=e[1],o=t[s],s++,r+="C"+(i[0]+a[0])+","+(i[1]+a[1])+","+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1];for(var c=2;c<e.length;c++,s++)o=t[s],u=e[c],r+="S"+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1]}if(n){var l=t[s];r+="Q"+(o[0]+2*u[0]/3)+","+(o[1]+2*u[1]/3)+","+l[0]+","+l[1]}return r}function Ro(t,e){for(var n,r=[],i=(1-e)/2,o=t[0],a=t[1],u=1,s=t.length;++u<s;)n=o,o=a,a=t[u],r.push([i*(a[0]-n[0]),i*(a[1]-n[1])]);return r}function Po(t){if(t.length<3)return To(t);var e=1,n=t.length,r=t[0],i=r[0],o=r[1],a=[i,i,i,(r=t[1])[0]],u=[o,o,o,r[1]],s=[i,",",o,"L",Ho(Is,a),",",Ho(Is,u)];for(t.push(t[n-1]);++e<=n;)r=t[e],a.shift(),a.push(r[0]),u.shift(),u.push(r[1]),Io(s,a,u);return t.pop(),s.push("L",r),s.join("")}function Oo(t){if(t.length<4)return To(t);for(var e,n=[],r=-1,i=t.length,o=[0],a=[0];++r<3;)e=t[r],o.push(e[0]),a.push(e[1]);for(n.push(Ho(Is,o)+","+Ho(Is,a)),--r;++r<i;)e=t[r],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),Io(n,o,a);return n.join("")}function zo(t){for(var e,n,r=-1,i=t.length,o=i+4,a=[],u=[];++r<4;)n=t[r%i],a.push(n[0]),u.push(n[1]);for(e=[Ho(Is,a),",",Ho(Is,u)],--r;++r<o;)n=t[r%i],a.shift(),a.push(n[0]),u.shift(),u.push(n[1]),Io(e,a,u);return e.join("")}function Fo(t,e){var n=t.length-1;if(n)for(var r,i,o=t[0][0],a=t[0][1],u=t[n][0]-o,s=t[n][1]-a,c=-1;++c<=n;)r=t[c],i=c/n,r[0]=e*r[0]+(1-e)*(o+i*u),r[1]=e*r[1]+(1-e)*(a+i*s);return Po(t)}function Ho(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function Io(t,e,n){t.push("C",Ho(Fs,e),",",Ho(Fs,n),",",Ho(Hs,e),",",Ho(Hs,n),",",Ho(Is,e),",",Ho(Is,n))}function Uo(t,e){return(e[1]-t[1])/(e[0]-t[0])}function Bo(t){for(var e=0,n=t.length-1,r=[],i=t[0],o=t[1],a=r[0]=Uo(i,o);++e<n;)r[e]=(a+(a=Uo(i=o,o=t[e+1])))/2;return r[e]=a,r}function $o(t){for(var e,n,r,i,o=[],a=Bo(t),u=-1,s=t.length-1;++u<s;)e=Uo(t[u],t[u+1]),ka(e)<Ua?a[u]=a[u+1]=0:(n=a[u]/e,r=a[u+1]/e,i=n*n+r*r,i>9&&(i=3*e/Math.sqrt(i),a[u]=i*n,a[u+1]=i*r));for(u=-1;++u<=s;)i=(t[Math.min(s,u+1)][0]-t[Math.max(0,u-1)][0])/(6*(1+a[u]*a[u])),o.push([i||0,a[u]*i||0]);return o}function Wo(t){return t.length<3?To(t):t[0]+jo(t,$o(t))}function Yo(t){for(var e,n,r,i=-1,o=t.length;++i<o;)e=t[i],n=e[0],r=e[1]-Va,e[0]=n*Math.cos(r),e[1]=n*Math.sin(r);return t}function Vo(t){function e(e){function s(){g.push("M",u(t(y),f),l,c(t(v.reverse()),f),"Z")}for(var h,p,d,g=[],v=[],y=[],m=-1,x=e.length,b=Lt(n),w=Lt(i),M=n===r?function(){return p}:Lt(r),_=i===o?function(){return d}:Lt(o);++m<x;)a.call(this,h=e[m],m)?(v.push([p=+b.call(this,h,m),d=+w.call(this,h,m)]),y.push([+M.call(this,h,m),+_.call(this,h,m)])):v.length&&(s(),v=[],y=[]);return v.length&&s(),g.length?g.join(""):null}var n=jn,r=jn,i=0,o=Rn,a=je,u=To,s=u.key,c=u,l="L",f=.7;return e.x=function(t){return arguments.length?(n=r=t,e):r},e.x0=function(t){return arguments.length?(n=t,e):n},e.x1=function(t){return arguments.length?(r=t,e):r},e.y=function(t){return arguments.length?(i=o=t,e):o},e.y0=function(t){return arguments.length?(i=t,e):i},e.y1=function(t){return arguments.length?(o=t,e):o},e.defined=function(t){return arguments.length?(a=t,e):a},e.interpolate=function(t){return arguments.length?(s="function"==typeof t?u=t:(u=zs.get(t)||To).key,c=u.reverse||u,l=u.closed?"M":"L",e):s},e.tension=function(t){return arguments.length?(f=t,e):f},e}function Xo(t){return t.radius}function Go(t){return[t.x,t.y]}function Zo(t){return function(){var e=t.apply(this,arguments),n=e[0],r=e[1]-Va;return[n*Math.cos(r),n*Math.sin(r)]}}function Jo(){return 64}function Qo(){return"circle"}function Ko(t){var e=Math.sqrt(t/$a);return"M0,"+e+"A"+e+","+e+" 0 1,1 0,"+-e+"A"+e+","+e+" 0 1,1 0,"+e+"Z"}function ta(t){return function(){var e,n,r;(e=this[t])&&(r=e[n=e.active])&&(r.timer.c=null,r.timer.t=NaN,--e.count?delete e[n]:delete this[t],e.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function ea(t,e,n){return Aa(t,Xs),t.namespace=e,t.id=n,t}function na(t,e,n,r){var i=t.id,o=t.namespace;return X(t,"function"==typeof n?function(t,a,u){t[o][i].tween.set(e,r(n.call(t,t.__data__,a,u)))}:(n=r(n),function(t){t[o][i].tween.set(e,n)}))}function ra(t){return null==t&&(t=""),function(){this.textContent=t}}function ia(t){return null==t?"__transition__":"__transition_"+t+"__"}function oa(t,e,n,r,i){function o(t){var e=g.delay;return c.t=e+s,e<=t?a(t-e):void(c.c=a)}function a(n){var i=p.active,o=p[i];o&&(o.timer.c=null,o.timer.t=NaN,--p.count,delete p[i],o.event&&o.event.interrupt.call(t,t.__data__,o.index));for(var a in p)if(+a<r){var d=p[a];d.timer.c=null,d.timer.t=NaN,--p.count,delete p[a]}c.c=u,Pt(function(){return c.c&&u(n||1)&&(c.c=null,c.t=NaN),1},0,s),p.active=r,g.event&&g.event.start.call(t,t.__data__,e),h=[],g.tween.forEach(function(n,r){(r=r.call(t,t.__data__,e))&&h.push(r)}),f=g.ease,l=g.duration}function u(i){for(var o=i/l,a=f(o),u=h.length;u>0;)h[--u].call(t,a);if(o>=1)return g.event&&g.event.end.call(t,t.__data__,e),--p.count?delete p[r]:delete t[n],1}var s,c,l,f,h,p=t[n]||(t[n]={active:0,count:0}),g=p[r];g||(s=i.time,c=Pt(o,0,s),g=p[r]={tween:new d,time:s,timer:c,delay:i.delay,duration:i.duration,ease:i.ease,index:e},i=null,++p.count)}function aa(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate("+(isFinite(r)?r:n(t))+",0)"})}function ua(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate(0,"+(isFinite(r)?r:n(t))+")"})}function sa(t){return t.toISOString()}function ca(t,e,n){function r(e){return t(e)}function i(t,n){var r=t[1]-t[0],i=r/n,o=pa.bisect(rc,i);return o==rc.length?[e.year,ro(t.map(function(t){return t/31536e6}),n)[2]]:o?e[i/rc[o-1]<rc[o]/i?o-1:o]:[ac,ro(t,n)[2]]}return r.invert=function(e){return la(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain(e),r):t.domain().map(la)},r.nice=function(t,e){function n(n){return!isNaN(n)&&!t.range(n,la(+n+1),e).length}var o=r.domain(),a=Xi(o),u=null==t?i(a,10):"number"==typeof t&&i(a,t);return u&&(t=u[0],e=u[1]),r.domain(Ji(o,e>1?{floor:function(e){for(;n(e=t.floor(e));)e=la(e-1);return e},ceil:function(e){for(;n(e=t.ceil(e));)e=la(+e+1);return e}}:t))},r.ticks=function(t,e){var n=Xi(r.domain()),o=null==t?i(n,10):"number"==typeof t?i(n,t):!t.range&&[{range:t},e];return o&&(t=o[0],e=o[1]),t.range(n[0],la(+n[1]+1),e<1?1:e)},r.tickFormat=function(){return n},r.copy=function(){return ca(t.copy(),e,n)},eo(r,t)}function la(t){return new Date(t)}function fa(t){return JSON.parse(t.responseText)}function ha(t){var e=va.createRange();return e.selectNode(va.body),e.createContextualFragment(t.responseText)}var pa={version:"3.5.17"},da=[].slice,ga=function(t){return da.call(t)},va=this.document;if(va)try{ga(va.documentElement.childNodes)[0].nodeType}catch(ya){ga=function(t){for(var e=t.length,n=new Array(e);e--;)n[e]=t[e];return n}}if(Date.now||(Date.now=function(){return+new Date}),va)try{va.createElement("DIV").style.setProperty("opacity",0,"")}catch(ma){var xa=this.Element.prototype,ba=xa.setAttribute,wa=xa.setAttributeNS,Ma=this.CSSStyleDeclaration.prototype,_a=Ma.setProperty;xa.setAttribute=function(t,e){ba.call(this,t,e+"")},xa.setAttributeNS=function(t,e,n){wa.call(this,t,e,n+"")},Ma.setProperty=function(t,e,n){_a.call(this,t,e+"",n)}}pa.ascending=u,pa.descending=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},pa.min=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&n>r&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&n>r&&(n=r)}return n},pa.max=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&r>n&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&r>n&&(n=r)}return n},pa.extent=function(t,e){var n,r,i,o=-1,a=t.length;if(1===arguments.length){for(;++o<a;)if(null!=(r=t[o])&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=t[o])&&(n>r&&(n=r),i<r&&(i=r))}else{for(;++o<a;)if(null!=(r=e.call(t,t[o],o))&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=e.call(t,t[o],o))&&(n>r&&(n=r),i<r&&(i=r))}return[n,i]},pa.sum=function(t,e){var n,r=0,i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)c(n=+t[o])&&(r+=n);else for(;++o<i;)c(n=+e.call(t,t[o],o))&&(r+=n);return r},pa.mean=function(t,e){var n,r=0,i=t.length,o=-1,a=i;if(1===arguments.length)for(;++o<i;)c(n=s(t[o]))?r+=n:--a;else for(;++o<i;)c(n=s(e.call(t,t[o],o)))?r+=n:--a;if(a)return r/a},pa.quantile=function(t,e){var n=(t.length-1)*e+1,r=Math.floor(n),i=+t[r-1],o=n-r;return o?i+o*(t[r]-i):i},pa.median=function(t,e){var n,r=[],i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)c(n=s(t[o]))&&r.push(n);else for(;++o<i;)c(n=s(e.call(t,t[o],o)))&&r.push(n);if(r.length)return pa.quantile(r.sort(u),.5)},pa.variance=function(t,e){var n,r,i=t.length,o=0,a=0,u=-1,l=0;if(1===arguments.length)for(;++u<i;)c(n=s(t[u]))&&(r=n-o,o+=r/++l,a+=r*(n-o));else for(;++u<i;)c(n=s(e.call(t,t[u],u)))&&(r=n-o,o+=r/++l,a+=r*(n-o));if(l>1)return a/(l-1)},pa.deviation=function(){var t=pa.variance.apply(this,arguments);return t?Math.sqrt(t):t};var Sa=l(u);pa.bisectLeft=Sa.left,pa.bisect=pa.bisectRight=Sa.right,pa.bisector=function(t){return l(1===t.length?function(e,n){return u(t(e),n)}:t)},pa.shuffle=function(t,e,n){(o=arguments.length)<3&&(n=t.length,o<2&&(e=0));for(var r,i,o=n-e;o;)i=Math.random()*o--|0,r=t[o+e],t[o+e]=t[i+e],t[i+e]=r;return t},pa.permute=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},pa.pairs=function(t){for(var e,n=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);n<r;)o[n]=[e=i,i=t[++n]];return o},pa.transpose=function(t){if(!(i=t.length))return[];for(var e=-1,n=pa.min(t,f),r=new Array(n);++e<n;)for(var i,o=-1,a=r[e]=new Array(i);++o<i;)a[o]=t[o][e];return r},pa.zip=function(){return pa.transpose(arguments)},pa.keys=function(t){var e=[];for(var n in t)e.push(n);return e},pa.values=function(t){var e=[];for(var n in t)e.push(t[n]);return e},pa.entries=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},pa.merge=function(t){for(var e,n,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(n=new Array(a);--i>=0;)for(r=t[i],e=r.length;--e>=0;)n[--a]=r[e];return n};var ka=Math.abs;pa.range=function(t,e,n){if(arguments.length<3&&(n=1,arguments.length<2&&(e=t,t=0)),(e-t)/n===1/0)throw new Error("infinite range");var r,i=[],o=h(ka(n)),a=-1;if(t*=o,e*=o,n*=o,n<0)for(;(r=t+n*++a)>e;)i.push(r/o);else for(;(r=t+n*++a)<e;)i.push(r/o);return i},pa.map=function(t,e){var n=new d;if(t instanceof d)t.forEach(function(t,e){n.set(t,e)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(1===arguments.length)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e.call(t,r=t[i],i),r)}else for(var a in t)n.set(a,t[a]);return n};var Ta="__proto__",Ea="\0";p(d,{has:y,get:function(t){return this._[g(t)]},set:function(t,e){return this._[g(t)]=e},remove:m,keys:x,values:function(){var t=[];for(var e in this._)t.push(this._[e]);return t},entries:function(){var t=[];for(var e in this._)t.push({key:v(e),value:this._[e]});return t},size:b,empty:w,forEach:function(t){for(var e in this._)t.call(this,v(e),this._[e])}}),pa.nest=function(){function t(e,a,u){if(u>=o.length)return r?r.call(i,a):n?a.sort(n):a;for(var s,c,l,f,h=-1,p=a.length,g=o[u++],v=new d;++h<p;)(f=v.get(s=g(c=a[h])))?f.push(c):v.set(s,[c]);return e?(c=e(),l=function(n,r){c.set(n,t(e,r,u))}):(c={},l=function(n,r){c[n]=t(e,r,u)}),v.forEach(l),c}function e(t,n){if(n>=o.length)return t;var r=[],i=a[n++];return t.forEach(function(t,i){r.push({key:t,values:e(i,n)})}),i?r.sort(function(t,e){return i(t.key,e.key)}):r}var n,r,i={},o=[],a=[];return i.map=function(e,n){return t(n,e,0)},i.entries=function(n){return e(t(pa.map,n,0),0)},i.key=function(t){return o.push(t),i},i.sortKeys=function(t){return a[o.length-1]=t,i},i.sortValues=function(t){return n=t,i},i.rollup=function(t){return r=t,i},i},pa.set=function(t){var e=new M;if(t)for(var n=0,r=t.length;n<r;++n)e.add(t[n]);return e},p(M,{has:y,add:function(t){return this._[g(t+="")]=!0,t},remove:m,values:x,size:b,empty:w,forEach:function(t){for(var e in this._)t.call(this,v(e))}}),pa.behavior={},pa.rebind=function(t,e){for(var n,r=1,i=arguments.length;++r<i;)t[n=arguments[r]]=S(t,e,e[n]);return t};var Ca=["webkit","ms","moz","Moz","o","O"];pa.dispatch=function(){for(var t=new E,e=-1,n=arguments.length;++e<n;)t[arguments[e]]=C(t);return t},E.prototype.on=function(t,e){var n=t.indexOf("."),r="";if(n>=0&&(r=t.slice(n+1),t=t.slice(0,n)),t)return arguments.length<2?this[t].on(r):this[t].on(r,e);if(2===arguments.length){if(null==e)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},pa.event=null,pa.requote=function(t){return t.replace(Na,"\\$&")};var Na=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,Aa={}.__proto__?function(t,e){t.__proto__=e}:function(t,e){for(var n in e)t[n]=e[n]},La=function(t,e){return e.querySelector(t)},qa=function(t,e){return e.querySelectorAll(t)},Da=function(t,e){var n=t.matches||t[k(t,"matchesSelector")];return(Da=function(t,e){return n.call(t,e)})(t,e)};"function"==typeof Sizzle&&(La=function(t,e){return Sizzle(t,e)[0]||null},qa=Sizzle,Da=Sizzle.matchesSelector),pa.selection=function(){return pa.select(va.documentElement)};var ja=pa.selection.prototype=[];ja.select=function(t){var e,n,r,i,o=[];t=D(t);for(var a=-1,u=this.length;++a<u;){o.push(e=[]),e.parentNode=(r=this[a]).parentNode;for(var s=-1,c=r.length;++s<c;)(i=r[s])?(e.push(n=t.call(i,i.__data__,s,a)),n&&"__data__"in i&&(n.__data__=i.__data__)):e.push(null)}return q(o)},ja.selectAll=function(t){var e,n,r=[];t=j(t);for(var i=-1,o=this.length;++i<o;)for(var a=this[i],u=-1,s=a.length;++u<s;)(n=a[u])&&(r.push(e=ga(t.call(n,n.__data__,u,i))),e.parentNode=n);return q(r)};var Ra="http://www.w3.org/1999/xhtml",Pa={svg:"http://www.w3.org/2000/svg",xhtml:Ra,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};pa.ns={prefix:Pa,qualify:function(t){var e=t.indexOf(":"),n=t;return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Pa.hasOwnProperty(n)?{space:Pa[n],local:t}:t}},ja.attr=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node();return t=pa.ns.qualify(t),t.local?n.getAttributeNS(t.space,t.local):n.getAttribute(t)}for(e in t)this.each(R(e,t[e]));return this}return this.each(R(t,e))},ja.classed=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node(),r=(t=z(t)).length,i=-1;if(e=n.classList){for(;++i<r;)if(!e.contains(t[i]))return!1}else for(e=n.getAttribute("class");++i<r;)if(!O(t[i]).test(e))return!1;return!0}for(e in t)this.each(F(e,t[e]));return this}return this.each(F(t,e))},ja.style=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){r<2&&(e="");for(n in t)this.each(I(n,t[n],e));return this}if(r<2){var i=this.node();return a(i).getComputedStyle(i,null).getPropertyValue(t)}n=""}return this.each(I(t,e,n))},ja.property=function(t,e){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(e in t)this.each(U(e,t[e]));return this}return this.each(U(t,e))},ja.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},ja.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},ja.append=function(t){return t=B(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},ja.insert=function(t,e){return t=B(t),e=D(e),this.select(function(){return this.insertBefore(t.apply(this,arguments),e.apply(this,arguments)||null)})},ja.remove=function(){return this.each($)},ja.data=function(t,e){function n(t,n){var r,i,o,a=t.length,l=n.length,f=Math.min(a,l),h=new Array(l),p=new Array(l),g=new Array(a);if(e){var v,y=new d,m=new Array(a);for(r=-1;++r<a;)(i=t[r])&&(y.has(v=e.call(i,i.__data__,r))?g[r]=i:y.set(v,i),m[r]=v);for(r=-1;++r<l;)(i=y.get(v=e.call(n,o=n[r],r)))?i!==!0&&(h[r]=i,i.__data__=o):p[r]=W(o),y.set(v,!0);for(r=-1;++r<a;)r in m&&y.get(m[r])!==!0&&(g[r]=t[r])}else{for(r=-1;++r<f;)i=t[r],o=n[r],i?(i.__data__=o,h[r]=i):p[r]=W(o);for(;r<l;++r)p[r]=W(n[r]);for(;r<a;++r)g[r]=t[r]}p.update=h,p.parentNode=h.parentNode=g.parentNode=t.parentNode,u.push(p),s.push(h),c.push(g)}var r,i,o=-1,a=this.length;if(!arguments.length){for(t=new Array(a=(r=this[0]).length);++o<a;)(i=r[o])&&(t[o]=i.__data__);return t}var u=G([]),s=q([]),c=q([]);if("function"==typeof t)for(;++o<a;)n(r=this[o],t.call(r,r.parentNode.__data__,o));else for(;++o<a;)n(r=this[o],t);return s.enter=function(){return u},s.exit=function(){return c},s},ja.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},ja.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=Y(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]),e.parentNode=(n=this[o]).parentNode;for(var u=0,s=n.length;u<s;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return q(i)},ja.order=function(){for(var t=-1,e=this.length;++t<e;)for(var n,r=this[t],i=r.length-1,o=r[i];--i>=0;)(n=r[i])&&(o&&o!==n.nextSibling&&o.parentNode.insertBefore(n,o),o=n);return this},ja.sort=function(t){t=V.apply(this,arguments);for(var e=-1,n=this.length;++e<n;)this[e].sort(t);return this.order()},ja.each=function(t){return X(this,function(e,n,r){t.call(e,e.__data__,n,r)})},ja.call=function(t){var e=ga(arguments);return t.apply(e[0]=this,e),this},ja.empty=function(){return!this.node()},ja.node=function(){for(var t=0,e=this.length;t<e;t++)for(var n=this[t],r=0,i=n.length;r<i;r++){var o=n[r];if(o)return o}return null},ja.size=function(){var t=0;return X(this,function(){++t}),t};var Oa=[];pa.selection.enter=G,pa.selection.enter.prototype=Oa,Oa.append=ja.append,Oa.empty=ja.empty,Oa.node=ja.node,Oa.call=ja.call,Oa.size=ja.size,Oa.select=function(t){for(var e,n,r,i,o,a=[],u=-1,s=this.length;++u<s;){r=(i=this[u]).update,a.push(e=[]),e.parentNode=i.parentNode;for(var c=-1,l=i.length;++c<l;)(o=i[c])?(e.push(r[c]=n=t.call(i.parentNode,o.__data__,c,u)),n.__data__=o.__data__):e.push(null)}return q(a)},Oa.insert=function(t,e){return arguments.length<2&&(e=Z(this)),ja.insert.call(this,t,e)},pa.select=function(t){var e;return"string"==typeof t?(e=[La(t,va)],e.parentNode=va.documentElement):(e=[t],e.parentNode=o(t)),q([e])},pa.selectAll=function(t){var e;return"string"==typeof t?(e=ga(qa(t,va)),e.parentNode=va.documentElement):(e=ga(t),e.parentNode=null),q([e])},ja.on=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){r<2&&(e=!1);for(n in t)this.each(J(n,t[n],e));return this}if(r<2)return(r=this.node()["__on"+t])&&r._;n=!1}return this.each(J(t,e,n))};var za=pa.map({mouseenter:"mouseover",mouseleave:"mouseout"});va&&za.forEach(function(t){"on"+t in va&&za.remove(t)});var Fa,Ha=0;pa.mouse=function(t){return et(t,A())};var Ia=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;pa.touch=function(t,e,n){if(arguments.length<3&&(n=e,e=A().changedTouches),e)for(var r,i=0,o=e.length;i<o;++i)if((r=e[i]).identifier===n)return et(t,r)},pa.behavior.drag=function(){function t(){this.on("mousedown.drag",i).on("touchstart.drag",o)}function e(t,e,i,o,a){return function(){function u(){var t,n,r=e(h,g);r&&(t=r[0]-x[0],n=r[1]-x[1],d|=t|n,x=r,p({type:"drag",x:r[0]+c[0],y:r[1]+c[1],dx:t,dy:n}))}function s(){e(h,g)&&(y.on(o+v,null).on(a+v,null),m(d),p({type:"dragend"}))}var c,l=this,f=pa.event.target.correspondingElement||pa.event.target,h=l.parentNode,p=n.of(l,arguments),d=0,g=t(),v=".drag"+(null==g?"":"-"+g),y=pa.select(i(f)).on(o+v,u).on(a+v,s),m=tt(f),x=e(h,g);r?(c=r.apply(l,arguments),c=[c.x-x[0],c.y-x[1]]):c=[0,0],p({type:"dragstart"})}}var n=L(t,"drag","dragstart","dragend"),r=null,i=e(T,pa.mouse,a,"mousemove","mouseup"),o=e(nt,pa.touch,_,"touchmove","touchend");return t.origin=function(e){return arguments.length?(r=e,t):r},pa.rebind(t,n,"on")},pa.touches=function(t,e){return arguments.length<2&&(e=A().touches),e?ga(e).map(function(e){var n=et(t,e);return n.identifier=e.identifier,n}):[]};var Ua=1e-6,Ba=Ua*Ua,$a=Math.PI,Wa=2*$a,Ya=Wa-Ua,Va=$a/2,Xa=$a/180,Ga=180/$a,Za=Math.SQRT2,Ja=2,Qa=4;pa.interpolateZoom=function(t,e){var n,r,i=t[0],o=t[1],a=t[2],u=e[0],s=e[1],c=e[2],l=u-i,f=s-o,h=l*l+f*f;if(h<Ba)r=Math.log(c/a)/Za,n=function(t){return[i+t*l,o+t*f,a*Math.exp(Za*t*r)]};else{var p=Math.sqrt(h),d=(c*c-a*a+Qa*h)/(2*a*Ja*p),g=(c*c-a*a-Qa*h)/(2*c*Ja*p),v=Math.log(Math.sqrt(d*d+1)-d),y=Math.log(Math.sqrt(g*g+1)-g);r=(y-v)/Za,n=function(t){var e=t*r,n=st(v),u=a/(Ja*p)*(n*ct(Za*e+v)-ut(v));return[i+u*l,o+u*f,a*n/st(Za*e+v)]}}return n.duration=1e3*r,n},pa.behavior.zoom=function(){function t(t){t.on(A,f).on(tu+".zoom",p).on("dblclick.zoom",d).on(j,h)}function e(t){return[(t[0]-S.x)/S.k,(t[1]-S.y)/S.k]}function n(t){return[t[0]*S.k+S.x,t[1]*S.k+S.y]}function r(t){S.k=Math.max(T[0],Math.min(T[1],t))}function i(t,e){e=n(e),S.x+=t[0]-e[0],S.y+=t[1]-e[1]}function o(e,n,o,a){e.__chart__={x:S.x,y:S.y,k:S.k},r(Math.pow(2,a)),i(v=n,o),e=pa.select(e),E>0&&(e=e.transition().duration(E)),e.call(t.event)}function u(){w&&w.domain(b.range().map(function(t){return(t-S.x)/S.k}).map(b.invert)),_&&_.domain(M.range().map(function(t){return(t-S.y)/S.k}).map(M.invert))}function s(t){C++||t({type:"zoomstart"})}function c(t){u(),t({type:"zoom",scale:S.k,translate:[S.x,S.y]})}function l(t){--C||(t({type:"zoomend"}),v=null)}function f(){function t(){u=1,i(pa.mouse(r),h),c(o)}function n(){f.on(q,null).on(D,null),p(u),l(o)}var r=this,o=R.of(r,arguments),u=0,f=pa.select(a(r)).on(q,t).on(D,n),h=e(pa.mouse(r)),p=tt(r);Vs.call(r),s(o)}function h(){function t(){var t=pa.touches(d);return p=S.k,t.forEach(function(t){t.identifier in v&&(v[t.identifier]=e(t))}),t}function n(){var e=pa.event.target;pa.select(e).on(b,a).on(w,u),M.push(e);for(var n=pa.event.changedTouches,r=0,i=n.length;r<i;++r)v[n[r].identifier]=null;var s=t(),c=Date.now();if(1===s.length){if(c-x<500){var l=s[0];o(d,l,v[l.identifier],Math.floor(Math.log(S.k)/Math.LN2)+1),N()}x=c}else if(s.length>1){var l=s[0],f=s[1],h=l[0]-f[0],p=l[1]-f[1];y=h*h+p*p}}function a(){var t,e,n,o,a=pa.touches(d);Vs.call(d);for(var u=0,s=a.length;u<s;++u,o=null)if(n=a[u],o=v[n.identifier]){if(e)break;t=n,e=o}if(o){var l=(l=n[0]-t[0])*l+(l=n[1]-t[1])*l,f=y&&Math.sqrt(l/y);t=[(t[0]+n[0])/2,(t[1]+n[1])/2],e=[(e[0]+o[0])/2,(e[1]+o[1])/2],r(f*p)}x=null,i(t,e),c(g)}function u(){if(pa.event.touches.length){for(var e=pa.event.changedTouches,n=0,r=e.length;n<r;++n)delete v[e[n].identifier];for(var i in v)return void t()}pa.selectAll(M).on(m,null),_.on(A,f).on(j,h),k(),l(g)}var p,d=this,g=R.of(d,arguments),v={},y=0,m=".zoom-"+pa.event.changedTouches[0].identifier,b="touchmove"+m,w="touchend"+m,M=[],_=pa.select(d),k=tt(d);n(),s(g),_.on(A,null).on(j,n)}function p(){var t=R.of(this,arguments);m?clearTimeout(m):(Vs.call(this),g=e(v=y||pa.mouse(this)),s(t)),m=setTimeout(function(){m=null,l(t)},50),N(),r(Math.pow(2,.002*Ka())*S.k),i(v,g),c(t)}function d(){var t=pa.mouse(this),n=Math.log(S.k)/Math.LN2;o(this,t,e(t),pa.event.shiftKey?Math.ceil(n)-1:Math.floor(n)+1)}var g,v,y,m,x,b,w,M,_,S={x:0,y:0,k:1},k=[960,500],T=eu,E=250,C=0,A="mousedown.zoom",q="mousemove.zoom",D="mouseup.zoom",j="touchstart.zoom",R=L(t,"zoomstart","zoom","zoomend");return tu||(tu="onwheel"in va?(Ka=function(){return-pa.event.deltaY*(pa.event.deltaMode?120:1)},"wheel"):"onmousewheel"in va?(Ka=function(){return pa.event.wheelDelta},"mousewheel"):(Ka=function(){return-pa.event.detail},"MozMousePixelScroll")),t.event=function(t){t.each(function(){var t=R.of(this,arguments),e=S;Ws?pa.select(this).transition().each("start.zoom",function(){S=this.__chart__||{x:0,y:0,k:1},s(t)}).tween("zoom:zoom",function(){var n=k[0],r=k[1],i=v?v[0]:n/2,o=v?v[1]:r/2,a=pa.interpolateZoom([(i-S.x)/S.k,(o-S.y)/S.k,n/S.k],[(i-e.x)/e.k,(o-e.y)/e.k,n/e.k]);return function(e){var r=a(e),u=n/r[2];this.__chart__=S={x:i-r[0]*u,y:o-r[1]*u,k:u},c(t)}}).each("interrupt.zoom",function(){l(t)}).each("end.zoom",function(){l(t)}):(this.__chart__=S,s(t),c(t),l(t))})},t.translate=function(e){return arguments.length?(S={x:+e[0],y:+e[1],k:S.k},u(),t):[S.x,S.y]},t.scale=function(e){return arguments.length?(S={x:S.x,y:S.y,k:null},r(+e),u(),t):S.k},t.scaleExtent=function(e){return arguments.length?(T=null==e?eu:[+e[0],+e[1]],t):T},t.center=function(e){return arguments.length?(y=e&&[+e[0],+e[1]],t):y},t.size=function(e){return arguments.length?(k=e&&[+e[0],+e[1]],t):k},t.duration=function(e){return arguments.length?(E=+e,t):E},t.x=function(e){return arguments.length?(w=e,b=e.copy(),S={x:0,y:0,k:1},t):w},t.y=function(e){return arguments.length?(_=e,M=e.copy(),S={x:0,y:0,k:1},t):_},pa.rebind(t,R,"on")};var Ka,tu,eu=[0,1/0];pa.color=ft,ft.prototype.toString=function(){return this.rgb()+""},pa.hsl=ht;var nu=ht.prototype=new ft;nu.brighter=function(t){
return t=Math.pow(.7,arguments.length?t:1),new ht(this.h,this.s,this.l/t)},nu.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new ht(this.h,this.s,t*this.l)},nu.rgb=function(){return pt(this.h,this.s,this.l)},pa.hcl=dt;var ru=dt.prototype=new ft;ru.brighter=function(t){return new dt(this.h,this.c,Math.min(100,this.l+iu*(arguments.length?t:1)))},ru.darker=function(t){return new dt(this.h,this.c,Math.max(0,this.l-iu*(arguments.length?t:1)))},ru.rgb=function(){return gt(this.h,this.c,this.l).rgb()},pa.lab=vt;var iu=18,ou=.95047,au=1,uu=1.08883,su=vt.prototype=new ft;su.brighter=function(t){return new vt(Math.min(100,this.l+iu*(arguments.length?t:1)),this.a,this.b)},su.darker=function(t){return new vt(Math.max(0,this.l-iu*(arguments.length?t:1)),this.a,this.b)},su.rgb=function(){return yt(this.l,this.a,this.b)},pa.rgb=Mt;var cu=Mt.prototype=new ft;cu.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var e=this.r,n=this.g,r=this.b,i=30;return e||n||r?(e&&e<i&&(e=i),n&&n<i&&(n=i),r&&r<i&&(r=i),new Mt(Math.min(255,e/t),Math.min(255,n/t),Math.min(255,r/t))):new Mt(i,i,i)},cu.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new Mt(t*this.r,t*this.g,t*this.b)},cu.hsl=function(){return Et(this.r,this.g,this.b)},cu.toString=function(){return"#"+kt(this.r)+kt(this.g)+kt(this.b)};var lu=pa.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});lu.forEach(function(t,e){lu.set(t,_t(e))}),pa.functor=Lt,pa.xhr=qt(_),pa.dsv=function(t,e){function n(t,n,o){arguments.length<3&&(o=n,n=null);var a=Dt(t,e,null==n?r:i(n),o);return a.row=function(t){return arguments.length?a.response(null==(n=t)?r:i(t)):n},a}function r(t){return n.parse(t.responseText)}function i(t){return function(e){return n.parse(e.responseText,t)}}function o(e){return e.map(a).join(t)}function a(t){return u.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}var u=new RegExp('["'+t+"\n]"),s=t.charCodeAt(0);return n.parse=function(t,e){var r;return n.parseRows(t,function(t,n){if(r)return r(t,n-1);var i=new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}");r=e?function(t,n){return e(i(t),n)}:i})},n.parseRows=function(t,e){function n(){if(l>=c)return a;if(i)return i=!1,o;var e=l;if(34===t.charCodeAt(e)){for(var n=e;n++<c;)if(34===t.charCodeAt(n)){if(34!==t.charCodeAt(n+1))break;++n}l=n+2;var r=t.charCodeAt(n+1);return 13===r?(i=!0,10===t.charCodeAt(n+2)&&++l):10===r&&(i=!0),t.slice(e+1,n).replace(/""/g,'"')}for(;l<c;){var r=t.charCodeAt(l++),u=1;if(10===r)i=!0;else if(13===r)i=!0,10===t.charCodeAt(l)&&(++l,++u);else if(r!==s)continue;return t.slice(e,l-u)}return t.slice(e)}for(var r,i,o={},a={},u=[],c=t.length,l=0,f=0;(r=n())!==a;){for(var h=[];r!==o&&r!==a;)h.push(r),r=n();e&&null==(h=e(h,f++))||u.push(h)}return u},n.format=function(e){if(Array.isArray(e[0]))return n.formatRows(e);var r=new M,i=[];return e.forEach(function(t){for(var e in t)r.has(e)||i.push(r.add(e))}),[i.map(a).join(t)].concat(e.map(function(e){return i.map(function(t){return a(e[t])}).join(t)})).join("\n")},n.formatRows=function(t){return t.map(o).join("\n")},n},pa.csv=pa.dsv(",","text/csv"),pa.tsv=pa.dsv("\t","text/tab-separated-values");var fu,hu,pu,du,gu=this[k(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};pa.timer=function(){Pt.apply(this,arguments)},pa.timer.flush=function(){zt(),Ft()},pa.round=function(t,e){return e?Math.round(t*(e=Math.pow(10,e)))/e:Math.round(t)};var vu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(It);pa.formatPrefix=function(t,e){var n=0;return(t=+t)&&(t<0&&(t*=-1),e&&(t=pa.round(t,Ht(t,e))),n=1+Math.floor(1e-12+Math.log(t)/Math.LN10),n=Math.max(-24,Math.min(24,3*Math.floor((n-1)/3)))),vu[8+n/3]};var yu=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,mu=pa.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,e){return t.toPrecision(e)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},r:function(t,e){return(t=pa.round(t,Ht(t,e))).toFixed(Math.max(0,Math.min(20,Ht(t*(1+1e-15),e))))}}),xu=pa.time={},bu=Date;$t.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){wu.setUTCDate.apply(this._,arguments)},setDay:function(){wu.setUTCDay.apply(this._,arguments)},setFullYear:function(){wu.setUTCFullYear.apply(this._,arguments)},setHours:function(){wu.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){wu.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){wu.setUTCMinutes.apply(this._,arguments)},setMonth:function(){wu.setUTCMonth.apply(this._,arguments)},setSeconds:function(){wu.setUTCSeconds.apply(this._,arguments)},setTime:function(){wu.setTime.apply(this._,arguments)}};var wu=Date.prototype;xu.year=Wt(function(t){return t=xu.day(t),t.setMonth(0,1),t},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t){return t.getFullYear()}),xu.years=xu.year.range,xu.years.utc=xu.year.utc.range,xu.day=Wt(function(t){var e=new bu(2e3,0);return e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),e},function(t,e){t.setDate(t.getDate()+e)},function(t){return t.getDate()-1}),xu.days=xu.day.range,xu.days.utc=xu.day.utc.range,xu.dayOfYear=function(t){var e=xu.year(t);return Math.floor((t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(t,e){e=7-e;var n=xu[t]=Wt(function(t){return(t=xu.day(t)).setDate(t.getDate()-(t.getDay()+e)%7),t},function(t,e){t.setDate(t.getDate()+7*Math.floor(e))},function(t){var n=xu.year(t).getDay();return Math.floor((xu.dayOfYear(t)+(n+e)%7)/7)-(n!==e)});xu[t+"s"]=n.range,xu[t+"s"].utc=n.utc.range,xu[t+"OfYear"]=function(t){var n=xu.year(t).getDay();return Math.floor((xu.dayOfYear(t)+(n+e)%7)/7)}}),xu.week=xu.sunday,xu.weeks=xu.sunday.range,xu.weeks.utc=xu.sunday.utc.range,xu.weekOfYear=xu.sundayOfYear;var Mu={"-":"",_:" ",0:"0"},_u=/^\s*\d+/,Su=/^%/;pa.locale=function(t){return{numberFormat:Ut(t),timeFormat:Vt(t)}};var ku=pa.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});pa.format=ku.numberFormat,pa.geo={},de.prototype={s:0,t:0,add:function(t){ge(t,this.t,Tu),ge(Tu.s,this.s,this),this.s?this.t+=Tu.t:this.s=Tu.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var Tu=new de;pa.geo.stream=function(t,e){t&&Eu.hasOwnProperty(t.type)?Eu[t.type](t,e):ve(t,e)};var Eu={Feature:function(t,e){ve(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)ve(n[r].geometry,e)}},Cu={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){ye(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)ye(n[r],e,0)},Polygon:function(t,e){me(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)me(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)ve(n[r],e)}};pa.geo.area=function(t){return Nu=0,pa.geo.stream(t,Lu),Nu};var Nu,Au=new de,Lu={sphere:function(){Nu+=4*$a},point:T,lineStart:T,lineEnd:T,polygonStart:function(){Au.reset(),Lu.lineStart=xe},polygonEnd:function(){var t=2*Au;Nu+=t<0?4*$a+t:t,Lu.lineStart=Lu.lineEnd=Lu.point=T}};pa.geo.bounds=function(){function t(t,e){x.push(b=[l=t,h=t]),e<f&&(f=e),e>p&&(p=e)}function e(e,n){var r=be([e*Xa,n*Xa]);if(y){var i=Me(y,r),o=[i[1],-i[0],0],a=Me(o,i);ke(a),a=Te(a);var s=e-d,c=s>0?1:-1,g=a[0]*Ga*c,v=ka(s)>180;if(v^(c*d<g&&g<c*e)){var m=a[1]*Ga;m>p&&(p=m)}else if(g=(g+360)%360-180,v^(c*d<g&&g<c*e)){var m=-a[1]*Ga;m<f&&(f=m)}else n<f&&(f=n),n>p&&(p=n);v?e<d?u(l,e)>u(l,h)&&(h=e):u(e,h)>u(l,h)&&(l=e):h>=l?(e<l&&(l=e),e>h&&(h=e)):e>d?u(l,e)>u(l,h)&&(h=e):u(e,h)>u(l,h)&&(l=e)}else t(e,n);y=r,d=e}function n(){w.point=e}function r(){b[0]=l,b[1]=h,w.point=t,y=null}function i(t,n){if(y){var r=t-d;m+=ka(r)>180?r+(r>0?360:-360):r}else g=t,v=n;Lu.point(t,n),e(t,n)}function o(){Lu.lineStart()}function a(){i(g,v),Lu.lineEnd(),ka(m)>Ua&&(l=-(h=180)),b[0]=l,b[1]=h,y=null}function u(t,e){return(e-=t)<0?e+360:e}function s(t,e){return t[0]-e[0]}function c(t,e){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var l,f,h,p,d,g,v,y,m,x,b,w={point:t,lineStart:n,lineEnd:r,polygonStart:function(){w.point=i,w.lineStart=o,w.lineEnd=a,m=0,Lu.polygonStart()},polygonEnd:function(){Lu.polygonEnd(),w.point=t,w.lineStart=n,w.lineEnd=r,Au<0?(l=-(h=180),f=-(p=90)):m>Ua?p=90:m<-Ua&&(f=-90),b[0]=l,b[1]=h}};return function(t){p=h=-(l=f=1/0),x=[],pa.geo.stream(t,w);var e=x.length;if(e){x.sort(s);for(var n,r=1,i=x[0],o=[i];r<e;++r)n=x[r],c(n[0],i)||c(n[1],i)?(u(i[0],n[1])>u(i[0],i[1])&&(i[1]=n[1]),u(n[0],i[1])>u(i[0],i[1])&&(i[0]=n[0])):o.push(i=n);for(var a,n,d=-(1/0),e=o.length-1,r=0,i=o[e];r<=e;i=n,++r)n=o[r],(a=u(i[1],n[0]))>d&&(d=a,l=n[0],h=i[1])}return x=b=null,l===1/0||f===1/0?[[NaN,NaN],[NaN,NaN]]:[[l,f],[h,p]]}}(),pa.geo.centroid=function(t){qu=Du=ju=Ru=Pu=Ou=zu=Fu=Hu=Iu=Uu=0,pa.geo.stream(t,Bu);var e=Hu,n=Iu,r=Uu,i=e*e+n*n+r*r;return i<Ba&&(e=Ou,n=zu,r=Fu,Du<Ua&&(e=ju,n=Ru,r=Pu),i=e*e+n*n+r*r,i<Ba)?[NaN,NaN]:[Math.atan2(n,e)*Ga,at(r/Math.sqrt(i))*Ga]};var qu,Du,ju,Ru,Pu,Ou,zu,Fu,Hu,Iu,Uu,Bu={sphere:T,point:Ce,lineStart:Ae,lineEnd:Le,polygonStart:function(){Bu.lineStart=qe},polygonEnd:function(){Bu.lineStart=Ae}},$u=ze(je,Ue,$e,[-$a,-$a/2]),Wu=1e9;pa.geo.clipExtent=function(){var t,e,n,r,i,o,a={stream:function(t){return i&&(i.valid=!1),i=o(t),i.valid=!0,i},extent:function(u){return arguments.length?(o=Xe(t=+u[0][0],e=+u[0][1],n=+u[1][0],r=+u[1][1]),i&&(i.valid=!1,i=null),a):[[t,e],[n,r]]}};return a.extent([[0,0],[960,500]])},(pa.geo.conicEqualArea=function(){return Ge(Ze)}).raw=Ze,pa.geo.albers=function(){return pa.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},pa.geo.albersUsa=function(){function t(t){var o=t[0],a=t[1];return e=null,n(o,a),e||(r(o,a),e)||i(o,a),e}var e,n,r,i,o=pa.geo.albers(),a=pa.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=pa.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){e=[t,n]}};return t.invert=function(t){var e=o.scale(),n=o.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?u:o).invert(t)},t.stream=function(t){var e=o.stream(t),n=a.stream(t),r=u.stream(t);return{point:function(t,i){e.point(t,i),n.point(t,i),r.point(t,i)},sphere:function(){e.sphere(),n.sphere(),r.sphere()},lineStart:function(){e.lineStart(),n.lineStart(),r.lineStart()},lineEnd:function(){e.lineEnd(),n.lineEnd(),r.lineEnd()},polygonStart:function(){e.polygonStart(),n.polygonStart(),r.polygonStart()},polygonEnd:function(){e.polygonEnd(),n.polygonEnd(),r.polygonEnd()}}},t.precision=function(e){return arguments.length?(o.precision(e),a.precision(e),u.precision(e),t):o.precision()},t.scale=function(e){return arguments.length?(o.scale(e),a.scale(.35*e),u.scale(e),t.translate(o.translate())):o.scale()},t.translate=function(e){if(!arguments.length)return o.translate();var c=o.scale(),l=+e[0],f=+e[1];return n=o.translate(e).clipExtent([[l-.455*c,f-.238*c],[l+.455*c,f+.238*c]]).stream(s).point,r=a.translate([l-.307*c,f+.201*c]).clipExtent([[l-.425*c+Ua,f+.12*c+Ua],[l-.214*c-Ua,f+.234*c-Ua]]).stream(s).point,i=u.translate([l-.205*c,f+.212*c]).clipExtent([[l-.214*c+Ua,f+.166*c+Ua],[l-.115*c-Ua,f+.234*c-Ua]]).stream(s).point,t},t.scale(1070)};var Yu,Vu,Xu,Gu,Zu,Ju,Qu={point:T,lineStart:T,lineEnd:T,polygonStart:function(){Vu=0,Qu.lineStart=Je},polygonEnd:function(){Qu.lineStart=Qu.lineEnd=Qu.point=T,Yu+=ka(Vu/2)}},Ku={point:Qe,lineStart:T,lineEnd:T,polygonStart:T,polygonEnd:T},ts={point:en,lineStart:nn,lineEnd:rn,polygonStart:function(){ts.lineStart=on},polygonEnd:function(){ts.point=en,ts.lineStart=nn,ts.lineEnd=rn}};pa.geo.path=function(){function t(t){return t&&("function"==typeof u&&o.pointRadius(+u.apply(this,arguments)),a&&a.valid||(a=i(o)),pa.geo.stream(t,a)),o.result()}function e(){return a=null,t}var n,r,i,o,a,u=4.5;return t.area=function(t){return Yu=0,pa.geo.stream(t,i(Qu)),Yu},t.centroid=function(t){return ju=Ru=Pu=Ou=zu=Fu=Hu=Iu=Uu=0,pa.geo.stream(t,i(ts)),Uu?[Hu/Uu,Iu/Uu]:Fu?[Ou/Fu,zu/Fu]:Pu?[ju/Pu,Ru/Pu]:[NaN,NaN]},t.bounds=function(t){return Zu=Ju=-(Xu=Gu=1/0),pa.geo.stream(t,i(Ku)),[[Xu,Gu],[Zu,Ju]]},t.projection=function(t){return arguments.length?(i=(n=t)?t.stream||sn(t):_,e()):n},t.context=function(t){return arguments.length?(o=null==(r=t)?new Ke:new an(t),"function"!=typeof u&&o.pointRadius(u),e()):r},t.pointRadius=function(e){return arguments.length?(u="function"==typeof e?e:(o.pointRadius(+e),+e),t):u},t.projection(pa.geo.albersUsa()).context(null)},pa.geo.transform=function(t){return{stream:function(e){var n=new cn(e);for(var r in t)n[r]=t[r];return n}}},cn.prototype={point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},pa.geo.projection=fn,pa.geo.projectionMutator=hn,(pa.geo.equirectangular=function(){return fn(dn)}).raw=dn.invert=dn,pa.geo.rotation=function(t){function e(e){return e=t(e[0]*Xa,e[1]*Xa),e[0]*=Ga,e[1]*=Ga,e}return t=vn(t[0]%360*Xa,t[1]*Xa,t.length>2?t[2]*Xa:0),e.invert=function(e){return e=t.invert(e[0]*Xa,e[1]*Xa),e[0]*=Ga,e[1]*=Ga,e},e},gn.invert=dn,pa.geo.circle=function(){function t(){var t="function"==typeof r?r.apply(this,arguments):r,e=vn(-t[0]*Xa,-t[1]*Xa,0).invert,i=[];return n(null,null,1,{point:function(t,n){i.push(t=e(t,n)),t[0]*=Ga,t[1]*=Ga}}),{type:"Polygon",coordinates:[i]}}var e,n,r=[0,0],i=6;return t.origin=function(e){return arguments.length?(r=e,t):r},t.angle=function(r){return arguments.length?(n=bn((e=+r)*Xa,i*Xa),t):e},t.precision=function(r){return arguments.length?(n=bn(e*Xa,(i=+r)*Xa),t):i},t.angle(90)},pa.geo.distance=function(t,e){var n,r=(e[0]-t[0])*Xa,i=t[1]*Xa,o=e[1]*Xa,a=Math.sin(r),u=Math.cos(r),s=Math.sin(i),c=Math.cos(i),l=Math.sin(o),f=Math.cos(o);return Math.atan2(Math.sqrt((n=f*a)*n+(n=c*l-s*f*u)*n),s*l+c*f*u)},pa.geo.graticule=function(){function t(){return{type:"MultiLineString",coordinates:e()}}function e(){return pa.range(Math.ceil(o/v)*v,i,v).map(h).concat(pa.range(Math.ceil(c/y)*y,s,y).map(p)).concat(pa.range(Math.ceil(r/d)*d,n,d).filter(function(t){return ka(t%v)>Ua}).map(l)).concat(pa.range(Math.ceil(u/g)*g,a,g).filter(function(t){return ka(t%y)>Ua}).map(f))}var n,r,i,o,a,u,s,c,l,f,h,p,d=10,g=d,v=90,y=360,m=2.5;return t.lines=function(){return e().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(p(s).slice(1),h(i).reverse().slice(1),p(c).reverse().slice(1))]}},t.extent=function(e){return arguments.length?t.majorExtent(e).minorExtent(e):t.minorExtent()},t.majorExtent=function(e){return arguments.length?(o=+e[0][0],i=+e[1][0],c=+e[0][1],s=+e[1][1],o>i&&(e=o,o=i,i=e),c>s&&(e=c,c=s,s=e),t.precision(m)):[[o,c],[i,s]]},t.minorExtent=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],u=+e[0][1],a=+e[1][1],r>n&&(e=r,r=n,n=e),u>a&&(e=u,u=a,a=e),t.precision(m)):[[r,u],[n,a]]},t.step=function(e){return arguments.length?t.majorStep(e).minorStep(e):t.minorStep()},t.majorStep=function(e){return arguments.length?(v=+e[0],y=+e[1],t):[v,y]},t.minorStep=function(e){return arguments.length?(d=+e[0],g=+e[1],t):[d,g]},t.precision=function(e){return arguments.length?(m=+e,l=Mn(u,a,90),f=_n(r,n,m),h=Mn(c,s,90),p=_n(o,i,m),t):m},t.majorExtent([[-180,-90+Ua],[180,90-Ua]]).minorExtent([[-180,-80-Ua],[180,80+Ua]])},pa.geo.greatArc=function(){function t(){return{type:"LineString",coordinates:[e||r.apply(this,arguments),n||i.apply(this,arguments)]}}var e,n,r=Sn,i=kn;return t.distance=function(){return pa.geo.distance(e||r.apply(this,arguments),n||i.apply(this,arguments))},t.source=function(n){return arguments.length?(r=n,e="function"==typeof n?null:n,t):r},t.target=function(e){return arguments.length?(i=e,n="function"==typeof e?null:e,t):i},t.precision=function(){return arguments.length?t:0},t},pa.geo.interpolate=function(t,e){return Tn(t[0]*Xa,t[1]*Xa,e[0]*Xa,e[1]*Xa)},pa.geo.length=function(t){return es=0,pa.geo.stream(t,ns),es};var es,ns={sphere:T,point:T,lineStart:En,lineEnd:T,polygonStart:T,polygonEnd:T},rs=Cn(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(pa.geo.azimuthalEqualArea=function(){return fn(rs)}).raw=rs;var is=Cn(function(t){var e=Math.acos(t);return e&&e/Math.sin(e)},_);(pa.geo.azimuthalEquidistant=function(){return fn(is)}).raw=is,(pa.geo.conicConformal=function(){return Ge(Nn)}).raw=Nn,(pa.geo.conicEquidistant=function(){return Ge(An)}).raw=An;var os=Cn(function(t){return 1/t},Math.atan);(pa.geo.gnomonic=function(){return fn(os)}).raw=os,Ln.invert=function(t,e){return[t,2*Math.atan(Math.exp(e))-Va]},(pa.geo.mercator=function(){return qn(Ln)}).raw=Ln;var as=Cn(function(){return 1},Math.asin);(pa.geo.orthographic=function(){return fn(as)}).raw=as;var us=Cn(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});(pa.geo.stereographic=function(){return fn(us)}).raw=us,Dn.invert=function(t,e){return[-e,2*Math.atan(Math.exp(t))-Va]},(pa.geo.transverseMercator=function(){var t=qn(Dn),e=t.center,n=t.rotate;return t.center=function(t){return t?e([-t[1],t[0]]):(t=e(),[t[1],-t[0]])},t.rotate=function(t){return t?n([t[0],t[1],t.length>2?t[2]+90:90]):(t=n(),[t[0],t[1],t[2]-90])},n([0,0,90])}).raw=Dn,pa.geom={},pa.geom.hull=function(t){function e(t){if(t.length<3)return[];var e,i=Lt(n),o=Lt(r),a=t.length,u=[],s=[];for(e=0;e<a;e++)u.push([+i.call(this,t[e],e),+o.call(this,t[e],e),e]);for(u.sort(On),e=0;e<a;e++)s.push([u[e][0],-u[e][1]]);var c=Pn(u),l=Pn(s),f=l[0]===c[0],h=l[l.length-1]===c[c.length-1],p=[];for(e=c.length-1;e>=0;--e)p.push(t[u[c[e]][2]]);for(e=+f;e<l.length-h;++e)p.push(t[u[l[e]][2]]);return p}var n=jn,r=Rn;return arguments.length?e(t):(e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(r=t,e):r},e)},pa.geom.polygon=function(t){return Aa(t,ss),t};var ss=pa.geom.polygon.prototype=[];ss.area=function(){for(var t,e=-1,n=this.length,r=this[n-1],i=0;++e<n;)t=r,r=this[e],i+=t[1]*r[0]-t[0]*r[1];return.5*i},ss.centroid=function(t){var e,n,r=-1,i=this.length,o=0,a=0,u=this[i-1];for(arguments.length||(t=-1/(6*this.area()));++r<i;)e=u,u=this[r],n=e[0]*u[1]-u[0]*e[1],o+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[o*t,a*t]},ss.clip=function(t){for(var e,n,r,i,o,a,u=Hn(t),s=-1,c=this.length-Hn(this),l=this[c-1];++s<c;){for(e=t.slice(),t.length=0,i=this[s],o=e[(r=e.length-u)-1],n=-1;++n<r;)a=e[n],zn(a,l,i)?(zn(o,l,i)||t.push(Fn(o,a,l,i)),t.push(a)):zn(o,l,i)&&t.push(Fn(o,a,l,i)),o=a;u&&t.push(t[0]),l=i}return t};var cs,ls,fs,hs,ps,ds=[],gs=[];Xn.prototype.prepare=function(){for(var t,e=this.edges,n=e.length;n--;)t=e[n].edge,t.b&&t.a||e.splice(n,1);return e.sort(Zn),e.length},ar.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},ur.prototype={insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=fr(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)r=n.U,n===r.L?(i=r.R,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(cr(this,n),t=n,n=t.U),n.C=!1,r.C=!0,lr(this,r))):(i=r.L,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(lr(this,n),t=n,n=t.U),n.C=!1,r.C=!0,cr(this,r))),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?fr(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(e=i.R,e.C&&(e.C=!1,i.C=!0,cr(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,lr(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,cr(this,i),t=this._;break}}else if(e=i.L,e.C&&(e.C=!1,i.C=!0,lr(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,cr(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,lr(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},pa.geom.voronoi=function(t){function e(t){var e=new Array(t.length),r=u[0][0],i=u[0][1],o=u[1][0],a=u[1][1];return hr(n(t),u).cells.forEach(function(n,u){var s=n.edges,c=n.site,l=e[u]=s.length?s.map(function(t){var e=t.start();return[e.x,e.y]}):c.x>=r&&c.x<=o&&c.y>=i&&c.y<=a?[[r,a],[o,a],[o,i],[r,i]]:[];l.point=t[u]}),e}function n(t){return t.map(function(t,e){return{x:Math.round(o(t,e)/Ua)*Ua,y:Math.round(a(t,e)/Ua)*Ua,i:e}})}var r=jn,i=Rn,o=r,a=i,u=vs;return t?e(t):(e.links=function(t){return hr(n(t)).edges.filter(function(t){return t.l&&t.r}).map(function(e){return{source:t[e.l.i],target:t[e.r.i]}})},e.triangles=function(t){var e=[];return hr(n(t)).cells.forEach(function(n,r){for(var i,o,a=n.site,u=n.edges.sort(Zn),s=-1,c=u.length,l=u[c-1].edge,f=l.l===a?l.r:l.l;++s<c;)i=l,o=f,l=u[s].edge,f=l.l===a?l.r:l.l,r<o.i&&r<f.i&&dr(a,o,f)<0&&e.push([t[r],t[o.i],t[f.i]])}),e},e.x=function(t){return arguments.length?(o=Lt(r=t),e):r},e.y=function(t){return arguments.length?(a=Lt(i=t),e):i},e.clipExtent=function(t){return arguments.length?(u=null==t?vs:t,e):u===vs?null:u},e.size=function(t){return arguments.length?e.clipExtent(t&&[[0,0],t]):u===vs?null:u&&u[1]},e)};var vs=[[-1e6,-1e6],[1e6,1e6]];pa.geom.delaunay=function(t){return pa.geom.voronoi().triangles(t)},pa.geom.quadtree=function(t,e,n,r,i){function o(t){function o(t,e,n,r,i,o,a,u){if(!isNaN(n)&&!isNaN(r))if(t.leaf){var s=t.x,l=t.y;if(null!=s)if(ka(s-n)+ka(l-r)<.01)c(t,e,n,r,i,o,a,u);else{var f=t.point;t.x=t.y=t.point=null,c(t,f,s,l,i,o,a,u),c(t,e,n,r,i,o,a,u)}else t.x=n,t.y=r,t.point=e}else c(t,e,n,r,i,o,a,u)}function c(t,e,n,r,i,a,u,s){var c=.5*(i+u),l=.5*(a+s),f=n>=c,h=r>=l,p=h<<1|f;t.leaf=!1,t=t.nodes[p]||(t.nodes[p]=yr()),f?i=c:u=c,h?a=l:s=l,o(t,e,n,r,i,a,u,s)}var l,f,h,p,d,g,v,y,m,x=Lt(u),b=Lt(s);if(null!=e)g=e,v=n,y=r,m=i;else if(y=m=-(g=v=1/0),f=[],h=[],d=t.length,a)for(p=0;p<d;++p)l=t[p],l.x<g&&(g=l.x),l.y<v&&(v=l.y),l.x>y&&(y=l.x),l.y>m&&(m=l.y),f.push(l.x),h.push(l.y);else for(p=0;p<d;++p){var w=+x(l=t[p],p),M=+b(l,p);w<g&&(g=w),M<v&&(v=M),w>y&&(y=w),M>m&&(m=M),f.push(w),h.push(M)}var _=y-g,S=m-v;_>S?m=v+_:y=g+S;var k=yr();if(k.add=function(t){o(k,t,+x(t,++p),+b(t,p),g,v,y,m)},k.visit=function(t){mr(t,k,g,v,y,m)},k.find=function(t){return xr(k,t[0],t[1],g,v,y,m)},p=-1,null==e){for(;++p<d;)o(k,t[p],f[p],h[p],g,v,y,m);--p}else t.forEach(k.add);return f=h=t=l=null,k}var a,u=jn,s=Rn;return(a=arguments.length)?(u=gr,s=vr,3===a&&(i=n,r=e,n=e=0),o(t)):(o.x=function(t){return arguments.length?(u=t,o):u},o.y=function(t){return arguments.length?(s=t,o):s},o.extent=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),o):null==e?null:[[e,n],[r,i]]},o.size=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=n=0,r=+t[0],i=+t[1]),o):null==e?null:[r-e,i-n]},o)},pa.interpolateRgb=br,pa.interpolateObject=wr,pa.interpolateNumber=Mr,pa.interpolateString=_r;var ys=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ms=new RegExp(ys.source,"g");pa.interpolate=Sr,pa.interpolators=[function(t,e){var n=typeof e;return("string"===n?lu.has(e.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(e)?br:_r:e instanceof ft?br:Array.isArray(e)?kr:"object"===n&&isNaN(e)?wr:Mr)(t,e)}],pa.interpolateArray=kr;var xs=function(){return _},bs=pa.map({linear:xs,poly:qr,quad:function(){return Nr},cubic:function(){return Ar},sin:function(){return Dr},exp:function(){return jr},circle:function(){return Rr},elastic:Pr,back:Or,bounce:function(){return zr}}),ws=pa.map({"in":_,out:Er,"in-out":Cr,"out-in":function(t){return Cr(Er(t))}});pa.ease=function(t){var e=t.indexOf("-"),n=e>=0?t.slice(0,e):t,r=e>=0?t.slice(e+1):"in";return n=bs.get(n)||xs,r=ws.get(r)||_,Tr(r(n.apply(null,da.call(arguments,1))))},pa.interpolateHcl=Fr,pa.interpolateHsl=Hr,pa.interpolateLab=Ir,pa.interpolateRound=Ur,pa.transform=function(t){var e=va.createElementNS(pa.ns.prefix.svg,"g");return(pa.transform=function(t){if(null!=t){e.setAttribute("transform",t);var n=e.transform.baseVal.consolidate()}return new Br(n?n.matrix:Ms)})(t)},Br.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var Ms={a:1,b:0,c:0,d:1,e:0,f:0};pa.interpolateTransform=Qr,pa.layout={},pa.layout.bundle=function(){return function(t){for(var e=[],n=-1,r=t.length;++n<r;)e.push(ei(t[n]));return e}},pa.layout.chord=function(){function t(){var t,c,f,h,p,d={},g=[],v=pa.range(o),y=[];for(n=[],r=[],t=0,h=-1;++h<o;){for(c=0,p=-1;++p<o;)c+=i[h][p];g.push(c),y.push(pa.range(o)),t+=c}for(a&&v.sort(function(t,e){return a(g[t],g[e])}),u&&y.forEach(function(t,e){t.sort(function(t,n){return u(i[e][t],i[e][n])})}),t=(Wa-l*o)/t,c=0,h=-1;++h<o;){for(f=c,p=-1;++p<o;){var m=v[h],x=y[m][p],b=i[m][x],w=c,M=c+=b*t;d[m+"-"+x]={index:m,subindex:x,startAngle:w,endAngle:M,value:b}}r[m]={index:m,startAngle:f,endAngle:c,value:g[m]},c+=l}for(h=-1;++h<o;)for(p=h-1;++p<o;){var _=d[h+"-"+p],S=d[p+"-"+h];(_.value||S.value)&&n.push(_.value<S.value?{source:S,target:_}:{source:_,target:S})}s&&e()}function e(){n.sort(function(t,e){return s((t.source.value+t.target.value)/2,(e.source.value+e.target.value)/2)})}var n,r,i,o,a,u,s,c={},l=0;return c.matrix=function(t){return arguments.length?(o=(i=t)&&i.length,n=r=null,c):i},c.padding=function(t){return arguments.length?(l=t,n=r=null,c):l},c.sortGroups=function(t){return arguments.length?(a=t,n=r=null,c):a},c.sortSubgroups=function(t){return arguments.length?(u=t,n=null,c):u},c.sortChords=function(t){return arguments.length?(s=t,n&&e(),c):s},c.chords=function(){return n||t(),n},c.groups=function(){return r||t(),r},c},pa.layout.force=function(){function t(t){return function(e,n,r,i){if(e.point!==t){var o=e.cx-t.x,a=e.cy-t.y,u=i-n,s=o*o+a*a;if(u*u/y<s){if(s<g){var c=e.charge/s;t.px-=o*c,t.py-=a*c}return!0}if(e.point&&s&&s<g){var c=e.pointCharge/s;t.px-=o*c,t.py-=a*c}}return!e.charge}}function e(t){t.px=pa.event.x,t.py=pa.event.y,s.resume()}var n,r,i,o,a,u,s={},c=pa.dispatch("start","tick","end"),l=[1,1],f=.9,h=_s,p=Ss,d=-30,g=ks,v=.1,y=.64,m=[],x=[];return s.tick=function(){if((i*=.99)<.005)return n=null,c.end({type:"end",alpha:i=0}),!0;var e,r,s,h,p,g,y,b,w,M=m.length,_=x.length;for(r=0;r<_;++r)s=x[r],h=s.source,p=s.target,b=p.x-h.x,w=p.y-h.y,(g=b*b+w*w)&&(g=i*a[r]*((g=Math.sqrt(g))-o[r])/g,b*=g,w*=g,p.x-=b*(y=h.weight+p.weight?h.weight/(h.weight+p.weight):.5),p.y-=w*y,h.x+=b*(y=1-y),h.y+=w*y);if((y=i*v)&&(b=l[0]/2,w=l[1]/2,r=-1,y))for(;++r<M;)s=m[r],s.x+=(b-s.x)*y,s.y+=(w-s.y)*y;if(d)for(si(e=pa.geom.quadtree(m),i,u),r=-1;++r<M;)(s=m[r]).fixed||e.visit(t(s));for(r=-1;++r<M;)s=m[r],s.fixed?(s.x=s.px,s.y=s.py):(s.x-=(s.px-(s.px=s.x))*f,s.y-=(s.py-(s.py=s.y))*f);c.tick({type:"tick",alpha:i})},s.nodes=function(t){return arguments.length?(m=t,s):m},s.links=function(t){return arguments.length?(x=t,s):x},s.size=function(t){return arguments.length?(l=t,s):l},s.linkDistance=function(t){return arguments.length?(h="function"==typeof t?t:+t,s):h},s.distance=s.linkDistance,s.linkStrength=function(t){return arguments.length?(p="function"==typeof t?t:+t,s):p},s.friction=function(t){return arguments.length?(f=+t,s):f},s.charge=function(t){return arguments.length?(d="function"==typeof t?t:+t,s):d},s.chargeDistance=function(t){return arguments.length?(g=t*t,s):Math.sqrt(g)},s.gravity=function(t){return arguments.length?(v=+t,s):v},s.theta=function(t){return arguments.length?(y=t*t,s):Math.sqrt(y)},s.alpha=function(t){return arguments.length?(t=+t,i?t>0?i=t:(n.c=null,n.t=NaN,n=null,c.end({type:"end",alpha:i=0})):t>0&&(c.start({type:"start",alpha:i=t}),n=Pt(s.tick)),s):i},s.start=function(){function t(t,r){if(!n){for(n=new Array(i),s=0;s<i;++s)n[s]=[];for(s=0;s<c;++s){var o=x[s];n[o.source.index].push(o.target),n[o.target.index].push(o.source)}}for(var a,u=n[e],s=-1,l=u.length;++s<l;)if(!isNaN(a=u[s][t]))return a;return Math.random()*r}var e,n,r,i=m.length,c=x.length,f=l[0],g=l[1];
for(e=0;e<i;++e)(r=m[e]).index=e,r.weight=0;for(e=0;e<c;++e)r=x[e],"number"==typeof r.source&&(r.source=m[r.source]),"number"==typeof r.target&&(r.target=m[r.target]),++r.source.weight,++r.target.weight;for(e=0;e<i;++e)r=m[e],isNaN(r.x)&&(r.x=t("x",f)),isNaN(r.y)&&(r.y=t("y",g)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(o=[],"function"==typeof h)for(e=0;e<c;++e)o[e]=+h.call(this,x[e],e);else for(e=0;e<c;++e)o[e]=h;if(a=[],"function"==typeof p)for(e=0;e<c;++e)a[e]=+p.call(this,x[e],e);else for(e=0;e<c;++e)a[e]=p;if(u=[],"function"==typeof d)for(e=0;e<i;++e)u[e]=+d.call(this,m[e],e);else for(e=0;e<i;++e)u[e]=d;return s.resume()},s.resume=function(){return s.alpha(.1)},s.stop=function(){return s.alpha(0)},s.drag=function(){return r||(r=pa.behavior.drag().origin(_).on("dragstart.force",ii).on("drag.force",e).on("dragend.force",oi)),arguments.length?void this.on("mouseover.force",ai).on("mouseout.force",ui).call(r):r},pa.rebind(s,c,"on")};var _s=20,Ss=1,ks=1/0;pa.layout.hierarchy=function(){function t(i){var o,a=[i],u=[];for(i.depth=0;null!=(o=a.pop());)if(u.push(o),(c=n.call(t,o,o.depth))&&(s=c.length)){for(var s,c,l;--s>=0;)a.push(l=c[s]),l.parent=o,l.depth=o.depth+1;r&&(o.value=0),o.children=c}else r&&(o.value=+r.call(t,o,o.depth)||0),delete o.children;return fi(i,function(t){var n,i;e&&(n=t.children)&&n.sort(e),r&&(i=t.parent)&&(i.value+=t.value)}),u}var e=di,n=hi,r=pi;return t.sort=function(n){return arguments.length?(e=n,t):e},t.children=function(e){return arguments.length?(n=e,t):n},t.value=function(e){return arguments.length?(r=e,t):r},t.revalue=function(e){return r&&(li(e,function(t){t.children&&(t.value=0)}),fi(e,function(e){var n;e.children||(e.value=+r.call(t,e,e.depth)||0),(n=e.parent)&&(n.value+=e.value)})),e},t},pa.layout.partition=function(){function t(e,n,r,i){var o=e.children;if(e.x=n,e.y=e.depth*i,e.dx=r,e.dy=i,o&&(a=o.length)){var a,u,s,c=-1;for(r=e.value?r/e.value:0;++c<a;)t(u=o[c],n,s=u.value*r,i),n+=s}}function e(t){var n=t.children,r=0;if(n&&(i=n.length))for(var i,o=-1;++o<i;)r=Math.max(r,e(n[o]));return 1+r}function n(n,o){var a=r.call(this,n,o);return t(a[0],0,i[0],i[1]/e(a[0])),a}var r=pa.layout.hierarchy(),i=[1,1];return n.size=function(t){return arguments.length?(i=t,n):i},ci(n,r)},pa.layout.pie=function(){function t(a){var u,s=a.length,c=a.map(function(n,r){return+e.call(t,n,r)}),l=+("function"==typeof r?r.apply(this,arguments):r),f=("function"==typeof i?i.apply(this,arguments):i)-l,h=Math.min(Math.abs(f)/s,+("function"==typeof o?o.apply(this,arguments):o)),p=h*(f<0?-1:1),d=pa.sum(c),g=d?(f-s*p)/d:0,v=pa.range(s),y=[];return null!=n&&v.sort(n===Ts?function(t,e){return c[e]-c[t]}:function(t,e){return n(a[t],a[e])}),v.forEach(function(t){y[t]={data:a[t],value:u=c[t],startAngle:l,endAngle:l+=u*g+p,padAngle:h}}),y}var e=Number,n=Ts,r=0,i=Wa,o=0;return t.value=function(n){return arguments.length?(e=n,t):e},t.sort=function(e){return arguments.length?(n=e,t):n},t.startAngle=function(e){return arguments.length?(r=e,t):r},t.endAngle=function(e){return arguments.length?(i=e,t):i},t.padAngle=function(e){return arguments.length?(o=e,t):o},t};var Ts={};pa.layout.stack=function(){function t(u,s){if(!(h=u.length))return u;var c=u.map(function(n,r){return e.call(t,n,r)}),l=c.map(function(e){return e.map(function(e,n){return[o.call(t,e,n),a.call(t,e,n)]})}),f=n.call(t,l,s);c=pa.permute(c,f),l=pa.permute(l,f);var h,p,d,g,v=r.call(t,l,s),y=c[0].length;for(d=0;d<y;++d)for(i.call(t,c[0][d],g=v[d],l[0][d][1]),p=1;p<h;++p)i.call(t,c[p][d],g+=l[p-1][d][1],l[p][d][1]);return u}var e=_,n=xi,r=bi,i=mi,o=vi,a=yi;return t.values=function(n){return arguments.length?(e=n,t):e},t.order=function(e){return arguments.length?(n="function"==typeof e?e:Es.get(e)||xi,t):n},t.offset=function(e){return arguments.length?(r="function"==typeof e?e:Cs.get(e)||bi,t):r},t.x=function(e){return arguments.length?(o=e,t):o},t.y=function(e){return arguments.length?(a=e,t):a},t.out=function(e){return arguments.length?(i=e,t):i},t};var Es=pa.map({"inside-out":function(t){var e,n,r=t.length,i=t.map(wi),o=t.map(Mi),a=pa.range(r).sort(function(t,e){return i[t]-i[e]}),u=0,s=0,c=[],l=[];for(e=0;e<r;++e)n=a[e],u<s?(u+=o[n],c.push(n)):(s+=o[n],l.push(n));return l.reverse().concat(c)},reverse:function(t){return pa.range(t.length).reverse()},"default":xi}),Cs=pa.map({silhouette:function(t){var e,n,r,i=t.length,o=t[0].length,a=[],u=0,s=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];r>u&&(u=r),a.push(r)}for(n=0;n<o;++n)s[n]=(u-a[n])/2;return s},wiggle:function(t){var e,n,r,i,o,a,u,s,c,l=t.length,f=t[0],h=f.length,p=[];for(p[0]=s=c=0,n=1;n<h;++n){for(e=0,i=0;e<l;++e)i+=t[e][n][1];for(e=0,o=0,u=f[n][0]-f[n-1][0];e<l;++e){for(r=0,a=(t[e][n][1]-t[e][n-1][1])/(2*u);r<e;++r)a+=(t[r][n][1]-t[r][n-1][1])/u;o+=a*t[e][n][1]}p[n]=s-=i?o/i*u:0,s<c&&(c=s)}for(n=0;n<h;++n)p[n]-=c;return p},expand:function(t){var e,n,r,i=t.length,o=t[0].length,a=1/i,u=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];if(r)for(e=0;e<i;e++)t[e][n][1]/=r;else for(e=0;e<i;e++)t[e][n][1]=a}for(n=0;n<o;++n)u[n]=0;return u},zero:bi});pa.layout.histogram=function(){function t(t,o){for(var a,u,s=[],c=t.map(n,this),l=r.call(this,c,o),f=i.call(this,l,c,o),o=-1,h=c.length,p=f.length-1,d=e?1:1/h;++o<p;)a=s[o]=[],a.dx=f[o+1]-(a.x=f[o]),a.y=0;if(p>0)for(o=-1;++o<h;)u=c[o],u>=l[0]&&u<=l[1]&&(a=s[pa.bisect(f,u,1,p)-1],a.y+=d,a.push(t[o]));return s}var e=!0,n=Number,r=Ti,i=Si;return t.value=function(e){return arguments.length?(n=e,t):n},t.range=function(e){return arguments.length?(r=Lt(e),t):r},t.bins=function(e){return arguments.length?(i="number"==typeof e?function(t){return ki(t,e)}:Lt(e),t):i},t.frequency=function(n){return arguments.length?(e=!!n,t):e},t},pa.layout.pack=function(){function t(t,o){var a=n.call(this,t,o),u=a[0],s=i[0],c=i[1],l=null==e?Math.sqrt:"function"==typeof e?e:function(){return e};if(u.x=u.y=0,fi(u,function(t){t.r=+l(t.value)}),fi(u,Li),r){var f=r*(e?1:Math.max(2*u.r/s,2*u.r/c))/2;fi(u,function(t){t.r+=f}),fi(u,Li),fi(u,function(t){t.r-=f})}return ji(u,s/2,c/2,e?1:1/Math.max(2*u.r/s,2*u.r/c)),a}var e,n=pa.layout.hierarchy().sort(Ei),r=0,i=[1,1];return t.size=function(e){return arguments.length?(i=e,t):i},t.radius=function(n){return arguments.length?(e=null==n||"function"==typeof n?n:+n,t):e},t.padding=function(e){return arguments.length?(r=+e,t):r},ci(t,n)},pa.layout.tree=function(){function t(t,i){var l=a.call(this,t,i),f=l[0],h=e(f);if(fi(h,n),h.parent.m=-h.z,li(h,r),c)li(f,o);else{var p=f,d=f,g=f;li(f,function(t){t.x<p.x&&(p=t),t.x>d.x&&(d=t),t.depth>g.depth&&(g=t)});var v=u(p,d)/2-p.x,y=s[0]/(d.x+u(d,p)/2+v),m=s[1]/(g.depth||1);li(f,function(t){t.x=(t.x+v)*y,t.y=t.depth*m})}return l}function e(t){for(var e,n={A:null,children:[t]},r=[n];null!=(e=r.pop());)for(var i,o=e.children,a=0,u=o.length;a<u;++a)r.push((o[a]=i={_:o[a],parent:e,children:(i=o[a].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=i);return n.children[0]}function n(t){var e=t.children,n=t.parent.children,r=t.i?n[t.i-1]:null;if(e.length){Hi(t);var o=(e[0].z+e[e.length-1].z)/2;r?(t.z=r.z+u(t._,r._),t.m=t.z-o):t.z=o}else r&&(t.z=r.z+u(t._,r._));t.parent.A=i(t,r,t.parent.A||n[0])}function r(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function i(t,e,n){if(e){for(var r,i=t,o=t,a=e,s=i.parent.children[0],c=i.m,l=o.m,f=a.m,h=s.m;a=zi(a),i=Oi(i),a&&i;)s=Oi(s),o=zi(o),o.a=t,r=a.z+f-i.z-c+u(a._,i._),r>0&&(Fi(Ii(a,t,n),t,r),c+=r,l+=r),f+=a.m,c+=i.m,h+=s.m,l+=o.m;a&&!zi(o)&&(o.t=a,o.m+=f-l),i&&!Oi(s)&&(s.t=i,s.m+=c-h,n=t)}return n}function o(t){t.x*=s[0],t.y=t.depth*s[1]}var a=pa.layout.hierarchy().sort(null).value(null),u=Pi,s=[1,1],c=null;return t.separation=function(e){return arguments.length?(u=e,t):u},t.size=function(e){return arguments.length?(c=null==(s=e)?o:null,t):c?null:s},t.nodeSize=function(e){return arguments.length?(c=null==(s=e)?null:o,t):c?s:null},ci(t,a)},pa.layout.cluster=function(){function t(t,o){var a,u=e.call(this,t,o),s=u[0],c=0;fi(s,function(t){var e=t.children;e&&e.length?(t.x=Bi(e),t.y=Ui(e)):(t.x=a?c+=n(t,a):0,t.y=0,a=t)});var l=$i(s),f=Wi(s),h=l.x-n(l,f)/2,p=f.x+n(f,l)/2;return fi(s,i?function(t){t.x=(t.x-s.x)*r[0],t.y=(s.y-t.y)*r[1]}:function(t){t.x=(t.x-h)/(p-h)*r[0],t.y=(1-(s.y?t.y/s.y:1))*r[1]}),u}var e=pa.layout.hierarchy().sort(null).value(null),n=Pi,r=[1,1],i=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(e){return arguments.length?(i=null==(r=e),t):i?null:r},t.nodeSize=function(e){return arguments.length?(i=null!=(r=e),t):i?r:null},ci(t,e)},pa.layout.treemap=function(){function t(t,e){for(var n,r,i=-1,o=t.length;++i<o;)r=(n=t[i]).value*(e<0?0:e),n.area=isNaN(r)||r<=0?0:r}function e(n){var o=n.children;if(o&&o.length){var a,u,s,c=f(n),l=[],h=o.slice(),d=1/0,g="slice"===p?c.dx:"dice"===p?c.dy:"slice-dice"===p?1&n.depth?c.dy:c.dx:Math.min(c.dx,c.dy);for(t(h,c.dx*c.dy/n.value),l.area=0;(s=h.length)>0;)l.push(a=h[s-1]),l.area+=a.area,"squarify"!==p||(u=r(l,g))<=d?(h.pop(),d=u):(l.area-=l.pop().area,i(l,g,c,!1),g=Math.min(c.dx,c.dy),l.length=l.area=0,d=1/0);l.length&&(i(l,g,c,!0),l.length=l.area=0),o.forEach(e)}}function n(e){var r=e.children;if(r&&r.length){var o,a=f(e),u=r.slice(),s=[];for(t(u,a.dx*a.dy/e.value),s.area=0;o=u.pop();)s.push(o),s.area+=o.area,null!=o.z&&(i(s,o.z?a.dx:a.dy,a,!u.length),s.length=s.area=0);r.forEach(n)}}function r(t,e){for(var n,r=t.area,i=0,o=1/0,a=-1,u=t.length;++a<u;)(n=t[a].area)&&(n<o&&(o=n),n>i&&(i=n));return r*=r,e*=e,r?Math.max(e*i*d/r,r/(e*o*d)):1/0}function i(t,e,n,r){var i,o=-1,a=t.length,u=n.x,c=n.y,l=e?s(t.area/e):0;if(e==n.dx){for((r||l>n.dy)&&(l=n.dy);++o<a;)i=t[o],i.x=u,i.y=c,i.dy=l,u+=i.dx=Math.min(n.x+n.dx-u,l?s(i.area/l):0);i.z=!0,i.dx+=n.x+n.dx-u,n.y+=l,n.dy-=l}else{for((r||l>n.dx)&&(l=n.dx);++o<a;)i=t[o],i.x=u,i.y=c,i.dx=l,c+=i.dy=Math.min(n.y+n.dy-c,l?s(i.area/l):0);i.z=!1,i.dy+=n.y+n.dy-c,n.x+=l,n.dx-=l}}function o(r){var i=a||u(r),o=i[0];return o.x=o.y=0,o.value?(o.dx=c[0],o.dy=c[1]):o.dx=o.dy=0,a&&u.revalue(o),t([o],o.dx*o.dy/o.value),(a?n:e)(o),h&&(a=i),i}var a,u=pa.layout.hierarchy(),s=Math.round,c=[1,1],l=null,f=Yi,h=!1,p="squarify",d=.5*(1+Math.sqrt(5));return o.size=function(t){return arguments.length?(c=t,o):c},o.padding=function(t){function e(e){var n=t.call(o,e,e.depth);return null==n?Yi(e):Vi(e,"number"==typeof n?[n,n,n,n]:n)}function n(e){return Vi(e,t)}if(!arguments.length)return l;var r;return f=null==(l=t)?Yi:"function"==(r=typeof t)?e:"number"===r?(t=[t,t,t,t],n):n,o},o.round=function(t){return arguments.length?(s=t?Math.round:Number,o):s!=Number},o.sticky=function(t){return arguments.length?(h=t,a=null,o):h},o.ratio=function(t){return arguments.length?(d=t,o):d},o.mode=function(t){return arguments.length?(p=t+"",o):p},ci(o,u)},pa.random={normal:function(t,e){var n=arguments.length;return n<2&&(e=1),n<1&&(t=0),function(){var n,r,i;do n=2*Math.random()-1,r=2*Math.random()-1,i=n*n+r*r;while(!i||i>1);return t+e*n*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var t=pa.random.normal.apply(pa,arguments);return function(){return Math.exp(t())}},bates:function(t){var e=pa.random.irwinHall(t);return function(){return e()/t}},irwinHall:function(t){return function(){for(var e=0,n=0;n<t;n++)e+=Math.random();return e}}},pa.scale={};var Ns={floor:_,ceil:_};pa.scale.linear=function(){return to([0,1],[0,1],Sr,!1)};var As={s:1,g:1,p:1,r:1,e:1};pa.scale.log=function(){return so(pa.scale.linear().domain([0,1]),10,!0,[1,10])};var Ls=pa.format(".0e"),qs={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};pa.scale.pow=function(){return co(pa.scale.linear(),1,[0,1])},pa.scale.sqrt=function(){return pa.scale.pow().exponent(.5)},pa.scale.ordinal=function(){return fo([],{t:"range",a:[[]]})},pa.scale.category10=function(){return pa.scale.ordinal().range(Ds)},pa.scale.category20=function(){return pa.scale.ordinal().range(js)},pa.scale.category20b=function(){return pa.scale.ordinal().range(Rs)},pa.scale.category20c=function(){return pa.scale.ordinal().range(Ps)};var Ds=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(St),js=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(St),Rs=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(St),Ps=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(St);pa.scale.quantile=function(){return ho([],[])},pa.scale.quantize=function(){return po(0,1,[0,1])},pa.scale.threshold=function(){return go([.5],[0,1])},pa.scale.identity=function(){return vo([0,1])},pa.svg={},pa.svg.arc=function(){function t(){var t=Math.max(0,+n.apply(this,arguments)),c=Math.max(0,+r.apply(this,arguments)),l=a.apply(this,arguments)-Va,f=u.apply(this,arguments)-Va,h=Math.abs(f-l),p=l>f?0:1;if(c<t&&(d=c,c=t,t=d),h>=Ya)return e(c,p)+(t?e(t,1-p):"")+"Z";var d,g,v,y,m,x,b,w,M,_,S,k,T=0,E=0,C=[];if((y=(+s.apply(this,arguments)||0)/2)&&(v=o===Os?Math.sqrt(t*t+c*c):+o.apply(this,arguments),p||(E*=-1),c&&(E=at(v/c*Math.sin(y))),t&&(T=at(v/t*Math.sin(y)))),c){m=c*Math.cos(l+E),x=c*Math.sin(l+E),b=c*Math.cos(f-E),w=c*Math.sin(f-E);var N=Math.abs(f-l-2*E)<=$a?0:1;if(E&&_o(m,x,b,w)===p^N){var A=(l+f)/2;m=c*Math.cos(A),x=c*Math.sin(A),b=w=null}}else m=x=0;if(t){M=t*Math.cos(f-T),_=t*Math.sin(f-T),S=t*Math.cos(l+T),k=t*Math.sin(l+T);var L=Math.abs(l-f+2*T)<=$a?0:1;if(T&&_o(M,_,S,k)===1-p^L){var q=(l+f)/2;M=t*Math.cos(q),_=t*Math.sin(q),S=k=null}}else M=_=0;if(h>Ua&&(d=Math.min(Math.abs(c-t)/2,+i.apply(this,arguments)))>.001){g=t<c^p?0:1;var D=d,j=d;if(h<$a){var R=null==S?[M,_]:null==b?[m,x]:Fn([m,x],[S,k],[b,w],[M,_]),P=m-R[0],O=x-R[1],z=b-R[0],F=w-R[1],H=1/Math.sin(Math.acos((P*z+O*F)/(Math.sqrt(P*P+O*O)*Math.sqrt(z*z+F*F)))/2),I=Math.sqrt(R[0]*R[0]+R[1]*R[1]);j=Math.min(d,(t-I)/(H-1)),D=Math.min(d,(c-I)/(H+1))}if(null!=b){var U=So(null==S?[M,_]:[S,k],[m,x],c,D,p),B=So([b,w],[M,_],c,D,p);d===D?C.push("M",U[0],"A",D,",",D," 0 0,",g," ",U[1],"A",c,",",c," 0 ",1-p^_o(U[1][0],U[1][1],B[1][0],B[1][1]),",",p," ",B[1],"A",D,",",D," 0 0,",g," ",B[0]):C.push("M",U[0],"A",D,",",D," 0 1,",g," ",B[0])}else C.push("M",m,",",x);if(null!=S){var $=So([m,x],[S,k],t,-j,p),W=So([M,_],null==b?[m,x]:[b,w],t,-j,p);d===j?C.push("L",W[0],"A",j,",",j," 0 0,",g," ",W[1],"A",t,",",t," 0 ",p^_o(W[1][0],W[1][1],$[1][0],$[1][1]),",",1-p," ",$[1],"A",j,",",j," 0 0,",g," ",$[0]):C.push("L",W[0],"A",j,",",j," 0 0,",g," ",$[0])}else C.push("L",M,",",_)}else C.push("M",m,",",x),null!=b&&C.push("A",c,",",c," 0 ",N,",",p," ",b,",",w),C.push("L",M,",",_),null!=S&&C.push("A",t,",",t," 0 ",L,",",1-p," ",S,",",k);return C.push("Z"),C.join("")}function e(t,e){return"M0,"+t+"A"+t+","+t+" 0 1,"+e+" 0,"+-t+"A"+t+","+t+" 0 1,"+e+" 0,"+t}var n=mo,r=xo,i=yo,o=Os,a=bo,u=wo,s=Mo;return t.innerRadius=function(e){return arguments.length?(n=Lt(e),t):n},t.outerRadius=function(e){return arguments.length?(r=Lt(e),t):r},t.cornerRadius=function(e){return arguments.length?(i=Lt(e),t):i},t.padRadius=function(e){return arguments.length?(o=e==Os?Os:Lt(e),t):o},t.startAngle=function(e){return arguments.length?(a=Lt(e),t):a},t.endAngle=function(e){return arguments.length?(u=Lt(e),t):u},t.padAngle=function(e){return arguments.length?(s=Lt(e),t):s},t.centroid=function(){var t=(+n.apply(this,arguments)+ +r.apply(this,arguments))/2,e=(+a.apply(this,arguments)+ +u.apply(this,arguments))/2-Va;return[Math.cos(e)*t,Math.sin(e)*t]},t};var Os="auto";pa.svg.line=function(){return ko(_)};var zs=pa.map({linear:To,"linear-closed":Eo,step:Co,"step-before":No,"step-after":Ao,basis:Po,"basis-open":Oo,"basis-closed":zo,bundle:Fo,cardinal:Do,"cardinal-open":Lo,"cardinal-closed":qo,monotone:Wo});zs.forEach(function(t,e){e.key=t,e.closed=/-closed$/.test(t)});var Fs=[0,2/3,1/3,0],Hs=[0,1/3,2/3,0],Is=[0,1/6,2/3,1/6];pa.svg.line.radial=function(){var t=ko(Yo);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},No.reverse=Ao,Ao.reverse=No,pa.svg.area=function(){return Vo(_)},pa.svg.area.radial=function(){var t=Vo(Yo);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},pa.svg.chord=function(){function t(t,u){var s=e(this,o,t,u),c=e(this,a,t,u);return"M"+s.p0+r(s.r,s.p1,s.a1-s.a0)+(n(s,c)?i(s.r,s.p1,s.r,s.p0):i(s.r,s.p1,c.r,c.p0)+r(c.r,c.p1,c.a1-c.a0)+i(c.r,c.p1,s.r,s.p0))+"Z"}function e(t,e,n,r){var i=e.call(t,n,r),o=u.call(t,i,r),a=s.call(t,i,r)-Va,l=c.call(t,i,r)-Va;return{r:o,a0:a,a1:l,p0:[o*Math.cos(a),o*Math.sin(a)],p1:[o*Math.cos(l),o*Math.sin(l)]}}function n(t,e){return t.a0==e.a0&&t.a1==e.a1}function r(t,e,n){return"A"+t+","+t+" 0 "+ +(n>$a)+",1 "+e}function i(t,e,n,r){return"Q 0,0 "+r}var o=Sn,a=kn,u=Xo,s=bo,c=wo;return t.radius=function(e){return arguments.length?(u=Lt(e),t):u},t.source=function(e){return arguments.length?(o=Lt(e),t):o},t.target=function(e){return arguments.length?(a=Lt(e),t):a},t.startAngle=function(e){return arguments.length?(s=Lt(e),t):s},t.endAngle=function(e){return arguments.length?(c=Lt(e),t):c},t},pa.svg.diagonal=function(){function t(t,i){var o=e.call(this,t,i),a=n.call(this,t,i),u=(o.y+a.y)/2,s=[o,{x:o.x,y:u},{x:a.x,y:u},a];return s=s.map(r),"M"+s[0]+"C"+s[1]+" "+s[2]+" "+s[3]}var e=Sn,n=kn,r=Go;return t.source=function(n){return arguments.length?(e=Lt(n),t):e},t.target=function(e){return arguments.length?(n=Lt(e),t):n},t.projection=function(e){return arguments.length?(r=e,t):r},t},pa.svg.diagonal.radial=function(){var t=pa.svg.diagonal(),e=Go,n=t.projection;return t.projection=function(t){return arguments.length?n(Zo(e=t)):e},t},pa.svg.symbol=function(){function t(t,r){return(Us.get(e.call(this,t,r))||Ko)(n.call(this,t,r))}var e=Qo,n=Jo;return t.type=function(n){return arguments.length?(e=Lt(n),t):e},t.size=function(e){return arguments.length?(n=Lt(e),t):n},t};var Us=pa.map({circle:Ko,cross:function(t){var e=Math.sqrt(t/5)/2;return"M"+-3*e+","+-e+"H"+-e+"V"+-3*e+"H"+e+"V"+-e+"H"+3*e+"V"+e+"H"+e+"V"+3*e+"H"+-e+"V"+e+"H"+-3*e+"Z"},diamond:function(t){var e=Math.sqrt(t/(2*$s)),n=e*$s;return"M0,"+-e+"L"+n+",0 0,"+e+" "+-n+",0Z"},square:function(t){var e=Math.sqrt(t)/2;return"M"+-e+","+-e+"L"+e+","+-e+" "+e+","+e+" "+-e+","+e+"Z"},"triangle-down":function(t){var e=Math.sqrt(t/Bs),n=e*Bs/2;return"M0,"+n+"L"+e+","+-n+" "+-e+","+-n+"Z"},"triangle-up":function(t){var e=Math.sqrt(t/Bs),n=e*Bs/2;return"M0,"+-n+"L"+e+","+n+" "+-e+","+n+"Z"}});pa.svg.symbolTypes=Us.keys();var Bs=Math.sqrt(3),$s=Math.tan(30*Xa);ja.transition=function(t){for(var e,n,r=Ws||++Gs,i=ia(t),o=[],a=Ys||{time:Date.now(),ease:Lr,delay:0,duration:250},u=-1,s=this.length;++u<s;){o.push(e=[]);for(var c=this[u],l=-1,f=c.length;++l<f;)(n=c[l])&&oa(n,l,i,r,a),e.push(n)}return ea(o,i,r)},ja.interrupt=function(t){return this.each(null==t?Vs:ta(ia(t)))};var Ws,Ys,Vs=ta(ia()),Xs=[],Gs=0;Xs.call=ja.call,Xs.empty=ja.empty,Xs.node=ja.node,Xs.size=ja.size,pa.transition=function(t,e){return t&&t.transition?Ws?t.transition(e):t:pa.selection().transition(t)},pa.transition.prototype=Xs,Xs.select=function(t){var e,n,r,i=this.id,o=this.namespace,a=[];t=D(t);for(var u=-1,s=this.length;++u<s;){a.push(e=[]);for(var c=this[u],l=-1,f=c.length;++l<f;)(r=c[l])&&(n=t.call(r,r.__data__,l,u))?("__data__"in r&&(n.__data__=r.__data__),oa(n,l,o,i,r[o][i]),e.push(n)):e.push(null)}return ea(a,o,i)},Xs.selectAll=function(t){var e,n,r,i,o,a=this.id,u=this.namespace,s=[];t=j(t);for(var c=-1,l=this.length;++c<l;)for(var f=this[c],h=-1,p=f.length;++h<p;)if(r=f[h]){o=r[u][a],n=t.call(r,r.__data__,h,c),s.push(e=[]);for(var d=-1,g=n.length;++d<g;)(i=n[d])&&oa(i,d,u,a,o),e.push(i)}return ea(s,u,a)},Xs.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=Y(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]);for(var n=this[o],u=0,s=n.length;u<s;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return ea(i,this.namespace,this.id)},Xs.tween=function(t,e){var n=this.id,r=this.namespace;return arguments.length<2?this.node()[r][n].tween.get(t):X(this,null==e?function(e){e[r][n].tween.remove(t)}:function(i){i[r][n].tween.set(t,e)})},Xs.attr=function(t,e){function n(){this.removeAttribute(u)}function r(){this.removeAttributeNS(u.space,u.local)}function i(t){return null==t?n:(t+="",function(){var e,n=this.getAttribute(u);return n!==t&&(e=a(n,t),function(t){this.setAttribute(u,e(t))})})}function o(t){return null==t?r:(t+="",function(){var e,n=this.getAttributeNS(u.space,u.local);return n!==t&&(e=a(n,t),function(t){this.setAttributeNS(u.space,u.local,e(t))})})}if(arguments.length<2){for(e in t)this.attr(e,t[e]);return this}var a="transform"==t?Qr:Sr,u=pa.ns.qualify(t);return na(this,"attr."+t,e,u.local?o:i)},Xs.attrTween=function(t,e){function n(t,n){var r=e.call(this,t,n,this.getAttribute(i));return r&&function(t){this.setAttribute(i,r(t))}}function r(t,n){var r=e.call(this,t,n,this.getAttributeNS(i.space,i.local));return r&&function(t){this.setAttributeNS(i.space,i.local,r(t))}}var i=pa.ns.qualify(t);return this.tween("attr."+t,i.local?r:n)},Xs.style=function(t,e,n){function r(){this.style.removeProperty(t)}function i(e){return null==e?r:(e+="",function(){var r,i=a(this).getComputedStyle(this,null).getPropertyValue(t);return i!==e&&(r=Sr(i,e),function(e){this.style.setProperty(t,r(e),n)})})}var o=arguments.length;if(o<3){if("string"!=typeof t){o<2&&(e="");for(n in t)this.style(n,t[n],e);return this}n=""}return na(this,"style."+t,e,i)},Xs.styleTween=function(t,e,n){function r(r,i){var o=e.call(this,r,i,a(this).getComputedStyle(this,null).getPropertyValue(t));return o&&function(e){this.style.setProperty(t,o(e),n)}}return arguments.length<3&&(n=""),this.tween("style."+t,r)},Xs.text=function(t){return na(this,"text",t,ra)},Xs.remove=function(){var t=this.namespace;return this.each("end.transition",function(){var e;this[t].count<2&&(e=this.parentNode)&&e.removeChild(this)})},Xs.ease=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].ease:("function"!=typeof t&&(t=pa.ease.apply(pa,arguments)),X(this,function(r){r[n][e].ease=t}))},Xs.delay=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].delay:X(this,"function"==typeof t?function(r,i,o){r[n][e].delay=+t.call(r,r.__data__,i,o)}:(t=+t,function(r){r[n][e].delay=t}))},Xs.duration=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].duration:X(this,"function"==typeof t?function(r,i,o){r[n][e].duration=Math.max(1,t.call(r,r.__data__,i,o))}:(t=Math.max(1,t),function(r){r[n][e].duration=t}))},Xs.each=function(t,e){var n=this.id,r=this.namespace;if(arguments.length<2){var i=Ys,o=Ws;try{Ws=n,X(this,function(e,i,o){Ys=e[r][n],t.call(e,e.__data__,i,o)})}finally{Ys=i,Ws=o}}else X(this,function(i){var o=i[r][n];(o.event||(o.event=pa.dispatch("start","end","interrupt"))).on(t,e)});return this},Xs.transition=function(){for(var t,e,n,r,i=this.id,o=++Gs,a=this.namespace,u=[],s=0,c=this.length;s<c;s++){u.push(t=[]);for(var e=this[s],l=0,f=e.length;l<f;l++)(n=e[l])&&(r=n[a][i],oa(n,l,a,o,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),t.push(n)}return ea(u,a,o)},pa.svg.axis=function(){function t(t){t.each(function(){var t,c=pa.select(this),l=this.__chart__||n,f=this.__chart__=n.copy(),h=null==s?f.ticks?f.ticks.apply(f,u):f.domain():s,p=null==e?f.tickFormat?f.tickFormat.apply(f,u):_:e,d=c.selectAll(".tick").data(h,f),g=d.enter().insert("g",".domain").attr("class","tick").style("opacity",Ua),v=pa.transition(d.exit()).style("opacity",Ua).remove(),y=pa.transition(d.order()).style("opacity",1),m=Math.max(i,0)+a,x=Gi(f),b=c.selectAll(".domain").data([0]),w=(b.enter().append("path").attr("class","domain"),pa.transition(b));g.append("line"),g.append("text");var M,S,k,T,E=g.select("line"),C=y.select("line"),N=d.select("text").text(p),A=g.select("text"),L=y.select("text"),q="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(t=aa,M="x",k="y",S="x2",T="y2",N.attr("dy",q<0?"0em":".71em").style("text-anchor","middle"),w.attr("d","M"+x[0]+","+q*o+"V0H"+x[1]+"V"+q*o)):(t=ua,M="y",k="x",S="y2",T="x2",N.attr("dy",".32em").style("text-anchor",q<0?"end":"start"),w.attr("d","M"+q*o+","+x[0]+"H0V"+x[1]+"H"+q*o)),E.attr(T,q*i),A.attr(k,q*m),C.attr(S,0).attr(T,q*i),L.attr(M,0).attr(k,q*m),f.rangeBand){var D=f,j=D.rangeBand()/2;l=f=function(t){return D(t)+j}}else l.rangeBand?l=f:v.call(t,f,l);g.call(t,l,f),y.call(t,f,f)})}var e,n=pa.scale.linear(),r=Zs,i=6,o=6,a=3,u=[10],s=null;return t.scale=function(e){return arguments.length?(n=e,t):n},t.orient=function(e){return arguments.length?(r=e in Js?e+"":Zs,t):r},t.ticks=function(){return arguments.length?(u=ga(arguments),t):u},t.tickValues=function(e){return arguments.length?(s=e,t):s},t.tickFormat=function(n){return arguments.length?(e=n,t):e},t.tickSize=function(e){var n=arguments.length;return n?(i=+e,o=+arguments[n-1],t):i},t.innerTickSize=function(e){return arguments.length?(i=+e,t):i},t.outerTickSize=function(e){return arguments.length?(o=+e,t):o},t.tickPadding=function(e){return arguments.length?(a=+e,t):a},t.tickSubdivide=function(){return arguments.length&&t},t};var Zs="bottom",Js={top:1,right:1,bottom:1,left:1};pa.svg.brush=function(){function t(o){o.each(function(){var o=pa.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",i).on("touchstart.brush",i),a=o.selectAll(".background").data([0]);a.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),o.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var u=o.selectAll(".resize").data(g,_);u.exit().remove(),u.enter().append("g").attr("class",function(t){return"resize "+t}).style("cursor",function(t){return Qs[t]}).append("rect").attr("x",function(t){return/[ew]$/.test(t)?-3:null}).attr("y",function(t){return/^[ns]/.test(t)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),u.style("display",t.empty()?"none":null);var s,f=pa.transition(o),h=pa.transition(a);c&&(s=Gi(c),h.attr("x",s[0]).attr("width",s[1]-s[0]),n(f)),l&&(s=Gi(l),h.attr("y",s[0]).attr("height",s[1]-s[0]),r(f)),e(f)})}function e(t){t.selectAll(".resize").attr("transform",function(t){return"translate("+f[+/e$/.test(t)]+","+h[+/^s/.test(t)]+")"})}function n(t){t.select(".extent").attr("x",f[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",f[1]-f[0])}function r(t){t.select(".extent").attr("y",h[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function i(){function i(){32==pa.event.keyCode&&(C||(x=null,L[0]-=f[1],L[1]-=h[1],C=2),N())}function g(){32==pa.event.keyCode&&2==C&&(L[0]+=f[1],L[1]+=h[1],C=0,N())}function v(){var t=pa.mouse(w),i=!1;b&&(t[0]+=b[0],t[1]+=b[1]),C||(pa.event.altKey?(x||(x=[(f[0]+f[1])/2,(h[0]+h[1])/2]),L[0]=f[+(t[0]<x[0])],L[1]=h[+(t[1]<x[1])]):x=null),T&&y(t,c,0)&&(n(S),i=!0),E&&y(t,l,1)&&(r(S),i=!0),i&&(e(S),_({type:"brush",mode:C?"move":"resize"}))}function y(t,e,n){var r,i,a=Gi(e),s=a[0],c=a[1],l=L[n],g=n?h:f,v=g[1]-g[0];if(C&&(s-=l,c-=v+l),r=(n?d:p)?Math.max(s,Math.min(c,t[n])):t[n],C?i=(r+=l)+v:(x&&(l=Math.max(s,Math.min(c,2*x[n]-r))),l<r?(i=r,r=l):i=l),g[0]!=r||g[1]!=i)return n?u=null:o=null,g[0]=r,g[1]=i,!0}function m(){v(),S.style("pointer-events","all").selectAll(".resize").style("display",t.empty()?"none":null),pa.select("body").style("cursor",null),q.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),A(),_({type:"brushend"})}var x,b,w=this,M=pa.select(pa.event.target),_=s.of(w,arguments),S=pa.select(w),k=M.datum(),T=!/^(n|s)$/.test(k)&&c,E=!/^(e|w)$/.test(k)&&l,C=M.classed("extent"),A=tt(w),L=pa.mouse(w),q=pa.select(a(w)).on("keydown.brush",i).on("keyup.brush",g);if(pa.event.changedTouches?q.on("touchmove.brush",v).on("touchend.brush",m):q.on("mousemove.brush",v).on("mouseup.brush",m),S.interrupt().selectAll("*").interrupt(),C)L[0]=f[0]-L[0],L[1]=h[0]-L[1];else if(k){var D=+/w$/.test(k),j=+/^n/.test(k);b=[f[1-D]-L[0],h[1-j]-L[1]],L[0]=f[D],L[1]=h[j]}else pa.event.altKey&&(x=L.slice());S.style("pointer-events","none").selectAll(".resize").style("display",null),pa.select("body").style("cursor",M.style("cursor")),_({type:"brushstart"}),v()}var o,u,s=L(t,"brushstart","brush","brushend"),c=null,l=null,f=[0,0],h=[0,0],p=!0,d=!0,g=Ks[0];return t.event=function(t){t.each(function(){var t=s.of(this,arguments),e={x:f,y:h,i:o,j:u},n=this.__chart__||e;this.__chart__=e,Ws?pa.select(this).transition().each("start.brush",function(){o=n.i,u=n.j,f=n.x,h=n.y,t({type:"brushstart"})}).tween("brush:brush",function(){var n=kr(f,e.x),r=kr(h,e.y);return o=u=null,function(i){f=e.x=n(i),h=e.y=r(i),t({type:"brush",mode:"resize"})}}).each("end.brush",function(){o=e.i,u=e.j,t({type:"brush",mode:"resize"}),t({type:"brushend"})}):(t({type:"brushstart"}),t({type:"brush",mode:"resize"}),t({type:"brushend"}))})},t.x=function(e){return arguments.length?(c=e,g=Ks[!c<<1|!l],t):c},t.y=function(e){return arguments.length?(l=e,g=Ks[!c<<1|!l],t):l},t.clamp=function(e){return arguments.length?(c&&l?(p=!!e[0],d=!!e[1]):c?p=!!e:l&&(d=!!e),t):c&&l?[p,d]:c?p:l?d:null},t.extent=function(e){var n,r,i,a,s;return arguments.length?(c&&(n=e[0],r=e[1],l&&(n=n[0],r=r[0]),o=[n,r],c.invert&&(n=c(n),r=c(r)),r<n&&(s=n,n=r,r=s),n==f[0]&&r==f[1]||(f=[n,r])),l&&(i=e[0],a=e[1],c&&(i=i[1],a=a[1]),u=[i,a],l.invert&&(i=l(i),a=l(a)),a<i&&(s=i,i=a,a=s),i==h[0]&&a==h[1]||(h=[i,a])),t):(c&&(o?(n=o[0],r=o[1]):(n=f[0],r=f[1],c.invert&&(n=c.invert(n),r=c.invert(r)),r<n&&(s=n,n=r,r=s))),l&&(u?(i=u[0],a=u[1]):(i=h[0],a=h[1],l.invert&&(i=l.invert(i),a=l.invert(a)),a<i&&(s=i,i=a,a=s))),c&&l?[[n,i],[r,a]]:c?[n,r]:l&&[i,a])},t.clear=function(){return t.empty()||(f=[0,0],h=[0,0],o=u=null),t},t.empty=function(){return!!c&&f[0]==f[1]||!!l&&h[0]==h[1]},pa.rebind(t,s,"on")};var Qs={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ks=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],tc=xu.format=ku.timeFormat,ec=tc.utc,nc=ec("%Y-%m-%dT%H:%M:%S.%LZ");tc.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?sa:nc,sa.parse=function(t){var e=new Date(t);return isNaN(e)?null:e},sa.toString=nc.toString,xu.second=Wt(function(t){return new bu(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(t.getTime()+1e3*Math.floor(e))},function(t){return t.getSeconds()}),xu.seconds=xu.second.range,xu.seconds.utc=xu.second.utc.range,xu.minute=Wt(function(t){return new bu(6e4*Math.floor(t/6e4))},function(t,e){t.setTime(t.getTime()+6e4*Math.floor(e))},function(t){return t.getMinutes()}),xu.minutes=xu.minute.range,xu.minutes.utc=xu.minute.utc.range,xu.hour=Wt(function(t){var e=t.getTimezoneOffset()/60;return new bu(36e5*(Math.floor(t/36e5-e)+e))},function(t,e){t.setTime(t.getTime()+36e5*Math.floor(e))},function(t){return t.getHours()}),xu.hours=xu.hour.range,xu.hours.utc=xu.hour.utc.range,xu.month=Wt(function(t){return t=xu.day(t),t.setDate(1),t},function(t,e){t.setMonth(t.getMonth()+e)},function(t){return t.getMonth()}),xu.months=xu.month.range,xu.months.utc=xu.month.utc.range;var rc=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],ic=[[xu.second,1],[xu.second,5],[xu.second,15],[xu.second,30],[xu.minute,1],[xu.minute,5],[xu.minute,15],[xu.minute,30],[xu.hour,1],[xu.hour,3],[xu.hour,6],[xu.hour,12],[xu.day,1],[xu.day,2],[xu.week,1],[xu.month,1],[xu.month,3],[xu.year,1]],oc=tc.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){
return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",je]]),ac={range:function(t,e,n){return pa.range(Math.ceil(t/n)*n,+e,n).map(la)},floor:_,ceil:_};ic.year=xu.year,xu.scale=function(){return ca(pa.scale.linear(),ic,oc)};var uc=ic.map(function(t){return[t[0].utc,t[1]]}),sc=ec.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",je]]);uc.year=xu.year.utc,xu.scale.utc=function(){return ca(pa.scale.linear(),uc,sc)},pa.text=qt(function(t){return t.responseText}),pa.json=function(t,e){return Dt(t,"application/json",fa,e)},pa.html=function(t,e){return Dt(t,"text/html",ha,e)},pa.xml=qt(function(t){return t.responseXML}),this.d3=pa,r=pa,i="function"==typeof r?r.call(e,n,e,t):r,!(void 0!==i&&(t.exports=i))}()},function(t,e,n){"use strict";var r=n(1),i=function(){function t(t){this.svg=t}return Object.defineProperty(t.prototype,"cx",{get:function(){return this.width/2},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cy",{get:function(){return this.height/2},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return+r(".visualizer").width()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return+r(".visualizer").height()},enumerable:!0,configurable:!0}),t}();e.BaseElement=i},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.eot"},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=p[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(c(r.parts[o],e))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(c(r.parts[o],e));p[r.id]={id:r.id,refs:1,parts:a}}}}function i(t){for(var e=[],n={},r=0;r<t.length;r++){var i=t[r],o=i[0],a=i[1],u=i[2],s=i[3],c={css:a,media:u,sourceMap:s};n[o]?n[o].parts.push(c):e.push(n[o]={id:o,parts:[c]})}return e}function o(t,e){var n=v(),r=x[x.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),x.push(e);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(e)}}function a(t){t.parentNode.removeChild(t);var e=x.indexOf(t);e>=0&&x.splice(e,1)}function u(t){var e=document.createElement("style");return e.type="text/css",o(t,e),e}function s(t){var e=document.createElement("link");return e.rel="stylesheet",o(t,e),e}function c(t,e){var n,r,i;if(e.singleton){var o=m++;n=y||(y=u(e)),r=l.bind(null,n,o,!1),i=l.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=s(e),r=h.bind(null,n),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=u(e),r=f.bind(null,n),i=function(){a(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}function l(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function f(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function h(t,e){var n=e.css,r=e.sourceMap;r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var i=new Blob([n],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(i),o&&URL.revokeObjectURL(o)}var p={},d=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},g=d(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),v=d(function(){return document.head||document.getElementsByTagName("head")[0]}),y=null,m=0,x=[];t.exports=function(t,e){e=e||{},"undefined"==typeof e.singleton&&(e.singleton=g()),"undefined"==typeof e.insertAt&&(e.insertAt="bottom");var n=i(t);return r(n,e),function(t){for(var o=[],a=0;a<n.length;a++){var u=n[a],s=p[u.id];s.refs--,o.push(s)}if(t){var c=i(t);r(c,e)}for(var a=0;a<o.length;a++){var s=o[a];if(0===s.refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete p[s.id]}}}};var b=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(29)),r(n(28)),r(n(27))},function(t,e){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function n(t){return"string"!=typeof t&&(t=String(t)),t}function r(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return g.iterable&&(e[Symbol.iterator]=function(){return e}),e}function i(t){this.map={},t instanceof i?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function o(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function a(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function u(t){var e=new FileReader;return e.readAsArrayBuffer(t),a(e)}function s(t){var e=new FileReader;return e.readAsText(t),a(e)}function c(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(g.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(g.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(g.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(t){if(!g.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):g.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},g.blob?(this.blob=function(){var t=o(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(u)},this.text=function(){var t=o(this);if(t)return t;if(this._bodyBlob)return s(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=o(this);return t?t:Promise.resolve(this._bodyText)},g.formData&&(this.formData=function(){return this.text().then(h)}),this.json=function(){return this.text().then(JSON.parse)},this}function l(t){var e=t.toUpperCase();return v.indexOf(e)>-1?e:t}function f(t,e){e=e||{};var n=e.body;if(f.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new i(t.headers)),this.method=t.method,this.mode=t.mode,n||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new i(e.headers)),this.method=l(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function h(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function p(t){var e=new i,n=(t.getAllResponseHeaders()||"").trim().split("\n");return n.forEach(function(t){var n=t.trim().split(":"),r=n.shift().trim(),i=n.join(":").trim();e.append(r,i)}),e}function d(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof i?e.headers:new i(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var g={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};i.prototype.append=function(t,r){t=e(t),r=n(r);var i=this.map[t];i||(i=[],this.map[t]=i),i.push(r)},i.prototype["delete"]=function(t){delete this.map[e(t)]},i.prototype.get=function(t){var n=this.map[e(t)];return n?n[0]:null},i.prototype.getAll=function(t){return this.map[e(t)]||[]},i.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},i.prototype.set=function(t,r){this.map[e(t)]=[n(r)]},i.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(n){this.map[n].forEach(function(r){t.call(e,r,n,this)},this)},this)},i.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),r(t)},i.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),r(t)},i.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),r(t)},g.iterable&&(i.prototype[Symbol.iterator]=i.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];f.prototype.clone=function(){return new f(this)},c.call(f.prototype),c.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new i(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var y=[301,302,303,307,308];d.redirect=function(t,e){if(y.indexOf(e)===-1)throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=i,t.Request=f,t.Response=d,t.fetch=function(t,e){return new Promise(function(n,r){function i(){return"responseURL"in a?a.responseURL:/^X-Request-URL:/m.test(a.getAllResponseHeaders())?a.getResponseHeader("X-Request-URL"):void 0}var o;o=f.prototype.isPrototypeOf(t)&&!e?t:new f(t,e);var a=new XMLHttpRequest;a.onload=function(){var t={status:a.status,statusText:a.statusText,headers:p(a),url:i()},e="response"in a?a.response:a.responseText;n(new d(e,t))},a.onerror=function(){r(new TypeError("Network request failed"))},a.ontimeout=function(){r(new TypeError("Network request failed"))},a.open(o.method,o.url,!0),"include"===o.credentials&&(a.withCredentials=!0),"responseType"in a&&g.blob&&(a.responseType="blob"),o.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send("undefined"==typeof o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(t,e,n){e=t.exports=n(5)(),e.push([t.id,"@font-face{font-family:Sansumi-Regular;src:url("+n(6)+");src:url("+n(15)+') format("woff2"),url('+n(14)+') format("woff"),url('+n(13)+') format("truetype"),url('+n(12)+'#Sansumi-Regular) format("svg"),url('+n(6)+'?#iefix) format("embedded-opentype");font-weight:400;font-style:normal}',""])},function(t,e,n){e=t.exports=n(5)(),e.push([t.id,"/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}dfn{font-style:italic}h1{font-size:2em;margin:.75em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}figure{margin:1.5em 40px}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}input{overflow:visible}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;display:table;max-width:100%;white-space:normal;color:inherit;padding:0}optgroup{font-weight:700}textarea{overflow:auto}h1,h2,label,p{font-family:Sansumi-Regular}body,html{height:100%;flex-direction:column;min-height:100vh}label{font-size:12px}h1{font-size:18px}h2{font-size:16px}.content{width:100%;height:calc(100% - 80px);display:flex;flex:1}.node circle{stroke:#1fbad7;stroke-width:2px}.node .node-color-1{fill:#6e868d}.node .node-color-2{fill:#56717a}.node .node-color-3{fill:#3e5d67}.node .node-color-4{fill:#264954}.node .node-color-5{fill:#0e3541}.node div{display:table;height:100%;width:100%;overflow:hidden}.node p{font-size:8px;color:#f2f2f2;text-shadow:1px 1px 4px #0e3541;display:table-cell;text-align:center;vertical-align:middle}.loader circle{fill-opacity:0;stroke:#1f77b4;stroke-width:3px}.loader rect{fill:#fff}.visualizer{width:100%;flex:1}.top-bar{background-color:#09091a;height:80px;color:#f2f2f2;display:flex;align-items:center;padding-left:48px}.top-bar p{padding-left:16px;margin:0}.menu{background-color:#fff;color:#09091a;flex:0 0 16em;border-right:1px solid #09091a;padding-top:50px}.menu div,.menu h2,.menu img,.menu input{padding-left:48px}.menu h1,.menu img{display:inline}.menu h1{line-height:0}.menu hr{color:#09091a;width:80%;margin-bottom:20px}.menu input{margin:5px 0}",""])},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.svg"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.ttf"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.woff"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.woff2"},function(t,e,n){var r=n(10);"string"==typeof r&&(r=[[t.id,r,""]]),n(7)(r,{}),r.locals&&(t.exports=r.locals)},function(t,e,n){var r=n(11);"string"==typeof r&&(r=[[t.id,r,""]]),n(7)(r,{}),r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";n(17),n(16);var r=n(19),i=n(2),o=n(1);i.setLevel("debug");var a=function(){function t(){this._visualizer=new r.Visualizer(new r.MenuComponent,{})}return t.prototype.init=function(){o("body").fadeIn("fast"),this._visualizer.draw()},t}();e.App=a;var u=new a;u.init()},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(20)),r(n(24))},function(t,e,n){"use strict";var r=n(1),i="primary-selectors",o="secondary-selectors",a=n(2),u=a.getLogger("menu"),s=function(){function t(){this._selected={}}return t.prototype.setSelectors=function(t){var e=t[0].query,n=t[0].children[0].query;this.setSelectorsInternal(i,t,e),this.setSelectorsInternal(o,t[0].children,n),this._selectorsHierarchy=t},t.prototype.setOnSelectorsCallback=function(t){this._callback=t},t.prototype.setSelectorsInternal=function(t,e,n){this._selected[t]=n;var i="."+t;r(i).empty(),e.forEach(function(e,o){var a=n===e.query?"checked":"",u='\n                <input type="radio" name="'+t+'" id="'+t+"-"+o+'" value="'+e.query+'" '+a+' />\n                <label for="'+t+"-"+o+'">'+e.label+"</label><br>\n            ";r(i).append(u)}),this.addChangeListener(t)},t.prototype.addChangeListener=function(t){var e=this,n="."+t;r(n+" input").on("change",function(a){var u=r('input[name="'+t+'"]:checked',n).val();if(e._selected[t]=u,t===i){var s=e._selectorsHierarchy.find(function(t){return t.query===u});e.setSelectorsInternal(o,s.children,s.children[0].query)}e.invokeCallback()})},t.prototype.invokeCallback=function(){return this._callback?void this._callback({query:this._selected[i]},{query:this._selected[o]}):void u.error("Callback has not been set")},t}();e.MenuComponent=s},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(4)),r(n(22)),r(n(23))},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=n(3),o=n(4),a=n(2),u=a.getLogger("loader"),s=function(t){function e(e){t.call(this,e),this.r=50}return r(e,t),e.prototype.startLoader=function(){return this.g?void u.debug("Calling already started loader"):(this.g=this.svg.append("g").classed("loader",!0),this.addCircle(this.g),void this.addRect(this.g))},e.prototype.stopLoader=function(){this.g&&(this.g.remove(),this.g=null)},e.prototype.addCircle=function(t){var e=this;t.append("circle").attr("cx",function(){return e.cx}).attr("cy",function(){return e.cy}).attr("r",this.r)},e.prototype.addRect=function(t){var e=this,n=2*this.r+5,r=t.append("rect").attr("x",function(){return e.cx-10}).attr("y",function(){return e.cy-n/2}).attr("width",20).attr("height",n);this.addRotation(r)},e.prototype.addRotation=function(t){var e=this,n=function(){t.transition().attrTween("transform",function(){return i.interpolateString("rotate(0,   "+e.cx+", "+e.cy+")","rotate(360, "+e.cx+", "+e.cy+")")}).duration(2e3).each("end",n)};n()},e}(o.BaseElement);e.StandardLoader=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=n(3),o=n(4),a=n(8),u=n(2),s=u.getLogger("node-hierarchy"),c=function(){function t(){}return t}();e.NodeHierarchyElementOption=c;var l=function(t){function e(e,n){if(t.call(this,e),this._config=n,!this._config)return void s.error("No configuration is specified")}return r(e,t),Object.defineProperty(e.prototype,"colorScheme",{get:function(){return this._colorScheme||(this._colorScheme=i.scale.category20c()),this._colorScheme},set:function(t){this._colorScheme=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"minimumValue",{get:function(){return this._config.minimumValue||0},set:function(t){this._config.minimumValue=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"data",{set:function(t){this._data&&this.clean(),this._data=t,this.redraw()},enumerable:!0,configurable:!0}),e.prototype.clean=function(){this.svg.selectAll(".node").remove()},e.prototype.redraw=function(){var t=this,e=a.translateToBorderFactory(this.width,this.height),n=this._data.filter(function(e){return e.value>=t.minimumValue&&e.name}),r=i.layout.pack().sort(function(t,e){return-t.name.length-e.name.length}).size([this.width,this.height]).padding(5),o=r.nodes({children:n}).filter(function(t){return!t.children});o.forEach(function(t){return t.radius=t.r});var u=this.svg.selectAll(".node").data(o).enter().append("g").attr("class","node").attr("transform",e);this.addTitle(u),this.addCircle(u),this.addLabel(u),this.translateToCenter(u)},e.prototype.translateToCenter=function(t){t.transition().duration(2e3).ease("cubic-in-out").delay(function(t,e){return 20*e*Math.random()}).attr("transform",function(t){return"translate("+t.x+", "+t.y+")"})},e.prototype.addCircle=function(t){t.append("circle").attr("r",function(t){return t.r}).attr("class",function(t,e){return"node-color-"+(e%6+1)})},e.prototype.addTitle=function(t){t.append("title").text(function(t){return t.name+": "+t.value})},e.prototype.addLabel=function(t){t.append("foreignObject").attr("width",function(t){return 2*t.r}).attr("height",function(t){return 2*t.r}).attr("transform",function(t){return"translate("+-t.r+","+-t.r+")"}).append("xhtml:div").append("xhtml:p").html(function(t){return a.shortenToWithinRadius(t.r,t.name)})},e}(o.BaseElement);e.NodeHierarchyElement=l},function(t,e,n){"use strict";var r=n(3),i=n(1),o=n(21),a=n(25),u=function(){function t(t,e){var n=this;this._manager=t,this.config=e,this.onSelectorChanged=function(t,e){n._nodeHierarchy&&n._nodeHierarchy.clean(),n.setIsLoading(!0),n._repository.getGroups(t,e).then(function(t){n.setData(t)})},this._repository=new a.SodaFilmLocatioRepository}return Object.defineProperty(t.prototype,"targetId",{get:function(){return this.config&&this.config.targetId?this.config.targetId:".visualizer"},enumerable:!0,configurable:!0}),t.prototype.draw=function(){var t=this;this._repository.getSelectors().then(function(e){e&&0!=e.length||log.error("No selectors found"),t.onSelectorChanged({query:e[0].query},{query:e[0].children[0].query}),t._manager.setSelectors(e)});var e=r.select(this.targetId);this._svg=e.append("svg").attr("viewBox","0 0 "+i(this.targetId).width()+" "+i(this.targetId).height()),this._loader=new o.StandardLoader(this._svg),this.setIsLoading(!0);var n={minimumValue:2};this._manager.setOnSelectorsCallback(this.onSelectorChanged),this._nodeHierarchy=new o.NodeHierarchyElement(this._svg,n)},t.prototype.setData=function(t){this._nodeHierarchy||this.draw(),this.setIsLoading(!1),this._nodeHierarchy.data=t},t.prototype.setIsLoading=function(t){t?this._loader.startLoader():this._loader.stopLoader()},t}();e.Visualizer=u},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(26))},function(t,e,n){"use strict";n(9);var r=n(2),i=n(8),o=(r.getLogger("movie-location-repo"),n(1)),a=function(){function t(){this.headers=new Headers,this.url="https://data.sfgov.org/resource/wwmu-gmzc.json"}return t.prototype.getGroups=function(t,e){var n=i.groupMapperFactory(t.query,"COUNT_"+e.query);return"locations"!==t.query&&"locations"!==e.query,this.fetch(this.url+"?$group="+t.query+"&$select="+t.query+",COUNT("+e.query+")").then(n)},t.prototype.getAvancedGroups=function(t,e,n){var r="SELECT "+t.query+", count(*) \n                     GROUP BY "+e.query+", "+t.query+" |>\n                            SELECT "+t.query+", COUNT(*) AS count \n                            GROUP BY "+t.query;return this.fetch(this.url+"?$query"+r).then(n)},t.prototype.fetch=function(t){return fetch(t).then(function(t){return t.json()})},t.prototype.getSelectors=function(){var t={label:"Movie",query:"title"},e={label:"Locations",query:"locations"},n={label:"Writer",query:"writer"},r={label:"Director",query:"director"},i={label:"Production Company",query:"production_company"};return new Promise(function(a,u){var s=[o.extend(t,{children:[e]}),o.extend(e,{children:[t]}),o.extend(n,{children:[t,e,r,i]}),o.extend(r,{children:[t,e,n,i]}),o.extend(i,{children:[t,e,n,r]})];a(s)})},t}();e.SodaFilmLocatioRepository=a},function(t,e){"use strict";e.groupMapperFactory=function(t,e){return function(n){return n.map(function(n){return{name:n[t],value:+n[e]}})}}},function(t,e){"use strict";e.shortenToWithinRadius=function(t,e){var n=t/3.1,r=t/10;if(e=e.split(/\s+/g).map(function(t){if(t.length>=n){var e=2;return t.substr(0,n-e)+"-<br>"+t.substr(n-e+1,t.length)}return t}).join(" "),e&&e.length>n*r){var i=e.substr(0,n-3);return i.length<5?"":i+"&hellip;"}return e}},function(t,e){"use strict";e.translateToBorderFactory=function(t,e){return function(n){var r=t/2,i=e/2;return n.x-r,n.y-i,"translate("+n.x+","+(e+n.r)+")"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVuZGxlLm1pbi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMGFhNTllM2JiYWY5Mzg3YWY4MjAiLCJ3ZWJwYWNrOi8vLy4vfi9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2dsZXZlbC9saWIvbG9nbGV2ZWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kMy9kMy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL2VsZW1lbnRzL2Jhc2UtZWxlbWVudC50cyIsIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvZm9udHMvU2Fuc3VtaS1SZWd1bGFyLmVvdCIsIndlYnBhY2s6Ly8vLi9+L3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2luZGV4LnRzIiwid2VicGFjazovLy8uL34vd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIud29mZiIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci53b2ZmMiIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci5zY3NzP2M4N2UiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy5zY3NzPzIyMjAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tZW51L21lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdmlzdWFsaXplci9lbGVtZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL2VsZW1lbnRzL2xvYWRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL2VsZW1lbnRzL25vZGUtaGllcmFyY2h5LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Zpc3VhbGl6ZXIvdmlzdWFsaXplci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVwb3NpdG9yaWVzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9yZXBvc2l0b3JpZXMvbW92aWUtbG9jYXRpb24ucmVwb3NpdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZGF0YS1tYXBwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3RleHQtbWFuaXB1bGF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy90cmFuc2Zvcm1zLnRzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsIkRPTUV2YWwiLCJjb2RlIiwiZG9jIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpc0FycmF5TGlrZSIsIm9iaiIsImxlbmd0aCIsInR5cGUiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJlbGVtIiwiaSIsIm5vZGVUeXBlIiwiaW5kZXhPZiIsInJpc1NpbXBsZSIsInRlc3QiLCJmaWx0ZXIiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3QiLCJlYWNoIiwibWF0Y2giLCJybm90aHRtbHdoaXRlIiwiXyIsImZsYWciLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwidmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0IiwibWV0aG9kIiwicHJvbWlzZSIsImRvbmUiLCJmYWlsIiwidGhlbiIsInVuZGVmaW5lZCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeSIsIkRhdGEiLCJleHBhbmRvIiwidWlkIiwiZ2V0RGF0YSIsImRhdGEiLCJyYnJhY2UiLCJKU09OIiwicGFyc2UiLCJkYXRhQXR0ciIsImtleSIsIm5hbWUiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsInRvTG93ZXJDYXNlIiwiZ2V0QXR0cmlidXRlIiwiZSIsImRhdGFVc2VyIiwic2V0IiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiY3NzIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsImV4ZWMiLCJzdHlsZSIsInN0YXJ0IiwiZW5kIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJ0ZW1wIiwib3duZXJEb2N1bWVudCIsIm5vZGVOYW1lIiwiZGlzcGxheSIsImRlZmF1bHREaXNwbGF5TWFwIiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImluZGV4IiwiZGF0YVByaXYiLCJnZXQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJnZXRBbGwiLCJjb250ZXh0IiwidGFnIiwicmV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWVyZ2UiLCJzZXRHbG9iYWxFdmFsIiwiZWxlbXMiLCJyZWZFbGVtZW50cyIsImwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ0bXAiLCJ3cmFwIiwiY29udGFpbnMiLCJqIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJyaHRtbCIsInJ0YWdOYW1lIiwid3JhcE1hcCIsIl9kZWZhdWx0IiwiaW5uZXJIVE1MIiwiaHRtbFByZWZpbHRlciIsImxhc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwidGV4dENvbnRlbnQiLCJwdXNoIiwiY3JlYXRlVGV4dE5vZGUiLCJpbkFycmF5IiwicnNjcmlwdFR5cGUiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJvbiIsInR5cGVzIiwic2VsZWN0b3IiLCJmbiIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJndWlkIiwiYWRkIiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiY29udGVudCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjbG9uZUNvcHlFdmVudCIsInNyYyIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImV2ZW50cyIsImhhc0RhdGEiLCJhY2Nlc3MiLCJoYW5kbGUiLCJleHRlbmQiLCJmaXhJbnB1dCIsInJjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImFyZ3MiLCJjYWxsYmFjayIsImNvbmNhdCIsImZpcnN0IiwiaGFzU2NyaXB0cyIsIm5vZGUiLCJpTm9DbG9uZSIsInN1cHBvcnQiLCJjaGVja0Nsb25lIiwicmNoZWNrZWQiLCJzZWxmIiwiZXEiLCJodG1sIiwibWFwIiwiY2xvbmUiLCJfZXZhbFVybCIsInJjbGVhblNjcmlwdCIsInJlbW92ZSIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRTdHlsZXMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsInJudW1ub25weCIsInJtYXJnaW4iLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsInZlbmRvclByb3BOYW1lIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiY3NzUHJlZml4ZXMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsIk1hdGgiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJ2YWwiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0IiwiVHdlZW4iLCJlYXNpbmciLCJwcm90b3R5cGUiLCJpbml0IiwicmFmIiwidGltZXJJZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZ4IiwidGljayIsImNyZWF0ZUZ4Tm93Iiwic2V0VGltZW91dCIsImZ4Tm93Iiwibm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJ3aGljaCIsImF0dHJzIiwiaGVpZ2h0Iiwib3BhY2l0eSIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwicHJvcHMiLCJvcHRzIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJvcmlnIiwiaGlkZGVuIiwiZGF0YVNob3ciLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJyZnh0eXBlcyIsImlzRW1wdHlPYmplY3QiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY2FtZWxDYXNlIiwiaXNBcnJheSIsImNzc0hvb2tzIiwiZXhwYW5kIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwicHJveHkiLCJ0aW1lciIsInByb2dyZXNzIiwiY29tcGxldGUiLCJzdHJpcEFuZENvbGxhcHNlIiwidG9rZW5zIiwiam9pbiIsImdldENsYXNzIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInJicmFja2V0IiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwidW5zaGlmdCIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0Iiwic2VsZWN0ZWQiLCJpbnNwZWN0ZWQiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0Iiwic2Vla2luZ1RyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJhamF4RXh0ZW5kIiwidGFyZ2V0IiwiZGVlcCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiY29udGVudHMiLCJzaGlmdCIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjb252ZXJ0ZXJzIiwiYWpheENvbnZlcnQiLCJyZXNwb25zZSIsImlzU3VjY2VzcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJwcmV2IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwic3BsaXQiLCJzdGF0ZSIsImVycm9yIiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJ2ZXJzaW9uIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJsYXN0IiwibGVuIiwic29ydCIsInNwbGljZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImlzUGxhaW5PYmplY3QiLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwcm90byIsIkN0b3IiLCJnbG9iYWxFdmFsIiwic3RyaW5nIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsIkRhdGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsIlNpenpsZSIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJwcmVmZXJyZWREb2MiLCJzZXREb2N1bWVudCIsImRvY3VtZW50SXNIVE1MIiwicnF1aWNrRXhwciIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsImNvbXBpbGVyQ2FjaGUiLCJyYnVnZ3lRU0EiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsInNldEF0dHJpYnV0ZSIsInRva2VuaXplIiwidG9TZWxlY3RvciIsInJzaWJsaW5nIiwidGVzdENvbnRleHQiLCJxc2FFcnJvciIsInNlbGVjdCIsImNyZWF0ZUNhY2hlIiwiY2FjaGUiLCJrZXlzIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImEiLCJiIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWRBbmNlc3RvciIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInNldEZpbHRlcnMiLCJhZGRDb21iaW5hdG9yIiwibWF0Y2hlciIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsIm5leHQiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImZpbmQiLCJUQUciLCJkaXJydW5zVW5pcXVlIiwicG9wIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsImZpcmluZ0luZGV4Iiwib25jZSIsInN0b3BPbkZhbHNlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsInR1cGxlcyIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm1heERlcHRoIiwiVHlwZUVycm9yIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInN3YXAiLCJvbGQiLCJoaWRlIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJtYXJnaW5SaWdodCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZGlzcGxheXN3YXAiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImNzc1Byb3BzIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzRmluaXRlIiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwiZWFzZWQiLCJwb3MiLCJzdGVwIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJzdGF0dXMiLCJuYXRpdmVTdGF0dXNUZXh0IiwiaGVhZGVycyIsInN1Y2Nlc3MiLCJtb2RpZmllZCIsInN0YXR1c1RleHQiLCJ0aW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJpZk1vZGlmaWVkIiwiY2FjaGVVUkwiLCJjYWxsYmFja0NvbnRleHQiLCJzdGF0dXNDb2RlIiwiZmlyZUdsb2JhbHMiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwicmVzcG9uc2VIZWFkZXJzIiwidXJsQW5jaG9yIiwidW5jYWNoZWQiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwiYWJvcnQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJ3aW4iLCJyZWN0IiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicGFyc2VKU09OIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJkZWZpbml0aW9uIiwicmVhbE1ldGhvZCIsIm1ldGhvZE5hbWUiLCJ1bmRlZmluZWRUeXBlIiwiYmluZE1ldGhvZCIsImxvZyIsIkZ1bmN0aW9uIiwiZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcyIsImxldmVsIiwibG9nZ2VyTmFtZSIsInJlcGxhY2VMb2dnaW5nTWV0aG9kcyIsImxvZ01ldGhvZHMiLCJtZXRob2RGYWN0b3J5IiwiZGVmYXVsdE1ldGhvZEZhY3RvcnkiLCJMb2dnZXIiLCJkZWZhdWx0TGV2ZWwiLCJwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlIiwibGV2ZWxOdW0iLCJsZXZlbE5hbWUiLCJsb2NhbFN0b3JhZ2UiLCJzdG9yYWdlS2V5IiwiaWdub3JlIiwiY29va2llIiwiZ2V0UGVyc2lzdGVkTGV2ZWwiLCJzdG9yZWRMZXZlbCIsImxldmVscyIsImN1cnJlbnRMZXZlbCIsIlRSQUNFIiwiREVCVUciLCJJTkZPIiwiV0FSTiIsIkVSUk9SIiwiU0lMRU5UIiwiZ2V0TGV2ZWwiLCJzZXRMZXZlbCIsInBlcnNpc3QiLCJzZXREZWZhdWx0TGV2ZWwiLCJlbmFibGVBbGwiLCJkaXNhYmxlQWxsIiwiaW5pdGlhbExldmVsIiwiZGVmYXVsdExvZ2dlciIsIl9sb2dnZXJzQnlOYW1lIiwiZ2V0TG9nZ2VyIiwibG9nZ2VyIiwiX2xvZyIsImQzX2RvY3VtZW50RWxlbWVudCIsImQzX3dpbmRvdyIsImQzX2FzY2VuZGluZyIsIk5hTiIsImQzX251bWJlciIsIngiLCJkM19udW1lcmljIiwiZDNfYmlzZWN0b3IiLCJsbyIsImhpIiwibWlkIiwicmlnaHQiLCJkM190cmFuc3Bvc2VMZW5ndGgiLCJkIiwiZDNfcmFuZ2VfaW50ZWdlclNjYWxlIiwiayIsImQzX2NsYXNzIiwiY3RvciIsImQzX01hcCIsImNyZWF0ZSIsImQzX21hcF9lc2NhcGUiLCJkM19tYXBfcHJvdG8iLCJkM19tYXBfemVybyIsImQzX21hcF91bmVzY2FwZSIsImQzX21hcF9oYXMiLCJkM19tYXBfcmVtb3ZlIiwiZDNfbWFwX2tleXMiLCJkM19tYXBfc2l6ZSIsInNpemUiLCJkM19tYXBfZW1wdHkiLCJkM19TZXQiLCJkM19pZGVudGl0eSIsImQzX3JlYmluZCIsImQzX3ZlbmRvclN5bWJvbCIsImNoYXJBdCIsImQzX3ZlbmRvclByZWZpeGVzIiwicHJlZml4TmFtZSIsImQzX25vb3AiLCJkM19kaXNwYXRjaCIsImQzX2Rpc3BhdGNoX2V2ZW50IiwieiIsImxpc3RlbmVycyIsImxpc3RlbmVyQnlOYW1lIiwibGlzdGVuZXIiLCJkM19ldmVudFByZXZlbnREZWZhdWx0IiwiZDMiLCJkM19ldmVudFNvdXJjZSIsInNvdXJjZUV2ZW50IiwiZDNfZXZlbnREaXNwYXRjaCIsIm9mIiwidGhpeiIsImFyZ3VtZW50eiIsImUxIiwiZTAiLCJkM19zZWxlY3Rpb24iLCJkM19zdWJjbGFzcyIsImQzX3NlbGVjdGlvblByb3RvdHlwZSIsImQzX3NlbGVjdGlvbl9zZWxlY3RvciIsImQzX3NlbGVjdCIsImQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbCIsImQzX3NlbGVjdEFsbCIsImQzX3NlbGVjdGlvbl9hdHRyIiwiYXR0ck51bGwiLCJhdHRyTnVsbE5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzcGFjZSIsImxvY2FsIiwiYXR0ckNvbnN0YW50IiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsImF0dHJGdW5jdGlvbk5TIiwibnMiLCJxdWFsaWZ5IiwiZDNfY29sbGFwc2UiLCJkM19zZWxlY3Rpb25fY2xhc3NlZFJlIiwicmVxdW90ZSIsImQzX3NlbGVjdGlvbl9jbGFzc2VzIiwiZDNfc2VsZWN0aW9uX2NsYXNzZWQiLCJjbGFzc2VkQ29uc3RhbnQiLCJjbGFzc2VkRnVuY3Rpb24iLCJkM19zZWxlY3Rpb25fY2xhc3NlZE5hbWUiLCJyZSIsImNsYXNzTGlzdCIsImxhc3RJbmRleCIsImQzX3NlbGVjdGlvbl9zdHlsZSIsInByaW9yaXR5Iiwic3R5bGVOdWxsIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50Iiwic2V0UHJvcGVydHkiLCJzdHlsZUZ1bmN0aW9uIiwiZDNfc2VsZWN0aW9uX3Byb3BlcnR5IiwicHJvcGVydHlOdWxsIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJkM19zZWxlY3Rpb25fY3JlYXRvciIsIm5hbWVzcGFjZVVSSSIsImQzX25zWGh0bWwiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVOUyIsImQzX3NlbGVjdGlvblJlbW92ZSIsImQzX3NlbGVjdGlvbl9kYXRhTm9kZSIsIl9fZGF0YV9fIiwiZDNfc2VsZWN0aW9uX2ZpbHRlciIsImQzX3NlbGVjdE1hdGNoZXMiLCJkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IiLCJjb21wYXJhdG9yIiwiZDNfc2VsZWN0aW9uX2VhY2giLCJncm91cCIsImQzX3NlbGVjdGlvbl9lbnRlciIsImQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZSIsImQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZSIsImVudGVyIiwiaTAiLCJqMCIsInVwZGF0ZSIsImQzX3NlbGVjdGlvbl9vbiIsImNhcHR1cmUiLCJvblJlbW92ZSIsIm9uQWRkIiwiZDNfYXJyYXkiLCJyZW1vdmVBbGwiLCJkM19zZWxlY3Rpb25fb25MaXN0ZW5lciIsImQzX3NlbGVjdGlvbl9vbkZpbHRlcnMiLCJkM19zZWxlY3Rpb25fb25GaWx0ZXIiLCJvIiwiZDNfZXZlbnRfZHJhZ1N1cHByZXNzIiwiZDNfZXZlbnRfZHJhZ0lkIiwiZDNfZXZlbnRfZHJhZ1NlbGVjdCIsInN1cHByZXNzQ2xpY2siLCJkM19tb3VzZVBvaW50Iiwic3ZnIiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsImQzX21vdXNlX2J1ZzQ0MDgzIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJjdG0iLCJnZXRTY3JlZW5DVE0iLCJmIiwieSIsIm1hdHJpeFRyYW5zZm9ybSIsImludmVyc2UiLCJkM19iZWhhdmlvcl9kcmFnVG91Y2hJZCIsImQzX3NnbiIsImQzX2Nyb3NzMmQiLCJkM19hY29zIiwiz4AiLCJhY29zIiwiZDNfYXNpbiIsImhhbGbPgCIsImFzaW4iLCJkM19zaW5oIiwiZXhwIiwiZDNfY29zaCIsImQzX3RhbmgiLCJkM19oYXZlcnNpbiIsInNpbiIsImQzX2NvbG9yIiwiZDNfaHNsIiwiaCIsImQzX3JnYl9wYXJzZSIsImQzX3JnYl9oc2wiLCJkM19oc2xfcmdiIiwibTEiLCJtMiIsInZ2Iiwicm91bmQiLCJkM19yZ2IiLCJkM19oY2wiLCJkM19sYWIiLCJkM19sYWJfaGNsIiwiZDNfcmdiX2xhYiIsInJnYiIsInIiLCJnIiwiZDNfaGNsX2xhYiIsImQzX3JhZGlhbnMiLCJkM19sYWJfcmdiIiwiZDNfbGFiX3h5eiIsImQzX2xhYl9YIiwiZDNfbGFiX1kiLCJkM19sYWJfWiIsImQzX3h5el9yZ2IiLCJhdGFuMiIsImQzX2RlZ3JlZXMiLCJzcXJ0IiwiZDNfeHl6X2xhYiIsInBvdyIsImQzX3JnYk51bWJlciIsImQzX3JnYlN0cmluZyIsImQzX3JnYl9oZXgiLCJtaW4iLCJmb3JtYXQiLCJoc2wiLCJjb2xvciIsImQzX3JnYl9wYXJzZU51bWJlciIsImQzX3JnYl9uYW1lcyIsImQzX3JnYl94eXoiLCJkM19mdW5jdG9yIiwiZDNfeGhyVHlwZSIsImQzX3hociIsInJlc3BvbmQiLCJyZXF1ZXN0IiwiZDNfeGhySGFzUmVzcG9uc2UiLCJYRG9tYWluUmVxdWVzdCIsIm9ucHJvZ3Jlc3MiLCJmb3JFYWNoIiwiYWNjZXB0IiwiYmVmb3Jlc2VuZCIsInJlYmluZCIsImQzX3hocl9maXhDYWxsYmFjayIsImQzX3RpbWVyIiwiZDNfdGltZXJfcXVldWVUYWlsIiwiZDNfdGltZXJfcXVldWVIZWFkIiwiZDNfdGltZXJfaW50ZXJ2YWwiLCJkM190aW1lcl90aW1lb3V0IiwiZDNfdGltZXJfZnJhbWUiLCJkM190aW1lcl9zdGVwIiwiZDNfdGltZXJfbWFyayIsImQzX3RpbWVyX3N3ZWVwIiwidDAiLCJ0MSIsIkluZmluaXR5IiwiZDNfZm9ybWF0X3ByZWNpc2lvbiIsImNlaWwiLCJMTjEwIiwiZDNfZm9ybWF0UHJlZml4IiwiYWJzIiwic3ltYm9sIiwiZDNfbG9jYWxlX251bWJlckZvcm1hdCIsImxvY2FsZSIsImxvY2FsZV9kZWNpbWFsIiwiZGVjaW1hbCIsImxvY2FsZV90aG91c2FuZHMiLCJ0aG91c2FuZHMiLCJsb2NhbGVfZ3JvdXBpbmciLCJncm91cGluZyIsImxvY2FsZV9jdXJyZW5jeSIsImN1cnJlbmN5IiwiZm9ybWF0R3JvdXAiLCJzdWJzdHJpbmciLCJzcGVjaWZpZXIiLCJkM19mb3JtYXRfcmUiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwiemZpbGwiLCJjb21tYSIsInByZWNpc2lvbiIsImludGVnZXIiLCJleHBvbmVudCIsImQzX2Zvcm1hdF90eXBlcyIsImQzX2Zvcm1hdF90eXBlRGVmYXVsdCIsInpjb21tYSIsImZ1bGxTdWZmaXgiLCJuZWdhdGl2ZSIsImZvcm1hdFByZWZpeCIsImxhc3RJbmRleE9mIiwiZDNfZGF0ZV91dGMiLCJVVEMiLCJkM190aW1lX2ludGVydmFsIiwibnVtYmVyIiwiZGF0ZSIsImQwIiwiZDEiLCJkM19kYXRlIiwicmFuZ2UiLCJkdCIsInRpbWVzIiwicmFuZ2VfdXRjIiwidXRjIiwiZmxvb3IiLCJkM190aW1lX2ludGVydmFsX3V0YyIsImQzX2xvY2FsZV90aW1lRm9ybWF0IiwiZDNfdGltZV9mb3JtYXQiLCJ0ZW1wbGF0ZSIsImQzX3RpbWVfZm9ybWF0UGFkcyIsImQzX3RpbWVfZm9ybWF0cyIsIkgiLCJNIiwiUyIsIkwiLCJaIiwiZDNfdGltZV9wYXJzZSIsImxvY2FsWiIsInNldEZ1bGxZZWFyIiwiVyIsImdldERheSIsIlUiLCJzZXRIb3VycyIsImQzX3RpbWVfcGFyc2VycyIsImQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2IiwiZDNfdGltZV9kYXlBYmJyZXZSZSIsImQzX3RpbWVfZGF5QWJicmV2TG9va3VwIiwiZDNfdGltZV9wYXJzZVdlZWtkYXkiLCJkM190aW1lX2RheVJlIiwiZDNfdGltZV9kYXlMb29rdXAiLCJkM190aW1lX3BhcnNlTW9udGhBYmJyZXYiLCJkM190aW1lX21vbnRoQWJicmV2UmUiLCJkM190aW1lX21vbnRoQWJicmV2TG9va3VwIiwiZDNfdGltZV9wYXJzZU1vbnRoIiwiZDNfdGltZV9tb250aFJlIiwiZDNfdGltZV9tb250aExvb2t1cCIsImQzX3RpbWVfcGFyc2VMb2NhbGVGdWxsIiwiZDNfdGltZV9wYXJzZUxvY2FsZURhdGUiLCJkM190aW1lX3BhcnNlTG9jYWxlVGltZSIsIlgiLCJkM190aW1lX3BhcnNlQW1QbSIsImQzX3RpbWVfcGVyaW9kTG9va3VwIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX2RheXMiLCJkYXlzIiwibG9jYWxlX3Nob3J0RGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsIm11bHRpIiwiZDNfdGltZV9mb3JtYXRNdWx0aSIsImQzX3RpbWVfZm9ybWF0UmUiLCJkM190aW1lX2Zvcm1hdExvb2t1cCIsIkEiLCJnZXRNb250aCIsIkIiLCJkM190aW1lX2Zvcm1hdFBhZCIsImdldERhdGUiLCJnZXRIb3VycyIsIkkiLCJkM190aW1lIiwiZGF5T2ZZZWFyIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJzdW5kYXlPZlllYXIiLCJtb25kYXlPZlllYXIiLCJnZXRGdWxsWWVhciIsIlkiLCJkM190aW1lX3pvbmUiLCIlIiwiZDNfdGltZV9wYXJzZURheSIsImQzX3RpbWVfcGFyc2VIb3VyMjQiLCJkM190aW1lX3BhcnNlRGF5T2ZZZWFyIiwiZDNfdGltZV9wYXJzZU1pbGxpc2Vjb25kcyIsImQzX3RpbWVfcGFyc2VNb250aE51bWJlciIsImQzX3RpbWVfcGFyc2VNaW51dGVzIiwiZDNfdGltZV9wYXJzZVNlY29uZHMiLCJkM190aW1lX3BhcnNlV2Vla051bWJlclN1bmRheSIsImQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyIiwiZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJkM190aW1lX3BhcnNlWWVhciIsImQzX3RpbWVfcGFyc2VGdWxsWWVhciIsImQzX3RpbWVfcGFyc2Vab25lIiwiZDNfdGltZV9wYXJzZUxpdGVyYWxQZXJjZW50IiwibmFtZXMiLCJkM190aW1lX251bWJlclJlIiwiZDNfdGltZV9leHBhbmRZZWFyIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ6cyIsInpoIiwiem0iLCJkM190aW1lX3BlcmNlbnRSZSIsImZvcm1hdHMiLCJkM19hZGRlciIsImQzX2FkZGVyU3VtIiwiYnYiLCJhdiIsImQzX2dlb19zdHJlYW1HZW9tZXRyeSIsImdlb21ldHJ5IiwiZDNfZ2VvX3N0cmVhbUdlb21ldHJ5VHlwZSIsImQzX2dlb19zdHJlYW1MaW5lIiwiY29vcmRpbmF0ZXMiLCJjbG9zZWQiLCJjb29yZGluYXRlIiwibGluZVN0YXJ0IiwibGluZUVuZCIsImQzX2dlb19zdHJlYW1Qb2x5Z29uIiwicG9seWdvblN0YXJ0IiwicG9seWdvbkVuZCIsImQzX2dlb19hcmVhUmluZ1N0YXJ0IiwibmV4dFBvaW50IiwizrsiLCLPhiIsImTOuyIsIs67MCIsInNkzrsiLCJhZM67IiwiY29zz4YiLCJzaW7PhiIsInNpbs+GMCIsInUiLCJjb3PPhjAiLCJkM19nZW9fYXJlYVJpbmdTdW0iLCLOuzAwIiwiz4YwMCIsImQzX2dlb19hcmVhIiwiZDNfZ2VvX2NhcnRlc2lhbiIsInNwaGVyaWNhbCIsImQzX2dlb19jYXJ0ZXNpYW5Eb3QiLCJkM19nZW9fY2FydGVzaWFuQ3Jvc3MiLCJkM19nZW9fY2FydGVzaWFuQWRkIiwiZDNfZ2VvX2NhcnRlc2lhblNjYWxlIiwidmVjdG9yIiwiZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZSIsImQzX2dlb19zcGhlcmljYWwiLCJjYXJ0ZXNpYW4iLCJkM19nZW9fc3BoZXJpY2FsRXF1YWwiLCLOtSIsImQzX2dlb19jZW50cm9pZFBvaW50IiwiZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVoiLCJkM19nZW9fY2VudHJvaWRXMCIsImQzX2dlb19jZW50cm9pZFgwIiwiZDNfZ2VvX2NlbnRyb2lkWTAiLCJkM19nZW9fY2VudHJvaWRaMCIsImQzX2dlb19jZW50cm9pZExpbmVTdGFydCIsInkwIiwiejAiLCJ4MCIsImQzX2dlb19jZW50cm9pZFcxIiwiZDNfZ2VvX2NlbnRyb2lkWDEiLCJkM19nZW9fY2VudHJvaWRZMSIsImQzX2dlb19jZW50cm9pZFoxIiwiZDNfZ2VvX2NlbnRyb2lkIiwiZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCIsImQzX2dlb19jZW50cm9pZFJpbmdTdGFydCIsImN4IiwiY3kiLCJjeiIsImQzX2dlb19jZW50cm9pZFgyIiwiZDNfZ2VvX2NlbnRyb2lkWTIiLCJkM19nZW9fY2VudHJvaWRaMiIsImQzX2dlb19jb21wb3NlIiwiY29tcG9zZSIsImQzX3RydWUiLCJkM19nZW9fY2xpcFBvbHlnb24iLCJzZWdtZW50cyIsImNsaXBTdGFydEluc2lkZSIsImludGVycG9sYXRlIiwic3ViamVjdCIsImNsaXAiLCJzZWdtZW50IiwicDAiLCJwMSIsImQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbiIsImQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhciIsImVudHJ5IiwicG9pbnRzIiwiaXNTdWJqZWN0IiwiYXJyYXkiLCJvdGhlciIsImQzX2dlb19jbGlwIiwicG9pbnRWaXNpYmxlIiwiY2xpcExpbmUiLCJjbGlwU3RhcnQiLCJyb3RhdGUiLCJwb2ludExpbmUiLCJsaW5lIiwicG9pbnRSaW5nIiwicmluZyIsInJpbmdMaXN0ZW5lciIsInJpbmdTdGFydCIsInJpbmdFbmQiLCJjbGVhbiIsInJpbmdTZWdtZW50cyIsImJ1ZmZlciIsInBvbHlnb24iLCJwb2x5Z29uU3RhcnRlZCIsImQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEiLCJyb3RhdGVkQ2xpcFN0YXJ0IiwiZDNfZ2VvX3BvaW50SW5Qb2x5Z29uIiwiZDNfZ2VvX2NsaXBTb3J0Iiwic3BoZXJlIiwiZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lciIsImxpbmVzIiwicmVqb2luIiwiZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5MaW5lIiwiz4YwIiwic867MCIsIs67MSIsIs+GMSIsInPOuzEiLCJkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVyc2VjdCIsImNvc8+GMSIsInNpbs67MF/OuzEiLCJhdGFuIiwiZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSIsImZyb20iLCJkaXJlY3Rpb24iLCJtZXJpZGlhbiIsInBhcmFsbGVsIiwibWVyaWRpYW5Ob3JtYWwiLCJwb2xhckFuZ2xlIiwid2luZGluZyIsInBvaW50MCIsImFudGltZXJpZGlhbiIsIs+EIiwiYXJjIiwiaW50ZXJzZWN0aW9uIiwiz4ZhcmMiLCJkM19nZW9fY2xpcENpcmNsZSIsInJhZGl1cyIsImNyIiwiYzAiLCJ2MCIsInYwMCIsInBvaW50MiIsInBvaW50MSIsInNtYWxsUmFkaXVzIiwiaW50ZXJzZWN0Iiwibm90SGVtaXNwaGVyZSIsInR3byIsInBhIiwicGIiLCJuMSIsIm4yIiwibjJuMiIsIm4xbjIiLCJkZXRlcm1pbmFudCIsImMxIiwiYzIiLCJuMXhuMiIsInV1IiwidDIiLCJxIiwizrTOuyIsInBvbGFyIiwicTEiLCJkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUiLCJkM19nZW9tX2NsaXBMaW5lIiwieDEiLCJ5MSIsImF4IiwiYXkiLCJieCIsImJ5IiwiZHgiLCJkeSIsImQzX2dlb19jbGlwRXh0ZW50IiwiY29ybmVyIiwiY29tcGFyZVBvaW50cyIsImNhIiwiY2IiLCJpbnNpZGVQb2x5Z29uIiwid24iLCJhMSIsImxpbmVQb2ludCIsInZfIiwieF8iLCJ5XyIsInhfXyIsInlfXyIsInZfXyIsImJ1ZmZlckxpc3RlbmVyIiwiZDNfZ2VvX2NsaXBFeHRlbnRNQVgiLCJsaXN0ZW5lcl8iLCJpbnNpZGUiLCJkM19nZW9fY29uaWMiLCJwcm9qZWN0QXQiLCJkM19nZW9fcHJvamVjdGlvbk11dGF0b3IiLCJwYXJhbGxlbHMiLCJkM19nZW9fY29uaWNFcXVhbEFyZWEiLCLPgSIsIkMiLCLPgTAiLCLPgTBfeSIsImQzX2dlb19wYXRoQXJlYVJpbmdTdGFydCIsImQzX2dlb19wYXRoQXJlYVBvbHlnb24iLCJ4MDAiLCJ5MDAiLCJkM19nZW9fcGF0aEFyZWEiLCJkM19nZW9fcGF0aEJvdW5kc1BvaW50IiwiZDNfZ2VvX3BhdGhCb3VuZHNYMCIsImQzX2dlb19wYXRoQm91bmRzWDEiLCJkM19nZW9fcGF0aEJvdW5kc1kwIiwiZDNfZ2VvX3BhdGhCb3VuZHNZMSIsImQzX2dlb19wYXRoQnVmZmVyIiwicG9pbnRDaXJjbGUiLCJwb2ludExpbmVTdGFydCIsInN0cmVhbSIsImxpbmVFbmRQb2x5Z29uIiwiZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUiLCJwb2ludFJhZGl1cyIsImQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCIsImQzX2dlb19wYXRoQ2VudHJvaWRMaW5lU3RhcnQiLCJkM19nZW9fcGF0aENlbnRyb2lkIiwiZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVFbmQiLCJkM19nZW9fcGF0aENlbnRyb2lkUmluZ1N0YXJ0IiwiZDNfZ2VvX3BhdGhDb250ZXh0IiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2VQYXRoIiwiZDNfZ2VvX3Jlc2FtcGxlIiwicHJvamVjdCIsInJlc2FtcGxlIiwicmVzYW1wbGVSZWN1cnNpdmUiLCJyZXNhbXBsZU5vbmUiLCJkM19nZW9fdHJhbnNmb3JtUG9pbnQiLCJyZXNhbXBsZUxpbmVUbyIsImEwIiwiYjAiLCJyaW5nUG9pbnQiLCJhMDAiLCJiMDAiLCJjMDAiLCJiMSIsImQyIiwizrQyIiwiz4YyIiwizrsyIiwieDIiLCJ5MiIsImR4MiIsImR5MiIsImR6IiwiY29zTWluRGlzdGFuY2UiLCJkM19nZW9fcGF0aFByb2plY3RTdHJlYW0iLCJkM19nZW9fcHJvamVjdGlvblJhZGlhbnMiLCJkM19nZW9fdHJhbnNmb3JtIiwiZDNfZ2VvX3Byb2plY3Rpb24iLCJwcm9qZWN0aW9uIiwicHJvamVjdFJvdGF0ZSIsIs60eCIsIs60eSIsImQzX2dlb19yb3RhdGlvbiIsIs60z4YiLCLOtM6zIiwiY2VudGVyIiwiaW52YWxpZGF0ZSIsInZhbGlkIiwicHJvamVjdFJlc2FtcGxlIiwicHJlY2xpcCIsImQzX2dlb19jbGlwQW50aW1lcmlkaWFuIiwicG9zdGNsaXAiLCJjbGlwQW5nbGUiLCJjbGlwRXh0ZW50Iiwib3V0cHV0IiwidHJhbnNsYXRlIiwiZDNfZ2VvX2VxdWlyZWN0YW5ndWxhciIsImQzX2dlb19pZGVudGl0eVJvdGF0aW9uIiwiZDNfZ2VvX3JvdGF0aW9uzrsiLCJkM19nZW9fcm90YXRpb27Phs6zIiwiZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67Iiwicm90YXRpb24iLCJjb3POtM+GIiwic2luzrTPhiIsImNvc860zrMiLCJzaW7OtM6zIiwic3IiLCJkM19nZW9fY2lyY2xlQW5nbGUiLCJhbmdsZSIsImQzX2dlb19ncmF0aWN1bGVYIiwiZDNfZ2VvX2dyYXRpY3VsZVkiLCJkM19zb3VyY2UiLCJkM190YXJnZXQiLCJkM19nZW9faW50ZXJwb2xhdGUiLCJjeTAiLCJzeTAiLCJjeTEiLCJzeTEiLCJreDAiLCJreTAiLCJreDEiLCJreTEiLCJkaXN0YW5jZSIsImQzX2dlb19sZW5ndGhMaW5lU3RhcnQiLCJjb3POlM67IiwiZDNfZ2VvX2xlbmd0aFN1bSIsImQzX2dlb19sZW5ndGgiLCJkM19nZW9fYXppbXV0aGFsIiwiYXppbXV0aGFsIiwiY29zzrsiLCJzaW5jIiwiY29zYyIsImQzX2dlb19jb25pY0NvbmZvcm1hbCIsIkYiLCJ0YW4iLCJkM19nZW9fbWVyY2F0b3IiLCJkM19nZW9fY29uaWNFcXVpZGlzdGFudCIsIkciLCJkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uIiwiY2xpcEF1dG8iLCJkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yIiwiZDNfZ2VvbV9wb2ludFgiLCJkM19nZW9tX3BvaW50WSIsImQzX2dlb21faHVsbFVwcGVyIiwiaHVsbCIsImhzIiwiZDNfZ2VvbV9odWxsT3JkZXIiLCJkM19nZW9tX3BvbHlnb25JbnNpZGUiLCJkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QiLCJ4MyIsIngyMSIsIng0MyIsInkzIiwieTIxIiwieTQzIiwidWEiLCJkM19nZW9tX3BvbHlnb25DbG9zZWQiLCJkM19nZW9tX3Zvcm9ub2lCZWFjaCIsImQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZSIsImVkZ2UiLCJzaXRlIiwiY2lyY2xlIiwiZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2giLCJiZWFjaCIsImQzX2dlb21fdm9yb25vaUJlYWNoUG9vbCIsImQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoIiwiZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlIiwiZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyIsImQzX2dlb21fdm9yb25vaVJlbW92ZUJlYWNoIiwidmVydGV4IiwicHJldmlvdXMiLCJQIiwiTiIsImRpc2FwcGVhcmluZyIsImxBcmMiLCJyQXJjIiwiaUFyYyIsIm5BcmNzIiwiZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZCIsImQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UiLCJkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUiLCJkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaCIsImR4bCIsImR4ciIsImRpcmVjdHJpeCIsImQzX2dlb21fdm9yb25vaUxlZnRCcmVha1BvaW50IiwiZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50IiwiUiIsIm5ld0FyYyIsImxTaXRlIiwiclNpdGUiLCJoYiIsImhjIiwicmZvY3giLCJyZm9jeSIsInBieTIiLCJsZm9jeCIsImxmb2N5IiwicGxieTIiLCJobCIsImFieTIiLCJkM19nZW9tX3Zvcm9ub2lDZWxsIiwiZWRnZXMiLCJkM19nZW9tX3Zvcm9ub2lDbG9zZUNlbGxzIiwiZXh0ZW50IiwiY2VsbCIsImlIYWxmRWRnZSIsImhhbGZFZGdlcyIsIm5IYWxmRWRnZXMiLCJjZWxscyIsImQzX2dlb21fdm9yb25vaUNlbGxzIiwiaUNlbGwiLCJwcmVwYXJlIiwiZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UiLCJkM19nZW9tX3Zvcm9ub2lDcmVhdGVCb3JkZXJFZGdlIiwiZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlciIsImQzX2dlb21fdm9yb25vaUNpcmNsZSIsImNTaXRlIiwizrUyIiwiaGEiLCJkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sIiwiZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcyIsImQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlIiwiZDNfZ2VvbV92b3Jvbm9pQ2xpcEVkZ2VzIiwiZDNfZ2VvbV92b3Jvbm9pRWRnZXMiLCJkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZSIsInZiIiwiZm0iLCJmYiIsInZhIiwibHgiLCJseSIsInJ4IiwicnkiLCJmeSIsImQzX2dlb21fdm9yb25vaUVkZ2UiLCJkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUiLCJkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQiLCJ0cmVlIiwiZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCIsImQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QiLCJkM19nZW9tX3Zvcm9ub2kiLCJzaXRlcyIsImJib3giLCJkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlciIsImRpYWdyYW0iLCJkM19nZW9tX3Zvcm9ub2lUcmlhbmdsZUFyZWEiLCJkM19nZW9tX3F1YWR0cmVlQ29tcGF0WCIsImQzX2dlb21fcXVhZHRyZWVDb21wYXRZIiwiZDNfZ2VvbV9xdWFkdHJlZU5vZGUiLCJsZWFmIiwiZDNfZ2VvbV9xdWFkdHJlZVZpc2l0Iiwic3giLCJzeSIsImQzX2dlb21fcXVhZHRyZWVGaW5kIiwiY2xvc2VzdFBvaW50IiwibWluRGlzdGFuY2UyIiwiZGlzdGFuY2UyIiwieG0iLCJ5bSIsImJlbG93IiwiZDNfaW50ZXJwb2xhdGVSZ2IiLCJhciIsImFnIiwiYWIiLCJiciIsImJnIiwiYmIiLCJkM19pbnRlcnBvbGF0ZU9iamVjdCIsImQzX2ludGVycG9sYXRlIiwiZDNfaW50ZXJwb2xhdGVOdW1iZXIiLCJkM19pbnRlcnBvbGF0ZVN0cmluZyIsImFtIiwiYm0iLCJicyIsImJpIiwiZDNfaW50ZXJwb2xhdGVfbnVtYmVyQSIsImQzX2ludGVycG9sYXRlX251bWJlckIiLCJpbnRlcnBvbGF0b3JzIiwiZDNfaW50ZXJwb2xhdGVBcnJheSIsIm5hIiwibmIiLCJuMCIsImQzX2Vhc2VfY2xhbXAiLCJkM19lYXNlX3JldmVyc2UiLCJkM19lYXNlX3JlZmxlY3QiLCJkM19lYXNlX3F1YWQiLCJkM19lYXNlX2N1YmljIiwiZDNfZWFzZV9jdWJpY0luT3V0IiwidDMiLCJkM19lYXNlX3BvbHkiLCJkM19lYXNlX3NpbiIsImQzX2Vhc2VfZXhwIiwiZDNfZWFzZV9jaXJjbGUiLCJkM19lYXNlX2VsYXN0aWMiLCJkM19lYXNlX2JhY2siLCJkM19lYXNlX2JvdW5jZSIsImQzX2ludGVycG9sYXRlSGNsIiwiaGNsIiwiYWgiLCJhYyIsImFsIiwiYmgiLCJiYyIsImJsIiwiZDNfaW50ZXJwb2xhdGVIc2wiLCJhcyIsImQzX2ludGVycG9sYXRlTGFiIiwibGFiIiwiYWEiLCJiYSIsImQzX2ludGVycG9sYXRlUm91bmQiLCJkM190cmFuc2Zvcm0iLCJyMCIsInIxIiwia3giLCJkM190cmFuc2Zvcm1Ob3JtYWxpemUiLCJreiIsImQzX3RyYW5zZm9ybURvdCIsImt5IiwiZDNfdHJhbnNmb3JtQ29tYmluZSIsInNrZXciLCJkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcCIsImQzX2ludGVycG9sYXRlVHJhbnNsYXRlIiwidGEiLCJ0YiIsImQzX2ludGVycG9sYXRlUm90YXRlIiwicmEiLCJyYiIsImQzX2ludGVycG9sYXRlU2tldyIsIndhIiwid2IiLCJkM19pbnRlcnBvbGF0ZVNjYWxlIiwia2EiLCJrYiIsImQzX2ludGVycG9sYXRlVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiZDNfdW5pbnRlcnBvbGF0ZU51bWJlciIsImQzX3VuaW50ZXJwb2xhdGVDbGFtcCIsImQzX2xheW91dF9idW5kbGVQYXRoIiwibGluayIsImxjYSIsImQzX2xheW91dF9idW5kbGVMZWFzdENvbW1vbkFuY2VzdG9yIiwiZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyIsImFuY2VzdG9ycyIsImFOb2RlcyIsImJOb2RlcyIsImFOb2RlIiwiYk5vZGUiLCJzaGFyZWROb2RlIiwiZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0IiwiZml4ZWQiLCJkM19sYXlvdXRfZm9yY2VEcmFnZW5kIiwiZDNfbGF5b3V0X2ZvcmNlTW91c2VvdmVyIiwicHgiLCJweSIsImQzX2xheW91dF9mb3JjZU1vdXNlb3V0IiwiZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZSIsInF1YWQiLCJhbHBoYSIsImNoYXJnZXMiLCJjaGFyZ2UiLCJwb2ludENoYXJnZSIsImQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQiLCJoaWVyYXJjaHkiLCJsaW5rcyIsImQzX2xheW91dF9oaWVyYXJjaHlMaW5rcyIsImQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZSIsImQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyIiwibm9kZXMyIiwiZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuIiwiZDNfbGF5b3V0X2hpZXJhcmNoeVZhbHVlIiwiZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQiLCJjaGlsZCIsImQzX2xheW91dF9zdGFja1giLCJkM19sYXlvdXRfc3RhY2tZIiwiZDNfbGF5b3V0X3N0YWNrT3V0IiwiZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0IiwiZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVybyIsImQzX2xheW91dF9zdGFja01heEluZGV4IiwiZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtIiwicmVkdWNlIiwiZDNfbGF5b3V0X3N0YWNrU3VtIiwiZDNfbGF5b3V0X2hpc3RvZ3JhbUJpblN0dXJnZXMiLCJkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQiLCJMTjIiLCJkM19sYXlvdXRfaGlzdG9ncmFtUmFuZ2UiLCJkM19sYXlvdXRfcGFja1NvcnQiLCJkM19sYXlvdXRfcGFja0luc2VydCIsIl9wYWNrX25leHQiLCJfcGFja19wcmV2IiwiZDNfbGF5b3V0X3BhY2tTcGxpY2UiLCJkM19sYXlvdXRfcGFja0ludGVyc2VjdHMiLCJkciIsImQzX2xheW91dF9wYWNrU2libGluZ3MiLCJib3VuZCIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJkM19sYXlvdXRfcGFja0xpbmsiLCJkM19sYXlvdXRfcGFja1BsYWNlIiwiaXNlY3QiLCJzMSIsInMyIiwiZDNfbGF5b3V0X3BhY2tVbmxpbmsiLCJkM19sYXlvdXRfcGFja1RyYW5zZm9ybSIsImRiIiwiZGEiLCJkYyIsImQzX2xheW91dF90cmVlU2VwYXJhdGlvbiIsImQzX2xheW91dF90cmVlTGVmdCIsImQzX2xheW91dF90cmVlUmlnaHQiLCJkM19sYXlvdXRfdHJlZU1vdmUiLCJ3bSIsIndwIiwiY2hhbmdlIiwiZDNfbGF5b3V0X3RyZWVTaGlmdCIsImQzX2xheW91dF90cmVlQW5jZXN0b3IiLCJ2aW0iLCJhbmNlc3RvciIsImQzX2xheW91dF9jbHVzdGVyWSIsImQzX2xheW91dF9jbHVzdGVyWCIsImQzX2xheW91dF9jbHVzdGVyTGVmdCIsImQzX2xheW91dF9jbHVzdGVyUmlnaHQiLCJkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwiLCJkM19sYXlvdXRfdHJlZW1hcFBhZCIsImQzX3NjYWxlRXh0ZW50IiwiZG9tYWluIiwiZDNfc2NhbGVSYW5nZSIsInJhbmdlRXh0ZW50IiwiZDNfc2NhbGVfYmlsaW5lYXIiLCJ1bmludGVycG9sYXRlIiwiZDNfc2NhbGVfbmljZSIsIm5pY2UiLCJpMSIsImQzX3NjYWxlX25pY2VTdGVwIiwiZDNfc2NhbGVfbmljZUlkZW50aXR5IiwiZDNfc2NhbGVfcG9seWxpbmVhciIsImJpc2VjdCIsImQzX3NjYWxlX2xpbmVhciIsImNsYW1wIiwicmVzY2FsZSIsIk51bWJlciIsInJhbmdlUm91bmQiLCJ0aWNrcyIsImQzX3NjYWxlX2xpbmVhclRpY2tzIiwidGlja0Zvcm1hdCIsImQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQiLCJkM19zY2FsZV9saW5lYXJOaWNlIiwiZDNfc2NhbGVfbGluZWFyUmViaW5kIiwiZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlIiwic3BhbiIsImQzX3NjYWxlX2xpbmVhclByZWNpc2lvbiIsImQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbiIsImQzX3NjYWxlX2xpbmVhckZvcm1hdFNpZ25pZmljYW50IiwiZDNfc2NhbGVfbG9nIiwicG9zaXRpdmUiLCJuaWNlZCIsImQzX3NjYWxlX2xvZ05pY2VOZWdhdGl2ZSIsImQzX3NjYWxlX2xvZ0Zvcm1hdCIsImQzX3NjYWxlX3BvdyIsInBvd3AiLCJkM19zY2FsZV9wb3dQb3ciLCJwb3diIiwiZDNfc2NhbGVfb3JkaW5hbCIsInJhbmdlciIsInN0ZXBzIiwicmFuZ2VCYW5kIiwieGkiLCJyYW5nZVBvaW50cyIsInJhbmdlUm91bmRQb2ludHMiLCJyYW5nZUJhbmRzIiwib3V0ZXJQYWRkaW5nIiwicmFuZ2VSb3VuZEJhbmRzIiwiZDNfc2NhbGVfcXVhbnRpbGUiLCJ0aHJlc2hvbGRzIiwicXVhbnRpbGUiLCJxdWFudGlsZXMiLCJpbnZlcnRFeHRlbnQiLCJkM19zY2FsZV9xdWFudGl6ZSIsImQzX3NjYWxlX3RocmVzaG9sZCIsImQzX3NjYWxlX2lkZW50aXR5IiwiaWRlbnRpdHkiLCJkM196ZXJvIiwiZDNfc3ZnX2FyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJkM19zdmdfYXJjT3V0ZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImQzX3N2Z19hcmNTdGFydEFuZ2xlIiwic3RhcnRBbmdsZSIsImQzX3N2Z19hcmNFbmRBbmdsZSIsImVuZEFuZ2xlIiwiZDNfc3ZnX2FyY1BhZEFuZ2xlIiwicGFkQW5nbGUiLCJkM19zdmdfYXJjU3dlZXAiLCJkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMiLCJyYyIsImN3IiwieDAxIiwieTAxIiwib3giLCJveSIsIkQiLCJjeDAiLCJjeDEiLCJkeDAiLCJkeTAiLCJkeDEiLCJkeTEiLCJkM19zdmdfbGluZSIsInRlbnNpb24iLCJkZWZpbmVkIiwiZDNfc3ZnX2xpbmVMaW5lYXIiLCJpbnRlcnBvbGF0ZUtleSIsImQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycyIsImQzX3N2Z19saW5lTGluZWFyQ2xvc2VkIiwiZDNfc3ZnX2xpbmVTdGVwIiwicGF0aCIsImQzX3N2Z19saW5lU3RlcEJlZm9yZSIsImQzX3N2Z19saW5lU3RlcEFmdGVyIiwiZDNfc3ZnX2xpbmVDYXJkaW5hbE9wZW4iLCJkM19zdmdfbGluZUhlcm1pdGUiLCJkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMiLCJkM19zdmdfbGluZUNhcmRpbmFsQ2xvc2VkIiwiZDNfc3ZnX2xpbmVDYXJkaW5hbCIsInRhbmdlbnRzIiwicGkiLCJscCIsInAyIiwiZDNfc3ZnX2xpbmVCYXNpcyIsImQzX3N2Z19saW5lRG90NCIsImQzX3N2Z19saW5lQmFzaXNCZXppZXIzIiwiZDNfc3ZnX2xpbmVCYXNpc0JlemllciIsImQzX3N2Z19saW5lQmFzaXNPcGVuIiwiZDNfc3ZnX2xpbmVCYXNpc0Nsb3NlZCIsImQzX3N2Z19saW5lQnVuZGxlIiwiZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEiLCJkM19zdmdfbGluZUJhc2lzQmV6aWVyMiIsImQzX3N2Z19saW5lU2xvcGUiLCJkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzIiwiZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzIiwiZDNfc3ZnX2xpbmVNb25vdG9uZSIsImQzX3N2Z19saW5lUmFkaWFsIiwiZDNfc3ZnX2FyZWEiLCJhcmVhIiwicG9pbnRzMSIsImludGVycG9sYXRlUmV2ZXJzZSIsInBvaW50czAiLCJmeDAiLCJmeTAiLCJmeDEiLCJmeTEiLCJkM19zdmdfY2hvcmRSYWRpdXMiLCJkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uIiwiZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbiIsImQzX3N2Z19zeW1ib2xTaXplIiwiZDNfc3ZnX3N5bWJvbFR5cGUiLCJkM19zdmdfc3ltYm9sQ2lyY2xlIiwiZDNfc2VsZWN0aW9uX2ludGVycnVwdE5TIiwiYWN0aXZlSWQiLCJpbnRlcnJ1cHQiLCJkM190cmFuc2l0aW9uIiwiZDNfdHJhbnNpdGlvblByb3RvdHlwZSIsImQzX3RyYW5zaXRpb25fdHdlZW4iLCJkM190cmFuc2l0aW9uX3RleHQiLCJkM190cmFuc2l0aW9uTmFtZXNwYWNlIiwiZDNfdHJhbnNpdGlvbk5vZGUiLCJpbmhlcml0Iiwic2NoZWR1bGUiLCJlbGFwc2VkIiwidHJhbnNpdGlvbiIsImNhbmNlbElkIiwiY2FuY2VsIiwiZWFzZSIsImQzX3N2Z19heGlzWCIsImQzX3N2Z19heGlzWSIsImQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlIiwidG9JU09TdHJpbmciLCJkM190aW1lX3NjYWxlIiwibWV0aG9kcyIsInRpY2tNZXRob2QiLCJkM190aW1lX3NjYWxlU3RlcHMiLCJ5ZWFyIiwiZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcyIsImQzX3RpbWVfc2NhbGVEYXRlIiwic2tpcHBlZCIsImQzX2pzb24iLCJkM19odG1sIiwiZDNfZG9jdW1lbnQiLCJjcmVhdGVSYW5nZSIsInNlbGVjdE5vZGUiLCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiLCJkM19hcnJheVNsaWNlIiwiZDNfZWxlbWVudF9wcm90b3R5cGUiLCJFbGVtZW50IiwiZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGUiLCJkM19lbGVtZW50X3NldEF0dHJpYnV0ZU5TIiwiZDNfc3R5bGVfcHJvdG90eXBlIiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsImQzX3N0eWxlX3NldFByb3BlcnR5IiwiYXNjZW5kaW5nIiwiZGVzY2VuZGluZyIsInN1bSIsIm1lYW4iLCJtZWRpYW4iLCJudW1iZXJzIiwidmFyaWFuY2UiLCJkZXZpYXRpb24iLCJkM19iaXNlY3QiLCJiaXNlY3RMZWZ0IiwiYmlzZWN0UmlnaHQiLCJiaXNlY3RvciIsInNodWZmbGUiLCJwZXJtdXRlIiwiaW5kZXhlcyIsInBlcm11dGVzIiwicGFpcnMiLCJ0cmFuc3Bvc2UiLCJtYXRyaXgiLCJyb3ciLCJ6aXAiLCJlbnRyaWVzIiwiYXJyYXlzIiwibWVyZ2VkIiwibmVzdCIsIm1hcFR5cGUiLCJyb2xsdXAiLCJzb3J0VmFsdWVzIiwia2V5VmFsdWUiLCJ2YWx1ZXNCeUtleSIsInNvcnRLZXkiLCJzb3J0S2V5cyIsImtleU1hcCIsImJlaGF2aW9yIiwiZDNfcmVxdW90ZV9yZSIsIl9fcHJvdG9fXyIsInByb3BlcnR5IiwicXVlcnlTZWxlY3RvciIsImQzX3NlbGVjdE1hdGNoZXIiLCJzdWJncm91cCIsInN1Ym5vZGUiLCJzdWJncm91cHMiLCJzZWxlY3RBbGwiLCJkM19uc1ByZWZpeCIsInhodG1sIiwieGxpbmsiLCJ4bWxucyIsImdldEF0dHJpYnV0ZU5TIiwiY2xhc3NlZCIsImdyb3VwRGF0YSIsIm5vZGVEYXRhIiwidXBkYXRlTm9kZXMiLCJlbnRlck5vZGVzIiwiZXhpdE5vZGVzIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJleGl0IiwiZGF0dW0iLCJ1cGdyb3VwIiwibW91c2UiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b3VjaCIsImRyYWciLCJtb3VzZWRvd24iLCJ0b3VjaHN0YXJ0IiwiZHJhZ3N0YXJ0IiwibW92ZSIsIm1vdmVkIiwicG9zaXRpb24xIiwiZHJhZ0lkIiwicG9zaXRpb24wIiwiZHJhZ2dlZCIsImRyYWdPZmZzZXQiLCJlbmRlZCIsImRyYWdTdWJqZWN0IiwiZHJhZ05hbWUiLCJkcmFnUmVzdG9yZSIsImNvcnJlc3BvbmRpbmdFbGVtZW50Iiwib3JpZ2luIiwiz4TOtSIsIlNRUlQyIiwiz4EyIiwiz4E0IiwiaW50ZXJwb2xhdGVab29tIiwidXgwIiwidXkwIiwidzAiLCJ1eDEiLCJ1eTEiLCJ3MSIsImNvc2hyMCIsIm1vdXNlZG93bmVkIiwiZDNfYmVoYXZpb3Jfem9vbVdoZWVsIiwibW91c2V3aGVlbGVkIiwiZGJsY2xpY2tlZCIsInRvdWNoc3RhcnRlZCIsInNjYWxlVG8iLCJzY2FsZUV4dGVudCIsInRyYW5zbGF0ZVRvIiwiem9vbVRvIiwiX19jaGFydF9fIiwiY2VudGVyMCIsInpvb21zdGFydGVkIiwiem9vbWluZyIsInpvb21lZCIsInpvb21lbmRlZCIsImxvY2F0aW9uMCIsIm1vdXNlbW92ZSIsIm1vdXNldXAiLCJkM19zZWxlY3Rpb25faW50ZXJydXB0IiwicmVsb2NhdGUiLCJzY2FsZTAiLCJsb2NhdGlvbnMwIiwic3RhcnRlZCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwiY2hhbmdlZCIsInRvdWNodGltZSIsImRpc3RhbmNlMCIsImwwIiwibDEiLCJkaXN0YW5jZTEiLCJzY2FsZTEiLCJ6b29tTmFtZSIsIm1vdXNld2hlZWxUaW1lciIsInRyYW5zbGF0ZTAiLCJkM19iZWhhdmlvcl96b29tRGVsdGEiLCJkM19iZWhhdmlvcl96b29tSW5maW5pdHkiLCJkZWx0YVkiLCJkZWx0YU1vZGUiLCJ3aGVlbERlbHRhIiwidmlldzEiLCJkM190cmFuc2l0aW9uSW5oZXJpdElkIiwiZDNfaHNsUHJvdG90eXBlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJkM19oY2xQcm90b3R5cGUiLCJkM19sYWJfSyIsImQzX2xhYlByb3RvdHlwZSIsImQzX3JnYlByb3RvdHlwZSIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiZnVuY3RvciIsImRzdiIsImRlbGltaXRlciIsInR5cGVkUmVzcG9uc2UiLCJmb3JtYXRSb3ciLCJmb3JtYXRWYWx1ZSIsInJlRm9ybWF0IiwiZGVsaW1pdGVyQ29kZSIsInBhcnNlUm93cyIsInN0cmluZ2lmeSIsIkVPRiIsImVvbCIsIkVPTCIsInJvd3MiLCJmb3JtYXRSb3dzIiwiZmllbGRTZXQiLCJmaWVsZHMiLCJmaWVsZCIsImNzdiIsInRzdiIsImZsdXNoIiwiZDNfZm9ybWF0UHJlZml4ZXMiLCJ0b1ByZWNpc2lvbiIsInRvRXhwb25lbnRpYWwiLCJ0b0ZpeGVkIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0RheSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VGltZSIsInZhbHVlT2YiLCJzZXREYXRlIiwiZDNfdGltZV9wcm90b3R5cGUiLCJzZXRVVENEYXRlIiwic2V0RGF5Iiwic2V0VVRDRGF5Iiwic2V0VVRDRnVsbFllYXIiLCJzZXRVVENIb3VycyIsInNldE1pbGxpc2Vjb25kcyIsInNldFVUQ01pbGxpc2Vjb25kcyIsInNldE1pbnV0ZXMiLCJzZXRVVENNaW51dGVzIiwic2V0TW9udGgiLCJzZXRVVENNb250aCIsInNldFNlY29uZHMiLCJzZXRVVENTZWNvbmRzIiwic2V0VGltZSIsImRheSIsInllYXJzIiwid2VlayIsInN1bmRheSIsIndlZWtzIiwid2Vla09mWWVhciIsIi0iLCJudW1iZXJGb3JtYXQiLCJ0aW1lRm9ybWF0IiwiZDNfbG9jYWxlX2VuVVMiLCJnZW8iLCJkM19hZGRlclRlbXAiLCJkM19nZW9fc3RyZWFtT2JqZWN0VHlwZSIsIkZlYXR1cmUiLCJmZWF0dXJlIiwiRmVhdHVyZUNvbGxlY3Rpb24iLCJmZWF0dXJlcyIsIlNwaGVyZSIsIlBvaW50IiwiTXVsdGlQb2ludCIsIkxpbmVTdHJpbmciLCJNdWx0aUxpbmVTdHJpbmciLCJQb2x5Z29uIiwiTXVsdGlQb2x5Z29uIiwiR2VvbWV0cnlDb2xsZWN0aW9uIiwiZ2VvbWV0cmllcyIsImQzX2dlb19hcmVhU3VtIiwiYm91bmRzIiwicmFuZ2VzIiwibm9ybWFsIiwiZXF1YXRvcmlhbCIsImluZmxlY3Rpb24iLCLOu18iLCLOu2kiLCLPhmkiLCJkzrtTdW0iLCLOu19fIiwiz4ZfXyIsImNvbXBhcmVSYW5nZXMiLCJ3aXRoaW5SYW5nZSIsImJlc3QiLCJjZW50cm9pZCIsImNvbmljRXF1YWxBcmVhIiwiYWxiZXJzIiwiYWxiZXJzVXNhIiwibG93ZXI0OFBvaW50IiwiYWxhc2thUG9pbnQiLCJoYXdhaWlQb2ludCIsImxvd2VyNDgiLCJhbGFza2EiLCJoYXdhaWkiLCJwb2ludFN0cmVhbSIsImxvd2VyNDhTdHJlYW0iLCJhbGFza2FTdHJlYW0iLCJoYXdhaWlTdHJlYW0iLCJkM19nZW9fcGF0aEFyZWFTdW0iLCJkM19nZW9fcGF0aEJvdW5kcyIsImNvbnRleHRTdHJlYW0iLCJjYWNoZVN0cmVhbSIsInByb2plY3RTdHJlYW0iLCJwcm9qZWN0aW9uTXV0YXRvciIsImVxdWlyZWN0YW5ndWxhciIsIs6UzrsiLCJzaW7OlM67Iiwic2luz4YxIiwiZ3JhdGljdWxlIiwiWDAiLCJEWCIsIlgxIiwiWTAiLCJEWSIsIlkxIiwib3V0bGluZSIsIm1ham9yRXh0ZW50IiwibWlub3JFeHRlbnQiLCJtYWpvclN0ZXAiLCJtaW5vclN0ZXAiLCJncmVhdEFyYyIsInNvdXJjZV8iLCJ0YXJnZXRfIiwiZDNfZ2VvX2F6aW11dGhhbEVxdWFsQXJlYSIsImNvc867Y29zz4YiLCJhemltdXRoYWxFcXVhbEFyZWEiLCJkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQiLCJhemltdXRoYWxFcXVpZGlzdGFudCIsImNvbmljQ29uZm9ybWFsIiwiY29uaWNFcXVpZGlzdGFudCIsImQzX2dlb19nbm9tb25pYyIsImdub21vbmljIiwibWVyY2F0b3IiLCJkM19nZW9fb3J0aG9ncmFwaGljIiwib3J0aG9ncmFwaGljIiwiZDNfZ2VvX3N0ZXJlb2dyYXBoaWMiLCJzdGVyZW9ncmFwaGljIiwidHJhbnN2ZXJzZU1lcmNhdG9yIiwiZ2VvbSIsInZlcnRpY2VzIiwiZmxpcHBlZFBvaW50cyIsInVwcGVyIiwibG93ZXIiLCJza2lwTGVmdCIsInNraXBSaWdodCIsImQzX2dlb21fcG9seWdvblByb3RvdHlwZSIsImdyYW5kcGEiLCJ1bmNsZSIsInZvcm9ub2kiLCJwb2x5Z29ucyIsImQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQiLCJ0cmlhbmdsZXMiLCJzMCIsImRlbGF1bmF5IiwicXVhZHRyZWUiLCJueCIsIm55IiwiaW5zZXJ0Q2hpbGQiLCJuUG9pbnQiLCJ4cyIsInlzIiwieDFfIiwieTFfIiwieDJfIiwieTJfIiwiY29tcGF0IiwidmlzaXQiLCJpbnRlcnBvbGF0ZVJnYiIsImludGVycG9sYXRlT2JqZWN0IiwiaW50ZXJwb2xhdGVOdW1iZXIiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImludGVycG9sYXRlQXJyYXkiLCJkM19lYXNlX2RlZmF1bHQiLCJkM19lYXNlIiwicG9seSIsImN1YmljIiwiZWxhc3RpYyIsImJhY2siLCJib3VuY2UiLCJkM19lYXNlX21vZGUiLCJpbiIsIm91dCIsImluLW91dCIsIm91dC1pbiIsImludGVycG9sYXRlSGNsIiwiaW50ZXJwb2xhdGVIc2wiLCJpbnRlcnBvbGF0ZUxhYiIsImludGVycG9sYXRlUm91bmQiLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJkM190cmFuc2Zvcm1JZGVudGl0eSIsImludGVycG9sYXRlVHJhbnNmb3JtIiwibGF5b3V0IiwiYnVuZGxlIiwicGF0aHMiLCJjaG9yZCIsInJlbGF5b3V0IiwiZ3JvdXBTdW1zIiwiZ3JvdXBJbmRleCIsInN1Ymdyb3VwSW5kZXgiLCJjaG9yZHMiLCJzb3J0R3JvdXBzIiwic29ydFN1Ymdyb3VwcyIsImRpIiwiZGoiLCJzdWJpbmRleCIsInNvcnRDaG9yZHMiLCJyZXNvcnQiLCJmb3JjZSIsInJlcHVsc2UiLCJkdyIsImRuIiwidGhldGEyIiwiY2hhcmdlRGlzdGFuY2UyIiwiZHJhZ21vdmUiLCJyZXN1bWUiLCJkaXN0YW5jZXMiLCJzdHJlbmd0aHMiLCJmcmljdGlvbiIsImxpbmtEaXN0YW5jZSIsImQzX2xheW91dF9mb3JjZUxpbmtEaXN0YW5jZSIsImxpbmtTdHJlbmd0aCIsImQzX2xheW91dF9mb3JjZUxpbmtTdHJlbmd0aCIsImQzX2xheW91dF9mb3JjZUNoYXJnZURpc3RhbmNlMiIsImdyYXZpdHkiLCJ3ZWlnaHQiLCJjaGFyZ2VEaXN0YW5jZSIsInRoZXRhIiwiZGltZW5zaW9uIiwibmVpZ2hib3JzIiwiY2FuZGlkYXRlcyIsImNoaWxkcyIsInJldmFsdWUiLCJwYXJ0aXRpb24iLCJwaWUiLCJhcmNzIiwiZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlIiwic2VyaWVzIiwib3JkZXJzIiwib2Zmc2V0cyIsImQzX2xheW91dF9zdGFja09yZGVycyIsImQzX2xheW91dF9zdGFja09mZnNldHMiLCJpbnNpZGUtb3V0Iiwic3VtcyIsImJvdHRvbSIsInRvcHMiLCJib3R0b21zIiwiZGVmYXVsdCIsInNpbGhvdWV0dGUiLCJ3aWdnbGUiLCJzMyIsIm8wIiwiemVybyIsImhpc3RvZ3JhbSIsImJpbiIsImJpbnMiLCJ2YWx1ZXIiLCJiaW5uZXIiLCJmcmVxdWVuY3kiLCJwYWNrIiwicm9vdDAiLCJyb290MSIsIndyYXBUcmVlIiwiZmlyc3RXYWxrIiwic2Vjb25kV2FsayIsIm5vZGVTaXplIiwic2l6ZU5vZGUiLCJ0eCIsInNlcGFyYXRpb24iLCJub2RlMSIsIm1pZHBvaW50IiwiYXBwb3J0aW9uIiwidmlwIiwidm9wIiwidm9tIiwic2lwIiwic29wIiwic2ltIiwic29tIiwiY2x1c3RlciIsInByZXZpb3VzTm9kZSIsInRyZWVtYXAiLCJzcXVhcmlmeSIsInNjb3JlIiwicGFkIiwibW9kZSIsIndvcnN0Iiwic3RpY2tpZnkiLCJybWF4Iiwicm1pbiIsInJhdGlvIiwic3RpY2tpZXMiLCJzdGlja3kiLCJwYWRGdW5jdGlvbiIsInBhZENvbnN0YW50IiwiwrUiLCLPgyIsImxvZ05vcm1hbCIsImJhdGVzIiwiaXJ3aW5IYWxsIiwib3JkaW5hbCIsImNhdGVnb3J5MTAiLCJkM19jYXRlZ29yeTEwIiwiY2F0ZWdvcnkyMCIsImQzX2NhdGVnb3J5MjAiLCJjYXRlZ29yeTIwYiIsImQzX2NhdGVnb3J5MjBiIiwiY2F0ZWdvcnkyMGMiLCJkM19jYXRlZ29yeTIwYyIsInF1YW50aXplIiwidGhyZXNob2xkIiwiY2lyY2xlU2VnbWVudCIsInJwIiwicGFkUmFkaXVzIiwiZDNfc3ZnX2FyY0F1dG8iLCJoMSIsImgwIiwiY29ybmVyUmFkaXVzIiwicmMxIiwicmMwIiwib2MiLCJrYyIsImxjIiwidDMwIiwidDEyIiwidDAzIiwidDIxIiwibGluZWFyLWNsb3NlZCIsInN0ZXAtYmVmb3JlIiwic3RlcC1hZnRlciIsImJhc2lzIiwiYmFzaXMtb3BlbiIsImJhc2lzLWNsb3NlZCIsImNhcmRpbmFsIiwiY2FyZGluYWwtb3BlbiIsImNhcmRpbmFsLWNsb3NlZCIsIm1vbm90b25lIiwicmFkaWFsIiwiZXF1YWxzIiwiY3VydmUiLCJkaWFnb25hbCIsInAzIiwicHJvamVjdGlvbl8iLCJkM19zdmdfc3ltYm9scyIsImNyb3NzIiwiZGlhbW9uZCIsImQzX3N2Z19zeW1ib2xUYW4zMCIsInNxdWFyZSIsInRyaWFuZ2xlLWRvd24iLCJkM19zdmdfc3ltYm9sU3FydDMiLCJ0cmlhbmdsZS11cCIsInN5bWJvbFR5cGVzIiwiZDNfdHJhbnNpdGlvbklkIiwiZDNfdHJhbnNpdGlvbkluaGVyaXQiLCJzdWJub2RlcyIsIm5hbWVOUyIsImF0dHJUd2VlbiIsImF0dHJUd2Vlbk5TIiwic3R5bGVTdHJpbmciLCJzdHlsZVR3ZWVuIiwiaW5oZXJpdElkIiwiaWQwIiwiaWQxIiwiYXhpcyIsInRpY2tUcmFuc2Zvcm0iLCJ0aWNrVmFsdWVzIiwidGlja0FyZ3VtZW50c18iLCJ0aWNrRm9ybWF0XyIsInRpY2tFbnRlciIsInRpY2tFeGl0IiwidGlja1VwZGF0ZSIsInRpY2tTcGFjaW5nIiwiaW5uZXJUaWNrU2l6ZSIsInRpY2tQYWRkaW5nIiwicGF0aFVwZGF0ZSIsImxpbmVFbnRlciIsImxpbmVVcGRhdGUiLCJ0ZXh0RW50ZXIiLCJ0ZXh0VXBkYXRlIiwib3JpZW50Iiwib3V0ZXJUaWNrU2l6ZSIsImQzX3N2Z19heGlzRGVmYXVsdE9yaWVudCIsImQzX3N2Z19heGlzT3JpZW50cyIsInRpY2tTaXplIiwidGlja1N1YmRpdmlkZSIsImJydXNoIiwiYnJ1c2hzdGFydCIsImJhY2tncm91bmQiLCJyZXNpemUiLCJyZXNpemVzIiwiZDNfc3ZnX2JydXNoQ3Vyc29yIiwiZ1VwZGF0ZSIsImJhY2tncm91bmRVcGRhdGUiLCJyZWRyYXdYIiwicmVkcmF3WSIsInJlZHJhdyIsInhFeHRlbnQiLCJ5RXh0ZW50Iiwia2V5ZG93biIsImRyYWdnaW5nIiwia2V5dXAiLCJicnVzaG1vdmUiLCJyZXNpemluZ1giLCJtb3ZlMSIsInJlc2l6aW5nWSIsImV2ZW50XyIsInlDbGFtcCIsInhDbGFtcCIsInlFeHRlbnREb21haW4iLCJ4RXh0ZW50RG9tYWluIiwiYnJ1c2hlbmQiLCJldmVudFRhcmdldCIsInJlc2l6aW5nIiwiZXkiLCJkM19zdmdfYnJ1c2hSZXNpemVzIiwiZXh0ZW50MSIsImV4dGVudDAiLCJ5aSIsImNsZWFyIiwibnciLCJuZSIsInNlIiwic3ciLCJkM190aW1lX2Zvcm1hdFV0YyIsImQzX3RpbWVfZm9ybWF0SXNvIiwiaXNvIiwic2Vjb25kcyIsIm1pbnV0ZSIsIm1pbnV0ZXMiLCJob3VyIiwidGltZXpvbmUiLCJob3VycyIsIm1vbnRoIiwiZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcyIsImQzX3RpbWVfc2NhbGVMb2NhbEZvcm1hdCIsImQzX3RpbWVfc2NhbGVVdGNNZXRob2RzIiwiZDNfdGltZV9zY2FsZVV0Y0Zvcm1hdCIsInJlc3BvbnNlWE1MIiwiQmFzZUVsZW1lbnQiLCJpdGVtIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwic3R5bGVzSW5Eb20iLCJyZWZzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJtZWRpYSIsInNvdXJjZU1hcCIsInBhcnQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJnZXRIZWFkRWxlbWVudCIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwic3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUxpbmtFbGVtZW50IiwibGlua0VsZW1lbnQiLCJyZWwiLCJzaW5nbGV0b24iLCJzdHlsZUluZGV4Iiwic2luZ2xldG9uQ291bnRlciIsInNpbmdsZXRvbkVsZW1lbnQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImJ0b2EiLCJ1cGRhdGVMaW5rIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsInN0eWxlU2hlZXQiLCJyZXBsYWNlVGV4dCIsImNzc05vZGUiLCJ1bmVzY2FwZSIsImJsb2IiLCJvbGRTcmMiLCJtZW1vaXplIiwibWVtbyIsImlzT2xkSUUiLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiX19leHBvcnQiLCJub3JtYWxpemVOYW1lIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwiaXRlcmFibGUiLCJIZWFkZXJzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJQcm9taXNlIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEJsb2JBc1RleHQiLCJyZWFkQXNUZXh0IiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsImlzUHJvdG90eXBlT2YiLCJfYm9keUJsb2IiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsInNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJyZWplY3RlZCIsImRlY29kZSIsIm5vcm1hbGl6ZU1ldGhvZCIsInVwY2FzZWQiLCJSZXF1ZXN0IiwiY3JlZGVudGlhbHMiLCJyZWZlcnJlciIsImZvcm0iLCJieXRlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJvayIsImZldGNoIiwidGhpc0FyZyIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJyZXNwb25zZVVSTCIsIm9udGltZW91dCIsIndpdGhDcmVkZW50aWFscyIsInBvbHlmaWxsIiwibG9jYWxzIiwiY29tcG9uZW50c18xIiwiQXBwIiwiX3Zpc3VhbGl6ZXIiLCJWaXN1YWxpemVyIiwiTWVudUNvbXBvbmVudCIsImRyYXciLCJhcHAiLCJwcmltYXJ5U2VsZWN0b3IiLCJzZWNvbmRhcnlTZWxlY3RvciIsImxvZ01hbmFnZXIiLCJfc2VsZWN0ZWQiLCJzZXRTZWxlY3RvcnMiLCJzZWxlY3RlZFByaW1hcnkiLCJxdWVyeSIsInNlbGVjdGVkU2Vjb25kYXJ5Iiwic2V0U2VsZWN0b3JzSW50ZXJuYWwiLCJfc2VsZWN0b3JzSGllcmFyY2h5Iiwic2V0T25TZWxlY3RvcnNDYWxsYmFjayIsIl9jYWxsYmFjayIsImNhdGVnb3J5IiwiY2F0ZWdvcnlDbGFzcyIsInNlbGVjdGVkU3RyaW5nIiwibGFiZWwiLCJhZGRDaGFuZ2VMaXN0ZW5lciIsIl90aGlzIiwic2VsZWN0ZWRWYWx1ZSIsImludm9rZUNhbGxiYWNrIiwiX19leHRlbmRzIiwiX18iLCJiYXNlX2VsZW1lbnRfMSIsIlN0YW5kYXJkTG9hZGVyIiwiX3N1cGVyIiwic3RhcnRMb2FkZXIiLCJkZWJ1ZyIsImFkZENpcmNsZSIsImFkZFJlY3QiLCJzdG9wTG9hZGVyIiwiYWRkUm90YXRpb24iLCJ0cmFuc2lzdGlvbiIsInV0aWxzXzEiLCJOb2RlSGllcmFyY2h5RWxlbWVudE9wdGlvbiIsIk5vZGVIaWVyYXJjaHlFbGVtZW50IiwiX2NvbmZpZyIsIl9jb2xvclNjaGVtZSIsIm1pbmltdW1WYWx1ZSIsInRyYW5zbGF0ZU5vZGVUb0JvcmRlciIsInRyYW5zbGF0ZVRvQm9yZGVyRmFjdG9yeSIsImxheW91dE5vZGVzIiwibm9kZXNTZWxlY3Rpb24iLCJhZGRUaXRsZSIsImFkZExhYmVsIiwidHJhbnNsYXRlVG9DZW50ZXIiLCJzaG9ydGVuVG9XaXRoaW5SYWRpdXMiLCJlbGVtZW50c18xIiwicmVwb3NpdG9yaWVzXzEiLCJfbWFuYWdlciIsImNvbmZpZyIsIm9uU2VsZWN0b3JDaGFuZ2VkIiwicHJpbWFyeSIsInNlY29uZGFyeSIsIl9ub2RlSGllcmFyY2h5Iiwic2V0SXNMb2FkaW5nIiwiX3JlcG9zaXRvcnkiLCJnZXRHcm91cHMiLCJzZXREYXRhIiwiU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeSIsInRhcmdldElkIiwiZ2V0U2VsZWN0b3JzIiwiX3N2ZyIsIl9sb2FkZXIiLCJpc0xvYWRpbmciLCJtYXBwZXIiLCJncm91cE1hcHBlckZhY3RvcnkiLCJnZXRBdmFuY2VkR3JvdXBzIiwidGl0bGVTZWxlY3RvciIsImxvY2F0aW9uc1NlbGVjdG9yIiwid3JpdGVyU2VsZWN0b3IiLCJkaXJlY3RvclNlbGVjdG9yIiwicHJvZHVjdGlvbkNvbXBhbnkiLCJuYW1lTGFiZWwiLCJ2YWx1ZUxhYmVsIiwic3Vic3RyIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBRSxXQUNBRSxHQUFBSixFQUNBSyxVQVVBLE9BTkFQLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLFVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBcUNBLE9BVEFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsR0FHQVYsRUFBQSxLRE1NLFNBQVNJLEVBQVFELEVBQVNILEdBRS9CQSxFQUFvQixHQUNwQkksRUFBT0QsUUFBVUgsRUFBb0IsS0FLaEMsU0FBU0ksRUFBUUQsRUFBU0gsR0VwRGhDLEdBQUFXLEdBQUFDOzs7Ozs7Ozs7Ozs7O0NBYUEsU0FBQUMsRUFBQUMsR0FFQSxZQUVBLGlCQUFBVixJQUFBLGdCQUFBQSxHQUFBRCxRQVNBQyxFQUFBRCxRQUFBVSxFQUFBRSxTQUNBRCxFQUFBRCxNQUNBLFNBQUFHLEdBQ0EsSUFBQUEsRUFBQUQsU0FDQSxTQUFBRSxPQUFBLDJDQUVB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L3VHLEVBQVFELEdBRXRCLFk2QjUvcEJZQSxHQUFBb3RHLHNCQUF3QixTQUFDOS9DLEVBQWdCL3JELEdBQzlDLEdBQUkyTSxHQUFXby9DLEVBQVMsSUFDcEIzQixFQUFRMkIsRUFBUyxFQVlyQixJQVhBL3JELEVBQU9BLEVBQUt5VyxNQUFNLFFBQVF6SyxJQUFJLFNBQUNzSixHQUMzQixHQUFHQSxFQUFFL1UsUUFBVW9NLEVBQVUsQ0FDckIsR0FBTWt0QixHQUFTLENBQ2YsT0FBT3ZrQixHQUFFbzRGLE9BQU8sRUFBRy9nRyxFQUFXa3RCLEdBQ3RCLFFBQ0F2a0IsRUFBRW80RixPQUFPL2dHLEVBQVdrdEIsRUFBUyxFQUFHdmtCLEVBQUUvVSxRQUU5QyxNQUFPK1UsS0FDUjVCLEtBQUssS0FHTDFULEdBQVFBLEVBQUtPLE9BQVNvTSxFQUFXeTlDLEVBQU8sQ0FDdkMsR0FBSXNqRCxHQUFVMXRHLEVBQUswdEcsT0FBTyxFQUFHL2dHLEVBQVcsRUFDeEMsT0FBRytnRyxHQUFPbnRHLE9BQVMsRUFDUixHQUVKbXRHLEVBQVMsV0FFcEIsTUFBTzF0RyxLN0J3Z3FCVCxTQUFTdEIsRUFBUUQsR0FFdEIsWThCbmlxQllBLEdBQUE4c0cseUJBQTJCLFNBQUM5K0YsRUFBZW1ELEdBR25ELE1BQU8sVUFBQ285QixHQUVKLEdBQUlvYSxHQUFLMzZDLEVBQVEsRUFDYjQ2QyxFQUFLejNDLEVBQVMsQ0FRbkIsT0FOd0JvOUIsR0FBRVIsRUFBSTRhLEVBQ05wYSxFQUFFaUksRUFBSW9TLEVBS3ZCLGFBQWVyYSxFQUFFUixFQUFJLEtBQU81OEIsRUFBU285QixFQUFFbUssR0FBTSIsImZpbGUiOiIuL2J1bmRsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvKiFcblx0ICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4xLjFcblx0ICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuXHQgKlxuXHQgKiBJbmNsdWRlcyBTaXp6bGUuanNcblx0ICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG5cdCAqXG5cdCAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG5cdCAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuXHQgKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuXHQgKlxuXHQgKiBEYXRlOiAyMDE2LTA5LTIyVDIyOjMwWlxuXHQgKi9cblx0KCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXHRcblx0XHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdFx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblx0XG5cdFx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdFx0fVxuXHRcblx0Ly8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcblx0fSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cdFxuXHQvLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcblx0Ly8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG5cdC8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG5cdC8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBhcnIgPSBbXTtcblx0XG5cdHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblx0XG5cdHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblx0XG5cdHZhciBzbGljZSA9IGFyci5zbGljZTtcblx0XG5cdHZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXHRcblx0dmFyIHB1c2ggPSBhcnIucHVzaDtcblx0XG5cdHZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cdFxuXHR2YXIgY2xhc3MydHlwZSA9IHt9O1xuXHRcblx0dmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblx0XG5cdHZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXHRcblx0dmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cdFxuXHR2YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXHRcblx0dmFyIHN1cHBvcnQgPSB7fTtcblx0XG5cdFxuXHRcblx0XHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cdFxuXHRcdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cdFxuXHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHRcdH1cblx0LyogZ2xvYmFsIFN5bWJvbCAqL1xuXHQvLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuXHQvLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXHRcblx0XG5cdFxuXHR2YXJcblx0XHR2ZXJzaW9uID0gXCIzLjEuMVwiLFxuXHRcblx0XHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRcdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XG5cdFx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRcdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXHRcblx0XHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0XHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRcdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblx0XG5cdFx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRcdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdFx0fTtcblx0XG5cdGpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cdFxuXHRcdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0XHRqcXVlcnk6IHZlcnNpb24sXG5cdFxuXHRcdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cdFxuXHRcdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRcdGxlbmd0aDogMCxcblx0XG5cdFx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0XHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRcdGdldDogZnVuY3Rpb24oIG51bSApIHtcblx0XG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHRcdH0sXG5cdFxuXHRcdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0XHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0XHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XG5cdFx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXHRcblx0XHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cdFxuXHRcdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSxcblx0XG5cdFx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0XHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdFx0fSxcblx0XG5cdFx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdFx0fSApICk7XG5cdFx0fSxcblx0XG5cdFx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0XHR9LFxuXHRcblx0XHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHRcdH0sXG5cdFxuXHRcdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdFx0fSxcblx0XG5cdFx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHRcdH0sXG5cdFxuXHRcdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0XHR9LFxuXHRcblx0XHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdFx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdFx0cHVzaDogcHVzaCxcblx0XHRzb3J0OiBhcnIuc29ydCxcblx0XHRzcGxpY2U6IGFyci5zcGxpY2Vcblx0fTtcblx0XG5cdGpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0XHRpID0gMSxcblx0XHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0XHRkZWVwID0gZmFsc2U7XG5cdFxuXHRcdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0XHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0ZGVlcCA9IHRhcmdldDtcblx0XG5cdFx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRcdGkrKztcblx0XHR9XG5cdFxuXHRcdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRcdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdFx0dGFyZ2V0ID0ge307XG5cdFx0fVxuXHRcblx0XHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0XHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0XHRpLS07XG5cdFx0fVxuXHRcblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XG5cdFx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblx0XG5cdFx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cdFxuXHRcdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cdFxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cdFxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH07XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFxuXHRcdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRcdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cdFxuXHRcdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdFx0aXNSZWFkeTogdHJ1ZSxcblx0XG5cdFx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHRcdH0sXG5cdFxuXHRcdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cdFxuXHRcdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdFx0fSxcblx0XG5cdFx0aXNBcnJheTogQXJyYXkuaXNBcnJheSxcblx0XG5cdFx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHRcdH0sXG5cdFxuXHRcdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblx0XG5cdFx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdFx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblx0XG5cdFx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdFx0fSxcblx0XG5cdFx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdHZhciBwcm90bywgQ3Rvcjtcblx0XG5cdFx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cdFxuXHRcdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0XHR9LFxuXHRcblx0XHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHRcdHZhciBuYW1lO1xuXHRcblx0XHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXHRcblx0XHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0XHR0eXBlb2Ygb2JqO1xuXHRcdH0sXG5cdFxuXHRcdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdFx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0XHRET01FdmFsKCBjb2RlICk7XG5cdFx0fSxcblx0XG5cdFx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdFx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdFx0fSxcblx0XG5cdFx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0fSxcblx0XG5cdFx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblx0XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9LFxuXHRcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0XHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdFx0fSxcblx0XG5cdFx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRcdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXHRcblx0XHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9LFxuXHRcblx0XHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRcdGogPSAwLFxuXHRcdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXHRcblx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHRcdH1cblx0XG5cdFx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXHRcblx0XHRcdHJldHVybiBmaXJzdDtcblx0XHR9LFxuXHRcblx0XHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblx0XG5cdFx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gbWF0Y2hlcztcblx0XHR9LFxuXHRcblx0XHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0XHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0cmV0ID0gW107XG5cdFxuXHRcdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cdFxuXHRcdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXHRcblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdFx0fSxcblx0XG5cdFx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdFx0Z3VpZDogMSxcblx0XG5cdFx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdFx0Ly8gYXJndW1lbnRzLlxuXHRcdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblx0XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRcdGZuID0gdG1wO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdFx0fTtcblx0XG5cdFx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXHRcblx0XHRcdHJldHVybiBwcm94eTtcblx0XHR9LFxuXHRcblx0XHRub3c6IERhdGUubm93LFxuXHRcblx0XHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0XHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRcdHN1cHBvcnQ6IHN1cHBvcnRcblx0fSApO1xuXHRcblx0aWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG5cdH1cblx0XG5cdC8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxuXHRqUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0XHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSApO1xuXHRcblx0ZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblx0XG5cdFx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHRcdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0XHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0XHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdFx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcblx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG5cdH1cblx0dmFyIFNpenpsZSA9XG5cdC8qIVxuXHQgKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcblx0ICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG5cdCAqXG5cdCAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG5cdCAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuXHQgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG5cdCAqXG5cdCAqIERhdGU6IDIwMTYtMDgtMDhcblx0ICovXG5cdChmdW5jdGlvbiggd2luZG93ICkge1xuXHRcblx0dmFyIGksXG5cdFx0c3VwcG9ydCxcblx0XHRFeHByLFxuXHRcdGdldFRleHQsXG5cdFx0aXNYTUwsXG5cdFx0dG9rZW5pemUsXG5cdFx0Y29tcGlsZSxcblx0XHRzZWxlY3QsXG5cdFx0b3V0ZXJtb3N0Q29udGV4dCxcblx0XHRzb3J0SW5wdXQsXG5cdFx0aGFzRHVwbGljYXRlLFxuXHRcblx0XHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdFx0c2V0RG9jdW1lbnQsXG5cdFx0ZG9jdW1lbnQsXG5cdFx0ZG9jRWxlbSxcblx0XHRkb2N1bWVudElzSFRNTCxcblx0XHRyYnVnZ3lRU0EsXG5cdFx0cmJ1Z2d5TWF0Y2hlcyxcblx0XHRtYXRjaGVzLFxuXHRcdGNvbnRhaW5zLFxuXHRcblx0XHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdFx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0XHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdFx0ZGlycnVucyA9IDAsXG5cdFx0ZG9uZSA9IDAsXG5cdFx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdFx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdFx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdFx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9LFxuXHRcblx0XHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdFx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0XHRhcnIgPSBbXSxcblx0XHRwb3AgPSBhcnIucG9wLFxuXHRcdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdFx0cHVzaCA9IGFyci5wdXNoLFxuXHRcdHNsaWNlID0gYXJyLnNsaWNlLFxuXHRcdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHRcdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0XHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH0sXG5cdFxuXHRcdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXHRcblx0XHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cdFxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdFx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblx0XG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdFx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblx0XG5cdFx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdFx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKlxcXFxdXCIsXG5cdFxuXHRcdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcdFwiLipcIiArXG5cdFx0XHRcIilcXFxcKXwpXCIsXG5cdFxuXHRcdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0XHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0XHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cdFxuXHRcdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRcdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRcblx0XHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXHRcblx0XHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRcdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblx0XG5cdFx0bWF0Y2hFeHByID0ge1xuXHRcdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHRcdH0sXG5cdFxuXHRcdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRcdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cdFxuXHRcdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXHRcblx0XHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0XHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cdFxuXHRcdHJzaWJsaW5nID0gL1srfl0vLFxuXHRcblx0XHQvLyBDU1MgZXNjYXBlc1xuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0XHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRcdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdFx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRcdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblx0XG5cdFx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0XHR9LFxuXHRcblx0XHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdFx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0XHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0XHQvLyBlcnJvciBpbiBJRVxuXHRcdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdHNldERvY3VtZW50KCk7XG5cdFx0fSxcblx0XG5cdFx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdFx0fSxcblx0XHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdFx0KTtcblx0XG5cdC8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG5cdHRyeSB7XG5cdFx0cHVzaC5hcHBseShcblx0XHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdFx0KTtcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHRcdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0XHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cdFxuXHRcdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0XHR9IDpcblx0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblx0XG5cdGZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdFx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cdFxuXHRcdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cdFxuXHRcdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXHRcblx0XHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXHRcblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH1cblx0XG5cdFx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRcdGlmICggIXNlZWQgKSB7XG5cdFxuXHRcdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRcdH1cblx0XHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXHRcblx0XHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFxuXHRcdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XG5cdFx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblx0XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblx0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XG5cdFx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcblx0XHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIEFsbCBvdGhlcnNcblx0XHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuXHQgKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG5cdCAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuXHQgKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdFx0dmFyIGtleXMgPSBbXTtcblx0XG5cdFx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRcdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRcdHJldHVybiBmbjtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcblx0ICovXG5cdGZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXHRcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHRcdH1cblx0XHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0XHRlbCA9IG51bGw7XG5cdFx0fVxuXHR9XG5cdFxuXHQvKipcblx0ICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuXHQgKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuXHQgKi9cblx0ZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0XHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdFx0aSA9IGFyci5sZW5ndGg7XG5cdFxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdFx0fVxuXHR9XG5cdFxuXHQvKipcblx0ICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGFcblx0ICogQHBhcmFtIHtFbGVtZW50fSBiXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuXHQgKi9cblx0ZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHRcdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblx0XG5cdFx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdFx0aWYgKCBkaWZmICkge1xuXHRcdFx0cmV0dXJuIGRpZmY7XG5cdFx0fVxuXHRcblx0XHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRcdGlmICggY3VyICkge1xuXHRcdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gYSA/IDEgOiAtMTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdFx0fTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHRcdH07XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG5cdCAqL1xuXHRmdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cdFxuXHRcdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XG5cdFx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblx0XG5cdFx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXHRcblx0XHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXHRcblx0XHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XG5cdFx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG5cdCAqL1xuXHRmdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0dmFyIGosXG5cdFx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblx0XG5cdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG5cdCAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG5cdCAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuXHQgKi9cblx0ZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcblx0fVxuXHRcblx0Ly8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2Vcblx0c3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cdFxuXHQvKipcblx0ICogRGV0ZWN0cyBYTUwgbm9kZXNcblx0ICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcblx0ICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuXHQgKi9cblx0aXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdFx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdFx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcblx0ICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcblx0ICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuXHQgKi9cblx0c2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0XHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXHRcblx0XHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRcdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdFx0fVxuXHRcblx0XHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRcdGRvY3VtZW50ID0gZG9jO1xuXHRcdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0XHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdFx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblx0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8qIEF0dHJpYnV0ZXNcblx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0XHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0XHR9KTtcblx0XG5cdFx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0XG5cdFx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRcdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0XHR9KTtcblx0XG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXHRcblx0XHQvLyBTdXBwb3J0OiBJRTwxMFxuXHRcdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHRcdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHRcdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRcdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHRcdH0pO1xuXHRcblx0XHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0XHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdFx0fTtcblx0XHRcdH07XG5cdFx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdFx0fTtcblx0XHRcdH07XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcblx0XHQvLyBUYWdcblx0XHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXHRcblx0XHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IDpcblx0XG5cdFx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0XHRpID0gMCxcblx0XHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXHRcblx0XHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0fTtcblx0XG5cdFx0Ly8gQ2xhc3Ncblx0XHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcblx0XHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRcblx0XHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cdFxuXHRcdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdFx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXHRcblx0XHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHRcdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHRcdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0XHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHRcdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0XHRyYnVnZ3lRU0EgPSBbXTtcblx0XG5cdFx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cdFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFxuXHRcdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cdFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XG5cdFx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cdFxuXHRcdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXHRcblx0XHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XG5cdFx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0XHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXHRcblx0XHQvKiBDb250YWluc1xuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0XHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cdFxuXHRcdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHRcdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHRcdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdFx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHRcdCkpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XG5cdFx0LyogU29ydGluZ1xuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0XG5cdFx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRcdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcblx0XHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblx0XG5cdFx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0XHQxO1xuXHRcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cdFxuXHRcdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0XHQwO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cdFxuXHRcdFx0dmFyIGN1cixcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0XHRicCA9IFsgYiBdO1xuXHRcblx0XHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHRcdDA7XG5cdFxuXHRcdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRcdGN1ciA9IGE7XG5cdFx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdFx0fVxuXHRcdFx0Y3VyID0gYjtcblx0XHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0XHRpKys7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGkgP1xuXHRcdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cdFxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0XHQwO1xuXHRcdH07XG5cdFxuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fTtcblx0XG5cdFNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRcdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG5cdH07XG5cdFxuXHRTaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdFx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdFx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHR9XG5cdFxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRcdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblx0XG5cdFx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cdFxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXHRcblx0XHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcblx0fTtcblx0XG5cdFNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHRcdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRcdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xuXHR9O1xuXHRcblx0U2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0XHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdH1cblx0XG5cdFx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0XHR1bmRlZmluZWQ7XG5cdFxuXHRcdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHR2YWwgOlxuXHRcdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdH07XG5cdFxuXHRTaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0XHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0fTtcblx0XG5cdFNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG5cdH07XG5cdFxuXHQvKipcblx0ICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuXHQgKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuXHQgKi9cblx0U2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IDA7XG5cdFxuXHRcdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0XHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRcdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRcdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cdFxuXHRcdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdFx0c29ydElucHV0ID0gbnVsbDtcblx0XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH07XG5cdFxuXHQvKipcblx0ICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcblx0ICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG5cdCAqL1xuXHRnZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbm9kZSxcblx0XHRcdHJldCA9IFwiXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblx0XG5cdFx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0XHR9XG5cdFx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cdFxuXHRcdHJldHVybiByZXQ7XG5cdH07XG5cdFxuXHRFeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblx0XG5cdFx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdFx0Y2FjaGVMZW5ndGg6IDUwLFxuXHRcblx0XHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblx0XG5cdFx0bWF0Y2g6IG1hdGNoRXhwcixcblx0XG5cdFx0YXR0ckhhbmRsZToge30sXG5cdFxuXHRcdGZpbmQ6IHt9LFxuXHRcblx0XHRyZWxhdGl2ZToge1xuXHRcdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdFx0fSxcblx0XG5cdFx0cHJlRmlsdGVyOiB7XG5cdFx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFxuXHRcdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFxuXHRcdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdFx0Ki9cblx0XHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXHRcblx0XHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cdFxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9LFxuXHRcblx0XHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblx0XG5cdFx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cdFxuXHRcdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdGZpbHRlcjoge1xuXHRcblx0XHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblx0XG5cdFx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXHRcblx0XHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblx0XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblx0XG5cdFx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblx0XG5cdFx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHRcdH0gOlxuXHRcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXHRcblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXHRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXHRcblx0XHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiBmbjtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHRwc2V1ZG9zOiB7XG5cdFx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXHRcblx0XHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fSksXG5cdFxuXHRcdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdFx0fTtcblx0XHRcdH0pLFxuXHRcblx0XHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdFx0fTtcblx0XHRcdH0pLFxuXHRcblx0XHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXHRcblx0XHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSksXG5cdFxuXHRcdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0XHR9LFxuXHRcblx0XHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0XHR9LFxuXHRcblx0XHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0XHR9LFxuXHRcblx0XHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXHRcblx0XHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0Ly8gQ29udGVudHNcblx0XHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0XHR9LFxuXHRcblx0XHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0XHR9LFxuXHRcblx0XHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdFx0fSksXG5cdFxuXHRcdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0XHR9KSxcblx0XG5cdFx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdFx0fSksXG5cdFxuXHRcdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHRcdH0pLFxuXHRcblx0XHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHRcdH0pLFxuXHRcblx0XHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHRcdH0pLFxuXHRcblx0XHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0XHR9KVxuXHRcdH1cblx0fTtcblx0XG5cdEV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXHRcblx0Ly8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3Ncblx0Zm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdFx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xuXHR9XG5cdGZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdFx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcblx0fVxuXHRcblx0Ly8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5cdGZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuXHRzZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcblx0RXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblx0XG5cdHRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdFx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXHRcblx0XHRpZiAoIGNhY2hlZCApIHtcblx0XHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdFx0fVxuXHRcblx0XHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRcdGdyb3VwcyA9IFtdO1xuXHRcdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblx0XG5cdFx0d2hpbGUgKCBzb0ZhciApIHtcblx0XG5cdFx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXHRcblx0XHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBGaWx0ZXJzXG5cdFx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0XHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0XHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0XHRzb0ZhciA/XG5cdFx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG5cdH07XG5cdFxuXHRmdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRcdHNlbGVjdG9yID0gXCJcIjtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIHNlbGVjdG9yO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHRcdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0XHRkb25lTmFtZSA9IGRvbmUrKztcblx0XG5cdFx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IDpcblx0XG5cdFx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cdFxuXHRcdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblx0XG5cdFx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdFx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9IDpcblx0XHRcdG1hdGNoZXJzWzBdO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXHRcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBuZXdVbm1hdGNoZWQ7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0XHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdFx0fVxuXHRcdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHRcdH1cblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblx0XG5cdFx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblx0XG5cdFx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0ZWxlbXMsXG5cdFxuXHRcdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cdFxuXHRcdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRbXSA6XG5cdFxuXHRcdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0XHRtYXRjaGVySW47XG5cdFxuXHRcdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cdFxuXHRcdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdFx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblx0XG5cdFx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH0gXTtcblx0XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXHRcblx0XHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0XHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXHRcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cdFxuXHRcdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cdFxuXHRcdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cdFxuXHRcdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHRcdH07XG5cdFxuXHRcdHJldHVybiBieVNldCA/XG5cdFx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRcdHN1cGVyTWF0Y2hlcjtcblx0fVxuXHRcblx0Y29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0XHR2YXIgaSxcblx0XHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblx0XG5cdFx0aWYgKCAhY2FjaGVkICkge1xuXHRcdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdH1cblx0XHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblx0XG5cdFx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGVkO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcblx0ICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuXHQgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuXHQgKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcblx0ICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG5cdCAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG5cdCAqL1xuXHRzZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHRcdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXHRcblx0XHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblx0XG5cdFx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0XHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdFx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cdFxuXHRcdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cdFxuXHRcdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFxuXHRcdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXHRcblx0XHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHRcdCkpICkge1xuXHRcblx0XHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdFx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHRcdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRcdHNlZWQsXG5cdFx0XHRjb250ZXh0LFxuXHRcdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdFx0cmVzdWx0cyxcblx0XHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHQpO1xuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9O1xuXHRcblx0Ly8gT25lLXRpbWUgYXNzaWdubWVudHNcblx0XG5cdC8vIFNvcnQgc3RhYmlsaXR5XG5cdHN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblx0XG5cdC8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcblx0Ly8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuXHRzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblx0XG5cdC8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuXHRzZXREb2N1bWVudCgpO1xuXHRcblx0Ly8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcblx0Ly8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5cdHN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0XHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcblx0fSk7XG5cdFxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG5cdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5cdGlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdFx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xuXHR9KSApIHtcblx0XHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly8gU3VwcG9ydDogSUU8OVxuXHQvLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5cdGlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdFx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRcdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG5cdH0pICkge1xuXHRcdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdC8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcblx0aWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcblx0fSkgKSB7XG5cdFx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdFx0dmFyIHZhbDtcblx0XHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdHJldHVybiBTaXp6bGU7XG5cdFxuXHR9KSggd2luZG93ICk7XG5cdFxuXHRcblx0XG5cdGpRdWVyeS5maW5kID0gU2l6emxlO1xuXHRqUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cdFxuXHQvLyBEZXByZWNhdGVkXG5cdGpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcblx0alF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5cdGpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5cdGpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcblx0alF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xuXHRqUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXHRcblx0XG5cdFxuXHRcblx0dmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHRcdHZhciBtYXRjaGVkID0gW10sXG5cdFx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cdFxuXHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fTtcblx0XG5cdFxuXHR2YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdO1xuXHRcblx0XHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG1hdGNoZWQ7XG5cdH07XG5cdFxuXHRcblx0dmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cdFxuXHR2YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblx0XG5cdFxuXHRcblx0dmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblx0XG5cdC8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5cdGZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFxuXHRcdC8vIFNpbmdsZSBlbGVtZW50XG5cdFx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFxuXHRcdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRcdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdFx0fSApO1xuXHRcdH1cblx0XG5cdFx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cdFxuXHRcdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSApO1xuXHR9XG5cdFxuXHRqUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdFx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXHRcblx0XHRpZiAoIG5vdCApIHtcblx0XHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdFx0fVxuXHRcblx0XHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSApICk7XG5cdH07XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0dmFyIGksIHJldCxcblx0XHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRcdHNlbGYgPSB0aGlzO1xuXHRcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cdFxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHRcdH0sXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0XHR9LFxuXHRcdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0XHR9LFxuXHRcdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHRcdHRoaXMsXG5cdFxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdFx0ZmFsc2Vcblx0XHRcdCkubGVuZ3RoO1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdC8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cdFxuXHRcblx0Ly8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG5cdHZhciByb290alF1ZXJ5LFxuXHRcblx0XHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHRcdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0XHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0XHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdFx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXHRcblx0XHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cdFxuXHRcdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXHRcblx0XHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblx0XG5cdFx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblx0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXHRcblx0XHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdFx0KSApO1xuXHRcblx0XHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXHRcblx0XHRcdFx0XHRcdGlmICggZWxlbSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFxuXHRcdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cdFxuXHRcdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdFx0fTtcblx0XG5cdC8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cblx0aW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cdFxuXHQvLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5cdHJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cdFxuXHRcblx0dmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXHRcblx0XHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRcdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdFx0bmV4dDogdHJ1ZSxcblx0XHRcdHByZXY6IHRydWVcblx0XHR9O1xuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXHRcblx0XHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpID0gMDtcblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgY3VyLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cdFxuXHRcdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXHRcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRcdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XG5cdFx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXHRcblx0XHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdFx0KTtcblx0XHR9LFxuXHRcblx0XHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0XHQpXG5cdFx0XHQpO1xuXHRcdH0sXG5cdFxuXHRcdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHRcdCk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRmdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdFx0cmV0dXJuIGN1cjtcblx0fVxuXHRcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdFx0fSxcblx0XHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdFx0fSxcblx0XHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHRcdH0sXG5cdFx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdFx0fSxcblx0XHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdFx0fSxcblx0XHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHRcdH0sXG5cdFx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdFx0fSxcblx0XHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0XHR9LFxuXHRcdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0XHR9LFxuXHRcdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdFx0fSxcblx0XHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHRcdH0sXG5cdFx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHRcdH1cblx0fSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cdFxuXHRcdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXHRcblx0XHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHRcdH07XG5cdH0gKTtcblx0dmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXHRcblx0XG5cdFxuXHQvLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuXHRmdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHRcdHZhciBvYmplY3QgPSB7fTtcblx0XHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIG9iamVjdDtcblx0fVxuXHRcblx0Lypcblx0ICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG5cdCAqXG5cdCAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG5cdCAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuXHQgKlxuXHQgKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuXHQgKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG5cdCAqXG5cdCAqIFBvc3NpYmxlIG9wdGlvbnM6XG5cdCAqXG5cdCAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcblx0ICpcblx0ICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG5cdCAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcblx0ICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG5cdCAqXG5cdCAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG5cdCAqXG5cdCAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuXHQgKlxuXHQgKi9cblx0alF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcblx0XHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdFx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRcdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblx0XG5cdFx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRcdGZpcmluZyxcblx0XG5cdFx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdFx0bWVtb3J5LFxuXHRcblx0XHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0XHRmaXJlZCxcblx0XG5cdFx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0XHRsb2NrZWQsXG5cdFxuXHRcdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRcdGxpc3QgPSBbXSxcblx0XG5cdFx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdFx0cXVldWUgPSBbXSxcblx0XG5cdFx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cdFxuXHRcdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblx0XG5cdFx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0XHRsb2NrZWQgPSBvcHRpb25zLm9uY2U7XG5cdFxuXHRcdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cdFxuXHRcdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0XHRpZiAoIGxvY2tlZCApIHtcblx0XG5cdFx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcblx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XG5cdFx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdFx0c2VsZiA9IHtcblx0XG5cdFx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XG5cdFx0cmV0dXJuIHNlbGY7XG5cdH07XG5cdFxuXHRcblx0ZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdFx0cmV0dXJuIHY7XG5cdH1cblx0ZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdFx0dGhyb3cgZXg7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKSB7XG5cdFx0dmFyIG1ldGhvZDtcblx0XG5cdFx0dHJ5IHtcblx0XG5cdFx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0XHRpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cdFxuXHRcdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblx0XG5cdFx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdFx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0XHRcdHJlc29sdmUuY2FsbCggdW5kZWZpbmVkLCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcblx0XHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0XHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdFx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0XHR9IGNhdGNoICggdmFsdWUgKSB7XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdFx0cmVqZWN0LmNhbGwoIHVuZGVmaW5lZCwgdmFsdWUgKTtcblx0XHR9XG5cdH1cblx0XG5cdGpRdWVyeS5leHRlbmQoIHtcblx0XG5cdFx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdFx0dmFyIHR1cGxlcyA9IFtcblx0XG5cdFx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XHRdLFxuXHRcdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXHRcblx0XHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0KTtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRlZmVycmVkID0ge307XG5cdFxuXHRcdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXHRcblx0XHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXHRcblx0XHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cdFxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cdFxuXHRcdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH07XG5cdFxuXHRcdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHRcdH0gKTtcblx0XG5cdFx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblx0XG5cdFx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQWxsIGRvbmUhXG5cdFx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdFx0fSxcblx0XG5cdFx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdFx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdFx0dmFyXG5cdFxuXHRcdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XG5cdFx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0XHRpID0gcmVtYWluaW5nLFxuXHRcblx0XHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFxuXHRcdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcblx0XHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXHRcblx0XHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFxuXHRcdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXHRcblx0XHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHQvLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcblx0Ly8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG5cdHZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXHRcblx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXHRcblx0XHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdFx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0XHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHRcdH1cblx0fTtcblx0XG5cdFxuXHRcblx0XG5cdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9ICk7XG5cdH07XG5cdFxuXHRcblx0XG5cdFxuXHQvLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcblx0dmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXHRcblx0alF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXHRcblx0XHRyZWFkeUxpc3Rcblx0XHRcdC50aGVuKCBmbiApXG5cdFxuXHRcdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHRcdH0gKTtcblx0XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFxuXHRcdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdFx0aXNSZWFkeTogZmFsc2UsXG5cdFxuXHRcdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0XHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRcdHJlYWR5V2FpdDogMSxcblx0XG5cdFx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdFx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRcdGlmICggaG9sZCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRcdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblx0XG5cdFx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXHRcblx0XHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cdFxuXHQvLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuXHRmdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdFx0alF1ZXJ5LnJlYWR5KCk7XG5cdH1cblx0XG5cdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG5cdC8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG5cdC8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuXHRpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHRcdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXHRcblx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cdFxuXHR9IGVsc2Uge1xuXHRcblx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHRcblx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdH1cblx0XG5cdFxuXHRcblx0XG5cdC8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuXHQvLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cblx0dmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cdFxuXHRcdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0XHR9XG5cdFxuXHRcdC8vIFNldHMgb25lIHZhbHVlXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFxuXHRcdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJhdyA9IHRydWU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBidWxrICkge1xuXHRcblx0XHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGZuID0gbnVsbDtcblx0XG5cdFx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGZuICkge1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRmbihcblx0XHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbXM7XG5cdFx0fVxuXHRcblx0XHQvLyBHZXRzXG5cdFx0aWYgKCBidWxrICkge1xuXHRcdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG5cdH07XG5cdHZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXHRcblx0XHQvLyBBY2NlcHRzIG9ubHk6XG5cdFx0Ly8gIC0gTm9kZVxuXHRcdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0XHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHRcdC8vICAtIE9iamVjdFxuXHRcdC8vICAgIC0gQW55XG5cdFx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xuXHR9O1xuXHRcblx0XG5cdFxuXHRcblx0ZnVuY3Rpb24gRGF0YSgpIHtcblx0XHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG5cdH1cblx0XG5cdERhdGEudWlkID0gMTtcblx0XG5cdERhdGEucHJvdG90eXBlID0ge1xuXHRcblx0XHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcblx0XHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcblx0XHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHRcdHZhbHVlID0ge307XG5cdFxuXHRcdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXHRcblx0XHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdFx0dmFyIHByb3AsXG5cdFx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblx0XG5cdFx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblx0XG5cdFx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjYWNoZTtcblx0XHR9LFxuXHRcdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblx0XG5cdFx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgXTtcblx0XHR9LFxuXHRcdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXHRcblx0XHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHRcdC8vXG5cdFx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHRcdC8vXG5cdFx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHRcdC8vXG5cdFx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0XHQvL1xuXHRcdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblx0XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHRcdC8vXG5cdFx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdFx0Ly9cblx0XHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXHRcblx0XHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHRcdH0sXG5cdFx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XG5cdFx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXHRcblx0XHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXHRcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0XHR9XG5cdH07XG5cdHZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cdFxuXHR2YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXHRcblx0XG5cdFxuXHQvL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuXHQvL1xuXHQvL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuXHQvL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG5cdC8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cblx0Ly9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG5cdC8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG5cdC8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcblx0Ly9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXHRcblx0dmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0XHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cdFxuXHRmdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRcdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFxuXHRcdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XG5cdFx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XG5cdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0XHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRcdHJldHVybiArZGF0YTtcblx0XHR9XG5cdFxuXHRcdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0XHR2YXIgbmFtZTtcblx0XG5cdFx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHRcdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cdFxuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0XHR9LFxuXHRcblx0XHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0XHR9LFxuXHRcblx0XHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdFx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdFx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHRcdH0sXG5cdFxuXHRcdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cdFxuXHRcdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblx0XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRhdGE7XG5cdFxuXHRcdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcblx0XHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdFx0fSxcblx0XG5cdFx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdGpRdWVyeS5leHRlbmQoIHtcblx0XHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0XHR2YXIgcXVldWU7XG5cdFxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXHRcblx0XHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFxuXHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0XHR9O1xuXHRcblx0XHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBmbiApIHtcblx0XG5cdFx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0XHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHRcdH0gKVxuXHRcdFx0fSApO1xuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRcdHZhciBzZXR0ZXIgPSAyO1xuXHRcblx0XHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0XHRzZXR0ZXItLTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblx0XG5cdFx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblx0XG5cdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cdFx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH0gKTtcblx0XHR9LFxuXHRcdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0XHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0XHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdFx0dmFyIHRtcCxcblx0XHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFxuXHRcdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdFx0fVxuXHR9ICk7XG5cdHZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblx0XG5cdHZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblx0XG5cdFxuXHR2YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cdFxuXHR2YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXHRcblx0XHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblx0XG5cdFx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cdFxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblx0XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHRcdH07XG5cdFxuXHR2YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0XHR2YXIgcmV0LCBuYW1lLFxuXHRcdFx0b2xkID0ge307XG5cdFxuXHRcdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHRcdH1cblx0XG5cdFx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblx0XG5cdFx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xuXHRcblx0XG5cdFxuXHRcblx0ZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0XHR2YXIgYWRqdXN0ZWQsXG5cdFx0XHRzY2FsZSA9IDEsXG5cdFx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cdFxuXHRcdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXHRcblx0XHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXHRcblx0XHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblx0XG5cdFx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0XG5cdFx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cdFxuXHRcdFx0ZG8ge1xuXHRcblx0XHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXHRcblx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFxuXHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0XHR9IHdoaWxlIChcblx0XHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHRcdCk7XG5cdFx0fVxuXHRcblx0XHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblx0XG5cdFx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gYWRqdXN0ZWQ7XG5cdH1cblx0XG5cdFxuXHR2YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblx0XG5cdGZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHRcdHZhciB0ZW1wLFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXHRcblx0XHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0XHRyZXR1cm4gZGlzcGxheTtcblx0XHR9XG5cdFxuXHRcdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblx0XG5cdFx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cdFxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHRcdH1cblx0XHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdFxuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdFx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0XHR2YWx1ZXMgPSBbXSxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblx0XG5cdFx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcblx0XHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0XHRpZiAoIHNob3cgKSB7XG5cdFxuXHRcdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblx0XG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGVsZW1lbnRzO1xuXHR9XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0XHR9LFxuXHRcdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdFx0fSxcblx0XHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9ICk7XG5cdHZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblx0XG5cdHZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cdFxuXHR2YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblx0XG5cdFxuXHRcblx0Ly8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcblx0dmFyIHdyYXBNYXAgPSB7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cdFxuXHRcdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdFx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHRcdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0XHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdFx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0XHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdFx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHRcblx0XHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cblx0fTtcblx0XG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblx0XG5cdHdyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG5cdHdyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXHRcblx0XG5cdGZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXHRcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHRcdHZhciByZXQ7XG5cdFxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblx0XG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cdFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXQgPSBbXTtcblx0XHR9XG5cdFxuXHRcdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cdFxuXHRcblx0Ly8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5cdGZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXHRcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdHZhciByaHRtbCA9IC88fCYjP1xcdys7Lztcblx0XG5cdGZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdFx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0XHRub2RlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXHRcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblx0XG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblx0XG5cdFx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cdFxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblx0XG5cdFx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXHRcblx0XHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXHRcblx0XHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cdFxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdFx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXHRcblx0XHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcblx0XHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XG5cdFx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXHRcblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGZyYWdtZW50O1xuXHR9XG5cdFxuXHRcblx0KCBmdW5jdGlvbigpIHtcblx0XHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdFx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXHRcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHRcdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRcdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0XHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdFx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cdH0gKSgpO1xuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRcblx0XG5cdFxuXHR2YXJcblx0XHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdFx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdFx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXHRcblx0ZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cblx0ZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHRcdH0gY2F0Y2ggKCBlcnIgKSB7IH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0XHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXHRcblx0XHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFxuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZWxlbTtcblx0XHR9XG5cdFxuXHRcdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cdFxuXHRcdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFxuXHRcdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbTtcblx0XHR9XG5cdFxuXHRcdGlmICggb25lID09PSAxICkge1xuXHRcdFx0b3JpZ0ZuID0gZm47XG5cdFx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XG5cdFx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fTtcblx0XG5cdFx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxuXHRcblx0Lypcblx0ICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuXHQgKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuXHQgKi9cblx0alF1ZXJ5LmV2ZW50ID0ge1xuXHRcblx0XHRnbG9iYWw6IHt9LFxuXHRcblx0XHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cdFxuXHRcdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXHRcblx0XHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHRcdH1cblx0XHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXHRcblx0XHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XG5cdFx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFxuXHRcdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcblx0XHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblx0XG5cdFx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblx0XG5cdFx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XG5cdFx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcblx0XHR9LFxuXHRcblx0XHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0XHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXHRcblx0XHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cdFxuXHRcdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cdFxuXHRcdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblx0XG5cdFx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblx0XG5cdFx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXHRcblx0XHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFxuXHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cdFxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXHRcblx0XHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXHRcblx0XHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0XHRhcmdzWyAwIF0gPSBldmVudDtcblx0XG5cdFx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0XHR9XG5cdFxuXHRcdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXHRcblx0XHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cdFxuXHRcdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRcdGkgPSAwO1xuXHRcdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cdFxuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXHRcblx0XHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cdFxuXHRcdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHRcdH0sXG5cdFxuXHRcdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXHRcblx0XHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0XHRjdXIubm9kZVR5cGUgJiZcblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXHRcblx0XHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblx0XG5cdFx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdFx0Y3VyID0gdGhpcztcblx0XHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0XHR9LFxuXHRcblx0XHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFxuXHRcdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdFx0fSxcblx0XG5cdFx0c3BlY2lhbDoge1xuXHRcdFx0bG9hZDoge1xuXHRcblx0XHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGZvY3VzOiB7XG5cdFxuXHRcdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0XHR9LFxuXHRcdFx0Ymx1cjoge1xuXHRcdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdFx0fSxcblx0XHRcdGNsaWNrOiB7XG5cdFxuXHRcdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFxuXHRcdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0XG5cdGpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cdFxuXHRcdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRcdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0XHR9XG5cdH07XG5cdFxuXHRqUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblx0XG5cdFx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdFx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHRcdH1cblx0XG5cdFx0Ly8gRXZlbnQgb2JqZWN0XG5cdFx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblx0XG5cdFx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRcdHJldHVybkZhbHNlO1xuXHRcblx0XHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRcdHNyYy50YXJnZXQ7XG5cdFxuXHRcdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblx0XG5cdFx0Ly8gRXZlbnQgdHlwZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdFx0fVxuXHRcblx0XHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRcdGlmICggcHJvcHMgKSB7XG5cdFx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHRcdH1cblx0XG5cdFx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0XHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblx0XG5cdFx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHRcdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xuXHR9O1xuXHRcblx0Ly8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcblx0alF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0XHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRcdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdFx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRcdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0XHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cdFxuXHRcdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXHRcblx0XHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblx0XG5cdFx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblx0XG5cdFx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblx0XG5cdFx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cdFxuXHRcdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cdFxuXHRcdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcblx0XHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9O1xuXHRcblx0Ly8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRhbHRLZXk6IHRydWUsXG5cdFx0YnViYmxlczogdHJ1ZSxcblx0XHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRcdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRcdGN0cmxLZXk6IHRydWUsXG5cdFx0ZGV0YWlsOiB0cnVlLFxuXHRcdGV2ZW50UGhhc2U6IHRydWUsXG5cdFx0bWV0YUtleTogdHJ1ZSxcblx0XHRwYWdlWDogdHJ1ZSxcblx0XHRwYWdlWTogdHJ1ZSxcblx0XHRzaGlmdEtleTogdHJ1ZSxcblx0XHR2aWV3OiB0cnVlLFxuXHRcdFwiY2hhclwiOiB0cnVlLFxuXHRcdGNoYXJDb2RlOiB0cnVlLFxuXHRcdGtleTogdHJ1ZSxcblx0XHRrZXlDb2RlOiB0cnVlLFxuXHRcdGJ1dHRvbjogdHJ1ZSxcblx0XHRidXR0b25zOiB0cnVlLFxuXHRcdGNsaWVudFg6IHRydWUsXG5cdFx0Y2xpZW50WTogdHJ1ZSxcblx0XHRvZmZzZXRYOiB0cnVlLFxuXHRcdG9mZnNldFk6IHRydWUsXG5cdFx0cG9pbnRlcklkOiB0cnVlLFxuXHRcdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRcdHNjcmVlblg6IHRydWUsXG5cdFx0c2NyZWVuWTogdHJ1ZSxcblx0XHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHRcdHRvRWxlbWVudDogdHJ1ZSxcblx0XHR0b3VjaGVzOiB0cnVlLFxuXHRcblx0XHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblx0XG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBldmVudC53aGljaDtcblx0XHR9XG5cdH0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cdFxuXHQvLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncblx0Ly8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cblx0Ly8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcblx0Ly9cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuXHQvLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcblx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG5cdC8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0XHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdFx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdFx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxuXHR9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRcdGJpbmRUeXBlOiBmaXgsXG5cdFxuXHRcdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciByZXQsXG5cdFx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cdFxuXHRcdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XG5cdFx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdFx0fSxcblx0XHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdFx0fSxcblx0XHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXHRcblx0XHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcblx0XHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcblx0XHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHR2YXJcblx0XG5cdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXHRcblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0XHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblx0XG5cdFx0LyogZXNsaW50LWVuYWJsZSAqL1xuXHRcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdFx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0XHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblx0XG5cdFx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdFx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRcdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdFx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXHRcblx0ZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXHRcblx0XHRcdHJldHVybiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXHRcblx0Ly8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuXHRmdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRcdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cdGZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdFx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cdFxuXHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHRcdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXHRcblx0XHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRcdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblx0XG5cdFx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cdFxuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdFx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cdFxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5cdGZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdFx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcblx0XHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0XHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXHRcblx0XHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHRcdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblx0XG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cdFxuXHRcdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXHRcblx0XHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0XHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcblx0XHRpZiAoIGwgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXHRcblx0XHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXHRcblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblx0XG5cdFx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblx0XG5cdFx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cdFxuXHRcdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cdFxuXHRcdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXHRcblx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBjb2xsZWN0aW9uO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0XHR2YXIgbm9kZSxcblx0XHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRcdGkgPSAwO1xuXHRcblx0XHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0XHR9LFxuXHRcblx0XHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XG5cdFx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFxuXHRcdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXHRcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXHRcblx0XHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdFx0cmV0dXJuIGNsb25lO1xuXHRcdH0sXG5cdFxuXHRcdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdFx0aSA9IDA7XG5cdFxuXHRcdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdH0sXG5cdFxuXHRcdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0XHR9LFxuXHRcblx0XHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdFx0fSxcblx0XG5cdFx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XG5cdFx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XG5cdFx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XG5cdFx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9LFxuXHRcblx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0aSA9IDA7XG5cdFxuXHRcdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFxuXHRcdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXHRcblx0XHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XG5cdFx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0XHRpID0gMCxcblx0XHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cdFxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXHRcblx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXHRcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0ZWxlbSA9IDA7XG5cdFxuXHRcdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdFx0fSxcblx0XG5cdFx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGlnbm9yZWQgPSBbXTtcblx0XG5cdFx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblx0XG5cdFx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0XHR9LCBpZ25vcmVkICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZWFjaCgge1xuXHRcdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRcdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdFx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRcdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdFx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG5cdH0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHZhciBlbGVtcyxcblx0XHRcdFx0cmV0ID0gW10sXG5cdFx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0XHRpID0gMDtcblx0XG5cdFx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cdFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0XHR9O1xuXHR9ICk7XG5cdHZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblx0XG5cdHZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblx0XG5cdHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFxuXHRcdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHRcdH07XG5cdFxuXHRcblx0XG5cdCggZnVuY3Rpb24oKSB7XG5cdFxuXHRcdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHRcdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdFx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cdFxuXHRcdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXHRcblx0XHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblx0XG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblx0XG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cdFxuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0XG5cdFx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0XHRkaXYgPSBudWxsO1xuXHRcdH1cblx0XG5cdFx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cdFxuXHRcdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdFx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0XHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdFx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0XHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXHRcblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cdFxuXHRcdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHRcdH0sXG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHRcdH0sXG5cdFx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0XHR9LFxuXHRcdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKSgpO1xuXHRcblx0XG5cdGZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdFx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblx0XG5cdFx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblx0XG5cdFx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblx0XG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblx0XG5cdFx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblx0XG5cdFx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRcdHJldCArIFwiXCIgOlxuXHRcdFx0cmV0O1xuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXHRcblx0XHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRcdHJldHVybiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRcblx0XG5cdHZhclxuXHRcblx0XHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdFx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdFx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdFx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRcdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRcdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHRcdH0sXG5cdFxuXHRcdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0XHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXHRcblx0Ly8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuXHRmdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblx0XG5cdFx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0XG5cdFx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHRcdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXHRcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0XHRyZXR1cm4gbmFtZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cdFxuXHRcdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0XHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0XHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0XHRyZXR1cm4gbWF0Y2hlcyA/XG5cdFxuXHRcdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdFx0dmFsdWU7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0XHR2YXIgaSxcblx0XHRcdHZhbCA9IDA7XG5cdFxuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRcdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRcdGkgPSA0O1xuXHRcblx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdFx0fSBlbHNlIHtcblx0XHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0XHR9XG5cdFxuXHRcdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblx0XG5cdFx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblx0XG5cdFx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFxuXHRcdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblx0XG5cdFx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0XHR2YXIgdmFsLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG5cdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRpZiAoIGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHR2YWwgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpWyBuYW1lIF07XG5cdFx0fVxuXHRcblx0XHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0XHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcblx0XHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0XHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcblx0XHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdFx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIHZhbDtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cdFxuXHRcdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblx0XHR9XG5cdFxuXHRcdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdFx0cmV0dXJuICggdmFsICtcblx0XHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRcdHN0eWxlc1xuXHRcdFx0KVxuXHRcdCkgKyBcInB4XCI7XG5cdH1cblx0XG5cdGpRdWVyeS5leHRlbmQoIHtcblx0XG5cdFx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdFx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdFx0Y3NzSG9va3M6IHtcblx0XHRcdG9wYWNpdHk6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRcdGNzc051bWJlcjoge1xuXHRcdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFx0XCJ6b29tXCI6IHRydWVcblx0XHR9LFxuXHRcblx0XHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdFx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRcdGNzc1Byb3BzOiB7XG5cdFx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHRcdH0sXG5cdFxuXHRcdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdFx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFxuXHRcdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cdFxuXHRcdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cdFxuXHRcdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXHRcblx0XHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXHRcblx0XHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cdFxuXHRcdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFxuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXHRcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cdFxuXHRcdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cdFxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblx0XG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCk7XG5cdFxuXHRcdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblx0XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xuXHRcblx0alF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHRcdH0gKVxuXHRcdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xuXHRcblx0Ly8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdG1hcmdpbjogXCJcIixcblx0XHRwYWRkaW5nOiBcIlwiLFxuXHRcdGJvcmRlcjogXCJXaWR0aFwiXG5cdH0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXHRcblx0XHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXHRcblx0XHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdFx0fVxuXHRcdH07XG5cdFxuXHRcdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdFx0aSA9IDA7XG5cdFxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cdFxuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0ZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRcdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG5cdH1cblx0alF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cdFxuXHRUd2Vlbi5wcm90b3R5cGUgPSB7XG5cdFx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRcdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdH0sXG5cdFx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cdFxuXHRcdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHRcdH0sXG5cdFx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHRcdHZhciBlYXNlZCxcblx0XHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXHRcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXHRcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH07XG5cdFxuXHRUd2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cdFxuXHRUd2Vlbi5wcm9wSG9va3MgPSB7XG5cdFx0X2RlZmF1bHQ6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0O1xuXHRcblx0XHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cdFxuXHRcdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFxuXHRcdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0XG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcblx0alF1ZXJ5LmVhc2luZyA9IHtcblx0XHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdFx0cmV0dXJuIHA7XG5cdFx0fSxcblx0XHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHRcdH0sXG5cdFx0X2RlZmF1bHQ6IFwic3dpbmdcIlxuXHR9O1xuXHRcblx0alF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cdFxuXHQvLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxuXHRqUXVlcnkuZnguc3RlcCA9IHt9O1xuXHRcblx0XG5cdFxuXHRcblx0dmFyXG5cdFx0ZnhOb3csIHRpbWVySWQsXG5cdFx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdFx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cdFxuXHRmdW5jdGlvbiByYWYoKSB7XG5cdFx0aWYgKCB0aW1lcklkICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggcmFmICk7XG5cdFx0XHRqUXVlcnkuZngudGljaygpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuXHRmdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cdFx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcblx0fVxuXHRcblx0Ly8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cblx0ZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0XHR2YXIgd2hpY2gsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblx0XG5cdFx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHRcdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdFx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdFx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHRcdH1cblx0XG5cdFx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGF0dHJzO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0XHR2YXIgdHdlZW4sXG5cdFx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblx0XG5cdFx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHRcdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0XHRhbmltID0gdGhpcyxcblx0XHRcdG9yaWcgPSB7fSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcblx0XHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0XHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aG9va3MudW5xdWV1ZWQrKztcblx0XG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFxuXHRcdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXHRcblx0XHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXHRcblx0XHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0XHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdFx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0XHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cdFxuXHRcdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0fVxuXHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblx0XG5cdFx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFxuXHRcdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XG5cdFx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXHRcblx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cdFxuXHRcdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0XHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXHRcblx0XHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0XHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdFx0fVxuXHRcblx0XHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblx0XG5cdFx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0XHR2YXIgcmVzdWx0LFxuXHRcdFx0c3RvcHBlZCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XG5cdFx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdFx0fSApLFxuXHRcdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXHRcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblx0XG5cdFx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cdFxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICksXG5cdFx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblx0XG5cdFx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblx0XG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cdFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0XHR9XG5cdFxuXHRcdGpRdWVyeS5meC50aW1lcihcblx0XHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHRcdH0gKVxuXHRcdCk7XG5cdFxuXHRcdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdFx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXHR9XG5cdFxuXHRqUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cdFxuXHRcdHR3ZWVuZXJzOiB7XG5cdFx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9IF1cblx0XHR9LFxuXHRcblx0XHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0dmFyIHByb3AsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXHRcblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblx0XG5cdFx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHRcdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdFx0fTtcblx0XG5cdFx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmIG9yIGlmIGRvY3VtZW50IGlzIGhpZGRlblxuXHRcdGlmICggalF1ZXJ5LmZ4Lm9mZiB8fCBkb2N1bWVudC5oaWRkZW4gKSB7XG5cdFx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXHRcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXHRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0XHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0XHR9XG5cdFxuXHRcdC8vIFF1ZXVlaW5nXG5cdFx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblx0XG5cdFx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XG5cdFx0cmV0dXJuIG9wdDtcblx0fTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFxuXHRcdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblx0XG5cdFx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHRcdH0sXG5cdFx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcblx0XHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblx0XG5cdFx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cdFxuXHRcdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdFx0fSxcblx0XHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdH07XG5cdFxuXHRcdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblx0XG5cdFx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblx0XG5cdFx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblx0XG5cdFx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXHRcblx0XHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblx0XG5cdFx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0XHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdFx0fTtcblx0fSApO1xuXHRcblx0Ly8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdFx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdFx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdFx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdFx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRcdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG5cdH0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHRcdH07XG5cdH0gKTtcblx0XG5cdGpRdWVyeS50aW1lcnMgPSBbXTtcblx0alF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGltZXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cdFxuXHRcdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXHRcblx0XHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXHRcblx0XHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdFx0fVxuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9O1xuXHRcblx0alF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRcdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0XHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0XHR9XG5cdH07XG5cdFxuXHRqUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblx0alF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGltZXJJZCApIHtcblx0XHRcdHRpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID9cblx0XHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggcmFmICkgOlxuXHRcdFx0XHR3aW5kb3cuc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cdH07XG5cdFxuXHRqUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKCB0aW1lcklkICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5jbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cdFx0fVxuXHRcblx0XHR0aW1lcklkID0gbnVsbDtcblx0fTtcblx0XG5cdGpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdFx0c2xvdzogNjAwLFxuXHRcdGZhc3Q6IDIwMCxcblx0XG5cdFx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRcdF9kZWZhdWx0OiA0MDBcblx0fTtcblx0XG5cdFxuXHQvLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG5cdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5cdGpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHRcdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0XHR9O1xuXHRcdH0gKTtcblx0fTtcblx0XG5cdFxuXHQoIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblx0XG5cdFx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblx0XG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdFx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdFx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdFx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdFx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0XHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG5cdH0gKSgpO1xuXHRcblx0XG5cdHZhciBib29sSG9vayxcblx0XHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdFx0fSxcblx0XG5cdFx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5leHRlbmQoIHtcblx0XHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXHRcblx0XHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXHRcblx0XHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdFx0fSxcblx0XG5cdFx0YXR0ckhvb2tzOiB7XG5cdFx0XHR0eXBlOiB7XG5cdFx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgbmFtZSxcblx0XHRcdFx0aSA9IDAsXG5cdFxuXHRcdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcblx0XHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcblx0XG5cdC8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcblx0Ym9vbEhvb2sgPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XG5cdFx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH07XG5cdFxuXHRqUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXHRcblx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFxuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFxuXHRcdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9O1xuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHR2YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdFx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdFx0fSxcblx0XG5cdFx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LmV4dGVuZCgge1xuXHRcdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cdFxuXHRcdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcblx0XHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0XHR9LFxuXHRcblx0XHRwcm9wSG9va3M6IHtcblx0XHRcdHRhYkluZGV4OiB7XG5cdFx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXHRcblx0XHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdHByb3BGaXg6IHtcblx0XHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdFx0fVxuXHR9ICk7XG5cdFxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG5cdC8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcblx0Ly8gb24gdGhlIG9wdGlvblxuXHQvLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuXHQvLyB3aGVuIGluIGFuIG9wdGdyb3VwXG5cdC8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuXHQvLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3Bcblx0aWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0XHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XG5cdFx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblx0XG5cdFx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XG5cdFx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblx0XG5cdFx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXHRcblx0XHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cdFxuXHRqUXVlcnkuZWFjaCggW1xuXHRcdFwidGFiSW5kZXhcIixcblx0XHRcInJlYWRPbmx5XCIsXG5cdFx0XCJtYXhMZW5ndGhcIixcblx0XHRcImNlbGxTcGFjaW5nXCIsXG5cdFx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcdFwicm93U3BhblwiLFxuXHRcdFwiY29sU3BhblwiLFxuXHRcdFwidXNlTWFwXCIsXG5cdFx0XCJmcmFtZUJvcmRlclwiLFxuXHRcdFwiY29udGVudEVkaXRhYmxlXCJcblx0XSwgZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcblx0fSApO1xuXHRcblx0XG5cdFxuXHRcblx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdFx0fVxuXHRcblx0XG5cdGZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcblx0fVxuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRcdGkgPSAwO1xuXHRcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cdFxuXHRcdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFxuXHRcdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRcdGkgPSAwO1xuXHRcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFxuXHRcdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cdFxuXHRcdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFxuXHRcdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cdFxuXHRcdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXHRcblx0XHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcblx0XHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9LFxuXHRcblx0XHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdFx0aSA9IDA7XG5cdFxuXHRcdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHR2YXIgcnJldHVybiA9IC9cXHIvZztcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXHRcblx0XHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cdFxuXHRcdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXHRcblx0XHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXHRcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHR2YXIgdmFsO1xuXHRcblx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0XHR2YWwgPSBcIlwiO1xuXHRcblx0XHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHR2YWwgKz0gXCJcIjtcblx0XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXHRcblx0XHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5leHRlbmQoIHtcblx0XHR2YWxIb29rczoge1xuXHRcdFx0b3B0aW9uOiB7XG5cdFx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFxuXHRcdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdFx0dmFsIDpcblx0XG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRzZWxlY3Q6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblx0XG5cdFx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0XHRpID0gbWF4O1xuXHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblx0XG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cdFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXHRcblx0XHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFxuXHRcdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHQvLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxuXHRqUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHRcdH07XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHQvLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cdFxuXHRcblx0dmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXHRcblx0alF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cdFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXHRcblx0XHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblx0XG5cdFx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblx0XG5cdFx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cdFxuXHRcdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHRcdH1cblx0XHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblx0XG5cdFx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0XHRldmVudCA6XG5cdFx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXHRcblx0XHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdFx0bnVsbDtcblx0XG5cdFx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFx0WyBldmVudCBdIDpcblx0XHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cdFxuXHRcdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFxuXHRcdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRcdGkgPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXHRcblx0XHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cdFxuXHRcdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XG5cdFx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcblx0XHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcblx0XHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXHRcblx0XHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXHRcblx0XHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHRcdH0sXG5cdFxuXHRcdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHRcdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdFx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0XHRldmVudCxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHRcdH1cblx0XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHRcdH0gKTtcblx0XHR9LFxuXHRcdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHRqUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRcdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRcblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHRcblx0XG5cdHN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXHRcblx0XG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuXHQvLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG5cdC8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG5cdC8vXG5cdC8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuXHQvLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcblx0Ly8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG5cdC8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5cdGlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0XHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRcblx0XHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdFx0fTtcblx0XG5cdFx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblx0XG5cdFx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblx0XG5cdFx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSApO1xuXHR9XG5cdHZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblx0XG5cdHZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblx0XG5cdHZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cdFxuXHRcblx0XG5cdC8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcblx0alF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0dmFyIHhtbDtcblx0XHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHRcdHRyeSB7XG5cdFx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0eG1sID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XG5cdFx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHhtbDtcblx0fTtcblx0XG5cdFxuXHR2YXJcblx0XHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0XHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdFx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRcdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblx0XG5cdGZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0XHR2YXIgbmFtZTtcblx0XG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cdFxuXHRcdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0XHRhZGRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFxuXHRcdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFxuXHRcdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHRcdH1cblx0XG5cdFx0fSBlbHNlIHtcblx0XG5cdFx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuXHQvLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcblx0alF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHRcdHZhciBwcmVmaXgsXG5cdFx0XHRzID0gW10sXG5cdFx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cdFxuXHRcdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblx0XG5cdFx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdFx0fTtcblx0XG5cdFx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXHRcblx0XHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcblx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRcdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG5cdH07XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHRcdH0sXG5cdFx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XG5cdFx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHRcdH0gKVxuXHRcdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXHRcblx0XHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdFx0fSApXG5cdFx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXHRcblx0XHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0fSApLmdldCgpO1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdHZhclxuXHRcdHIyMCA9IC8lMjAvZyxcblx0XHRyaGFzaCA9IC8jLiokLyxcblx0XHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRcdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblx0XG5cdFx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdFx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0XHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0XHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cdFxuXHRcdC8qIFByZWZpbHRlcnNcblx0XHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHRcdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdFx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHRcdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0XHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdFx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHRcdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdFx0ICovXG5cdFx0cHJlZmlsdGVycyA9IHt9LFxuXHRcblx0XHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdFx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHRcdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0XHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0XHQgKi9cblx0XHR0cmFuc3BvcnRzID0ge30sXG5cdFxuXHRcdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRcdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblx0XG5cdFx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdFx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0XHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cdFxuXHQvLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5cdGZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXHRcblx0XHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cdFxuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHRcdH1cblx0XG5cdFx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblx0XG5cdFx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXHRcblx0XHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblx0XG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cdFxuXHQvLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcblx0ZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblx0XG5cdFx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cdFxuXHRcdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdFx0dmFyIHNlbGVjdGVkO1xuXHRcdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cdFxuXHRcdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG5cdH1cblx0XG5cdC8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuXHQvLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuXHQvLyBGaXhlcyAjOTg4N1xuXHRmdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0XHR2YXIga2V5LCBkZWVwLFxuXHRcdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXHRcblx0XHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggZGVlcCApIHtcblx0XHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHRhcmdldDtcblx0fVxuXHRcblx0LyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuXHQgKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuXHQgKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0ICovXG5cdGZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cdFxuXHRcdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXHRcblx0XHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHRcdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdFx0aWYgKCBjdCApIHtcblx0XHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdFx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdFx0fSBlbHNlIHtcblx0XG5cdFx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdFx0fVxuXHRcblx0XHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdFx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0XHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0XHR9XG5cdH1cblx0XG5cdC8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2Vcblx0ICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG5cdCAqL1xuXHRmdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdFx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0XHRjb252ZXJ0ZXJzID0ge30sXG5cdFxuXHRcdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblx0XG5cdFx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdFx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcblx0XHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHRcdHdoaWxlICggY3VycmVudCApIHtcblx0XG5cdFx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFxuXHRcdFx0aWYgKCBjdXJyZW50ICkge1xuXHRcblx0XHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXHRcblx0XHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblx0XG5cdFx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblx0XG5cdFx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblx0XG5cdFx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXHRcblx0XHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xuXHR9XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFxuXHRcdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRcdGFjdGl2ZTogMCxcblx0XG5cdFx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRcdGxhc3RNb2RpZmllZDoge30sXG5cdFx0ZXRhZzoge30sXG5cdFxuXHRcdGFqYXhTZXR0aW5nczoge1xuXHRcdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdFx0dHlwZTogXCJHRVRcIixcblx0XHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0XHRnbG9iYWw6IHRydWUsXG5cdFx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRcdGFzeW5jOiB0cnVlLFxuXHRcdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cdFxuXHRcdFx0Lypcblx0XHRcdHRpbWVvdXQ6IDAsXG5cdFx0XHRkYXRhOiBudWxsLFxuXHRcdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdFx0Y2FjaGU6IG51bGwsXG5cdFx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdFx0aGVhZGVyczoge30sXG5cdFx0XHQqL1xuXHRcblx0XHRcdGFjY2VwdHM6IHtcblx0XHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdFx0fSxcblx0XG5cdFx0XHRjb250ZW50czoge1xuXHRcdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdFx0fSxcblx0XG5cdFx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdFx0fSxcblx0XG5cdFx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRcdGNvbnZlcnRlcnM6IHtcblx0XG5cdFx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cdFxuXHRcdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblx0XG5cdFx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblx0XG5cdFx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0XHR9LFxuXHRcblx0XHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHRcdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0XHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRcdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXHRcblx0XHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXHRcblx0XHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0XHR9LFxuXHRcblx0XHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0XHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblx0XG5cdFx0Ly8gTWFpbiBtZXRob2Rcblx0XHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXHRcblx0XHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdFxuXHRcdFx0dmFyIHRyYW5zcG9ydCxcblx0XG5cdFx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdFx0Y2FjaGVVUkwsXG5cdFxuXHRcdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXHRcblx0XHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdFx0dGltZW91dFRpbWVyLFxuXHRcblx0XHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHRcdHVybEFuY2hvcixcblx0XG5cdFx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdFx0Y29tcGxldGVkLFxuXHRcblx0XHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRcdGZpcmVHbG9iYWxzLFxuXHRcblx0XHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0XHRpLFxuXHRcblx0XHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHRcdHVuY2FjaGVkLFxuXHRcblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblx0XG5cdFx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXHRcblx0XHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cdFxuXHRcdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblx0XG5cdFx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblx0XG5cdFx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblx0XG5cdFx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cdFxuXHRcdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcblx0XHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cdFxuXHRcdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cdFxuXHRcdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXHRcblx0XHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcblx0XHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cdFxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblx0XG5cdFx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXHRcblx0XHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblx0XG5cdFx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXHRcblx0XHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cdFxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cdFxuXHRcdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cdFxuXHRcdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblx0XG5cdFx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHRcdCk7XG5cdFxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXHRcblx0XHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cdFxuXHRcdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cdFxuXHRcdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cdFxuXHRcdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblx0XG5cdFx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblx0XG5cdFx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXHRcblx0XHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblx0XG5cdFx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXHRcblx0XHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblx0XG5cdFx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXHRcblx0XHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblx0XG5cdFx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcblx0XHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXHRcblx0XHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cdFxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXHRcblx0XHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXHRcblx0XHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cdFxuXHRcdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fSxcblx0XG5cdFx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0XHR9LFxuXHRcblx0XHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0XHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cdFxuXHRcdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR1cmw6IHVybCxcblx0XHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHRcdH07XG5cdH0gKTtcblx0XG5cdFxuXHRqUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRcdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFxuXHRcdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0XHRjYWNoZTogdHJ1ZSxcblx0XHRcdGFzeW5jOiBmYWxzZSxcblx0XHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XHRcInRocm93c1wiOiB0cnVlXG5cdFx0fSApO1xuXHR9O1xuXHRcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRcdHZhciB3cmFwO1xuXHRcblx0XHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXHRcblx0XHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cdFxuXHRcdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcblx0XHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblx0XG5cdFx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblx0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXHRcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XG5cdFx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHRcdH0gKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdGpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcblx0fTtcblx0alF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcblx0fTtcblx0XG5cdFxuXHRcblx0XG5cdGpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHR9O1xuXHRcblx0dmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cdFxuXHRcdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHRcdDA6IDIwMCxcblx0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0XHQxMjIzOiAyMDRcblx0XHR9LFxuXHRcdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cdFxuXHRzdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5cdHN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXHRcblx0alF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblx0XG5cdFx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRcdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cdFxuXHRcdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0XHQpO1xuXHRcblx0XHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fTtcblx0XG5cdFx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXHRcblx0XHRcdFx0XHR0cnkge1xuXHRcblx0XHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdFxuXHRcblx0Ly8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcblx0alF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRcdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHQvLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxuXHRqUXVlcnkuYWpheFNldHVwKCB7XG5cdFx0YWNjZXB0czoge1xuXHRcdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdFx0fSxcblx0XHRjb250ZW50czoge1xuXHRcdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0XHR9LFxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xuXHRcblx0Ly8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxuXHRqUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdFx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHQvLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcblx0alF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRcblx0XHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cdFxuXHRcdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHR2YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdFx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/Lztcblx0XG5cdC8vIERlZmF1bHQganNvbnAgc2V0dGluZ3Ncblx0alF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRcdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdFx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHRcdH1cblx0fSApO1xuXHRcblx0Ly8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5cdGpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXHRcblx0XHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XHRcInVybFwiIDpcblx0XHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHRcdCk7XG5cdFxuXHRcdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0XHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblx0XG5cdFx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjaztcblx0XG5cdFx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHRcdH07XG5cdFxuXHRcdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXHRcblx0XHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0XHR9O1xuXHRcblx0XHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XG5cdFx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblx0XG5cdFx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXHRcblx0XHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cdFxuXHRcdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0XHR9ICk7XG5cdFxuXHRcdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHRcblx0XG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcblx0Ly8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuXHQvLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cblx0Ly8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuXHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5cdHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0XHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdFx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdFx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG5cdH0gKSgpO1xuXHRcblx0XG5cdC8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuXHQvLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG5cdC8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdC8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcblx0alF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0XHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRcdGNvbnRleHQgPSBmYWxzZTtcblx0XHR9XG5cdFxuXHRcdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cdFxuXHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFxuXHRcdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXHRcblx0XHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdFx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblx0XG5cdFx0Ly8gU2luZ2xlIHRhZ1xuXHRcdGlmICggcGFyc2VkICkge1xuXHRcdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdFx0fVxuXHRcblx0XHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXHRcblx0XHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xuXHR9O1xuXHRcblx0XG5cdC8qKlxuXHQgKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG5cdCAqL1xuXHRqUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRcdHNlbGYgPSB0aGlzLFxuXHRcdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cdFxuXHRcdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdFx0fVxuXHRcblx0XHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblx0XG5cdFx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cdFxuXHRcdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0XHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0XHR9XG5cdFxuXHRcdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdFx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0XHR1cmw6IHVybCxcblx0XG5cdFx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cdFxuXHRcdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cdFxuXHRcdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblx0XG5cdFx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cdFxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cdFxuXHRcdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdFxuXHRcblx0XG5cdC8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5cdGpRdWVyeS5lYWNoKCBbXG5cdFx0XCJhamF4U3RhcnRcIixcblx0XHRcImFqYXhTdG9wXCIsXG5cdFx0XCJhamF4Q29tcGxldGVcIixcblx0XHRcImFqYXhFcnJvclwiLFxuXHRcdFwiYWpheFN1Y2Nlc3NcIixcblx0XHRcImFqYXhTZW5kXCJcblx0XSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdFx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0XHR9O1xuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHRqUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0XHR9ICkubGVuZ3RoO1xuXHR9O1xuXHRcblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcblx0fVxuXHRcblx0alF1ZXJ5Lm9mZnNldCA9IHtcblx0XHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0XHRwcm9wcyA9IHt9O1xuXHRcblx0XHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblx0XG5cdFx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblx0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXHRcblx0XHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHRcdH1cblx0XHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblx0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XG5cdFx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHR2YXIgZG9jRWxlbSwgd2luLCByZWN0LCBkb2MsXG5cdFx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cdFxuXHRcdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XG5cdFx0XHQvLyBNYWtlIHN1cmUgZWxlbWVudCBpcyBub3QgaGlkZGVuIChkaXNwbGF5OiBub25lKVxuXHRcdFx0aWYgKCByZWN0LndpZHRoIHx8IHJlY3QuaGVpZ2h0ICkge1xuXHRcdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0XHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHRcdHJldHVybiByZWN0O1xuXHRcdH0sXG5cdFxuXHRcdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XG5cdFx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cdFxuXHRcdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XG5cdFx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblx0XG5cdFx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdFx0dG9wOiBwYXJlbnRPZmZzZXQudG9wICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApLFxuXHRcdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH0sXG5cdFxuXHRcdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHRcdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0XHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0XHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdFx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHRcdC8vXG5cdFx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdFx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdFx0Ly9cblx0XHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRcdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cdFxuXHRcdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0fSApO1xuXHRcdH1cblx0fSApO1xuXHRcblx0Ly8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5cdGpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0XHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXHRcblx0XHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXHRcblx0XHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHRcdCk7XG5cdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHRcdH07XG5cdH0gKTtcblx0XG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcblx0Ly8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cblx0Ly8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG5cdC8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG5cdC8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG5cdC8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5cdGpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblx0XG5cdFx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCk7XG5cdH0gKTtcblx0XG5cdFxuXHQvLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcblx0alF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRcdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXHRcblx0XHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXHRcblx0XHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciBkb2M7XG5cdFxuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXHRcblx0XHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XG5cdFx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblx0XG5cdFx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdFx0fTtcblx0XHR9ICk7XG5cdH0gKTtcblx0XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFxuXHRcdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdFx0fSxcblx0XHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHRcdH0sXG5cdFxuXHRcdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdFx0fSxcblx0XHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblx0XG5cdFx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xuXHRcblx0XG5cdFxuXHRcblx0Ly8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG5cdC8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcblx0Ly8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG5cdC8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcblx0Ly8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG5cdC8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuXHQvLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cdFxuXHQvLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuXHQvLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG5cdC8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblx0XG5cdGlmICggdHJ1ZSApIHtcblx0XHQhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnk7XG5cdFx0fS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuXHR9XG5cdFxuXHRcblx0XG5cdFxuXHR2YXJcblx0XG5cdFx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdFx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cdFxuXHRcdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdFx0XyQgPSB3aW5kb3cuJDtcblx0XG5cdGpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdFx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdFx0d2luZG93LiQgPSBfJDtcblx0XHR9XG5cdFxuXHRcdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBqUXVlcnk7XG5cdH07XG5cdFxuXHQvLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuXHQvLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG5cdC8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2Nilcblx0aWYgKCAhbm9HbG9iYWwgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xuXHR9XG5cdFxuXHRcblx0XG5cdFxuXHRcblx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xuXG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvKlxuXHQqIGxvZ2xldmVsIC0gaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsXG5cdCpcblx0KiBDb3B5cmlnaHQgKGMpIDIwMTMgVGltIFBlcnJ5XG5cdCogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXHQqL1xuXHQoZnVuY3Rpb24gKHJvb3QsIGRlZmluaXRpb24pIHtcblx0ICAgIFwidXNlIHN0cmljdFwiO1xuXHQgICAgaWYgKHRydWUpIHtcblx0ICAgICAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IChkZWZpbml0aW9uKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/IChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLCBleHBvcnRzLCBtb2R1bGUpKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcblx0ICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0ICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcm9vdC5sb2cgPSBkZWZpbml0aW9uKCk7XG5cdCAgICB9XG5cdH0odGhpcywgZnVuY3Rpb24gKCkge1xuXHQgICAgXCJ1c2Ugc3RyaWN0XCI7XG5cdCAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG5cdCAgICB2YXIgdW5kZWZpbmVkVHlwZSA9IFwidW5kZWZpbmVkXCI7XG5cdFxuXHQgICAgZnVuY3Rpb24gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gV2UgY2FuJ3QgYnVpbGQgYSByZWFsIG1ldGhvZCB3aXRob3V0IGEgY29uc29sZSB0byBsb2cgdG9cblx0ICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGVbbWV0aG9kTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCBtZXRob2ROYW1lKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGUubG9nICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgJ2xvZycpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiBub29wO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBmdW5jdGlvbiBiaW5kTWV0aG9kKG9iaiwgbWV0aG9kTmFtZSkge1xuXHQgICAgICAgIHZhciBtZXRob2QgPSBvYmpbbWV0aG9kTmFtZV07XG5cdCAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QuYmluZCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmJpbmQob2JqKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwobWV0aG9kLCBvYmopO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5hcHBseShtZXRob2QsIFtvYmosIGFyZ3VtZW50c10pO1xuXHQgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICAvLyB0aGVzZSBwcml2YXRlIGZ1bmN0aW9ucyBhbHdheXMgbmVlZCBgdGhpc2AgdG8gYmUgc2V0IHByb3Blcmx5XG5cdFxuXHQgICAgZnVuY3Rpb24gZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcyhtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSkge1xuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xuXHQgICAgICAgICAgICAgICAgcmVwbGFjZUxvZ2dpbmdNZXRob2RzLmNhbGwodGhpcywgbGV2ZWwsIGxvZ2dlck5hbWUpO1xuXHQgICAgICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0XG5cdCAgICBmdW5jdGlvbiByZXBsYWNlTG9nZ2luZ01ldGhvZHMobGV2ZWwsIGxvZ2dlck5hbWUpIHtcblx0ICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9nTWV0aG9kcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IGxvZ01ldGhvZHNbaV07XG5cdCAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0gPSAoaSA8IGxldmVsKSA/XG5cdCAgICAgICAgICAgICAgICBub29wIDpcblx0ICAgICAgICAgICAgICAgIHRoaXMubWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIGZ1bmN0aW9uIGRlZmF1bHRNZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKSB7XG5cdCAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cblx0ICAgICAgICByZXR1cm4gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB8fFxuXHQgICAgICAgICAgICAgICBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGxvZ01ldGhvZHMgPSBbXG5cdCAgICAgICAgXCJ0cmFjZVwiLFxuXHQgICAgICAgIFwiZGVidWdcIixcblx0ICAgICAgICBcImluZm9cIixcblx0ICAgICAgICBcIndhcm5cIixcblx0ICAgICAgICBcImVycm9yXCJcblx0ICAgIF07XG5cdFxuXHQgICAgZnVuY3Rpb24gTG9nZ2VyKG5hbWUsIGRlZmF1bHRMZXZlbCwgZmFjdG9yeSkge1xuXHQgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cdCAgICAgIHZhciBjdXJyZW50TGV2ZWw7XG5cdCAgICAgIHZhciBzdG9yYWdlS2V5ID0gXCJsb2dsZXZlbFwiO1xuXHQgICAgICBpZiAobmFtZSkge1xuXHQgICAgICAgIHN0b3JhZ2VLZXkgKz0gXCI6XCIgKyBuYW1lO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBmdW5jdGlvbiBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsTnVtKSB7XG5cdCAgICAgICAgICB2YXIgbGV2ZWxOYW1lID0gKGxvZ01ldGhvZHNbbGV2ZWxOdW1dIHx8ICdzaWxlbnQnKS50b1VwcGVyQ2FzZSgpO1xuXHRcblx0ICAgICAgICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXG5cdCAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV0gPSBsZXZlbE5hbWU7XG5cdCAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXHRcblx0ICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuY29va2llID1cblx0ICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiICsgbGV2ZWxOYW1lICsgXCI7XCI7XG5cdCAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGZ1bmN0aW9uIGdldFBlcnNpc3RlZExldmVsKCkge1xuXHQgICAgICAgICAgdmFyIHN0b3JlZExldmVsO1xuXHRcblx0ICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldO1xuXHQgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXHRcblx0ICAgICAgICAgIGlmICh0eXBlb2Ygc3RvcmVkTGV2ZWwgPT09IHVuZGVmaW5lZFR5cGUpIHtcblx0ICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICB2YXIgY29va2llID0gd2luZG93LmRvY3VtZW50LmNvb2tpZTtcblx0ICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gY29va2llLmluZGV4T2YoXG5cdCAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIik7XG5cdCAgICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSAvXihbXjtdKykvLmV4ZWMoY29va2llLnNsaWNlKGxvY2F0aW9uKSlbMV07XG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgLy8gSWYgdGhlIHN0b3JlZCBsZXZlbCBpcyBub3QgdmFsaWQsIHRyZWF0IGl0IGFzIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0ICAgICAgICAgIGlmIChzZWxmLmxldmVsc1tzdG9yZWRMZXZlbF0gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIHJldHVybiBzdG9yZWRMZXZlbDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLypcblx0ICAgICAgICpcblx0ICAgICAgICogUHVibGljIEFQSVxuXHQgICAgICAgKlxuXHQgICAgICAgKi9cblx0XG5cdCAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxuXHQgICAgICAgICAgXCJFUlJPUlwiOiA0LCBcIlNJTEVOVFwiOiA1fTtcblx0XG5cdCAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XG5cdFxuXHQgICAgICBzZWxmLmdldExldmVsID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgcmV0dXJuIGN1cnJlbnRMZXZlbDtcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHNlbGYuc2V0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwsIHBlcnNpc3QpIHtcblx0ICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwic3RyaW5nXCIgJiYgc2VsZi5sZXZlbHNbbGV2ZWwudG9VcHBlckNhc2UoKV0gIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgIGxldmVsID0gc2VsZi5sZXZlbHNbbGV2ZWwudG9VcHBlckNhc2UoKV07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcIm51bWJlclwiICYmIGxldmVsID49IDAgJiYgbGV2ZWwgPD0gc2VsZi5sZXZlbHMuU0lMRU5UKSB7XG5cdCAgICAgICAgICAgICAgY3VycmVudExldmVsID0gbGV2ZWw7XG5cdCAgICAgICAgICAgICAgaWYgKHBlcnNpc3QgIT09IGZhbHNlKSB7ICAvLyBkZWZhdWx0cyB0byB0cnVlXG5cdCAgICAgICAgICAgICAgICAgIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWwpO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmLCBsZXZlbCwgbmFtZSk7XG5cdCAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlICYmIGxldmVsIDwgc2VsZi5sZXZlbHMuU0lMRU5UKSB7XG5cdCAgICAgICAgICAgICAgICAgIHJldHVybiBcIk5vIGNvbnNvbGUgYXZhaWxhYmxlIGZvciBsb2dnaW5nXCI7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICB0aHJvdyBcImxvZy5zZXRMZXZlbCgpIGNhbGxlZCB3aXRoIGludmFsaWQgbGV2ZWw6IFwiICsgbGV2ZWw7XG5cdCAgICAgICAgICB9XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICBzZWxmLnNldERlZmF1bHRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHQgICAgICAgICAgaWYgKCFnZXRQZXJzaXN0ZWRMZXZlbCgpKSB7XG5cdCAgICAgICAgICAgICAgc2VsZi5zZXRMZXZlbChsZXZlbCwgZmFsc2UpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG5cdCAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlRSQUNFLCBwZXJzaXN0KTtcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHNlbGYuZGlzYWJsZUFsbCA9IGZ1bmN0aW9uKHBlcnNpc3QpIHtcblx0ICAgICAgICAgIHNlbGYuc2V0TGV2ZWwoc2VsZi5sZXZlbHMuU0lMRU5ULCBwZXJzaXN0KTtcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIC8vIEluaXRpYWxpemUgd2l0aCB0aGUgcmlnaHQgbGV2ZWxcblx0ICAgICAgdmFyIGluaXRpYWxMZXZlbCA9IGdldFBlcnNpc3RlZExldmVsKCk7XG5cdCAgICAgIGlmIChpbml0aWFsTGV2ZWwgPT0gbnVsbCkge1xuXHQgICAgICAgICAgaW5pdGlhbExldmVsID0gZGVmYXVsdExldmVsID09IG51bGwgPyBcIldBUk5cIiA6IGRlZmF1bHRMZXZlbDtcblx0ICAgICAgfVxuXHQgICAgICBzZWxmLnNldExldmVsKGluaXRpYWxMZXZlbCwgZmFsc2UpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qXG5cdCAgICAgKlxuXHQgICAgICogUGFja2FnZS1sZXZlbCBBUElcblx0ICAgICAqXG5cdCAgICAgKi9cblx0XG5cdCAgICB2YXIgZGVmYXVsdExvZ2dlciA9IG5ldyBMb2dnZXIoKTtcblx0XG5cdCAgICB2YXIgX2xvZ2dlcnNCeU5hbWUgPSB7fTtcblx0ICAgIGRlZmF1bHRMb2dnZXIuZ2V0TG9nZ2VyID0gZnVuY3Rpb24gZ2V0TG9nZ2VyKG5hbWUpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIgfHwgbmFtZSA9PT0gXCJcIikge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci5cIik7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV07XG5cdCAgICAgICAgaWYgKCFsb2dnZXIpIHtcblx0ICAgICAgICAgIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdID0gbmV3IExvZ2dlcihcblx0ICAgICAgICAgICAgbmFtZSwgZGVmYXVsdExvZ2dlci5nZXRMZXZlbCgpLCBkZWZhdWx0TG9nZ2VyLm1ldGhvZEZhY3RvcnkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbG9nZ2VyO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBHcmFiIHRoZSBjdXJyZW50IGdsb2JhbCBsb2cgdmFyaWFibGUgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0ICAgIHZhciBfbG9nID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpID8gd2luZG93LmxvZyA6IHVuZGVmaW5lZDtcblx0ICAgIGRlZmF1bHRMb2dnZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlICYmXG5cdCAgICAgICAgICAgICAgIHdpbmRvdy5sb2cgPT09IGRlZmF1bHRMb2dnZXIpIHtcblx0ICAgICAgICAgICAgd2luZG93LmxvZyA9IF9sb2c7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG5cdH0pKTtcblxuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187IWZ1bmN0aW9uKCkge1xuXHQgIHZhciBkMyA9IHtcblx0ICAgIHZlcnNpb246IFwiMy41LjE3XCJcblx0ICB9O1xuXHQgIHZhciBkM19hcnJheVNsaWNlID0gW10uc2xpY2UsIGQzX2FycmF5ID0gZnVuY3Rpb24obGlzdCkge1xuXHQgICAgcmV0dXJuIGQzX2FycmF5U2xpY2UuY2FsbChsaXN0KTtcblx0ICB9O1xuXHQgIHZhciBkM19kb2N1bWVudCA9IHRoaXMuZG9jdW1lbnQ7XG5cdCAgZnVuY3Rpb24gZDNfZG9jdW1lbnRFbGVtZW50KG5vZGUpIHtcblx0ICAgIHJldHVybiBub2RlICYmIChub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZS5kb2N1bWVudCB8fCBub2RlKS5kb2N1bWVudEVsZW1lbnQ7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3dpbmRvdyhub2RlKSB7XG5cdCAgICByZXR1cm4gbm9kZSAmJiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCBub2RlLmRvY3VtZW50ICYmIG5vZGUgfHwgbm9kZS5kZWZhdWx0Vmlldyk7XG5cdCAgfVxuXHQgIGlmIChkM19kb2N1bWVudCkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgZDNfYXJyYXkoZDNfZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNoaWxkTm9kZXMpWzBdLm5vZGVUeXBlO1xuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICBkM19hcnJheSA9IGZ1bmN0aW9uKGxpc3QpIHtcblx0ICAgICAgICB2YXIgaSA9IGxpc3QubGVuZ3RoLCBhcnJheSA9IG5ldyBBcnJheShpKTtcblx0ICAgICAgICB3aGlsZSAoaS0tKSBhcnJheVtpXSA9IGxpc3RbaV07XG5cdCAgICAgICAgcmV0dXJuIGFycmF5O1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgIH1cblx0ICBpZiAoIURhdGUubm93KSBEYXRlLm5vdyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuICtuZXcgRGF0ZSgpO1xuXHQgIH07XG5cdCAgaWYgKGQzX2RvY3VtZW50KSB7XG5cdCAgICB0cnkge1xuXHQgICAgICBkM19kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLnN0eWxlLnNldFByb3BlcnR5KFwib3BhY2l0eVwiLCAwLCBcIlwiKTtcblx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG5cdCAgICAgIHZhciBkM19lbGVtZW50X3Byb3RvdHlwZSA9IHRoaXMuRWxlbWVudC5wcm90b3R5cGUsIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlID0gZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlLCBkM19lbGVtZW50X3NldEF0dHJpYnV0ZU5TID0gZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMsIGQzX3N0eWxlX3Byb3RvdHlwZSA9IHRoaXMuQ1NTU3R5bGVEZWNsYXJhdGlvbi5wcm90b3R5cGUsIGQzX3N0eWxlX3NldFByb3BlcnR5ID0gZDNfc3R5bGVfcHJvdG90eXBlLnNldFByb3BlcnR5O1xuXHQgICAgICBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHQgICAgICAgIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSwgdmFsdWUgKyBcIlwiKTtcblx0ICAgICAgfTtcblx0ICAgICAgZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMgPSBmdW5jdGlvbihzcGFjZSwgbG9jYWwsIHZhbHVlKSB7XG5cdCAgICAgICAgZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGVOUy5jYWxsKHRoaXMsIHNwYWNlLCBsb2NhbCwgdmFsdWUgKyBcIlwiKTtcblx0ICAgICAgfTtcblx0ICAgICAgZDNfc3R5bGVfcHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG5cdCAgICAgICAgZDNfc3R5bGVfc2V0UHJvcGVydHkuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSArIFwiXCIsIHByaW9yaXR5KTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZDMuYXNjZW5kaW5nID0gZDNfYXNjZW5kaW5nO1xuXHQgIGZ1bmN0aW9uIGQzX2FzY2VuZGluZyhhLCBiKSB7XG5cdCAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG5cdCAgfVxuXHQgIGQzLmRlc2NlbmRpbmcgPSBmdW5jdGlvbihhLCBiKSB7XG5cdCAgICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG5cdCAgfTtcblx0ICBkMy5taW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuXHQgICAgdmFyIGkgPSAtMSwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgYjtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcblx0ICAgICAgICBhID0gYjtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYSA+IGIpIGEgPSBiO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPj0gYikge1xuXHQgICAgICAgIGEgPSBiO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBhID4gYikgYSA9IGI7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gYTtcblx0ICB9O1xuXHQgIGQzLm1heCA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG5cdCAgICB2YXIgaSA9IC0xLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBiO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikge1xuXHQgICAgICAgIGEgPSBiO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID4gYSkgYSA9IGI7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYiA+PSBiKSB7XG5cdCAgICAgICAgYSA9IGI7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPiBhKSBhID0gYjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBhO1xuXHQgIH07XG5cdCAgZDMuZXh0ZW50ID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcblx0ICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGEsIGIsIGM7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+PSBiKSB7XG5cdCAgICAgICAgYSA9IGMgPSBiO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCkge1xuXHQgICAgICAgIGlmIChhID4gYikgYSA9IGI7XG5cdCAgICAgICAgaWYgKGMgPCBiKSBjID0gYjtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPj0gYikge1xuXHQgICAgICAgIGEgPSBjID0gYjtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwpIHtcblx0ICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuXHQgICAgICAgIGlmIChjIDwgYikgYyA9IGI7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBbIGEsIGMgXTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX251bWJlcih4KSB7XG5cdCAgICByZXR1cm4geCA9PT0gbnVsbCA/IE5hTiA6ICt4O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19udW1lcmljKHgpIHtcblx0ICAgIHJldHVybiAhaXNOYU4oeCk7XG5cdCAgfVxuXHQgIGQzLnN1bSA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG5cdCAgICB2YXIgcyA9IDAsIG4gPSBhcnJheS5sZW5ndGgsIGEsIGkgPSAtMTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gK2FycmF5W2ldKSkgcyArPSBhO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSArZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSBzICs9IGE7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcztcblx0ICB9O1xuXHQgIGQzLm1lYW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuXHQgICAgdmFyIHMgPSAwLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBpID0gLTEsIGogPSBuO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkgcyArPSBhOyBlbHNlIC0tajtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSkpIHMgKz0gYTsgZWxzZSAtLWo7XG5cdCAgICB9XG5cdCAgICBpZiAoaikgcmV0dXJuIHMgLyBqO1xuXHQgIH07XG5cdCAgZDMucXVhbnRpbGUgPSBmdW5jdGlvbih2YWx1ZXMsIHApIHtcblx0ICAgIHZhciBIID0gKHZhbHVlcy5sZW5ndGggLSAxKSAqIHAgKyAxLCBoID0gTWF0aC5mbG9vcihIKSwgdiA9ICt2YWx1ZXNbaCAtIDFdLCBlID0gSCAtIGg7XG5cdCAgICByZXR1cm4gZSA/IHYgKyBlICogKHZhbHVlc1toXSAtIHYpIDogdjtcblx0ICB9O1xuXHQgIGQzLm1lZGlhbiA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG5cdCAgICB2YXIgbnVtYmVycyA9IFtdLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBpID0gLTE7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihhcnJheVtpXSkpKSBudW1iZXJzLnB1c2goYSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSBudW1iZXJzLnB1c2goYSk7XG5cdCAgICB9XG5cdCAgICBpZiAobnVtYmVycy5sZW5ndGgpIHJldHVybiBkMy5xdWFudGlsZShudW1iZXJzLnNvcnQoZDNfYXNjZW5kaW5nKSwgLjUpO1xuXHQgIH07XG5cdCAgZDMudmFyaWFuY2UgPSBmdW5jdGlvbihhcnJheSwgZikge1xuXHQgICAgdmFyIG4gPSBhcnJheS5sZW5ndGgsIG0gPSAwLCBhLCBkLCBzID0gMCwgaSA9IC0xLCBqID0gMDtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihhcnJheVtpXSkpKSB7XG5cdCAgICAgICAgICBkID0gYSAtIG07XG5cdCAgICAgICAgICBtICs9IGQgLyArK2o7XG5cdCAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSkpIHtcblx0ICAgICAgICAgIGQgPSBhIC0gbTtcblx0ICAgICAgICAgIG0gKz0gZCAvICsrajtcblx0ICAgICAgICAgIHMgKz0gZCAqIChhIC0gbSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoaiA+IDEpIHJldHVybiBzIC8gKGogLSAxKTtcblx0ICB9O1xuXHQgIGQzLmRldmlhdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHYgPSBkMy52YXJpYW5jZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfYmlzZWN0b3IoY29tcGFyZSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG5cdCAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBsbyA9IDA7XG5cdCAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSBoaSA9IGEubGVuZ3RoO1xuXHQgICAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG5cdCAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcblx0ICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7IGVsc2UgaGkgPSBtaWQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBsbztcblx0ICAgICAgfSxcblx0ICAgICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuXHQgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgbG8gPSAwO1xuXHQgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkgaGkgPSBhLmxlbmd0aDtcblx0ICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuXHQgICAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG5cdCAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7IGVsc2UgbG8gPSBtaWQgKyAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbG87XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXHQgIHZhciBkM19iaXNlY3QgPSBkM19iaXNlY3RvcihkM19hc2NlbmRpbmcpO1xuXHQgIGQzLmJpc2VjdExlZnQgPSBkM19iaXNlY3QubGVmdDtcblx0ICBkMy5iaXNlY3QgPSBkMy5iaXNlY3RSaWdodCA9IGQzX2Jpc2VjdC5yaWdodDtcblx0ICBkMy5iaXNlY3RvciA9IGZ1bmN0aW9uKGYpIHtcblx0ICAgIHJldHVybiBkM19iaXNlY3RvcihmLmxlbmd0aCA9PT0gMSA/IGZ1bmN0aW9uKGQsIHgpIHtcblx0ICAgICAgcmV0dXJuIGQzX2FzY2VuZGluZyhmKGQpLCB4KTtcblx0ICAgIH0gOiBmKTtcblx0ICB9O1xuXHQgIGQzLnNodWZmbGUgPSBmdW5jdGlvbihhcnJheSwgaTAsIGkxKSB7XG5cdCAgICBpZiAoKG0gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDMpIHtcblx0ICAgICAgaTEgPSBhcnJheS5sZW5ndGg7XG5cdCAgICAgIGlmIChtIDwgMikgaTAgPSAwO1xuXHQgICAgfVxuXHQgICAgdmFyIG0gPSBpMSAtIGkwLCB0LCBpO1xuXHQgICAgd2hpbGUgKG0pIHtcblx0ICAgICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuXHQgICAgICB0ID0gYXJyYXlbbSArIGkwXSwgYXJyYXlbbSArIGkwXSA9IGFycmF5W2kgKyBpMF0sIGFycmF5W2kgKyBpMF0gPSB0O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGFycmF5O1xuXHQgIH07XG5cdCAgZDMucGVybXV0ZSA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG5cdCAgICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcblx0ICAgIHdoaWxlIChpLS0pIHBlcm11dGVzW2ldID0gYXJyYXlbaW5kZXhlc1tpXV07XG5cdCAgICByZXR1cm4gcGVybXV0ZXM7XG5cdCAgfTtcblx0ICBkMy5wYWlycyA9IGZ1bmN0aW9uKGFycmF5KSB7XG5cdCAgICB2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGggLSAxLCBwMCwgcDEgPSBhcnJheVswXSwgcGFpcnMgPSBuZXcgQXJyYXkobiA8IDAgPyAwIDogbik7XG5cdCAgICB3aGlsZSAoaSA8IG4pIHBhaXJzW2ldID0gWyBwMCA9IHAxLCBwMSA9IGFycmF5WysraV0gXTtcblx0ICAgIHJldHVybiBwYWlycztcblx0ICB9O1xuXHQgIGQzLnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCkge1xuXHQgICAgaWYgKCEobiA9IG1hdHJpeC5sZW5ndGgpKSByZXR1cm4gW107XG5cdCAgICBmb3IgKHZhciBpID0gLTEsIG0gPSBkMy5taW4obWF0cml4LCBkM190cmFuc3Bvc2VMZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07ICkge1xuXHQgICAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjsgKSB7XG5cdCAgICAgICAgcm93W2pdID0gbWF0cml4W2pdW2ldO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdHJhbnNwb3NlO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfdHJhbnNwb3NlTGVuZ3RoKGQpIHtcblx0ICAgIHJldHVybiBkLmxlbmd0aDtcblx0ICB9XG5cdCAgZDMuemlwID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDMudHJhbnNwb3NlKGFyZ3VtZW50cyk7XG5cdCAgfTtcblx0ICBkMy5rZXlzID0gZnVuY3Rpb24obWFwKSB7XG5cdCAgICB2YXIga2V5cyA9IFtdO1xuXHQgICAgZm9yICh2YXIga2V5IGluIG1hcCkga2V5cy5wdXNoKGtleSk7XG5cdCAgICByZXR1cm4ga2V5cztcblx0ICB9O1xuXHQgIGQzLnZhbHVlcyA9IGZ1bmN0aW9uKG1hcCkge1xuXHQgICAgdmFyIHZhbHVlcyA9IFtdO1xuXHQgICAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuXHQgICAgcmV0dXJuIHZhbHVlcztcblx0ICB9O1xuXHQgIGQzLmVudHJpZXMgPSBmdW5jdGlvbihtYXApIHtcblx0ICAgIHZhciBlbnRyaWVzID0gW107XG5cdCAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe1xuXHQgICAgICBrZXk6IGtleSxcblx0ICAgICAgdmFsdWU6IG1hcFtrZXldXG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBlbnRyaWVzO1xuXHQgIH07XG5cdCAgZDMubWVyZ2UgPSBmdW5jdGlvbihhcnJheXMpIHtcblx0ICAgIHZhciBuID0gYXJyYXlzLmxlbmd0aCwgbSwgaSA9IC0xLCBqID0gMCwgbWVyZ2VkLCBhcnJheTtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSBqICs9IGFycmF5c1tpXS5sZW5ndGg7XG5cdCAgICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cdCAgICB3aGlsZSAoLS1uID49IDApIHtcblx0ICAgICAgYXJyYXkgPSBhcnJheXNbbl07XG5cdCAgICAgIG0gPSBhcnJheS5sZW5ndGg7XG5cdCAgICAgIHdoaWxlICgtLW0gPj0gMCkge1xuXHQgICAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBtZXJnZWQ7XG5cdCAgfTtcblx0ICB2YXIgYWJzID0gTWF0aC5hYnM7XG5cdCAgZDMucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG5cdCAgICAgIHN0ZXAgPSAxO1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0ICAgICAgICBzdG9wID0gc3RhcnQ7XG5cdCAgICAgICAgc3RhcnQgPSAwO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoKHN0b3AgLSBzdGFydCkgLyBzdGVwID09PSBJbmZpbml0eSkgdGhyb3cgbmV3IEVycm9yKFwiaW5maW5pdGUgcmFuZ2VcIik7XG5cdCAgICB2YXIgcmFuZ2UgPSBbXSwgayA9IGQzX3JhbmdlX2ludGVnZXJTY2FsZShhYnMoc3RlcCkpLCBpID0gLTEsIGo7XG5cdCAgICBzdGFydCAqPSBrLCBzdG9wICo9IGssIHN0ZXAgKj0gaztcblx0ICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKChqID0gc3RhcnQgKyBzdGVwICogKytpKSA+IHN0b3ApIHJhbmdlLnB1c2goaiAvIGspOyBlbHNlIHdoaWxlICgoaiA9IHN0YXJ0ICsgc3RlcCAqICsraSkgPCBzdG9wKSByYW5nZS5wdXNoKGogLyBrKTtcblx0ICAgIHJldHVybiByYW5nZTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3JhbmdlX2ludGVnZXJTY2FsZSh4KSB7XG5cdCAgICB2YXIgayA9IDE7XG5cdCAgICB3aGlsZSAoeCAqIGsgJSAxKSBrICo9IDEwO1xuXHQgICAgcmV0dXJuIGs7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2NsYXNzKGN0b3IsIHByb3BlcnRpZXMpIHtcblx0ICAgIGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdG9yLnByb3RvdHlwZSwga2V5LCB7XG5cdCAgICAgICAgdmFsdWU6IHByb3BlcnRpZXNba2V5XSxcblx0ICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZDMubWFwID0gZnVuY3Rpb24ob2JqZWN0LCBmKSB7XG5cdCAgICB2YXIgbWFwID0gbmV3IGQzX01hcCgpO1xuXHQgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIGQzX01hcCkge1xuXHQgICAgICBvYmplY3QuZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdCAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuXHQgICAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aCwgbztcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7IGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZi5jYWxsKG9iamVjdCwgbyA9IG9iamVjdFtpXSwgaSksIG8pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBtYXA7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19NYXAoKSB7XG5cdCAgICB0aGlzLl8gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHQgIH1cblx0ICB2YXIgZDNfbWFwX3Byb3RvID0gXCJfX3Byb3RvX19cIiwgZDNfbWFwX3plcm8gPSBcIlxceDAwXCI7XG5cdCAgZDNfY2xhc3MoZDNfTWFwLCB7XG5cdCAgICBoYXM6IGQzX21hcF9oYXMsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fW2QzX21hcF9lc2NhcGUoa2V5KV07XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9bZDNfbWFwX2VzY2FwZShrZXkpXSA9IHZhbHVlO1xuXHQgICAgfSxcblx0ICAgIHJlbW92ZTogZDNfbWFwX3JlbW92ZSxcblx0ICAgIGtleXM6IGQzX21hcF9rZXlzLFxuXHQgICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSB2YWx1ZXMucHVzaCh0aGlzLl9ba2V5XSk7XG5cdCAgICAgIHJldHVybiB2YWx1ZXM7XG5cdCAgICB9LFxuXHQgICAgZW50cmllczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBlbnRyaWVzID0gW107XG5cdCAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIGVudHJpZXMucHVzaCh7XG5cdCAgICAgICAga2V5OiBkM19tYXBfdW5lc2NhcGUoa2V5KSxcblx0ICAgICAgICB2YWx1ZTogdGhpcy5fW2tleV1cblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBlbnRyaWVzO1xuXHQgICAgfSxcblx0ICAgIHNpemU6IGQzX21hcF9zaXplLFxuXHQgICAgZW1wdHk6IGQzX21hcF9lbXB0eSxcblx0ICAgIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHtcblx0ICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgZi5jYWxsKHRoaXMsIGQzX21hcF91bmVzY2FwZShrZXkpLCB0aGlzLl9ba2V5XSk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgZnVuY3Rpb24gZDNfbWFwX2VzY2FwZShrZXkpIHtcblx0ICAgIHJldHVybiAoa2V5ICs9IFwiXCIpID09PSBkM19tYXBfcHJvdG8gfHwga2V5WzBdID09PSBkM19tYXBfemVybyA/IGQzX21hcF96ZXJvICsga2V5IDoga2V5O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19tYXBfdW5lc2NhcGUoa2V5KSB7XG5cdCAgICByZXR1cm4gKGtleSArPSBcIlwiKVswXSA9PT0gZDNfbWFwX3plcm8gPyBrZXkuc2xpY2UoMSkgOiBrZXk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX21hcF9oYXMoa2V5KSB7XG5cdCAgICByZXR1cm4gZDNfbWFwX2VzY2FwZShrZXkpIGluIHRoaXMuXztcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbWFwX3JlbW92ZShrZXkpIHtcblx0ICAgIHJldHVybiAoa2V5ID0gZDNfbWFwX2VzY2FwZShrZXkpKSBpbiB0aGlzLl8gJiYgZGVsZXRlIHRoaXMuX1trZXldO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19tYXBfa2V5cygpIHtcblx0ICAgIHZhciBrZXlzID0gW107XG5cdCAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBrZXlzLnB1c2goZDNfbWFwX3VuZXNjYXBlKGtleSkpO1xuXHQgICAgcmV0dXJuIGtleXM7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX21hcF9zaXplKCkge1xuXHQgICAgdmFyIHNpemUgPSAwO1xuXHQgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgKytzaXplO1xuXHQgICAgcmV0dXJuIHNpemU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX21hcF9lbXB0eSgpIHtcblx0ICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIHJldHVybiBmYWxzZTtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICBkMy5uZXN0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgbmVzdCA9IHt9LCBrZXlzID0gW10sIHNvcnRLZXlzID0gW10sIHNvcnRWYWx1ZXMsIHJvbGx1cDtcblx0ICAgIGZ1bmN0aW9uIG1hcChtYXBUeXBlLCBhcnJheSwgZGVwdGgpIHtcblx0ICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gcm9sbHVwID8gcm9sbHVwLmNhbGwobmVzdCwgYXJyYXkpIDogc29ydFZhbHVlcyA/IGFycmF5LnNvcnQoc29ydFZhbHVlcykgOiBhcnJheTtcblx0ICAgICAgdmFyIGkgPSAtMSwgbiA9IGFycmF5Lmxlbmd0aCwga2V5ID0ga2V5c1tkZXB0aCsrXSwga2V5VmFsdWUsIG9iamVjdCwgc2V0dGVyLCB2YWx1ZXNCeUtleSA9IG5ldyBkM19NYXAoKSwgdmFsdWVzO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkob2JqZWN0ID0gYXJyYXlbaV0pKSkge1xuXHQgICAgICAgICAgdmFsdWVzLnB1c2gob2JqZWN0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbIG9iamVjdCBdKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG1hcFR5cGUpIHtcblx0ICAgICAgICBvYmplY3QgPSBtYXBUeXBlKCk7XG5cdCAgICAgICAgc2V0dGVyID0gZnVuY3Rpb24oa2V5VmFsdWUsIHZhbHVlcykge1xuXHQgICAgICAgICAgb2JqZWN0LnNldChrZXlWYWx1ZSwgbWFwKG1hcFR5cGUsIHZhbHVlcywgZGVwdGgpKTtcblx0ICAgICAgICB9O1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIG9iamVjdCA9IHt9O1xuXHQgICAgICAgIHNldHRlciA9IGZ1bmN0aW9uKGtleVZhbHVlLCB2YWx1ZXMpIHtcblx0ICAgICAgICAgIG9iamVjdFtrZXlWYWx1ZV0gPSBtYXAobWFwVHlwZSwgdmFsdWVzLCBkZXB0aCk7XG5cdCAgICAgICAgfTtcblx0ICAgICAgfVxuXHQgICAgICB2YWx1ZXNCeUtleS5mb3JFYWNoKHNldHRlcik7XG5cdCAgICAgIHJldHVybiBvYmplY3Q7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcblx0ICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuXHQgICAgICB2YXIgYXJyYXkgPSBbXSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoKytdO1xuXHQgICAgICBtYXAuZm9yRWFjaChmdW5jdGlvbihrZXksIGtleU1hcCkge1xuXHQgICAgICAgIGFycmF5LnB1c2goe1xuXHQgICAgICAgICAga2V5OiBrZXksXG5cdCAgICAgICAgICB2YWx1ZXM6IGVudHJpZXMoa2V5TWFwLCBkZXB0aClcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBzb3J0S2V5ID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTtcblx0ICAgICAgfSkgOiBhcnJheTtcblx0ICAgIH1cblx0ICAgIG5lc3QubWFwID0gZnVuY3Rpb24oYXJyYXksIG1hcFR5cGUpIHtcblx0ICAgICAgcmV0dXJuIG1hcChtYXBUeXBlLCBhcnJheSwgMCk7XG5cdCAgICB9O1xuXHQgICAgbmVzdC5lbnRyaWVzID0gZnVuY3Rpb24oYXJyYXkpIHtcblx0ICAgICAgcmV0dXJuIGVudHJpZXMobWFwKGQzLm1hcCwgYXJyYXksIDApLCAwKTtcblx0ICAgIH07XG5cdCAgICBuZXN0LmtleSA9IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAga2V5cy5wdXNoKGQpO1xuXHQgICAgICByZXR1cm4gbmVzdDtcblx0ICAgIH07XG5cdCAgICBuZXN0LnNvcnRLZXlzID0gZnVuY3Rpb24ob3JkZXIpIHtcblx0ICAgICAgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyO1xuXHQgICAgICByZXR1cm4gbmVzdDtcblx0ICAgIH07XG5cdCAgICBuZXN0LnNvcnRWYWx1ZXMgPSBmdW5jdGlvbihvcmRlcikge1xuXHQgICAgICBzb3J0VmFsdWVzID0gb3JkZXI7XG5cdCAgICAgIHJldHVybiBuZXN0O1xuXHQgICAgfTtcblx0ICAgIG5lc3Qucm9sbHVwID0gZnVuY3Rpb24oZikge1xuXHQgICAgICByb2xsdXAgPSBmO1xuXHQgICAgICByZXR1cm4gbmVzdDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gbmVzdDtcblx0ICB9O1xuXHQgIGQzLnNldCA9IGZ1bmN0aW9uKGFycmF5KSB7XG5cdCAgICB2YXIgc2V0ID0gbmV3IGQzX1NldCgpO1xuXHQgICAgaWYgKGFycmF5KSBmb3IgKHZhciBpID0gMCwgbiA9IGFycmF5Lmxlbmd0aDsgaSA8IG47ICsraSkgc2V0LmFkZChhcnJheVtpXSk7XG5cdCAgICByZXR1cm4gc2V0O1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfU2V0KCkge1xuXHQgICAgdGhpcy5fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0ICB9XG5cdCAgZDNfY2xhc3MoZDNfU2V0LCB7XG5cdCAgICBoYXM6IGQzX21hcF9oYXMsXG5cdCAgICBhZGQ6IGZ1bmN0aW9uKGtleSkge1xuXHQgICAgICB0aGlzLl9bZDNfbWFwX2VzY2FwZShrZXkgKz0gXCJcIildID0gdHJ1ZTtcblx0ICAgICAgcmV0dXJuIGtleTtcblx0ICAgIH0sXG5cdCAgICByZW1vdmU6IGQzX21hcF9yZW1vdmUsXG5cdCAgICB2YWx1ZXM6IGQzX21hcF9rZXlzLFxuXHQgICAgc2l6ZTogZDNfbWFwX3NpemUsXG5cdCAgICBlbXB0eTogZDNfbWFwX2VtcHR5LFxuXHQgICAgZm9yRWFjaDogZnVuY3Rpb24oZikge1xuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBmLmNhbGwodGhpcywgZDNfbWFwX3VuZXNjYXBlKGtleSkpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIGQzLmJlaGF2aW9yID0ge307XG5cdCAgZnVuY3Rpb24gZDNfaWRlbnRpdHkoZCkge1xuXHQgICAgcmV0dXJuIGQ7XG5cdCAgfVxuXHQgIGQzLnJlYmluZCA9IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlKSB7XG5cdCAgICB2YXIgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZXRob2Q7XG5cdCAgICB3aGlsZSAoKytpIDwgbikgdGFyZ2V0W21ldGhvZCA9IGFyZ3VtZW50c1tpXV0gPSBkM19yZWJpbmQodGFyZ2V0LCBzb3VyY2UsIHNvdXJjZVttZXRob2RdKTtcblx0ICAgIHJldHVybiB0YXJnZXQ7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19yZWJpbmQodGFyZ2V0LCBzb3VyY2UsIG1ldGhvZCkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgdmFsdWUgPSBtZXRob2QuYXBwbHkoc291cmNlLCBhcmd1bWVudHMpO1xuXHQgICAgICByZXR1cm4gdmFsdWUgPT09IHNvdXJjZSA/IHRhcmdldCA6IHZhbHVlO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdmVuZG9yU3ltYm9sKG9iamVjdCwgbmFtZSkge1xuXHQgICAgaWYgKG5hbWUgaW4gb2JqZWN0KSByZXR1cm4gbmFtZTtcblx0ICAgIG5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBuID0gZDNfdmVuZG9yUHJlZml4ZXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgIHZhciBwcmVmaXhOYW1lID0gZDNfdmVuZG9yUHJlZml4ZXNbaV0gKyBuYW1lO1xuXHQgICAgICBpZiAocHJlZml4TmFtZSBpbiBvYmplY3QpIHJldHVybiBwcmVmaXhOYW1lO1xuXHQgICAgfVxuXHQgIH1cblx0ICB2YXIgZDNfdmVuZG9yUHJlZml4ZXMgPSBbIFwid2Via2l0XCIsIFwibXNcIiwgXCJtb3pcIiwgXCJNb3pcIiwgXCJvXCIsIFwiT1wiIF07XG5cdCAgZnVuY3Rpb24gZDNfbm9vcCgpIHt9XG5cdCAgZDMuZGlzcGF0Y2ggPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBkaXNwYXRjaCA9IG5ldyBkM19kaXNwYXRjaCgpLCBpID0gLTEsIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIGRpc3BhdGNoW2FyZ3VtZW50c1tpXV0gPSBkM19kaXNwYXRjaF9ldmVudChkaXNwYXRjaCk7XG5cdCAgICByZXR1cm4gZGlzcGF0Y2g7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19kaXNwYXRjaCgpIHt9XG5cdCAgZDNfZGlzcGF0Y2gucHJvdG90eXBlLm9uID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcblx0ICAgIHZhciBpID0gdHlwZS5pbmRleE9mKFwiLlwiKSwgbmFtZSA9IFwiXCI7XG5cdCAgICBpZiAoaSA+PSAwKSB7XG5cdCAgICAgIG5hbWUgPSB0eXBlLnNsaWNlKGkgKyAxKTtcblx0ICAgICAgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSk7XG5cdCAgICB9XG5cdCAgICBpZiAodHlwZSkgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdGhpc1t0eXBlXS5vbihuYW1lKSA6IHRoaXNbdHlwZV0ub24obmFtZSwgbGlzdGVuZXIpO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcblx0ICAgICAgaWYgKGxpc3RlbmVyID09IG51bGwpIGZvciAodHlwZSBpbiB0aGlzKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkodHlwZSkpIHRoaXNbdHlwZV0ub24obmFtZSwgbnVsbCk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19kaXNwYXRjaF9ldmVudChkaXNwYXRjaCkge1xuXHQgICAgdmFyIGxpc3RlbmVycyA9IFtdLCBsaXN0ZW5lckJ5TmFtZSA9IG5ldyBkM19NYXAoKTtcblx0ICAgIGZ1bmN0aW9uIGV2ZW50KCkge1xuXHQgICAgICB2YXIgeiA9IGxpc3RlbmVycywgaSA9IC0xLCBuID0gei5sZW5ndGgsIGw7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAobCA9IHpbaV0ub24pIGwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgcmV0dXJuIGRpc3BhdGNoO1xuXHQgICAgfVxuXHQgICAgZXZlbnQub24gPSBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuXHQgICAgICB2YXIgbCA9IGxpc3RlbmVyQnlOYW1lLmdldChuYW1lKSwgaTtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gbCAmJiBsLm9uO1xuXHQgICAgICBpZiAobCkge1xuXHQgICAgICAgIGwub24gPSBudWxsO1xuXHQgICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwLCBpID0gbGlzdGVuZXJzLmluZGV4T2YobCkpLmNvbmNhdChsaXN0ZW5lcnMuc2xpY2UoaSArIDEpKTtcblx0ICAgICAgICBsaXN0ZW5lckJ5TmFtZS5yZW1vdmUobmFtZSk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGxpc3RlbmVyKSBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lckJ5TmFtZS5zZXQobmFtZSwge1xuXHQgICAgICAgIG9uOiBsaXN0ZW5lclxuXHQgICAgICB9KSk7XG5cdCAgICAgIHJldHVybiBkaXNwYXRjaDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZXZlbnQ7XG5cdCAgfVxuXHQgIGQzLmV2ZW50ID0gbnVsbDtcblx0ICBmdW5jdGlvbiBkM19ldmVudFByZXZlbnREZWZhdWx0KCkge1xuXHQgICAgZDMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZXZlbnRTb3VyY2UoKSB7XG5cdCAgICB2YXIgZSA9IGQzLmV2ZW50LCBzO1xuXHQgICAgd2hpbGUgKHMgPSBlLnNvdXJjZUV2ZW50KSBlID0gcztcblx0ICAgIHJldHVybiBlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19ldmVudERpc3BhdGNoKHRhcmdldCkge1xuXHQgICAgdmFyIGRpc3BhdGNoID0gbmV3IGQzX2Rpc3BhdGNoKCksIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpO1xuXHQgICAgZGlzcGF0Y2gub2YgPSBmdW5jdGlvbih0aGl6LCBhcmd1bWVudHopIHtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUxKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIHZhciBlMCA9IGUxLnNvdXJjZUV2ZW50ID0gZDMuZXZlbnQ7XG5cdCAgICAgICAgICBlMS50YXJnZXQgPSB0YXJnZXQ7XG5cdCAgICAgICAgICBkMy5ldmVudCA9IGUxO1xuXHQgICAgICAgICAgZGlzcGF0Y2hbZTEudHlwZV0uYXBwbHkodGhpeiwgYXJndW1lbnR6KTtcblx0ICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgZDMuZXZlbnQgPSBlMDtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGRpc3BhdGNoO1xuXHQgIH1cblx0ICBkMy5yZXF1b3RlID0gZnVuY3Rpb24ocykge1xuXHQgICAgcmV0dXJuIHMucmVwbGFjZShkM19yZXF1b3RlX3JlLCBcIlxcXFwkJlwiKTtcblx0ICB9O1xuXHQgIHZhciBkM19yZXF1b3RlX3JlID0gL1tcXFxcXFxeXFwkXFwqXFwrXFw/XFx8XFxbXFxdXFwoXFwpXFwuXFx7XFx9XS9nO1xuXHQgIHZhciBkM19zdWJjbGFzcyA9IHt9Ll9fcHJvdG9fXyA/IGZ1bmN0aW9uKG9iamVjdCwgcHJvdG90eXBlKSB7XG5cdCAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuXHQgIH0gOiBmdW5jdGlvbihvYmplY3QsIHByb3RvdHlwZSkge1xuXHQgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvdG90eXBlKSBvYmplY3RbcHJvcGVydHldID0gcHJvdG90eXBlW3Byb3BlcnR5XTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbihncm91cHMpIHtcblx0ICAgIGQzX3N1YmNsYXNzKGdyb3VwcywgZDNfc2VsZWN0aW9uUHJvdG90eXBlKTtcblx0ICAgIHJldHVybiBncm91cHM7XG5cdCAgfVxuXHQgIHZhciBkM19zZWxlY3QgPSBmdW5jdGlvbihzLCBuKSB7XG5cdCAgICByZXR1cm4gbi5xdWVyeVNlbGVjdG9yKHMpO1xuXHQgIH0sIGQzX3NlbGVjdEFsbCA9IGZ1bmN0aW9uKHMsIG4pIHtcblx0ICAgIHJldHVybiBuLnF1ZXJ5U2VsZWN0b3JBbGwocyk7XG5cdCAgfSwgZDNfc2VsZWN0TWF0Y2hlcyA9IGZ1bmN0aW9uKG4sIHMpIHtcblx0ICAgIHZhciBkM19zZWxlY3RNYXRjaGVyID0gbi5tYXRjaGVzIHx8IG5bZDNfdmVuZG9yU3ltYm9sKG4sIFwibWF0Y2hlc1NlbGVjdG9yXCIpXTtcblx0ICAgIGQzX3NlbGVjdE1hdGNoZXMgPSBmdW5jdGlvbihuLCBzKSB7XG5cdCAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVyLmNhbGwobiwgcyk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGQzX3NlbGVjdE1hdGNoZXMobiwgcyk7XG5cdCAgfTtcblx0ICBpZiAodHlwZW9mIFNpenpsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdCAgICBkM19zZWxlY3QgPSBmdW5jdGlvbihzLCBuKSB7XG5cdCAgICAgIHJldHVybiBTaXp6bGUocywgbilbMF0gfHwgbnVsbDtcblx0ICAgIH07XG5cdCAgICBkM19zZWxlY3RBbGwgPSBTaXp6bGU7XG5cdCAgICBkM19zZWxlY3RNYXRjaGVzID0gU2l6emxlLm1hdGNoZXNTZWxlY3Rvcjtcblx0ICB9XG5cdCAgZDMuc2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDMuc2VsZWN0KGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG5cdCAgfTtcblx0ICB2YXIgZDNfc2VsZWN0aW9uUHJvdG90eXBlID0gZDMuc2VsZWN0aW9uLnByb3RvdHlwZSA9IFtdO1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuXHQgICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgc3Vibm9kZSwgZ3JvdXAsIG5vZGU7XG5cdCAgICBzZWxlY3RvciA9IGQzX3NlbGVjdGlvbl9zZWxlY3RvcihzZWxlY3Rvcik7XG5cdCAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG5cdCAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuXHQgICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gKGdyb3VwID0gdGhpc1tqXSkucGFyZW50Tm9kZTtcblx0ICAgICAgZm9yICh2YXIgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcblx0ICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG5cdCAgICAgICAgICBzdWJncm91cC5wdXNoKHN1Ym5vZGUgPSBzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKTtcblx0ICAgICAgICAgIGlmIChzdWJub2RlICYmIFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9zZWxlY3RvcihzZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0b3IgOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NlbGVjdChzZWxlY3RvciwgdGhpcyk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0ICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIG5vZGU7XG5cdCAgICBzZWxlY3RvciA9IGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cdCAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG5cdCAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcblx0ICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG5cdCAgICAgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IGQzX2FycmF5KHNlbGVjdG9yLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpKTtcblx0ICAgICAgICAgIHN1Ymdyb3VwLnBhcmVudE5vZGUgPSBub2RlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3NlbGVjdG9yQWxsKHNlbGVjdG9yKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3RvciA6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfc2VsZWN0QWxsKHNlbGVjdG9yLCB0aGlzKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIHZhciBkM19uc1hodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cdCAgdmFyIGQzX25zUHJlZml4ID0ge1xuXHQgICAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG5cdCAgICB4aHRtbDogZDNfbnNYaHRtbCxcblx0ICAgIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcblx0ICAgIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcblx0ICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcblx0ICB9O1xuXHQgIGQzLm5zID0ge1xuXHQgICAgcHJlZml4OiBkM19uc1ByZWZpeCxcblx0ICAgIHF1YWxpZnk6IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoXCI6XCIpLCBwcmVmaXggPSBuYW1lO1xuXHQgICAgICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG5cdCAgICAgIHJldHVybiBkM19uc1ByZWZpeC5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge1xuXHQgICAgICAgIHNwYWNlOiBkM19uc1ByZWZpeFtwcmVmaXhdLFxuXHQgICAgICAgIGxvY2FsOiBuYW1lXG5cdCAgICAgIH0gOiBuYW1lO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmF0dHIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG5cdCAgICAgICAgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSk7XG5cdCAgICAgICAgcmV0dXJuIG5hbWUubG9jYWwgPyBub2RlLmdldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpIDogbm9kZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2F0dHIodmFsdWUsIG5hbWVbdmFsdWVdKSk7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2F0dHIobmFtZSwgdmFsdWUpIHtcblx0ICAgIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpO1xuXHQgICAgZnVuY3Rpb24gYXR0ck51bGwoKSB7XG5cdCAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXR0ck51bGxOUygpIHtcblx0ICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGF0dHJDb25zdGFudCgpIHtcblx0ICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoKSB7XG5cdCAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgdmFsdWUpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHgpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoKSB7XG5cdCAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgaWYgKHggPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTsgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIHgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBuYW1lLmxvY2FsID8gYXR0ck51bGxOUyA6IGF0dHJOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24gOiBuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQ7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2NvbGxhcHNlKHMpIHtcblx0ICAgIHJldHVybiBzLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcblx0ICB9XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmNsYXNzZWQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCksIG4gPSAobmFtZSA9IGQzX3NlbGVjdGlvbl9jbGFzc2VzKG5hbWUpKS5sZW5ndGgsIGkgPSAtMTtcblx0ICAgICAgICBpZiAodmFsdWUgPSBub2RlLmNsYXNzTGlzdCkge1xuXHQgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghdmFsdWUuY29udGFpbnMobmFtZVtpXSkpIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuXHQgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lW2ldKS50ZXN0KHZhbHVlKSkgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgICBmb3IgKHZhbHVlIGluIG5hbWUpIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fY2xhc3NlZCh2YWx1ZSwgbmFtZVt2YWx1ZV0pKTtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9jbGFzc2VkKG5hbWUsIHZhbHVlKSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fY2xhc3NlZFJlKG5hbWUpIHtcblx0ICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKD86XnxcXFxccyspXCIgKyBkMy5yZXF1b3RlKG5hbWUpICsgXCIoPzpcXFxccyt8JClcIiwgXCJnXCIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fY2xhc3NlcyhuYW1lKSB7XG5cdCAgICByZXR1cm4gKG5hbWUgKyBcIlwiKS50cmltKCkuc3BsaXQoL158XFxzKy8pO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fY2xhc3NlZChuYW1lLCB2YWx1ZSkge1xuXHQgICAgbmFtZSA9IGQzX3NlbGVjdGlvbl9jbGFzc2VzKG5hbWUpLm1hcChkM19zZWxlY3Rpb25fY2xhc3NlZE5hbWUpO1xuXHQgICAgdmFyIG4gPSBuYW1lLmxlbmd0aDtcblx0ICAgIGZ1bmN0aW9uIGNsYXNzZWRDb25zdGFudCgpIHtcblx0ICAgICAgdmFyIGkgPSAtMTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgdmFsdWUpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgaSA9IC0xLCB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgeCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzc2VkRnVuY3Rpb24gOiBjbGFzc2VkQ29uc3RhbnQ7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jbGFzc2VkTmFtZShuYW1lKSB7XG5cdCAgICB2YXIgcmUgPSBkM19zZWxlY3Rpb25fY2xhc3NlZFJlKG5hbWUpO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG5cdCAgICAgIGlmIChjID0gbm9kZS5jbGFzc0xpc3QpIHJldHVybiB2YWx1ZSA/IGMuYWRkKG5hbWUpIDogYy5yZW1vdmUobmFtZSk7XG5cdCAgICAgIHZhciBjID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuXHQgICAgICBpZiAodmFsdWUpIHtcblx0ICAgICAgICByZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgICAgIGlmICghcmUudGVzdChjKSkgbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBkM19jb2xsYXBzZShjICsgXCIgXCIgKyBuYW1lKSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBkM19jb2xsYXBzZShjLnJlcGxhY2UocmUsIFwiIFwiKSkpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcblx0ICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgIGlmIChuIDwgMykge1xuXHQgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcblx0ICAgICAgICBpZiAobiA8IDIpIHZhbHVlID0gXCJcIjtcblx0ICAgICAgICBmb3IgKHByaW9yaXR5IGluIG5hbWUpIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fc3R5bGUocHJpb3JpdHksIG5hbWVbcHJpb3JpdHldLCB2YWx1ZSkpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChuIDwgMikge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG5cdCAgICAgICAgcmV0dXJuIGQzX3dpbmRvdyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG5cdCAgICAgIH1cblx0ICAgICAgcHJpb3JpdHkgPSBcIlwiO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fc3R5bGUobmFtZSwgdmFsdWUsIHByaW9yaXR5KSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc3R5bGUobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG5cdCAgICBmdW5jdGlvbiBzdHlsZU51bGwoKSB7XG5cdCAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzdHlsZUNvbnN0YW50KCkge1xuXHQgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIGlmICh4ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7IGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB4LCBwcmlvcml0eSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVGdW5jdGlvbiA6IHN0eWxlQ29uc3RhbnQ7XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5wcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSByZXR1cm4gdGhpcy5ub2RlKClbbmFtZV07XG5cdCAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9wcm9wZXJ0eSh2YWx1ZSwgbmFtZVt2YWx1ZV0pKTtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9wcm9wZXJ0eShuYW1lLCB2YWx1ZSkpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG5cdCAgICBmdW5jdGlvbiBwcm9wZXJ0eU51bGwoKSB7XG5cdCAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudCgpIHtcblx0ICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICBpZiAoeCA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTsgZWxzZSB0aGlzW25hbWVdID0geDtcblx0ICAgIH1cblx0ICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gcHJvcGVydHlOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wZXJ0eUZ1bmN0aW9uIDogcHJvcGVydHlDb25zdGFudDtcblx0ICB9XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLmVhY2godHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG5cdCAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcblx0ICAgIH0gOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHQgICAgfSkgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcblx0ICB9O1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5lYWNoKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcblx0ICAgIH0gOiB2YWx1ZSA9PSBudWxsID8gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcblx0ICAgIH0gOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcblx0ICAgIH0pIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIG5hbWUgPSBkM19zZWxlY3Rpb25fY3JlYXRvcihuYW1lKTtcblx0ICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQobmFtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NyZWF0b3IobmFtZSkge1xuXHQgICAgZnVuY3Rpb24gY3JlYXRlKCkge1xuXHQgICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsIG5hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuXHQgICAgICByZXR1cm4gbmFtZXNwYWNlID09PSBkM19uc1hodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IGQzX25zWGh0bWwgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgbmFtZSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBjcmVhdGVOUygpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiAobmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSkpLmxvY2FsID8gY3JlYXRlTlMgOiBjcmVhdGU7XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcblx0ICAgIG5hbWUgPSBkM19zZWxlY3Rpb25fY3JlYXRvcihuYW1lKTtcblx0ICAgIGJlZm9yZSA9IGQzX3NlbGVjdGlvbl9zZWxlY3RvcihiZWZvcmUpO1xuXHQgICAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobmFtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBiZWZvcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25SZW1vdmUpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uUmVtb3ZlKCkge1xuXHQgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblx0ICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcblx0ICB9XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG5cdCAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIGdyb3VwLCBub2RlO1xuXHQgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdCAgICAgIHZhbHVlID0gbmV3IEFycmF5KG4gPSAoZ3JvdXAgPSB0aGlzWzBdKS5sZW5ndGgpO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcblx0ICAgICAgICAgIHZhbHVlW2ldID0gbm9kZS5fX2RhdGFfXztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYmluZChncm91cCwgZ3JvdXBEYXRhKSB7XG5cdCAgICAgIHZhciBpLCBuID0gZ3JvdXAubGVuZ3RoLCBtID0gZ3JvdXBEYXRhLmxlbmd0aCwgbjAgPSBNYXRoLm1pbihuLCBtKSwgdXBkYXRlTm9kZXMgPSBuZXcgQXJyYXkobSksIGVudGVyTm9kZXMgPSBuZXcgQXJyYXkobSksIGV4aXROb2RlcyA9IG5ldyBBcnJheShuKSwgbm9kZSwgbm9kZURhdGE7XG5cdCAgICAgIGlmIChrZXkpIHtcblx0ICAgICAgICB2YXIgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgZDNfTWFwKCksIGtleVZhbHVlcyA9IG5ldyBBcnJheShuKSwga2V5VmFsdWU7XG5cdCAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG47ICkge1xuXHQgICAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuXHQgICAgICAgICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSkpKSB7XG5cdCAgICAgICAgICAgICAgZXhpdE5vZGVzW2ldID0gbm9kZTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIG5vZGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKGkgPSAtMTsgKytpIDwgbTsgKSB7XG5cdCAgICAgICAgICBpZiAoIShub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlID0ga2V5LmNhbGwoZ3JvdXBEYXRhLCBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXSwgaSkpKSkge1xuXHQgICAgICAgICAgICBlbnRlck5vZGVzW2ldID0gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKG5vZGVEYXRhKTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobm9kZSAhPT0gdHJ1ZSkge1xuXHQgICAgICAgICAgICB1cGRhdGVOb2Rlc1tpXSA9IG5vZGU7XG5cdCAgICAgICAgICAgIG5vZGUuX19kYXRhX18gPSBub2RlRGF0YTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgdHJ1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBuOyApIHtcblx0ICAgICAgICAgIGlmIChpIGluIGtleVZhbHVlcyAmJiBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSAhPT0gdHJ1ZSkge1xuXHQgICAgICAgICAgICBleGl0Tm9kZXNbaV0gPSBncm91cFtpXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG4wOyApIHtcblx0ICAgICAgICAgIG5vZGUgPSBncm91cFtpXTtcblx0ICAgICAgICAgIG5vZGVEYXRhID0gZ3JvdXBEYXRhW2ldO1xuXHQgICAgICAgICAgaWYgKG5vZGUpIHtcblx0ICAgICAgICAgICAgbm9kZS5fX2RhdGFfXyA9IG5vZGVEYXRhO1xuXHQgICAgICAgICAgICB1cGRhdGVOb2Rlc1tpXSA9IG5vZGU7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBlbnRlck5vZGVzW2ldID0gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKG5vZGVEYXRhKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZm9yICg7aSA8IG07ICsraSkge1xuXHQgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShncm91cERhdGFbaV0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKDtpIDwgbjsgKytpKSB7XG5cdCAgICAgICAgICBleGl0Tm9kZXNbaV0gPSBncm91cFtpXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZW50ZXJOb2Rlcy51cGRhdGUgPSB1cGRhdGVOb2Rlcztcblx0ICAgICAgZW50ZXJOb2Rlcy5wYXJlbnROb2RlID0gdXBkYXRlTm9kZXMucGFyZW50Tm9kZSA9IGV4aXROb2Rlcy5wYXJlbnROb2RlID0gZ3JvdXAucGFyZW50Tm9kZTtcblx0ICAgICAgZW50ZXIucHVzaChlbnRlck5vZGVzKTtcblx0ICAgICAgdXBkYXRlLnB1c2godXBkYXRlTm9kZXMpO1xuXHQgICAgICBleGl0LnB1c2goZXhpdE5vZGVzKTtcblx0ICAgIH1cblx0ICAgIHZhciBlbnRlciA9IGQzX3NlbGVjdGlvbl9lbnRlcihbXSksIHVwZGF0ZSA9IGQzX3NlbGVjdGlvbihbXSksIGV4aXQgPSBkM19zZWxlY3Rpb24oW10pO1xuXHQgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgYmluZChncm91cCA9IHRoaXNbaV0sIHZhbHVlLmNhbGwoZ3JvdXAsIGdyb3VwLnBhcmVudE5vZGUuX19kYXRhX18sIGkpKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBiaW5kKGdyb3VwID0gdGhpc1tpXSwgdmFsdWUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICB1cGRhdGUuZW50ZXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGVudGVyO1xuXHQgICAgfTtcblx0ICAgIHVwZGF0ZS5leGl0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBleGl0O1xuXHQgICAgfTtcblx0ICAgIHJldHVybiB1cGRhdGU7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZGF0YU5vZGUoZGF0YSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgX19kYXRhX186IGRhdGFcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXR1bSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSkgOiB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIik7XG5cdCAgfTtcblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cdCAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZTtcblx0ICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSBcImZ1bmN0aW9uXCIpIGZpbHRlciA9IGQzX3NlbGVjdGlvbl9maWx0ZXIoZmlsdGVyKTtcblx0ICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcblx0ICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG5cdCAgICAgIHN1Ymdyb3VwLnBhcmVudE5vZGUgPSAoZ3JvdXAgPSB0aGlzW2pdKS5wYXJlbnROb2RlO1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHQgICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBmaWx0ZXIuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSkge1xuXHQgICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9maWx0ZXIoc2VsZWN0b3IpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NlbGVjdE1hdGNoZXModGhpcywgc2VsZWN0b3IpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLm9yZGVyID0gZnVuY3Rpb24oKSB7XG5cdCAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG5cdCAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7ICkge1xuXHQgICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcblx0ICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IG5vZGUubmV4dFNpYmxpbmcpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG5cdCAgICAgICAgICBuZXh0ID0gbm9kZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG5cdCAgICBjb21wYXJhdG9yID0gZDNfc2VsZWN0aW9uX3NvcnRDb21wYXJhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB0aGlzW2pdLnNvcnQoY29tcGFyYXRvcik7XG5cdCAgICByZXR1cm4gdGhpcy5vcmRlcigpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3NvcnRDb21wYXJhdG9yKGNvbXBhcmF0b3IpIHtcblx0ICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgY29tcGFyYXRvciA9IGQzX2FzY2VuZGluZztcblx0ICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG5cdCAgICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJhdG9yKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG5cdCAgICAgIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG5cdCAgICB9KTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9lYWNoKGdyb3VwcywgY2FsbGJhY2spIHtcblx0ICAgIGZvciAodmFyIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07IGorKykge1xuXHQgICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyBpKyspIHtcblx0ICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjayhub2RlLCBpLCBqKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGdyb3Vwcztcblx0ICB9XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHQgICAgdmFyIGFyZ3MgPSBkM19hcnJheShhcmd1bWVudHMpO1xuXHQgICAgY2FsbGJhY2suYXBwbHkoYXJnc1swXSA9IHRoaXMsIGFyZ3MpO1xuXHQgICAgcmV0dXJuIHRoaXM7XG5cdCAgfTtcblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiAhdGhpcy5ub2RlKCk7XG5cdCAgfTtcblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuXHQgICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcblx0ICAgICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBudWxsO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBuID0gMDtcblx0ICAgIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKCkge1xuXHQgICAgICArK247XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBuO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2VudGVyKHNlbGVjdGlvbikge1xuXHQgICAgZDNfc3ViY2xhc3Moc2VsZWN0aW9uLCBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUpO1xuXHQgICAgcmV0dXJuIHNlbGVjdGlvbjtcblx0ICB9XG5cdCAgdmFyIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZSA9IFtdO1xuXHQgIGQzLnNlbGVjdGlvbi5lbnRlciA9IGQzX3NlbGVjdGlvbl9lbnRlcjtcblx0ICBkMy5zZWxlY3Rpb24uZW50ZXIucHJvdG90eXBlID0gZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlO1xuXHQgIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5hcHBlbmQgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuYXBwZW5kO1xuXHQgIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5lbXB0eSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5lbXB0eTtcblx0ICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUubm9kZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlO1xuXHQgIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5jYWxsID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmNhbGw7XG5cdCAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLnNpemUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2l6ZTtcblx0ICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0ICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIHVwZ3JvdXAsIGdyb3VwLCBub2RlO1xuXHQgICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuXHQgICAgICB1cGdyb3VwID0gKGdyb3VwID0gdGhpc1tqXSkudXBkYXRlO1xuXHQgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcblx0ICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IGdyb3VwLnBhcmVudE5vZGU7XG5cdCAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG5cdCAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuXHQgICAgICAgICAgc3ViZ3JvdXAucHVzaCh1cGdyb3VwW2ldID0gc3Vibm9kZSA9IHNlbGVjdG9yLmNhbGwoZ3JvdXAucGFyZW50Tm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpO1xuXHQgICAgICAgICAgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobnVsbCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG5cdCAgfTtcblx0ICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGJlZm9yZSA9IGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZSh0aGlzKTtcblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaW5zZXJ0LmNhbGwodGhpcywgbmFtZSwgYmVmb3JlKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZShlbnRlcikge1xuXHQgICAgdmFyIGkwLCBqMDtcblx0ICAgIHJldHVybiBmdW5jdGlvbihkLCBpLCBqKSB7XG5cdCAgICAgIHZhciBncm91cCA9IGVudGVyW2pdLnVwZGF0ZSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTtcblx0ICAgICAgaWYgKGogIT0gajApIGowID0gaiwgaTAgPSAwO1xuXHQgICAgICBpZiAoaSA+PSBpMCkgaTAgPSBpICsgMTtcblx0ICAgICAgd2hpbGUgKCEobm9kZSA9IGdyb3VwW2kwXSkgJiYgKytpMCA8IG4pIDtcblx0ICAgICAgcmV0dXJuIG5vZGU7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5zZWxlY3QgPSBmdW5jdGlvbihub2RlKSB7XG5cdCAgICB2YXIgZ3JvdXA7XG5cdCAgICBpZiAodHlwZW9mIG5vZGUgPT09IFwic3RyaW5nXCIpIHtcblx0ICAgICAgZ3JvdXAgPSBbIGQzX3NlbGVjdChub2RlLCBkM19kb2N1bWVudCkgXTtcblx0ICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGdyb3VwID0gWyBub2RlIF07XG5cdCAgICAgIGdyb3VwLnBhcmVudE5vZGUgPSBkM19kb2N1bWVudEVsZW1lbnQobm9kZSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uKFsgZ3JvdXAgXSk7XG5cdCAgfTtcblx0ICBkMy5zZWxlY3RBbGwgPSBmdW5jdGlvbihub2Rlcykge1xuXHQgICAgdmFyIGdyb3VwO1xuXHQgICAgaWYgKHR5cGVvZiBub2RlcyA9PT0gXCJzdHJpbmdcIikge1xuXHQgICAgICBncm91cCA9IGQzX2FycmF5KGQzX3NlbGVjdEFsbChub2RlcywgZDNfZG9jdW1lbnQpKTtcblx0ICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGdyb3VwID0gZDNfYXJyYXkobm9kZXMpO1xuXHQgICAgICBncm91cC5wYXJlbnROb2RlID0gbnVsbDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb24oWyBncm91cCBdKTtcblx0ICB9O1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG5cdCAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICBpZiAobiA8IDMpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgICAgaWYgKG4gPCAyKSBsaXN0ZW5lciA9IGZhbHNlO1xuXHQgICAgICAgIGZvciAoY2FwdHVyZSBpbiB0eXBlKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX29uKGNhcHR1cmUsIHR5cGVbY2FwdHVyZV0sIGxpc3RlbmVyKSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG4gPCAyKSByZXR1cm4gKG4gPSB0aGlzLm5vZGUoKVtcIl9fb25cIiArIHR5cGVdKSAmJiBuLl87XG5cdCAgICAgIGNhcHR1cmUgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX29uKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcblx0ICAgIHZhciBuYW1lID0gXCJfX29uXCIgKyB0eXBlLCBpID0gdHlwZS5pbmRleE9mKFwiLlwiKSwgd3JhcCA9IGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyO1xuXHQgICAgaWYgKGkgPiAwKSB0eXBlID0gdHlwZS5zbGljZSgwLCBpKTtcblx0ICAgIHZhciBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLmdldCh0eXBlKTtcblx0ICAgIGlmIChmaWx0ZXIpIHR5cGUgPSBmaWx0ZXIsIHdyYXAgPSBkM19zZWxlY3Rpb25fb25GaWx0ZXI7XG5cdCAgICBmdW5jdGlvbiBvblJlbW92ZSgpIHtcblx0ICAgICAgdmFyIGwgPSB0aGlzW25hbWVdO1xuXHQgICAgICBpZiAobCkge1xuXHQgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsLCBsLiQpO1xuXHQgICAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBvbkFkZCgpIHtcblx0ICAgICAgdmFyIGwgPSB3cmFwKGxpc3RlbmVyLCBkM19hcnJheShhcmd1bWVudHMpKTtcblx0ICAgICAgb25SZW1vdmUuY2FsbCh0aGlzKTtcblx0ICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHRoaXNbbmFtZV0gPSBsLCBsLiQgPSBjYXB0dXJlKTtcblx0ICAgICAgbC5fID0gbGlzdGVuZXI7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByZW1vdmVBbGwoKSB7XG5cdCAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCJeX19vbihbXi5dKylcIiArIGQzLnJlcXVvdGUodHlwZSkgKyBcIiRcIiksIG1hdGNoO1xuXHQgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcblx0ICAgICAgICBpZiAobWF0Y2ggPSBuYW1lLm1hdGNoKHJlKSkge1xuXHQgICAgICAgICAgdmFyIGwgPSB0aGlzW25hbWVdO1xuXHQgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG1hdGNoWzFdLCBsLCBsLiQpO1xuXHQgICAgICAgICAgZGVsZXRlIHRoaXNbbmFtZV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaSA/IGxpc3RlbmVyID8gb25BZGQgOiBvblJlbW92ZSA6IGxpc3RlbmVyID8gZDNfbm9vcCA6IHJlbW92ZUFsbDtcblx0ICB9XG5cdCAgdmFyIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMgPSBkMy5tYXAoe1xuXHQgICAgbW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0ICAgIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIlxuXHQgIH0pO1xuXHQgIGlmIChkM19kb2N1bWVudCkge1xuXHQgICAgZDNfc2VsZWN0aW9uX29uRmlsdGVycy5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcblx0ICAgICAgaWYgKFwib25cIiArIGsgaW4gZDNfZG9jdW1lbnQpIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMucmVtb3ZlKGspO1xuXHQgICAgfSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG5cdCAgICAgIHZhciBvID0gZDMuZXZlbnQ7XG5cdCAgICAgIGQzLmV2ZW50ID0gZTtcblx0ICAgICAgYXJndW1lbnR6WzBdID0gdGhpcy5fX2RhdGFfXztcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHopO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIGQzLmV2ZW50ID0gbztcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX29uRmlsdGVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcblx0ICAgIHZhciBsID0gZDNfc2VsZWN0aW9uX29uTGlzdGVuZXIobGlzdGVuZXIsIGFyZ3VtZW50eik7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuXHQgICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgcmVsYXRlZCA9IGUucmVsYXRlZFRhcmdldDtcblx0ICAgICAgaWYgKCFyZWxhdGVkIHx8IHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGFyZ2V0KSAmIDgpKSB7XG5cdCAgICAgICAgbC5jYWxsKHRhcmdldCwgZSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXHQgIHZhciBkM19ldmVudF9kcmFnU2VsZWN0LCBkM19ldmVudF9kcmFnSWQgPSAwO1xuXHQgIGZ1bmN0aW9uIGQzX2V2ZW50X2RyYWdTdXBwcmVzcyhub2RlKSB7XG5cdCAgICB2YXIgbmFtZSA9IFwiLmRyYWdzdXBwcmVzcy1cIiArICsrZDNfZXZlbnRfZHJhZ0lkLCBjbGljayA9IFwiY2xpY2tcIiArIG5hbWUsIHcgPSBkMy5zZWxlY3QoZDNfd2luZG93KG5vZGUpKS5vbihcInRvdWNobW92ZVwiICsgbmFtZSwgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCkub24oXCJkcmFnc3RhcnRcIiArIG5hbWUsIGQzX2V2ZW50UHJldmVudERlZmF1bHQpLm9uKFwic2VsZWN0c3RhcnRcIiArIG5hbWUsIGQzX2V2ZW50UHJldmVudERlZmF1bHQpO1xuXHQgICAgaWYgKGQzX2V2ZW50X2RyYWdTZWxlY3QgPT0gbnVsbCkge1xuXHQgICAgICBkM19ldmVudF9kcmFnU2VsZWN0ID0gXCJvbnNlbGVjdHN0YXJ0XCIgaW4gbm9kZSA/IGZhbHNlIDogZDNfdmVuZG9yU3ltYm9sKG5vZGUuc3R5bGUsIFwidXNlclNlbGVjdFwiKTtcblx0ICAgIH1cblx0ICAgIGlmIChkM19ldmVudF9kcmFnU2VsZWN0KSB7XG5cdCAgICAgIHZhciBzdHlsZSA9IGQzX2RvY3VtZW50RWxlbWVudChub2RlKS5zdHlsZSwgc2VsZWN0ID0gc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF07XG5cdCAgICAgIHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdID0gXCJub25lXCI7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oc3VwcHJlc3NDbGljaykge1xuXHQgICAgICB3Lm9uKG5hbWUsIG51bGwpO1xuXHQgICAgICBpZiAoZDNfZXZlbnRfZHJhZ1NlbGVjdCkgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBzZWxlY3Q7XG5cdCAgICAgIGlmIChzdXBwcmVzc0NsaWNrKSB7XG5cdCAgICAgICAgdmFyIG9mZiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgdy5vbihjbGljaywgbnVsbCk7XG5cdCAgICAgICAgfTtcblx0ICAgICAgICB3Lm9uKGNsaWNrLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICAgIG9mZigpO1xuXHQgICAgICAgIH0sIHRydWUpO1xuXHQgICAgICAgIHNldFRpbWVvdXQob2ZmLCAwKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMubW91c2UgPSBmdW5jdGlvbihjb250YWluZXIpIHtcblx0ICAgIHJldHVybiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgZDNfZXZlbnRTb3VyY2UoKSk7XG5cdCAgfTtcblx0ICB2YXIgZDNfbW91c2VfYnVnNDQwODMgPSB0aGlzLm5hdmlnYXRvciAmJiAvV2ViS2l0Ly50ZXN0KHRoaXMubmF2aWdhdG9yLnVzZXJBZ2VudCkgPyAtMSA6IDA7XG5cdCAgZnVuY3Rpb24gZDNfbW91c2VQb2ludChjb250YWluZXIsIGUpIHtcblx0ICAgIGlmIChlLmNoYW5nZWRUb3VjaGVzKSBlID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcblx0ICAgIHZhciBzdmcgPSBjb250YWluZXIub3duZXJTVkdFbGVtZW50IHx8IGNvbnRhaW5lcjtcblx0ICAgIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcblx0ICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG5cdCAgICAgIGlmIChkM19tb3VzZV9idWc0NDA4MyA8IDApIHtcblx0ICAgICAgICB2YXIgd2luZG93ID0gZDNfd2luZG93KGNvbnRhaW5lcik7XG5cdCAgICAgICAgaWYgKHdpbmRvdy5zY3JvbGxYIHx8IHdpbmRvdy5zY3JvbGxZKSB7XG5cdCAgICAgICAgICBzdmcgPSBkMy5zZWxlY3QoXCJib2R5XCIpLmFwcGVuZChcInN2Z1wiKS5zdHlsZSh7XG5cdCAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdCAgICAgICAgICAgIHRvcDogMCxcblx0ICAgICAgICAgICAgbGVmdDogMCxcblx0ICAgICAgICAgICAgbWFyZ2luOiAwLFxuXHQgICAgICAgICAgICBwYWRkaW5nOiAwLFxuXHQgICAgICAgICAgICBib3JkZXI6IFwibm9uZVwiXG5cdCAgICAgICAgICB9LCBcImltcG9ydGFudFwiKTtcblx0ICAgICAgICAgIHZhciBjdG0gPSBzdmdbMF1bMF0uZ2V0U2NyZWVuQ1RNKCk7XG5cdCAgICAgICAgICBkM19tb3VzZV9idWc0NDA4MyA9ICEoY3RtLmYgfHwgY3RtLmUpO1xuXHQgICAgICAgICAgc3ZnLnJlbW92ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAoZDNfbW91c2VfYnVnNDQwODMpIHBvaW50LnggPSBlLnBhZ2VYLCBwb2ludC55ID0gZS5wYWdlWTsgZWxzZSBwb2ludC54ID0gZS5jbGllbnRYLCBcblx0ICAgICAgcG9pbnQueSA9IGUuY2xpZW50WTtcblx0ICAgICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0oY29udGFpbmVyLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG5cdCAgICAgIHJldHVybiBbIHBvaW50LngsIHBvaW50LnkgXTtcblx0ICAgIH1cblx0ICAgIHZhciByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHQgICAgcmV0dXJuIFsgZS5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gY29udGFpbmVyLmNsaWVudExlZnQsIGUuY2xpZW50WSAtIHJlY3QudG9wIC0gY29udGFpbmVyLmNsaWVudFRvcCBdO1xuXHQgIH1cblx0ICBkMy50b3VjaCA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgdG91Y2hlcywgaWRlbnRpZmllcikge1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBpZGVudGlmaWVyID0gdG91Y2hlcywgdG91Y2hlcyA9IGQzX2V2ZW50U291cmNlKCkuY2hhbmdlZFRvdWNoZXM7XG5cdCAgICBpZiAodG91Y2hlcykgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzLmxlbmd0aCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgaWYgKCh0b3VjaCA9IHRvdWNoZXNbaV0pLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcblx0ICAgICAgICByZXR1cm4gZDNfbW91c2VQb2ludChjb250YWluZXIsIHRvdWNoKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cdCAgZDMuYmVoYXZpb3IuZHJhZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGV2ZW50ID0gZDNfZXZlbnREaXNwYXRjaChkcmFnLCBcImRyYWdcIiwgXCJkcmFnc3RhcnRcIiwgXCJkcmFnZW5kXCIpLCBvcmlnaW4gPSBudWxsLCBtb3VzZWRvd24gPSBkcmFnc3RhcnQoZDNfbm9vcCwgZDMubW91c2UsIGQzX3dpbmRvdywgXCJtb3VzZW1vdmVcIiwgXCJtb3VzZXVwXCIpLCB0b3VjaHN0YXJ0ID0gZHJhZ3N0YXJ0KGQzX2JlaGF2aW9yX2RyYWdUb3VjaElkLCBkMy50b3VjaCwgZDNfaWRlbnRpdHksIFwidG91Y2htb3ZlXCIsIFwidG91Y2hlbmRcIik7XG5cdCAgICBmdW5jdGlvbiBkcmFnKCkge1xuXHQgICAgICB0aGlzLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duKS5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGRyYWdzdGFydChpZCwgcG9zaXRpb24sIHN1YmplY3QsIG1vdmUsIGVuZCkge1xuXHQgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHRoYXQgPSB0aGlzLCB0YXJnZXQgPSBkMy5ldmVudC50YXJnZXQuY29ycmVzcG9uZGluZ0VsZW1lbnQgfHwgZDMuZXZlbnQudGFyZ2V0LCBwYXJlbnQgPSB0aGF0LnBhcmVudE5vZGUsIGRpc3BhdGNoID0gZXZlbnQub2YodGhhdCwgYXJndW1lbnRzKSwgZHJhZ2dlZCA9IDAsIGRyYWdJZCA9IGlkKCksIGRyYWdOYW1lID0gXCIuZHJhZ1wiICsgKGRyYWdJZCA9PSBudWxsID8gXCJcIiA6IFwiLVwiICsgZHJhZ0lkKSwgZHJhZ09mZnNldCwgZHJhZ1N1YmplY3QgPSBkMy5zZWxlY3Qoc3ViamVjdCh0YXJnZXQpKS5vbihtb3ZlICsgZHJhZ05hbWUsIG1vdmVkKS5vbihlbmQgKyBkcmFnTmFtZSwgZW5kZWQpLCBkcmFnUmVzdG9yZSA9IGQzX2V2ZW50X2RyYWdTdXBwcmVzcyh0YXJnZXQpLCBwb3NpdGlvbjAgPSBwb3NpdGlvbihwYXJlbnQsIGRyYWdJZCk7XG5cdCAgICAgICAgaWYgKG9yaWdpbikge1xuXHQgICAgICAgICAgZHJhZ09mZnNldCA9IG9yaWdpbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgZHJhZ09mZnNldCA9IFsgZHJhZ09mZnNldC54IC0gcG9zaXRpb24wWzBdLCBkcmFnT2Zmc2V0LnkgLSBwb3NpdGlvbjBbMV0gXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgZHJhZ09mZnNldCA9IFsgMCwgMCBdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBkaXNwYXRjaCh7XG5cdCAgICAgICAgICB0eXBlOiBcImRyYWdzdGFydFwiXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgZnVuY3Rpb24gbW92ZWQoKSB7XG5cdCAgICAgICAgICB2YXIgcG9zaXRpb24xID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpLCBkeCwgZHk7XG5cdCAgICAgICAgICBpZiAoIXBvc2l0aW9uMSkgcmV0dXJuO1xuXHQgICAgICAgICAgZHggPSBwb3NpdGlvbjFbMF0gLSBwb3NpdGlvbjBbMF07XG5cdCAgICAgICAgICBkeSA9IHBvc2l0aW9uMVsxXSAtIHBvc2l0aW9uMFsxXTtcblx0ICAgICAgICAgIGRyYWdnZWQgfD0gZHggfCBkeTtcblx0ICAgICAgICAgIHBvc2l0aW9uMCA9IHBvc2l0aW9uMTtcblx0ICAgICAgICAgIGRpc3BhdGNoKHtcblx0ICAgICAgICAgICAgdHlwZTogXCJkcmFnXCIsXG5cdCAgICAgICAgICAgIHg6IHBvc2l0aW9uMVswXSArIGRyYWdPZmZzZXRbMF0sXG5cdCAgICAgICAgICAgIHk6IHBvc2l0aW9uMVsxXSArIGRyYWdPZmZzZXRbMV0sXG5cdCAgICAgICAgICAgIGR4OiBkeCxcblx0ICAgICAgICAgICAgZHk6IGR5XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZnVuY3Rpb24gZW5kZWQoKSB7XG5cdCAgICAgICAgICBpZiAoIXBvc2l0aW9uKHBhcmVudCwgZHJhZ0lkKSkgcmV0dXJuO1xuXHQgICAgICAgICAgZHJhZ1N1YmplY3Qub24obW92ZSArIGRyYWdOYW1lLCBudWxsKS5vbihlbmQgKyBkcmFnTmFtZSwgbnVsbCk7XG5cdCAgICAgICAgICBkcmFnUmVzdG9yZShkcmFnZ2VkKTtcblx0ICAgICAgICAgIGRpc3BhdGNoKHtcblx0ICAgICAgICAgICAgdHlwZTogXCJkcmFnZW5kXCJcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGRyYWcub3JpZ2luID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmlnaW47XG5cdCAgICAgIG9yaWdpbiA9IHg7XG5cdCAgICAgIHJldHVybiBkcmFnO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkMy5yZWJpbmQoZHJhZywgZXZlbnQsIFwib25cIik7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19iZWhhdmlvcl9kcmFnVG91Y2hJZCgpIHtcblx0ICAgIHJldHVybiBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5pZGVudGlmaWVyO1xuXHQgIH1cblx0ICBkMy50b3VjaGVzID0gZnVuY3Rpb24oY29udGFpbmVyLCB0b3VjaGVzKSB7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHRvdWNoZXMgPSBkM19ldmVudFNvdXJjZSgpLnRvdWNoZXM7XG5cdCAgICByZXR1cm4gdG91Y2hlcyA/IGQzX2FycmF5KHRvdWNoZXMpLm1hcChmdW5jdGlvbih0b3VjaCkge1xuXHQgICAgICB2YXIgcG9pbnQgPSBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgdG91Y2gpO1xuXHQgICAgICBwb2ludC5pZGVudGlmaWVyID0gdG91Y2guaWRlbnRpZmllcjtcblx0ICAgICAgcmV0dXJuIHBvaW50O1xuXHQgICAgfSkgOiBbXTtcblx0ICB9O1xuXHQgIHZhciDOtSA9IDFlLTYsIM61MiA9IM61ICogzrUsIM+AID0gTWF0aC5QSSwgz4QgPSAyICogz4AsIM+EzrUgPSDPhCAtIM61LCBoYWxmz4AgPSDPgCAvIDIsIGQzX3JhZGlhbnMgPSDPgCAvIDE4MCwgZDNfZGVncmVlcyA9IDE4MCAvIM+AO1xuXHQgIGZ1bmN0aW9uIGQzX3Nnbih4KSB7XG5cdCAgICByZXR1cm4geCA+IDAgPyAxIDogeCA8IDAgPyAtMSA6IDA7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Nyb3NzMmQoYSwgYiwgYykge1xuXHQgICAgcmV0dXJuIChiWzBdIC0gYVswXSkgKiAoY1sxXSAtIGFbMV0pIC0gKGJbMV0gLSBhWzFdKSAqIChjWzBdIC0gYVswXSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Fjb3MoeCkge1xuXHQgICAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IM+AIDogTWF0aC5hY29zKHgpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19hc2luKHgpIHtcblx0ICAgIHJldHVybiB4ID4gMSA/IGhhbGbPgCA6IHggPCAtMSA/IC1oYWxmz4AgOiBNYXRoLmFzaW4oeCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NpbmgoeCkge1xuXHQgICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Nvc2goeCkge1xuXHQgICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RhbmgoeCkge1xuXHQgICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2hhdmVyc2luKHgpIHtcblx0ICAgIHJldHVybiAoeCA9IE1hdGguc2luKHggLyAyKSkgKiB4O1xuXHQgIH1cblx0ICB2YXIgz4EgPSBNYXRoLlNRUlQyLCDPgTIgPSAyLCDPgTQgPSA0O1xuXHQgIGQzLmludGVycG9sYXRlWm9vbSA9IGZ1bmN0aW9uKHAwLCBwMSkge1xuXHQgICAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSwgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLCBkeCA9IHV4MSAtIHV4MCwgZHkgPSB1eTEgLSB1eTAsIGQyID0gZHggKiBkeCArIGR5ICogZHksIGksIFM7XG5cdCAgICBpZiAoZDIgPCDOtTIpIHtcblx0ICAgICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gz4E7XG5cdCAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgcmV0dXJuIFsgdXgwICsgdCAqIGR4LCB1eTAgKyB0ICogZHksIHcwICogTWF0aC5leHAoz4EgKiB0ICogUykgXTtcblx0ICAgICAgfTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgz4E0ICogZDIpIC8gKDIgKiB3MCAqIM+BMiAqIGQxKSwgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSDPgTQgKiBkMikgLyAoMiAqIHcxICogz4EyICogZDEpLCByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcblx0ICAgICAgUyA9IChyMSAtIHIwKSAvIM+BO1xuXHQgICAgICBpID0gZnVuY3Rpb24odCkge1xuXHQgICAgICAgIHZhciBzID0gdCAqIFMsIGNvc2hyMCA9IGQzX2Nvc2gocjApLCB1ID0gdzAgLyAoz4EyICogZDEpICogKGNvc2hyMCAqIGQzX3Rhbmgoz4EgKiBzICsgcjApIC0gZDNfc2luaChyMCkpO1xuXHQgICAgICAgIHJldHVybiBbIHV4MCArIHUgKiBkeCwgdXkwICsgdSAqIGR5LCB3MCAqIGNvc2hyMCAvIGQzX2Nvc2goz4EgKiBzICsgcjApIF07XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBpLmR1cmF0aW9uID0gUyAqIDFlMztcblx0ICAgIHJldHVybiBpO1xuXHQgIH07XG5cdCAgZDMuYmVoYXZpb3Iuem9vbSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHZpZXcgPSB7XG5cdCAgICAgIHg6IDAsXG5cdCAgICAgIHk6IDAsXG5cdCAgICAgIGs6IDFcblx0ICAgIH0sIHRyYW5zbGF0ZTAsIGNlbnRlcjAsIGNlbnRlciwgc2l6ZSA9IFsgOTYwLCA1MDAgXSwgc2NhbGVFeHRlbnQgPSBkM19iZWhhdmlvcl96b29tSW5maW5pdHksIGR1cmF0aW9uID0gMjUwLCB6b29taW5nID0gMCwgbW91c2Vkb3duID0gXCJtb3VzZWRvd24uem9vbVwiLCBtb3VzZW1vdmUgPSBcIm1vdXNlbW92ZS56b29tXCIsIG1vdXNldXAgPSBcIm1vdXNldXAuem9vbVwiLCBtb3VzZXdoZWVsVGltZXIsIHRvdWNoc3RhcnQgPSBcInRvdWNoc3RhcnQuem9vbVwiLCB0b3VjaHRpbWUsIGV2ZW50ID0gZDNfZXZlbnREaXNwYXRjaCh6b29tLCBcInpvb21zdGFydFwiLCBcInpvb21cIiwgXCJ6b29tZW5kXCIpLCB4MCwgeDEsIHkwLCB5MTtcblx0ICAgIGlmICghZDNfYmVoYXZpb3Jfem9vbVdoZWVsKSB7XG5cdCAgICAgIGQzX2JlaGF2aW9yX3pvb21XaGVlbCA9IFwib253aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiAtZDMuZXZlbnQuZGVsdGFZICogKGQzLmV2ZW50LmRlbHRhTW9kZSA/IDEyMCA6IDEpO1xuXHQgICAgICB9LCBcIndoZWVsXCIpIDogXCJvbm1vdXNld2hlZWxcIiBpbiBkM19kb2N1bWVudCA/IChkM19iZWhhdmlvcl96b29tRGVsdGEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gZDMuZXZlbnQud2hlZWxEZWx0YTtcblx0ICAgICAgfSwgXCJtb3VzZXdoZWVsXCIpIDogKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiAtZDMuZXZlbnQuZGV0YWlsO1xuXHQgICAgICB9LCBcIk1vek1vdXNlUGl4ZWxTY3JvbGxcIik7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiB6b29tKGcpIHtcblx0ICAgICAgZy5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbihkM19iZWhhdmlvcl96b29tV2hlZWwgKyBcIi56b29tXCIsIG1vdXNld2hlZWxlZCkub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpLm9uKHRvdWNoc3RhcnQsIHRvdWNoc3RhcnRlZCk7XG5cdCAgICB9XG5cdCAgICB6b29tLmV2ZW50ID0gZnVuY3Rpb24oZykge1xuXHQgICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIGRpc3BhdGNoID0gZXZlbnQub2YodGhpcywgYXJndW1lbnRzKSwgdmlldzEgPSB2aWV3O1xuXHQgICAgICAgIGlmIChkM190cmFuc2l0aW9uSW5oZXJpdElkKSB7XG5cdCAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICB2aWV3ID0gdGhpcy5fX2NoYXJ0X18gfHwge1xuXHQgICAgICAgICAgICAgIHg6IDAsXG5cdCAgICAgICAgICAgICAgeTogMCxcblx0ICAgICAgICAgICAgICBrOiAxXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcblx0ICAgICAgICAgIH0pLnR3ZWVuKFwiem9vbTp6b29tXCIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICB2YXIgZHggPSBzaXplWzBdLCBkeSA9IHNpemVbMV0sIGN4ID0gY2VudGVyMCA/IGNlbnRlcjBbMF0gOiBkeCAvIDIsIGN5ID0gY2VudGVyMCA/IGNlbnRlcjBbMV0gOiBkeSAvIDIsIGkgPSBkMy5pbnRlcnBvbGF0ZVpvb20oWyAoY3ggLSB2aWV3LngpIC8gdmlldy5rLCAoY3kgLSB2aWV3LnkpIC8gdmlldy5rLCBkeCAvIHZpZXcuayBdLCBbIChjeCAtIHZpZXcxLngpIC8gdmlldzEuaywgKGN5IC0gdmlldzEueSkgLyB2aWV3MS5rLCBkeCAvIHZpZXcxLmsgXSk7XG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgICAgICAgdmFyIGwgPSBpKHQpLCBrID0gZHggLyBsWzJdO1xuXHQgICAgICAgICAgICAgIHRoaXMuX19jaGFydF9fID0gdmlldyA9IHtcblx0ICAgICAgICAgICAgICAgIHg6IGN4IC0gbFswXSAqIGssXG5cdCAgICAgICAgICAgICAgICB5OiBjeSAtIGxbMV0gKiBrLFxuXHQgICAgICAgICAgICAgICAgazoga1xuXHQgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgIH0pLmVhY2goXCJpbnRlcnJ1cHQuem9vbVwiLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcblx0ICAgICAgICAgIH0pLmVhY2goXCJlbmQuem9vbVwiLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IHZpZXc7XG5cdCAgICAgICAgICB6b29tc3RhcnRlZChkaXNwYXRjaCk7XG5cdCAgICAgICAgICB6b29tZWQoZGlzcGF0Y2gpO1xuXHQgICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIHpvb20udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIHZpZXcueCwgdmlldy55IF07XG5cdCAgICAgIHZpZXcgPSB7XG5cdCAgICAgICAgeDogK19bMF0sXG5cdCAgICAgICAgeTogK19bMV0sXG5cdCAgICAgICAgazogdmlldy5rXG5cdCAgICAgIH07XG5cdCAgICAgIHJlc2NhbGUoKTtcblx0ICAgICAgcmV0dXJuIHpvb207XG5cdCAgICB9O1xuXHQgICAgem9vbS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmlldy5rO1xuXHQgICAgICB2aWV3ID0ge1xuXHQgICAgICAgIHg6IHZpZXcueCxcblx0ICAgICAgICB5OiB2aWV3LnksXG5cdCAgICAgICAgazogbnVsbFxuXHQgICAgICB9O1xuXHQgICAgICBzY2FsZVRvKCtfKTtcblx0ICAgICAgcmVzY2FsZSgpO1xuXHQgICAgICByZXR1cm4gem9vbTtcblx0ICAgIH07XG5cdCAgICB6b29tLnNjYWxlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzY2FsZUV4dGVudDtcblx0ICAgICAgc2NhbGVFeHRlbnQgPSBfID09IG51bGwgPyBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgOiBbICtfWzBdLCArX1sxXSBdO1xuXHQgICAgICByZXR1cm4gem9vbTtcblx0ICAgIH07XG5cdCAgICB6b29tLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2VudGVyO1xuXHQgICAgICBjZW50ZXIgPSBfICYmIFsgK19bMF0sICtfWzFdIF07XG5cdCAgICAgIHJldHVybiB6b29tO1xuXHQgICAgfTtcblx0ICAgIHpvb20uc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcblx0ICAgICAgc2l6ZSA9IF8gJiYgWyArX1swXSwgK19bMV0gXTtcblx0ICAgICAgcmV0dXJuIHpvb207XG5cdCAgICB9O1xuXHQgICAgem9vbS5kdXJhdGlvbiA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZHVyYXRpb247XG5cdCAgICAgIGR1cmF0aW9uID0gK187XG5cdCAgICAgIHJldHVybiB6b29tO1xuXHQgICAgfTtcblx0ICAgIHpvb20ueCA9IGZ1bmN0aW9uKHopIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDE7XG5cdCAgICAgIHgxID0gejtcblx0ICAgICAgeDAgPSB6LmNvcHkoKTtcblx0ICAgICAgdmlldyA9IHtcblx0ICAgICAgICB4OiAwLFxuXHQgICAgICAgIHk6IDAsXG5cdCAgICAgICAgazogMVxuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gem9vbTtcblx0ICAgIH07XG5cdCAgICB6b29tLnkgPSBmdW5jdGlvbih6KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuXHQgICAgICB5MSA9IHo7XG5cdCAgICAgIHkwID0gei5jb3B5KCk7XG5cdCAgICAgIHZpZXcgPSB7XG5cdCAgICAgICAgeDogMCxcblx0ICAgICAgICB5OiAwLFxuXHQgICAgICAgIGs6IDFcblx0ICAgICAgfTtcblx0ICAgICAgcmV0dXJuIHpvb207XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gbG9jYXRpb24ocCkge1xuXHQgICAgICByZXR1cm4gWyAocFswXSAtIHZpZXcueCkgLyB2aWV3LmssIChwWzFdIC0gdmlldy55KSAvIHZpZXcuayBdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcG9pbnQobCkge1xuXHQgICAgICByZXR1cm4gWyBsWzBdICogdmlldy5rICsgdmlldy54LCBsWzFdICogdmlldy5rICsgdmlldy55IF07XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzY2FsZVRvKHMpIHtcblx0ICAgICAgdmlldy5rID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCBzKSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiB0cmFuc2xhdGVUbyhwLCBsKSB7XG5cdCAgICAgIGwgPSBwb2ludChsKTtcblx0ICAgICAgdmlldy54ICs9IHBbMF0gLSBsWzBdO1xuXHQgICAgICB2aWV3LnkgKz0gcFsxXSAtIGxbMV07XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiB6b29tVG8odGhhdCwgcCwgbCwgaykge1xuXHQgICAgICB0aGF0Ll9fY2hhcnRfXyA9IHtcblx0ICAgICAgICB4OiB2aWV3LngsXG5cdCAgICAgICAgeTogdmlldy55LFxuXHQgICAgICAgIGs6IHZpZXcua1xuXHQgICAgICB9O1xuXHQgICAgICBzY2FsZVRvKE1hdGgucG93KDIsIGspKTtcblx0ICAgICAgdHJhbnNsYXRlVG8oY2VudGVyMCA9IHAsIGwpO1xuXHQgICAgICB0aGF0ID0gZDMuc2VsZWN0KHRoYXQpO1xuXHQgICAgICBpZiAoZHVyYXRpb24gPiAwKSB0aGF0ID0gdGhhdC50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pO1xuXHQgICAgICB0aGF0LmNhbGwoem9vbS5ldmVudCk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuXHQgICAgICBpZiAoeDEpIHgxLmRvbWFpbih4MC5yYW5nZSgpLm1hcChmdW5jdGlvbih4KSB7XG5cdCAgICAgICAgcmV0dXJuICh4IC0gdmlldy54KSAvIHZpZXcuaztcblx0ICAgICAgfSkubWFwKHgwLmludmVydCkpO1xuXHQgICAgICBpZiAoeTEpIHkxLmRvbWFpbih5MC5yYW5nZSgpLm1hcChmdW5jdGlvbih5KSB7XG5cdCAgICAgICAgcmV0dXJuICh5IC0gdmlldy55KSAvIHZpZXcuaztcblx0ICAgICAgfSkubWFwKHkwLmludmVydCkpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpIHtcblx0ICAgICAgaWYgKCF6b29taW5nKyspIGRpc3BhdGNoKHtcblx0ICAgICAgICB0eXBlOiBcInpvb21zdGFydFwiXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gem9vbWVkKGRpc3BhdGNoKSB7XG5cdCAgICAgIHJlc2NhbGUoKTtcblx0ICAgICAgZGlzcGF0Y2goe1xuXHQgICAgICAgIHR5cGU6IFwiem9vbVwiLFxuXHQgICAgICAgIHNjYWxlOiB2aWV3LmssXG5cdCAgICAgICAgdHJhbnNsYXRlOiBbIHZpZXcueCwgdmlldy55IF1cblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiB6b29tZW5kZWQoZGlzcGF0Y2gpIHtcblx0ICAgICAgaWYgKCEtLXpvb21pbmcpIGRpc3BhdGNoKHtcblx0ICAgICAgICB0eXBlOiBcInpvb21lbmRcIlxuXHQgICAgICB9KSwgY2VudGVyMCA9IG51bGw7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcblx0ICAgICAgdmFyIHRoYXQgPSB0aGlzLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBzdWJqZWN0ID0gZDMuc2VsZWN0KGQzX3dpbmRvdyh0aGF0KSkub24obW91c2Vtb3ZlLCBtb3ZlZCkub24obW91c2V1cCwgZW5kZWQpLCBsb2NhdGlvbjAgPSBsb2NhdGlvbihkMy5tb3VzZSh0aGF0KSksIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKHRoYXQpO1xuXHQgICAgICBkM19zZWxlY3Rpb25faW50ZXJydXB0LmNhbGwodGhhdCk7XG5cdCAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcblx0ICAgICAgZnVuY3Rpb24gbW92ZWQoKSB7XG5cdCAgICAgICAgZHJhZ2dlZCA9IDE7XG5cdCAgICAgICAgdHJhbnNsYXRlVG8oZDMubW91c2UodGhhdCksIGxvY2F0aW9uMCk7XG5cdCAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcblx0ICAgICAgICBzdWJqZWN0Lm9uKG1vdXNlbW92ZSwgbnVsbCkub24obW91c2V1cCwgbnVsbCk7XG5cdCAgICAgICAgZHJhZ1Jlc3RvcmUoZHJhZ2dlZCk7XG5cdCAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuXHQgICAgICB2YXIgdGhhdCA9IHRoaXMsIGRpc3BhdGNoID0gZXZlbnQub2YodGhhdCwgYXJndW1lbnRzKSwgbG9jYXRpb25zMCA9IHt9LCBkaXN0YW5jZTAgPSAwLCBzY2FsZTAsIHpvb21OYW1lID0gXCIuem9vbS1cIiArIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIsIHRvdWNobW92ZSA9IFwidG91Y2htb3ZlXCIgKyB6b29tTmFtZSwgdG91Y2hlbmQgPSBcInRvdWNoZW5kXCIgKyB6b29tTmFtZSwgdGFyZ2V0cyA9IFtdLCBzdWJqZWN0ID0gZDMuc2VsZWN0KHRoYXQpLCBkcmFnUmVzdG9yZSA9IGQzX2V2ZW50X2RyYWdTdXBwcmVzcyh0aGF0KTtcblx0ICAgICAgc3RhcnRlZCgpO1xuXHQgICAgICB6b29tc3RhcnRlZChkaXNwYXRjaCk7XG5cdCAgICAgIHN1YmplY3Qub24obW91c2Vkb3duLCBudWxsKS5vbih0b3VjaHN0YXJ0LCBzdGFydGVkKTtcblx0ICAgICAgZnVuY3Rpb24gcmVsb2NhdGUoKSB7XG5cdCAgICAgICAgdmFyIHRvdWNoZXMgPSBkMy50b3VjaGVzKHRoYXQpO1xuXHQgICAgICAgIHNjYWxlMCA9IHZpZXcuaztcblx0ICAgICAgICB0b3VjaGVzLmZvckVhY2goZnVuY3Rpb24odCkge1xuXHQgICAgICAgICAgaWYgKHQuaWRlbnRpZmllciBpbiBsb2NhdGlvbnMwKSBsb2NhdGlvbnMwW3QuaWRlbnRpZmllcl0gPSBsb2NhdGlvbih0KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gdG91Y2hlcztcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuXHQgICAgICAgIHZhciB0YXJnZXQgPSBkMy5ldmVudC50YXJnZXQ7XG5cdCAgICAgICAgZDMuc2VsZWN0KHRhcmdldCkub24odG91Y2htb3ZlLCBtb3ZlZCkub24odG91Y2hlbmQsIGVuZGVkKTtcblx0ICAgICAgICB0YXJnZXRzLnB1c2godGFyZ2V0KTtcblx0ICAgICAgICB2YXIgY2hhbmdlZCA9IGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gY2hhbmdlZC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICAgIGxvY2F0aW9uczBbY2hhbmdlZFtpXS5pZGVudGlmaWVyXSA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciB0b3VjaGVzID0gcmVsb2NhdGUoKSwgbm93ID0gRGF0ZS5ub3coKTtcblx0ICAgICAgICBpZiAodG91Y2hlcy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgICAgIGlmIChub3cgLSB0b3VjaHRpbWUgPCA1MDApIHtcblx0ICAgICAgICAgICAgdmFyIHAgPSB0b3VjaGVzWzBdO1xuXHQgICAgICAgICAgICB6b29tVG8odGhhdCwgcCwgbG9jYXRpb25zMFtwLmlkZW50aWZpZXJdLCBNYXRoLmZsb29yKE1hdGgubG9nKHZpZXcuaykgLyBNYXRoLkxOMikgKyAxKTtcblx0ICAgICAgICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdG91Y2h0aW1lID0gbm93O1xuXHQgICAgICAgIH0gZWxzZSBpZiAodG91Y2hlcy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgICB2YXIgcCA9IHRvdWNoZXNbMF0sIHEgPSB0b3VjaGVzWzFdLCBkeCA9IHBbMF0gLSBxWzBdLCBkeSA9IHBbMV0gLSBxWzFdO1xuXHQgICAgICAgICAgZGlzdGFuY2UwID0gZHggKiBkeCArIGR5ICogZHk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuXHQgICAgICAgIHZhciB0b3VjaGVzID0gZDMudG91Y2hlcyh0aGF0KSwgcDAsIGwwLCBwMSwgbDE7XG5cdCAgICAgICAgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoYXQpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcy5sZW5ndGg7IGkgPCBuOyArK2ksIGwxID0gbnVsbCkge1xuXHQgICAgICAgICAgcDEgPSB0b3VjaGVzW2ldO1xuXHQgICAgICAgICAgaWYgKGwxID0gbG9jYXRpb25zMFtwMS5pZGVudGlmaWVyXSkge1xuXHQgICAgICAgICAgICBpZiAobDApIGJyZWFrO1xuXHQgICAgICAgICAgICBwMCA9IHAxLCBsMCA9IGwxO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobDEpIHtcblx0ICAgICAgICAgIHZhciBkaXN0YW5jZTEgPSAoZGlzdGFuY2UxID0gcDFbMF0gLSBwMFswXSkgKiBkaXN0YW5jZTEgKyAoZGlzdGFuY2UxID0gcDFbMV0gLSBwMFsxXSkgKiBkaXN0YW5jZTEsIHNjYWxlMSA9IGRpc3RhbmNlMCAmJiBNYXRoLnNxcnQoZGlzdGFuY2UxIC8gZGlzdGFuY2UwKTtcblx0ICAgICAgICAgIHAwID0gWyAocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyIF07XG5cdCAgICAgICAgICBsMCA9IFsgKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMiBdO1xuXHQgICAgICAgICAgc2NhbGVUbyhzY2FsZTEgKiBzY2FsZTApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0b3VjaHRpbWUgPSBudWxsO1xuXHQgICAgICAgIHRyYW5zbGF0ZVRvKHAwLCBsMCk7XG5cdCAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcblx0ICAgICAgICBpZiAoZDMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHtcblx0ICAgICAgICAgIHZhciBjaGFuZ2VkID0gZDMuZXZlbnQuY2hhbmdlZFRvdWNoZXM7XG5cdCAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGNoYW5nZWQubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgICAgICAgIGRlbGV0ZSBsb2NhdGlvbnMwW2NoYW5nZWRbaV0uaWRlbnRpZmllcl07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBmb3IgKHZhciBpZGVudGlmaWVyIGluIGxvY2F0aW9uczApIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHZvaWQgcmVsb2NhdGUoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZDMuc2VsZWN0QWxsKHRhcmdldHMpLm9uKHpvb21OYW1lLCBudWxsKTtcblx0ICAgICAgICBzdWJqZWN0Lm9uKG1vdXNlZG93biwgbW91c2Vkb3duZWQpLm9uKHRvdWNoc3RhcnQsIHRvdWNoc3RhcnRlZCk7XG5cdCAgICAgICAgZHJhZ1Jlc3RvcmUoKTtcblx0ICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBtb3VzZXdoZWVsZWQoKSB7XG5cdCAgICAgIHZhciBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIGlmIChtb3VzZXdoZWVsVGltZXIpIGNsZWFyVGltZW91dChtb3VzZXdoZWVsVGltZXIpOyBlbHNlIGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHQuY2FsbCh0aGlzKSwgXG5cdCAgICAgIHRyYW5zbGF0ZTAgPSBsb2NhdGlvbihjZW50ZXIwID0gY2VudGVyIHx8IGQzLm1vdXNlKHRoaXMpKSwgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuXHQgICAgICBtb3VzZXdoZWVsVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIG1vdXNld2hlZWxUaW1lciA9IG51bGw7XG5cdCAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcblx0ICAgICAgfSwgNTApO1xuXHQgICAgICBkM19ldmVudFByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgIHNjYWxlVG8oTWF0aC5wb3coMiwgZDNfYmVoYXZpb3Jfem9vbURlbHRhKCkgKiAuMDAyKSAqIHZpZXcuayk7XG5cdCAgICAgIHRyYW5zbGF0ZVRvKGNlbnRlcjAsIHRyYW5zbGF0ZTApO1xuXHQgICAgICB6b29tZWQoZGlzcGF0Y2gpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZGJsY2xpY2tlZCgpIHtcblx0ICAgICAgdmFyIHAgPSBkMy5tb3VzZSh0aGlzKSwgayA9IE1hdGgubG9nKHZpZXcuaykgLyBNYXRoLkxOMjtcblx0ICAgICAgem9vbVRvKHRoaXMsIHAsIGxvY2F0aW9uKHApLCBkMy5ldmVudC5zaGlmdEtleSA/IE1hdGguY2VpbChrKSAtIDEgOiBNYXRoLmZsb29yKGspICsgMSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDMucmViaW5kKHpvb20sIGV2ZW50LCBcIm9uXCIpO1xuXHQgIH07XG5cdCAgdmFyIGQzX2JlaGF2aW9yX3pvb21JbmZpbml0eSA9IFsgMCwgSW5maW5pdHkgXSwgZDNfYmVoYXZpb3Jfem9vbURlbHRhLCBkM19iZWhhdmlvcl96b29tV2hlZWw7XG5cdCAgZDMuY29sb3IgPSBkM19jb2xvcjtcblx0ICBmdW5jdGlvbiBkM19jb2xvcigpIHt9XG5cdCAgZDNfY29sb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gdGhpcy5yZ2IoKSArIFwiXCI7XG5cdCAgfTtcblx0ICBkMy5oc2wgPSBkM19oc2w7XG5cdCAgZnVuY3Rpb24gZDNfaHNsKGgsIHMsIGwpIHtcblx0ICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfaHNsID8gdm9pZCAodGhpcy5oID0gK2gsIHRoaXMucyA9ICtzLCB0aGlzLmwgPSArbCkgOiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGggaW5zdGFuY2VvZiBkM19oc2wgPyBuZXcgZDNfaHNsKGguaCwgaC5zLCBoLmwpIDogZDNfcmdiX3BhcnNlKFwiXCIgKyBoLCBkM19yZ2JfaHNsLCBkM19oc2wpIDogbmV3IGQzX2hzbChoLCBzLCBsKTtcblx0ICB9XG5cdCAgdmFyIGQzX2hzbFByb3RvdHlwZSA9IGQzX2hzbC5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcblx0ICBkM19oc2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG5cdCAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG5cdCAgICByZXR1cm4gbmV3IGQzX2hzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sIC8gayk7XG5cdCAgfTtcblx0ICBkM19oc2xQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuXHQgICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpO1xuXHQgICAgcmV0dXJuIG5ldyBkM19oc2wodGhpcy5oLCB0aGlzLnMsIGsgKiB0aGlzLmwpO1xuXHQgIH07XG5cdCAgZDNfaHNsUHJvdG90eXBlLnJnYiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2hzbF9yZ2IodGhpcy5oLCB0aGlzLnMsIHRoaXMubCk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19oc2xfcmdiKGgsIHMsIGwpIHtcblx0ICAgIHZhciBtMSwgbTI7XG5cdCAgICBoID0gaXNOYU4oaCkgPyAwIDogKGggJT0gMzYwKSA8IDAgPyBoICsgMzYwIDogaDtcblx0ICAgIHMgPSBpc05hTihzKSA/IDAgOiBzIDwgMCA/IDAgOiBzID4gMSA/IDEgOiBzO1xuXHQgICAgbCA9IGwgPCAwID8gMCA6IGwgPiAxID8gMSA6IGw7XG5cdCAgICBtMiA9IGwgPD0gLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG5cdCAgICBtMSA9IDIgKiBsIC0gbTI7XG5cdCAgICBmdW5jdGlvbiB2KGgpIHtcblx0ICAgICAgaWYgKGggPiAzNjApIGggLT0gMzYwOyBlbHNlIGlmIChoIDwgMCkgaCArPSAzNjA7XG5cdCAgICAgIGlmIChoIDwgNjApIHJldHVybiBtMSArIChtMiAtIG0xKSAqIGggLyA2MDtcblx0ICAgICAgaWYgKGggPCAxODApIHJldHVybiBtMjtcblx0ICAgICAgaWYgKGggPCAyNDApIHJldHVybiBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwO1xuXHQgICAgICByZXR1cm4gbTE7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiB2dihoKSB7XG5cdCAgICAgIHJldHVybiBNYXRoLnJvdW5kKHYoaCkgKiAyNTUpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ldyBkM19yZ2IodnYoaCArIDEyMCksIHZ2KGgpLCB2dihoIC0gMTIwKSk7XG5cdCAgfVxuXHQgIGQzLmhjbCA9IGQzX2hjbDtcblx0ICBmdW5jdGlvbiBkM19oY2woaCwgYywgbCkge1xuXHQgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBkM19oY2wgPyB2b2lkICh0aGlzLmggPSAraCwgdGhpcy5jID0gK2MsIHRoaXMubCA9ICtsKSA6IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gaCBpbnN0YW5jZW9mIGQzX2hjbCA/IG5ldyBkM19oY2woaC5oLCBoLmMsIGgubCkgOiBoIGluc3RhbmNlb2YgZDNfbGFiID8gZDNfbGFiX2hjbChoLmwsIGguYSwgaC5iKSA6IGQzX2xhYl9oY2woKGggPSBkM19yZ2JfbGFiKChoID0gZDMucmdiKGgpKS5yLCBoLmcsIGguYikpLmwsIGguYSwgaC5iKSA6IG5ldyBkM19oY2woaCwgYywgbCk7XG5cdCAgfVxuXHQgIHZhciBkM19oY2xQcm90b3R5cGUgPSBkM19oY2wucHJvdG90eXBlID0gbmV3IGQzX2NvbG9yKCk7XG5cdCAgZDNfaGNsUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuXHQgICAgcmV0dXJuIG5ldyBkM19oY2wodGhpcy5oLCB0aGlzLmMsIE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSkpO1xuXHQgIH07XG5cdCAgZDNfaGNsUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcblx0ICAgIHJldHVybiBuZXcgZDNfaGNsKHRoaXMuaCwgdGhpcy5jLCBNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSk7XG5cdCAgfTtcblx0ICBkM19oY2xQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfaGNsX2xhYih0aGlzLmgsIHRoaXMuYywgdGhpcy5sKS5yZ2IoKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2hjbF9sYWIoaCwgYywgbCkge1xuXHQgICAgaWYgKGlzTmFOKGgpKSBoID0gMDtcblx0ICAgIGlmIChpc05hTihjKSkgYyA9IDA7XG5cdCAgICByZXR1cm4gbmV3IGQzX2xhYihsLCBNYXRoLmNvcyhoICo9IGQzX3JhZGlhbnMpICogYywgTWF0aC5zaW4oaCkgKiBjKTtcblx0ICB9XG5cdCAgZDMubGFiID0gZDNfbGFiO1xuXHQgIGZ1bmN0aW9uIGQzX2xhYihsLCBhLCBiKSB7XG5cdCAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2xhYiA/IHZvaWQgKHRoaXMubCA9ICtsLCB0aGlzLmEgPSArYSwgdGhpcy5iID0gK2IpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBsIGluc3RhbmNlb2YgZDNfbGFiID8gbmV3IGQzX2xhYihsLmwsIGwuYSwgbC5iKSA6IGwgaW5zdGFuY2VvZiBkM19oY2wgPyBkM19oY2xfbGFiKGwuaCwgbC5jLCBsLmwpIDogZDNfcmdiX2xhYigobCA9IGQzX3JnYihsKSkuciwgbC5nLCBsLmIpIDogbmV3IGQzX2xhYihsLCBhLCBiKTtcblx0ICB9XG5cdCAgdmFyIGQzX2xhYl9LID0gMTg7XG5cdCAgdmFyIGQzX2xhYl9YID0gLjk1MDQ3LCBkM19sYWJfWSA9IDEsIGQzX2xhYl9aID0gMS4wODg4Mztcblx0ICB2YXIgZDNfbGFiUHJvdG90eXBlID0gZDNfbGFiLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuXHQgIGQzX2xhYlByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHtcblx0ICAgIHJldHVybiBuZXcgZDNfbGFiKE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSksIHRoaXMuYSwgdGhpcy5iKTtcblx0ICB9O1xuXHQgIGQzX2xhYlByb3RvdHlwZS5kYXJrZXIgPSBmdW5jdGlvbihrKSB7XG5cdCAgICByZXR1cm4gbmV3IGQzX2xhYihNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSwgdGhpcy5hLCB0aGlzLmIpO1xuXHQgIH07XG5cdCAgZDNfbGFiUHJvdG90eXBlLnJnYiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2xhYl9yZ2IodGhpcy5sLCB0aGlzLmEsIHRoaXMuYik7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19sYWJfcmdiKGwsIGEsIGIpIHtcblx0ICAgIHZhciB5ID0gKGwgKyAxNikgLyAxMTYsIHggPSB5ICsgYSAvIDUwMCwgeiA9IHkgLSBiIC8gMjAwO1xuXHQgICAgeCA9IGQzX2xhYl94eXooeCkgKiBkM19sYWJfWDtcblx0ICAgIHkgPSBkM19sYWJfeHl6KHkpICogZDNfbGFiX1k7XG5cdCAgICB6ID0gZDNfbGFiX3h5eih6KSAqIGQzX2xhYl9aO1xuXHQgICAgcmV0dXJuIG5ldyBkM19yZ2IoZDNfeHl6X3JnYigzLjI0MDQ1NDIgKiB4IC0gMS41MzcxMzg1ICogeSAtIC40OTg1MzE0ICogeiksIGQzX3h5el9yZ2IoLS45NjkyNjYgKiB4ICsgMS44NzYwMTA4ICogeSArIC4wNDE1NTYgKiB6KSwgZDNfeHl6X3JnYiguMDU1NjQzNCAqIHggLSAuMjA0MDI1OSAqIHkgKyAxLjA1NzIyNTIgKiB6KSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xhYl9oY2wobCwgYSwgYikge1xuXHQgICAgcmV0dXJuIGwgPiAwID8gbmV3IGQzX2hjbChNYXRoLmF0YW4yKGIsIGEpICogZDNfZGVncmVlcywgTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpLCBsKSA6IG5ldyBkM19oY2woTmFOLCBOYU4sIGwpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYWJfeHl6KHgpIHtcblx0ICAgIHJldHVybiB4ID4gLjIwNjg5MzAzNCA/IHggKiB4ICogeCA6ICh4IC0gNCAvIDI5KSAvIDcuNzg3MDM3O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM194eXpfbGFiKHgpIHtcblx0ICAgIHJldHVybiB4ID4gLjAwODg1NiA/IE1hdGgucG93KHgsIDEgLyAzKSA6IDcuNzg3MDM3ICogeCArIDQgLyAyOTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfeHl6X3JnYihyKSB7XG5cdCAgICByZXR1cm4gTWF0aC5yb3VuZCgyNTUgKiAociA8PSAuMDAzMDQgPyAxMi45MiAqIHIgOiAxLjA1NSAqIE1hdGgucG93KHIsIDEgLyAyLjQpIC0gLjA1NSkpO1xuXHQgIH1cblx0ICBkMy5yZ2IgPSBkM19yZ2I7XG5cdCAgZnVuY3Rpb24gZDNfcmdiKHIsIGcsIGIpIHtcblx0ICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfcmdiID8gdm9pZCAodGhpcy5yID0gfn5yLCB0aGlzLmcgPSB+fmcsIHRoaXMuYiA9IH5+YikgOiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHIgaW5zdGFuY2VvZiBkM19yZ2IgPyBuZXcgZDNfcmdiKHIuciwgci5nLCByLmIpIDogZDNfcmdiX3BhcnNlKFwiXCIgKyByLCBkM19yZ2IsIGQzX2hzbF9yZ2IpIDogbmV3IGQzX3JnYihyLCBnLCBiKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfcmdiTnVtYmVyKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gbmV3IGQzX3JnYih2YWx1ZSA+PiAxNiwgdmFsdWUgPj4gOCAmIDI1NSwgdmFsdWUgJiAyNTUpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19yZ2JTdHJpbmcodmFsdWUpIHtcblx0ICAgIHJldHVybiBkM19yZ2JOdW1iZXIodmFsdWUpICsgXCJcIjtcblx0ICB9XG5cdCAgdmFyIGQzX3JnYlByb3RvdHlwZSA9IGQzX3JnYi5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcblx0ICBkM19yZ2JQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG5cdCAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG5cdCAgICB2YXIgciA9IHRoaXMuciwgZyA9IHRoaXMuZywgYiA9IHRoaXMuYiwgaSA9IDMwO1xuXHQgICAgaWYgKCFyICYmICFnICYmICFiKSByZXR1cm4gbmV3IGQzX3JnYihpLCBpLCBpKTtcblx0ICAgIGlmIChyICYmIHIgPCBpKSByID0gaTtcblx0ICAgIGlmIChnICYmIGcgPCBpKSBnID0gaTtcblx0ICAgIGlmIChiICYmIGIgPCBpKSBiID0gaTtcblx0ICAgIHJldHVybiBuZXcgZDNfcmdiKE1hdGgubWluKDI1NSwgciAvIGspLCBNYXRoLm1pbigyNTUsIGcgLyBrKSwgTWF0aC5taW4oMjU1LCBiIC8gaykpO1xuXHQgIH07XG5cdCAgZDNfcmdiUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcblx0ICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKTtcblx0ICAgIHJldHVybiBuZXcgZDNfcmdiKGsgKiB0aGlzLnIsIGsgKiB0aGlzLmcsIGsgKiB0aGlzLmIpO1xuXHQgIH07XG5cdCAgZDNfcmdiUHJvdG90eXBlLmhzbCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3JnYl9oc2wodGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG5cdCAgfTtcblx0ICBkM19yZ2JQcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBcIiNcIiArIGQzX3JnYl9oZXgodGhpcy5yKSArIGQzX3JnYl9oZXgodGhpcy5nKSArIGQzX3JnYl9oZXgodGhpcy5iKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3JnYl9oZXgodikge1xuXHQgICAgcmV0dXJuIHYgPCAxNiA/IFwiMFwiICsgTWF0aC5tYXgoMCwgdikudG9TdHJpbmcoMTYpIDogTWF0aC5taW4oMjU1LCB2KS50b1N0cmluZygxNik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZShmb3JtYXQsIHJnYiwgaHNsKSB7XG5cdCAgICB2YXIgciA9IDAsIGcgPSAwLCBiID0gMCwgbTEsIG0yLCBjb2xvcjtcblx0ICAgIG0xID0gLyhbYS16XSspXFwoKC4qKVxcKS8uZXhlYyhmb3JtYXQgPSBmb3JtYXQudG9Mb3dlckNhc2UoKSk7XG5cdCAgICBpZiAobTEpIHtcblx0ICAgICAgbTIgPSBtMVsyXS5zcGxpdChcIixcIik7XG5cdCAgICAgIHN3aXRjaCAobTFbMV0pIHtcblx0ICAgICAgIGNhc2UgXCJoc2xcIjpcblx0ICAgICAgICB7XG5cdCAgICAgICAgICByZXR1cm4gaHNsKHBhcnNlRmxvYXQobTJbMF0pLCBwYXJzZUZsb2F0KG0yWzFdKSAvIDEwMCwgcGFyc2VGbG9hdChtMlsyXSkgLyAxMDApO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICBjYXNlIFwicmdiXCI6XG5cdCAgICAgICAge1xuXHQgICAgICAgICAgcmV0dXJuIHJnYihkM19yZ2JfcGFyc2VOdW1iZXIobTJbMF0pLCBkM19yZ2JfcGFyc2VOdW1iZXIobTJbMV0pLCBkM19yZ2JfcGFyc2VOdW1iZXIobTJbMl0pKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChjb2xvciA9IGQzX3JnYl9uYW1lcy5nZXQoZm9ybWF0KSkge1xuXHQgICAgICByZXR1cm4gcmdiKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuXHQgICAgfVxuXHQgICAgaWYgKGZvcm1hdCAhPSBudWxsICYmIGZvcm1hdC5jaGFyQXQoMCkgPT09IFwiI1wiICYmICFpc05hTihjb2xvciA9IHBhcnNlSW50KGZvcm1hdC5zbGljZSgxKSwgMTYpKSkge1xuXHQgICAgICBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNCkge1xuXHQgICAgICAgIHIgPSAoY29sb3IgJiAzODQwKSA+PiA0O1xuXHQgICAgICAgIHIgPSByID4+IDQgfCByO1xuXHQgICAgICAgIGcgPSBjb2xvciAmIDI0MDtcblx0ICAgICAgICBnID0gZyA+PiA0IHwgZztcblx0ICAgICAgICBiID0gY29sb3IgJiAxNTtcblx0ICAgICAgICBiID0gYiA8PCA0IHwgYjtcblx0ICAgICAgfSBlbHNlIGlmIChmb3JtYXQubGVuZ3RoID09PSA3KSB7XG5cdCAgICAgICAgciA9IChjb2xvciAmIDE2NzExNjgwKSA+PiAxNjtcblx0ICAgICAgICBnID0gKGNvbG9yICYgNjUyODApID4+IDg7XG5cdCAgICAgICAgYiA9IGNvbG9yICYgMjU1O1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmdiKHIsIGcsIGIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19yZ2JfaHNsKHIsIGcsIGIpIHtcblx0ICAgIHZhciBtaW4gPSBNYXRoLm1pbihyIC89IDI1NSwgZyAvPSAyNTUsIGIgLz0gMjU1KSwgbWF4ID0gTWF0aC5tYXgociwgZywgYiksIGQgPSBtYXggLSBtaW4sIGgsIHMsIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cdCAgICBpZiAoZCkge1xuXHQgICAgICBzID0gbCA8IC41ID8gZCAvIChtYXggKyBtaW4pIDogZCAvICgyIC0gbWF4IC0gbWluKTtcblx0ICAgICAgaWYgKHIgPT0gbWF4KSBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGVsc2UgaWYgKGcgPT0gbWF4KSBoID0gKGIgLSByKSAvIGQgKyAyOyBlbHNlIGggPSAociAtIGcpIC8gZCArIDQ7XG5cdCAgICAgIGggKj0gNjA7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBoID0gTmFOO1xuXHQgICAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXcgZDNfaHNsKGgsIHMsIGwpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19yZ2JfbGFiKHIsIGcsIGIpIHtcblx0ICAgIHIgPSBkM19yZ2JfeHl6KHIpO1xuXHQgICAgZyA9IGQzX3JnYl94eXooZyk7XG5cdCAgICBiID0gZDNfcmdiX3h5eihiKTtcblx0ICAgIHZhciB4ID0gZDNfeHl6X2xhYigoLjQxMjQ1NjQgKiByICsgLjM1NzU3NjEgKiBnICsgLjE4MDQzNzUgKiBiKSAvIGQzX2xhYl9YKSwgeSA9IGQzX3h5el9sYWIoKC4yMTI2NzI5ICogciArIC43MTUxNTIyICogZyArIC4wNzIxNzUgKiBiKSAvIGQzX2xhYl9ZKSwgeiA9IGQzX3h5el9sYWIoKC4wMTkzMzM5ICogciArIC4xMTkxOTIgKiBnICsgLjk1MDMwNDEgKiBiKSAvIGQzX2xhYl9aKTtcblx0ICAgIHJldHVybiBkM19sYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfcmdiX3h5eihyKSB7XG5cdCAgICByZXR1cm4gKHIgLz0gMjU1KSA8PSAuMDQwNDUgPyByIC8gMTIuOTIgOiBNYXRoLnBvdygociArIC4wNTUpIC8gMS4wNTUsIDIuNCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZU51bWJlcihjKSB7XG5cdCAgICB2YXIgZiA9IHBhcnNlRmxvYXQoYyk7XG5cdCAgICByZXR1cm4gYy5jaGFyQXQoYy5sZW5ndGggLSAxKSA9PT0gXCIlXCIgPyBNYXRoLnJvdW5kKGYgKiAyLjU1KSA6IGY7XG5cdCAgfVxuXHQgIHZhciBkM19yZ2JfbmFtZXMgPSBkMy5tYXAoe1xuXHQgICAgYWxpY2VibHVlOiAxNTc5MjM4Myxcblx0ICAgIGFudGlxdWV3aGl0ZTogMTY0NDQzNzUsXG5cdCAgICBhcXVhOiA2NTUzNSxcblx0ICAgIGFxdWFtYXJpbmU6IDgzODg1NjQsXG5cdCAgICBhenVyZTogMTU3OTQxNzUsXG5cdCAgICBiZWlnZTogMTYxMTkyNjAsXG5cdCAgICBiaXNxdWU6IDE2NzcwMjQ0LFxuXHQgICAgYmxhY2s6IDAsXG5cdCAgICBibGFuY2hlZGFsbW9uZDogMTY3NzIwNDUsXG5cdCAgICBibHVlOiAyNTUsXG5cdCAgICBibHVldmlvbGV0OiA5MDU1MjAyLFxuXHQgICAgYnJvd246IDEwODI0MjM0LFxuXHQgICAgYnVybHl3b29kOiAxNDU5NjIzMSxcblx0ICAgIGNhZGV0Ymx1ZTogNjI2NjUyOCxcblx0ICAgIGNoYXJ0cmV1c2U6IDgzODgzNTIsXG5cdCAgICBjaG9jb2xhdGU6IDEzNzg5NDcwLFxuXHQgICAgY29yYWw6IDE2NzQ0MjcyLFxuXHQgICAgY29ybmZsb3dlcmJsdWU6IDY1OTE5ODEsXG5cdCAgICBjb3Juc2lsazogMTY3NzUzODgsXG5cdCAgICBjcmltc29uOiAxNDQyMzEwMCxcblx0ICAgIGN5YW46IDY1NTM1LFxuXHQgICAgZGFya2JsdWU6IDEzOSxcblx0ICAgIGRhcmtjeWFuOiAzNTcyMyxcblx0ICAgIGRhcmtnb2xkZW5yb2Q6IDEyMDkyOTM5LFxuXHQgICAgZGFya2dyYXk6IDExMTE5MDE3LFxuXHQgICAgZGFya2dyZWVuOiAyNTYwMCxcblx0ICAgIGRhcmtncmV5OiAxMTExOTAxNyxcblx0ICAgIGRhcmtraGFraTogMTI0MzMyNTksXG5cdCAgICBkYXJrbWFnZW50YTogOTEwOTY0Myxcblx0ICAgIGRhcmtvbGl2ZWdyZWVuOiA1NTk3OTk5LFxuXHQgICAgZGFya29yYW5nZTogMTY3NDc1MjAsXG5cdCAgICBkYXJrb3JjaGlkOiAxMDA0MDAxMixcblx0ICAgIGRhcmtyZWQ6IDkxMDk1MDQsXG5cdCAgICBkYXJrc2FsbW9uOiAxNTMwODQxMCxcblx0ICAgIGRhcmtzZWFncmVlbjogOTQxOTkxOSxcblx0ICAgIGRhcmtzbGF0ZWJsdWU6IDQ3MzQzNDcsXG5cdCAgICBkYXJrc2xhdGVncmF5OiAzMTAwNDk1LFxuXHQgICAgZGFya3NsYXRlZ3JleTogMzEwMDQ5NSxcblx0ICAgIGRhcmt0dXJxdW9pc2U6IDUyOTQ1LFxuXHQgICAgZGFya3Zpb2xldDogOTY5OTUzOSxcblx0ICAgIGRlZXBwaW5rOiAxNjcxNjk0Nyxcblx0ICAgIGRlZXBza3libHVlOiA0OTE1MSxcblx0ICAgIGRpbWdyYXk6IDY5MDgyNjUsXG5cdCAgICBkaW1ncmV5OiA2OTA4MjY1LFxuXHQgICAgZG9kZ2VyYmx1ZTogMjAwMzE5OSxcblx0ICAgIGZpcmVicmljazogMTE2NzQxNDYsXG5cdCAgICBmbG9yYWx3aGl0ZTogMTY3NzU5MjAsXG5cdCAgICBmb3Jlc3RncmVlbjogMjI2Mzg0Mixcblx0ICAgIGZ1Y2hzaWE6IDE2NzExOTM1LFxuXHQgICAgZ2FpbnNib3JvOiAxNDQ3NDQ2MCxcblx0ICAgIGdob3N0d2hpdGU6IDE2MzE2NjcxLFxuXHQgICAgZ29sZDogMTY3NjY3MjAsXG5cdCAgICBnb2xkZW5yb2Q6IDE0MzI5MTIwLFxuXHQgICAgZ3JheTogODQyMTUwNCxcblx0ICAgIGdyZWVuOiAzMjc2OCxcblx0ICAgIGdyZWVueWVsbG93OiAxMTQwMzA1NSxcblx0ICAgIGdyZXk6IDg0MjE1MDQsXG5cdCAgICBob25leWRldzogMTU3OTQxNjAsXG5cdCAgICBob3RwaW5rOiAxNjczODc0MCxcblx0ICAgIGluZGlhbnJlZDogMTM0NTg1MjQsXG5cdCAgICBpbmRpZ286IDQ5MTUzMzAsXG5cdCAgICBpdm9yeTogMTY3NzcyMDAsXG5cdCAgICBraGFraTogMTU3ODc2NjAsXG5cdCAgICBsYXZlbmRlcjogMTUxMzI0MTAsXG5cdCAgICBsYXZlbmRlcmJsdXNoOiAxNjc3MzM2NSxcblx0ICAgIGxhd25ncmVlbjogODE5MDk3Nixcblx0ICAgIGxlbW9uY2hpZmZvbjogMTY3NzU4ODUsXG5cdCAgICBsaWdodGJsdWU6IDExMzkzMjU0LFxuXHQgICAgbGlnaHRjb3JhbDogMTU3NjE1MzYsXG5cdCAgICBsaWdodGN5YW46IDE0NzQ1NTk5LFxuXHQgICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDE2NDQ4MjEwLFxuXHQgICAgbGlnaHRncmF5OiAxMzg4MjMyMyxcblx0ICAgIGxpZ2h0Z3JlZW46IDk0OTgyNTYsXG5cdCAgICBsaWdodGdyZXk6IDEzODgyMzIzLFxuXHQgICAgbGlnaHRwaW5rOiAxNjc1ODQ2NSxcblx0ICAgIGxpZ2h0c2FsbW9uOiAxNjc1Mjc2Mixcblx0ICAgIGxpZ2h0c2VhZ3JlZW46IDIxNDI4OTAsXG5cdCAgICBsaWdodHNreWJsdWU6IDg5MDAzNDYsXG5cdCAgICBsaWdodHNsYXRlZ3JheTogNzgzMzc1Myxcblx0ICAgIGxpZ2h0c2xhdGVncmV5OiA3ODMzNzUzLFxuXHQgICAgbGlnaHRzdGVlbGJsdWU6IDExNTg0NzM0LFxuXHQgICAgbGlnaHR5ZWxsb3c6IDE2Nzc3MTg0LFxuXHQgICAgbGltZTogNjUyODAsXG5cdCAgICBsaW1lZ3JlZW46IDMzMjkzMzAsXG5cdCAgICBsaW5lbjogMTY0NDU2NzAsXG5cdCAgICBtYWdlbnRhOiAxNjcxMTkzNSxcblx0ICAgIG1hcm9vbjogODM4ODYwOCxcblx0ICAgIG1lZGl1bWFxdWFtYXJpbmU6IDY3MzczMjIsXG5cdCAgICBtZWRpdW1ibHVlOiAyMDUsXG5cdCAgICBtZWRpdW1vcmNoaWQ6IDEyMjExNjY3LFxuXHQgICAgbWVkaXVtcHVycGxlOiA5NjYyNjgzLFxuXHQgICAgbWVkaXVtc2VhZ3JlZW46IDM5NzgwOTcsXG5cdCAgICBtZWRpdW1zbGF0ZWJsdWU6IDgwODc3OTAsXG5cdCAgICBtZWRpdW1zcHJpbmdncmVlbjogNjQxNTQsXG5cdCAgICBtZWRpdW10dXJxdW9pc2U6IDQ3NzIzMDAsXG5cdCAgICBtZWRpdW12aW9sZXRyZWQ6IDEzMDQ3MTczLFxuXHQgICAgbWlkbmlnaHRibHVlOiAxNjQ0OTEyLFxuXHQgICAgbWludGNyZWFtOiAxNjEyMTg1MCxcblx0ICAgIG1pc3R5cm9zZTogMTY3NzAyNzMsXG5cdCAgICBtb2NjYXNpbjogMTY3NzAyMjksXG5cdCAgICBuYXZham93aGl0ZTogMTY3Njg2ODUsXG5cdCAgICBuYXZ5OiAxMjgsXG5cdCAgICBvbGRsYWNlOiAxNjY0MzU1OCxcblx0ICAgIG9saXZlOiA4NDIxMzc2LFxuXHQgICAgb2xpdmVkcmFiOiA3MDQ4NzM5LFxuXHQgICAgb3JhbmdlOiAxNjc1MzkyMCxcblx0ICAgIG9yYW5nZXJlZDogMTY3MjkzNDQsXG5cdCAgICBvcmNoaWQ6IDE0MzE1NzM0LFxuXHQgICAgcGFsZWdvbGRlbnJvZDogMTU2NTcxMzAsXG5cdCAgICBwYWxlZ3JlZW46IDEwMDI1ODgwLFxuXHQgICAgcGFsZXR1cnF1b2lzZTogMTE1Mjk5NjYsXG5cdCAgICBwYWxldmlvbGV0cmVkOiAxNDM4MTIwMyxcblx0ICAgIHBhcGF5YXdoaXA6IDE2NzczMDc3LFxuXHQgICAgcGVhY2hwdWZmOiAxNjc2NzY3Myxcblx0ICAgIHBlcnU6IDEzNDY4OTkxLFxuXHQgICAgcGluazogMTY3NjEwMzUsXG5cdCAgICBwbHVtOiAxNDUyNDYzNyxcblx0ICAgIHBvd2RlcmJsdWU6IDExNTkxOTEwLFxuXHQgICAgcHVycGxlOiA4Mzg4NzM2LFxuXHQgICAgcmViZWNjYXB1cnBsZTogNjY5Nzg4MSxcblx0ICAgIHJlZDogMTY3MTE2ODAsXG5cdCAgICByb3N5YnJvd246IDEyMzU3NTE5LFxuXHQgICAgcm95YWxibHVlOiA0Mjg2OTQ1LFxuXHQgICAgc2FkZGxlYnJvd246IDkxMjcxODcsXG5cdCAgICBzYWxtb246IDE2NDE2ODgyLFxuXHQgICAgc2FuZHlicm93bjogMTYwMzI4NjQsXG5cdCAgICBzZWFncmVlbjogMzA1MDMyNyxcblx0ICAgIHNlYXNoZWxsOiAxNjc3NDYzOCxcblx0ICAgIHNpZW5uYTogMTA1MDY3OTcsXG5cdCAgICBzaWx2ZXI6IDEyNjMyMjU2LFxuXHQgICAgc2t5Ymx1ZTogODkwMDMzMSxcblx0ICAgIHNsYXRlYmx1ZTogNjk3MDA2MSxcblx0ICAgIHNsYXRlZ3JheTogNzM3Mjk0NCxcblx0ICAgIHNsYXRlZ3JleTogNzM3Mjk0NCxcblx0ICAgIHNub3c6IDE2Nzc1OTMwLFxuXHQgICAgc3ByaW5nZ3JlZW46IDY1NDA3LFxuXHQgICAgc3RlZWxibHVlOiA0NjIwOTgwLFxuXHQgICAgdGFuOiAxMzgwODc4MCxcblx0ICAgIHRlYWw6IDMyODk2LFxuXHQgICAgdGhpc3RsZTogMTQyMDQ4ODgsXG5cdCAgICB0b21hdG86IDE2NzM3MDk1LFxuXHQgICAgdHVycXVvaXNlOiA0MjUxODU2LFxuXHQgICAgdmlvbGV0OiAxNTYzMTA4Nixcblx0ICAgIHdoZWF0OiAxNjExMzMzMSxcblx0ICAgIHdoaXRlOiAxNjc3NzIxNSxcblx0ICAgIHdoaXRlc21va2U6IDE2MTE5Mjg1LFxuXHQgICAgeWVsbG93OiAxNjc3Njk2MCxcblx0ICAgIHllbGxvd2dyZWVuOiAxMDE0NTA3NFxuXHQgIH0pO1xuXHQgIGQzX3JnYl9uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0ICAgIGQzX3JnYl9uYW1lcy5zZXQoa2V5LCBkM19yZ2JOdW1iZXIodmFsdWUpKTtcblx0ICB9KTtcblx0ICBmdW5jdGlvbiBkM19mdW5jdG9yKHYpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdiA6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdjtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmZ1bmN0b3IgPSBkM19mdW5jdG9yO1xuXHQgIGQzLnhociA9IGQzX3hoclR5cGUoZDNfaWRlbnRpdHkpO1xuXHQgIGZ1bmN0aW9uIGQzX3hoclR5cGUocmVzcG9uc2UpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbih1cmwsIG1pbWVUeXBlLCBjYWxsYmFjaykge1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgbWltZVR5cGUgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBtaW1lVHlwZSwgXG5cdCAgICAgIG1pbWVUeXBlID0gbnVsbDtcblx0ICAgICAgcmV0dXJuIGQzX3hocih1cmwsIG1pbWVUeXBlLCByZXNwb25zZSwgY2FsbGJhY2spO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfeGhyKHVybCwgbWltZVR5cGUsIHJlc3BvbnNlLCBjYWxsYmFjaykge1xuXHQgICAgdmFyIHhociA9IHt9LCBkaXNwYXRjaCA9IGQzLmRpc3BhdGNoKFwiYmVmb3Jlc2VuZFwiLCBcInByb2dyZXNzXCIsIFwibG9hZFwiLCBcImVycm9yXCIpLCBoZWFkZXJzID0ge30sIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSwgcmVzcG9uc2VUeXBlID0gbnVsbDtcblx0ICAgIGlmICh0aGlzLlhEb21haW5SZXF1ZXN0ICYmICEoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiByZXF1ZXN0KSAmJiAvXihodHRwKHMpPzopP1xcL1xcLy8udGVzdCh1cmwpKSByZXF1ZXN0ID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG5cdCAgICBcIm9ubG9hZFwiIGluIHJlcXVlc3QgPyByZXF1ZXN0Lm9ubG9hZCA9IHJlcXVlc3Qub25lcnJvciA9IHJlc3BvbmQgOiByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXF1ZXN0LnJlYWR5U3RhdGUgPiAzICYmIHJlc3BvbmQoKTtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiByZXNwb25kKCkge1xuXHQgICAgICB2YXIgc3RhdHVzID0gcmVxdWVzdC5zdGF0dXMsIHJlc3VsdDtcblx0ICAgICAgaWYgKCFzdGF0dXMgJiYgZDNfeGhySGFzUmVzcG9uc2UocmVxdWVzdCkgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgcmVzdWx0ID0gcmVzcG9uc2UuY2FsbCh4aHIsIHJlcXVlc3QpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIGRpc3BhdGNoLmVycm9yLmNhbGwoeGhyLCBlKTtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZGlzcGF0Y2gubG9hZC5jYWxsKHhociwgcmVzdWx0KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgcmVxdWVzdCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdCAgICAgIHZhciBvID0gZDMuZXZlbnQ7XG5cdCAgICAgIGQzLmV2ZW50ID0gZXZlbnQ7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgZGlzcGF0Y2gucHJvZ3Jlc3MuY2FsbCh4aHIsIHJlcXVlc3QpO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIGQzLmV2ZW50ID0gbztcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHhoci5oZWFkZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHQgICAgICBuYW1lID0gKG5hbWUgKyBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiBoZWFkZXJzW25hbWVdO1xuXHQgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIGhlYWRlcnNbbmFtZV07IGVsc2UgaGVhZGVyc1tuYW1lXSA9IHZhbHVlICsgXCJcIjtcblx0ICAgICAgcmV0dXJuIHhocjtcblx0ICAgIH07XG5cdCAgICB4aHIubWltZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBtaW1lVHlwZTtcblx0ICAgICAgbWltZVR5cGUgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIjtcblx0ICAgICAgcmV0dXJuIHhocjtcblx0ICAgIH07XG5cdCAgICB4aHIucmVzcG9uc2VUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmVzcG9uc2VUeXBlO1xuXHQgICAgICByZXNwb25zZVR5cGUgPSB2YWx1ZTtcblx0ICAgICAgcmV0dXJuIHhocjtcblx0ICAgIH07XG5cdCAgICB4aHIucmVzcG9uc2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICByZXNwb25zZSA9IHZhbHVlO1xuXHQgICAgICByZXR1cm4geGhyO1xuXHQgICAgfTtcblx0ICAgIFsgXCJnZXRcIiwgXCJwb3N0XCIgXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuXHQgICAgICB4aHJbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiB4aHIuc2VuZC5hcHBseSh4aHIsIFsgbWV0aG9kIF0uY29uY2F0KGQzX2FycmF5KGFyZ3VtZW50cykpKTtcblx0ICAgICAgfTtcblx0ICAgIH0pO1xuXHQgICAgeGhyLnNlbmQgPSBmdW5jdGlvbihtZXRob2QsIGRhdGEsIGNhbGxiYWNrKSB7XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrID0gZGF0YSwgZGF0YSA9IG51bGw7XG5cdCAgICAgIHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG5cdCAgICAgIGlmIChtaW1lVHlwZSAhPSBudWxsICYmICEoXCJhY2NlcHRcIiBpbiBoZWFkZXJzKSkgaGVhZGVyc1tcImFjY2VwdFwiXSA9IG1pbWVUeXBlICsgXCIsKi8qXCI7XG5cdCAgICAgIGlmIChyZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIpIGZvciAodmFyIG5hbWUgaW4gaGVhZGVycykgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIGhlYWRlcnNbbmFtZV0pO1xuXHQgICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUpIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZSk7XG5cdCAgICAgIGlmIChyZXNwb25zZVR5cGUgIT0gbnVsbCkgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XG5cdCAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB4aHIub24oXCJlcnJvclwiLCBjYWxsYmFjaykub24oXCJsb2FkXCIsIGZ1bmN0aW9uKHJlcXVlc3QpIHtcblx0ICAgICAgICBjYWxsYmFjayhudWxsLCByZXF1ZXN0KTtcblx0ICAgICAgfSk7XG5cdCAgICAgIGRpc3BhdGNoLmJlZm9yZXNlbmQuY2FsbCh4aHIsIHJlcXVlc3QpO1xuXHQgICAgICByZXF1ZXN0LnNlbmQoZGF0YSA9PSBudWxsID8gbnVsbCA6IGRhdGEpO1xuXHQgICAgICByZXR1cm4geGhyO1xuXHQgICAgfTtcblx0ICAgIHhoci5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXF1ZXN0LmFib3J0KCk7XG5cdCAgICAgIHJldHVybiB4aHI7XG5cdCAgICB9O1xuXHQgICAgZDMucmViaW5kKHhociwgZGlzcGF0Y2gsIFwib25cIik7XG5cdCAgICByZXR1cm4gY2FsbGJhY2sgPT0gbnVsbCA/IHhociA6IHhoci5nZXQoZDNfeGhyX2ZpeENhbGxiYWNrKGNhbGxiYWNrKSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3hocl9maXhDYWxsYmFjayhjYWxsYmFjaykge1xuXHQgICAgcmV0dXJuIGNhbGxiYWNrLmxlbmd0aCA9PT0gMSA/IGZ1bmN0aW9uKGVycm9yLCByZXF1ZXN0KSB7XG5cdCAgICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyByZXF1ZXN0IDogbnVsbCk7XG5cdCAgICB9IDogY2FsbGJhY2s7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3hockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHtcblx0ICAgIHZhciB0eXBlID0gcmVxdWVzdC5yZXNwb25zZVR5cGU7XG5cdCAgICByZXR1cm4gdHlwZSAmJiB0eXBlICE9PSBcInRleHRcIiA/IHJlcXVlc3QucmVzcG9uc2UgOiByZXF1ZXN0LnJlc3BvbnNlVGV4dDtcblx0ICB9XG5cdCAgZDMuZHN2ID0gZnVuY3Rpb24oZGVsaW1pdGVyLCBtaW1lVHlwZSkge1xuXHQgICAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cCgnW1wiJyArIGRlbGltaXRlciArIFwiXFxuXVwiKSwgZGVsaW1pdGVyQ29kZSA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXHQgICAgZnVuY3Rpb24gZHN2KHVybCwgcm93LCBjYWxsYmFjaykge1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGNhbGxiYWNrID0gcm93LCByb3cgPSBudWxsO1xuXHQgICAgICB2YXIgeGhyID0gZDNfeGhyKHVybCwgbWltZVR5cGUsIHJvdyA9PSBudWxsID8gcmVzcG9uc2UgOiB0eXBlZFJlc3BvbnNlKHJvdyksIGNhbGxiYWNrKTtcblx0ICAgICAgeGhyLnJvdyA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHhoci5yZXNwb25zZSgocm93ID0gXykgPT0gbnVsbCA/IHJlc3BvbnNlIDogdHlwZWRSZXNwb25zZShfKSkgOiByb3c7XG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiB4aHI7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByZXNwb25zZShyZXF1ZXN0KSB7XG5cdCAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gdHlwZWRSZXNwb25zZShmKSB7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XG5cdCAgICAgICAgcmV0dXJuIGRzdi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCwgZik7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBkc3YucGFyc2UgPSBmdW5jdGlvbih0ZXh0LCBmKSB7XG5cdCAgICAgIHZhciBvO1xuXHQgICAgICByZXR1cm4gZHN2LnBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcblx0ICAgICAgICBpZiAobykgcmV0dXJuIG8ocm93LCBpIC0gMSk7XG5cdCAgICAgICAgdmFyIGEgPSBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIHJvdy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuXHQgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG5cdCAgICAgICAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG5cdCAgICAgICAgbyA9IGYgPyBmdW5jdGlvbihyb3csIGkpIHtcblx0ICAgICAgICAgIHJldHVybiBmKGEocm93KSwgaSk7XG5cdCAgICAgICAgfSA6IGE7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIGRzdi5wYXJzZVJvd3MgPSBmdW5jdGlvbih0ZXh0LCBmKSB7XG5cdCAgICAgIHZhciBFT0wgPSB7fSwgRU9GID0ge30sIHJvd3MgPSBbXSwgTiA9IHRleHQubGVuZ3RoLCBJID0gMCwgbiA9IDAsIHQsIGVvbDtcblx0ICAgICAgZnVuY3Rpb24gdG9rZW4oKSB7XG5cdCAgICAgICAgaWYgKEkgPj0gTikgcmV0dXJuIEVPRjtcblx0ICAgICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblx0ICAgICAgICB2YXIgaiA9IEk7XG5cdCAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gMzQpIHtcblx0ICAgICAgICAgIHZhciBpID0gajtcblx0ICAgICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG5cdCAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgPT09IDM0KSB7XG5cdCAgICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpICsgMSkgIT09IDM0KSBicmVhaztcblx0ICAgICAgICAgICAgICArK2k7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIEkgPSBpICsgMjtcblx0ICAgICAgICAgIHZhciBjID0gdGV4dC5jaGFyQ29kZUF0KGkgKyAxKTtcblx0ICAgICAgICAgIGlmIChjID09PSAxMykge1xuXHQgICAgICAgICAgICBlb2wgPSB0cnVlO1xuXHQgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAyKSA9PT0gMTApICsrSTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gMTApIHtcblx0ICAgICAgICAgICAgZW9sID0gdHJ1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpKS5yZXBsYWNlKC9cIlwiL2csICdcIicpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB3aGlsZSAoSSA8IE4pIHtcblx0ICAgICAgICAgIHZhciBjID0gdGV4dC5jaGFyQ29kZUF0KEkrKyksIGsgPSAxO1xuXHQgICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlOyBlbHNlIGlmIChjID09PSAxMykge1xuXHQgICAgICAgICAgICBlb2wgPSB0cnVlO1xuXHQgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSAxMCkgKytJLCArK2s7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGMgIT09IGRlbGltaXRlckNvZGUpIGNvbnRpbnVlO1xuXHQgICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgSSAtIGspO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqKTtcblx0ICAgICAgfVxuXHQgICAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG5cdCAgICAgICAgdmFyIGEgPSBbXTtcblx0ICAgICAgICB3aGlsZSAodCAhPT0gRU9MICYmIHQgIT09IEVPRikge1xuXHQgICAgICAgICAgYS5wdXNoKHQpO1xuXHQgICAgICAgICAgdCA9IHRva2VuKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChmICYmIChhID0gZihhLCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcblx0ICAgICAgICByb3dzLnB1c2goYSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJvd3M7XG5cdCAgICB9O1xuXHQgICAgZHN2LmZvcm1hdCA9IGZ1bmN0aW9uKHJvd3MpIHtcblx0ICAgICAgaWYgKEFycmF5LmlzQXJyYXkocm93c1swXSkpIHJldHVybiBkc3YuZm9ybWF0Um93cyhyb3dzKTtcblx0ICAgICAgdmFyIGZpZWxkU2V0ID0gbmV3IGQzX1NldCgpLCBmaWVsZHMgPSBbXTtcblx0ICAgICAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuXHQgICAgICAgIGZvciAodmFyIGZpZWxkIGluIHJvdykge1xuXHQgICAgICAgICAgaWYgKCFmaWVsZFNldC5oYXMoZmllbGQpKSB7XG5cdCAgICAgICAgICAgIGZpZWxkcy5wdXNoKGZpZWxkU2V0LmFkZChmaWVsZCkpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBbIGZpZWxkcy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKSBdLmNvbmNhdChyb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcblx0ICAgICAgICByZXR1cm4gZmllbGRzLm1hcChmdW5jdGlvbihmaWVsZCkge1xuXHQgICAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tmaWVsZF0pO1xuXHQgICAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcblx0ICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XG5cdCAgICB9O1xuXHQgICAgZHN2LmZvcm1hdFJvd3MgPSBmdW5jdGlvbihyb3dzKSB7XG5cdCAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuXHQgICAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodGV4dCkge1xuXHQgICAgICByZXR1cm4gcmVGb3JtYXQudGVzdCh0ZXh0KSA/ICdcIicgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgJ1wiXCInKSArICdcIicgOiB0ZXh0O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGRzdjtcblx0ICB9O1xuXHQgIGQzLmNzdiA9IGQzLmRzdihcIixcIiwgXCJ0ZXh0L2NzdlwiKTtcblx0ICBkMy50c3YgPSBkMy5kc3YoXCJcdFwiLCBcInRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXNcIik7XG5cdCAgdmFyIGQzX3RpbWVyX3F1ZXVlSGVhZCwgZDNfdGltZXJfcXVldWVUYWlsLCBkM190aW1lcl9pbnRlcnZhbCwgZDNfdGltZXJfdGltZW91dCwgZDNfdGltZXJfZnJhbWUgPSB0aGlzW2QzX3ZlbmRvclN5bWJvbCh0aGlzLCBcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiKV0gfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0ICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDE3KTtcblx0ICB9O1xuXHQgIGQzLnRpbWVyID0gZnVuY3Rpb24oKSB7XG5cdCAgICBkM190aW1lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aGVuKSB7XG5cdCAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICBpZiAobiA8IDIpIGRlbGF5ID0gMDtcblx0ICAgIGlmIChuIDwgMykgdGhlbiA9IERhdGUubm93KCk7XG5cdCAgICB2YXIgdGltZSA9IHRoZW4gKyBkZWxheSwgdGltZXIgPSB7XG5cdCAgICAgIGM6IGNhbGxiYWNrLFxuXHQgICAgICB0OiB0aW1lLFxuXHQgICAgICBuOiBudWxsXG5cdCAgICB9O1xuXHQgICAgaWYgKGQzX3RpbWVyX3F1ZXVlVGFpbCkgZDNfdGltZXJfcXVldWVUYWlsLm4gPSB0aW1lcjsgZWxzZSBkM190aW1lcl9xdWV1ZUhlYWQgPSB0aW1lcjtcblx0ICAgIGQzX3RpbWVyX3F1ZXVlVGFpbCA9IHRpbWVyO1xuXHQgICAgaWYgKCFkM190aW1lcl9pbnRlcnZhbCkge1xuXHQgICAgICBkM190aW1lcl90aW1lb3V0ID0gY2xlYXJUaW1lb3V0KGQzX3RpbWVyX3RpbWVvdXQpO1xuXHQgICAgICBkM190aW1lcl9pbnRlcnZhbCA9IDE7XG5cdCAgICAgIGQzX3RpbWVyX2ZyYW1lKGQzX3RpbWVyX3N0ZXApO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRpbWVyO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lcl9zdGVwKCkge1xuXHQgICAgdmFyIG5vdyA9IGQzX3RpbWVyX21hcmsoKSwgZGVsYXkgPSBkM190aW1lcl9zd2VlcCgpIC0gbm93O1xuXHQgICAgaWYgKGRlbGF5ID4gMjQpIHtcblx0ICAgICAgaWYgKGlzRmluaXRlKGRlbGF5KSkge1xuXHQgICAgICAgIGNsZWFyVGltZW91dChkM190aW1lcl90aW1lb3V0KTtcblx0ICAgICAgICBkM190aW1lcl90aW1lb3V0ID0gc2V0VGltZW91dChkM190aW1lcl9zdGVwLCBkZWxheSk7XG5cdCAgICAgIH1cblx0ICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAwO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuXHQgICAgICBkM190aW1lcl9mcmFtZShkM190aW1lcl9zdGVwKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZDMudGltZXIuZmx1c2ggPSBmdW5jdGlvbigpIHtcblx0ICAgIGQzX3RpbWVyX21hcmsoKTtcblx0ICAgIGQzX3RpbWVyX3N3ZWVwKCk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM190aW1lcl9tYXJrKCkge1xuXHQgICAgdmFyIG5vdyA9IERhdGUubm93KCksIHRpbWVyID0gZDNfdGltZXJfcXVldWVIZWFkO1xuXHQgICAgd2hpbGUgKHRpbWVyKSB7XG5cdCAgICAgIGlmIChub3cgPj0gdGltZXIudCAmJiB0aW1lci5jKG5vdyAtIHRpbWVyLnQpKSB0aW1lci5jID0gbnVsbDtcblx0ICAgICAgdGltZXIgPSB0aW1lci5uO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5vdztcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZXJfc3dlZXAoKSB7XG5cdCAgICB2YXIgdDAsIHQxID0gZDNfdGltZXJfcXVldWVIZWFkLCB0aW1lID0gSW5maW5pdHk7XG5cdCAgICB3aGlsZSAodDEpIHtcblx0ICAgICAgaWYgKHQxLmMpIHtcblx0ICAgICAgICBpZiAodDEudCA8IHRpbWUpIHRpbWUgPSB0MS50O1xuXHQgICAgICAgIHQxID0gKHQwID0gdDEpLm47XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdDEgPSB0MCA/IHQwLm4gPSB0MS5uIDogZDNfdGltZXJfcXVldWVIZWFkID0gdDEubjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZDNfdGltZXJfcXVldWVUYWlsID0gdDA7XG5cdCAgICByZXR1cm4gdGltZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZm9ybWF0X3ByZWNpc2lvbih4LCBwKSB7XG5cdCAgICByZXR1cm4gcCAtICh4ID8gTWF0aC5jZWlsKE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwKSA6IDEpO1xuXHQgIH1cblx0ICBkMy5yb3VuZCA9IGZ1bmN0aW9uKHgsIG4pIHtcblx0ICAgIHJldHVybiBuID8gTWF0aC5yb3VuZCh4ICogKG4gPSBNYXRoLnBvdygxMCwgbikpKSAvIG4gOiBNYXRoLnJvdW5kKHgpO1xuXHQgIH07XG5cdCAgdmFyIGQzX2Zvcm1hdFByZWZpeGVzID0gWyBcInlcIiwgXCJ6XCIsIFwiYVwiLCBcImZcIiwgXCJwXCIsIFwiblwiLCBcIsK1XCIsIFwibVwiLCBcIlwiLCBcImtcIiwgXCJNXCIsIFwiR1wiLCBcIlRcIiwgXCJQXCIsIFwiRVwiLCBcIlpcIiwgXCJZXCIgXS5tYXAoZDNfZm9ybWF0UHJlZml4KTtcblx0ICBkMy5mb3JtYXRQcmVmaXggPSBmdW5jdGlvbih2YWx1ZSwgcHJlY2lzaW9uKSB7XG5cdCAgICB2YXIgaSA9IDA7XG5cdCAgICBpZiAodmFsdWUgPSArdmFsdWUpIHtcblx0ICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgKj0gLTE7XG5cdCAgICAgIGlmIChwcmVjaXNpb24pIHZhbHVlID0gZDMucm91bmQodmFsdWUsIGQzX2Zvcm1hdF9wcmVjaXNpb24odmFsdWUsIHByZWNpc2lvbikpO1xuXHQgICAgICBpID0gMSArIE1hdGguZmxvb3IoMWUtMTIgKyBNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMTApO1xuXHQgICAgICBpID0gTWF0aC5tYXgoLTI0LCBNYXRoLm1pbigyNCwgTWF0aC5mbG9vcigoaSAtIDEpIC8gMykgKiAzKSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfZm9ybWF0UHJlZml4ZXNbOCArIGkgLyAzXTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2Zvcm1hdFByZWZpeChkLCBpKSB7XG5cdCAgICB2YXIgayA9IE1hdGgucG93KDEwLCBhYnMoOCAtIGkpICogMyk7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBzY2FsZTogaSA+IDggPyBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgcmV0dXJuIGQgLyBrO1xuXHQgICAgICB9IDogZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIHJldHVybiBkICogaztcblx0ICAgICAgfSxcblx0ICAgICAgc3ltYm9sOiBkXG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSkge1xuXHQgICAgdmFyIGxvY2FsZV9kZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwsIGxvY2FsZV90aG91c2FuZHMgPSBsb2NhbGUudGhvdXNhbmRzLCBsb2NhbGVfZ3JvdXBpbmcgPSBsb2NhbGUuZ3JvdXBpbmcsIGxvY2FsZV9jdXJyZW5jeSA9IGxvY2FsZS5jdXJyZW5jeSwgZm9ybWF0R3JvdXAgPSBsb2NhbGVfZ3JvdXBpbmcgJiYgbG9jYWxlX3Rob3VzYW5kcyA/IGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuXHQgICAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCwgdCA9IFtdLCBqID0gMCwgZyA9IGxvY2FsZV9ncm91cGluZ1swXSwgbGVuZ3RoID0gMDtcblx0ICAgICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG5cdCAgICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG5cdCAgICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG5cdCAgICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuXHQgICAgICAgIGcgPSBsb2NhbGVfZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBsb2NhbGVfZ3JvdXBpbmcubGVuZ3RoXTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbihsb2NhbGVfdGhvdXNhbmRzKTtcblx0ICAgIH0gOiBkM19pZGVudGl0eTtcblx0ICAgIHJldHVybiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcblx0ICAgICAgdmFyIG1hdGNoID0gZDNfZm9ybWF0X3JlLmV4ZWMoc3BlY2lmaWVyKSwgZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiLCBhbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiLCBzaWduID0gbWF0Y2hbM10gfHwgXCItXCIsIHN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCIsIHpmaWxsID0gbWF0Y2hbNV0sIHdpZHRoID0gK21hdGNoWzZdLCBjb21tYSA9IG1hdGNoWzddLCBwcmVjaXNpb24gPSBtYXRjaFs4XSwgdHlwZSA9IG1hdGNoWzldLCBzY2FsZSA9IDEsIHByZWZpeCA9IFwiXCIsIHN1ZmZpeCA9IFwiXCIsIGludGVnZXIgPSBmYWxzZSwgZXhwb25lbnQgPSB0cnVlO1xuXHQgICAgICBpZiAocHJlY2lzaW9uKSBwcmVjaXNpb24gPSArcHJlY2lzaW9uLnN1YnN0cmluZygxKTtcblx0ICAgICAgaWYgKHpmaWxsIHx8IGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikge1xuXHQgICAgICAgIHpmaWxsID0gZmlsbCA9IFwiMFwiO1xuXHQgICAgICAgIGFsaWduID0gXCI9XCI7XG5cdCAgICAgIH1cblx0ICAgICAgc3dpdGNoICh0eXBlKSB7XG5cdCAgICAgICBjYXNlIFwiblwiOlxuXHQgICAgICAgIGNvbW1hID0gdHJ1ZTtcblx0ICAgICAgICB0eXBlID0gXCJnXCI7XG5cdCAgICAgICAgYnJlYWs7XG5cdFxuXHQgICAgICAgY2FzZSBcIiVcIjpcblx0ICAgICAgICBzY2FsZSA9IDEwMDtcblx0ICAgICAgICBzdWZmaXggPSBcIiVcIjtcblx0ICAgICAgICB0eXBlID0gXCJmXCI7XG5cdCAgICAgICAgYnJlYWs7XG5cdFxuXHQgICAgICAgY2FzZSBcInBcIjpcblx0ICAgICAgICBzY2FsZSA9IDEwMDtcblx0ICAgICAgICBzdWZmaXggPSBcIiVcIjtcblx0ICAgICAgICB0eXBlID0gXCJyXCI7XG5cdCAgICAgICAgYnJlYWs7XG5cdFxuXHQgICAgICAgY2FzZSBcImJcIjpcblx0ICAgICAgIGNhc2UgXCJvXCI6XG5cdCAgICAgICBjYXNlIFwieFwiOlxuXHQgICAgICAgY2FzZSBcIlhcIjpcblx0ICAgICAgICBpZiAoc3ltYm9sID09PSBcIiNcIikgcHJlZml4ID0gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cdFxuXHQgICAgICAgY2FzZSBcImNcIjpcblx0ICAgICAgICBleHBvbmVudCA9IGZhbHNlO1xuXHRcblx0ICAgICAgIGNhc2UgXCJkXCI6XG5cdCAgICAgICAgaW50ZWdlciA9IHRydWU7XG5cdCAgICAgICAgcHJlY2lzaW9uID0gMDtcblx0ICAgICAgICBicmVhaztcblx0XG5cdCAgICAgICBjYXNlIFwic1wiOlxuXHQgICAgICAgIHNjYWxlID0gLTE7XG5cdCAgICAgICAgdHlwZSA9IFwiclwiO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzeW1ib2wgPT09IFwiJFwiKSBwcmVmaXggPSBsb2NhbGVfY3VycmVuY3lbMF0sIHN1ZmZpeCA9IGxvY2FsZV9jdXJyZW5jeVsxXTtcblx0ICAgICAgaWYgKHR5cGUgPT0gXCJyXCIgJiYgIXByZWNpc2lvbikgdHlwZSA9IFwiZ1wiO1xuXHQgICAgICBpZiAocHJlY2lzaW9uICE9IG51bGwpIHtcblx0ICAgICAgICBpZiAodHlwZSA9PSBcImdcIikgcHJlY2lzaW9uID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpOyBlbHNlIGlmICh0eXBlID09IFwiZVwiIHx8IHR5cGUgPT0gXCJmXCIpIHByZWNpc2lvbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblx0ICAgICAgfVxuXHQgICAgICB0eXBlID0gZDNfZm9ybWF0X3R5cGVzLmdldCh0eXBlKSB8fCBkM19mb3JtYXRfdHlwZURlZmF1bHQ7XG5cdCAgICAgIHZhciB6Y29tbWEgPSB6ZmlsbCAmJiBjb21tYTtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIGZ1bGxTdWZmaXggPSBzdWZmaXg7XG5cdCAgICAgICAgaWYgKGludGVnZXIgJiYgdmFsdWUgJSAxKSByZXR1cm4gXCJcIjtcblx0ICAgICAgICB2YXIgbmVnYXRpdmUgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/ICh2YWx1ZSA9IC12YWx1ZSwgXCItXCIpIDogc2lnbiA9PT0gXCItXCIgPyBcIlwiIDogc2lnbjtcblx0ICAgICAgICBpZiAoc2NhbGUgPCAwKSB7XG5cdCAgICAgICAgICB2YXIgdW5pdCA9IGQzLmZvcm1hdFByZWZpeCh2YWx1ZSwgcHJlY2lzaW9uKTtcblx0ICAgICAgICAgIHZhbHVlID0gdW5pdC5zY2FsZSh2YWx1ZSk7XG5cdCAgICAgICAgICBmdWxsU3VmZml4ID0gdW5pdC5zeW1ib2wgKyBzdWZmaXg7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhbHVlICo9IHNjYWxlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YWx1ZSA9IHR5cGUodmFsdWUsIHByZWNpc2lvbik7XG5cdCAgICAgICAgdmFyIGkgPSB2YWx1ZS5sYXN0SW5kZXhPZihcIi5cIiksIGJlZm9yZSwgYWZ0ZXI7XG5cdCAgICAgICAgaWYgKGkgPCAwKSB7XG5cdCAgICAgICAgICB2YXIgaiA9IGV4cG9uZW50ID8gdmFsdWUubGFzdEluZGV4T2YoXCJlXCIpIDogLTE7XG5cdCAgICAgICAgICBpZiAoaiA8IDApIGJlZm9yZSA9IHZhbHVlLCBhZnRlciA9IFwiXCI7IGVsc2UgYmVmb3JlID0gdmFsdWUuc3Vic3RyaW5nKDAsIGopLCBhZnRlciA9IHZhbHVlLnN1YnN0cmluZyhqKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgYmVmb3JlID0gdmFsdWUuc3Vic3RyaW5nKDAsIGkpO1xuXHQgICAgICAgICAgYWZ0ZXIgPSBsb2NhbGVfZGVjaW1hbCArIHZhbHVlLnN1YnN0cmluZyhpICsgMSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghemZpbGwgJiYgY29tbWEpIGJlZm9yZSA9IGZvcm1hdEdyb3VwKGJlZm9yZSwgSW5maW5pdHkpO1xuXHQgICAgICAgIHZhciBsZW5ndGggPSBwcmVmaXgubGVuZ3RoICsgYmVmb3JlLmxlbmd0aCArIGFmdGVyLmxlbmd0aCArICh6Y29tbWEgPyAwIDogbmVnYXRpdmUubGVuZ3RoKSwgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KGxlbmd0aCA9IHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cdCAgICAgICAgaWYgKHpjb21tYSkgYmVmb3JlID0gZm9ybWF0R3JvdXAocGFkZGluZyArIGJlZm9yZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIGFmdGVyLmxlbmd0aCA6IEluZmluaXR5KTtcblx0ICAgICAgICBuZWdhdGl2ZSArPSBwcmVmaXg7XG5cdCAgICAgICAgdmFsdWUgPSBiZWZvcmUgKyBhZnRlcjtcblx0ICAgICAgICByZXR1cm4gKGFsaWduID09PSBcIjxcIiA/IG5lZ2F0aXZlICsgdmFsdWUgKyBwYWRkaW5nIDogYWxpZ24gPT09IFwiPlwiID8gcGFkZGluZyArIG5lZ2F0aXZlICsgdmFsdWUgOiBhbGlnbiA9PT0gXCJeXCIgPyBwYWRkaW5nLnN1YnN0cmluZygwLCBsZW5ndGggPj49IDEpICsgbmVnYXRpdmUgKyB2YWx1ZSArIHBhZGRpbmcuc3Vic3RyaW5nKGxlbmd0aCkgOiBuZWdhdGl2ZSArICh6Y29tbWEgPyB2YWx1ZSA6IHBhZGRpbmcgKyB2YWx1ZSkpICsgZnVsbFN1ZmZpeDtcblx0ICAgICAgfTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIHZhciBkM19mb3JtYXRfcmUgPSAvKD86KFtee10pPyhbPD49Xl0pKT8oWytcXC0gXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC4tP1xcZCspPyhbYS16JV0pPy9pO1xuXHQgIHZhciBkM19mb3JtYXRfdHlwZXMgPSBkMy5tYXAoe1xuXHQgICAgYjogZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4geC50b1N0cmluZygyKTtcblx0ICAgIH0sXG5cdCAgICBjOiBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpO1xuXHQgICAgfSxcblx0ICAgIG86IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIHgudG9TdHJpbmcoOCk7XG5cdCAgICB9LFxuXHQgICAgeDogZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4geC50b1N0cmluZygxNik7XG5cdCAgICB9LFxuXHQgICAgWDogZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4geC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0ICAgIH0sXG5cdCAgICBnOiBmdW5jdGlvbih4LCBwKSB7XG5cdCAgICAgIHJldHVybiB4LnRvUHJlY2lzaW9uKHApO1xuXHQgICAgfSxcblx0ICAgIGU6IGZ1bmN0aW9uKHgsIHApIHtcblx0ICAgICAgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTtcblx0ICAgIH0sXG5cdCAgICBmOiBmdW5jdGlvbih4LCBwKSB7XG5cdCAgICAgIHJldHVybiB4LnRvRml4ZWQocCk7XG5cdCAgICB9LFxuXHQgICAgcjogZnVuY3Rpb24oeCwgcCkge1xuXHQgICAgICByZXR1cm4gKHggPSBkMy5yb3VuZCh4LCBkM19mb3JtYXRfcHJlY2lzaW9uKHgsIHApKSkudG9GaXhlZChNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgZDNfZm9ybWF0X3ByZWNpc2lvbih4ICogKDEgKyAxZS0xNSksIHApKSkpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIGZ1bmN0aW9uIGQzX2Zvcm1hdF90eXBlRGVmYXVsdCh4KSB7XG5cdCAgICByZXR1cm4geCArIFwiXCI7XG5cdCAgfVxuXHQgIHZhciBkM190aW1lID0gZDMudGltZSA9IHt9LCBkM19kYXRlID0gRGF0ZTtcblx0ICBmdW5jdGlvbiBkM19kYXRlX3V0YygpIHtcblx0ICAgIHRoaXMuXyA9IG5ldyBEYXRlKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gRGF0ZS5VVEMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGFyZ3VtZW50c1swXSk7XG5cdCAgfVxuXHQgIGQzX2RhdGVfdXRjLnByb3RvdHlwZSA9IHtcblx0ICAgIGdldERhdGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ0RhdGUoKTtcblx0ICAgIH0sXG5cdCAgICBnZXREYXk6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ0RheSgpO1xuXHQgICAgfSxcblx0ICAgIGdldEZ1bGxZZWFyOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENGdWxsWWVhcigpO1xuXHQgICAgfSxcblx0ICAgIGdldEhvdXJzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENIb3VycygpO1xuXHQgICAgfSxcblx0ICAgIGdldE1pbGxpc2Vjb25kczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG5cdCAgICB9LFxuXHQgICAgZ2V0TWludXRlczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDTWludXRlcygpO1xuXHQgICAgfSxcblx0ICAgIGdldE1vbnRoOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENNb250aCgpO1xuXHQgICAgfSxcblx0ICAgIGdldFNlY29uZHM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ1NlY29uZHMoKTtcblx0ICAgIH0sXG5cdCAgICBnZXRUaW1lOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuXy5nZXRUaW1lKCk7XG5cdCAgICB9LFxuXHQgICAgZ2V0VGltZXpvbmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gMDtcblx0ICAgIH0sXG5cdCAgICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuXy52YWx1ZU9mKCk7XG5cdCAgICB9LFxuXHQgICAgc2V0RGF0ZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ0RhdGUuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuXHQgICAgfSxcblx0ICAgIHNldERheTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ0RheS5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG5cdCAgICB9LFxuXHQgICAgc2V0RnVsbFllYXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENGdWxsWWVhci5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG5cdCAgICB9LFxuXHQgICAgc2V0SG91cnM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENIb3Vycy5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG5cdCAgICB9LFxuXHQgICAgc2V0TWlsbGlzZWNvbmRzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDTWlsbGlzZWNvbmRzLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcblx0ICAgIH0sXG5cdCAgICBzZXRNaW51dGVzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDTWludXRlcy5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG5cdCAgICB9LFxuXHQgICAgc2V0TW9udGg6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENNb250aC5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG5cdCAgICB9LFxuXHQgICAgc2V0U2Vjb25kczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ1NlY29uZHMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuXHQgICAgfSxcblx0ICAgIHNldFRpbWU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRUaW1lLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIHZhciBkM190aW1lX3Byb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfaW50ZXJ2YWwobG9jYWwsIHN0ZXAsIG51bWJlcikge1xuXHQgICAgZnVuY3Rpb24gcm91bmQoZGF0ZSkge1xuXHQgICAgICB2YXIgZDAgPSBsb2NhbChkYXRlKSwgZDEgPSBvZmZzZXQoZDAsIDEpO1xuXHQgICAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNlaWwoZGF0ZSkge1xuXHQgICAgICBzdGVwKGRhdGUgPSBsb2NhbChuZXcgZDNfZGF0ZShkYXRlIC0gMSkpLCAxKTtcblx0ICAgICAgcmV0dXJuIGRhdGU7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBvZmZzZXQoZGF0ZSwgaykge1xuXHQgICAgICBzdGVwKGRhdGUgPSBuZXcgZDNfZGF0ZSgrZGF0ZSksIGspO1xuXHQgICAgICByZXR1cm4gZGF0ZTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJhbmdlKHQwLCB0MSwgZHQpIHtcblx0ICAgICAgdmFyIHRpbWUgPSBjZWlsKHQwKSwgdGltZXMgPSBbXTtcblx0ICAgICAgaWYgKGR0ID4gMSkge1xuXHQgICAgICAgIHdoaWxlICh0aW1lIDwgdDEpIHtcblx0ICAgICAgICAgIGlmICghKG51bWJlcih0aW1lKSAlIGR0KSkgdGltZXMucHVzaChuZXcgRGF0ZSgrdGltZSkpO1xuXHQgICAgICAgICAgc3RlcCh0aW1lLCAxKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgd2hpbGUgKHRpbWUgPCB0MSkgdGltZXMucHVzaChuZXcgRGF0ZSgrdGltZSkpLCBzdGVwKHRpbWUsIDEpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0aW1lcztcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJhbmdlX3V0Yyh0MCwgdDEsIGR0KSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuXHQgICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZV91dGMoKTtcblx0ICAgICAgICB1dGMuXyA9IHQwO1xuXHQgICAgICAgIHJldHVybiByYW5nZSh1dGMsIHQxLCBkdCk7XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgZDNfZGF0ZSA9IERhdGU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGxvY2FsLmZsb29yID0gbG9jYWw7XG5cdCAgICBsb2NhbC5yb3VuZCA9IHJvdW5kO1xuXHQgICAgbG9jYWwuY2VpbCA9IGNlaWw7XG5cdCAgICBsb2NhbC5vZmZzZXQgPSBvZmZzZXQ7XG5cdCAgICBsb2NhbC5yYW5nZSA9IHJhbmdlO1xuXHQgICAgdmFyIHV0YyA9IGxvY2FsLnV0YyA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKGxvY2FsKTtcblx0ICAgIHV0Yy5mbG9vciA9IHV0Yztcblx0ICAgIHV0Yy5yb3VuZCA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKHJvdW5kKTtcblx0ICAgIHV0Yy5jZWlsID0gZDNfdGltZV9pbnRlcnZhbF91dGMoY2VpbCk7XG5cdCAgICB1dGMub2Zmc2V0ID0gZDNfdGltZV9pbnRlcnZhbF91dGMob2Zmc2V0KTtcblx0ICAgIHV0Yy5yYW5nZSA9IHJhbmdlX3V0Yztcblx0ICAgIHJldHVybiBsb2NhbDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9pbnRlcnZhbF91dGMobWV0aG9kKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgaykge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIGQzX2RhdGUgPSBkM19kYXRlX3V0Yztcblx0ICAgICAgICB2YXIgdXRjID0gbmV3IGQzX2RhdGVfdXRjKCk7XG5cdCAgICAgICAgdXRjLl8gPSBkYXRlO1xuXHQgICAgICAgIHJldHVybiBtZXRob2QodXRjLCBrKS5fO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkM190aW1lLnllYXIgPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIGRhdGUgPSBkM190aW1lLmRheShkYXRlKTtcblx0ICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG5cdCAgICByZXR1cm4gZGF0ZTtcblx0ICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcblx0ICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgb2Zmc2V0KTtcblx0ICB9LCBmdW5jdGlvbihkYXRlKSB7XG5cdCAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuXHQgIH0pO1xuXHQgIGQzX3RpbWUueWVhcnMgPSBkM190aW1lLnllYXIucmFuZ2U7XG5cdCAgZDNfdGltZS55ZWFycy51dGMgPSBkM190aW1lLnllYXIudXRjLnJhbmdlO1xuXHQgIGQzX3RpbWUuZGF5ID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG5cdCAgICB2YXIgZGF5ID0gbmV3IGQzX2RhdGUoMmUzLCAwKTtcblx0ICAgIGRheS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuXHQgICAgcmV0dXJuIGRheTtcblx0ICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcblx0ICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIG9mZnNldCk7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcblx0ICB9KTtcblx0ICBkM190aW1lLmRheXMgPSBkM190aW1lLmRheS5yYW5nZTtcblx0ICBkM190aW1lLmRheXMudXRjID0gZDNfdGltZS5kYXkudXRjLnJhbmdlO1xuXHQgIGQzX3RpbWUuZGF5T2ZZZWFyID0gZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgdmFyIHllYXIgPSBkM190aW1lLnllYXIoZGF0ZSk7XG5cdCAgICByZXR1cm4gTWF0aC5mbG9vcigoZGF0ZSAtIHllYXIgLSAoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpIC0geWVhci5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDZlNCkgLyA4NjRlNSk7XG5cdCAgfTtcblx0ICBbIFwic3VuZGF5XCIsIFwibW9uZGF5XCIsIFwidHVlc2RheVwiLCBcIndlZG5lc2RheVwiLCBcInRodXJzZGF5XCIsIFwiZnJpZGF5XCIsIFwic2F0dXJkYXlcIiBdLmZvckVhY2goZnVuY3Rpb24oZGF5LCBpKSB7XG5cdCAgICBpID0gNyAtIGk7XG5cdCAgICB2YXIgaW50ZXJ2YWwgPSBkM190aW1lW2RheV0gPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgICAgKGRhdGUgPSBkM190aW1lLmRheShkYXRlKSkuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgaSkgJSA3KTtcblx0ICAgICAgcmV0dXJuIGRhdGU7XG5cdCAgICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcblx0ICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgTWF0aC5mbG9vcihvZmZzZXQpICogNyk7XG5cdCAgICB9LCBmdW5jdGlvbihkYXRlKSB7XG5cdCAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG5cdCAgICAgIHJldHVybiBNYXRoLmZsb29yKChkM190aW1lLmRheU9mWWVhcihkYXRlKSArIChkYXkgKyBpKSAlIDcpIC8gNykgLSAoZGF5ICE9PSBpKTtcblx0ICAgIH0pO1xuXHQgICAgZDNfdGltZVtkYXkgKyBcInNcIl0gPSBpbnRlcnZhbC5yYW5nZTtcblx0ICAgIGQzX3RpbWVbZGF5ICsgXCJzXCJdLnV0YyA9IGludGVydmFsLnV0Yy5yYW5nZTtcblx0ICAgIGQzX3RpbWVbZGF5ICsgXCJPZlllYXJcIl0gPSBmdW5jdGlvbihkYXRlKSB7XG5cdCAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG5cdCAgICAgIHJldHVybiBNYXRoLmZsb29yKChkM190aW1lLmRheU9mWWVhcihkYXRlKSArIChkYXkgKyBpKSAlIDcpIC8gNyk7XG5cdCAgICB9O1xuXHQgIH0pO1xuXHQgIGQzX3RpbWUud2VlayA9IGQzX3RpbWUuc3VuZGF5O1xuXHQgIGQzX3RpbWUud2Vla3MgPSBkM190aW1lLnN1bmRheS5yYW5nZTtcblx0ICBkM190aW1lLndlZWtzLnV0YyA9IGQzX3RpbWUuc3VuZGF5LnV0Yy5yYW5nZTtcblx0ICBkM190aW1lLndlZWtPZlllYXIgPSBkM190aW1lLnN1bmRheU9mWWVhcjtcblx0ICBmdW5jdGlvbiBkM19sb2NhbGVfdGltZUZvcm1hdChsb2NhbGUpIHtcblx0ICAgIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsIGxvY2FsZV9kYXlzID0gbG9jYWxlLmRheXMsIGxvY2FsZV9zaG9ydERheXMgPSBsb2NhbGUuc2hvcnREYXlzLCBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocywgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXHQgICAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXQodGVtcGxhdGUpIHtcblx0ICAgICAgdmFyIG4gPSB0ZW1wbGF0ZS5sZW5ndGg7XG5cdCAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG5cdCAgICAgICAgdmFyIHN0cmluZyA9IFtdLCBpID0gLTEsIGogPSAwLCBjLCBwLCBmO1xuXHQgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgICBpZiAodGVtcGxhdGUuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcblx0ICAgICAgICAgICAgc3RyaW5nLnB1c2godGVtcGxhdGUuc2xpY2UoaiwgaSkpO1xuXHQgICAgICAgICAgICBpZiAoKHAgPSBkM190aW1lX2Zvcm1hdFBhZHNbYyA9IHRlbXBsYXRlLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHRlbXBsYXRlLmNoYXJBdCgrK2kpO1xuXHQgICAgICAgICAgICBpZiAoZiA9IGQzX3RpbWVfZm9ybWF0c1tjXSkgYyA9IGYoZGF0ZSwgcCA9PSBudWxsID8gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiIDogcCk7XG5cdCAgICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuXHQgICAgICAgICAgICBqID0gaSArIDE7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHN0cmluZy5wdXNoKHRlbXBsYXRlLnNsaWNlKGosIGkpKTtcblx0ICAgICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG5cdCAgICAgIH1cblx0ICAgICAgZm9ybWF0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG5cdCAgICAgICAgdmFyIGQgPSB7XG5cdCAgICAgICAgICB5OiAxOTAwLFxuXHQgICAgICAgICAgbTogMCxcblx0ICAgICAgICAgIGQ6IDEsXG5cdCAgICAgICAgICBIOiAwLFxuXHQgICAgICAgICAgTTogMCxcblx0ICAgICAgICAgIFM6IDAsXG5cdCAgICAgICAgICBMOiAwLFxuXHQgICAgICAgICAgWjogbnVsbFxuXHQgICAgICAgIH0sIGkgPSBkM190aW1lX3BhcnNlKGQsIHRlbXBsYXRlLCBzdHJpbmcsIDApO1xuXHQgICAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXHQgICAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXHQgICAgICAgIHZhciBsb2NhbFogPSBkLlogIT0gbnVsbCAmJiBkM19kYXRlICE9PSBkM19kYXRlX3V0YywgZGF0ZSA9IG5ldyAobG9jYWxaID8gZDNfZGF0ZV91dGMgOiBkM19kYXRlKSgpO1xuXHQgICAgICAgIGlmIChcImpcIiBpbiBkKSBkYXRlLnNldEZ1bGxZZWFyKGQueSwgMCwgZC5qKTsgZWxzZSBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG5cdCAgICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJXXCIgaW4gZCA/IDEgOiAwO1xuXHQgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIDEpO1xuXHQgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXRlLmdldERheSgpICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXRlLmdldERheSgpICsgNikgJSA3KTtcblx0ICAgICAgICB9IGVsc2UgZGF0ZS5zZXRGdWxsWWVhcihkLnksIGQubSwgZC5kKTtcblx0ICAgICAgICBkYXRlLnNldEhvdXJzKGQuSCArIChkLlogLyAxMDAgfCAwKSwgZC5NICsgZC5aICUgMTAwLCBkLlMsIGQuTCk7XG5cdCAgICAgICAgcmV0dXJuIGxvY2FsWiA/IGRhdGUuXyA6IGRhdGU7XG5cdCAgICAgIH07XG5cdCAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcblx0ICAgICAgfTtcblx0ICAgICAgcmV0dXJuIGZvcm1hdDtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2UoZGF0ZSwgdGVtcGxhdGUsIHN0cmluZywgaikge1xuXHQgICAgICB2YXIgYywgcCwgdCwgaSA9IDAsIG4gPSB0ZW1wbGF0ZS5sZW5ndGgsIG0gPSBzdHJpbmcubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAoaSA8IG4pIHtcblx0ICAgICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG5cdCAgICAgICAgYyA9IHRlbXBsYXRlLmNoYXJDb2RlQXQoaSsrKTtcblx0ICAgICAgICBpZiAoYyA9PT0gMzcpIHtcblx0ICAgICAgICAgIHQgPSB0ZW1wbGF0ZS5jaGFyQXQoaSsrKTtcblx0ICAgICAgICAgIHAgPSBkM190aW1lX3BhcnNlcnNbdCBpbiBkM190aW1lX2Zvcm1hdFBhZHMgPyB0ZW1wbGF0ZS5jaGFyQXQoaSsrKSA6IHRdO1xuXHQgICAgICAgICAgaWYgKCFwIHx8IChqID0gcChkYXRlLCBzdHJpbmcsIGopKSA8IDApIHJldHVybiAtMTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuXHQgICAgICAgICAgcmV0dXJuIC0xO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gajtcblx0ICAgIH1cblx0ICAgIGQzX3RpbWVfZm9ybWF0LnV0YyA9IGZ1bmN0aW9uKHRlbXBsYXRlKSB7XG5cdCAgICAgIHZhciBsb2NhbCA9IGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKTtcblx0ICAgICAgZnVuY3Rpb24gZm9ybWF0KGRhdGUpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuXHQgICAgICAgICAgdmFyIHV0YyA9IG5ldyBkM19kYXRlKCk7XG5cdCAgICAgICAgICB1dGMuXyA9IGRhdGU7XG5cdCAgICAgICAgICByZXR1cm4gbG9jYWwodXRjKTtcblx0ICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgZDNfZGF0ZSA9IERhdGU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGZvcm1hdC5wYXJzZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICBkM19kYXRlID0gZDNfZGF0ZV91dGM7XG5cdCAgICAgICAgICB2YXIgZGF0ZSA9IGxvY2FsLnBhcnNlKHN0cmluZyk7XG5cdCAgICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLl87XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgICAgZm9ybWF0LnRvU3RyaW5nID0gbG9jYWwudG9TdHJpbmc7XG5cdCAgICAgIHJldHVybiBmb3JtYXQ7XG5cdCAgICB9O1xuXHQgICAgZDNfdGltZV9mb3JtYXQubXVsdGkgPSBkM190aW1lX2Zvcm1hdC51dGMubXVsdGkgPSBkM190aW1lX2Zvcm1hdE11bHRpO1xuXHQgICAgdmFyIGQzX3RpbWVfcGVyaW9kTG9va3VwID0gZDMubWFwKCksIGQzX3RpbWVfZGF5UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9kYXlzKSwgZDNfdGltZV9kYXlMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfZGF5cyksIGQzX3RpbWVfZGF5QWJicmV2UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX2RheUFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX21vbnRoUmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9tb250aHMpLCBkM190aW1lX21vbnRoTG9va3VwID0gZDNfdGltZV9mb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksIGQzX3RpbWVfbW9udGhBYmJyZXZSZSA9IGQzX3RpbWVfZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSwgZDNfdGltZV9tb250aEFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cdCAgICBsb2NhbGVfcGVyaW9kcy5mb3JFYWNoKGZ1bmN0aW9uKHAsIGkpIHtcblx0ICAgICAgZDNfdGltZV9wZXJpb2RMb29rdXAuc2V0KHAudG9Mb3dlckNhc2UoKSwgaSk7XG5cdCAgICB9KTtcblx0ICAgIHZhciBkM190aW1lX2Zvcm1hdHMgPSB7XG5cdCAgICAgIGE6IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICByZXR1cm4gbG9jYWxlX3Nob3J0RGF5c1tkLmdldERheSgpXTtcblx0ICAgICAgfSxcblx0ICAgICAgQTogZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIHJldHVybiBsb2NhbGVfZGF5c1tkLmdldERheSgpXTtcblx0ICAgICAgfSxcblx0ICAgICAgYjogZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcblx0ICAgICAgfSxcblx0ICAgICAgQjogZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG5cdCAgICAgIH0sXG5cdCAgICAgIGM6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV9kYXRlVGltZSksXG5cdCAgICAgIGQ6IGZ1bmN0aW9uKGQsIHApIHtcblx0ICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXREYXRlKCksIHAsIDIpO1xuXHQgICAgICB9LFxuXHQgICAgICBlOiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcblx0ICAgICAgfSxcblx0ICAgICAgSDogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xuXHQgICAgICB9LFxuXHQgICAgICBJOiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcblx0ICAgICAgfSxcblx0ICAgICAgajogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZCgxICsgZDNfdGltZS5kYXlPZlllYXIoZCksIHAsIDMpO1xuXHQgICAgICB9LFxuXHQgICAgICBMOiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xuXHQgICAgICB9LFxuXHQgICAgICBtOiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xuXHQgICAgICB9LFxuXHQgICAgICBNOiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcblx0ICAgICAgfSxcblx0ICAgICAgcDogZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0SG91cnMoKSA+PSAxMildO1xuXHQgICAgICB9LFxuXHQgICAgICBTOiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0U2Vjb25kcygpLCBwLCAyKTtcblx0ICAgICAgfSxcblx0ICAgICAgVTogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkM190aW1lLnN1bmRheU9mWWVhcihkKSwgcCwgMik7XG5cdCAgICAgIH0sXG5cdCAgICAgIHc6IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICByZXR1cm4gZC5nZXREYXkoKTtcblx0ICAgICAgfSxcblx0ICAgICAgVzogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkM190aW1lLm1vbmRheU9mWWVhcihkKSwgcCwgMik7XG5cdCAgICAgIH0sXG5cdCAgICAgIHg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV9kYXRlKSxcblx0ICAgICAgWDogZDNfdGltZV9mb3JtYXQobG9jYWxlX3RpbWUpLFxuXHQgICAgICB5OiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG5cdCAgICAgIH0sXG5cdCAgICAgIFk6IGZ1bmN0aW9uKGQsIHApIHtcblx0ICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRGdWxsWWVhcigpICUgMWU0LCBwLCA0KTtcblx0ICAgICAgfSxcblx0ICAgICAgWjogZDNfdGltZV96b25lLFxuXHQgICAgICBcIiVcIjogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIFwiJVwiO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgICAgdmFyIGQzX3RpbWVfcGFyc2VycyA9IHtcblx0ICAgICAgYTogZDNfdGltZV9wYXJzZVdlZWtkYXlBYmJyZXYsXG5cdCAgICAgIEE6IGQzX3RpbWVfcGFyc2VXZWVrZGF5LFxuXHQgICAgICBiOiBkM190aW1lX3BhcnNlTW9udGhBYmJyZXYsXG5cdCAgICAgIEI6IGQzX3RpbWVfcGFyc2VNb250aCxcblx0ICAgICAgYzogZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwsXG5cdCAgICAgIGQ6IGQzX3RpbWVfcGFyc2VEYXksXG5cdCAgICAgIGU6IGQzX3RpbWVfcGFyc2VEYXksXG5cdCAgICAgIEg6IGQzX3RpbWVfcGFyc2VIb3VyMjQsXG5cdCAgICAgIEk6IGQzX3RpbWVfcGFyc2VIb3VyMjQsXG5cdCAgICAgIGo6IGQzX3RpbWVfcGFyc2VEYXlPZlllYXIsXG5cdCAgICAgIEw6IGQzX3RpbWVfcGFyc2VNaWxsaXNlY29uZHMsXG5cdCAgICAgIG06IGQzX3RpbWVfcGFyc2VNb250aE51bWJlcixcblx0ICAgICAgTTogZDNfdGltZV9wYXJzZU1pbnV0ZXMsXG5cdCAgICAgIHA6IGQzX3RpbWVfcGFyc2VBbVBtLFxuXHQgICAgICBTOiBkM190aW1lX3BhcnNlU2Vjb25kcyxcblx0ICAgICAgVTogZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJTdW5kYXksXG5cdCAgICAgIHc6IGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyLFxuXHQgICAgICBXOiBkM190aW1lX3BhcnNlV2Vla051bWJlck1vbmRheSxcblx0ICAgICAgeDogZDNfdGltZV9wYXJzZUxvY2FsZURhdGUsXG5cdCAgICAgIFg6IGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lLFxuXHQgICAgICB5OiBkM190aW1lX3BhcnNlWWVhcixcblx0ICAgICAgWTogZDNfdGltZV9wYXJzZUZ1bGxZZWFyLFxuXHQgICAgICBaOiBkM190aW1lX3BhcnNlWm9uZSxcblx0ICAgICAgXCIlXCI6IGQzX3RpbWVfcGFyc2VMaXRlcmFsUGVyY2VudFxuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2KGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgICBkM190aW1lX2RheUFiYnJldlJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICAgIHZhciBuID0gZDNfdGltZV9kYXlBYmJyZXZSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG5cdCAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5QWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlV2Vla2RheShkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgICAgZDNfdGltZV9kYXlSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgICB2YXIgbiA9IGQzX3RpbWVfZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuXHQgICAgICByZXR1cm4gbiA/IChkYXRlLncgPSBkM190aW1lX2RheUxvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZU1vbnRoQWJicmV2KGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgICBkM190aW1lX21vbnRoQWJicmV2UmUubGFzdEluZGV4ID0gMDtcblx0ICAgICAgdmFyIG4gPSBkM190aW1lX21vbnRoQWJicmV2UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuXHQgICAgICByZXR1cm4gbiA/IChkYXRlLm0gPSBkM190aW1lX21vbnRoQWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTW9udGgoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICAgIGQzX3RpbWVfbW9udGhSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgICB2YXIgbiA9IGQzX3RpbWVfbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG5cdCAgICAgIHJldHVybiBuID8gKGRhdGUubSA9IGQzX3RpbWVfbW9udGhMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMb2NhbGVGdWxsKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgICByZXR1cm4gZDNfdGltZV9wYXJzZShkYXRlLCBkM190aW1lX2Zvcm1hdHMuYy50b1N0cmluZygpLCBzdHJpbmcsIGkpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxvY2FsZURhdGUoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICAgIHJldHVybiBkM190aW1lX3BhcnNlKGRhdGUsIGQzX3RpbWVfZm9ybWF0cy54LnRvU3RyaW5nKCksIHN0cmluZywgaSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTG9jYWxlVGltZShkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgICAgcmV0dXJuIGQzX3RpbWVfcGFyc2UoZGF0ZSwgZDNfdGltZV9mb3JtYXRzLlgudG9TdHJpbmcoKSwgc3RyaW5nLCBpKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VBbVBtKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgICB2YXIgbiA9IGQzX3RpbWVfcGVyaW9kTG9va3VwLmdldChzdHJpbmcuc2xpY2UoaSwgaSArPSAyKS50b0xvd2VyQ2FzZSgpKTtcblx0ICAgICAgcmV0dXJuIG4gPT0gbnVsbCA/IC0xIDogKGRhdGUucCA9IG4sIGkpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0O1xuXHQgIH1cblx0ICB2YXIgZDNfdGltZV9mb3JtYXRQYWRzID0ge1xuXHQgICAgXCItXCI6IFwiXCIsXG5cdCAgICBfOiBcIiBcIixcblx0ICAgIFwiMFwiOiBcIjBcIlxuXHQgIH0sIGQzX3RpbWVfbnVtYmVyUmUgPSAvXlxccypcXGQrLywgZDNfdGltZV9wZXJjZW50UmUgPSAvXiUvO1xuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0UGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuXHQgICAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIiwgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0ICAgIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0UmUobmFtZXMpIHtcblx0ICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKGQzLnJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRMb29rdXAobmFtZXMpIHtcblx0ICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwKCksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KG5hbWVzW2ldLnRvTG93ZXJDYXNlKCksIGkpO1xuXHQgICAgcmV0dXJuIG1hcDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVdlZWtkYXlOdW1iZXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUuVyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VGdWxsWWVhcihkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuXHQgICAgcmV0dXJuIG4gPyAoZGF0ZS55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUueSA9IGQzX3RpbWVfZXhwYW5kWWVhcigrblswXSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVpvbmUoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICByZXR1cm4gL15bKy1dXFxkezR9JC8udGVzdChzdHJpbmcgPSBzdHJpbmcuc2xpY2UoaSwgaSArIDUpKSA/IChkYXRlLlogPSAtc3RyaW5nLCBcblx0ICAgIGkgKyA1KSA6IC0xO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX2V4cGFuZFllYXIoZCkge1xuXHQgICAgcmV0dXJuIGQgKyAoZCA+IDY4ID8gMTkwMCA6IDJlMyk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aE51bWJlcihkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuXHQgICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZURheShkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuXHQgICAgcmV0dXJuIG4gPyAoZGF0ZS5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZURheU9mWWVhcihkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuXHQgICAgcmV0dXJuIG4gPyAoZGF0ZS5qID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUhvdXIyNChkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuXHQgICAgcmV0dXJuIG4gPyAoZGF0ZS5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZU1pbnV0ZXMoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VTZWNvbmRzKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG5cdCAgICByZXR1cm4gbiA/IChkYXRlLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG5cdCAgICByZXR1cm4gbiA/IChkYXRlLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3pvbmUoZCkge1xuXHQgICAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCksIHpzID0geiA+IDAgPyBcIi1cIiA6IFwiK1wiLCB6aCA9IGFicyh6KSAvIDYwIHwgMCwgem0gPSBhYnMoeikgJSA2MDtcblx0ICAgIHJldHVybiB6cyArIGQzX3RpbWVfZm9ybWF0UGFkKHpoLCBcIjBcIiwgMikgKyBkM190aW1lX2Zvcm1hdFBhZCh6bSwgXCIwXCIsIDIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnQoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX3BlcmNlbnRSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgdmFyIG4gPSBkM190aW1lX3BlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuXHQgICAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRNdWx0aShmb3JtYXRzKSB7XG5cdCAgICB2YXIgbiA9IGZvcm1hdHMubGVuZ3RoLCBpID0gLTE7XG5cdCAgICB3aGlsZSAoKytpIDwgbikgZm9ybWF0c1tpXVswXSA9IHRoaXMoZm9ybWF0c1tpXVswXSk7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgICB2YXIgaSA9IDAsIGYgPSBmb3JtYXRzW2ldO1xuXHQgICAgICB3aGlsZSAoIWZbMV0oZGF0ZSkpIGYgPSBmb3JtYXRzWysraV07XG5cdCAgICAgIHJldHVybiBmWzBdKGRhdGUpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMubG9jYWxlID0gZnVuY3Rpb24obG9jYWxlKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBudW1iZXJGb3JtYXQ6IGQzX2xvY2FsZV9udW1iZXJGb3JtYXQobG9jYWxlKSxcblx0ICAgICAgdGltZUZvcm1hdDogZDNfbG9jYWxlX3RpbWVGb3JtYXQobG9jYWxlKVxuXHQgICAgfTtcblx0ICB9O1xuXHQgIHZhciBkM19sb2NhbGVfZW5VUyA9IGQzLmxvY2FsZSh7XG5cdCAgICBkZWNpbWFsOiBcIi5cIixcblx0ICAgIHRob3VzYW5kczogXCIsXCIsXG5cdCAgICBncm91cGluZzogWyAzIF0sXG5cdCAgICBjdXJyZW5jeTogWyBcIiRcIiwgXCJcIiBdLFxuXHQgICAgZGF0ZVRpbWU6IFwiJWEgJWIgJWUgJVggJVlcIixcblx0ICAgIGRhdGU6IFwiJW0vJWQvJVlcIixcblx0ICAgIHRpbWU6IFwiJUg6JU06JVNcIixcblx0ICAgIHBlcmlvZHM6IFsgXCJBTVwiLCBcIlBNXCIgXSxcblx0ICAgIGRheXM6IFsgXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiIF0sXG5cdCAgICBzaG9ydERheXM6IFsgXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiBdLFxuXHQgICAgbW9udGhzOiBbIFwiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIiBdLFxuXHQgICAgc2hvcnRNb250aHM6IFsgXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIiBdXG5cdCAgfSk7XG5cdCAgZDMuZm9ybWF0ID0gZDNfbG9jYWxlX2VuVVMubnVtYmVyRm9ybWF0O1xuXHQgIGQzLmdlbyA9IHt9O1xuXHQgIGZ1bmN0aW9uIGQzX2FkZGVyKCkge31cblx0ICBkM19hZGRlci5wcm90b3R5cGUgPSB7XG5cdCAgICBzOiAwLFxuXHQgICAgdDogMCxcblx0ICAgIGFkZDogZnVuY3Rpb24oeSkge1xuXHQgICAgICBkM19hZGRlclN1bSh5LCB0aGlzLnQsIGQzX2FkZGVyVGVtcCk7XG5cdCAgICAgIGQzX2FkZGVyU3VtKGQzX2FkZGVyVGVtcC5zLCB0aGlzLnMsIHRoaXMpO1xuXHQgICAgICBpZiAodGhpcy5zKSB0aGlzLnQgKz0gZDNfYWRkZXJUZW1wLnQ7IGVsc2UgdGhpcy5zID0gZDNfYWRkZXJUZW1wLnQ7XG5cdCAgICB9LFxuXHQgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLnMgPSB0aGlzLnQgPSAwO1xuXHQgICAgfSxcblx0ICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5zO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgdmFyIGQzX2FkZGVyVGVtcCA9IG5ldyBkM19hZGRlcigpO1xuXHQgIGZ1bmN0aW9uIGQzX2FkZGVyU3VtKGEsIGIsIG8pIHtcblx0ICAgIHZhciB4ID0gby5zID0gYSArIGIsIGJ2ID0geCAtIGEsIGF2ID0geCAtIGJ2O1xuXHQgICAgby50ID0gYSAtIGF2ICsgKGIgLSBidik7XG5cdCAgfVxuXHQgIGQzLmdlby5zdHJlYW0gPSBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG5cdCAgICBpZiAob2JqZWN0ICYmIGQzX2dlb19zdHJlYW1PYmplY3RUeXBlLmhhc093blByb3BlcnR5KG9iamVjdC50eXBlKSkge1xuXHQgICAgICBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZVtvYmplY3QudHlwZV0ob2JqZWN0LCBsaXN0ZW5lcik7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBkM19nZW9fc3RyZWFtR2VvbWV0cnkob2JqZWN0LCBsaXN0ZW5lcik7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cnksIGxpc3RlbmVyKSB7XG5cdCAgICBpZiAoZ2VvbWV0cnkgJiYgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKSkge1xuXHQgICAgICBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBsaXN0ZW5lcik7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHZhciBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZSA9IHtcblx0ICAgIEZlYXR1cmU6IGZ1bmN0aW9uKGZlYXR1cmUsIGxpc3RlbmVyKSB7XG5cdCAgICAgIGQzX2dlb19zdHJlYW1HZW9tZXRyeShmZWF0dXJlLmdlb21ldHJ5LCBsaXN0ZW5lcik7XG5cdCAgICB9LFxuXHQgICAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcblx0ICAgICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLCBpID0gLTEsIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIGxpc3RlbmVyKTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIHZhciBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xuXHQgICAgU3BoZXJlOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG5cdCAgICAgIGxpc3RlbmVyLnNwaGVyZSgpO1xuXHQgICAgfSxcblx0ICAgIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG5cdCAgICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcblx0ICAgICAgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG5cdCAgICB9LFxuXHQgICAgTXVsdGlQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuXHQgICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIG9iamVjdCA9IGNvb3JkaW5hdGVzW2ldLCBsaXN0ZW5lci5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcblx0ICAgIH0sXG5cdCAgICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG5cdCAgICAgIGQzX2dlb19zdHJlYW1MaW5lKG9iamVjdC5jb29yZGluYXRlcywgbGlzdGVuZXIsIDApO1xuXHQgICAgfSxcblx0ICAgIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuXHQgICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGQzX2dlb19zdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBsaXN0ZW5lciwgMCk7XG5cdCAgICB9LFxuXHQgICAgUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuXHQgICAgICBkM19nZW9fc3RyZWFtUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIGxpc3RlbmVyKTtcblx0ICAgIH0sXG5cdCAgICBNdWx0aVBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcblx0ICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIpO1xuXHQgICAgfSxcblx0ICAgIEdlb21ldHJ5Q29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuXHQgICAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGQzX2dlb19zdHJlYW1HZW9tZXRyeShnZW9tZXRyaWVzW2ldLCBsaXN0ZW5lcik7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fc3RyZWFtTGluZShjb29yZGluYXRlcywgbGlzdGVuZXIsIGNsb3NlZCkge1xuXHQgICAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aCAtIGNsb3NlZCwgY29vcmRpbmF0ZTtcblx0ICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIGNvb3JkaW5hdGUgPSBjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIucG9pbnQoY29vcmRpbmF0ZVswXSwgY29vcmRpbmF0ZVsxXSwgY29vcmRpbmF0ZVsyXSk7XG5cdCAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19zdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzLCBsaXN0ZW5lcikge1xuXHQgICAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcblx0ICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIGQzX2dlb19zdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBsaXN0ZW5lciwgMSk7XG5cdCAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG5cdCAgfVxuXHQgIGQzLmdlby5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdCAgICBkM19nZW9fYXJlYVN1bSA9IDA7XG5cdCAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2FyZWEpO1xuXHQgICAgcmV0dXJuIGQzX2dlb19hcmVhU3VtO1xuXHQgIH07XG5cdCAgdmFyIGQzX2dlb19hcmVhU3VtLCBkM19nZW9fYXJlYVJpbmdTdW0gPSBuZXcgZDNfYWRkZXIoKTtcblx0ICB2YXIgZDNfZ2VvX2FyZWEgPSB7XG5cdCAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM19nZW9fYXJlYVN1bSArPSA0ICogz4A7XG5cdCAgICB9LFxuXHQgICAgcG9pbnQ6IGQzX25vb3AsXG5cdCAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG5cdCAgICBsaW5lRW5kOiBkM19ub29wLFxuXHQgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG5cdCAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCA9IGQzX2dlb19hcmVhUmluZ1N0YXJ0O1xuXHQgICAgfSxcblx0ICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgYXJlYSA9IDIgKiBkM19nZW9fYXJlYVJpbmdTdW07XG5cdCAgICAgIGQzX2dlb19hcmVhU3VtICs9IGFyZWEgPCAwID8gNCAqIM+AICsgYXJlYSA6IGFyZWE7XG5cdCAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCA9IGQzX2dlb19hcmVhLmxpbmVFbmQgPSBkM19nZW9fYXJlYS5wb2ludCA9IGQzX25vb3A7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fYXJlYVJpbmdTdGFydCgpIHtcblx0ICAgIHZhciDOuzAwLCDPhjAwLCDOuzAsIGNvc8+GMCwgc2luz4YwO1xuXHQgICAgZDNfZ2VvX2FyZWEucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcblx0ICAgICAgZDNfZ2VvX2FyZWEucG9pbnQgPSBuZXh0UG9pbnQ7XG5cdCAgICAgIM67MCA9ICjOuzAwID0gzrspICogZDNfcmFkaWFucywgY29zz4YwID0gTWF0aC5jb3Moz4YgPSAoz4YwMCA9IM+GKSAqIGQzX3JhZGlhbnMgLyAyICsgz4AgLyA0KSwgXG5cdCAgICAgIHNpbs+GMCA9IE1hdGguc2luKM+GKTtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiBuZXh0UG9pbnQozrssIM+GKSB7XG5cdCAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG5cdCAgICAgIM+GID0gz4YgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNDtcblx0ICAgICAgdmFyIGTOuyA9IM67IC0gzrswLCBzZM67ID0gZM67ID49IDAgPyAxIDogLTEsIGFkzrsgPSBzZM67ICogZM67LCBjb3PPhiA9IE1hdGguY29zKM+GKSwgc2luz4YgPSBNYXRoLnNpbijPhiksIGsgPSBzaW7PhjAgKiBzaW7PhiwgdSA9IGNvc8+GMCAqIGNvc8+GICsgayAqIE1hdGguY29zKGFkzrspLCB2ID0gayAqIHNkzrsgKiBNYXRoLnNpbihhZM67KTtcblx0ICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLmFkZChNYXRoLmF0YW4yKHYsIHUpKTtcblx0ICAgICAgzrswID0gzrssIGNvc8+GMCA9IGNvc8+GLCBzaW7PhjAgPSBzaW7Phjtcblx0ICAgIH1cblx0ICAgIGQzX2dlb19hcmVhLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgbmV4dFBvaW50KM67MDAsIM+GMDApO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbihzcGhlcmljYWwpIHtcblx0ICAgIHZhciDOuyA9IHNwaGVyaWNhbFswXSwgz4YgPSBzcGhlcmljYWxbMV0sIGNvc8+GID0gTWF0aC5jb3Moz4YpO1xuXHQgICAgcmV0dXJuIFsgY29zz4YgKiBNYXRoLmNvcyjOuyksIGNvc8+GICogTWF0aC5zaW4ozrspLCBNYXRoLnNpbijPhikgXTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkRvdChhLCBiKSB7XG5cdCAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuQ3Jvc3MoYSwgYikge1xuXHQgICAgcmV0dXJuIFsgYVsxXSAqIGJbMl0gLSBhWzJdICogYlsxXSwgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSwgYVswXSAqIGJbMV0gLSBhWzFdICogYlswXSBdO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuQWRkKGEsIGIpIHtcblx0ICAgIGFbMF0gKz0gYlswXTtcblx0ICAgIGFbMV0gKz0gYlsxXTtcblx0ICAgIGFbMl0gKz0gYlsyXTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuXHQgICAgcmV0dXJuIFsgdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICogayBdO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGQpIHtcblx0ICAgIHZhciBsID0gTWF0aC5zcXJ0KGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0gKyBkWzJdICogZFsyXSk7XG5cdCAgICBkWzBdIC89IGw7XG5cdCAgICBkWzFdIC89IGw7XG5cdCAgICBkWzJdIC89IGw7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWwoY2FydGVzaWFuKSB7XG5cdCAgICByZXR1cm4gWyBNYXRoLmF0YW4yKGNhcnRlc2lhblsxXSwgY2FydGVzaWFuWzBdKSwgZDNfYXNpbihjYXJ0ZXNpYW5bMl0pIF07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWxFcXVhbChhLCBiKSB7XG5cdCAgICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IM61ICYmIGFicyhhWzFdIC0gYlsxXSkgPCDOtTtcblx0ICB9XG5cdCAgZDMuZ2VvLmJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIM67MCwgz4YwLCDOuzEsIM+GMSwgzrtfLCDOu19fLCDPhl9fLCBwMCwgZM67U3VtLCByYW5nZXMsIHJhbmdlO1xuXHQgICAgdmFyIGJvdW5kID0ge1xuXHQgICAgICBwb2ludDogcG9pbnQsXG5cdCAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuXHQgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuXHQgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGJvdW5kLnBvaW50ID0gcmluZ1BvaW50O1xuXHQgICAgICAgIGJvdW5kLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcblx0ICAgICAgICBib3VuZC5saW5lRW5kID0gcmluZ0VuZDtcblx0ICAgICAgICBkzrtTdW0gPSAwO1xuXHQgICAgICAgIGQzX2dlb19hcmVhLnBvbHlnb25TdGFydCgpO1xuXHQgICAgICB9LFxuXHQgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBkM19nZW9fYXJlYS5wb2x5Z29uRW5kKCk7XG5cdCAgICAgICAgYm91bmQucG9pbnQgPSBwb2ludDtcblx0ICAgICAgICBib3VuZC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG5cdCAgICAgICAgYm91bmQubGluZUVuZCA9IGxpbmVFbmQ7XG5cdCAgICAgICAgaWYgKGQzX2dlb19hcmVhUmluZ1N1bSA8IDApIM67MCA9IC0ozrsxID0gMTgwKSwgz4YwID0gLSjPhjEgPSA5MCk7IGVsc2UgaWYgKGTOu1N1bSA+IM61KSDPhjEgPSA5MDsgZWxzZSBpZiAoZM67U3VtIDwgLc61KSDPhjAgPSAtOTA7XG5cdCAgICAgICAgcmFuZ2VbMF0gPSDOuzAsIHJhbmdlWzFdID0gzrsxO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gcG9pbnQozrssIM+GKSB7XG5cdCAgICAgIHJhbmdlcy5wdXNoKHJhbmdlID0gWyDOuzAgPSDOuywgzrsxID0gzrsgXSk7XG5cdCAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG5cdCAgICAgIGlmICjPhiA+IM+GMSkgz4YxID0gz4Y7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBsaW5lUG9pbnQozrssIM+GKSB7XG5cdCAgICAgIHZhciBwID0gZDNfZ2VvX2NhcnRlc2lhbihbIM67ICogZDNfcmFkaWFucywgz4YgKiBkM19yYWRpYW5zIF0pO1xuXHQgICAgICBpZiAocDApIHtcblx0ICAgICAgICB2YXIgbm9ybWFsID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKHAwLCBwKSwgZXF1YXRvcmlhbCA9IFsgbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwIF0sIGluZmxlY3Rpb24gPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcblx0ICAgICAgICBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGluZmxlY3Rpb24pO1xuXHQgICAgICAgIGluZmxlY3Rpb24gPSBkM19nZW9fc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuXHQgICAgICAgIHZhciBkzrsgPSDOuyAtIM67XywgcyA9IGTOuyA+IDAgPyAxIDogLTEsIM67aSA9IGluZmxlY3Rpb25bMF0gKiBkM19kZWdyZWVzICogcywgYW50aW1lcmlkaWFuID0gYWJzKGTOuykgPiAxODA7XG5cdCAgICAgICAgaWYgKGFudGltZXJpZGlhbiBeIChzICogzrtfIDwgzrtpICYmIM67aSA8IHMgKiDOuykpIHtcblx0ICAgICAgICAgIHZhciDPhmkgPSBpbmZsZWN0aW9uWzFdICogZDNfZGVncmVlcztcblx0ICAgICAgICAgIGlmICjPhmkgPiDPhjEpIM+GMSA9IM+GaTtcblx0ICAgICAgICB9IGVsc2UgaWYgKM67aSA9ICjOu2kgKyAzNjApICUgMzYwIC0gMTgwLCBhbnRpbWVyaWRpYW4gXiAocyAqIM67XyA8IM67aSAmJiDOu2kgPCBzICogzrspKSB7XG5cdCAgICAgICAgICB2YXIgz4ZpID0gLWluZmxlY3Rpb25bMV0gKiBkM19kZWdyZWVzO1xuXHQgICAgICAgICAgaWYgKM+GaSA8IM+GMCkgz4YwID0gz4ZpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAoz4YgPCDPhjApIM+GMCA9IM+GO1xuXHQgICAgICAgICAgaWYgKM+GID4gz4YxKSDPhjEgPSDPhjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGFudGltZXJpZGlhbikge1xuXHQgICAgICAgICAgaWYgKM67IDwgzrtfKSB7XG5cdCAgICAgICAgICAgIGlmIChhbmdsZSjOuzAsIM67KSA+IGFuZ2xlKM67MCwgzrsxKSkgzrsxID0gzrs7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAoYW5nbGUozrssIM67MSkgPiBhbmdsZSjOuzAsIM67MSkpIM67MCA9IM67O1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAozrsxID49IM67MCkge1xuXHQgICAgICAgICAgICBpZiAozrsgPCDOuzApIM67MCA9IM67O1xuXHQgICAgICAgICAgICBpZiAozrsgPiDOuzEpIM67MSA9IM67O1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKM67ID4gzrtfKSB7XG5cdCAgICAgICAgICAgICAgaWYgKGFuZ2xlKM67MCwgzrspID4gYW5nbGUozrswLCDOuzEpKSDOuzEgPSDOuztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBpZiAoYW5nbGUozrssIM67MSkgPiBhbmdsZSjOuzAsIM67MSkpIM67MCA9IM67O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHBvaW50KM67LCDPhik7XG5cdCAgICAgIH1cblx0ICAgICAgcDAgPSBwLCDOu18gPSDOuztcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcblx0ICAgICAgYm91bmQucG9pbnQgPSBsaW5lUG9pbnQ7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuXHQgICAgICByYW5nZVswXSA9IM67MCwgcmFuZ2VbMV0gPSDOuzE7XG5cdCAgICAgIGJvdW5kLnBvaW50ID0gcG9pbnQ7XG5cdCAgICAgIHAwID0gbnVsbDtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJpbmdQb2ludCjOuywgz4YpIHtcblx0ICAgICAgaWYgKHAwKSB7XG5cdCAgICAgICAgdmFyIGTOuyA9IM67IC0gzrtfO1xuXHQgICAgICAgIGTOu1N1bSArPSBhYnMoZM67KSA+IDE4MCA/IGTOuyArIChkzrsgPiAwID8gMzYwIDogLTM2MCkgOiBkzrs7XG5cdCAgICAgIH0gZWxzZSDOu19fID0gzrssIM+GX18gPSDPhjtcblx0ICAgICAgZDNfZ2VvX2FyZWEucG9pbnQozrssIM+GKTtcblx0ICAgICAgbGluZVBvaW50KM67LCDPhik7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG5cdCAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCgpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcblx0ICAgICAgcmluZ1BvaW50KM67X18sIM+GX18pO1xuXHQgICAgICBkM19nZW9fYXJlYS5saW5lRW5kKCk7XG5cdCAgICAgIGlmIChhYnMoZM67U3VtKSA+IM61KSDOuzAgPSAtKM67MSA9IDE4MCk7XG5cdCAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcblx0ICAgICAgcDAgPSBudWxsO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYW5nbGUozrswLCDOuzEpIHtcblx0ICAgICAgcmV0dXJuICjOuzEgLT0gzrswKSA8IDAgPyDOuzEgKyAzNjAgOiDOuzE7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBjb21wYXJlUmFuZ2VzKGEsIGIpIHtcblx0ICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gd2l0aGluUmFuZ2UoeCwgcmFuZ2UpIHtcblx0ICAgICAgcmV0dXJuIHJhbmdlWzBdIDw9IHJhbmdlWzFdID8gcmFuZ2VbMF0gPD0geCAmJiB4IDw9IHJhbmdlWzFdIDogeCA8IHJhbmdlWzBdIHx8IHJhbmdlWzFdIDwgeDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBmdW5jdGlvbihmZWF0dXJlKSB7XG5cdCAgICAgIM+GMSA9IM67MSA9IC0ozrswID0gz4YwID0gSW5maW5pdHkpO1xuXHQgICAgICByYW5nZXMgPSBbXTtcblx0ICAgICAgZDMuZ2VvLnN0cmVhbShmZWF0dXJlLCBib3VuZCk7XG5cdCAgICAgIHZhciBuID0gcmFuZ2VzLmxlbmd0aDtcblx0ICAgICAgaWYgKG4pIHtcblx0ICAgICAgICByYW5nZXMuc29ydChjb21wYXJlUmFuZ2VzKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMSwgYSA9IHJhbmdlc1swXSwgYiwgbWVyZ2VkID0gWyBhIF07IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICAgIGIgPSByYW5nZXNbaV07XG5cdCAgICAgICAgICBpZiAod2l0aGluUmFuZ2UoYlswXSwgYSkgfHwgd2l0aGluUmFuZ2UoYlsxXSwgYSkpIHtcblx0ICAgICAgICAgICAgaWYgKGFuZ2xlKGFbMF0sIGJbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMV0gPSBiWzFdO1xuXHQgICAgICAgICAgICBpZiAoYW5nbGUoYlswXSwgYVsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVswXSA9IGJbMF07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBtZXJnZWQucHVzaChhID0gYik7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBiZXN0ID0gLUluZmluaXR5LCBkzrs7XG5cdCAgICAgICAgZm9yICh2YXIgbiA9IG1lcmdlZC5sZW5ndGggLSAxLCBpID0gMCwgYSA9IG1lcmdlZFtuXSwgYjsgaSA8PSBuOyBhID0gYiwgKytpKSB7XG5cdCAgICAgICAgICBiID0gbWVyZ2VkW2ldO1xuXHQgICAgICAgICAgaWYgKChkzrsgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBiZXN0KSBiZXN0ID0gZM67LCDOuzAgPSBiWzBdLCDOuzEgPSBhWzFdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByYW5nZXMgPSByYW5nZSA9IG51bGw7XG5cdCAgICAgIHJldHVybiDOuzAgPT09IEluZmluaXR5IHx8IM+GMCA9PT0gSW5maW5pdHkgPyBbIFsgTmFOLCBOYU4gXSwgWyBOYU4sIE5hTiBdIF0gOiBbIFsgzrswLCDPhjAgXSwgWyDOuzEsIM+GMSBdIF07XG5cdCAgICB9O1xuXHQgIH0oKTtcblx0ICBkMy5nZW8uY2VudHJvaWQgPSBmdW5jdGlvbihvYmplY3QpIHtcblx0ICAgIGQzX2dlb19jZW50cm9pZFcwID0gZDNfZ2VvX2NlbnRyb2lkVzEgPSBkM19nZW9fY2VudHJvaWRYMCA9IGQzX2dlb19jZW50cm9pZFkwID0gZDNfZ2VvX2NlbnRyb2lkWjAgPSBkM19nZW9fY2VudHJvaWRYMSA9IGQzX2dlb19jZW50cm9pZFkxID0gZDNfZ2VvX2NlbnRyb2lkWjEgPSBkM19nZW9fY2VudHJvaWRYMiA9IGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuXHQgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGQzX2dlb19jZW50cm9pZCk7XG5cdCAgICB2YXIgeCA9IGQzX2dlb19jZW50cm9pZFgyLCB5ID0gZDNfZ2VvX2NlbnRyb2lkWTIsIHogPSBkM19nZW9fY2VudHJvaWRaMiwgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblx0ICAgIGlmIChtIDwgzrUyKSB7XG5cdCAgICAgIHggPSBkM19nZW9fY2VudHJvaWRYMSwgeSA9IGQzX2dlb19jZW50cm9pZFkxLCB6ID0gZDNfZ2VvX2NlbnRyb2lkWjE7XG5cdCAgICAgIGlmIChkM19nZW9fY2VudHJvaWRXMSA8IM61KSB4ID0gZDNfZ2VvX2NlbnRyb2lkWDAsIHkgPSBkM19nZW9fY2VudHJvaWRZMCwgeiA9IGQzX2dlb19jZW50cm9pZFowO1xuXHQgICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuXHQgICAgICBpZiAobSA8IM61MikgcmV0dXJuIFsgTmFOLCBOYU4gXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSwgeCkgKiBkM19kZWdyZWVzLCBkM19hc2luKHogLyBNYXRoLnNxcnQobSkpICogZDNfZGVncmVlcyBdO1xuXHQgIH07XG5cdCAgdmFyIGQzX2dlb19jZW50cm9pZFcwLCBkM19nZW9fY2VudHJvaWRXMSwgZDNfZ2VvX2NlbnRyb2lkWDAsIGQzX2dlb19jZW50cm9pZFkwLCBkM19nZW9fY2VudHJvaWRaMCwgZDNfZ2VvX2NlbnRyb2lkWDEsIGQzX2dlb19jZW50cm9pZFkxLCBkM19nZW9fY2VudHJvaWRaMSwgZDNfZ2VvX2NlbnRyb2lkWDIsIGQzX2dlb19jZW50cm9pZFkyLCBkM19nZW9fY2VudHJvaWRaMjtcblx0ICB2YXIgZDNfZ2VvX2NlbnRyb2lkID0ge1xuXHQgICAgc3BoZXJlOiBkM19ub29wLFxuXHQgICAgcG9pbnQ6IGQzX2dlb19jZW50cm9pZFBvaW50LFxuXHQgICAgbGluZVN0YXJ0OiBkM19nZW9fY2VudHJvaWRMaW5lU3RhcnQsXG5cdCAgICBsaW5lRW5kOiBkM19nZW9fY2VudHJvaWRMaW5lRW5kLFxuXHQgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZFJpbmdTdGFydDtcblx0ICAgIH0sXG5cdCAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZExpbmVTdGFydDtcblx0ICAgIH1cblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50KM67LCDPhikge1xuXHQgICAgzrsgKj0gZDNfcmFkaWFucztcblx0ICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpO1xuXHQgICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooY29zz4YgKiBNYXRoLmNvcyjOuyksIGNvc8+GICogTWF0aC5zaW4ozrspLCBNYXRoLnNpbijPhikpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4LCB5LCB6KSB7XG5cdCAgICArK2QzX2dlb19jZW50cm9pZFcwO1xuXHQgICAgZDNfZ2VvX2NlbnRyb2lkWDAgKz0gKHggLSBkM19nZW9fY2VudHJvaWRYMCkgLyBkM19nZW9fY2VudHJvaWRXMDtcblx0ICAgIGQzX2dlb19jZW50cm9pZFkwICs9ICh5IC0gZDNfZ2VvX2NlbnRyb2lkWTApIC8gZDNfZ2VvX2NlbnRyb2lkVzA7XG5cdCAgICBkM19nZW9fY2VudHJvaWRaMCArPSAoeiAtIGQzX2dlb19jZW50cm9pZFowKSAvIGQzX2dlb19jZW50cm9pZFcwO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRMaW5lU3RhcnQoKSB7XG5cdCAgICB2YXIgeDAsIHkwLCB6MDtcblx0ICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuXHQgICAgICDOuyAqPSBkM19yYWRpYW5zO1xuXHQgICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKTtcblx0ICAgICAgeDAgPSBjb3PPhiAqIE1hdGguY29zKM67KTtcblx0ICAgICAgeTAgPSBjb3PPhiAqIE1hdGguc2luKM67KTtcblx0ICAgICAgejAgPSBNYXRoLnNpbijPhik7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooeDAsIHkwLCB6MCk7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuXHQgICAgICDOuyAqPSBkM19yYWRpYW5zO1xuXHQgICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKSwgeCA9IGNvc8+GICogTWF0aC5jb3MozrspLCB5ID0gY29zz4YgKiBNYXRoLnNpbijOuyksIHogPSBNYXRoLnNpbijPhiksIHcgPSBNYXRoLmF0YW4yKE1hdGguc3FydCgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRXMSArPSB3O1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRaMSArPSB3ICogKHowICsgKHowID0geikpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCgpIHtcblx0ICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRSaW5nU3RhcnQoKSB7XG5cdCAgICB2YXIgzrswMCwgz4YwMCwgeDAsIHkwLCB6MDtcblx0ICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuXHQgICAgICDOuzAwID0gzrssIM+GMDAgPSDPhjtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuXHQgICAgICDOuyAqPSBkM19yYWRpYW5zO1xuXHQgICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKTtcblx0ICAgICAgeDAgPSBjb3PPhiAqIE1hdGguY29zKM67KTtcblx0ICAgICAgeTAgPSBjb3PPhiAqIE1hdGguc2luKM67KTtcblx0ICAgICAgejAgPSBNYXRoLnNpbijPhik7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuXHQgICAgfTtcblx0ICAgIGQzX2dlb19jZW50cm9pZC5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIG5leHRQb2ludCjOuzAwLCDPhjAwKTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVFbmQgPSBkM19nZW9fY2VudHJvaWRMaW5lRW5kO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBkM19nZW9fY2VudHJvaWRQb2ludDtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiBuZXh0UG9pbnQozrssIM+GKSB7XG5cdCAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG5cdCAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpLCB4ID0gY29zz4YgKiBNYXRoLmNvcyjOuyksIHkgPSBjb3PPhiAqIE1hdGguc2luKM67KSwgeiA9IE1hdGguc2luKM+GKSwgY3ggPSB5MCAqIHogLSB6MCAqIHksIGN5ID0gejAgKiB4IC0geDAgKiB6LCBjeiA9IHgwICogeSAtIHkwICogeCwgbSA9IE1hdGguc3FydChjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLCB1ID0geDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6LCB2ID0gbSAmJiAtZDNfYWNvcyh1KSAvIG0sIHcgPSBNYXRoLmF0YW4yKG0sIHUpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRYMiArPSB2ICogY3g7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFkyICs9IHYgKiBjeTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWjIgKz0gdiAqIGN6O1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRXMSArPSB3O1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRaMSArPSB3ICogKHowICsgKHowID0geikpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NvbXBvc2UoYSwgYikge1xuXHQgICAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG5cdCAgICAgIHJldHVybiB4ID0gYSh4LCB5KSwgYih4WzBdLCB4WzFdKTtcblx0ICAgIH1cblx0ICAgIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIHJldHVybiB4ID0gYi5pbnZlcnQoeCwgeSksIHggJiYgYS5pbnZlcnQoeFswXSwgeFsxXSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGNvbXBvc2U7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RydWUoKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlLCBjbGlwU3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBsaXN0ZW5lcikge1xuXHQgICAgdmFyIHN1YmplY3QgPSBbXSwgY2xpcCA9IFtdO1xuXHQgICAgc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbihzZWdtZW50KSB7XG5cdCAgICAgIGlmICgobiA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPD0gMCkgcmV0dXJuO1xuXHQgICAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl07XG5cdCAgICAgIGlmIChkM19nZW9fc3BoZXJpY2FsRXF1YWwocDAsIHAxKSkge1xuXHQgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuXHQgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGEgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSwgYiA9IG5ldyBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocDAsIG51bGwsIGEsIGZhbHNlKTtcblx0ICAgICAgYS5vID0gYjtcblx0ICAgICAgc3ViamVjdC5wdXNoKGEpO1xuXHQgICAgICBjbGlwLnB1c2goYik7XG5cdCAgICAgIGEgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAxLCBzZWdtZW50LCBudWxsLCBmYWxzZSk7XG5cdCAgICAgIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAxLCBudWxsLCBhLCB0cnVlKTtcblx0ICAgICAgYS5vID0gYjtcblx0ICAgICAgc3ViamVjdC5wdXNoKGEpO1xuXHQgICAgICBjbGlwLnB1c2goYik7XG5cdCAgICB9KTtcblx0ICAgIGNsaXAuc29ydChjb21wYXJlKTtcblx0ICAgIGQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhcihzdWJqZWN0KTtcblx0ICAgIGQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhcihjbGlwKTtcblx0ICAgIGlmICghc3ViamVjdC5sZW5ndGgpIHJldHVybjtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBlbnRyeSA9IGNsaXBTdGFydEluc2lkZSwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgIGNsaXBbaV0uZSA9IGVudHJ5ID0gIWVudHJ5O1xuXHQgICAgfVxuXHQgICAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSwgcG9pbnRzLCBwb2ludDtcblx0ICAgIHdoaWxlICgxKSB7XG5cdCAgICAgIHZhciBjdXJyZW50ID0gc3RhcnQsIGlzU3ViamVjdCA9IHRydWU7XG5cdCAgICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG5cdCAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcblx0ICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgIGRvIHtcblx0ICAgICAgICBjdXJyZW50LnYgPSBjdXJyZW50Lm8udiA9IHRydWU7XG5cdCAgICAgICAgaWYgKGN1cnJlbnQuZSkge1xuXHQgICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyArK2kpIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIGxpc3RlbmVyKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGlmIChpc1N1YmplY3QpIHtcblx0ICAgICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBsaXN0ZW5lcik7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuXHQgICAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcblx0ICAgICAgICBpc1N1YmplY3QgPSAhaXNTdWJqZWN0O1xuXHQgICAgICB9IHdoaWxlICghY3VycmVudC52KTtcblx0ICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb25MaW5rQ2lyY3VsYXIoYXJyYXkpIHtcblx0ICAgIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG5cdCAgICB2YXIgbiwgaSA9IDAsIGEgPSBhcnJheVswXSwgYjtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgIGEubiA9IGIgPSBhcnJheVtpXTtcblx0ICAgICAgYi5wID0gYTtcblx0ICAgICAgYSA9IGI7XG5cdCAgICB9XG5cdCAgICBhLm4gPSBiID0gYXJyYXlbMF07XG5cdCAgICBiLnAgPSBhO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG5cdCAgICB0aGlzLnggPSBwb2ludDtcblx0ICAgIHRoaXMueiA9IHBvaW50cztcblx0ICAgIHRoaXMubyA9IG90aGVyO1xuXHQgICAgdGhpcy5lID0gZW50cnk7XG5cdCAgICB0aGlzLnYgPSBmYWxzZTtcblx0ICAgIHRoaXMubiA9IHRoaXMucCA9IG51bGw7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jbGlwKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBjbGlwU3RhcnQpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbihyb3RhdGUsIGxpc3RlbmVyKSB7XG5cdCAgICAgIHZhciBsaW5lID0gY2xpcExpbmUobGlzdGVuZXIpLCByb3RhdGVkQ2xpcFN0YXJ0ID0gcm90YXRlLmludmVydChjbGlwU3RhcnRbMF0sIGNsaXBTdGFydFsxXSk7XG5cdCAgICAgIHZhciBjbGlwID0ge1xuXHQgICAgICAgIHBvaW50OiBwb2ludCxcblx0ICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcblx0ICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuXHQgICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuXHQgICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG5cdCAgICAgICAgICBjbGlwLmxpbmVFbmQgPSByaW5nRW5kO1xuXHQgICAgICAgICAgc2VnbWVudHMgPSBbXTtcblx0ICAgICAgICAgIHBvbHlnb24gPSBbXTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuXHQgICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG5cdCAgICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuXHQgICAgICAgICAgc2VnbWVudHMgPSBkMy5tZXJnZShzZWdtZW50cyk7XG5cdCAgICAgICAgICB2YXIgY2xpcFN0YXJ0SW5zaWRlID0gZDNfZ2VvX3BvaW50SW5Qb2x5Z29uKHJvdGF0ZWRDbGlwU3RhcnQsIHBvbHlnb24pO1xuXHQgICAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGQzX2dlb19jbGlwU29ydCwgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChjbGlwU3RhcnRJbnNpZGUpIHtcblx0ICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIGxpc3RlbmVyKTtcblx0ICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBsaXN0ZW5lci5wb2x5Z29uRW5kKCksIHBvbHlnb25TdGFydGVkID0gZmFsc2U7XG5cdCAgICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuXHQgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBsaXN0ZW5lcik7XG5cdCAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHQgICAgICBmdW5jdGlvbiBwb2ludCjOuywgz4YpIHtcblx0ICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUozrssIM+GKTtcblx0ICAgICAgICBpZiAocG9pbnRWaXNpYmxlKM67ID0gcG9pbnRbMF0sIM+GID0gcG9pbnRbMV0pKSBsaXN0ZW5lci5wb2ludCjOuywgz4YpO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIHBvaW50TGluZSjOuywgz4YpIHtcblx0ICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUozrssIM+GKTtcblx0ICAgICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuXHQgICAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XG5cdCAgICAgICAgbGluZS5saW5lU3RhcnQoKTtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuXHQgICAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcblx0ICAgICAgICBsaW5lLmxpbmVFbmQoKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgc2VnbWVudHM7XG5cdCAgICAgIHZhciBidWZmZXIgPSBkM19nZW9fY2xpcEJ1ZmZlckxpc3RlbmVyKCksIHJpbmdMaXN0ZW5lciA9IGNsaXBMaW5lKGJ1ZmZlciksIHBvbHlnb25TdGFydGVkID0gZmFsc2UsIHBvbHlnb24sIHJpbmc7XG5cdCAgICAgIGZ1bmN0aW9uIHBvaW50UmluZyjOuywgz4YpIHtcblx0ICAgICAgICByaW5nLnB1c2goWyDOuywgz4YgXSk7XG5cdCAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG5cdCAgICAgICAgcmluZ0xpc3RlbmVyLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuXHQgICAgICAgIHJpbmdMaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICByaW5nID0gW107XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcblx0ICAgICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG5cdCAgICAgICAgcmluZ0xpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICB2YXIgY2xlYW4gPSByaW5nTGlzdGVuZXIuY2xlYW4oKSwgcmluZ1NlZ21lbnRzID0gYnVmZmVyLmJ1ZmZlcigpLCBzZWdtZW50LCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aDtcblx0ICAgICAgICByaW5nLnBvcCgpO1xuXHQgICAgICAgIHBvbHlnb24ucHVzaChyaW5nKTtcblx0ICAgICAgICByaW5nID0gbnVsbDtcblx0ICAgICAgICBpZiAoIW4pIHJldHVybjtcblx0ICAgICAgICBpZiAoY2xlYW4gJiAxKSB7XG5cdCAgICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuXHQgICAgICAgICAgdmFyIG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEsIGkgPSAtMSwgcG9pbnQ7XG5cdCAgICAgICAgICBpZiAobiA+IDApIHtcblx0ICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbMV0pO1xuXHQgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQocmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcblx0ICAgICAgICBzZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5maWx0ZXIoZDNfZ2VvX2NsaXBTZWdtZW50TGVuZ3RoMSkpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBjbGlwO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBTZWdtZW50TGVuZ3RoMShzZWdtZW50KSB7XG5cdCAgICByZXR1cm4gc2VnbWVudC5sZW5ndGggPiAxO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2xpcEJ1ZmZlckxpc3RlbmVyKCkge1xuXHQgICAgdmFyIGxpbmVzID0gW10sIGxpbmU7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGxpbmVzLnB1c2gobGluZSA9IFtdKTtcblx0ICAgICAgfSxcblx0ICAgICAgcG9pbnQ6IGZ1bmN0aW9uKM67LCDPhikge1xuXHQgICAgICAgIGxpbmUucHVzaChbIM67LCDPhiBdKTtcblx0ICAgICAgfSxcblx0ICAgICAgbGluZUVuZDogZDNfbm9vcCxcblx0ICAgICAgYnVmZmVyOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgYnVmZmVyID0gbGluZXM7XG5cdCAgICAgICAgbGluZXMgPSBbXTtcblx0ICAgICAgICBsaW5lID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gYnVmZmVyO1xuXHQgICAgICB9LFxuXHQgICAgICByZWpvaW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jbGlwU29ydChhLCBiKSB7XG5cdCAgICByZXR1cm4gKChhID0gYS54KVswXSA8IDAgPyBhWzFdIC0gaGFsZs+AIC0gzrUgOiBoYWxmz4AgLSBhWzFdKSAtICgoYiA9IGIueClbMF0gPCAwID8gYlsxXSAtIGhhbGbPgCAtIM61IDogaGFsZs+AIC0gYlsxXSk7XG5cdCAgfVxuXHQgIHZhciBkM19nZW9fY2xpcEFudGltZXJpZGlhbiA9IGQzX2dlb19jbGlwKGQzX3RydWUsIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuTGluZSwgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSwgWyAtz4AsIC3PgCAvIDIgXSk7XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5MaW5lKGxpc3RlbmVyKSB7XG5cdCAgICB2YXIgzrswID0gTmFOLCDPhjAgPSBOYU4sIHPOuzAgPSBOYU4sIGNsZWFuO1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICBjbGVhbiA9IDE7XG5cdCAgICAgIH0sXG5cdCAgICAgIHBvaW50OiBmdW5jdGlvbijOuzEsIM+GMSkge1xuXHQgICAgICAgIHZhciBzzrsxID0gzrsxID4gMCA/IM+AIDogLc+ALCBkzrsgPSBhYnMozrsxIC0gzrswKTtcblx0ICAgICAgICBpZiAoYWJzKGTOuyAtIM+AKSA8IM61KSB7XG5cdCAgICAgICAgICBsaXN0ZW5lci5wb2ludCjOuzAsIM+GMCA9ICjPhjAgKyDPhjEpIC8gMiA+IDAgPyBoYWxmz4AgOiAtaGFsZs+AKTtcblx0ICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHPOuzAsIM+GMCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHPOuzEsIM+GMCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5wb2ludCjOuzEsIM+GMCk7XG5cdCAgICAgICAgICBjbGVhbiA9IDA7XG5cdCAgICAgICAgfSBlbHNlIGlmIChzzrswICE9PSBzzrsxICYmIGTOuyA+PSDPgCkge1xuXHQgICAgICAgICAgaWYgKGFicyjOuzAgLSBzzrswKSA8IM61KSDOuzAgLT0gc867MCAqIM61O1xuXHQgICAgICAgICAgaWYgKGFicyjOuzEgLSBzzrsxKSA8IM61KSDOuzEgLT0gc867MSAqIM61O1xuXHQgICAgICAgICAgz4YwID0gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QozrswLCDPhjAsIM67MSwgz4YxKTtcblx0ICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHPOuzAsIM+GMCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHPOuzEsIM+GMCk7XG5cdCAgICAgICAgICBjbGVhbiA9IDA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGxpc3RlbmVyLnBvaW50KM67MCA9IM67MSwgz4YwID0gz4YxKTtcblx0ICAgICAgICBzzrswID0gc867MTtcblx0ICAgICAgfSxcblx0ICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICAgIM67MCA9IM+GMCA9IE5hTjtcblx0ICAgICAgfSxcblx0ICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiAyIC0gY2xlYW47XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KM67MCwgz4YwLCDOuzEsIM+GMSkge1xuXHQgICAgdmFyIGNvc8+GMCwgY29zz4YxLCBzaW7OuzBfzrsxID0gTWF0aC5zaW4ozrswIC0gzrsxKTtcblx0ICAgIHJldHVybiBhYnMoc2luzrswX867MSkgPiDOtSA/IE1hdGguYXRhbigoTWF0aC5zaW4oz4YwKSAqIChjb3PPhjEgPSBNYXRoLmNvcyjPhjEpKSAqIE1hdGguc2luKM67MSkgLSBNYXRoLnNpbijPhjEpICogKGNvc8+GMCA9IE1hdGguY29zKM+GMCkpICogTWF0aC5zaW4ozrswKSkgLyAoY29zz4YwICogY29zz4YxICogc2luzrswX867MSkpIDogKM+GMCArIM+GMSkgLyAyO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIGxpc3RlbmVyKSB7XG5cdCAgICB2YXIgz4Y7XG5cdCAgICBpZiAoZnJvbSA9PSBudWxsKSB7XG5cdCAgICAgIM+GID0gZGlyZWN0aW9uICogaGFsZs+AO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCgtz4AsIM+GKTtcblx0ICAgICAgbGlzdGVuZXIucG9pbnQoMCwgz4YpO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCjPgCwgz4YpO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCjPgCwgMCk7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KM+ALCAtz4YpO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCgwLCAtz4YpO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCgtz4AsIC3Phik7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KC3PgCwgMCk7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KC3PgCwgz4YpO1xuXHQgICAgfSBlbHNlIGlmIChhYnMoZnJvbVswXSAtIHRvWzBdKSA+IM61KSB7XG5cdCAgICAgIHZhciBzID0gZnJvbVswXSA8IHRvWzBdID8gz4AgOiAtz4A7XG5cdCAgICAgIM+GID0gZGlyZWN0aW9uICogcyAvIDI7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KC1zLCDPhik7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KDAsIM+GKTtcblx0ICAgICAgbGlzdGVuZXIucG9pbnQocywgz4YpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgbGlzdGVuZXIucG9pbnQodG9bMF0sIHRvWzFdKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BvaW50SW5Qb2x5Z29uKHBvaW50LCBwb2x5Z29uKSB7XG5cdCAgICB2YXIgbWVyaWRpYW4gPSBwb2ludFswXSwgcGFyYWxsZWwgPSBwb2ludFsxXSwgbWVyaWRpYW5Ob3JtYWwgPSBbIE1hdGguc2luKG1lcmlkaWFuKSwgLU1hdGguY29zKG1lcmlkaWFuKSwgMCBdLCBwb2xhckFuZ2xlID0gMCwgd2luZGluZyA9IDA7XG5cdCAgICBkM19nZW9fYXJlYVJpbmdTdW0ucmVzZXQoKTtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgdmFyIHJpbmcgPSBwb2x5Z29uW2ldLCBtID0gcmluZy5sZW5ndGg7XG5cdCAgICAgIGlmICghbSkgY29udGludWU7XG5cdCAgICAgIHZhciBwb2ludDAgPSByaW5nWzBdLCDOuzAgPSBwb2ludDBbMF0sIM+GMCA9IHBvaW50MFsxXSAvIDIgKyDPgCAvIDQsIHNpbs+GMCA9IE1hdGguc2luKM+GMCksIGNvc8+GMCA9IE1hdGguY29zKM+GMCksIGogPSAxO1xuXHQgICAgICB3aGlsZSAodHJ1ZSkge1xuXHQgICAgICAgIGlmIChqID09PSBtKSBqID0gMDtcblx0ICAgICAgICBwb2ludCA9IHJpbmdbal07XG5cdCAgICAgICAgdmFyIM67ID0gcG9pbnRbMF0sIM+GID0gcG9pbnRbMV0gLyAyICsgz4AgLyA0LCBzaW7PhiA9IE1hdGguc2luKM+GKSwgY29zz4YgPSBNYXRoLmNvcyjPhiksIGTOuyA9IM67IC0gzrswLCBzZM67ID0gZM67ID49IDAgPyAxIDogLTEsIGFkzrsgPSBzZM67ICogZM67LCBhbnRpbWVyaWRpYW4gPSBhZM67ID4gz4AsIGsgPSBzaW7PhjAgKiBzaW7Phjtcblx0ICAgICAgICBkM19nZW9fYXJlYVJpbmdTdW0uYWRkKE1hdGguYXRhbjIoayAqIHNkzrsgKiBNYXRoLnNpbihhZM67KSwgY29zz4YwICogY29zz4YgKyBrICogTWF0aC5jb3MoYWTOuykpKTtcblx0ICAgICAgICBwb2xhckFuZ2xlICs9IGFudGltZXJpZGlhbiA/IGTOuyArIHNkzrsgKiDPhCA6IGTOuztcblx0ICAgICAgICBpZiAoYW50aW1lcmlkaWFuIF4gzrswID49IG1lcmlkaWFuIF4gzrsgPj0gbWVyaWRpYW4pIHtcblx0ICAgICAgICAgIHZhciBhcmMgPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MoZDNfZ2VvX2NhcnRlc2lhbihwb2ludDApLCBkM19nZW9fY2FydGVzaWFuKHBvaW50KSk7XG5cdCAgICAgICAgICBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGFyYyk7XG5cdCAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKG1lcmlkaWFuTm9ybWFsLCBhcmMpO1xuXHQgICAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShpbnRlcnNlY3Rpb24pO1xuXHQgICAgICAgICAgdmFyIM+GYXJjID0gKGFudGltZXJpZGlhbiBeIGTOuyA+PSAwID8gLTEgOiAxKSAqIGQzX2FzaW4oaW50ZXJzZWN0aW9uWzJdKTtcblx0ICAgICAgICAgIGlmIChwYXJhbGxlbCA+IM+GYXJjIHx8IHBhcmFsbGVsID09PSDPhmFyYyAmJiAoYXJjWzBdIHx8IGFyY1sxXSkpIHtcblx0ICAgICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkzrsgPj0gMCA/IDEgOiAtMTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFqKyspIGJyZWFrO1xuXHQgICAgICAgIM67MCA9IM67LCBzaW7PhjAgPSBzaW7PhiwgY29zz4YwID0gY29zz4YsIHBvaW50MCA9IHBvaW50O1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gKHBvbGFyQW5nbGUgPCAtzrUgfHwgcG9sYXJBbmdsZSA8IM61ICYmIGQzX2dlb19hcmVhUmluZ1N1bSA8IC3OtSkgXiB3aW5kaW5nICYgMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBDaXJjbGUocmFkaXVzKSB7XG5cdCAgICB2YXIgY3IgPSBNYXRoLmNvcyhyYWRpdXMpLCBzbWFsbFJhZGl1cyA9IGNyID4gMCwgbm90SGVtaXNwaGVyZSA9IGFicyhjcikgPiDOtSwgaW50ZXJwb2xhdGUgPSBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUocmFkaXVzLCA2ICogZDNfcmFkaWFucyk7XG5cdCAgICByZXR1cm4gZDNfZ2VvX2NsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFsgMCwgLXJhZGl1cyBdIDogWyAtz4AsIHJhZGl1cyAtIM+AIF0pO1xuXHQgICAgZnVuY3Rpb24gdmlzaWJsZSjOuywgz4YpIHtcblx0ICAgICAgcmV0dXJuIE1hdGguY29zKM67KSAqIE1hdGguY29zKM+GKSA+IGNyO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY2xpcExpbmUobGlzdGVuZXIpIHtcblx0ICAgICAgdmFyIHBvaW50MCwgYzAsIHYwLCB2MDAsIGNsZWFuO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuXHQgICAgICAgICAgY2xlYW4gPSAxO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKM67LCDPhikge1xuXHQgICAgICAgICAgdmFyIHBvaW50MSA9IFsgzrssIM+GIF0sIHBvaW50MiwgdiA9IHZpc2libGUozrssIM+GKSwgYyA9IHNtYWxsUmFkaXVzID8gdiA/IDAgOiBjb2RlKM67LCDPhikgOiB2ID8gY29kZSjOuyArICjOuyA8IDAgPyDPgCA6IC3PgCksIM+GKSA6IDA7XG5cdCAgICAgICAgICBpZiAoIXBvaW50MCAmJiAodjAwID0gdjAgPSB2KSkgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICBpZiAodiAhPT0gdjApIHtcblx0ICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcblx0ICAgICAgICAgICAgaWYgKGQzX2dlb19zcGhlcmljYWxFcXVhbChwb2ludDAsIHBvaW50MikgfHwgZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHBvaW50MSwgcG9pbnQyKSkge1xuXHQgICAgICAgICAgICAgIHBvaW50MVswXSArPSDOtTtcblx0ICAgICAgICAgICAgICBwb2ludDFbMV0gKz0gzrU7XG5cdCAgICAgICAgICAgICAgdiA9IHZpc2libGUocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAodiAhPT0gdjApIHtcblx0ICAgICAgICAgICAgY2xlYW4gPSAwO1xuXHQgICAgICAgICAgICBpZiAodikge1xuXHQgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCk7XG5cdCAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG5cdCAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuXHQgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5vdEhlbWlzcGhlcmUgJiYgcG9pbnQwICYmIHNtYWxsUmFkaXVzIF4gdikge1xuXHQgICAgICAgICAgICB2YXIgdDtcblx0ICAgICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG5cdCAgICAgICAgICAgICAgY2xlYW4gPSAwO1xuXHQgICAgICAgICAgICAgIGlmIChzbWFsbFJhZGl1cykge1xuXHQgICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcblx0ICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuXHQgICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcblx0ICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcblx0ICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgcG9pbnQwID0gcG9pbnQxLCB2MCA9IHYsIGMwID0gYztcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgaWYgKHYwKSBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICBwb2ludDAgPSBudWxsO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgcmV0dXJuIGNsZWFuIHwgKHYwMCAmJiB2MCkgPDwgMTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBpbnRlcnNlY3QoYSwgYiwgdHdvKSB7XG5cdCAgICAgIHZhciBwYSA9IGQzX2dlb19jYXJ0ZXNpYW4oYSksIHBiID0gZDNfZ2VvX2NhcnRlc2lhbihiKTtcblx0ICAgICAgdmFyIG4xID0gWyAxLCAwLCAwIF0sIG4yID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKHBhLCBwYiksIG4ybjIgPSBkM19nZW9fY2FydGVzaWFuRG90KG4yLCBuMiksIG4xbjIgPSBuMlswXSwgZGV0ZXJtaW5hbnQgPSBuMm4yIC0gbjFuMiAqIG4xbjI7XG5cdCAgICAgIGlmICghZGV0ZXJtaW5hbnQpIHJldHVybiAhdHdvICYmIGE7XG5cdCAgICAgIHZhciBjMSA9IGNyICogbjJuMiAvIGRldGVybWluYW50LCBjMiA9IC1jciAqIG4xbjIgLyBkZXRlcm1pbmFudCwgbjF4bjIgPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSwgQSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLCBCID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKG4yLCBjMik7XG5cdCAgICAgIGQzX2dlb19jYXJ0ZXNpYW5BZGQoQSwgQik7XG5cdCAgICAgIHZhciB1ID0gbjF4bjIsIHcgPSBkM19nZW9fY2FydGVzaWFuRG90KEEsIHUpLCB1dSA9IGQzX2dlb19jYXJ0ZXNpYW5Eb3QodSwgdSksIHQyID0gdyAqIHcgLSB1dSAqIChkM19nZW9fY2FydGVzaWFuRG90KEEsIEEpIC0gMSk7XG5cdCAgICAgIGlmICh0MiA8IDApIHJldHVybjtcblx0ICAgICAgdmFyIHQgPSBNYXRoLnNxcnQodDIpLCBxID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHUsICgtdyAtIHQpIC8gdXUpO1xuXHQgICAgICBkM19nZW9fY2FydGVzaWFuQWRkKHEsIEEpO1xuXHQgICAgICBxID0gZDNfZ2VvX3NwaGVyaWNhbChxKTtcblx0ICAgICAgaWYgKCF0d28pIHJldHVybiBxO1xuXHQgICAgICB2YXIgzrswID0gYVswXSwgzrsxID0gYlswXSwgz4YwID0gYVsxXSwgz4YxID0gYlsxXSwgejtcblx0ICAgICAgaWYgKM67MSA8IM67MCkgeiA9IM67MCwgzrswID0gzrsxLCDOuzEgPSB6O1xuXHQgICAgICB2YXIgzrTOuyA9IM67MSAtIM67MCwgcG9sYXIgPSBhYnMozrTOuyAtIM+AKSA8IM61LCBtZXJpZGlhbiA9IHBvbGFyIHx8IM60zrsgPCDOtTtcblx0ICAgICAgaWYgKCFwb2xhciAmJiDPhjEgPCDPhjApIHogPSDPhjAsIM+GMCA9IM+GMSwgz4YxID0gejtcblx0ICAgICAgaWYgKG1lcmlkaWFuID8gcG9sYXIgPyDPhjAgKyDPhjEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIM67MCkgPCDOtSA/IM+GMCA6IM+GMSkgOiDPhjAgPD0gcVsxXSAmJiBxWzFdIDw9IM+GMSA6IM60zrsgPiDPgCBeICjOuzAgPD0gcVswXSAmJiBxWzBdIDw9IM67MSkpIHtcblx0ICAgICAgICB2YXIgcTEgPSBkM19nZW9fY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG5cdCAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbkFkZChxMSwgQSk7XG5cdCAgICAgICAgcmV0dXJuIFsgcSwgZDNfZ2VvX3NwaGVyaWNhbChxMSkgXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY29kZSjOuywgz4YpIHtcblx0ICAgICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IM+AIC0gcmFkaXVzLCBjb2RlID0gMDtcblx0ICAgICAgaWYgKM67IDwgLXIpIGNvZGUgfD0gMTsgZWxzZSBpZiAozrsgPiByKSBjb2RlIHw9IDI7XG5cdCAgICAgIGlmICjPhiA8IC1yKSBjb2RlIHw9IDQ7IGVsc2UgaWYgKM+GID4gcikgY29kZSB8PSA4O1xuXHQgICAgICByZXR1cm4gY29kZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV9jbGlwTGluZSh4MCwgeTAsIHgxLCB5MSkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKGxpbmUpIHtcblx0ICAgICAgdmFyIGEgPSBsaW5lLmEsIGIgPSBsaW5lLmIsIGF4ID0gYS54LCBheSA9IGEueSwgYnggPSBiLngsIGJ5ID0gYi55LCB0MCA9IDAsIHQxID0gMSwgZHggPSBieCAtIGF4LCBkeSA9IGJ5IC0gYXksIHI7XG5cdCAgICAgIHIgPSB4MCAtIGF4O1xuXHQgICAgICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG5cdCAgICAgIHIgLz0gZHg7XG5cdCAgICAgIGlmIChkeCA8IDApIHtcblx0ICAgICAgICBpZiAociA8IHQwKSByZXR1cm47XG5cdCAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuXHQgICAgICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuXHQgICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcblx0ICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG5cdCAgICAgIH1cblx0ICAgICAgciA9IHgxIC0gYXg7XG5cdCAgICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcblx0ICAgICAgciAvPSBkeDtcblx0ICAgICAgaWYgKGR4IDwgMCkge1xuXHQgICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcblx0ICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG5cdCAgICAgIH0gZWxzZSBpZiAoZHggPiAwKSB7XG5cdCAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuXHQgICAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcblx0ICAgICAgfVxuXHQgICAgICByID0geTAgLSBheTtcblx0ICAgICAgaWYgKCFkeSAmJiByID4gMCkgcmV0dXJuO1xuXHQgICAgICByIC89IGR5O1xuXHQgICAgICBpZiAoZHkgPCAwKSB7XG5cdCAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuXHQgICAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcblx0ICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcblx0ICAgICAgICBpZiAociA+IHQxKSByZXR1cm47XG5cdCAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuXHQgICAgICB9XG5cdCAgICAgIHIgPSB5MSAtIGF5O1xuXHQgICAgICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG5cdCAgICAgIHIgLz0gZHk7XG5cdCAgICAgIGlmIChkeSA8IDApIHtcblx0ICAgICAgICBpZiAociA+IHQxKSByZXR1cm47XG5cdCAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuXHQgICAgICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuXHQgICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcblx0ICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHQwID4gMCkgbGluZS5hID0ge1xuXHQgICAgICAgIHg6IGF4ICsgdDAgKiBkeCxcblx0ICAgICAgICB5OiBheSArIHQwICogZHlcblx0ICAgICAgfTtcblx0ICAgICAgaWYgKHQxIDwgMSkgbGluZS5iID0ge1xuXHQgICAgICAgIHg6IGF4ICsgdDEgKiBkeCxcblx0ICAgICAgICB5OiBheSArIHQxICogZHlcblx0ICAgICAgfTtcblx0ICAgICAgcmV0dXJuIGxpbmU7XG5cdCAgICB9O1xuXHQgIH1cblx0ICB2YXIgZDNfZ2VvX2NsaXBFeHRlbnRNQVggPSAxZTk7XG5cdCAgZDMuZ2VvLmNsaXBFeHRlbnQgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciB4MCwgeTAsIHgxLCB5MSwgc3RyZWFtLCBjbGlwLCBjbGlwRXh0ZW50ID0ge1xuXHQgICAgICBzdHJlYW06IGZ1bmN0aW9uKG91dHB1dCkge1xuXHQgICAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlO1xuXHQgICAgICAgIHN0cmVhbSA9IGNsaXAob3V0cHV0KTtcblx0ICAgICAgICBzdHJlYW0udmFsaWQgPSB0cnVlO1xuXHQgICAgICAgIHJldHVybiBzdHJlYW07XG5cdCAgICAgIH0sXG5cdCAgICAgIGV4dGVudDogZnVuY3Rpb24oXykge1xuXHQgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgWyB4MCwgeTAgXSwgWyB4MSwgeTEgXSBdO1xuXHQgICAgICAgIGNsaXAgPSBkM19nZW9fY2xpcEV4dGVudCh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKTtcblx0ICAgICAgICBpZiAoc3RyZWFtKSBzdHJlYW0udmFsaWQgPSBmYWxzZSwgc3RyZWFtID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gY2xpcEV4dGVudDtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBjbGlwRXh0ZW50LmV4dGVudChbIFsgMCwgMCBdLCBbIDk2MCwgNTAwIF0gXSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fY2xpcEV4dGVudCh4MCwgeTAsIHgxLCB5MSkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG5cdCAgICAgIHZhciBsaXN0ZW5lcl8gPSBsaXN0ZW5lciwgYnVmZmVyTGlzdGVuZXIgPSBkM19nZW9fY2xpcEJ1ZmZlckxpc3RlbmVyKCksIGNsaXBMaW5lID0gZDNfZ2VvbV9jbGlwTGluZSh4MCwgeTAsIHgxLCB5MSksIHNlZ21lbnRzLCBwb2x5Z29uLCByaW5nO1xuXHQgICAgICB2YXIgY2xpcCA9IHtcblx0ICAgICAgICBwb2ludDogcG9pbnQsXG5cdCAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG5cdCAgICAgICAgbGluZUVuZDogbGluZUVuZCxcblx0ICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgbGlzdGVuZXIgPSBidWZmZXJMaXN0ZW5lcjtcblx0ICAgICAgICAgIHNlZ21lbnRzID0gW107XG5cdCAgICAgICAgICBwb2x5Z29uID0gW107XG5cdCAgICAgICAgICBjbGVhbiA9IHRydWU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJfO1xuXHQgICAgICAgICAgc2VnbWVudHMgPSBkMy5tZXJnZShzZWdtZW50cyk7XG5cdCAgICAgICAgICB2YXIgY2xpcFN0YXJ0SW5zaWRlID0gaW5zaWRlUG9seWdvbihbIHgwLCB5MSBdKSwgaW5zaWRlID0gY2xlYW4gJiYgY2xpcFN0YXJ0SW5zaWRlLCB2aXNpYmxlID0gc2VnbWVudHMubGVuZ3RoO1xuXHQgICAgICAgICAgaWYgKGluc2lkZSB8fCB2aXNpYmxlKSB7XG5cdCAgICAgICAgICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuXHQgICAgICAgICAgICBpZiAoaW5zaWRlKSB7XG5cdCAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgbGlzdGVuZXIpO1xuXHQgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAodmlzaWJsZSkge1xuXHQgICAgICAgICAgICAgIGQzX2dlb19jbGlwUG9seWdvbihzZWdtZW50cywgY29tcGFyZSwgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGxpc3RlbmVyLnBvbHlnb25FbmQoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgICAgZnVuY3Rpb24gaW5zaWRlUG9seWdvbihwKSB7XG5cdCAgICAgICAgdmFyIHduID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoLCB5ID0gcFsxXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuXHQgICAgICAgICAgZm9yICh2YXIgaiA9IDEsIHYgPSBwb2x5Z29uW2ldLCBtID0gdi5sZW5ndGgsIGEgPSB2WzBdLCBiOyBqIDwgbTsgKytqKSB7XG5cdCAgICAgICAgICAgIGIgPSB2W2pdO1xuXHQgICAgICAgICAgICBpZiAoYVsxXSA8PSB5KSB7XG5cdCAgICAgICAgICAgICAgaWYgKGJbMV0gPiB5ICYmIGQzX2Nyb3NzMmQoYSwgYiwgcCkgPiAwKSArK3duO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIGlmIChiWzFdIDw9IHkgJiYgZDNfY3Jvc3MyZChhLCBiLCBwKSA8IDApIC0td247XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYSA9IGI7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB3biAhPT0gMDtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBsaXN0ZW5lcikge1xuXHQgICAgICAgIHZhciBhID0gMCwgYTEgPSAwO1xuXHQgICAgICAgIGlmIChmcm9tID09IG51bGwgfHwgKGEgPSBjb3JuZXIoZnJvbSwgZGlyZWN0aW9uKSkgIT09IChhMSA9IGNvcm5lcih0bywgZGlyZWN0aW9uKSkgfHwgY29tcGFyZVBvaW50cyhmcm9tLCB0bykgPCAwIF4gZGlyZWN0aW9uID4gMCkge1xuXHQgICAgICAgICAgZG8ge1xuXHQgICAgICAgICAgICBsaXN0ZW5lci5wb2ludChhID09PSAwIHx8IGEgPT09IDMgPyB4MCA6IHgxLCBhID4gMSA/IHkxIDogeTApO1xuXHQgICAgICAgICAgfSB3aGlsZSAoKGEgPSAoYSArIGRpcmVjdGlvbiArIDQpICUgNCkgIT09IGExKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgbGlzdGVuZXIucG9pbnQodG9bMF0sIHRvWzFdKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gcG9pbnRWaXNpYmxlKHgsIHkpIHtcblx0ICAgICAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG5cdCAgICAgICAgaWYgKHBvaW50VmlzaWJsZSh4LCB5KSkgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHhfXywgeV9fLCB2X18sIHhfLCB5Xywgdl8sIGZpcnN0LCBjbGVhbjtcblx0ICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuXHQgICAgICAgIGNsaXAucG9pbnQgPSBsaW5lUG9pbnQ7XG5cdCAgICAgICAgaWYgKHBvbHlnb24pIHBvbHlnb24ucHVzaChyaW5nID0gW10pO1xuXHQgICAgICAgIGZpcnN0ID0gdHJ1ZTtcblx0ICAgICAgICB2XyA9IGZhbHNlO1xuXHQgICAgICAgIHhfID0geV8gPSBOYU47XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcblx0ICAgICAgICBpZiAoc2VnbWVudHMpIHtcblx0ICAgICAgICAgIGxpbmVQb2ludCh4X18sIHlfXyk7XG5cdCAgICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJMaXN0ZW5lci5yZWpvaW4oKTtcblx0ICAgICAgICAgIHNlZ21lbnRzLnB1c2goYnVmZmVyTGlzdGVuZXIuYnVmZmVyKCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG5cdCAgICAgICAgaWYgKHZfKSBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gbGluZVBvaW50KHgsIHkpIHtcblx0ICAgICAgICB4ID0gTWF0aC5tYXgoLWQzX2dlb19jbGlwRXh0ZW50TUFYLCBNYXRoLm1pbihkM19nZW9fY2xpcEV4dGVudE1BWCwgeCkpO1xuXHQgICAgICAgIHkgPSBNYXRoLm1heCgtZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIE1hdGgubWluKGQzX2dlb19jbGlwRXh0ZW50TUFYLCB5KSk7XG5cdCAgICAgICAgdmFyIHYgPSBwb2ludFZpc2libGUoeCwgeSk7XG5cdCAgICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbIHgsIHkgXSk7XG5cdCAgICAgICAgaWYgKGZpcnN0KSB7XG5cdCAgICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuXHQgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcblx0ICAgICAgICAgIGlmICh2KSB7XG5cdCAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh4LCB5KTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKHYgJiYgdl8pIGxpc3RlbmVyLnBvaW50KHgsIHkpOyBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIGwgPSB7XG5cdCAgICAgICAgICAgICAgYToge1xuXHQgICAgICAgICAgICAgICAgeDogeF8sXG5cdCAgICAgICAgICAgICAgICB5OiB5X1xuXHQgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgYjoge1xuXHQgICAgICAgICAgICAgICAgeDogeCxcblx0ICAgICAgICAgICAgICAgIHk6IHlcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIGlmIChjbGlwTGluZShsKSkge1xuXHQgICAgICAgICAgICAgIGlmICghdl8pIHtcblx0ICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQobC5hLngsIGwuYS55KTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQobC5iLngsIGwuYi55KTtcblx0ICAgICAgICAgICAgICBpZiAoIXYpIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHYpIHtcblx0ICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh4LCB5KTtcblx0ICAgICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGNsaXA7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gY29ybmVyKHAsIGRpcmVjdGlvbikge1xuXHQgICAgICByZXR1cm4gYWJzKHBbMF0gLSB4MCkgPCDOtSA/IGRpcmVjdGlvbiA+IDAgPyAwIDogMyA6IGFicyhwWzBdIC0geDEpIDwgzrUgPyBkaXJlY3Rpb24gPiAwID8gMiA6IDEgOiBhYnMocFsxXSAtIHkwKSA8IM61ID8gZGlyZWN0aW9uID4gMCA/IDEgOiAwIDogZGlyZWN0aW9uID4gMCA/IDMgOiAyO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG5cdCAgICAgIHJldHVybiBjb21wYXJlUG9pbnRzKGEueCwgYi54KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNvbXBhcmVQb2ludHMoYSwgYikge1xuXHQgICAgICB2YXIgY2EgPSBjb3JuZXIoYSwgMSksIGNiID0gY29ybmVyKGIsIDEpO1xuXHQgICAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYiA6IGNhID09PSAwID8gYlsxXSAtIGFbMV0gOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXSA6IGJbMF0gLSBhWzBdO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY29uaWMocHJvamVjdEF0KSB7XG5cdCAgICB2YXIgz4YwID0gMCwgz4YxID0gz4AgLyAzLCBtID0gZDNfZ2VvX3Byb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCksIHAgPSBtKM+GMCwgz4YxKTtcblx0ICAgIHAucGFyYWxsZWxzID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIM+GMCAvIM+AICogMTgwLCDPhjEgLyDPgCAqIDE4MCBdO1xuXHQgICAgICByZXR1cm4gbSjPhjAgPSBfWzBdICogz4AgLyAxODAsIM+GMSA9IF9bMV0gKiDPgCAvIDE4MCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHA7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jb25pY0VxdWFsQXJlYSjPhjAsIM+GMSkge1xuXHQgICAgdmFyIHNpbs+GMCA9IE1hdGguc2luKM+GMCksIG4gPSAoc2luz4YwICsgTWF0aC5zaW4oz4YxKSkgLyAyLCBDID0gMSArIHNpbs+GMCAqICgyICogbiAtIHNpbs+GMCksIM+BMCA9IE1hdGguc3FydChDKSAvIG47XG5cdCAgICBmdW5jdGlvbiBmb3J3YXJkKM67LCDPhikge1xuXHQgICAgICB2YXIgz4EgPSBNYXRoLnNxcnQoQyAtIDIgKiBuICogTWF0aC5zaW4oz4YpKSAvIG47XG5cdCAgICAgIHJldHVybiBbIM+BICogTWF0aC5zaW4ozrsgKj0gbiksIM+BMCAtIM+BICogTWF0aC5jb3MozrspIF07XG5cdCAgICB9XG5cdCAgICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgdmFyIM+BMF95ID0gz4EwIC0geTtcblx0ICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih4LCDPgTBfeSkgLyBuLCBkM19hc2luKChDIC0gKHggKiB4ICsgz4EwX3kgKiDPgTBfeSkgKiBuICogbikgLyAoMiAqIG4pKSBdO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBmb3J3YXJkO1xuXHQgIH1cblx0ICAoZDMuZ2VvLmNvbmljRXF1YWxBcmVhID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX2NvbmljKGQzX2dlb19jb25pY0VxdWFsQXJlYSk7XG5cdCAgfSkucmF3ID0gZDNfZ2VvX2NvbmljRXF1YWxBcmVhO1xuXHQgIGQzLmdlby5hbGJlcnMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyA5NiwgMCBdKS5jZW50ZXIoWyAtLjYsIDM4LjcgXSkucGFyYWxsZWxzKFsgMjkuNSwgNDUuNSBdKS5zY2FsZSgxMDcwKTtcblx0ICB9O1xuXHQgIGQzLmdlby5hbGJlcnNVc2EgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBsb3dlcjQ4ID0gZDMuZ2VvLmFsYmVycygpO1xuXHQgICAgdmFyIGFsYXNrYSA9IGQzLmdlby5jb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbIDE1NCwgMCBdKS5jZW50ZXIoWyAtMiwgNTguNSBdKS5wYXJhbGxlbHMoWyA1NSwgNjUgXSk7XG5cdCAgICB2YXIgaGF3YWlpID0gZDMuZ2VvLmNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsgMTU3LCAwIF0pLmNlbnRlcihbIC0zLCAxOS45IF0pLnBhcmFsbGVscyhbIDgsIDE4IF0pO1xuXHQgICAgdmFyIHBvaW50LCBwb2ludFN0cmVhbSA9IHtcblx0ICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgICBwb2ludCA9IFsgeCwgeSBdO1xuXHQgICAgICB9XG5cdCAgICB9LCBsb3dlcjQ4UG9pbnQsIGFsYXNrYVBvaW50LCBoYXdhaWlQb2ludDtcblx0ICAgIGZ1bmN0aW9uIGFsYmVyc1VzYShjb29yZGluYXRlcykge1xuXHQgICAgICB2YXIgeCA9IGNvb3JkaW5hdGVzWzBdLCB5ID0gY29vcmRpbmF0ZXNbMV07XG5cdCAgICAgIHBvaW50ID0gbnVsbDtcblx0ICAgICAgKGxvd2VyNDhQb2ludCh4LCB5KSwgcG9pbnQpIHx8IChhbGFza2FQb2ludCh4LCB5KSwgcG9pbnQpIHx8IGhhd2FpaVBvaW50KHgsIHkpO1xuXHQgICAgICByZXR1cm4gcG9pbnQ7XG5cdCAgICB9XG5cdCAgICBhbGJlcnNVc2EuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcblx0ICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHQgPSBsb3dlcjQ4LnRyYW5zbGF0ZSgpLCB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLCB5ID0gKGNvb3JkaW5hdGVzWzFdIC0gdFsxXSkgLyBrO1xuXHQgICAgICByZXR1cm4gKHkgPj0gLjEyICYmIHkgPCAuMjM0ICYmIHggPj0gLS40MjUgJiYgeCA8IC0uMjE0ID8gYWxhc2thIDogeSA+PSAuMTY2ICYmIHkgPCAuMjM0ICYmIHggPj0gLS4yMTQgJiYgeCA8IC0uMTE1ID8gaGF3YWlpIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcblx0ICAgIH07XG5cdCAgICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG5cdCAgICAgIHZhciBsb3dlcjQ4U3RyZWFtID0gbG93ZXI0OC5zdHJlYW0oc3RyZWFtKSwgYWxhc2thU3RyZWFtID0gYWxhc2thLnN0cmVhbShzdHJlYW0pLCBoYXdhaWlTdHJlYW0gPSBoYXdhaWkuc3RyZWFtKHN0cmVhbSk7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgICAgIGxvd2VyNDhTdHJlYW0ucG9pbnQoeCwgeSk7XG5cdCAgICAgICAgICBhbGFza2FTdHJlYW0ucG9pbnQoeCwgeSk7XG5cdCAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9pbnQoeCwgeSk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgbG93ZXI0OFN0cmVhbS5zcGhlcmUoKTtcblx0ICAgICAgICAgIGFsYXNrYVN0cmVhbS5zcGhlcmUoKTtcblx0ICAgICAgICAgIGhhd2FpaVN0cmVhbS5zcGhlcmUoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBsb3dlcjQ4U3RyZWFtLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgYWxhc2thU3RyZWFtLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgaGF3YWlpU3RyZWFtLmxpbmVTdGFydCgpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBsb3dlcjQ4U3RyZWFtLmxpbmVFbmQoKTtcblx0ICAgICAgICAgIGFsYXNrYVN0cmVhbS5saW5lRW5kKCk7XG5cdCAgICAgICAgICBoYXdhaWlTdHJlYW0ubGluZUVuZCgpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGxvd2VyNDhTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG5cdCAgICAgICAgICBhbGFza2FTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG5cdCAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGxvd2VyNDhTdHJlYW0ucG9seWdvbkVuZCgpO1xuXHQgICAgICAgICAgYWxhc2thU3RyZWFtLnBvbHlnb25FbmQoKTtcblx0ICAgICAgICAgIGhhd2FpaVN0cmVhbS5wb2x5Z29uRW5kKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIGFsYmVyc1VzYS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgucHJlY2lzaW9uKCk7XG5cdCAgICAgIGxvd2VyNDgucHJlY2lzaW9uKF8pO1xuXHQgICAgICBhbGFza2EucHJlY2lzaW9uKF8pO1xuXHQgICAgICBoYXdhaWkucHJlY2lzaW9uKF8pO1xuXHQgICAgICByZXR1cm4gYWxiZXJzVXNhO1xuXHQgICAgfTtcblx0ICAgIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC5zY2FsZSgpO1xuXHQgICAgICBsb3dlcjQ4LnNjYWxlKF8pO1xuXHQgICAgICBhbGFza2Euc2NhbGUoXyAqIC4zNSk7XG5cdCAgICAgIGhhd2FpaS5zY2FsZShfKTtcblx0ICAgICAgcmV0dXJuIGFsYmVyc1VzYS50cmFuc2xhdGUobG93ZXI0OC50cmFuc2xhdGUoKSk7XG5cdCAgICB9O1xuXHQgICAgYWxiZXJzVXNhLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcblx0ICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHggPSArX1swXSwgeSA9ICtfWzFdO1xuXHQgICAgICBsb3dlcjQ4UG9pbnQgPSBsb3dlcjQ4LnRyYW5zbGF0ZShfKS5jbGlwRXh0ZW50KFsgWyB4IC0gLjQ1NSAqIGssIHkgLSAuMjM4ICogayBdLCBbIHggKyAuNDU1ICogaywgeSArIC4yMzggKiBrIF0gXSkuc3RyZWFtKHBvaW50U3RyZWFtKS5wb2ludDtcblx0ICAgICAgYWxhc2thUG9pbnQgPSBhbGFza2EudHJhbnNsYXRlKFsgeCAtIC4zMDcgKiBrLCB5ICsgLjIwMSAqIGsgXSkuY2xpcEV4dGVudChbIFsgeCAtIC40MjUgKiBrICsgzrUsIHkgKyAuMTIgKiBrICsgzrUgXSwgWyB4IC0gLjIxNCAqIGsgLSDOtSwgeSArIC4yMzQgKiBrIC0gzrUgXSBdKS5zdHJlYW0ocG9pbnRTdHJlYW0pLnBvaW50O1xuXHQgICAgICBoYXdhaWlQb2ludCA9IGhhd2FpaS50cmFuc2xhdGUoWyB4IC0gLjIwNSAqIGssIHkgKyAuMjEyICogayBdKS5jbGlwRXh0ZW50KFsgWyB4IC0gLjIxNCAqIGsgKyDOtSwgeSArIC4xNjYgKiBrICsgzrUgXSwgWyB4IC0gLjExNSAqIGsgLSDOtSwgeSArIC4yMzQgKiBrIC0gzrUgXSBdKS5zdHJlYW0ocG9pbnRTdHJlYW0pLnBvaW50O1xuXHQgICAgICByZXR1cm4gYWxiZXJzVXNhO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBhbGJlcnNVc2Euc2NhbGUoMTA3MCk7XG5cdCAgfTtcblx0ICB2YXIgZDNfZ2VvX3BhdGhBcmVhU3VtLCBkM19nZW9fcGF0aEFyZWFQb2x5Z29uLCBkM19nZW9fcGF0aEFyZWEgPSB7XG5cdCAgICBwb2ludDogZDNfbm9vcCxcblx0ICAgIGxpbmVTdGFydDogZDNfbm9vcCxcblx0ICAgIGxpbmVFbmQ6IGQzX25vb3AsXG5cdCAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM19nZW9fcGF0aEFyZWFQb2x5Z29uID0gMDtcblx0ICAgICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQXJlYVJpbmdTdGFydDtcblx0ICAgIH0sXG5cdCAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQXJlYS5saW5lRW5kID0gZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gZDNfbm9vcDtcblx0ICAgICAgZDNfZ2VvX3BhdGhBcmVhU3VtICs9IGFicyhkM19nZW9fcGF0aEFyZWFQb2x5Z29uIC8gMik7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fcGF0aEFyZWFSaW5nU3RhcnQoKSB7XG5cdCAgICB2YXIgeDAwLCB5MDAsIHgwLCB5MDtcblx0ICAgIGQzX2dlb19wYXRoQXJlYS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gbmV4dFBvaW50O1xuXHQgICAgICB4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geTtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuXHQgICAgICBkM19nZW9fcGF0aEFyZWFQb2x5Z29uICs9IHkwICogeCAtIHgwICogeTtcblx0ICAgICAgeDAgPSB4LCB5MCA9IHk7XG5cdCAgICB9XG5cdCAgICBkM19nZW9fcGF0aEFyZWEubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBuZXh0UG9pbnQoeDAwLCB5MDApO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgdmFyIGQzX2dlb19wYXRoQm91bmRzWDAsIGQzX2dlb19wYXRoQm91bmRzWTAsIGQzX2dlb19wYXRoQm91bmRzWDEsIGQzX2dlb19wYXRoQm91bmRzWTE7XG5cdCAgdmFyIGQzX2dlb19wYXRoQm91bmRzID0ge1xuXHQgICAgcG9pbnQ6IGQzX2dlb19wYXRoQm91bmRzUG9pbnQsXG5cdCAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG5cdCAgICBsaW5lRW5kOiBkM19ub29wLFxuXHQgICAgcG9seWdvblN0YXJ0OiBkM19ub29wLFxuXHQgICAgcG9seWdvbkVuZDogZDNfbm9vcFxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhCb3VuZHNQb2ludCh4LCB5KSB7XG5cdCAgICBpZiAoeCA8IGQzX2dlb19wYXRoQm91bmRzWDApIGQzX2dlb19wYXRoQm91bmRzWDAgPSB4O1xuXHQgICAgaWYgKHggPiBkM19nZW9fcGF0aEJvdW5kc1gxKSBkM19nZW9fcGF0aEJvdW5kc1gxID0geDtcblx0ICAgIGlmICh5IDwgZDNfZ2VvX3BhdGhCb3VuZHNZMCkgZDNfZ2VvX3BhdGhCb3VuZHNZMCA9IHk7XG5cdCAgICBpZiAoeSA+IGQzX2dlb19wYXRoQm91bmRzWTEpIGQzX2dlb19wYXRoQm91bmRzWTEgPSB5O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fcGF0aEJ1ZmZlcigpIHtcblx0ICAgIHZhciBwb2ludENpcmNsZSA9IGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKDQuNSksIGJ1ZmZlciA9IFtdO1xuXHQgICAgdmFyIHN0cmVhbSA9IHtcblx0ICAgICAgcG9pbnQ6IHBvaW50LFxuXHQgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuXHQgICAgICB9LFxuXHQgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuXHQgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZFBvbHlnb247XG5cdCAgICAgIH0sXG5cdCAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZDtcblx0ICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcblx0ICAgICAgfSxcblx0ICAgICAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgICBwb2ludENpcmNsZSA9IGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKF8pO1xuXHQgICAgICAgIHJldHVybiBzdHJlYW07XG5cdCAgICAgIH0sXG5cdCAgICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGgpIHtcblx0ICAgICAgICAgIHZhciByZXN1bHQgPSBidWZmZXIuam9pbihcIlwiKTtcblx0ICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuXHQgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG5cdCAgICAgIGJ1ZmZlci5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSwgcG9pbnRDaXJjbGUpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcG9pbnRMaW5lU3RhcnQoeCwgeSkge1xuXHQgICAgICBidWZmZXIucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xuXHQgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmU7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuXHQgICAgICBidWZmZXIucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcblx0ICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBsaW5lRW5kUG9seWdvbigpIHtcblx0ICAgICAgYnVmZmVyLnB1c2goXCJaXCIpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHN0cmVhbTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUocmFkaXVzKSB7XG5cdCAgICByZXR1cm4gXCJtMCxcIiArIHJhZGl1cyArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgLTIgKiByYWRpdXMgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXMgKyBcInpcIjtcblx0ICB9XG5cdCAgdmFyIGQzX2dlb19wYXRoQ2VudHJvaWQgPSB7XG5cdCAgICBwb2ludDogZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50LFxuXHQgICAgbGluZVN0YXJ0OiBkM19nZW9fcGF0aENlbnRyb2lkTGluZVN0YXJ0LFxuXHQgICAgbGluZUVuZDogZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVFbmQsXG5cdCAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQ2VudHJvaWRSaW5nU3RhcnQ7XG5cdCAgICB9LFxuXHQgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQ7XG5cdCAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydDtcblx0ICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5saW5lRW5kID0gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVFbmQ7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeCwgeSkge1xuXHQgICAgZDNfZ2VvX2NlbnRyb2lkWDAgKz0geDtcblx0ICAgIGQzX2dlb19jZW50cm9pZFkwICs9IHk7XG5cdCAgICArK2QzX2dlb19jZW50cm9pZFowO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fcGF0aENlbnRyb2lkTGluZVN0YXJ0KCkge1xuXHQgICAgdmFyIHgwLCB5MDtcblx0ICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG5cdCAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gbmV4dFBvaW50KHgsIHkpIHtcblx0ICAgICAgdmFyIGR4ID0geCAtIHgwLCBkeSA9IHkgLSB5MCwgeiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFoxICs9IHo7XG5cdCAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kKCkge1xuXHQgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZFJpbmdTdGFydCgpIHtcblx0ICAgIHZhciB4MDAsIHkwMCwgeDAsIHkwO1xuXHQgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcblx0ICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5KTtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuXHQgICAgICB2YXIgZHggPSB4IC0geDAsIGR5ID0geSAtIHkwLCB6ID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWDEgKz0geiAqICh4MCArIHgpIC8gMjtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0geiAqICh5MCArIHkpIC8gMjtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gejtcblx0ICAgICAgeiA9IHkwICogeCAtIHgwICogeTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0geiAqICh4MCArIHgpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRZMiArPSB6ICogKHkwICsgeSk7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFoyICs9IHogKiAzO1xuXHQgICAgICBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xuXHQgICAgfVxuXHQgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIG5leHRQb2ludCh4MDAsIHkwMCk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fcGF0aENvbnRleHQoY29udGV4dCkge1xuXHQgICAgdmFyIHBvaW50UmFkaXVzID0gNC41O1xuXHQgICAgdmFyIHN0cmVhbSA9IHtcblx0ICAgICAgcG9pbnQ6IHBvaW50LFxuXHQgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuXHQgICAgICB9LFxuXHQgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuXHQgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZFBvbHlnb247XG5cdCAgICAgIH0sXG5cdCAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZDtcblx0ICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcblx0ICAgICAgfSxcblx0ICAgICAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgICBwb2ludFJhZGl1cyA9IF87XG5cdCAgICAgICAgcmV0dXJuIHN0cmVhbTtcblx0ICAgICAgfSxcblx0ICAgICAgcmVzdWx0OiBkM19ub29wXG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuXHQgICAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcG9pbnRSYWRpdXMsIHkpO1xuXHQgICAgICBjb250ZXh0LmFyYyh4LCB5LCBwb2ludFJhZGl1cywgMCwgz4QpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcG9pbnRMaW5lU3RhcnQoeCwgeSkge1xuXHQgICAgICBjb250ZXh0Lm1vdmVUbyh4LCB5KTtcblx0ICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcG9pbnRMaW5lKHgsIHkpIHtcblx0ICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuXHQgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGxpbmVFbmRQb2x5Z29uKCkge1xuXHQgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHN0cmVhbTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3Jlc2FtcGxlKHByb2plY3QpIHtcblx0ICAgIHZhciDOtDIgPSAuNSwgY29zTWluRGlzdGFuY2UgPSBNYXRoLmNvcygzMCAqIGQzX3JhZGlhbnMpLCBtYXhEZXB0aCA9IDE2O1xuXHQgICAgZnVuY3Rpb24gcmVzYW1wbGUoc3RyZWFtKSB7XG5cdCAgICAgIHJldHVybiAobWF4RGVwdGggPyByZXNhbXBsZVJlY3Vyc2l2ZSA6IHJlc2FtcGxlTm9uZSkoc3RyZWFtKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJlc2FtcGxlTm9uZShzdHJlYW0pIHtcblx0ICAgICAgcmV0dXJuIGQzX2dlb190cmFuc2Zvcm1Qb2ludChzdHJlYW0sIGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcblx0ICAgICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVzYW1wbGVSZWN1cnNpdmUoc3RyZWFtKSB7XG5cdCAgICAgIHZhciDOuzAwLCDPhjAwLCB4MDAsIHkwMCwgYTAwLCBiMDAsIGMwMCwgzrswLCB4MCwgeTAsIGEwLCBiMCwgYzA7XG5cdCAgICAgIHZhciByZXNhbXBsZSA9IHtcblx0ICAgICAgICBwb2ludDogcG9pbnQsXG5cdCAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG5cdCAgICAgICAgbGluZUVuZDogbGluZUVuZCxcblx0ICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuXHQgICAgICAgICAgcmVzYW1wbGUubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuXHQgICAgICAgICAgcmVzYW1wbGUubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuXHQgICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuXHQgICAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG5cdCAgICAgICAgeDAgPSBOYU47XG5cdCAgICAgICAgcmVzYW1wbGUucG9pbnQgPSBsaW5lUG9pbnQ7XG5cdCAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCjOuywgz4YpIHtcblx0ICAgICAgICB2YXIgYyA9IGQzX2dlb19jYXJ0ZXNpYW4oWyDOuywgz4YgXSksIHAgPSBwcm9qZWN0KM67LCDPhik7XG5cdCAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgwID0gcFswXSwgeTAgPSBwWzFdLCDOuzAgPSDOuywgYTAgPSBjWzBdLCBiMCA9IGNbMV0sIGMwID0gY1syXSwgbWF4RGVwdGgsIHN0cmVhbSk7XG5cdCAgICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcblx0ICAgICAgICByZXNhbXBsZS5wb2ludCA9IHBvaW50O1xuXHQgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuXHQgICAgICAgIGxpbmVTdGFydCgpO1xuXHQgICAgICAgIHJlc2FtcGxlLnBvaW50ID0gcmluZ1BvaW50O1xuXHQgICAgICAgIHJlc2FtcGxlLmxpbmVFbmQgPSByaW5nRW5kO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIHJpbmdQb2ludCjOuywgz4YpIHtcblx0ICAgICAgICBsaW5lUG9pbnQozrswMCA9IM67LCDPhjAwID0gz4YpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG5cdCAgICAgICAgcmVzYW1wbGUucG9pbnQgPSBsaW5lUG9pbnQ7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcblx0ICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDAwLCB5MDAsIM67MDAsIGEwMCwgYjAwLCBjMDAsIG1heERlcHRoLCBzdHJlYW0pO1xuXHQgICAgICAgIHJlc2FtcGxlLmxpbmVFbmQgPSBsaW5lRW5kO1xuXHQgICAgICAgIGxpbmVFbmQoKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcmVzYW1wbGU7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDEsIHkxLCDOuzEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pIHtcblx0ICAgICAgdmFyIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuXHQgICAgICBpZiAoZDIgPiA0ICogzrQyICYmIGRlcHRoLS0pIHtcblx0ICAgICAgICB2YXIgYSA9IGEwICsgYTEsIGIgPSBiMCArIGIxLCBjID0gYzAgKyBjMSwgbSA9IE1hdGguc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpLCDPhjIgPSBNYXRoLmFzaW4oYyAvPSBtKSwgzrsyID0gYWJzKGFicyhjKSAtIDEpIDwgzrUgfHwgYWJzKM67MCAtIM67MSkgPCDOtSA/ICjOuzAgKyDOuzEpIC8gMiA6IE1hdGguYXRhbjIoYiwgYSksIHAgPSBwcm9qZWN0KM67Miwgz4YyKSwgeDIgPSBwWzBdLCB5MiA9IHBbMV0sIGR4MiA9IHgyIC0geDAsIGR5MiA9IHkyIC0geTAsIGR6ID0gZHkgKiBkeDIgLSBkeCAqIGR5Mjtcblx0ICAgICAgICBpZiAoZHogKiBkeiAvIGQyID4gzrQyIHx8IGFicygoZHggKiBkeDIgKyBkeSAqIGR5MikgLyBkMiAtIC41KSA+IC4zIHx8IGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7XG5cdCAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDIsIHkyLCDOuzIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcblx0ICAgICAgICAgIHN0cmVhbS5wb2ludCh4MiwgeTIpO1xuXHQgICAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDIsIHkyLCDOuzIsIGEsIGIsIGMsIHgxLCB5MSwgzrsxLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJlc2FtcGxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gTWF0aC5zcXJ0KM60Mik7XG5cdCAgICAgIG1heERlcHRoID0gKM60MiA9IF8gKiBfKSA+IDAgJiYgMTY7XG5cdCAgICAgIHJldHVybiByZXNhbXBsZTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gcmVzYW1wbGU7XG5cdCAgfVxuXHQgIGQzLmdlby5wYXRoID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgcG9pbnRSYWRpdXMgPSA0LjUsIHByb2plY3Rpb24sIGNvbnRleHQsIHByb2plY3RTdHJlYW0sIGNvbnRleHRTdHJlYW0sIGNhY2hlU3RyZWFtO1xuXHQgICAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcblx0ICAgICAgaWYgKG9iamVjdCkge1xuXHQgICAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgICAgICAgaWYgKCFjYWNoZVN0cmVhbSB8fCAhY2FjaGVTdHJlYW0udmFsaWQpIGNhY2hlU3RyZWFtID0gcHJvamVjdFN0cmVhbShjb250ZXh0U3RyZWFtKTtcblx0ICAgICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgY2FjaGVTdHJlYW0pO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuXHQgICAgfVxuXHQgICAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdCAgICAgIGQzX2dlb19wYXRoQXJlYVN1bSA9IDA7XG5cdCAgICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBwcm9qZWN0U3RyZWFtKGQzX2dlb19wYXRoQXJlYSkpO1xuXHQgICAgICByZXR1cm4gZDNfZ2VvX3BhdGhBcmVhU3VtO1xuXHQgICAgfTtcblx0ICAgIHBhdGguY2VudHJvaWQgPSBmdW5jdGlvbihvYmplY3QpIHtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWDAgPSBkM19nZW9fY2VudHJvaWRZMCA9IGQzX2dlb19jZW50cm9pZFowID0gZDNfZ2VvX2NlbnRyb2lkWDEgPSBkM19nZW9fY2VudHJvaWRZMSA9IGQzX2dlb19jZW50cm9pZFoxID0gZDNfZ2VvX2NlbnRyb2lkWDIgPSBkM19nZW9fY2VudHJvaWRZMiA9IGQzX2dlb19jZW50cm9pZFoyID0gMDtcblx0ICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIHByb2plY3RTdHJlYW0oZDNfZ2VvX3BhdGhDZW50cm9pZCkpO1xuXHQgICAgICByZXR1cm4gZDNfZ2VvX2NlbnRyb2lkWjIgPyBbIGQzX2dlb19jZW50cm9pZFgyIC8gZDNfZ2VvX2NlbnRyb2lkWjIsIGQzX2dlb19jZW50cm9pZFkyIC8gZDNfZ2VvX2NlbnRyb2lkWjIgXSA6IGQzX2dlb19jZW50cm9pZFoxID8gWyBkM19nZW9fY2VudHJvaWRYMSAvIGQzX2dlb19jZW50cm9pZFoxLCBkM19nZW9fY2VudHJvaWRZMSAvIGQzX2dlb19jZW50cm9pZFoxIF0gOiBkM19nZW9fY2VudHJvaWRaMCA/IFsgZDNfZ2VvX2NlbnRyb2lkWDAgLyBkM19nZW9fY2VudHJvaWRaMCwgZDNfZ2VvX2NlbnRyb2lkWTAgLyBkM19nZW9fY2VudHJvaWRaMCBdIDogWyBOYU4sIE5hTiBdO1xuXHQgICAgfTtcblx0ICAgIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdCAgICAgIGQzX2dlb19wYXRoQm91bmRzWDEgPSBkM19nZW9fcGF0aEJvdW5kc1kxID0gLShkM19nZW9fcGF0aEJvdW5kc1gwID0gZDNfZ2VvX3BhdGhCb3VuZHNZMCA9IEluZmluaXR5KTtcblx0ICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIHByb2plY3RTdHJlYW0oZDNfZ2VvX3BhdGhCb3VuZHMpKTtcblx0ICAgICAgcmV0dXJuIFsgWyBkM19nZW9fcGF0aEJvdW5kc1gwLCBkM19nZW9fcGF0aEJvdW5kc1kwIF0sIFsgZDNfZ2VvX3BhdGhCb3VuZHNYMSwgZDNfZ2VvX3BhdGhCb3VuZHNZMSBdIF07XG5cdCAgICB9O1xuXHQgICAgcGF0aC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcm9qZWN0aW9uO1xuXHQgICAgICBwcm9qZWN0U3RyZWFtID0gKHByb2plY3Rpb24gPSBfKSA/IF8uc3RyZWFtIHx8IGQzX2dlb19wYXRoUHJvamVjdFN0cmVhbShfKSA6IGQzX2lkZW50aXR5O1xuXHQgICAgICByZXR1cm4gcmVzZXQoKTtcblx0ICAgIH07XG5cdCAgICBwYXRoLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNvbnRleHQ7XG5cdCAgICAgIGNvbnRleHRTdHJlYW0gPSAoY29udGV4dCA9IF8pID09IG51bGwgPyBuZXcgZDNfZ2VvX3BhdGhCdWZmZXIoKSA6IG5ldyBkM19nZW9fcGF0aENvbnRleHQoXyk7XG5cdCAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cyhwb2ludFJhZGl1cyk7XG5cdCAgICAgIHJldHVybiByZXNldCgpO1xuXHQgICAgfTtcblx0ICAgIHBhdGgucG9pbnRSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBvaW50UmFkaXVzO1xuXHQgICAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG5cdCAgICAgIHJldHVybiBwYXRoO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuXHQgICAgICBjYWNoZVN0cmVhbSA9IG51bGw7XG5cdCAgICAgIHJldHVybiBwYXRoO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHBhdGgucHJvamVjdGlvbihkMy5nZW8uYWxiZXJzVXNhKCkpLmNvbnRleHQobnVsbCk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0ocHJvamVjdCkge1xuXHQgICAgdmFyIHJlc2FtcGxlID0gZDNfZ2VvX3Jlc2FtcGxlKGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgcmV0dXJuIHByb2plY3QoWyB4ICogZDNfZGVncmVlcywgeSAqIGQzX2RlZ3JlZXMgXSk7XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcblx0ICAgICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uUmFkaWFucyhyZXNhbXBsZShzdHJlYW0pKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmdlby50cmFuc2Zvcm0gPSBmdW5jdGlvbihtZXRob2RzKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBzdHJlYW06IGZ1bmN0aW9uKHN0cmVhbSkge1xuXHQgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBuZXcgZDNfZ2VvX3RyYW5zZm9ybShzdHJlYW0pO1xuXHQgICAgICAgIGZvciAodmFyIGsgaW4gbWV0aG9kcykgdHJhbnNmb3JtW2tdID0gbWV0aG9kc1trXTtcblx0ICAgICAgICByZXR1cm4gdHJhbnNmb3JtO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3RyYW5zZm9ybShzdHJlYW0pIHtcblx0ICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuXHQgIH1cblx0ICBkM19nZW9fdHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcblx0ICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHgsIHkpO1xuXHQgICAgfSxcblx0ICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMuc3RyZWFtLnNwaGVyZSgpO1xuXHQgICAgfSxcblx0ICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpO1xuXHQgICAgfSxcblx0ICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLnN0cmVhbS5saW5lRW5kKCk7XG5cdCAgICB9LFxuXHQgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgdGhpcy5zdHJlYW0ucG9seWdvblN0YXJ0KCk7XG5cdCAgICB9LFxuXHQgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMuc3RyZWFtLnBvbHlnb25FbmQoKTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb190cmFuc2Zvcm1Qb2ludChzdHJlYW0sIHBvaW50KSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBwb2ludDogcG9pbnQsXG5cdCAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgc3RyZWFtLnNwaGVyZSgpO1xuXHQgICAgICB9LFxuXHQgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcblx0ICAgICAgfSxcblx0ICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcblx0ICAgICAgfSxcblx0ICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG5cdCAgICAgIH0sXG5cdCAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmdlby5wcm9qZWN0aW9uID0gZDNfZ2VvX3Byb2plY3Rpb247XG5cdCAgZDMuZ2VvLnByb2plY3Rpb25NdXRhdG9yID0gZDNfZ2VvX3Byb2plY3Rpb25NdXRhdG9yO1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uKHByb2plY3QpIHtcblx0ICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBwcm9qZWN0O1xuXHQgICAgfSkoKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3Byb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCkge1xuXHQgICAgdmFyIHByb2plY3QsIHJvdGF0ZSwgcHJvamVjdFJvdGF0ZSwgcHJvamVjdFJlc2FtcGxlID0gZDNfZ2VvX3Jlc2FtcGxlKGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG5cdCAgICAgIHJldHVybiBbIHhbMF0gKiBrICsgzrR4LCDOtHkgLSB4WzFdICogayBdO1xuXHQgICAgfSksIGsgPSAxNTAsIHggPSA0ODAsIHkgPSAyNTAsIM67ID0gMCwgz4YgPSAwLCDOtM67ID0gMCwgzrTPhiA9IDAsIM60zrMgPSAwLCDOtHgsIM60eSwgcHJlY2xpcCA9IGQzX2dlb19jbGlwQW50aW1lcmlkaWFuLCBwb3N0Y2xpcCA9IGQzX2lkZW50aXR5LCBjbGlwQW5nbGUgPSBudWxsLCBjbGlwRXh0ZW50ID0gbnVsbCwgc3RyZWFtO1xuXHQgICAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuXHQgICAgICBwb2ludCA9IHByb2plY3RSb3RhdGUocG9pbnRbMF0gKiBkM19yYWRpYW5zLCBwb2ludFsxXSAqIGQzX3JhZGlhbnMpO1xuXHQgICAgICByZXR1cm4gWyBwb2ludFswXSAqIGsgKyDOtHgsIM60eSAtIHBvaW50WzFdICogayBdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gaW52ZXJ0KHBvaW50KSB7XG5cdCAgICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZS5pbnZlcnQoKHBvaW50WzBdIC0gzrR4KSAvIGssICjOtHkgLSBwb2ludFsxXSkgLyBrKTtcblx0ICAgICAgcmV0dXJuIHBvaW50ICYmIFsgcG9pbnRbMF0gKiBkM19kZWdyZWVzLCBwb2ludFsxXSAqIGQzX2RlZ3JlZXMgXTtcblx0ICAgIH1cblx0ICAgIHByb2plY3Rpb24uc3RyZWFtID0gZnVuY3Rpb24ob3V0cHV0KSB7XG5cdCAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlO1xuXHQgICAgICBzdHJlYW0gPSBkM19nZW9fcHJvamVjdGlvblJhZGlhbnMocHJlY2xpcChyb3RhdGUsIHByb2plY3RSZXNhbXBsZShwb3N0Y2xpcChvdXRwdXQpKSkpO1xuXHQgICAgICBzdHJlYW0udmFsaWQgPSB0cnVlO1xuXHQgICAgICByZXR1cm4gc3RyZWFtO1xuXHQgICAgfTtcblx0ICAgIHByb2plY3Rpb24uY2xpcEFuZ2xlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwQW5nbGU7XG5cdCAgICAgIHByZWNsaXAgPSBfID09IG51bGwgPyAoY2xpcEFuZ2xlID0gXywgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4pIDogZDNfZ2VvX2NsaXBDaXJjbGUoKGNsaXBBbmdsZSA9ICtfKSAqIGQzX3JhZGlhbnMpO1xuXHQgICAgICByZXR1cm4gaW52YWxpZGF0ZSgpO1xuXHQgICAgfTtcblx0ICAgIHByb2plY3Rpb24uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEV4dGVudDtcblx0ICAgICAgY2xpcEV4dGVudCA9IF87XG5cdCAgICAgIHBvc3RjbGlwID0gXyA/IGQzX2dlb19jbGlwRXh0ZW50KF9bMF1bMF0sIF9bMF1bMV0sIF9bMV1bMF0sIF9bMV1bMV0pIDogZDNfaWRlbnRpdHk7XG5cdCAgICAgIHJldHVybiBpbnZhbGlkYXRlKCk7XG5cdCAgICB9O1xuXHQgICAgcHJvamVjdGlvbi5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaztcblx0ICAgICAgayA9ICtfO1xuXHQgICAgICByZXR1cm4gcmVzZXQoKTtcblx0ICAgIH07XG5cdCAgICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyB4LCB5IF07XG5cdCAgICAgIHggPSArX1swXTtcblx0ICAgICAgeSA9ICtfWzFdO1xuXHQgICAgICByZXR1cm4gcmVzZXQoKTtcblx0ICAgIH07XG5cdCAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyDOuyAqIGQzX2RlZ3JlZXMsIM+GICogZDNfZGVncmVlcyBdO1xuXHQgICAgICDOuyA9IF9bMF0gJSAzNjAgKiBkM19yYWRpYW5zO1xuXHQgICAgICDPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuXHQgICAgICByZXR1cm4gcmVzZXQoKTtcblx0ICAgIH07XG5cdCAgICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyDOtM67ICogZDNfZGVncmVlcywgzrTPhiAqIGQzX2RlZ3JlZXMsIM60zrMgKiBkM19kZWdyZWVzIF07XG5cdCAgICAgIM60zrsgPSBfWzBdICUgMzYwICogZDNfcmFkaWFucztcblx0ICAgICAgzrTPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuXHQgICAgICDOtM6zID0gXy5sZW5ndGggPiAyID8gX1syXSAlIDM2MCAqIGQzX3JhZGlhbnMgOiAwO1xuXHQgICAgICByZXR1cm4gcmVzZXQoKTtcblx0ICAgIH07XG5cdCAgICBkMy5yZWJpbmQocHJvamVjdGlvbiwgcHJvamVjdFJlc2FtcGxlLCBcInByZWNpc2lvblwiKTtcblx0ICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuXHQgICAgICBwcm9qZWN0Um90YXRlID0gZDNfZ2VvX2NvbXBvc2Uocm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKM60zrssIM60z4YsIM60zrMpLCBwcm9qZWN0KTtcblx0ICAgICAgdmFyIGNlbnRlciA9IHByb2plY3QozrssIM+GKTtcblx0ICAgICAgzrR4ID0geCAtIGNlbnRlclswXSAqIGs7XG5cdCAgICAgIM60eSA9IHkgKyBjZW50ZXJbMV0gKiBrO1xuXHQgICAgICByZXR1cm4gaW52YWxpZGF0ZSgpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcblx0ICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2UsIHN0cmVhbSA9IG51bGw7XG5cdCAgICAgIHJldHVybiBwcm9qZWN0aW9uO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuXHQgICAgICByZXR1cm4gcmVzZXQoKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uUmFkaWFucyhzdHJlYW0pIHtcblx0ICAgIHJldHVybiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIHN0cmVhbS5wb2ludCh4ICogZDNfcmFkaWFucywgeSAqIGQzX3JhZGlhbnMpO1xuXHQgICAgfSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIozrssIM+GKSB7XG5cdCAgICByZXR1cm4gWyDOuywgz4YgXTtcblx0ICB9XG5cdCAgKGQzLmdlby5lcXVpcmVjdGFuZ3VsYXIgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fZXF1aXJlY3Rhbmd1bGFyKTtcblx0ICB9KS5yYXcgPSBkM19nZW9fZXF1aXJlY3Rhbmd1bGFyLmludmVydCA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG5cdCAgZDMuZ2VvLnJvdGF0aW9uID0gZnVuY3Rpb24ocm90YXRlKSB7XG5cdCAgICByb3RhdGUgPSBkM19nZW9fcm90YXRpb24ocm90YXRlWzBdICUgMzYwICogZDNfcmFkaWFucywgcm90YXRlWzFdICogZDNfcmFkaWFucywgcm90YXRlLmxlbmd0aCA+IDIgPyByb3RhdGVbMl0gKiBkM19yYWRpYW5zIDogMCk7XG5cdCAgICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XG5cdCAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcblx0ICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGQzX2RlZ3JlZXMsIGNvb3JkaW5hdGVzWzFdICo9IGQzX2RlZ3JlZXMsIGNvb3JkaW5hdGVzO1xuXHQgICAgfVxuXHQgICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuXHQgICAgICBjb29yZGluYXRlcyA9IHJvdGF0ZS5pbnZlcnQoY29vcmRpbmF0ZXNbMF0gKiBkM19yYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIGQzX3JhZGlhbnMpO1xuXHQgICAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZDNfZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZDNfZGVncmVlcywgY29vcmRpbmF0ZXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGZvcndhcmQ7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9faWRlbnRpdHlSb3RhdGlvbijOuywgz4YpIHtcblx0ICAgIHJldHVybiBbIM67ID4gz4AgPyDOuyAtIM+EIDogzrsgPCAtz4AgPyDOuyArIM+EIDogzrssIM+GIF07XG5cdCAgfVxuXHQgIGQzX2dlb19pZGVudGl0eVJvdGF0aW9uLmludmVydCA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3JvdGF0aW9uKM60zrssIM60z4YsIM60zrMpIHtcblx0ICAgIHJldHVybiDOtM67ID8gzrTPhiB8fCDOtM6zID8gZDNfZ2VvX2NvbXBvc2UoZDNfZ2VvX3JvdGF0aW9uzrsozrTOuyksIGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykpIDogZDNfZ2VvX3JvdGF0aW9uzrsozrTOuykgOiDOtM+GIHx8IM60zrMgPyBkM19nZW9fcm90YXRpb27Phs6zKM60z4YsIM60zrMpIDogZDNfZ2VvX2lkZW50aXR5Um90YXRpb247XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19mb3J3YXJkUm90YXRpb27OuyjOtM67KSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24ozrssIM+GKSB7XG5cdCAgICAgIHJldHVybiDOuyArPSDOtM67LCBbIM67ID4gz4AgPyDOuyAtIM+EIDogzrsgPCAtz4AgPyDOuyArIM+EIDogzrssIM+GIF07XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fcm90YXRpb27OuyjOtM67KSB7XG5cdCAgICB2YXIgcm90YXRpb24gPSBkM19nZW9fZm9yd2FyZFJvdGF0aW9uzrsozrTOuyk7XG5cdCAgICByb3RhdGlvbi5pbnZlcnQgPSBkM19nZW9fZm9yd2FyZFJvdGF0aW9uzrsoLc60zrspO1xuXHQgICAgcmV0dXJuIHJvdGF0aW9uO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fcm90YXRpb27Phs6zKM60z4YsIM60zrMpIHtcblx0ICAgIHZhciBjb3POtM+GID0gTWF0aC5jb3MozrTPhiksIHNpbs60z4YgPSBNYXRoLnNpbijOtM+GKSwgY29zzrTOsyA9IE1hdGguY29zKM60zrMpLCBzaW7OtM6zID0gTWF0aC5zaW4ozrTOsyk7XG5cdCAgICBmdW5jdGlvbiByb3RhdGlvbijOuywgz4YpIHtcblx0ICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YpLCB4ID0gTWF0aC5jb3MozrspICogY29zz4YsIHkgPSBNYXRoLnNpbijOuykgKiBjb3PPhiwgeiA9IE1hdGguc2luKM+GKSwgayA9IHogKiBjb3POtM+GICsgeCAqIHNpbs60z4Y7XG5cdCAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSAqIGNvc860zrMgLSBrICogc2luzrTOsywgeCAqIGNvc860z4YgLSB6ICogc2luzrTPhiksIGQzX2FzaW4oayAqIGNvc860zrMgKyB5ICogc2luzrTOsykgXTtcblx0ICAgIH1cblx0ICAgIHJvdGF0aW9uLmludmVydCA9IGZ1bmN0aW9uKM67LCDPhikge1xuXHQgICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhiwgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLCB6ID0gTWF0aC5zaW4oz4YpLCBrID0geiAqIGNvc860zrMgLSB5ICogc2luzrTOsztcblx0ICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih5ICogY29zzrTOsyArIHogKiBzaW7OtM6zLCB4ICogY29zzrTPhiArIGsgKiBzaW7OtM+GKSwgZDNfYXNpbihrICogY29zzrTPhiAtIHggKiBzaW7OtM+GKSBdO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiByb3RhdGlvbjtcblx0ICB9XG5cdCAgZDMuZ2VvLmNpcmNsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIG9yaWdpbiA9IFsgMCwgMCBdLCBhbmdsZSwgcHJlY2lzaW9uID0gNiwgaW50ZXJwb2xhdGU7XG5cdCAgICBmdW5jdGlvbiBjaXJjbGUoKSB7XG5cdCAgICAgIHZhciBjZW50ZXIgPSB0eXBlb2Ygb3JpZ2luID09PSBcImZ1bmN0aW9uXCIgPyBvcmlnaW4uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IG9yaWdpbiwgcm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKC1jZW50ZXJbMF0gKiBkM19yYWRpYW5zLCAtY2VudGVyWzFdICogZDNfcmFkaWFucywgMCkuaW52ZXJ0LCByaW5nID0gW107XG5cdCAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHtcblx0ICAgICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgICAgICAgcmluZy5wdXNoKHggPSByb3RhdGUoeCwgeSkpO1xuXHQgICAgICAgICAgeFswXSAqPSBkM19kZWdyZWVzLCB4WzFdICo9IGQzX2RlZ3JlZXM7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICB0eXBlOiBcIlBvbHlnb25cIixcblx0ICAgICAgICBjb29yZGluYXRlczogWyByaW5nIF1cblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGNpcmNsZS5vcmlnaW4gPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9yaWdpbjtcblx0ICAgICAgb3JpZ2luID0geDtcblx0ICAgICAgcmV0dXJuIGNpcmNsZTtcblx0ICAgIH07XG5cdCAgICBjaXJjbGUuYW5nbGUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGFuZ2xlO1xuXHQgICAgICBpbnRlcnBvbGF0ZSA9IGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZSgoYW5nbGUgPSAreCkgKiBkM19yYWRpYW5zLCBwcmVjaXNpb24gKiBkM19yYWRpYW5zKTtcblx0ICAgICAgcmV0dXJuIGNpcmNsZTtcblx0ICAgIH07XG5cdCAgICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcmVjaXNpb247XG5cdCAgICAgIGludGVycG9sYXRlID0gZDNfZ2VvX2NpcmNsZUludGVycG9sYXRlKGFuZ2xlICogZDNfcmFkaWFucywgKHByZWNpc2lvbiA9ICtfKSAqIGQzX3JhZGlhbnMpO1xuXHQgICAgICByZXR1cm4gY2lyY2xlO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBjaXJjbGUuYW5nbGUoOTApO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NpcmNsZUludGVycG9sYXRlKHJhZGl1cywgcHJlY2lzaW9uKSB7XG5cdCAgICB2YXIgY3IgPSBNYXRoLmNvcyhyYWRpdXMpLCBzciA9IE1hdGguc2luKHJhZGl1cyk7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oZnJvbSwgdG8sIGRpcmVjdGlvbiwgbGlzdGVuZXIpIHtcblx0ICAgICAgdmFyIHN0ZXAgPSBkaXJlY3Rpb24gKiBwcmVjaXNpb247XG5cdCAgICAgIGlmIChmcm9tICE9IG51bGwpIHtcblx0ICAgICAgICBmcm9tID0gZDNfZ2VvX2NpcmNsZUFuZ2xlKGNyLCBmcm9tKTtcblx0ICAgICAgICB0byA9IGQzX2dlb19jaXJjbGVBbmdsZShjciwgdG8pO1xuXHQgICAgICAgIGlmIChkaXJlY3Rpb24gPiAwID8gZnJvbSA8IHRvIDogZnJvbSA+IHRvKSBmcm9tICs9IGRpcmVjdGlvbiAqIM+EO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGZyb20gPSByYWRpdXMgKyBkaXJlY3Rpb24gKiDPhDtcblx0ICAgICAgICB0byA9IHJhZGl1cyAtIC41ICogc3RlcDtcblx0ICAgICAgfVxuXHQgICAgICBmb3IgKHZhciBwb2ludCwgdCA9IGZyb207IGRpcmVjdGlvbiA+IDAgPyB0ID4gdG8gOiB0IDwgdG87IHQgLT0gc3RlcCkge1xuXHQgICAgICAgIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IGQzX2dlb19zcGhlcmljYWwoWyBjciwgLXNyICogTWF0aC5jb3ModCksIC1zciAqIE1hdGguc2luKHQpIF0pKVswXSwgcG9pbnRbMV0pO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHBvaW50KSB7XG5cdCAgICB2YXIgYSA9IGQzX2dlb19jYXJ0ZXNpYW4ocG9pbnQpO1xuXHQgICAgYVswXSAtPSBjcjtcblx0ICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYSk7XG5cdCAgICB2YXIgYW5nbGUgPSBkM19hY29zKC1hWzFdKTtcblx0ICAgIHJldHVybiAoKC1hWzJdIDwgMCA/IC1hbmdsZSA6IGFuZ2xlKSArIDIgKiBNYXRoLlBJIC0gzrUpICUgKDIgKiBNYXRoLlBJKTtcblx0ICB9XG5cdCAgZDMuZ2VvLmRpc3RhbmNlID0gZnVuY3Rpb24oYSwgYikge1xuXHQgICAgdmFyIM6UzrsgPSAoYlswXSAtIGFbMF0pICogZDNfcmFkaWFucywgz4YwID0gYVsxXSAqIGQzX3JhZGlhbnMsIM+GMSA9IGJbMV0gKiBkM19yYWRpYW5zLCBzaW7OlM67ID0gTWF0aC5zaW4ozpTOuyksIGNvc86UzrsgPSBNYXRoLmNvcyjOlM67KSwgc2luz4YwID0gTWF0aC5zaW4oz4YwKSwgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgc2luz4YxID0gTWF0aC5zaW4oz4YxKSwgY29zz4YxID0gTWF0aC5jb3Moz4YxKSwgdDtcblx0ICAgIHJldHVybiBNYXRoLmF0YW4yKE1hdGguc3FydCgodCA9IGNvc8+GMSAqIHNpbs6UzrspICogdCArICh0ID0gY29zz4YwICogc2luz4YxIC0gc2luz4YwICogY29zz4YxICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YxICsgY29zz4YwICogY29zz4YxICogY29zzpTOuyk7XG5cdCAgfTtcblx0ICBkMy5nZW8uZ3JhdGljdWxlID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgeDEsIHgwLCBYMSwgWDAsIHkxLCB5MCwgWTEsIFkwLCBkeCA9IDEwLCBkeSA9IGR4LCBEWCA9IDkwLCBEWSA9IDM2MCwgeCwgeSwgWCwgWSwgcHJlY2lzaW9uID0gMi41O1xuXHQgICAgZnVuY3Rpb24gZ3JhdGljdWxlKCkge1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHR5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsXG5cdCAgICAgICAgY29vcmRpbmF0ZXM6IGxpbmVzKClcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGxpbmVzKCkge1xuXHQgICAgICByZXR1cm4gZDMucmFuZ2UoTWF0aC5jZWlsKFgwIC8gRFgpICogRFgsIFgxLCBEWCkubWFwKFgpLmNvbmNhdChkMy5yYW5nZShNYXRoLmNlaWwoWTAgLyBEWSkgKiBEWSwgWTEsIERZKS5tYXAoWSkpLmNvbmNhdChkMy5yYW5nZShNYXRoLmNlaWwoeDAgLyBkeCkgKiBkeCwgeDEsIGR4KS5maWx0ZXIoZnVuY3Rpb24oeCkge1xuXHQgICAgICAgIHJldHVybiBhYnMoeCAlIERYKSA+IM61O1xuXHQgICAgICB9KS5tYXAoeCkpLmNvbmNhdChkMy5yYW5nZShNYXRoLmNlaWwoeTAgLyBkeSkgKiBkeSwgeTEsIGR5KS5maWx0ZXIoZnVuY3Rpb24oeSkge1xuXHQgICAgICAgIHJldHVybiBhYnMoeSAlIERZKSA+IM61O1xuXHQgICAgICB9KS5tYXAoeSkpO1xuXHQgICAgfVxuXHQgICAgZ3JhdGljdWxlLmxpbmVzID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICB0eXBlOiBcIkxpbmVTdHJpbmdcIixcblx0ICAgICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuXHQgICAgICAgIH07XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIGdyYXRpY3VsZS5vdXRsaW5lID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG5cdCAgICAgICAgY29vcmRpbmF0ZXM6IFsgWChYMCkuY29uY2F0KFkoWTEpLnNsaWNlKDEpLCBYKFgxKS5yZXZlcnNlKCkuc2xpY2UoMSksIFkoWTApLnJldmVyc2UoKS5zbGljZSgxKSkgXVxuXHQgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIGdyYXRpY3VsZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5taW5vckV4dGVudCgpO1xuXHQgICAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yRXh0ZW50KF8pLm1pbm9yRXh0ZW50KF8pO1xuXHQgICAgfTtcblx0ICAgIGdyYXRpY3VsZS5tYWpvckV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIFgwLCBZMCBdLCBbIFgxLCBZMSBdIF07XG5cdCAgICAgIFgwID0gK19bMF1bMF0sIFgxID0gK19bMV1bMF07XG5cdCAgICAgIFkwID0gK19bMF1bMV0sIFkxID0gK19bMV1bMV07XG5cdCAgICAgIGlmIChYMCA+IFgxKSBfID0gWDAsIFgwID0gWDEsIFgxID0gXztcblx0ICAgICAgaWYgKFkwID4gWTEpIF8gPSBZMCwgWTAgPSBZMSwgWTEgPSBfO1xuXHQgICAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuXHQgICAgfTtcblx0ICAgIGdyYXRpY3VsZS5taW5vckV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIHgwLCB5MCBdLCBbIHgxLCB5MSBdIF07XG5cdCAgICAgIHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF07XG5cdCAgICAgIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV07XG5cdCAgICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcblx0ICAgICAgaWYgKHkwID4geTEpIF8gPSB5MCwgeTAgPSB5MSwgeTEgPSBfO1xuXHQgICAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuXHQgICAgfTtcblx0ICAgIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUubWlub3JTdGVwKCk7XG5cdCAgICAgIHJldHVybiBncmF0aWN1bGUubWFqb3JTdGVwKF8pLm1pbm9yU3RlcChfKTtcblx0ICAgIH07XG5cdCAgICBncmF0aWN1bGUubWFqb3JTdGVwID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIERYLCBEWSBdO1xuXHQgICAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuXHQgICAgICByZXR1cm4gZ3JhdGljdWxlO1xuXHQgICAgfTtcblx0ICAgIGdyYXRpY3VsZS5taW5vclN0ZXAgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgZHgsIGR5IF07XG5cdCAgICAgIGR4ID0gK19bMF0sIGR5ID0gK19bMV07XG5cdCAgICAgIHJldHVybiBncmF0aWN1bGU7XG5cdCAgICB9O1xuXHQgICAgZ3JhdGljdWxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuXHQgICAgICBwcmVjaXNpb24gPSArXztcblx0ICAgICAgeCA9IGQzX2dlb19ncmF0aWN1bGVYKHkwLCB5MSwgOTApO1xuXHQgICAgICB5ID0gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBwcmVjaXNpb24pO1xuXHQgICAgICBYID0gZDNfZ2VvX2dyYXRpY3VsZVgoWTAsIFkxLCA5MCk7XG5cdCAgICAgIFkgPSBkM19nZW9fZ3JhdGljdWxlWShYMCwgWDEsIHByZWNpc2lvbik7XG5cdCAgICAgIHJldHVybiBncmF0aWN1bGU7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGdyYXRpY3VsZS5tYWpvckV4dGVudChbIFsgLTE4MCwgLTkwICsgzrUgXSwgWyAxODAsIDkwIC0gzrUgXSBdKS5taW5vckV4dGVudChbIFsgLTE4MCwgLTgwIC0gzrUgXSwgWyAxODAsIDgwICsgzrUgXSBdKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19ncmF0aWN1bGVYKHkwLCB5MSwgZHkpIHtcblx0ICAgIHZhciB5ID0gZDMucmFuZ2UoeTAsIHkxIC0gzrUsIGR5KS5jb25jYXQoeTEpO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIHkubWFwKGZ1bmN0aW9uKHkpIHtcblx0ICAgICAgICByZXR1cm4gWyB4LCB5IF07XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBkeCkge1xuXHQgICAgdmFyIHggPSBkMy5yYW5nZSh4MCwgeDEgLSDOtSwgZHgpLmNvbmNhdCh4MSk7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oeSkge1xuXHQgICAgICByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkge1xuXHQgICAgICAgIHJldHVybiBbIHgsIHkgXTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zb3VyY2UoZCkge1xuXHQgICAgcmV0dXJuIGQuc291cmNlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190YXJnZXQoZCkge1xuXHQgICAgcmV0dXJuIGQudGFyZ2V0O1xuXHQgIH1cblx0ICBkMy5nZW8uZ3JlYXRBcmMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBzb3VyY2UgPSBkM19zb3VyY2UsIHNvdXJjZV8sIHRhcmdldCA9IGQzX3RhcmdldCwgdGFyZ2V0Xztcblx0ICAgIGZ1bmN0aW9uIGdyZWF0QXJjKCkge1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHR5cGU6IFwiTGluZVN0cmluZ1wiLFxuXHQgICAgICAgIGNvb3JkaW5hdGVzOiBbIHNvdXJjZV8gfHwgc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRhcmdldF8gfHwgdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgXVxuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgZ3JlYXRBcmMuZGlzdGFuY2UgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzLmdlby5kaXN0YW5jZShzb3VyY2VfIHx8IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0YXJnZXRfIHx8IHRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICAgIH07XG5cdCAgICBncmVhdEFyYy5zb3VyY2UgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvdXJjZTtcblx0ICAgICAgc291cmNlID0gXywgc291cmNlXyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBudWxsIDogXztcblx0ICAgICAgcmV0dXJuIGdyZWF0QXJjO1xuXHQgICAgfTtcblx0ICAgIGdyZWF0QXJjLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuXHQgICAgICB0YXJnZXQgPSBfLCB0YXJnZXRfID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IG51bGwgOiBfO1xuXHQgICAgICByZXR1cm4gZ3JlYXRBcmM7XG5cdCAgICB9O1xuXHQgICAgZ3JlYXRBcmMucHJlY2lzaW9uID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZ3JlYXRBcmMgOiAwO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBncmVhdEFyYztcblx0ICB9O1xuXHQgIGQzLmdlby5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKHNvdXJjZSwgdGFyZ2V0KSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX2ludGVycG9sYXRlKHNvdXJjZVswXSAqIGQzX3JhZGlhbnMsIHNvdXJjZVsxXSAqIGQzX3JhZGlhbnMsIHRhcmdldFswXSAqIGQzX3JhZGlhbnMsIHRhcmdldFsxXSAqIGQzX3JhZGlhbnMpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2ludGVycG9sYXRlKHgwLCB5MCwgeDEsIHkxKSB7XG5cdCAgICB2YXIgY3kwID0gTWF0aC5jb3MoeTApLCBzeTAgPSBNYXRoLnNpbih5MCksIGN5MSA9IE1hdGguY29zKHkxKSwgc3kxID0gTWF0aC5zaW4oeTEpLCBreDAgPSBjeTAgKiBNYXRoLmNvcyh4MCksIGt5MCA9IGN5MCAqIE1hdGguc2luKHgwKSwga3gxID0gY3kxICogTWF0aC5jb3MoeDEpLCBreTEgPSBjeTEgKiBNYXRoLnNpbih4MSksIGQgPSAyICogTWF0aC5hc2luKE1hdGguc3FydChkM19oYXZlcnNpbih5MSAtIHkwKSArIGN5MCAqIGN5MSAqIGQzX2hhdmVyc2luKHgxIC0geDApKSksIGsgPSAxIC8gTWF0aC5zaW4oZCk7XG5cdCAgICB2YXIgaW50ZXJwb2xhdGUgPSBkID8gZnVuY3Rpb24odCkge1xuXHQgICAgICB2YXIgQiA9IE1hdGguc2luKHQgKj0gZCkgKiBrLCBBID0gTWF0aC5zaW4oZCAtIHQpICogaywgeCA9IEEgKiBreDAgKyBCICoga3gxLCB5ID0gQSAqIGt5MCArIEIgKiBreTEsIHogPSBBICogc3kwICsgQiAqIHN5MTtcblx0ICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih5LCB4KSAqIGQzX2RlZ3JlZXMsIE1hdGguYXRhbjIoeiwgTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpKSAqIGQzX2RlZ3JlZXMgXTtcblx0ICAgIH0gOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIFsgeDAgKiBkM19kZWdyZWVzLCB5MCAqIGQzX2RlZ3JlZXMgXTtcblx0ICAgIH07XG5cdCAgICBpbnRlcnBvbGF0ZS5kaXN0YW5jZSA9IGQ7XG5cdCAgICByZXR1cm4gaW50ZXJwb2xhdGU7XG5cdCAgfVxuXHQgIGQzLmdlby5sZW5ndGggPSBmdW5jdGlvbihvYmplY3QpIHtcblx0ICAgIGQzX2dlb19sZW5ndGhTdW0gPSAwO1xuXHQgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGQzX2dlb19sZW5ndGgpO1xuXHQgICAgcmV0dXJuIGQzX2dlb19sZW5ndGhTdW07XG5cdCAgfTtcblx0ICB2YXIgZDNfZ2VvX2xlbmd0aFN1bTtcblx0ICB2YXIgZDNfZ2VvX2xlbmd0aCA9IHtcblx0ICAgIHNwaGVyZTogZDNfbm9vcCxcblx0ICAgIHBvaW50OiBkM19ub29wLFxuXHQgICAgbGluZVN0YXJ0OiBkM19nZW9fbGVuZ3RoTGluZVN0YXJ0LFxuXHQgICAgbGluZUVuZDogZDNfbm9vcCxcblx0ICAgIHBvbHlnb25TdGFydDogZDNfbm9vcCxcblx0ICAgIHBvbHlnb25FbmQ6IGQzX25vb3Bcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19sZW5ndGhMaW5lU3RhcnQoKSB7XG5cdCAgICB2YXIgzrswLCBzaW7PhjAsIGNvc8+GMDtcblx0ICAgIGQzX2dlb19sZW5ndGgucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcblx0ICAgICAgzrswID0gzrsgKiBkM19yYWRpYW5zLCBzaW7PhjAgPSBNYXRoLnNpbijPhiAqPSBkM19yYWRpYW5zKSwgY29zz4YwID0gTWF0aC5jb3Moz4YpO1xuXHQgICAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gbmV4dFBvaW50O1xuXHQgICAgfTtcblx0ICAgIGQzX2dlb19sZW5ndGgubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gZDNfZ2VvX2xlbmd0aC5saW5lRW5kID0gZDNfbm9vcDtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiBuZXh0UG9pbnQozrssIM+GKSB7XG5cdCAgICAgIHZhciBzaW7PhiA9IE1hdGguc2luKM+GICo9IGQzX3JhZGlhbnMpLCBjb3PPhiA9IE1hdGguY29zKM+GKSwgdCA9IGFicygozrsgKj0gZDNfcmFkaWFucykgLSDOuzApLCBjb3POlM67ID0gTWF0aC5jb3ModCk7XG5cdCAgICAgIGQzX2dlb19sZW5ndGhTdW0gKz0gTWF0aC5hdGFuMihNYXRoLnNxcnQoKHQgPSBjb3PPhiAqIE1hdGguc2luKHQpKSAqIHQgKyAodCA9IGNvc8+GMCAqIHNpbs+GIC0gc2luz4YwICogY29zz4YgKiBjb3POlM67KSAqIHQpLCBzaW7PhjAgKiBzaW7PhiArIGNvc8+GMCAqIGNvc8+GICogY29zzpTOuyk7XG5cdCAgICAgIM67MCA9IM67LCBzaW7PhjAgPSBzaW7PhiwgY29zz4YwID0gY29zz4Y7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19hemltdXRoYWwoc2NhbGUsIGFuZ2xlKSB7XG5cdCAgICBmdW5jdGlvbiBhemltdXRoYWwozrssIM+GKSB7XG5cdCAgICAgIHZhciBjb3POuyA9IE1hdGguY29zKM67KSwgY29zz4YgPSBNYXRoLmNvcyjPhiksIGsgPSBzY2FsZShjb3POuyAqIGNvc8+GKTtcblx0ICAgICAgcmV0dXJuIFsgayAqIGNvc8+GICogTWF0aC5zaW4ozrspLCBrICogTWF0aC5zaW4oz4YpIF07XG5cdCAgICB9XG5cdCAgICBhemltdXRoYWwuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgICB2YXIgz4EgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSksIGMgPSBhbmdsZSjPgSksIHNpbmMgPSBNYXRoLnNpbihjKSwgY29zYyA9IE1hdGguY29zKGMpO1xuXHQgICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHggKiBzaW5jLCDPgSAqIGNvc2MpLCBNYXRoLmFzaW4oz4EgJiYgeSAqIHNpbmMgLyDPgSkgXTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gYXppbXV0aGFsO1xuXHQgIH1cblx0ICB2YXIgZDNfZ2VvX2F6aW11dGhhbEVxdWFsQXJlYSA9IGQzX2dlb19hemltdXRoYWwoZnVuY3Rpb24oY29zzrtjb3PPhikge1xuXHQgICAgcmV0dXJuIE1hdGguc3FydCgyIC8gKDEgKyBjb3POu2Nvc8+GKSk7XG5cdCAgfSwgZnVuY3Rpb24oz4EpIHtcblx0ICAgIHJldHVybiAyICogTWF0aC5hc2luKM+BIC8gMik7XG5cdCAgfSk7XG5cdCAgKGQzLmdlby5hemltdXRoYWxFcXVhbEFyZWEgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fYXppbXV0aGFsRXF1YWxBcmVhKTtcblx0ICB9KS5yYXcgPSBkM19nZW9fYXppbXV0aGFsRXF1YWxBcmVhO1xuXHQgIHZhciBkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcblx0ICAgIHZhciBjID0gTWF0aC5hY29zKGNvc867Y29zz4YpO1xuXHQgICAgcmV0dXJuIGMgJiYgYyAvIE1hdGguc2luKGMpO1xuXHQgIH0sIGQzX2lkZW50aXR5KTtcblx0ICAoZDMuZ2VvLmF6aW11dGhhbEVxdWlkaXN0YW50ID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50KTtcblx0ICB9KS5yYXcgPSBkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQ7XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NvbmljQ29uZm9ybWFsKM+GMCwgz4YxKSB7XG5cdCAgICB2YXIgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgdCA9IGZ1bmN0aW9uKM+GKSB7XG5cdCAgICAgIHJldHVybiBNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpO1xuXHQgICAgfSwgbiA9IM+GMCA9PT0gz4YxID8gTWF0aC5zaW4oz4YwKSA6IE1hdGgubG9nKGNvc8+GMCAvIE1hdGguY29zKM+GMSkpIC8gTWF0aC5sb2codCjPhjEpIC8gdCjPhjApKSwgRiA9IGNvc8+GMCAqIE1hdGgucG93KHQoz4YwKSwgbikgLyBuO1xuXHQgICAgaWYgKCFuKSByZXR1cm4gZDNfZ2VvX21lcmNhdG9yO1xuXHQgICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcblx0ICAgICAgaWYgKEYgPiAwKSB7XG5cdCAgICAgICAgaWYgKM+GIDwgLWhhbGbPgCArIM61KSDPhiA9IC1oYWxmz4AgKyDOtTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAoz4YgPiBoYWxmz4AgLSDOtSkgz4YgPSBoYWxmz4AgLSDOtTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgz4EgPSBGIC8gTWF0aC5wb3codCjPhiksIG4pO1xuXHQgICAgICByZXR1cm4gWyDPgSAqIE1hdGguc2luKG4gKiDOuyksIEYgLSDPgSAqIE1hdGguY29zKG4gKiDOuykgXTtcblx0ICAgIH1cblx0ICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgICB2YXIgz4EwX3kgPSBGIC0geSwgz4EgPSBkM19zZ24obikgKiBNYXRoLnNxcnQoeCAqIHggKyDPgTBfeSAqIM+BMF95KTtcblx0ICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih4LCDPgTBfeSkgLyBuLCAyICogTWF0aC5hdGFuKE1hdGgucG93KEYgLyDPgSwgMSAvIG4pKSAtIGhhbGbPgCBdO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBmb3J3YXJkO1xuXHQgIH1cblx0ICAoZDMuZ2VvLmNvbmljQ29uZm9ybWFsID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX2NvbmljKGQzX2dlb19jb25pY0NvbmZvcm1hbCk7XG5cdCAgfSkucmF3ID0gZDNfZ2VvX2NvbmljQ29uZm9ybWFsO1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19jb25pY0VxdWlkaXN0YW50KM+GMCwgz4YxKSB7XG5cdCAgICB2YXIgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgbiA9IM+GMCA9PT0gz4YxID8gTWF0aC5zaW4oz4YwKSA6IChjb3PPhjAgLSBNYXRoLmNvcyjPhjEpKSAvICjPhjEgLSDPhjApLCBHID0gY29zz4YwIC8gbiArIM+GMDtcblx0ICAgIGlmIChhYnMobikgPCDOtSkgcmV0dXJuIGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG5cdCAgICBmdW5jdGlvbiBmb3J3YXJkKM67LCDPhikge1xuXHQgICAgICB2YXIgz4EgPSBHIC0gz4Y7XG5cdCAgICAgIHJldHVybiBbIM+BICogTWF0aC5zaW4obiAqIM67KSwgRyAtIM+BICogTWF0aC5jb3MobiAqIM67KSBdO1xuXHQgICAgfVxuXHQgICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIHZhciDPgTBfeSA9IEcgLSB5O1xuXHQgICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIEcgLSBkM19zZ24obikgKiBNYXRoLnNxcnQoeCAqIHggKyDPgTBfeSAqIM+BMF95KSBdO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBmb3J3YXJkO1xuXHQgIH1cblx0ICAoZDMuZ2VvLmNvbmljRXF1aWRpc3RhbnQgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19nZW9fY29uaWMoZDNfZ2VvX2NvbmljRXF1aWRpc3RhbnQpO1xuXHQgIH0pLnJhdyA9IGQzX2dlb19jb25pY0VxdWlkaXN0YW50O1xuXHQgIHZhciBkM19nZW9fZ25vbW9uaWMgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcblx0ICAgIHJldHVybiAxIC8gY29zzrtjb3PPhjtcblx0ICB9LCBNYXRoLmF0YW4pO1xuXHQgIChkMy5nZW8uZ25vbW9uaWMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fZ25vbW9uaWMpO1xuXHQgIH0pLnJhdyA9IGQzX2dlb19nbm9tb25pYztcblx0ICBmdW5jdGlvbiBkM19nZW9fbWVyY2F0b3IozrssIM+GKSB7XG5cdCAgICByZXR1cm4gWyDOuywgTWF0aC5sb2coTWF0aC50YW4oz4AgLyA0ICsgz4YgLyAyKSkgXTtcblx0ICB9XG5cdCAgZDNfZ2VvX21lcmNhdG9yLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgIHJldHVybiBbIHgsIDIgKiBNYXRoLmF0YW4oTWF0aC5leHAoeSkpIC0gaGFsZs+AIF07XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uKHByb2plY3QpIHtcblx0ICAgIHZhciBtID0gZDNfZ2VvX3Byb2plY3Rpb24ocHJvamVjdCksIHNjYWxlID0gbS5zY2FsZSwgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsIGNsaXBFeHRlbnQgPSBtLmNsaXBFeHRlbnQsIGNsaXBBdXRvO1xuXHQgICAgbS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgdiA9IHNjYWxlLmFwcGx5KG0sIGFyZ3VtZW50cyk7XG5cdCAgICAgIHJldHVybiB2ID09PSBtID8gY2xpcEF1dG8gPyBtLmNsaXBFeHRlbnQobnVsbCkgOiBtIDogdjtcblx0ICAgIH07XG5cdCAgICBtLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgdiA9IHRyYW5zbGF0ZS5hcHBseShtLCBhcmd1bWVudHMpO1xuXHQgICAgICByZXR1cm4gdiA9PT0gbSA/IGNsaXBBdXRvID8gbS5jbGlwRXh0ZW50KG51bGwpIDogbSA6IHY7XG5cdCAgICB9O1xuXHQgICAgbS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICB2YXIgdiA9IGNsaXBFeHRlbnQuYXBwbHkobSwgYXJndW1lbnRzKTtcblx0ICAgICAgaWYgKHYgPT09IG0pIHtcblx0ICAgICAgICBpZiAoY2xpcEF1dG8gPSBfID09IG51bGwpIHtcblx0ICAgICAgICAgIHZhciBrID0gz4AgKiBzY2FsZSgpLCB0ID0gdHJhbnNsYXRlKCk7XG5cdCAgICAgICAgICBjbGlwRXh0ZW50KFsgWyB0WzBdIC0gaywgdFsxXSAtIGsgXSwgWyB0WzBdICsgaywgdFsxXSArIGsgXSBdKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAoY2xpcEF1dG8pIHtcblx0ICAgICAgICB2ID0gbnVsbDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdjtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gbS5jbGlwRXh0ZW50KG51bGwpO1xuXHQgIH1cblx0ICAoZDMuZ2VvLm1lcmNhdG9yID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihkM19nZW9fbWVyY2F0b3IpO1xuXHQgIH0pLnJhdyA9IGQzX2dlb19tZXJjYXRvcjtcblx0ICB2YXIgZDNfZ2VvX29ydGhvZ3JhcGhpYyA9IGQzX2dlb19hemltdXRoYWwoZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gMTtcblx0ICB9LCBNYXRoLmFzaW4pO1xuXHQgIChkMy5nZW8ub3J0aG9ncmFwaGljID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX29ydGhvZ3JhcGhpYyk7XG5cdCAgfSkucmF3ID0gZDNfZ2VvX29ydGhvZ3JhcGhpYztcblx0ICB2YXIgZDNfZ2VvX3N0ZXJlb2dyYXBoaWMgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcblx0ICAgIHJldHVybiAxIC8gKDEgKyBjb3POu2Nvc8+GKTtcblx0ICB9LCBmdW5jdGlvbijPgSkge1xuXHQgICAgcmV0dXJuIDIgKiBNYXRoLmF0YW4oz4EpO1xuXHQgIH0pO1xuXHQgIChkMy5nZW8uc3RlcmVvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19zdGVyZW9ncmFwaGljKTtcblx0ICB9KS5yYXcgPSBkM19nZW9fc3RlcmVvZ3JhcGhpYztcblx0ICBmdW5jdGlvbiBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yKM67LCDPhikge1xuXHQgICAgcmV0dXJuIFsgTWF0aC5sb2coTWF0aC50YW4oz4AgLyA0ICsgz4YgLyAyKSksIC3OuyBdO1xuXHQgIH1cblx0ICBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgIHJldHVybiBbIC15LCAyICogTWF0aC5hdGFuKE1hdGguZXhwKHgpKSAtIGhhbGbPgCBdO1xuXHQgIH07XG5cdCAgKGQzLmdlby50cmFuc3ZlcnNlTWVyY2F0b3IgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBwcm9qZWN0aW9uID0gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yKSwgY2VudGVyID0gcHJvamVjdGlvbi5jZW50ZXIsIHJvdGF0ZSA9IHByb2plY3Rpb24ucm90YXRlO1xuXHQgICAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIHJldHVybiBfID8gY2VudGVyKFsgLV9bMV0sIF9bMF0gXSkgOiAoXyA9IGNlbnRlcigpLCBbIF9bMV0sIC1fWzBdIF0pO1xuXHQgICAgfTtcblx0ICAgIHByb2plY3Rpb24ucm90YXRlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICByZXR1cm4gXyA/IHJvdGF0ZShbIF9bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwIF0pIDogKF8gPSByb3RhdGUoKSwgXG5cdCAgICAgIFsgX1swXSwgX1sxXSwgX1syXSAtIDkwIF0pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiByb3RhdGUoWyAwLCAwLCA5MCBdKTtcblx0ICB9KS5yYXcgPSBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yO1xuXHQgIGQzLmdlb20gPSB7fTtcblx0ICBmdW5jdGlvbiBkM19nZW9tX3BvaW50WChkKSB7XG5cdCAgICByZXR1cm4gZFswXTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV9wb2ludFkoZCkge1xuXHQgICAgcmV0dXJuIGRbMV07XG5cdCAgfVxuXHQgIGQzLmdlb20uaHVsbCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG5cdCAgICB2YXIgeCA9IGQzX2dlb21fcG9pbnRYLCB5ID0gZDNfZ2VvbV9wb2ludFk7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGh1bGwodmVydGljZXMpO1xuXHQgICAgZnVuY3Rpb24gaHVsbChkYXRhKSB7XG5cdCAgICAgIGlmIChkYXRhLmxlbmd0aCA8IDMpIHJldHVybiBbXTtcblx0ICAgICAgdmFyIGZ4ID0gZDNfZnVuY3Rvcih4KSwgZnkgPSBkM19mdW5jdG9yKHkpLCBpLCBuID0gZGF0YS5sZW5ndGgsIHBvaW50cyA9IFtdLCBmbGlwcGVkUG9pbnRzID0gW107XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0ICAgICAgICBwb2ludHMucHVzaChbICtmeC5jYWxsKHRoaXMsIGRhdGFbaV0sIGkpLCArZnkuY2FsbCh0aGlzLCBkYXRhW2ldLCBpKSwgaSBdKTtcblx0ICAgICAgfVxuXHQgICAgICBwb2ludHMuc29ydChkM19nZW9tX2h1bGxPcmRlcik7XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGZsaXBwZWRQb2ludHMucHVzaChbIHBvaW50c1tpXVswXSwgLXBvaW50c1tpXVsxXSBdKTtcblx0ICAgICAgdmFyIHVwcGVyID0gZDNfZ2VvbV9odWxsVXBwZXIocG9pbnRzKSwgbG93ZXIgPSBkM19nZW9tX2h1bGxVcHBlcihmbGlwcGVkUG9pbnRzKTtcblx0ICAgICAgdmFyIHNraXBMZWZ0ID0gbG93ZXJbMF0gPT09IHVwcGVyWzBdLCBza2lwUmlnaHQgPSBsb3dlcltsb3dlci5sZW5ndGggLSAxXSA9PT0gdXBwZXJbdXBwZXIubGVuZ3RoIC0gMV0sIHBvbHlnb24gPSBbXTtcblx0ICAgICAgZm9yIChpID0gdXBwZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHBvbHlnb24ucHVzaChkYXRhW3BvaW50c1t1cHBlcltpXV1bMl1dKTtcblx0ICAgICAgZm9yIChpID0gK3NraXBMZWZ0OyBpIDwgbG93ZXIubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIHBvbHlnb24ucHVzaChkYXRhW3BvaW50c1tsb3dlcltpXV1bMl1dKTtcblx0ICAgICAgcmV0dXJuIHBvbHlnb247XG5cdCAgICB9XG5cdCAgICBodWxsLnggPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSBfLCBodWxsKSA6IHg7XG5cdCAgICB9O1xuXHQgICAgaHVsbC55ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gXywgaHVsbCkgOiB5O1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBodWxsO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV9odWxsVXBwZXIocG9pbnRzKSB7XG5cdCAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsIGh1bGwgPSBbIDAsIDEgXSwgaHMgPSAyO1xuXHQgICAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyBpKyspIHtcblx0ICAgICAgd2hpbGUgKGhzID4gMSAmJiBkM19jcm9zczJkKHBvaW50c1todWxsW2hzIC0gMl1dLCBwb2ludHNbaHVsbFtocyAtIDFdXSwgcG9pbnRzW2ldKSA8PSAwKSAtLWhzO1xuXHQgICAgICBodWxsW2hzKytdID0gaTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBodWxsLnNsaWNlKDAsIGhzKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV9odWxsT3JkZXIoYSwgYikge1xuXHQgICAgcmV0dXJuIGFbMF0gLSBiWzBdIHx8IGFbMV0gLSBiWzFdO1xuXHQgIH1cblx0ICBkMy5nZW9tLnBvbHlnb24gPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuXHQgICAgZDNfc3ViY2xhc3MoY29vcmRpbmF0ZXMsIGQzX2dlb21fcG9seWdvblByb3RvdHlwZSk7XG5cdCAgICByZXR1cm4gY29vcmRpbmF0ZXM7XG5cdCAgfTtcblx0ICB2YXIgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlID0gZDMuZ2VvbS5wb2x5Z29uLnByb3RvdHlwZSA9IFtdO1xuXHQgIGQzX2dlb21fcG9seWdvblByb3RvdHlwZS5hcmVhID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIGEsIGIgPSB0aGlzW24gLSAxXSwgYXJlYSA9IDA7XG5cdCAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICBhID0gYjtcblx0ICAgICAgYiA9IHRoaXNbaV07XG5cdCAgICAgIGFyZWEgKz0gYVsxXSAqIGJbMF0gLSBhWzBdICogYlsxXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBhcmVhICogLjU7XG5cdCAgfTtcblx0ICBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUuY2VudHJvaWQgPSBmdW5jdGlvbihrKSB7XG5cdCAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIHggPSAwLCB5ID0gMCwgYSwgYiA9IHRoaXNbbiAtIDFdLCBjO1xuXHQgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSBrID0gLTEgLyAoNiAqIHRoaXMuYXJlYSgpKTtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgIGEgPSBiO1xuXHQgICAgICBiID0gdGhpc1tpXTtcblx0ICAgICAgYyA9IGFbMF0gKiBiWzFdIC0gYlswXSAqIGFbMV07XG5cdCAgICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG5cdCAgICAgIHkgKz0gKGFbMV0gKyBiWzFdKSAqIGM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gWyB4ICogaywgeSAqIGsgXTtcblx0ICB9O1xuXHQgIGQzX2dlb21fcG9seWdvblByb3RvdHlwZS5jbGlwID0gZnVuY3Rpb24oc3ViamVjdCkge1xuXHQgICAgdmFyIGlucHV0LCBjbG9zZWQgPSBkM19nZW9tX3BvbHlnb25DbG9zZWQoc3ViamVjdCksIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoIC0gZDNfZ2VvbV9wb2x5Z29uQ2xvc2VkKHRoaXMpLCBqLCBtLCBhID0gdGhpc1tuIC0gMV0sIGIsIGMsIGQ7XG5cdCAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICBpbnB1dCA9IHN1YmplY3Quc2xpY2UoKTtcblx0ICAgICAgc3ViamVjdC5sZW5ndGggPSAwO1xuXHQgICAgICBiID0gdGhpc1tpXTtcblx0ICAgICAgYyA9IGlucHV0WyhtID0gaW5wdXQubGVuZ3RoIC0gY2xvc2VkKSAtIDFdO1xuXHQgICAgICBqID0gLTE7XG5cdCAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG5cdCAgICAgICAgZCA9IGlucHV0W2pdO1xuXHQgICAgICAgIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoZCwgYSwgYikpIHtcblx0ICAgICAgICAgIGlmICghZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKGMsIGEsIGIpKSB7XG5cdCAgICAgICAgICAgIHN1YmplY3QucHVzaChkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoYywgZCwgYSwgYikpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgc3ViamVjdC5wdXNoKGQpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKGMsIGEsIGIpKSB7XG5cdCAgICAgICAgICBzdWJqZWN0LnB1c2goZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYyA9IGQ7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGNsb3NlZCkgc3ViamVjdC5wdXNoKHN1YmplY3RbMF0pO1xuXHQgICAgICBhID0gYjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBzdWJqZWN0O1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKHAsIGEsIGIpIHtcblx0ICAgIHJldHVybiAoYlswXSAtIGFbMF0pICogKHBbMV0gLSBhWzFdKSA8IChiWzFdIC0gYVsxXSkgKiAocFswXSAtIGFbMF0pO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoYywgZCwgYSwgYikge1xuXHQgICAgdmFyIHgxID0gY1swXSwgeDMgPSBhWzBdLCB4MjEgPSBkWzBdIC0geDEsIHg0MyA9IGJbMF0gLSB4MywgeTEgPSBjWzFdLCB5MyA9IGFbMV0sIHkyMSA9IGRbMV0gLSB5MSwgeTQzID0gYlsxXSAtIHkzLCB1YSA9ICh4NDMgKiAoeTEgLSB5MykgLSB5NDMgKiAoeDEgLSB4MykpIC8gKHk0MyAqIHgyMSAtIHg0MyAqIHkyMSk7XG5cdCAgICByZXR1cm4gWyB4MSArIHVhICogeDIxLCB5MSArIHVhICogeTIxIF07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fcG9seWdvbkNsb3NlZChjb29yZGluYXRlcykge1xuXHQgICAgdmFyIGEgPSBjb29yZGluYXRlc1swXSwgYiA9IGNvb3JkaW5hdGVzW2Nvb3JkaW5hdGVzLmxlbmd0aCAtIDFdO1xuXHQgICAgcmV0dXJuICEoYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV0pO1xuXHQgIH1cblx0ICB2YXIgZDNfZ2VvbV92b3Jvbm9pRWRnZXMsIGQzX2dlb21fdm9yb25vaUNlbGxzLCBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLCBkM19nZW9tX3Zvcm9ub2lCZWFjaFBvb2wgPSBbXSwgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUsIGQzX2dlb21fdm9yb25vaUNpcmNsZXMsIGQzX2dlb21fdm9yb25vaUNpcmNsZVBvb2wgPSBbXTtcblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lCZWFjaCgpIHtcblx0ICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZSh0aGlzKTtcblx0ICAgIHRoaXMuZWRnZSA9IHRoaXMuc2l0ZSA9IHRoaXMuY2lyY2xlID0gbnVsbDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2goc2l0ZSkge1xuXHQgICAgdmFyIGJlYWNoID0gZDNfZ2VvbV92b3Jvbm9pQmVhY2hQb29sLnBvcCgpIHx8IG5ldyBkM19nZW9tX3Zvcm9ub2lCZWFjaCgpO1xuXHQgICAgYmVhY2guc2l0ZSA9IHNpdGU7XG5cdCAgICByZXR1cm4gYmVhY2g7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGJlYWNoKSB7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUoYmVhY2gpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcy5yZW1vdmUoYmVhY2gpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hQb29sLnB1c2goYmVhY2gpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tOb2RlKGJlYWNoKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goYmVhY2gpIHtcblx0ICAgIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsIHggPSBjaXJjbGUueCwgeSA9IGNpcmNsZS5jeSwgdmVydGV4ID0ge1xuXHQgICAgICB4OiB4LFxuXHQgICAgICB5OiB5XG5cdCAgICB9LCBwcmV2aW91cyA9IGJlYWNoLlAsIG5leHQgPSBiZWFjaC5OLCBkaXNhcHBlYXJpbmcgPSBbIGJlYWNoIF07XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaChiZWFjaCk7XG5cdCAgICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuXHQgICAgd2hpbGUgKGxBcmMuY2lyY2xlICYmIGFicyh4IC0gbEFyYy5jaXJjbGUueCkgPCDOtSAmJiBhYnMoeSAtIGxBcmMuY2lyY2xlLmN5KSA8IM61KSB7XG5cdCAgICAgIHByZXZpb3VzID0gbEFyYy5QO1xuXHQgICAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQmVhY2gobEFyYyk7XG5cdCAgICAgIGxBcmMgPSBwcmV2aW91cztcblx0ICAgIH1cblx0ICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGxBcmMpO1xuXHQgICAgdmFyIHJBcmMgPSBuZXh0O1xuXHQgICAgd2hpbGUgKHJBcmMuY2lyY2xlICYmIGFicyh4IC0gckFyYy5jaXJjbGUueCkgPCDOtSAmJiBhYnMoeSAtIHJBcmMuY2lyY2xlLmN5KSA8IM61KSB7XG5cdCAgICAgIG5leHQgPSByQXJjLk47XG5cdCAgICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuXHQgICAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaChyQXJjKTtcblx0ICAgICAgckFyYyA9IG5leHQ7XG5cdCAgICB9XG5cdCAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShyQXJjKTtcblx0ICAgIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsIGlBcmM7XG5cdCAgICBmb3IgKGlBcmMgPSAxOyBpQXJjIDwgbkFyY3M7ICsraUFyYykge1xuXHQgICAgICByQXJjID0gZGlzYXBwZWFyaW5nW2lBcmNdO1xuXHQgICAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxBcmMuc2l0ZSwgckFyYy5zaXRlLCB2ZXJ0ZXgpO1xuXHQgICAgfVxuXHQgICAgbEFyYyA9IGRpc2FwcGVhcmluZ1swXTtcblx0ICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcblx0ICAgIHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUobEFyYyk7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUockFyYyk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUFkZEJlYWNoKHNpdGUpIHtcblx0ICAgIHZhciB4ID0gc2l0ZS54LCBkaXJlY3RyaXggPSBzaXRlLnksIGxBcmMsIHJBcmMsIGR4bCwgZHhyLCBub2RlID0gZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcy5fO1xuXHQgICAgd2hpbGUgKG5vZGUpIHtcblx0ICAgICAgZHhsID0gZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KSAtIHg7XG5cdCAgICAgIGlmIChkeGwgPiDOtSkgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG5cdCAgICAgICAgZHhyID0geCAtIGQzX2dlb21fdm9yb25vaVJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuXHQgICAgICAgIGlmIChkeHIgPiDOtSkge1xuXHQgICAgICAgICAgaWYgKCFub2RlLlIpIHtcblx0ICAgICAgICAgICAgbEFyYyA9IG5vZGU7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgbm9kZSA9IG5vZGUuUjtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKGR4bCA+IC3OtSkge1xuXHQgICAgICAgICAgICBsQXJjID0gbm9kZS5QO1xuXHQgICAgICAgICAgICByQXJjID0gbm9kZTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoZHhyID4gLc61KSB7XG5cdCAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuXHQgICAgICAgICAgICByQXJjID0gbm9kZS5OO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICB2YXIgbmV3QXJjID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2goc2l0ZSk7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuXHQgICAgaWYgKCFsQXJjICYmICFyQXJjKSByZXR1cm47XG5cdCAgICBpZiAobEFyYyA9PT0gckFyYykge1xuXHQgICAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG5cdCAgICAgIHJBcmMgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVCZWFjaChsQXJjLnNpdGUpO1xuXHQgICAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLmluc2VydChuZXdBcmMsIHJBcmMpO1xuXHQgICAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG5cdCAgICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShsQXJjKTtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKHJBcmMpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBpZiAoIXJBcmMpIHtcblx0ICAgICAgbmV3QXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUockFyYyk7XG5cdCAgICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsIGF4ID0gbFNpdGUueCwgYXkgPSBsU2l0ZS55LCBieCA9IHNpdGUueCAtIGF4LCBieSA9IHNpdGUueSAtIGF5LCByU2l0ZSA9IHJBcmMuc2l0ZSwgY3ggPSByU2l0ZS54IC0gYXgsIGN5ID0gclNpdGUueSAtIGF5LCBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksIGhiID0gYnggKiBieCArIGJ5ICogYnksIGhjID0gY3ggKiBjeCArIGN5ICogY3ksIHZlcnRleCA9IHtcblx0ICAgICAgeDogKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCxcblx0ICAgICAgeTogKGJ4ICogaGMgLSBjeCAqIGhiKSAvIGQgKyBheVxuXHQgICAgfTtcblx0ICAgIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQockFyYy5lZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCk7XG5cdCAgICBuZXdBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobFNpdGUsIHNpdGUsIG51bGwsIHZlcnRleCk7XG5cdCAgICByQXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGxBcmMpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKHJBcmMpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lMZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuXHQgICAgdmFyIHNpdGUgPSBhcmMuc2l0ZSwgcmZvY3ggPSBzaXRlLngsIHJmb2N5ID0gc2l0ZS55LCBwYnkyID0gcmZvY3kgLSBkaXJlY3RyaXg7XG5cdCAgICBpZiAoIXBieTIpIHJldHVybiByZm9jeDtcblx0ICAgIHZhciBsQXJjID0gYXJjLlA7XG5cdCAgICBpZiAoIWxBcmMpIHJldHVybiAtSW5maW5pdHk7XG5cdCAgICBzaXRlID0gbEFyYy5zaXRlO1xuXHQgICAgdmFyIGxmb2N4ID0gc2l0ZS54LCBsZm9jeSA9IHNpdGUueSwgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcblx0ICAgIGlmICghcGxieTIpIHJldHVybiBsZm9jeDtcblx0ICAgIHZhciBobCA9IGxmb2N4IC0gcmZvY3gsIGFieTIgPSAxIC8gcGJ5MiAtIDEgLyBwbGJ5MiwgYiA9IGhsIC8gcGxieTI7XG5cdCAgICBpZiAoYWJ5MikgcmV0dXJuICgtYiArIE1hdGguc3FydChiICogYiAtIDIgKiBhYnkyICogKGhsICogaGwgLyAoLTIgKiBwbGJ5MikgLSBsZm9jeSArIHBsYnkyIC8gMiArIHJmb2N5IC0gcGJ5MiAvIDIpKSkgLyBhYnkyICsgcmZvY3g7XG5cdCAgICByZXR1cm4gKHJmb2N4ICsgbGZvY3gpIC8gMjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG5cdCAgICB2YXIgckFyYyA9IGFyYy5OO1xuXHQgICAgaWYgKHJBcmMpIHJldHVybiBkM19nZW9tX3Zvcm9ub2lMZWZ0QnJlYWtQb2ludChyQXJjLCBkaXJlY3RyaXgpO1xuXHQgICAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcblx0ICAgIHJldHVybiBzaXRlLnkgPT09IGRpcmVjdHJpeCA/IHNpdGUueCA6IEluZmluaXR5O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDZWxsKHNpdGUpIHtcblx0ICAgIHRoaXMuc2l0ZSA9IHNpdGU7XG5cdCAgICB0aGlzLmVkZ2VzID0gW107XG5cdCAgfVxuXHQgIGQzX2dlb21fdm9yb25vaUNlbGwucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBoYWxmRWRnZXMgPSB0aGlzLmVkZ2VzLCBpSGFsZkVkZ2UgPSBoYWxmRWRnZXMubGVuZ3RoLCBlZGdlO1xuXHQgICAgd2hpbGUgKGlIYWxmRWRnZS0tKSB7XG5cdCAgICAgIGVkZ2UgPSBoYWxmRWRnZXNbaUhhbGZFZGdlXS5lZGdlO1xuXHQgICAgICBpZiAoIWVkZ2UuYiB8fCAhZWRnZS5hKSBoYWxmRWRnZXMuc3BsaWNlKGlIYWxmRWRnZSwgMSk7XG5cdCAgICB9XG5cdCAgICBoYWxmRWRnZXMuc29ydChkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZU9yZGVyKTtcblx0ICAgIHJldHVybiBoYWxmRWRnZXMubGVuZ3RoO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2xvc2VDZWxscyhleHRlbnQpIHtcblx0ICAgIHZhciB4MCA9IGV4dGVudFswXVswXSwgeDEgPSBleHRlbnRbMV1bMF0sIHkwID0gZXh0ZW50WzBdWzFdLCB5MSA9IGV4dGVudFsxXVsxXSwgeDIsIHkyLCB4MywgeTMsIGNlbGxzID0gZDNfZ2VvbV92b3Jvbm9pQ2VsbHMsIGlDZWxsID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBpSGFsZkVkZ2UsIGhhbGZFZGdlcywgbkhhbGZFZGdlcywgc3RhcnQsIGVuZDtcblx0ICAgIHdoaWxlIChpQ2VsbC0tKSB7XG5cdCAgICAgIGNlbGwgPSBjZWxsc1tpQ2VsbF07XG5cdCAgICAgIGlmICghY2VsbCB8fCAhY2VsbC5wcmVwYXJlKCkpIGNvbnRpbnVlO1xuXHQgICAgICBoYWxmRWRnZXMgPSBjZWxsLmVkZ2VzO1xuXHQgICAgICBuSGFsZkVkZ2VzID0gaGFsZkVkZ2VzLmxlbmd0aDtcblx0ICAgICAgaUhhbGZFZGdlID0gMDtcblx0ICAgICAgd2hpbGUgKGlIYWxmRWRnZSA8IG5IYWxmRWRnZXMpIHtcblx0ICAgICAgICBlbmQgPSBoYWxmRWRnZXNbaUhhbGZFZGdlXS5lbmQoKSwgeDMgPSBlbmQueCwgeTMgPSBlbmQueTtcblx0ICAgICAgICBzdGFydCA9IGhhbGZFZGdlc1srK2lIYWxmRWRnZSAlIG5IYWxmRWRnZXNdLnN0YXJ0KCksIHgyID0gc3RhcnQueCwgeTIgPSBzdGFydC55O1xuXHQgICAgICAgIGlmIChhYnMoeDMgLSB4MikgPiDOtSB8fCBhYnMoeTMgLSB5MikgPiDOtSkge1xuXHQgICAgICAgICAgaGFsZkVkZ2VzLnNwbGljZShpSGFsZkVkZ2UsIDAsIG5ldyBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZShkM19nZW9tX3Zvcm9ub2lDcmVhdGVCb3JkZXJFZGdlKGNlbGwuc2l0ZSwgZW5kLCBhYnMoeDMgLSB4MCkgPCDOtSAmJiB5MSAtIHkzID4gzrUgPyB7XG5cdCAgICAgICAgICAgIHg6IHgwLFxuXHQgICAgICAgICAgICB5OiBhYnMoeDIgLSB4MCkgPCDOtSA/IHkyIDogeTFcblx0ICAgICAgICAgIH0gOiBhYnMoeTMgLSB5MSkgPCDOtSAmJiB4MSAtIHgzID4gzrUgPyB7XG5cdCAgICAgICAgICAgIHg6IGFicyh5MiAtIHkxKSA8IM61ID8geDIgOiB4MSxcblx0ICAgICAgICAgICAgeTogeTFcblx0ICAgICAgICAgIH0gOiBhYnMoeDMgLSB4MSkgPCDOtSAmJiB5MyAtIHkwID4gzrUgPyB7XG5cdCAgICAgICAgICAgIHg6IHgxLFxuXHQgICAgICAgICAgICB5OiBhYnMoeDIgLSB4MSkgPCDOtSA/IHkyIDogeTBcblx0ICAgICAgICAgIH0gOiBhYnMoeTMgLSB5MCkgPCDOtSAmJiB4MyAtIHgwID4gzrUgPyB7XG5cdCAgICAgICAgICAgIHg6IGFicyh5MiAtIHkwKSA8IM61ID8geDIgOiB4MCxcblx0ICAgICAgICAgICAgeTogeTBcblx0ICAgICAgICAgIH0gOiBudWxsKSwgY2VsbC5zaXRlLCBudWxsKSk7XG5cdCAgICAgICAgICArK25IYWxmRWRnZXM7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUhhbGZFZGdlT3JkZXIoYSwgYikge1xuXHQgICAgcmV0dXJuIGIuYW5nbGUgLSBhLmFuZ2xlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDaXJjbGUoKSB7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUodGhpcyk7XG5cdCAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLmFyYyA9IHRoaXMuc2l0ZSA9IHRoaXMuY3kgPSBudWxsO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUoYXJjKSB7XG5cdCAgICB2YXIgbEFyYyA9IGFyYy5QLCByQXJjID0gYXJjLk47XG5cdCAgICBpZiAoIWxBcmMgfHwgIXJBcmMpIHJldHVybjtcblx0ICAgIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSwgY1NpdGUgPSBhcmMuc2l0ZSwgclNpdGUgPSByQXJjLnNpdGU7XG5cdCAgICBpZiAobFNpdGUgPT09IHJTaXRlKSByZXR1cm47XG5cdCAgICB2YXIgYnggPSBjU2l0ZS54LCBieSA9IGNTaXRlLnksIGF4ID0gbFNpdGUueCAtIGJ4LCBheSA9IGxTaXRlLnkgLSBieSwgY3ggPSByU2l0ZS54IC0gYngsIGN5ID0gclNpdGUueSAtIGJ5O1xuXHQgICAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcblx0ICAgIGlmIChkID49IC3OtTIpIHJldHVybjtcblx0ICAgIHZhciBoYSA9IGF4ICogYXggKyBheSAqIGF5LCBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LCB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsIHkgPSAoYXggKiBoYyAtIGN4ICogaGEpIC8gZCwgY3kgPSB5ICsgYnk7XG5cdCAgICB2YXIgY2lyY2xlID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbC5wb3AoKSB8fCBuZXcgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlKCk7XG5cdCAgICBjaXJjbGUuYXJjID0gYXJjO1xuXHQgICAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcblx0ICAgIGNpcmNsZS54ID0geCArIGJ4O1xuXHQgICAgY2lyY2xlLnkgPSBjeSArIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcblx0ICAgIGNpcmNsZS5jeSA9IGN5O1xuXHQgICAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblx0ICAgIHZhciBiZWZvcmUgPSBudWxsLCBub2RlID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcy5fO1xuXHQgICAgd2hpbGUgKG5vZGUpIHtcblx0ICAgICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSB7XG5cdCAgICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG5cdCAgICAgICAgICBiZWZvcmUgPSBub2RlLlA7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKG5vZGUuUikgbm9kZSA9IG5vZGUuUjsgZWxzZSB7XG5cdCAgICAgICAgICBiZWZvcmUgPSBub2RlO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG5cdCAgICBpZiAoIWJlZm9yZSkgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUgPSBjaXJjbGU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShhcmMpIHtcblx0ICAgIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuXHQgICAgaWYgKGNpcmNsZSkge1xuXHQgICAgICBpZiAoIWNpcmNsZS5QKSBkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZSA9IGNpcmNsZS5OO1xuXHQgICAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuXHQgICAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tOb2RlKGNpcmNsZSk7XG5cdCAgICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDbGlwRWRnZXMoZXh0ZW50KSB7XG5cdCAgICB2YXIgZWRnZXMgPSBkM19nZW9tX3Zvcm9ub2lFZGdlcywgY2xpcCA9IGQzX2dlb21fY2xpcExpbmUoZXh0ZW50WzBdWzBdLCBleHRlbnRbMF1bMV0sIGV4dGVudFsxXVswXSwgZXh0ZW50WzFdWzFdKSwgaSA9IGVkZ2VzLmxlbmd0aCwgZTtcblx0ICAgIHdoaWxlIChpLS0pIHtcblx0ICAgICAgZSA9IGVkZ2VzW2ldO1xuXHQgICAgICBpZiAoIWQzX2dlb21fdm9yb25vaUNvbm5lY3RFZGdlKGUsIGV4dGVudCkgfHwgIWNsaXAoZSkgfHwgYWJzKGUuYS54IC0gZS5iLngpIDwgzrUgJiYgYWJzKGUuYS55IC0gZS5iLnkpIDwgzrUpIHtcblx0ICAgICAgICBlLmEgPSBlLmIgPSBudWxsO1xuXHQgICAgICAgIGVkZ2VzLnNwbGljZShpLCAxKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZShlZGdlLCBleHRlbnQpIHtcblx0ICAgIHZhciB2YiA9IGVkZ2UuYjtcblx0ICAgIGlmICh2YikgcmV0dXJuIHRydWU7XG5cdCAgICB2YXIgdmEgPSBlZGdlLmEsIHgwID0gZXh0ZW50WzBdWzBdLCB4MSA9IGV4dGVudFsxXVswXSwgeTAgPSBleHRlbnRbMF1bMV0sIHkxID0gZXh0ZW50WzFdWzFdLCBsU2l0ZSA9IGVkZ2UubCwgclNpdGUgPSBlZGdlLnIsIGx4ID0gbFNpdGUueCwgbHkgPSBsU2l0ZS55LCByeCA9IHJTaXRlLngsIHJ5ID0gclNpdGUueSwgZnggPSAobHggKyByeCkgLyAyLCBmeSA9IChseSArIHJ5KSAvIDIsIGZtLCBmYjtcblx0ICAgIGlmIChyeSA9PT0gbHkpIHtcblx0ICAgICAgaWYgKGZ4IDwgeDAgfHwgZnggPj0geDEpIHJldHVybjtcblx0ICAgICAgaWYgKGx4ID4gcngpIHtcblx0ICAgICAgICBpZiAoIXZhKSB2YSA9IHtcblx0ICAgICAgICAgIHg6IGZ4LFxuXHQgICAgICAgICAgeTogeTBcblx0ICAgICAgICB9OyBlbHNlIGlmICh2YS55ID49IHkxKSByZXR1cm47XG5cdCAgICAgICAgdmIgPSB7XG5cdCAgICAgICAgICB4OiBmeCxcblx0ICAgICAgICAgIHk6IHkxXG5cdCAgICAgICAgfTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAoIXZhKSB2YSA9IHtcblx0ICAgICAgICAgIHg6IGZ4LFxuXHQgICAgICAgICAgeTogeTFcblx0ICAgICAgICB9OyBlbHNlIGlmICh2YS55IDwgeTApIHJldHVybjtcblx0ICAgICAgICB2YiA9IHtcblx0ICAgICAgICAgIHg6IGZ4LFxuXHQgICAgICAgICAgeTogeTBcblx0ICAgICAgICB9O1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcblx0ICAgICAgZmIgPSBmeSAtIGZtICogZng7XG5cdCAgICAgIGlmIChmbSA8IC0xIHx8IGZtID4gMSkge1xuXHQgICAgICAgIGlmIChseCA+IHJ4KSB7XG5cdCAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcblx0ICAgICAgICAgICAgeDogKHkwIC0gZmIpIC8gZm0sXG5cdCAgICAgICAgICAgIHk6IHkwXG5cdCAgICAgICAgICB9OyBlbHNlIGlmICh2YS55ID49IHkxKSByZXR1cm47XG5cdCAgICAgICAgICB2YiA9IHtcblx0ICAgICAgICAgICAgeDogKHkxIC0gZmIpIC8gZm0sXG5cdCAgICAgICAgICAgIHk6IHkxXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcblx0ICAgICAgICAgICAgeDogKHkxIC0gZmIpIC8gZm0sXG5cdCAgICAgICAgICAgIHk6IHkxXG5cdCAgICAgICAgICB9OyBlbHNlIGlmICh2YS55IDwgeTApIHJldHVybjtcblx0ICAgICAgICAgIHZiID0ge1xuXHQgICAgICAgICAgICB4OiAoeTAgLSBmYikgLyBmbSxcblx0ICAgICAgICAgICAgeTogeTBcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChseSA8IHJ5KSB7XG5cdCAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcblx0ICAgICAgICAgICAgeDogeDAsXG5cdCAgICAgICAgICAgIHk6IGZtICogeDAgKyBmYlxuXHQgICAgICAgICAgfTsgZWxzZSBpZiAodmEueCA+PSB4MSkgcmV0dXJuO1xuXHQgICAgICAgICAgdmIgPSB7XG5cdCAgICAgICAgICAgIHg6IHgxLFxuXHQgICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGlmICghdmEpIHZhID0ge1xuXHQgICAgICAgICAgICB4OiB4MSxcblx0ICAgICAgICAgICAgeTogZm0gKiB4MSArIGZiXG5cdCAgICAgICAgICB9OyBlbHNlIGlmICh2YS54IDwgeDApIHJldHVybjtcblx0ICAgICAgICAgIHZiID0ge1xuXHQgICAgICAgICAgICB4OiB4MCxcblx0ICAgICAgICAgICAgeTogZm0gKiB4MCArIGZiXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWRnZS5hID0gdmE7XG5cdCAgICBlZGdlLmIgPSB2Yjtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lFZGdlKGxTaXRlLCByU2l0ZSkge1xuXHQgICAgdGhpcy5sID0gbFNpdGU7XG5cdCAgICB0aGlzLnIgPSByU2l0ZTtcblx0ICAgIHRoaXMuYSA9IHRoaXMuYiA9IG51bGw7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobFNpdGUsIHJTaXRlLCB2YSwgdmIpIHtcblx0ICAgIHZhciBlZGdlID0gbmV3IGQzX2dlb21fdm9yb25vaUVkZ2UobFNpdGUsIHJTaXRlKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUVkZ2VzLnB1c2goZWRnZSk7XG5cdCAgICBpZiAodmEpIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQoZWRnZSwgbFNpdGUsIHJTaXRlLCB2YSk7XG5cdCAgICBpZiAodmIpIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQoZWRnZSwgclNpdGUsIGxTaXRlLCB2Yik7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lDZWxsc1tsU2l0ZS5pXS5lZGdlcy5wdXNoKG5ldyBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZShlZGdlLCBsU2l0ZSwgclNpdGUpKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUNlbGxzW3JTaXRlLmldLmVkZ2VzLnB1c2gobmV3IGQzX2dlb21fdm9yb25vaUhhbGZFZGdlKGVkZ2UsIHJTaXRlLCBsU2l0ZSkpO1xuXHQgICAgcmV0dXJuIGVkZ2U7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNyZWF0ZUJvcmRlckVkZ2UobFNpdGUsIHZhLCB2Yikge1xuXHQgICAgdmFyIGVkZ2UgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pRWRnZShsU2l0ZSwgbnVsbCk7XG5cdCAgICBlZGdlLmEgPSB2YTtcblx0ICAgIGVkZ2UuYiA9IHZiO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pRWRnZXMucHVzaChlZGdlKTtcblx0ICAgIHJldHVybiBlZGdlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKGVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KSB7XG5cdCAgICBpZiAoIWVkZ2UuYSAmJiAhZWRnZS5iKSB7XG5cdCAgICAgIGVkZ2UuYSA9IHZlcnRleDtcblx0ICAgICAgZWRnZS5sID0gbFNpdGU7XG5cdCAgICAgIGVkZ2UuciA9IHJTaXRlO1xuXHQgICAgfSBlbHNlIGlmIChlZGdlLmwgPT09IHJTaXRlKSB7XG5cdCAgICAgIGVkZ2UuYiA9IHZlcnRleDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGVkZ2UuYSA9IHZlcnRleDtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgbFNpdGUsIHJTaXRlKSB7XG5cdCAgICB2YXIgdmEgPSBlZGdlLmEsIHZiID0gZWRnZS5iO1xuXHQgICAgdGhpcy5lZGdlID0gZWRnZTtcblx0ICAgIHRoaXMuc2l0ZSA9IGxTaXRlO1xuXHQgICAgdGhpcy5hbmdsZSA9IHJTaXRlID8gTWF0aC5hdGFuMihyU2l0ZS55IC0gbFNpdGUueSwgclNpdGUueCAtIGxTaXRlLngpIDogZWRnZS5sID09PSBsU2l0ZSA/IE1hdGguYXRhbjIodmIueCAtIHZhLngsIHZhLnkgLSB2Yi55KSA6IE1hdGguYXRhbjIodmEueCAtIHZiLngsIHZiLnkgLSB2YS55KTtcblx0ICB9XG5cdCAgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UucHJvdG90eXBlID0ge1xuXHQgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5lZGdlLmwgPT09IHRoaXMuc2l0ZSA/IHRoaXMuZWRnZS5hIDogdGhpcy5lZGdlLmI7XG5cdCAgICB9LFxuXHQgICAgZW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZWRnZS5sID09PSB0aGlzLnNpdGUgPyB0aGlzLmVkZ2UuYiA6IHRoaXMuZWRnZS5hO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tUcmVlKCkge1xuXHQgICAgdGhpcy5fID0gbnVsbDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tOb2RlKG5vZGUpIHtcblx0ICAgIG5vZGUuVSA9IG5vZGUuQyA9IG5vZGUuTCA9IG5vZGUuUiA9IG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG5cdCAgfVxuXHQgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG5cdCAgICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG5cdCAgICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuXHQgICAgICBpZiAoYWZ0ZXIpIHtcblx0ICAgICAgICBub2RlLlAgPSBhZnRlcjtcblx0ICAgICAgICBub2RlLk4gPSBhZnRlci5OO1xuXHQgICAgICAgIGlmIChhZnRlci5OKSBhZnRlci5OLlAgPSBub2RlO1xuXHQgICAgICAgIGFmdGVyLk4gPSBub2RlO1xuXHQgICAgICAgIGlmIChhZnRlci5SKSB7XG5cdCAgICAgICAgICBhZnRlciA9IGFmdGVyLlI7XG5cdCAgICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuXHQgICAgICAgICAgYWZ0ZXIuTCA9IG5vZGU7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGFmdGVyLlIgPSBub2RlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBwYXJlbnQgPSBhZnRlcjtcblx0ICAgICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcblx0ICAgICAgICBhZnRlciA9IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QodGhpcy5fKTtcblx0ICAgICAgICBub2RlLlAgPSBudWxsO1xuXHQgICAgICAgIG5vZGUuTiA9IGFmdGVyO1xuXHQgICAgICAgIGFmdGVyLlAgPSBhZnRlci5MID0gbm9kZTtcblx0ICAgICAgICBwYXJlbnQgPSBhZnRlcjtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuXyA9IG5vZGU7XG5cdCAgICAgICAgcGFyZW50ID0gbnVsbDtcblx0ICAgICAgfVxuXHQgICAgICBub2RlLkwgPSBub2RlLlIgPSBudWxsO1xuXHQgICAgICBub2RlLlUgPSBwYXJlbnQ7XG5cdCAgICAgIG5vZGUuQyA9IHRydWU7XG5cdCAgICAgIGFmdGVyID0gbm9kZTtcblx0ICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuQykge1xuXHQgICAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcblx0ICAgICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcblx0ICAgICAgICAgIHVuY2xlID0gZ3JhbmRwYS5SO1xuXHQgICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcblx0ICAgICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG5cdCAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LlIpIHtcblx0ICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcblx0ICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcblx0ICAgICAgICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG5cdCAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuXHQgICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcblx0ICAgICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG5cdCAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcblx0ICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG5cdCAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG5cdCAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuXHQgICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuXHQgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5fLkMgPSBmYWxzZTtcblx0ICAgIH0sXG5cdCAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG5cdCAgICAgIGlmIChub2RlLlApIG5vZGUuUC5OID0gbm9kZS5OO1xuXHQgICAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuXHQgICAgICB2YXIgcGFyZW50ID0gbm9kZS5VLCBzaWJsaW5nLCBsZWZ0ID0gbm9kZS5MLCByaWdodCA9IG5vZGUuUiwgbmV4dCwgcmVkO1xuXHQgICAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDsgZWxzZSBpZiAoIXJpZ2h0KSBuZXh0ID0gbGVmdDsgZWxzZSBuZXh0ID0gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tGaXJzdChyaWdodCk7XG5cdCAgICAgIGlmIChwYXJlbnQpIHtcblx0ICAgICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDsgZWxzZSBwYXJlbnQuUiA9IG5leHQ7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5fID0gbmV4dDtcblx0ICAgICAgfVxuXHQgICAgICBpZiAobGVmdCAmJiByaWdodCkge1xuXHQgICAgICAgIHJlZCA9IG5leHQuQztcblx0ICAgICAgICBuZXh0LkMgPSBub2RlLkM7XG5cdCAgICAgICAgbmV4dC5MID0gbGVmdDtcblx0ICAgICAgICBsZWZ0LlUgPSBuZXh0O1xuXHQgICAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuXHQgICAgICAgICAgcGFyZW50ID0gbmV4dC5VO1xuXHQgICAgICAgICAgbmV4dC5VID0gbm9kZS5VO1xuXHQgICAgICAgICAgbm9kZSA9IG5leHQuUjtcblx0ICAgICAgICAgIHBhcmVudC5MID0gbm9kZTtcblx0ICAgICAgICAgIG5leHQuUiA9IHJpZ2h0O1xuXHQgICAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG5leHQuVSA9IHBhcmVudDtcblx0ICAgICAgICAgIHBhcmVudCA9IG5leHQ7XG5cdCAgICAgICAgICBub2RlID0gbmV4dC5SO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZWQgPSBub2RlLkM7XG5cdCAgICAgICAgbm9kZSA9IG5leHQ7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG5vZGUpIG5vZGUuVSA9IHBhcmVudDtcblx0ICAgICAgaWYgKHJlZCkgcmV0dXJuO1xuXHQgICAgICBpZiAobm9kZSAmJiBub2RlLkMpIHtcblx0ICAgICAgICBub2RlLkMgPSBmYWxzZTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgICAgZG8ge1xuXHQgICAgICAgIGlmIChub2RlID09PSB0aGlzLl8pIGJyZWFrO1xuXHQgICAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuXHQgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuXHQgICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuXHQgICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcblx0ICAgICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuXHQgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcblx0ICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQyB8fCBzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpIHtcblx0ICAgICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG5cdCAgICAgICAgICAgICAgc2libGluZy5MLkMgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuXHQgICAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG5cdCAgICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuXHQgICAgICAgICAgICBwYXJlbnQuQyA9IHNpYmxpbmcuUi5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuXHQgICAgICAgICAgICBub2RlID0gdGhpcy5fO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuXHQgICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuXHQgICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcblx0ICAgICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuXHQgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG5cdCAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChzaWJsaW5nLkwgJiYgc2libGluZy5MLkMgfHwgc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSB7XG5cdCAgICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuXHQgICAgICAgICAgICAgIHNpYmxpbmcuUi5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG5cdCAgICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuXHQgICAgICAgICAgICBwYXJlbnQuQyA9IHNpYmxpbmcuTC5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcblx0ICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG5cdCAgICAgICAgbm9kZSA9IHBhcmVudDtcblx0ICAgICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcblx0ICAgICAgfSB3aGlsZSAoIW5vZGUuQyk7XG5cdCAgICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0cmVlLCBub2RlKSB7XG5cdCAgICB2YXIgcCA9IG5vZGUsIHEgPSBub2RlLlIsIHBhcmVudCA9IHAuVTtcblx0ICAgIGlmIChwYXJlbnQpIHtcblx0ICAgICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7IGVsc2UgcGFyZW50LlIgPSBxO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdHJlZS5fID0gcTtcblx0ICAgIH1cblx0ICAgIHEuVSA9IHBhcmVudDtcblx0ICAgIHAuVSA9IHE7XG5cdCAgICBwLlIgPSBxLkw7XG5cdCAgICBpZiAocC5SKSBwLlIuVSA9IHA7XG5cdCAgICBxLkwgPSBwO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRyZWUsIG5vZGUpIHtcblx0ICAgIHZhciBwID0gbm9kZSwgcSA9IG5vZGUuTCwgcGFyZW50ID0gcC5VO1xuXHQgICAgaWYgKHBhcmVudCkge1xuXHQgICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTsgZWxzZSBwYXJlbnQuUiA9IHE7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0cmVlLl8gPSBxO1xuXHQgICAgfVxuXHQgICAgcS5VID0gcGFyZW50O1xuXHQgICAgcC5VID0gcTtcblx0ICAgIHAuTCA9IHEuUjtcblx0ICAgIGlmIChwLkwpIHAuTC5VID0gcDtcblx0ICAgIHEuUiA9IHA7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3Qobm9kZSkge1xuXHQgICAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcblx0ICAgIHJldHVybiBub2RlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2koc2l0ZXMsIGJib3gpIHtcblx0ICAgIHZhciBzaXRlID0gc2l0ZXMuc29ydChkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcikucG9wKCksIHgwLCB5MCwgY2lyY2xlO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pRWRnZXMgPSBbXTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUNlbGxzID0gbmV3IEFycmF5KHNpdGVzLmxlbmd0aCk7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzID0gbmV3IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcyA9IG5ldyBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUoKTtcblx0ICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgIGNpcmNsZSA9IGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlO1xuXHQgICAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlLnkgPCBjaXJjbGUueSB8fCBzaXRlLnkgPT09IGNpcmNsZS55ICYmIHNpdGUueCA8IGNpcmNsZS54KSkge1xuXHQgICAgICAgIGlmIChzaXRlLnggIT09IHgwIHx8IHNpdGUueSAhPT0geTApIHtcblx0ICAgICAgICAgIGQzX2dlb21fdm9yb25vaUNlbGxzW3NpdGUuaV0gPSBuZXcgZDNfZ2VvbV92b3Jvbm9pQ2VsbChzaXRlKTtcblx0ICAgICAgICAgIGQzX2dlb21fdm9yb25vaUFkZEJlYWNoKHNpdGUpO1xuXHQgICAgICAgICAgeDAgPSBzaXRlLngsIHkwID0gc2l0ZS55O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzaXRlID0gc2l0ZXMucG9wKCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoY2lyY2xlKSB7XG5cdCAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChiYm94KSBkM19nZW9tX3Zvcm9ub2lDbGlwRWRnZXMoYmJveCksIGQzX2dlb21fdm9yb25vaUNsb3NlQ2VsbHMoYmJveCk7XG5cdCAgICB2YXIgZGlhZ3JhbSA9IHtcblx0ICAgICAgY2VsbHM6IGQzX2dlb21fdm9yb25vaUNlbGxzLFxuXHQgICAgICBlZGdlczogZDNfZ2VvbV92b3Jvbm9pRWRnZXNcblx0ICAgIH07XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcyA9IGQzX2dlb21fdm9yb25vaUVkZ2VzID0gZDNfZ2VvbV92b3Jvbm9pQ2VsbHMgPSBudWxsO1xuXHQgICAgcmV0dXJuIGRpYWdyYW07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVZlcnRleE9yZGVyKGEsIGIpIHtcblx0ICAgIHJldHVybiBiLnkgLSBhLnkgfHwgYi54IC0gYS54O1xuXHQgIH1cblx0ICBkMy5nZW9tLnZvcm9ub2kgPSBmdW5jdGlvbihwb2ludHMpIHtcblx0ICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WSwgZnggPSB4LCBmeSA9IHksIGNsaXBFeHRlbnQgPSBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50O1xuXHQgICAgaWYgKHBvaW50cykgcmV0dXJuIHZvcm9ub2kocG9pbnRzKTtcblx0ICAgIGZ1bmN0aW9uIHZvcm9ub2koZGF0YSkge1xuXHQgICAgICB2YXIgcG9seWdvbnMgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpLCB4MCA9IGNsaXBFeHRlbnRbMF1bMF0sIHkwID0gY2xpcEV4dGVudFswXVsxXSwgeDEgPSBjbGlwRXh0ZW50WzFdWzBdLCB5MSA9IGNsaXBFeHRlbnRbMV1bMV07XG5cdCAgICAgIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSwgY2xpcEV4dGVudCkuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG5cdCAgICAgICAgdmFyIGVkZ2VzID0gY2VsbC5lZGdlcywgc2l0ZSA9IGNlbGwuc2l0ZSwgcG9seWdvbiA9IHBvbHlnb25zW2ldID0gZWRnZXMubGVuZ3RoID8gZWRnZXMubWFwKGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICAgIHZhciBzID0gZS5zdGFydCgpO1xuXHQgICAgICAgICAgcmV0dXJuIFsgcy54LCBzLnkgXTtcblx0ICAgICAgICB9KSA6IHNpdGUueCA+PSB4MCAmJiBzaXRlLnggPD0geDEgJiYgc2l0ZS55ID49IHkwICYmIHNpdGUueSA8PSB5MSA/IFsgWyB4MCwgeTEgXSwgWyB4MSwgeTEgXSwgWyB4MSwgeTAgXSwgWyB4MCwgeTAgXSBdIDogW107XG5cdCAgICAgICAgcG9seWdvbi5wb2ludCA9IGRhdGFbaV07XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gcG9seWdvbnM7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzaXRlcyhkYXRhKSB7XG5cdCAgICAgIHJldHVybiBkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgIHg6IE1hdGgucm91bmQoZngoZCwgaSkgLyDOtSkgKiDOtSxcblx0ICAgICAgICAgIHk6IE1hdGgucm91bmQoZnkoZCwgaSkgLyDOtSkgKiDOtSxcblx0ICAgICAgICAgIGk6IGlcblx0ICAgICAgICB9O1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHZvcm9ub2kubGlua3MgPSBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgIHJldHVybiBkM19nZW9tX3Zvcm9ub2koc2l0ZXMoZGF0YSkpLmVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlKSB7XG5cdCAgICAgICAgcmV0dXJuIGVkZ2UubCAmJiBlZGdlLnI7XG5cdCAgICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgIHNvdXJjZTogZGF0YVtlZGdlLmwuaV0sXG5cdCAgICAgICAgICB0YXJnZXQ6IGRhdGFbZWRnZS5yLmldXG5cdCAgICAgICAgfTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgdm9yb25vaS50cmlhbmdsZXMgPSBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgIHZhciB0cmlhbmdsZXMgPSBbXTtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpKS5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcblx0ICAgICAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSwgZWRnZXMgPSBjZWxsLmVkZ2VzLnNvcnQoZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlciksIGogPSAtMSwgbSA9IGVkZ2VzLmxlbmd0aCwgZTAsIHMwLCBlMSA9IGVkZ2VzW20gLSAxXS5lZGdlLCBzMSA9IGUxLmwgPT09IHNpdGUgPyBlMS5yIDogZTEubDtcblx0ICAgICAgICB3aGlsZSAoKytqIDwgbSkge1xuXHQgICAgICAgICAgZTAgPSBlMTtcblx0ICAgICAgICAgIHMwID0gczE7XG5cdCAgICAgICAgICBlMSA9IGVkZ2VzW2pdLmVkZ2U7XG5cdCAgICAgICAgICBzMSA9IGUxLmwgPT09IHNpdGUgPyBlMS5yIDogZTEubDtcblx0ICAgICAgICAgIGlmIChpIDwgczAuaSAmJiBpIDwgczEuaSAmJiBkM19nZW9tX3Zvcm9ub2lUcmlhbmdsZUFyZWEoc2l0ZSwgczAsIHMxKSA8IDApIHtcblx0ICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goWyBkYXRhW2ldLCBkYXRhW3MwLmldLCBkYXRhW3MxLmldIF0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiB0cmlhbmdsZXM7XG5cdCAgICB9O1xuXHQgICAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmeCA9IGQzX2Z1bmN0b3IoeCA9IF8pLCB2b3Jvbm9pKSA6IHg7XG5cdCAgICB9O1xuXHQgICAgdm9yb25vaS55ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmeSA9IGQzX2Z1bmN0b3IoeSA9IF8pLCB2b3Jvbm9pKSA6IHk7XG5cdCAgICB9O1xuXHQgICAgdm9yb25vaS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50ID09PSBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50ID8gbnVsbCA6IGNsaXBFeHRlbnQ7XG5cdCAgICAgIGNsaXBFeHRlbnQgPSBfID09IG51bGwgPyBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50IDogXztcblx0ICAgICAgcmV0dXJuIHZvcm9ub2k7XG5cdCAgICB9O1xuXHQgICAgdm9yb25vaS5zaXplID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50ID09PSBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50ID8gbnVsbCA6IGNsaXBFeHRlbnQgJiYgY2xpcEV4dGVudFsxXTtcblx0ICAgICAgcmV0dXJuIHZvcm9ub2kuY2xpcEV4dGVudChfICYmIFsgWyAwLCAwIF0sIF8gXSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHZvcm9ub2k7XG5cdCAgfTtcblx0ICB2YXIgZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA9IFsgWyAtMWU2LCAtMWU2IF0sIFsgMWU2LCAxZTYgXSBdO1xuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVRyaWFuZ2xlQXJlYShhLCBiLCBjKSB7XG5cdCAgICByZXR1cm4gKGEueCAtIGMueCkgKiAoYi55IC0gYS55KSAtIChhLnggLSBiLngpICogKGMueSAtIGEueSk7XG5cdCAgfVxuXHQgIGQzLmdlb20uZGVsYXVuYXkgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuXHQgICAgcmV0dXJuIGQzLmdlb20udm9yb25vaSgpLnRyaWFuZ2xlcyh2ZXJ0aWNlcyk7XG5cdCAgfTtcblx0ICBkMy5nZW9tLnF1YWR0cmVlID0gZnVuY3Rpb24ocG9pbnRzLCB4MSwgeTEsIHgyLCB5Mikge1xuXHQgICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZLCBjb21wYXQ7XG5cdCAgICBpZiAoY29tcGF0ID0gYXJndW1lbnRzLmxlbmd0aCkge1xuXHQgICAgICB4ID0gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFg7XG5cdCAgICAgIHkgPSBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WTtcblx0ICAgICAgaWYgKGNvbXBhdCA9PT0gMykge1xuXHQgICAgICAgIHkyID0geTE7XG5cdCAgICAgICAgeDIgPSB4MTtcblx0ICAgICAgICB5MSA9IHgxID0gMDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcXVhZHRyZWUocG9pbnRzKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHF1YWR0cmVlKGRhdGEpIHtcblx0ICAgICAgdmFyIGQsIGZ4ID0gZDNfZnVuY3Rvcih4KSwgZnkgPSBkM19mdW5jdG9yKHkpLCB4cywgeXMsIGksIG4sIHgxXywgeTFfLCB4Ml8sIHkyXztcblx0ICAgICAgaWYgKHgxICE9IG51bGwpIHtcblx0ICAgICAgICB4MV8gPSB4MSwgeTFfID0geTEsIHgyXyA9IHgyLCB5Ml8gPSB5Mjtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB4Ml8gPSB5Ml8gPSAtKHgxXyA9IHkxXyA9IEluZmluaXR5KTtcblx0ICAgICAgICB4cyA9IFtdLCB5cyA9IFtdO1xuXHQgICAgICAgIG4gPSBkYXRhLmxlbmd0aDtcblx0ICAgICAgICBpZiAoY29tcGF0KSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgICAgICBkID0gZGF0YVtpXTtcblx0ICAgICAgICAgIGlmIChkLnggPCB4MV8pIHgxXyA9IGQueDtcblx0ICAgICAgICAgIGlmIChkLnkgPCB5MV8pIHkxXyA9IGQueTtcblx0ICAgICAgICAgIGlmIChkLnggPiB4Ml8pIHgyXyA9IGQueDtcblx0ICAgICAgICAgIGlmIChkLnkgPiB5Ml8pIHkyXyA9IGQueTtcblx0ICAgICAgICAgIHhzLnB1c2goZC54KTtcblx0ICAgICAgICAgIHlzLnB1c2goZC55KTtcblx0ICAgICAgICB9IGVsc2UgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuXHQgICAgICAgICAgdmFyIHhfID0gK2Z4KGQgPSBkYXRhW2ldLCBpKSwgeV8gPSArZnkoZCwgaSk7XG5cdCAgICAgICAgICBpZiAoeF8gPCB4MV8pIHgxXyA9IHhfO1xuXHQgICAgICAgICAgaWYgKHlfIDwgeTFfKSB5MV8gPSB5Xztcblx0ICAgICAgICAgIGlmICh4XyA+IHgyXykgeDJfID0geF87XG5cdCAgICAgICAgICBpZiAoeV8gPiB5Ml8pIHkyXyA9IHlfO1xuXHQgICAgICAgICAgeHMucHVzaCh4Xyk7XG5cdCAgICAgICAgICB5cy5wdXNoKHlfKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGR4ID0geDJfIC0geDFfLCBkeSA9IHkyXyAtIHkxXztcblx0ICAgICAgaWYgKGR4ID4gZHkpIHkyXyA9IHkxXyArIGR4OyBlbHNlIHgyXyA9IHgxXyArIGR5O1xuXHQgICAgICBmdW5jdGlvbiBpbnNlcnQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcblx0ICAgICAgICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHJldHVybjtcblx0ICAgICAgICBpZiAobi5sZWFmKSB7XG5cdCAgICAgICAgICB2YXIgbnggPSBuLngsIG55ID0gbi55O1xuXHQgICAgICAgICAgaWYgKG54ICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgaWYgKGFicyhueCAtIHgpICsgYWJzKG55IC0geSkgPCAuMDEpIHtcblx0ICAgICAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgdmFyIG5Qb2ludCA9IG4ucG9pbnQ7XG5cdCAgICAgICAgICAgICAgbi54ID0gbi55ID0gbi5wb2ludCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgaW5zZXJ0Q2hpbGQobiwgblBvaW50LCBueCwgbnksIHgxLCB5MSwgeDIsIHkyKTtcblx0ICAgICAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIG4ueCA9IHgsIG4ueSA9IHksIG4ucG9pbnQgPSBkO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7XG5cdCAgICAgICAgdmFyIHhtID0gKHgxICsgeDIpICogLjUsIHltID0gKHkxICsgeTIpICogLjUsIHJpZ2h0ID0geCA+PSB4bSwgYmVsb3cgPSB5ID49IHltLCBpID0gYmVsb3cgPDwgMSB8IHJpZ2h0O1xuXHQgICAgICAgIG4ubGVhZiA9IGZhbHNlO1xuXHQgICAgICAgIG4gPSBuLm5vZGVzW2ldIHx8IChuLm5vZGVzW2ldID0gZDNfZ2VvbV9xdWFkdHJlZU5vZGUoKSk7XG5cdCAgICAgICAgaWYgKHJpZ2h0KSB4MSA9IHhtOyBlbHNlIHgyID0geG07XG5cdCAgICAgICAgaWYgKGJlbG93KSB5MSA9IHltOyBlbHNlIHkyID0geW07XG5cdCAgICAgICAgaW5zZXJ0KG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgcm9vdCA9IGQzX2dlb21fcXVhZHRyZWVOb2RlKCk7XG5cdCAgICAgIHJvb3QuYWRkID0gZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIGluc2VydChyb290LCBkLCArZngoZCwgKytpKSwgK2Z5KGQsIGkpLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuXHQgICAgICB9O1xuXHQgICAgICByb290LnZpc2l0ID0gZnVuY3Rpb24oZikge1xuXHQgICAgICAgIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCByb290LCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuXHQgICAgICB9O1xuXHQgICAgICByb290LmZpbmQgPSBmdW5jdGlvbihwb2ludCkge1xuXHQgICAgICAgIHJldHVybiBkM19nZW9tX3F1YWR0cmVlRmluZChyb290LCBwb2ludFswXSwgcG9pbnRbMV0sIHgxXywgeTFfLCB4Ml8sIHkyXyk7XG5cdCAgICAgIH07XG5cdCAgICAgIGkgPSAtMTtcblx0ICAgICAgaWYgKHgxID09IG51bGwpIHtcblx0ICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgICAgaW5zZXJ0KHJvb3QsIGRhdGFbaV0sIHhzW2ldLCB5c1tpXSwgeDFfLCB5MV8sIHgyXywgeTJfKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLS1pO1xuXHQgICAgICB9IGVsc2UgZGF0YS5mb3JFYWNoKHJvb3QuYWRkKTtcblx0ICAgICAgeHMgPSB5cyA9IGRhdGEgPSBkID0gbnVsbDtcblx0ICAgICAgcmV0dXJuIHJvb3Q7XG5cdCAgICB9XG5cdCAgICBxdWFkdHJlZS54ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gXywgcXVhZHRyZWUpIDogeDtcblx0ICAgIH07XG5cdCAgICBxdWFkdHJlZS55ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gXywgcXVhZHRyZWUpIDogeTtcblx0ICAgIH07XG5cdCAgICBxdWFkdHJlZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxID09IG51bGwgPyBudWxsIDogWyBbIHgxLCB5MSBdLCBbIHgyLCB5MiBdIF07XG5cdCAgICAgIGlmIChfID09IG51bGwpIHgxID0geTEgPSB4MiA9IHkyID0gbnVsbDsgZWxzZSB4MSA9ICtfWzBdWzBdLCB5MSA9ICtfWzBdWzFdLCB4MiA9ICtfWzFdWzBdLCBcblx0ICAgICAgeTIgPSArX1sxXVsxXTtcblx0ICAgICAgcmV0dXJuIHF1YWR0cmVlO1xuXHQgICAgfTtcblx0ICAgIHF1YWR0cmVlLnNpemUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxID09IG51bGwgPyBudWxsIDogWyB4MiAtIHgxLCB5MiAtIHkxIF07XG5cdCAgICAgIGlmIChfID09IG51bGwpIHgxID0geTEgPSB4MiA9IHkyID0gbnVsbDsgZWxzZSB4MSA9IHkxID0gMCwgeDIgPSArX1swXSwgeTIgPSArX1sxXTtcblx0ICAgICAgcmV0dXJuIHF1YWR0cmVlO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBxdWFkdHJlZTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVDb21wYXRYKGQpIHtcblx0ICAgIHJldHVybiBkLng7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVDb21wYXRZKGQpIHtcblx0ICAgIHJldHVybiBkLnk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVOb2RlKCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgbGVhZjogdHJ1ZSxcblx0ICAgICAgbm9kZXM6IFtdLFxuXHQgICAgICBwb2ludDogbnVsbCxcblx0ICAgICAgeDogbnVsbCxcblx0ICAgICAgeTogbnVsbFxuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIG5vZGUsIHgxLCB5MSwgeDIsIHkyKSB7XG5cdCAgICBpZiAoIWYobm9kZSwgeDEsIHkxLCB4MiwgeTIpKSB7XG5cdCAgICAgIHZhciBzeCA9ICh4MSArIHgyKSAqIC41LCBzeSA9ICh5MSArIHkyKSAqIC41LCBjaGlsZHJlbiA9IG5vZGUubm9kZXM7XG5cdCAgICAgIGlmIChjaGlsZHJlblswXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzBdLCB4MSwgeTEsIHN4LCBzeSk7XG5cdCAgICAgIGlmIChjaGlsZHJlblsxXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzFdLCBzeCwgeTEsIHgyLCBzeSk7XG5cdCAgICAgIGlmIChjaGlsZHJlblsyXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzJdLCB4MSwgc3ksIHN4LCB5Mik7XG5cdCAgICAgIGlmIChjaGlsZHJlblszXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzNdLCBzeCwgc3ksIHgyLCB5Mik7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVGaW5kKHJvb3QsIHgsIHksIHgwLCB5MCwgeDMsIHkzKSB7XG5cdCAgICB2YXIgbWluRGlzdGFuY2UyID0gSW5maW5pdHksIGNsb3Nlc3RQb2ludDtcblx0ICAgIChmdW5jdGlvbiBmaW5kKG5vZGUsIHgxLCB5MSwgeDIsIHkyKSB7XG5cdCAgICAgIGlmICh4MSA+IHgzIHx8IHkxID4geTMgfHwgeDIgPCB4MCB8fCB5MiA8IHkwKSByZXR1cm47XG5cdCAgICAgIGlmIChwb2ludCA9IG5vZGUucG9pbnQpIHtcblx0ICAgICAgICB2YXIgcG9pbnQsIGR4ID0geCAtIG5vZGUueCwgZHkgPSB5IC0gbm9kZS55LCBkaXN0YW5jZTIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblx0ICAgICAgICBpZiAoZGlzdGFuY2UyIDwgbWluRGlzdGFuY2UyKSB7XG5cdCAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQobWluRGlzdGFuY2UyID0gZGlzdGFuY2UyKTtcblx0ICAgICAgICAgIHgwID0geCAtIGRpc3RhbmNlLCB5MCA9IHkgLSBkaXN0YW5jZTtcblx0ICAgICAgICAgIHgzID0geCArIGRpc3RhbmNlLCB5MyA9IHkgKyBkaXN0YW5jZTtcblx0ICAgICAgICAgIGNsb3Nlc3RQb2ludCA9IHBvaW50O1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLm5vZGVzLCB4bSA9ICh4MSArIHgyKSAqIC41LCB5bSA9ICh5MSArIHkyKSAqIC41LCByaWdodCA9IHggPj0geG0sIGJlbG93ID0geSA+PSB5bTtcblx0ICAgICAgZm9yICh2YXIgaSA9IGJlbG93IDw8IDEgfCByaWdodCwgaiA9IGkgKyA0OyBpIDwgajsgKytpKSB7XG5cdCAgICAgICAgaWYgKG5vZGUgPSBjaGlsZHJlbltpICYgM10pIHN3aXRjaCAoaSAmIDMpIHtcblx0ICAgICAgICAgY2FzZSAwOlxuXHQgICAgICAgICAgZmluZChub2RlLCB4MSwgeTEsIHhtLCB5bSk7XG5cdCAgICAgICAgICBicmVhaztcblx0XG5cdCAgICAgICAgIGNhc2UgMTpcblx0ICAgICAgICAgIGZpbmQobm9kZSwgeG0sIHkxLCB4MiwgeW0pO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdFxuXHQgICAgICAgICBjYXNlIDI6XG5cdCAgICAgICAgICBmaW5kKG5vZGUsIHgxLCB5bSwgeG0sIHkyKTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHRcblx0ICAgICAgICAgY2FzZSAzOlxuXHQgICAgICAgICAgZmluZChub2RlLCB4bSwgeW0sIHgyLCB5Mik7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0pKHJvb3QsIHgwLCB5MCwgeDMsIHkzKTtcblx0ICAgIHJldHVybiBjbG9zZXN0UG9pbnQ7XG5cdCAgfVxuXHQgIGQzLmludGVycG9sYXRlUmdiID0gZDNfaW50ZXJwb2xhdGVSZ2I7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSZ2IoYSwgYikge1xuXHQgICAgYSA9IGQzLnJnYihhKTtcblx0ICAgIGIgPSBkMy5yZ2IoYik7XG5cdCAgICB2YXIgYXIgPSBhLnIsIGFnID0gYS5nLCBhYiA9IGEuYiwgYnIgPSBiLnIgLSBhciwgYmcgPSBiLmcgLSBhZywgYmIgPSBiLmIgLSBhYjtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiBcIiNcIiArIGQzX3JnYl9oZXgoTWF0aC5yb3VuZChhciArIGJyICogdCkpICsgZDNfcmdiX2hleChNYXRoLnJvdW5kKGFnICsgYmcgKiB0KSkgKyBkM19yZ2JfaGV4KE1hdGgucm91bmQoYWIgKyBiYiAqIHQpKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmludGVycG9sYXRlT2JqZWN0ID0gZDNfaW50ZXJwb2xhdGVPYmplY3Q7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVPYmplY3QoYSwgYikge1xuXHQgICAgdmFyIGkgPSB7fSwgYyA9IHt9LCBrO1xuXHQgICAgZm9yIChrIGluIGEpIHtcblx0ICAgICAgaWYgKGsgaW4gYikge1xuXHQgICAgICAgIGlba10gPSBkM19pbnRlcnBvbGF0ZShhW2tdLCBiW2tdKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBjW2tdID0gYVtrXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZm9yIChrIGluIGIpIHtcblx0ICAgICAgaWYgKCEoayBpbiBhKSkge1xuXHQgICAgICAgIGNba10gPSBiW2tdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG5cdCAgICAgIHJldHVybiBjO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMuaW50ZXJwb2xhdGVOdW1iZXIgPSBkM19pbnRlcnBvbGF0ZU51bWJlcjtcblx0ICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZU51bWJlcihhLCBiKSB7XG5cdCAgICBhID0gK2EsIGIgPSArYjtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMuaW50ZXJwb2xhdGVTdHJpbmcgPSBkM19pbnRlcnBvbGF0ZVN0cmluZztcblx0ICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVN0cmluZyhhLCBiKSB7XG5cdCAgICB2YXIgYmkgPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJBLmxhc3RJbmRleCA9IGQzX2ludGVycG9sYXRlX251bWJlckIubGFzdEluZGV4ID0gMCwgYW0sIGJtLCBicywgaSA9IC0xLCBzID0gW10sIHEgPSBbXTtcblx0ICAgIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXHQgICAgd2hpbGUgKChhbSA9IGQzX2ludGVycG9sYXRlX251bWJlckEuZXhlYyhhKSkgJiYgKGJtID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQi5leGVjKGIpKSkge1xuXHQgICAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHtcblx0ICAgICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcblx0ICAgICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgZWxzZSBzWysraV0gPSBicztcblx0ICAgICAgfVxuXHQgICAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHtcblx0ICAgICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgZWxzZSBzWysraV0gPSBibTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBzWysraV0gPSBudWxsO1xuXHQgICAgICAgIHEucHVzaCh7XG5cdCAgICAgICAgICBpOiBpLFxuXHQgICAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIoYW0sIGJtKVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIGJpID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQi5sYXN0SW5kZXg7XG5cdCAgICB9XG5cdCAgICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuXHQgICAgICBicyA9IGIuc2xpY2UoYmkpO1xuXHQgICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgZWxzZSBzWysraV0gPSBicztcblx0ICAgIH1cblx0ICAgIHJldHVybiBzLmxlbmd0aCA8IDIgPyBxWzBdID8gKGIgPSBxWzBdLngsIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuXHQgICAgfSkgOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGI7XG5cdCAgICB9IDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuXHQgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuXHQgICAgfSk7XG5cdCAgfVxuXHQgIHZhciBkM19pbnRlcnBvbGF0ZV9udW1iZXJBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLCBkM19pbnRlcnBvbGF0ZV9udW1iZXJCID0gbmV3IFJlZ0V4cChkM19pbnRlcnBvbGF0ZV9udW1iZXJBLnNvdXJjZSwgXCJnXCIpO1xuXHQgIGQzLmludGVycG9sYXRlID0gZDNfaW50ZXJwb2xhdGU7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGUoYSwgYikge1xuXHQgICAgdmFyIGkgPSBkMy5pbnRlcnBvbGF0b3JzLmxlbmd0aCwgZjtcblx0ICAgIHdoaWxlICgtLWkgPj0gMCAmJiAhKGYgPSBkMy5pbnRlcnBvbGF0b3JzW2ldKGEsIGIpKSkgO1xuXHQgICAgcmV0dXJuIGY7XG5cdCAgfVxuXHQgIGQzLmludGVycG9sYXRvcnMgPSBbIGZ1bmN0aW9uKGEsIGIpIHtcblx0ICAgIHZhciB0ID0gdHlwZW9mIGI7XG5cdCAgICByZXR1cm4gKHQgPT09IFwic3RyaW5nXCIgPyBkM19yZ2JfbmFtZXMuaGFzKGIudG9Mb3dlckNhc2UoKSkgfHwgL14oI3xyZ2JcXCh8aHNsXFwoKS9pLnRlc3QoYikgPyBkM19pbnRlcnBvbGF0ZVJnYiA6IGQzX2ludGVycG9sYXRlU3RyaW5nIDogYiBpbnN0YW5jZW9mIGQzX2NvbG9yID8gZDNfaW50ZXJwb2xhdGVSZ2IgOiBBcnJheS5pc0FycmF5KGIpID8gZDNfaW50ZXJwb2xhdGVBcnJheSA6IHQgPT09IFwib2JqZWN0XCIgJiYgaXNOYU4oYikgPyBkM19pbnRlcnBvbGF0ZU9iamVjdCA6IGQzX2ludGVycG9sYXRlTnVtYmVyKShhLCBiKTtcblx0ICB9IF07XG5cdCAgZDMuaW50ZXJwb2xhdGVBcnJheSA9IGQzX2ludGVycG9sYXRlQXJyYXk7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVBcnJheShhLCBiKSB7XG5cdCAgICB2YXIgeCA9IFtdLCBjID0gW10sIG5hID0gYS5sZW5ndGgsIG5iID0gYi5sZW5ndGgsIG4wID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKSwgaTtcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSB4LnB1c2goZDNfaW50ZXJwb2xhdGUoYVtpXSwgYltpXSkpO1xuXHQgICAgZm9yICg7aSA8IG5hOyArK2kpIGNbaV0gPSBhW2ldO1xuXHQgICAgZm9yICg7aSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgZm9yIChpID0gMDsgaSA8IG4wOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuXHQgICAgICByZXR1cm4gYztcblx0ICAgIH07XG5cdCAgfVxuXHQgIHZhciBkM19lYXNlX2RlZmF1bHQgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19pZGVudGl0eTtcblx0ICB9O1xuXHQgIHZhciBkM19lYXNlID0gZDMubWFwKHtcblx0ICAgIGxpbmVhcjogZDNfZWFzZV9kZWZhdWx0LFxuXHQgICAgcG9seTogZDNfZWFzZV9wb2x5LFxuXHQgICAgcXVhZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19lYXNlX3F1YWQ7XG5cdCAgICB9LFxuXHQgICAgY3ViaWM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfZWFzZV9jdWJpYztcblx0ICAgIH0sXG5cdCAgICBzaW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfZWFzZV9zaW47XG5cdCAgICB9LFxuXHQgICAgZXhwOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX2Vhc2VfZXhwO1xuXHQgICAgfSxcblx0ICAgIGNpcmNsZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19lYXNlX2NpcmNsZTtcblx0ICAgIH0sXG5cdCAgICBlbGFzdGljOiBkM19lYXNlX2VsYXN0aWMsXG5cdCAgICBiYWNrOiBkM19lYXNlX2JhY2ssXG5cdCAgICBib3VuY2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfZWFzZV9ib3VuY2U7XG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgdmFyIGQzX2Vhc2VfbW9kZSA9IGQzLm1hcCh7XG5cdCAgICBcImluXCI6IGQzX2lkZW50aXR5LFxuXHQgICAgb3V0OiBkM19lYXNlX3JldmVyc2UsXG5cdCAgICBcImluLW91dFwiOiBkM19lYXNlX3JlZmxlY3QsXG5cdCAgICBcIm91dC1pblwiOiBmdW5jdGlvbihmKSB7XG5cdCAgICAgIHJldHVybiBkM19lYXNlX3JlZmxlY3QoZDNfZWFzZV9yZXZlcnNlKGYpKTtcblx0ICAgIH1cblx0ICB9KTtcblx0ICBkMy5lYXNlID0gZnVuY3Rpb24obmFtZSkge1xuXHQgICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoXCItXCIpLCB0ID0gaSA+PSAwID8gbmFtZS5zbGljZSgwLCBpKSA6IG5hbWUsIG0gPSBpID49IDAgPyBuYW1lLnNsaWNlKGkgKyAxKSA6IFwiaW5cIjtcblx0ICAgIHQgPSBkM19lYXNlLmdldCh0KSB8fCBkM19lYXNlX2RlZmF1bHQ7XG5cdCAgICBtID0gZDNfZWFzZV9tb2RlLmdldChtKSB8fCBkM19pZGVudGl0eTtcblx0ICAgIHJldHVybiBkM19lYXNlX2NsYW1wKG0odC5hcHBseShudWxsLCBkM19hcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfY2xhbXAoZikge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgcmV0dXJuIHQgPD0gMCA/IDAgOiB0ID49IDEgPyAxIDogZih0KTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfcmV2ZXJzZShmKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICByZXR1cm4gMSAtIGYoMSAtIHQpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZWFzZV9yZWZsZWN0KGYpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiAuNSAqICh0IDwgLjUgPyBmKDIgKiB0KSA6IDIgLSBmKDIgLSAyICogdCkpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZWFzZV9xdWFkKHQpIHtcblx0ICAgIHJldHVybiB0ICogdDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZWFzZV9jdWJpYyh0KSB7XG5cdCAgICByZXR1cm4gdCAqIHQgKiB0O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19lYXNlX2N1YmljSW5PdXQodCkge1xuXHQgICAgaWYgKHQgPD0gMCkgcmV0dXJuIDA7XG5cdCAgICBpZiAodCA+PSAxKSByZXR1cm4gMTtcblx0ICAgIHZhciB0MiA9IHQgKiB0LCB0MyA9IHQyICogdDtcblx0ICAgIHJldHVybiA0ICogKHQgPCAuNSA/IHQzIDogMyAqICh0IC0gdDIpICsgdDMgLSAuNzUpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19lYXNlX3BvbHkoZSkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZWFzZV9zaW4odCkge1xuXHQgICAgcmV0dXJuIDEgLSBNYXRoLmNvcyh0ICogaGFsZs+AKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZWFzZV9leHAodCkge1xuXHQgICAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfY2lyY2xlKHQpIHtcblx0ICAgIHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfZWxhc3RpYyhhLCBwKSB7XG5cdCAgICB2YXIgcztcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcCA9IC40NTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSBzID0gcCAvIM+EICogTWF0aC5hc2luKDEgLyBhKTsgZWxzZSBhID0gMSwgcyA9IHAgLyA0O1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgcmV0dXJuIDEgKyBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogz4QgLyBwKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfYmFjayhzKSB7XG5cdCAgICBpZiAoIXMpIHMgPSAxLjcwMTU4O1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19lYXNlX2JvdW5jZSh0KSB7XG5cdCAgICByZXR1cm4gdCA8IDEgLyAyLjc1ID8gNy41NjI1ICogdCAqIHQgOiB0IDwgMiAvIDIuNzUgPyA3LjU2MjUgKiAodCAtPSAxLjUgLyAyLjc1KSAqIHQgKyAuNzUgOiB0IDwgMi41IC8gMi43NSA/IDcuNTYyNSAqICh0IC09IDIuMjUgLyAyLjc1KSAqIHQgKyAuOTM3NSA6IDcuNTYyNSAqICh0IC09IDIuNjI1IC8gMi43NSkgKiB0ICsgLjk4NDM3NTtcblx0ICB9XG5cdCAgZDMuaW50ZXJwb2xhdGVIY2wgPSBkM19pbnRlcnBvbGF0ZUhjbDtcblx0ICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUhjbChhLCBiKSB7XG5cdCAgICBhID0gZDMuaGNsKGEpO1xuXHQgICAgYiA9IGQzLmhjbChiKTtcblx0ICAgIHZhciBhaCA9IGEuaCwgYWMgPSBhLmMsIGFsID0gYS5sLCBiaCA9IGIuaCAtIGFoLCBiYyA9IGIuYyAtIGFjLCBibCA9IGIubCAtIGFsO1xuXHQgICAgaWYgKGlzTmFOKGJjKSkgYmMgPSAwLCBhYyA9IGlzTmFOKGFjKSA/IGIuYyA6IGFjO1xuXHQgICAgaWYgKGlzTmFOKGJoKSkgYmggPSAwLCBhaCA9IGlzTmFOKGFoKSA/IGIuaCA6IGFoOyBlbHNlIGlmIChiaCA+IDE4MCkgYmggLT0gMzYwOyBlbHNlIGlmIChiaCA8IC0xODApIGJoICs9IDM2MDtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiBkM19oY2xfbGFiKGFoICsgYmggKiB0LCBhYyArIGJjICogdCwgYWwgKyBibCAqIHQpICsgXCJcIjtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmludGVycG9sYXRlSHNsID0gZDNfaW50ZXJwb2xhdGVIc2w7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVIc2woYSwgYikge1xuXHQgICAgYSA9IGQzLmhzbChhKTtcblx0ICAgIGIgPSBkMy5oc2woYik7XG5cdCAgICB2YXIgYWggPSBhLmgsIGFzID0gYS5zLCBhbCA9IGEubCwgYmggPSBiLmggLSBhaCwgYnMgPSBiLnMgLSBhcywgYmwgPSBiLmwgLSBhbDtcblx0ICAgIGlmIChpc05hTihicykpIGJzID0gMCwgYXMgPSBpc05hTihhcykgPyBiLnMgOiBhcztcblx0ICAgIGlmIChpc05hTihiaCkpIGJoID0gMCwgYWggPSBpc05hTihhaCkgPyBiLmggOiBhaDsgZWxzZSBpZiAoYmggPiAxODApIGJoIC09IDM2MDsgZWxzZSBpZiAoYmggPCAtMTgwKSBiaCArPSAzNjA7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICByZXR1cm4gZDNfaHNsX3JnYihhaCArIGJoICogdCwgYXMgKyBicyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5pbnRlcnBvbGF0ZUxhYiA9IGQzX2ludGVycG9sYXRlTGFiO1xuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlTGFiKGEsIGIpIHtcblx0ICAgIGEgPSBkMy5sYWIoYSk7XG5cdCAgICBiID0gZDMubGFiKGIpO1xuXHQgICAgdmFyIGFsID0gYS5sLCBhYSA9IGEuYSwgYWIgPSBhLmIsIGJsID0gYi5sIC0gYWwsIGJhID0gYi5hIC0gYWEsIGJiID0gYi5iIC0gYWI7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICByZXR1cm4gZDNfbGFiX3JnYihhbCArIGJsICogdCwgYWEgKyBiYSAqIHQsIGFiICsgYmIgKiB0KSArIFwiXCI7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5pbnRlcnBvbGF0ZVJvdW5kID0gZDNfaW50ZXJwb2xhdGVSb3VuZDtcblx0ICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVJvdW5kKGEsIGIpIHtcblx0ICAgIGIgLT0gYTtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKyBiICogdCk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy50cmFuc2Zvcm0gPSBmdW5jdGlvbihzdHJpbmcpIHtcblx0ICAgIHZhciBnID0gZDNfZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGQzLm5zLnByZWZpeC5zdmcsIFwiZ1wiKTtcblx0ICAgIHJldHVybiAoZDMudHJhbnNmb3JtID0gZnVuY3Rpb24oc3RyaW5nKSB7XG5cdCAgICAgIGlmIChzdHJpbmcgIT0gbnVsbCkge1xuXHQgICAgICAgIGcuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHN0cmluZyk7XG5cdCAgICAgICAgdmFyIHQgPSBnLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG5ldyBkM190cmFuc2Zvcm0odCA/IHQubWF0cml4IDogZDNfdHJhbnNmb3JtSWRlbnRpdHkpO1xuXHQgICAgfSkoc3RyaW5nKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybShtKSB7XG5cdCAgICB2YXIgcjAgPSBbIG0uYSwgbS5iIF0sIHIxID0gWyBtLmMsIG0uZCBdLCBreCA9IGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShyMCksIGt6ID0gZDNfdHJhbnNmb3JtRG90KHIwLCByMSksIGt5ID0gZDNfdHJhbnNmb3JtTm9ybWFsaXplKGQzX3RyYW5zZm9ybUNvbWJpbmUocjEsIHIwLCAta3opKSB8fCAwO1xuXHQgICAgaWYgKHIwWzBdICogcjFbMV0gPCByMVswXSAqIHIwWzFdKSB7XG5cdCAgICAgIHIwWzBdICo9IC0xO1xuXHQgICAgICByMFsxXSAqPSAtMTtcblx0ICAgICAga3ggKj0gLTE7XG5cdCAgICAgIGt6ICo9IC0xO1xuXHQgICAgfVxuXHQgICAgdGhpcy5yb3RhdGUgPSAoa3ggPyBNYXRoLmF0YW4yKHIwWzFdLCByMFswXSkgOiBNYXRoLmF0YW4yKC1yMVswXSwgcjFbMV0pKSAqIGQzX2RlZ3JlZXM7XG5cdCAgICB0aGlzLnRyYW5zbGF0ZSA9IFsgbS5lLCBtLmYgXTtcblx0ICAgIHRoaXMuc2NhbGUgPSBbIGt4LCBreSBdO1xuXHQgICAgdGhpcy5za2V3ID0ga3kgPyBNYXRoLmF0YW4yKGt6LCBreSkgKiBkM19kZWdyZWVzIDogMDtcblx0ICB9XG5cdCAgZDNfdHJhbnNmb3JtLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy50cmFuc2xhdGUgKyBcIilyb3RhdGUoXCIgKyB0aGlzLnJvdGF0ZSArIFwiKXNrZXdYKFwiICsgdGhpcy5za2V3ICsgXCIpc2NhbGUoXCIgKyB0aGlzLnNjYWxlICsgXCIpXCI7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Eb3QoYSwgYikge1xuXHQgICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShhKSB7XG5cdCAgICB2YXIgayA9IE1hdGguc3FydChkM190cmFuc2Zvcm1Eb3QoYSwgYSkpO1xuXHQgICAgaWYgKGspIHtcblx0ICAgICAgYVswXSAvPSBrO1xuXHQgICAgICBhWzFdIC89IGs7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaztcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtQ29tYmluZShhLCBiLCBrKSB7XG5cdCAgICBhWzBdICs9IGsgKiBiWzBdO1xuXHQgICAgYVsxXSArPSBrICogYlsxXTtcblx0ICAgIHJldHVybiBhO1xuXHQgIH1cblx0ICB2YXIgZDNfdHJhbnNmb3JtSWRlbnRpdHkgPSB7XG5cdCAgICBhOiAxLFxuXHQgICAgYjogMCxcblx0ICAgIGM6IDAsXG5cdCAgICBkOiAxLFxuXHQgICAgZTogMCxcblx0ICAgIGY6IDBcblx0ICB9O1xuXHQgIGQzLmludGVycG9sYXRlVHJhbnNmb3JtID0gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm07XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3Aocykge1xuXHQgICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiLFwiIDogXCJcIjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVUcmFuc2xhdGUodGEsIHRiLCBzLCBxKSB7XG5cdCAgICBpZiAodGFbMF0gIT09IHRiWzBdIHx8IHRhWzFdICE9PSB0YlsxXSkge1xuXHQgICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcblx0ICAgICAgcS5wdXNoKHtcblx0ICAgICAgICBpOiBpIC0gNCxcblx0ICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVswXSwgdGJbMF0pXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICBpOiBpIC0gMixcblx0ICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVsxXSwgdGJbMV0pXG5cdCAgICAgIH0pO1xuXHQgICAgfSBlbHNlIGlmICh0YlswXSB8fCB0YlsxXSkge1xuXHQgICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB0YiArIFwiKVwiKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSb3RhdGUocmEsIHJiLCBzLCBxKSB7XG5cdCAgICBpZiAocmEgIT09IHJiKSB7XG5cdCAgICAgIGlmIChyYSAtIHJiID4gMTgwKSByYiArPSAzNjA7IGVsc2UgaWYgKHJiIC0gcmEgPiAxODApIHJhICs9IDM2MDtcblx0ICAgICAgcS5wdXNoKHtcblx0ICAgICAgICBpOiBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgXCIpXCIpIC0gMixcblx0ICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihyYSwgcmIpXG5cdCAgICAgIH0pO1xuXHQgICAgfSBlbHNlIGlmIChyYikge1xuXHQgICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInJvdGF0ZShcIiArIHJiICsgXCIpXCIpO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVNrZXcod2EsIHdiLCBzLCBxKSB7XG5cdCAgICBpZiAod2EgIT09IHdiKSB7XG5cdCAgICAgIHEucHVzaCh7XG5cdCAgICAgICAgaTogcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgXCIpXCIpIC0gMixcblx0ICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih3YSwgd2IpXG5cdCAgICAgIH0pO1xuXHQgICAgfSBlbHNlIGlmICh3Yikge1xuXHQgICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNrZXdYKFwiICsgd2IgKyBcIilcIik7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU2NhbGUoa2EsIGtiLCBzLCBxKSB7XG5cdCAgICBpZiAoa2FbMF0gIT09IGtiWzBdIHx8IGthWzFdICE9PSBrYlsxXSkge1xuXHQgICAgICB2YXIgaSA9IHMucHVzaChkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG5cdCAgICAgIHEucHVzaCh7XG5cdCAgICAgICAgaTogaSAtIDQsXG5cdCAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIoa2FbMF0sIGtiWzBdKVxuXHQgICAgICB9LCB7XG5cdCAgICAgICAgaTogaSAtIDIsXG5cdCAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIoa2FbMV0sIGtiWzFdKVxuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSBpZiAoa2JbMF0gIT09IDEgfHwga2JbMV0gIT09IDEpIHtcblx0ICAgICAgcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJzY2FsZShcIiArIGtiICsgXCIpXCIpO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybShhLCBiKSB7XG5cdCAgICB2YXIgcyA9IFtdLCBxID0gW107XG5cdCAgICBhID0gZDMudHJhbnNmb3JtKGEpLCBiID0gZDMudHJhbnNmb3JtKGIpO1xuXHQgICAgZDNfaW50ZXJwb2xhdGVUcmFuc2xhdGUoYS50cmFuc2xhdGUsIGIudHJhbnNsYXRlLCBzLCBxKTtcblx0ICAgIGQzX2ludGVycG9sYXRlUm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG5cdCAgICBkM19pbnRlcnBvbGF0ZVNrZXcoYS5za2V3LCBiLnNrZXcsIHMsIHEpO1xuXHQgICAgZDNfaW50ZXJwb2xhdGVTY2FsZShhLnNjYWxlLCBiLnNjYWxlLCBzLCBxKTtcblx0ICAgIGEgPSBiID0gbnVsbDtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcblx0ICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3VuaW50ZXJwb2xhdGVOdW1iZXIoYSwgYikge1xuXHQgICAgYiA9IChiIC09IGEgPSArYSkgfHwgMSAvIGI7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gKHggLSBhKSAvIGI7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM191bmludGVycG9sYXRlQ2xhbXAoYSwgYikge1xuXHQgICAgYiA9IChiIC09IGEgPSArYSkgfHwgMSAvIGI7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKHggLSBhKSAvIGIpKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmxheW91dCA9IHt9O1xuXHQgIGQzLmxheW91dC5idW5kbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbihsaW5rcykge1xuXHQgICAgICB2YXIgcGF0aHMgPSBbXSwgaSA9IC0xLCBuID0gbGlua3MubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgcGF0aHMucHVzaChkM19sYXlvdXRfYnVuZGxlUGF0aChsaW5rc1tpXSkpO1xuXHQgICAgICByZXR1cm4gcGF0aHM7XG5cdCAgICB9O1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZVBhdGgobGluaykge1xuXHQgICAgdmFyIHN0YXJ0ID0gbGluay5zb3VyY2UsIGVuZCA9IGxpbmsudGFyZ2V0LCBsY2EgPSBkM19sYXlvdXRfYnVuZGxlTGVhc3RDb21tb25BbmNlc3RvcihzdGFydCwgZW5kKSwgcG9pbnRzID0gWyBzdGFydCBdO1xuXHQgICAgd2hpbGUgKHN0YXJ0ICE9PSBsY2EpIHtcblx0ICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG5cdCAgICAgIHBvaW50cy5wdXNoKHN0YXJ0KTtcblx0ICAgIH1cblx0ICAgIHZhciBrID0gcG9pbnRzLmxlbmd0aDtcblx0ICAgIHdoaWxlIChlbmQgIT09IGxjYSkge1xuXHQgICAgICBwb2ludHMuc3BsaWNlKGssIDAsIGVuZCk7XG5cdCAgICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcG9pbnRzO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfYnVuZGxlQW5jZXN0b3JzKG5vZGUpIHtcblx0ICAgIHZhciBhbmNlc3RvcnMgPSBbXSwgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG5cdCAgICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcblx0ICAgICAgYW5jZXN0b3JzLnB1c2gobm9kZSk7XG5cdCAgICAgIG5vZGUgPSBwYXJlbnQ7XG5cdCAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG5cdCAgICB9XG5cdCAgICBhbmNlc3RvcnMucHVzaChub2RlKTtcblx0ICAgIHJldHVybiBhbmNlc3RvcnM7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9idW5kbGVMZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcblx0ICAgIGlmIChhID09PSBiKSByZXR1cm4gYTtcblx0ICAgIHZhciBhTm9kZXMgPSBkM19sYXlvdXRfYnVuZGxlQW5jZXN0b3JzKGEpLCBiTm9kZXMgPSBkM19sYXlvdXRfYnVuZGxlQW5jZXN0b3JzKGIpLCBhTm9kZSA9IGFOb2Rlcy5wb3AoKSwgYk5vZGUgPSBiTm9kZXMucG9wKCksIHNoYXJlZE5vZGUgPSBudWxsO1xuXHQgICAgd2hpbGUgKGFOb2RlID09PSBiTm9kZSkge1xuXHQgICAgICBzaGFyZWROb2RlID0gYU5vZGU7XG5cdCAgICAgIGFOb2RlID0gYU5vZGVzLnBvcCgpO1xuXHQgICAgICBiTm9kZSA9IGJOb2Rlcy5wb3AoKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBzaGFyZWROb2RlO1xuXHQgIH1cblx0ICBkMy5sYXlvdXQuY2hvcmQgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBjaG9yZCA9IHt9LCBjaG9yZHMsIGdyb3VwcywgbWF0cml4LCBuLCBwYWRkaW5nID0gMCwgc29ydEdyb3Vwcywgc29ydFN1Ymdyb3Vwcywgc29ydENob3Jkcztcblx0ICAgIGZ1bmN0aW9uIHJlbGF5b3V0KCkge1xuXHQgICAgICB2YXIgc3ViZ3JvdXBzID0ge30sIGdyb3VwU3VtcyA9IFtdLCBncm91cEluZGV4ID0gZDMucmFuZ2UobiksIHN1Ymdyb3VwSW5kZXggPSBbXSwgaywgeCwgeDAsIGksIGo7XG5cdCAgICAgIGNob3JkcyA9IFtdO1xuXHQgICAgICBncm91cHMgPSBbXTtcblx0ICAgICAgayA9IDAsIGkgPSAtMTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICB4ID0gMCwgaiA9IC0xO1xuXHQgICAgICAgIHdoaWxlICgrK2ogPCBuKSB7XG5cdCAgICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XG5cdCAgICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKGQzLnJhbmdlKG4pKTtcblx0ICAgICAgICBrICs9IHg7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHNvcnRHcm91cHMpIHtcblx0ICAgICAgICBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHQgICAgICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzb3J0U3ViZ3JvdXBzKSB7XG5cdCAgICAgICAgc3ViZ3JvdXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGQsIGkpIHtcblx0ICAgICAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIGsgPSAoz4QgLSBwYWRkaW5nICogbikgLyBrO1xuXHQgICAgICB4ID0gMCwgaSA9IC0xO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgIHgwID0geCwgaiA9IC0xO1xuXHQgICAgICAgIHdoaWxlICgrK2ogPCBuKSB7XG5cdCAgICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLCBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLCB2ID0gbWF0cml4W2RpXVtkal0sIGEwID0geCwgYTEgPSB4ICs9IHYgKiBrO1xuXHQgICAgICAgICAgc3ViZ3JvdXBzW2RpICsgXCItXCIgKyBkal0gPSB7XG5cdCAgICAgICAgICAgIGluZGV4OiBkaSxcblx0ICAgICAgICAgICAgc3ViaW5kZXg6IGRqLFxuXHQgICAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcblx0ICAgICAgICAgICAgZW5kQW5nbGU6IGExLFxuXHQgICAgICAgICAgICB2YWx1ZTogdlxuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZ3JvdXBzW2RpXSA9IHtcblx0ICAgICAgICAgIGluZGV4OiBkaSxcblx0ICAgICAgICAgIHN0YXJ0QW5nbGU6IHgwLFxuXHQgICAgICAgICAgZW5kQW5nbGU6IHgsXG5cdCAgICAgICAgICB2YWx1ZTogZ3JvdXBTdW1zW2RpXVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgeCArPSBwYWRkaW5nO1xuXHQgICAgICB9XG5cdCAgICAgIGkgPSAtMTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBqID0gaSAtIDE7XG5cdCAgICAgICAgd2hpbGUgKCsraiA8IG4pIHtcblx0ICAgICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaSArIFwiLVwiICsgal0sIHRhcmdldCA9IHN1Ymdyb3Vwc1tqICsgXCItXCIgKyBpXTtcblx0ICAgICAgICAgIGlmIChzb3VyY2UudmFsdWUgfHwgdGFyZ2V0LnZhbHVlKSB7XG5cdCAgICAgICAgICAgIGNob3Jkcy5wdXNoKHNvdXJjZS52YWx1ZSA8IHRhcmdldC52YWx1ZSA/IHtcblx0ICAgICAgICAgICAgICBzb3VyY2U6IHRhcmdldCxcblx0ICAgICAgICAgICAgICB0YXJnZXQ6IHNvdXJjZVxuXHQgICAgICAgICAgICB9IDoge1xuXHQgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuXHQgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAoc29ydENob3JkcykgcmVzb3J0KCk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByZXNvcnQoKSB7XG5cdCAgICAgIGNob3Jkcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0ICAgICAgICByZXR1cm4gc29ydENob3JkcygoYS5zb3VyY2UudmFsdWUgKyBhLnRhcmdldC52YWx1ZSkgLyAyLCAoYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZSkgLyAyKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBjaG9yZC5tYXRyaXggPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1hdHJpeDtcblx0ICAgICAgbiA9IChtYXRyaXggPSB4KSAmJiBtYXRyaXgubGVuZ3RoO1xuXHQgICAgICBjaG9yZHMgPSBncm91cHMgPSBudWxsO1xuXHQgICAgICByZXR1cm4gY2hvcmQ7XG5cdCAgICB9O1xuXHQgICAgY2hvcmQucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkZGluZztcblx0ICAgICAgcGFkZGluZyA9IHg7XG5cdCAgICAgIGNob3JkcyA9IGdyb3VwcyA9IG51bGw7XG5cdCAgICAgIHJldHVybiBjaG9yZDtcblx0ICAgIH07XG5cdCAgICBjaG9yZC5zb3J0R3JvdXBzID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0R3JvdXBzO1xuXHQgICAgICBzb3J0R3JvdXBzID0geDtcblx0ICAgICAgY2hvcmRzID0gZ3JvdXBzID0gbnVsbDtcblx0ICAgICAgcmV0dXJuIGNob3JkO1xuXHQgICAgfTtcblx0ICAgIGNob3JkLnNvcnRTdWJncm91cHMgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnRTdWJncm91cHM7XG5cdCAgICAgIHNvcnRTdWJncm91cHMgPSB4O1xuXHQgICAgICBjaG9yZHMgPSBudWxsO1xuXHQgICAgICByZXR1cm4gY2hvcmQ7XG5cdCAgICB9O1xuXHQgICAgY2hvcmQuc29ydENob3JkcyA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydENob3Jkcztcblx0ICAgICAgc29ydENob3JkcyA9IHg7XG5cdCAgICAgIGlmIChjaG9yZHMpIHJlc29ydCgpO1xuXHQgICAgICByZXR1cm4gY2hvcmQ7XG5cdCAgICB9O1xuXHQgICAgY2hvcmQuY2hvcmRzID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICghY2hvcmRzKSByZWxheW91dCgpO1xuXHQgICAgICByZXR1cm4gY2hvcmRzO1xuXHQgICAgfTtcblx0ICAgIGNob3JkLmdyb3VwcyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAoIWdyb3VwcykgcmVsYXlvdXQoKTtcblx0ICAgICAgcmV0dXJuIGdyb3Vwcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gY2hvcmQ7XG5cdCAgfTtcblx0ICBkMy5sYXlvdXQuZm9yY2UgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBmb3JjZSA9IHt9LCBldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIiwgXCJ0aWNrXCIsIFwiZW5kXCIpLCB0aW1lciwgc2l6ZSA9IFsgMSwgMSBdLCBkcmFnLCBhbHBoYSwgZnJpY3Rpb24gPSAuOSwgbGlua0Rpc3RhbmNlID0gZDNfbGF5b3V0X2ZvcmNlTGlua0Rpc3RhbmNlLCBsaW5rU3RyZW5ndGggPSBkM19sYXlvdXRfZm9yY2VMaW5rU3RyZW5ndGgsIGNoYXJnZSA9IC0zMCwgY2hhcmdlRGlzdGFuY2UyID0gZDNfbGF5b3V0X2ZvcmNlQ2hhcmdlRGlzdGFuY2UyLCBncmF2aXR5ID0gLjEsIHRoZXRhMiA9IC42NCwgbm9kZXMgPSBbXSwgbGlua3MgPSBbXSwgZGlzdGFuY2VzLCBzdHJlbmd0aHMsIGNoYXJnZXM7XG5cdCAgICBmdW5jdGlvbiByZXB1bHNlKG5vZGUpIHtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uKHF1YWQsIHgxLCBfLCB4Mikge1xuXHQgICAgICAgIGlmIChxdWFkLnBvaW50ICE9PSBub2RlKSB7XG5cdCAgICAgICAgICB2YXIgZHggPSBxdWFkLmN4IC0gbm9kZS54LCBkeSA9IHF1YWQuY3kgLSBub2RlLnksIGR3ID0geDIgLSB4MSwgZG4gPSBkeCAqIGR4ICsgZHkgKiBkeTtcblx0ICAgICAgICAgIGlmIChkdyAqIGR3IC8gdGhldGEyIDwgZG4pIHtcblx0ICAgICAgICAgICAgaWYgKGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG5cdCAgICAgICAgICAgICAgdmFyIGsgPSBxdWFkLmNoYXJnZSAvIGRuO1xuXHQgICAgICAgICAgICAgIG5vZGUucHggLT0gZHggKiBrO1xuXHQgICAgICAgICAgICAgIG5vZGUucHkgLT0gZHkgKiBrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKHF1YWQucG9pbnQgJiYgZG4gJiYgZG4gPCBjaGFyZ2VEaXN0YW5jZTIpIHtcblx0ICAgICAgICAgICAgdmFyIGsgPSBxdWFkLnBvaW50Q2hhcmdlIC8gZG47XG5cdCAgICAgICAgICAgIG5vZGUucHggLT0gZHggKiBrO1xuXHQgICAgICAgICAgICBub2RlLnB5IC09IGR5ICogaztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuICFxdWFkLmNoYXJnZTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGZvcmNlLnRpY2sgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKChhbHBoYSAqPSAuOTkpIDwgLjAwNSkge1xuXHQgICAgICAgIHRpbWVyID0gbnVsbDtcblx0ICAgICAgICBldmVudC5lbmQoe1xuXHQgICAgICAgICAgdHlwZTogXCJlbmRcIixcblx0ICAgICAgICAgIGFscGhhOiBhbHBoYSA9IDBcblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgbiA9IG5vZGVzLmxlbmd0aCwgbSA9IGxpbmtzLmxlbmd0aCwgcSwgaSwgbywgcywgdCwgbCwgaywgeCwgeTtcblx0ICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkge1xuXHQgICAgICAgIG8gPSBsaW5rc1tpXTtcblx0ICAgICAgICBzID0gby5zb3VyY2U7XG5cdCAgICAgICAgdCA9IG8udGFyZ2V0O1xuXHQgICAgICAgIHggPSB0LnggLSBzLng7XG5cdCAgICAgICAgeSA9IHQueSAtIHMueTtcblx0ICAgICAgICBpZiAobCA9IHggKiB4ICsgeSAqIHkpIHtcblx0ICAgICAgICAgIGwgPSBhbHBoYSAqIHN0cmVuZ3Roc1tpXSAqICgobCA9IE1hdGguc3FydChsKSkgLSBkaXN0YW5jZXNbaV0pIC8gbDtcblx0ICAgICAgICAgIHggKj0gbDtcblx0ICAgICAgICAgIHkgKj0gbDtcblx0ICAgICAgICAgIHQueCAtPSB4ICogKGsgPSBzLndlaWdodCArIHQud2VpZ2h0ID8gcy53ZWlnaHQgLyAocy53ZWlnaHQgKyB0LndlaWdodCkgOiAuNSk7XG5cdCAgICAgICAgICB0LnkgLT0geSAqIGs7XG5cdCAgICAgICAgICBzLnggKz0geCAqIChrID0gMSAtIGspO1xuXHQgICAgICAgICAgcy55ICs9IHkgKiBrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAoayA9IGFscGhhICogZ3Jhdml0eSkge1xuXHQgICAgICAgIHggPSBzaXplWzBdIC8gMjtcblx0ICAgICAgICB5ID0gc2l6ZVsxXSAvIDI7XG5cdCAgICAgICAgaSA9IC0xO1xuXHQgICAgICAgIGlmIChrKSB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgICAgbyA9IG5vZGVzW2ldO1xuXHQgICAgICAgICAgby54ICs9ICh4IC0gby54KSAqIGs7XG5cdCAgICAgICAgICBvLnkgKz0gKHkgLSBvLnkpICogaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGNoYXJnZSkge1xuXHQgICAgICAgIGQzX2xheW91dF9mb3JjZUFjY3VtdWxhdGUocSA9IGQzLmdlb20ucXVhZHRyZWUobm9kZXMpLCBhbHBoYSwgY2hhcmdlcyk7XG5cdCAgICAgICAgaSA9IC0xO1xuXHQgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgICBpZiAoIShvID0gbm9kZXNbaV0pLmZpeGVkKSB7XG5cdCAgICAgICAgICAgIHEudmlzaXQocmVwdWxzZShvKSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGkgPSAtMTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBvID0gbm9kZXNbaV07XG5cdCAgICAgICAgaWYgKG8uZml4ZWQpIHtcblx0ICAgICAgICAgIG8ueCA9IG8ucHg7XG5cdCAgICAgICAgICBvLnkgPSBvLnB5O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBvLnggLT0gKG8ucHggLSAoby5weCA9IG8ueCkpICogZnJpY3Rpb247XG5cdCAgICAgICAgICBvLnkgLT0gKG8ucHkgLSAoby5weSA9IG8ueSkpICogZnJpY3Rpb247XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGV2ZW50LnRpY2soe1xuXHQgICAgICAgIHR5cGU6IFwidGlja1wiLFxuXHQgICAgICAgIGFscGhhOiBhbHBoYVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5ub2RlcyA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZXM7XG5cdCAgICAgIG5vZGVzID0geDtcblx0ICAgICAgcmV0dXJuIGZvcmNlO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLmxpbmtzID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rcztcblx0ICAgICAgbGlua3MgPSB4O1xuXHQgICAgICByZXR1cm4gZm9yY2U7XG5cdCAgICB9O1xuXHQgICAgZm9yY2Uuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcblx0ICAgICAgc2l6ZSA9IHg7XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5saW5rRGlzdGFuY2UgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmtEaXN0YW5jZTtcblx0ICAgICAgbGlua0Rpc3RhbmNlID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAreDtcblx0ICAgICAgcmV0dXJuIGZvcmNlO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLmRpc3RhbmNlID0gZm9yY2UubGlua0Rpc3RhbmNlO1xuXHQgICAgZm9yY2UubGlua1N0cmVuZ3RoID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rU3RyZW5ndGg7XG5cdCAgICAgIGxpbmtTdHJlbmd0aCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5mcmljdGlvbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZnJpY3Rpb247XG5cdCAgICAgIGZyaWN0aW9uID0gK3g7XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5jaGFyZ2UgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNoYXJnZTtcblx0ICAgICAgY2hhcmdlID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAreDtcblx0ICAgICAgcmV0dXJuIGZvcmNlO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLmNoYXJnZURpc3RhbmNlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQoY2hhcmdlRGlzdGFuY2UyKTtcblx0ICAgICAgY2hhcmdlRGlzdGFuY2UyID0geCAqIHg7XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5ncmF2aXR5ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF2aXR5O1xuXHQgICAgICBncmF2aXR5ID0gK3g7XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gTWF0aC5zcXJ0KHRoZXRhMik7XG5cdCAgICAgIHRoZXRhMiA9IHggKiB4O1xuXHQgICAgICByZXR1cm4gZm9yY2U7XG5cdCAgICB9O1xuXHQgICAgZm9yY2UuYWxwaGEgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGFscGhhO1xuXHQgICAgICB4ID0gK3g7XG5cdCAgICAgIGlmIChhbHBoYSkge1xuXHQgICAgICAgIGlmICh4ID4gMCkge1xuXHQgICAgICAgICAgYWxwaGEgPSB4O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB0aW1lci5jID0gbnVsbCwgdGltZXIudCA9IE5hTiwgdGltZXIgPSBudWxsO1xuXHQgICAgICAgICAgZXZlbnQuZW5kKHtcblx0ICAgICAgICAgICAgdHlwZTogXCJlbmRcIixcblx0ICAgICAgICAgICAgYWxwaGE6IGFscGhhID0gMFxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKHggPiAwKSB7XG5cdCAgICAgICAgZXZlbnQuc3RhcnQoe1xuXHQgICAgICAgICAgdHlwZTogXCJzdGFydFwiLFxuXHQgICAgICAgICAgYWxwaGE6IGFscGhhID0geFxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRpbWVyID0gZDNfdGltZXIoZm9yY2UudGljayk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGZvcmNlO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBtID0gbGlua3MubGVuZ3RoLCB3ID0gc2l6ZVswXSwgaCA9IHNpemVbMV0sIG5laWdoYm9ycywgbztcblx0ICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuXHQgICAgICAgIChvID0gbm9kZXNbaV0pLmluZGV4ID0gaTtcblx0ICAgICAgICBvLndlaWdodCA9IDA7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkge1xuXHQgICAgICAgIG8gPSBsaW5rc1tpXTtcblx0ICAgICAgICBpZiAodHlwZW9mIG8uc291cmNlID09IFwibnVtYmVyXCIpIG8uc291cmNlID0gbm9kZXNbby5zb3VyY2VdO1xuXHQgICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQgPT0gXCJudW1iZXJcIikgby50YXJnZXQgPSBub2Rlc1tvLnRhcmdldF07XG5cdCAgICAgICAgKytvLnNvdXJjZS53ZWlnaHQ7XG5cdCAgICAgICAgKytvLnRhcmdldC53ZWlnaHQ7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuXHQgICAgICAgIG8gPSBub2Rlc1tpXTtcblx0ICAgICAgICBpZiAoaXNOYU4oby54KSkgby54ID0gcG9zaXRpb24oXCJ4XCIsIHcpO1xuXHQgICAgICAgIGlmIChpc05hTihvLnkpKSBvLnkgPSBwb3NpdGlvbihcInlcIiwgaCk7XG5cdCAgICAgICAgaWYgKGlzTmFOKG8ucHgpKSBvLnB4ID0gby54O1xuXHQgICAgICAgIGlmIChpc05hTihvLnB5KSkgby5weSA9IG8ueTtcblx0ICAgICAgfVxuXHQgICAgICBkaXN0YW5jZXMgPSBbXTtcblx0ICAgICAgaWYgKHR5cGVvZiBsaW5rRGlzdGFuY2UgPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG07ICsraSkgZGlzdGFuY2VzW2ldID0gK2xpbmtEaXN0YW5jZS5jYWxsKHRoaXMsIGxpbmtzW2ldLCBpKTsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBkaXN0YW5jZXNbaV0gPSBsaW5rRGlzdGFuY2U7XG5cdCAgICAgIHN0cmVuZ3RocyA9IFtdO1xuXHQgICAgICBpZiAodHlwZW9mIGxpbmtTdHJlbmd0aCA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBzdHJlbmd0aHNbaV0gPSArbGlua1N0cmVuZ3RoLmNhbGwodGhpcywgbGlua3NbaV0sIGkpOyBlbHNlIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHN0cmVuZ3Roc1tpXSA9IGxpbmtTdHJlbmd0aDtcblx0ICAgICAgY2hhcmdlcyA9IFtdO1xuXHQgICAgICBpZiAodHlwZW9mIGNoYXJnZSA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGFyZ2VzW2ldID0gK2NoYXJnZS5jYWxsKHRoaXMsIG5vZGVzW2ldLCBpKTsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGFyZ2VzW2ldID0gY2hhcmdlO1xuXHQgICAgICBmdW5jdGlvbiBwb3NpdGlvbihkaW1lbnNpb24sIHNpemUpIHtcblx0ICAgICAgICBpZiAoIW5laWdoYm9ycykge1xuXHQgICAgICAgICAgbmVpZ2hib3JzID0gbmV3IEFycmF5KG4pO1xuXHQgICAgICAgICAgZm9yIChqID0gMDsgaiA8IG47ICsraikge1xuXHQgICAgICAgICAgICBuZWlnaGJvcnNbal0gPSBbXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcblx0ICAgICAgICAgICAgdmFyIG8gPSBsaW5rc1tqXTtcblx0ICAgICAgICAgICAgbmVpZ2hib3JzW28uc291cmNlLmluZGV4XS5wdXNoKG8udGFyZ2V0KTtcblx0ICAgICAgICAgICAgbmVpZ2hib3JzW28udGFyZ2V0LmluZGV4XS5wdXNoKG8uc291cmNlKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGNhbmRpZGF0ZXMgPSBuZWlnaGJvcnNbaV0sIGogPSAtMSwgbCA9IGNhbmRpZGF0ZXMubGVuZ3RoLCB4O1xuXHQgICAgICAgIHdoaWxlICgrK2ogPCBsKSBpZiAoIWlzTmFOKHggPSBjYW5kaWRhdGVzW2pdW2RpbWVuc2lvbl0pKSByZXR1cm4geDtcblx0ICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIHNpemU7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGZvcmNlLnJlc3VtZSgpO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZm9yY2UuYWxwaGEoLjEpO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGZvcmNlLmFscGhhKDApO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLmRyYWcgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKCFkcmFnKSBkcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpLm9yaWdpbihkM19pZGVudGl0eSkub24oXCJkcmFnc3RhcnQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KS5vbihcImRyYWcuZm9yY2VcIiwgZHJhZ21vdmUpLm9uKFwiZHJhZ2VuZC5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VEcmFnZW5kKTtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZHJhZztcblx0ICAgICAgdGhpcy5vbihcIm1vdXNlb3Zlci5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VNb3VzZW92ZXIpLm9uKFwibW91c2VvdXQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlTW91c2VvdXQpLmNhbGwoZHJhZyk7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gZHJhZ21vdmUoZCkge1xuXHQgICAgICBkLnB4ID0gZDMuZXZlbnQueCwgZC5weSA9IGQzLmV2ZW50Lnk7XG5cdCAgICAgIGZvcmNlLnJlc3VtZSgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzLnJlYmluZChmb3JjZSwgZXZlbnQsIFwib25cIik7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VEcmFnc3RhcnQoZCkge1xuXHQgICAgZC5maXhlZCB8PSAyO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VEcmFnZW5kKGQpIHtcblx0ICAgIGQuZml4ZWQgJj0gfjY7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZU1vdXNlb3ZlcihkKSB7XG5cdCAgICBkLmZpeGVkIHw9IDQ7XG5cdCAgICBkLnB4ID0gZC54LCBkLnB5ID0gZC55O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VNb3VzZW91dChkKSB7XG5cdCAgICBkLmZpeGVkICY9IH40O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VBY2N1bXVsYXRlKHF1YWQsIGFscGhhLCBjaGFyZ2VzKSB7XG5cdCAgICB2YXIgY3ggPSAwLCBjeSA9IDA7XG5cdCAgICBxdWFkLmNoYXJnZSA9IDA7XG5cdCAgICBpZiAoIXF1YWQubGVhZikge1xuXHQgICAgICB2YXIgbm9kZXMgPSBxdWFkLm5vZGVzLCBuID0gbm9kZXMubGVuZ3RoLCBpID0gLTEsIGM7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgYyA9IG5vZGVzW2ldO1xuXHQgICAgICAgIGlmIChjID09IG51bGwpIGNvbnRpbnVlO1xuXHQgICAgICAgIGQzX2xheW91dF9mb3JjZUFjY3VtdWxhdGUoYywgYWxwaGEsIGNoYXJnZXMpO1xuXHQgICAgICAgIHF1YWQuY2hhcmdlICs9IGMuY2hhcmdlO1xuXHQgICAgICAgIGN4ICs9IGMuY2hhcmdlICogYy5jeDtcblx0ICAgICAgICBjeSArPSBjLmNoYXJnZSAqIGMuY3k7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChxdWFkLnBvaW50KSB7XG5cdCAgICAgIGlmICghcXVhZC5sZWFmKSB7XG5cdCAgICAgICAgcXVhZC5wb2ludC54ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcblx0ICAgICAgICBxdWFkLnBvaW50LnkgKz0gTWF0aC5yYW5kb20oKSAtIC41O1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBrID0gYWxwaGEgKiBjaGFyZ2VzW3F1YWQucG9pbnQuaW5kZXhdO1xuXHQgICAgICBxdWFkLmNoYXJnZSArPSBxdWFkLnBvaW50Q2hhcmdlID0gaztcblx0ICAgICAgY3ggKz0gayAqIHF1YWQucG9pbnQueDtcblx0ICAgICAgY3kgKz0gayAqIHF1YWQucG9pbnQueTtcblx0ICAgIH1cblx0ICAgIHF1YWQuY3ggPSBjeCAvIHF1YWQuY2hhcmdlO1xuXHQgICAgcXVhZC5jeSA9IGN5IC8gcXVhZC5jaGFyZ2U7XG5cdCAgfVxuXHQgIHZhciBkM19sYXlvdXRfZm9yY2VMaW5rRGlzdGFuY2UgPSAyMCwgZDNfbGF5b3V0X2ZvcmNlTGlua1N0cmVuZ3RoID0gMSwgZDNfbGF5b3V0X2ZvcmNlQ2hhcmdlRGlzdGFuY2UyID0gSW5maW5pdHk7XG5cdCAgZDMubGF5b3V0LmhpZXJhcmNoeSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHNvcnQgPSBkM19sYXlvdXRfaGllcmFyY2h5U29ydCwgY2hpbGRyZW4gPSBkM19sYXlvdXRfaGllcmFyY2h5Q2hpbGRyZW4sIHZhbHVlID0gZDNfbGF5b3V0X2hpZXJhcmNoeVZhbHVlO1xuXHQgICAgZnVuY3Rpb24gaGllcmFyY2h5KHJvb3QpIHtcblx0ICAgICAgdmFyIHN0YWNrID0gWyByb290IF0sIG5vZGVzID0gW10sIG5vZGU7XG5cdCAgICAgIHJvb3QuZGVwdGggPSAwO1xuXHQgICAgICB3aGlsZSAoKG5vZGUgPSBzdGFjay5wb3AoKSkgIT0gbnVsbCkge1xuXHQgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG5cdCAgICAgICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbi5jYWxsKGhpZXJhcmNoeSwgbm9kZSwgbm9kZS5kZXB0aCkpICYmIChuID0gY2hpbGRzLmxlbmd0aCkpIHtcblx0ICAgICAgICAgIHZhciBuLCBjaGlsZHMsIGNoaWxkO1xuXHQgICAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG5cdCAgICAgICAgICAgIHN0YWNrLnB1c2goY2hpbGQgPSBjaGlsZHNbbl0pO1xuXHQgICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuXHQgICAgICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKHZhbHVlKSBub2RlLnZhbHVlID0gMDtcblx0ICAgICAgICAgIG5vZGUuY2hpbGRyZW4gPSBjaGlsZHM7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGlmICh2YWx1ZSkgbm9kZS52YWx1ZSA9ICt2YWx1ZS5jYWxsKGhpZXJhcmNoeSwgbm9kZSwgbm9kZS5kZXB0aCkgfHwgMDtcblx0ICAgICAgICAgIGRlbGV0ZSBub2RlLmNoaWxkcmVuO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgdmFyIGNoaWxkcywgcGFyZW50O1xuXHQgICAgICAgIGlmIChzb3J0ICYmIChjaGlsZHMgPSBub2RlLmNoaWxkcmVuKSkgY2hpbGRzLnNvcnQoc29ydCk7XG5cdCAgICAgICAgaWYgKHZhbHVlICYmIChwYXJlbnQgPSBub2RlLnBhcmVudCkpIHBhcmVudC52YWx1ZSArPSBub2RlLnZhbHVlO1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIG5vZGVzO1xuXHQgICAgfVxuXHQgICAgaGllcmFyY2h5LnNvcnQgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnQ7XG5cdCAgICAgIHNvcnQgPSB4O1xuXHQgICAgICByZXR1cm4gaGllcmFyY2h5O1xuXHQgICAgfTtcblx0ICAgIGhpZXJhcmNoeS5jaGlsZHJlbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2hpbGRyZW47XG5cdCAgICAgIGNoaWxkcmVuID0geDtcblx0ICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcblx0ICAgIH07XG5cdCAgICBoaWVyYXJjaHkudmFsdWUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlO1xuXHQgICAgICB2YWx1ZSA9IHg7XG5cdCAgICAgIHJldHVybiBoaWVyYXJjaHk7XG5cdCAgICB9O1xuXHQgICAgaGllcmFyY2h5LnJldmFsdWUgPSBmdW5jdGlvbihyb290KSB7XG5cdCAgICAgIGlmICh2YWx1ZSkge1xuXHQgICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290LCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikgbm9kZS52YWx1ZSA9IDA7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICAgICAgdmFyIHBhcmVudDtcblx0ICAgICAgICAgIGlmICghbm9kZS5jaGlsZHJlbikgbm9kZS52YWx1ZSA9ICt2YWx1ZS5jYWxsKGhpZXJhcmNoeSwgbm9kZSwgbm9kZS5kZXB0aCkgfHwgMDtcblx0ICAgICAgICAgIGlmIChwYXJlbnQgPSBub2RlLnBhcmVudCkgcGFyZW50LnZhbHVlICs9IG5vZGUudmFsdWU7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJvb3Q7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGhpZXJhcmNoeTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQob2JqZWN0LCBoaWVyYXJjaHkpIHtcblx0ICAgIGQzLnJlYmluZChvYmplY3QsIGhpZXJhcmNoeSwgXCJzb3J0XCIsIFwiY2hpbGRyZW5cIiwgXCJ2YWx1ZVwiKTtcblx0ICAgIG9iamVjdC5ub2RlcyA9IG9iamVjdDtcblx0ICAgIG9iamVjdC5saW5rcyA9IGQzX2xheW91dF9oaWVyYXJjaHlMaW5rcztcblx0ICAgIHJldHVybiBvYmplY3Q7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShub2RlLCBjYWxsYmFjaykge1xuXHQgICAgdmFyIG5vZGVzID0gWyBub2RlIF07XG5cdCAgICB3aGlsZSAoKG5vZGUgPSBub2Rlcy5wb3AoKSkgIT0gbnVsbCkge1xuXHQgICAgICBjYWxsYmFjayhub2RlKTtcblx0ICAgICAgaWYgKChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuXHQgICAgICAgIHZhciBuLCBjaGlsZHJlbjtcblx0ICAgICAgICB3aGlsZSAoLS1uID49IDApIG5vZGVzLnB1c2goY2hpbGRyZW5bbl0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKG5vZGUsIGNhbGxiYWNrKSB7XG5cdCAgICB2YXIgbm9kZXMgPSBbIG5vZGUgXSwgbm9kZXMyID0gW107XG5cdCAgICB3aGlsZSAoKG5vZGUgPSBub2Rlcy5wb3AoKSkgIT0gbnVsbCkge1xuXHQgICAgICBub2RlczIucHVzaChub2RlKTtcblx0ICAgICAgaWYgKChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuXHQgICAgICAgIHZhciBpID0gLTEsIG4sIGNoaWxkcmVuO1xuXHQgICAgICAgIHdoaWxlICgrK2kgPCBuKSBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgd2hpbGUgKChub2RlID0gbm9kZXMyLnBvcCgpKSAhPSBudWxsKSB7XG5cdCAgICAgIGNhbGxiYWNrKG5vZGUpO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5Q2hpbGRyZW4oZCkge1xuXHQgICAgcmV0dXJuIGQuY2hpbGRyZW47XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZShkKSB7XG5cdCAgICByZXR1cm4gZC52YWx1ZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQoYSwgYikge1xuXHQgICAgcmV0dXJuIGIudmFsdWUgLSBhLnZhbHVlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5TGlua3Mobm9kZXMpIHtcblx0ICAgIHJldHVybiBkMy5tZXJnZShub2Rlcy5tYXAoZnVuY3Rpb24ocGFyZW50KSB7XG5cdCAgICAgIHJldHVybiAocGFyZW50LmNoaWxkcmVuIHx8IFtdKS5tYXAoZnVuY3Rpb24oY2hpbGQpIHtcblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgc291cmNlOiBwYXJlbnQsXG5cdCAgICAgICAgICB0YXJnZXQ6IGNoaWxkXG5cdCAgICAgICAgfTtcblx0ICAgICAgfSk7XG5cdCAgICB9KSk7XG5cdCAgfVxuXHQgIGQzLmxheW91dC5wYXJ0aXRpb24gPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCksIHNpemUgPSBbIDEsIDEgXTtcblx0ICAgIGZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUsIHgsIGR4LCBkeSkge1xuXHQgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuXHQgICAgICBub2RlLnggPSB4O1xuXHQgICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG5cdCAgICAgIG5vZGUuZHggPSBkeDtcblx0ICAgICAgbm9kZS5keSA9IGR5O1xuXHQgICAgICBpZiAoY2hpbGRyZW4gJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7XG5cdCAgICAgICAgdmFyIGkgPSAtMSwgbiwgYywgZDtcblx0ICAgICAgICBkeCA9IG5vZGUudmFsdWUgPyBkeCAvIG5vZGUudmFsdWUgOiAwO1xuXHQgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgICBwb3NpdGlvbihjID0gY2hpbGRyZW5baV0sIHgsIGQgPSBjLnZhbHVlICogZHgsIGR5KTtcblx0ICAgICAgICAgIHggKz0gZDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGRlcHRoKG5vZGUpIHtcblx0ICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbiwgZCA9IDA7XG5cdCAgICAgIGlmIChjaGlsZHJlbiAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkpIHtcblx0ICAgICAgICB2YXIgaSA9IC0xLCBuO1xuXHQgICAgICAgIHdoaWxlICgrK2kgPCBuKSBkID0gTWF0aC5tYXgoZCwgZGVwdGgoY2hpbGRyZW5baV0pKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gMSArIGQ7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBwYXJ0aXRpb24oZCwgaSkge1xuXHQgICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKTtcblx0ICAgICAgcG9zaXRpb24obm9kZXNbMF0sIDAsIHNpemVbMF0sIHNpemVbMV0gLyBkZXB0aChub2Rlc1swXSkpO1xuXHQgICAgICByZXR1cm4gbm9kZXM7XG5cdCAgICB9XG5cdCAgICBwYXJ0aXRpb24uc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcblx0ICAgICAgc2l6ZSA9IHg7XG5cdCAgICAgIHJldHVybiBwYXJ0aXRpb247XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQocGFydGl0aW9uLCBoaWVyYXJjaHkpO1xuXHQgIH07XG5cdCAgZDMubGF5b3V0LnBpZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHZhbHVlID0gTnVtYmVyLCBzb3J0ID0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlLCBzdGFydEFuZ2xlID0gMCwgZW5kQW5nbGUgPSDPhCwgcGFkQW5nbGUgPSAwO1xuXHQgICAgZnVuY3Rpb24gcGllKGRhdGEpIHtcblx0ICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgdmFsdWVzID0gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuXHQgICAgICAgIHJldHVybiArdmFsdWUuY2FsbChwaWUsIGQsIGkpO1xuXHQgICAgICB9KSwgYSA9ICsodHlwZW9mIHN0YXJ0QW5nbGUgPT09IFwiZnVuY3Rpb25cIiA/IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHN0YXJ0QW5nbGUpLCBkYSA9ICh0eXBlb2YgZW5kQW5nbGUgPT09IFwiZnVuY3Rpb25cIiA/IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBlbmRBbmdsZSkgLSBhLCBwID0gTWF0aC5taW4oTWF0aC5hYnMoZGEpIC8gbiwgKyh0eXBlb2YgcGFkQW5nbGUgPT09IFwiZnVuY3Rpb25cIiA/IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwYWRBbmdsZSkpLCBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSwgc3VtID0gZDMuc3VtKHZhbHVlcyksIGsgPSBzdW0gPyAoZGEgLSBuICogcGEpIC8gc3VtIDogMCwgaW5kZXggPSBkMy5yYW5nZShuKSwgYXJjcyA9IFtdLCB2O1xuXHQgICAgICBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KHNvcnQgPT09IGQzX2xheW91dF9waWVTb3J0QnlWYWx1ZSA/IGZ1bmN0aW9uKGksIGopIHtcblx0ICAgICAgICByZXR1cm4gdmFsdWVzW2pdIC0gdmFsdWVzW2ldO1xuXHQgICAgICB9IDogZnVuY3Rpb24oaSwgaikge1xuXHQgICAgICAgIHJldHVybiBzb3J0KGRhdGFbaV0sIGRhdGFbal0pO1xuXHQgICAgICB9KTtcblx0ICAgICAgaW5kZXguZm9yRWFjaChmdW5jdGlvbihpKSB7XG5cdCAgICAgICAgYXJjc1tpXSA9IHtcblx0ICAgICAgICAgIGRhdGE6IGRhdGFbaV0sXG5cdCAgICAgICAgICB2YWx1ZTogdiA9IHZhbHVlc1tpXSxcblx0ICAgICAgICAgIHN0YXJ0QW5nbGU6IGEsXG5cdCAgICAgICAgICBlbmRBbmdsZTogYSArPSB2ICogayArIHBhLFxuXHQgICAgICAgICAgcGFkQW5nbGU6IHBcblx0ICAgICAgICB9O1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIGFyY3M7XG5cdCAgICB9XG5cdCAgICBwaWUudmFsdWUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlO1xuXHQgICAgICB2YWx1ZSA9IF87XG5cdCAgICAgIHJldHVybiBwaWU7XG5cdCAgICB9O1xuXHQgICAgcGllLnNvcnQgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnQ7XG5cdCAgICAgIHNvcnQgPSBfO1xuXHQgICAgICByZXR1cm4gcGllO1xuXHQgICAgfTtcblx0ICAgIHBpZS5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuXHQgICAgICBzdGFydEFuZ2xlID0gXztcblx0ICAgICAgcmV0dXJuIHBpZTtcblx0ICAgIH07XG5cdCAgICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGVuZEFuZ2xlO1xuXHQgICAgICBlbmRBbmdsZSA9IF87XG5cdCAgICAgIHJldHVybiBwaWU7XG5cdCAgICB9O1xuXHQgICAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcblx0ICAgICAgcGFkQW5nbGUgPSBfO1xuXHQgICAgICByZXR1cm4gcGllO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBwaWU7XG5cdCAgfTtcblx0ICB2YXIgZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlID0ge307XG5cdCAgZDMubGF5b3V0LnN0YWNrID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgdmFsdWVzID0gZDNfaWRlbnRpdHksIG9yZGVyID0gZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0LCBvZmZzZXQgPSBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvLCBvdXQgPSBkM19sYXlvdXRfc3RhY2tPdXQsIHggPSBkM19sYXlvdXRfc3RhY2tYLCB5ID0gZDNfbGF5b3V0X3N0YWNrWTtcblx0ICAgIGZ1bmN0aW9uIHN0YWNrKGRhdGEsIGluZGV4KSB7XG5cdCAgICAgIGlmICghKG4gPSBkYXRhLmxlbmd0aCkpIHJldHVybiBkYXRhO1xuXHQgICAgICB2YXIgc2VyaWVzID0gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuXHQgICAgICAgIHJldHVybiB2YWx1ZXMuY2FsbChzdGFjaywgZCwgaSk7XG5cdCAgICAgIH0pO1xuXHQgICAgICB2YXIgcG9pbnRzID0gc2VyaWVzLm1hcChmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgcmV0dXJuIGQubWFwKGZ1bmN0aW9uKHYsIGkpIHtcblx0ICAgICAgICAgIHJldHVybiBbIHguY2FsbChzdGFjaywgdiwgaSksIHkuY2FsbChzdGFjaywgdiwgaSkgXTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHZhciBvcmRlcnMgPSBvcmRlci5jYWxsKHN0YWNrLCBwb2ludHMsIGluZGV4KTtcblx0ICAgICAgc2VyaWVzID0gZDMucGVybXV0ZShzZXJpZXMsIG9yZGVycyk7XG5cdCAgICAgIHBvaW50cyA9IGQzLnBlcm11dGUocG9pbnRzLCBvcmRlcnMpO1xuXHQgICAgICB2YXIgb2Zmc2V0cyA9IG9mZnNldC5jYWxsKHN0YWNrLCBwb2ludHMsIGluZGV4KTtcblx0ICAgICAgdmFyIG0gPSBzZXJpZXNbMF0ubGVuZ3RoLCBuLCBpLCBqLCBvO1xuXHQgICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG5cdCAgICAgICAgb3V0LmNhbGwoc3RhY2ssIHNlcmllc1swXVtqXSwgbyA9IG9mZnNldHNbal0sIHBvaW50c1swXVtqXVsxXSk7XG5cdCAgICAgICAgZm9yIChpID0gMTsgaSA8IG47ICsraSkge1xuXHQgICAgICAgICAgb3V0LmNhbGwoc3RhY2ssIHNlcmllc1tpXVtqXSwgbyArPSBwb2ludHNbaSAtIDFdW2pdWzFdLCBwb2ludHNbaV1bal1bMV0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZGF0YTtcblx0ICAgIH1cblx0ICAgIHN0YWNrLnZhbHVlcyA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWVzO1xuXHQgICAgICB2YWx1ZXMgPSB4O1xuXHQgICAgICByZXR1cm4gc3RhY2s7XG5cdCAgICB9O1xuXHQgICAgc3RhY2sub3JkZXIgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9yZGVyO1xuXHQgICAgICBvcmRlciA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogZDNfbGF5b3V0X3N0YWNrT3JkZXJzLmdldCh4KSB8fCBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQ7XG5cdCAgICAgIHJldHVybiBzdGFjaztcblx0ICAgIH07XG5cdCAgICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9mZnNldDtcblx0ICAgICAgb2Zmc2V0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBkM19sYXlvdXRfc3RhY2tPZmZzZXRzLmdldCh4KSB8fCBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvO1xuXHQgICAgICByZXR1cm4gc3RhY2s7XG5cdCAgICB9O1xuXHQgICAgc3RhY2sueCA9IGZ1bmN0aW9uKHopIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcblx0ICAgICAgeCA9IHo7XG5cdCAgICAgIHJldHVybiBzdGFjaztcblx0ICAgIH07XG5cdCAgICBzdGFjay55ID0gZnVuY3Rpb24oeikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5O1xuXHQgICAgICB5ID0gejtcblx0ICAgICAgcmV0dXJuIHN0YWNrO1xuXHQgICAgfTtcblx0ICAgIHN0YWNrLm91dCA9IGZ1bmN0aW9uKHopIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3V0O1xuXHQgICAgICBvdXQgPSB6O1xuXHQgICAgICByZXR1cm4gc3RhY2s7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHN0YWNrO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrWChkKSB7XG5cdCAgICByZXR1cm4gZC54O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tZKGQpIHtcblx0ICAgIHJldHVybiBkLnk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja091dChkLCB5MCwgeSkge1xuXHQgICAgZC55MCA9IHkwO1xuXHQgICAgZC55ID0geTtcblx0ICB9XG5cdCAgdmFyIGQzX2xheW91dF9zdGFja09yZGVycyA9IGQzLm1hcCh7XG5cdCAgICBcImluc2lkZS1vdXRcIjogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCBpLCBqLCBtYXggPSBkYXRhLm1hcChkM19sYXlvdXRfc3RhY2tNYXhJbmRleCksIHN1bXMgPSBkYXRhLm1hcChkM19sYXlvdXRfc3RhY2tSZWR1Y2VTdW0pLCBpbmRleCA9IGQzLnJhbmdlKG4pLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHQgICAgICAgIHJldHVybiBtYXhbYV0gLSBtYXhbYl07XG5cdCAgICAgIH0pLCB0b3AgPSAwLCBib3R0b20gPSAwLCB0b3BzID0gW10sIGJvdHRvbXMgPSBbXTtcblx0ICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuXHQgICAgICAgIGogPSBpbmRleFtpXTtcblx0ICAgICAgICBpZiAodG9wIDwgYm90dG9tKSB7XG5cdCAgICAgICAgICB0b3AgKz0gc3Vtc1tqXTtcblx0ICAgICAgICAgIHRvcHMucHVzaChqKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgYm90dG9tICs9IHN1bXNbal07XG5cdCAgICAgICAgICBib3R0b21zLnB1c2goaik7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XG5cdCAgICB9LFxuXHQgICAgcmV2ZXJzZTogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICByZXR1cm4gZDMucmFuZ2UoZGF0YS5sZW5ndGgpLnJldmVyc2UoKTtcblx0ICAgIH0sXG5cdCAgICBcImRlZmF1bHRcIjogZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0XG5cdCAgfSk7XG5cdCAgdmFyIGQzX2xheW91dF9zdGFja09mZnNldHMgPSBkMy5tYXAoe1xuXHQgICAgc2lsaG91ZXR0ZTogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCBtID0gZGF0YVswXS5sZW5ndGgsIHN1bXMgPSBbXSwgbWF4ID0gMCwgaSwgaiwgbywgeTAgPSBbXTtcblx0ICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuXHQgICAgICAgIGZvciAoaSA9IDAsIG8gPSAwOyBpIDwgbjsgaSsrKSBvICs9IGRhdGFbaV1bal1bMV07XG5cdCAgICAgICAgaWYgKG8gPiBtYXgpIG1heCA9IG87XG5cdCAgICAgICAgc3Vtcy5wdXNoKG8pO1xuXHQgICAgICB9XG5cdCAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcblx0ICAgICAgICB5MFtqXSA9IChtYXggLSBzdW1zW2pdKSAvIDI7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHkwO1xuXHQgICAgfSxcblx0ICAgIHdpZ2dsZTogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCB4ID0gZGF0YVswXSwgbSA9IHgubGVuZ3RoLCBpLCBqLCBrLCBzMSwgczIsIHMzLCBkeCwgbywgbzAsIHkwID0gW107XG5cdCAgICAgIHkwWzBdID0gbyA9IG8wID0gMDtcblx0ICAgICAgZm9yIChqID0gMTsgaiA8IG07ICsraikge1xuXHQgICAgICAgIGZvciAoaSA9IDAsIHMxID0gMDsgaSA8IG47ICsraSkgczEgKz0gZGF0YVtpXVtqXVsxXTtcblx0ICAgICAgICBmb3IgKGkgPSAwLCBzMiA9IDAsIGR4ID0geFtqXVswXSAtIHhbaiAtIDFdWzBdOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgICAgICBmb3IgKGsgPSAwLCBzMyA9IChkYXRhW2ldW2pdWzFdIC0gZGF0YVtpXVtqIC0gMV1bMV0pIC8gKDIgKiBkeCk7IGsgPCBpOyArK2spIHtcblx0ICAgICAgICAgICAgczMgKz0gKGRhdGFba11bal1bMV0gLSBkYXRhW2tdW2ogLSAxXVsxXSkgLyBkeDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHMyICs9IHMzICogZGF0YVtpXVtqXVsxXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgeTBbal0gPSBvIC09IHMxID8gczIgLyBzMSAqIGR4IDogMDtcblx0ICAgICAgICBpZiAobyA8IG8wKSBvMCA9IG87XG5cdCAgICAgIH1cblx0ICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgeTBbal0gLT0gbzA7XG5cdCAgICAgIHJldHVybiB5MDtcblx0ICAgIH0sXG5cdCAgICBleHBhbmQ6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgbSA9IGRhdGFbMF0ubGVuZ3RoLCBrID0gMSAvIG4sIGksIGosIG8sIHkwID0gW107XG5cdCAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcblx0ICAgICAgICBmb3IgKGkgPSAwLCBvID0gMDsgaSA8IG47IGkrKykgbyArPSBkYXRhW2ldW2pdWzFdO1xuXHQgICAgICAgIGlmIChvKSBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBkYXRhW2ldW2pdWzFdIC89IG87IGVsc2UgZm9yIChpID0gMDsgaSA8IG47IGkrKykgZGF0YVtpXVtqXVsxXSA9IGs7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgeTBbal0gPSAwO1xuXHQgICAgICByZXR1cm4geTA7XG5cdCAgICB9LFxuXHQgICAgemVybzogZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVyb1xuXHQgIH0pO1xuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdChkYXRhKSB7XG5cdCAgICByZXR1cm4gZDMucmFuZ2UoZGF0YS5sZW5ndGgpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvKGRhdGEpIHtcblx0ICAgIHZhciBqID0gLTEsIG0gPSBkYXRhWzBdLmxlbmd0aCwgeTAgPSBbXTtcblx0ICAgIHdoaWxlICgrK2ogPCBtKSB5MFtqXSA9IDA7XG5cdCAgICByZXR1cm4geTA7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja01heEluZGV4KGFycmF5KSB7XG5cdCAgICB2YXIgaSA9IDEsIGogPSAwLCB2ID0gYXJyYXlbMF1bMV0sIGssIG4gPSBhcnJheS5sZW5ndGg7XG5cdCAgICBmb3IgKDtpIDwgbjsgKytpKSB7XG5cdCAgICAgIGlmICgoayA9IGFycmF5W2ldWzFdKSA+IHYpIHtcblx0ICAgICAgICBqID0gaTtcblx0ICAgICAgICB2ID0gaztcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGo7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1JlZHVjZVN1bShkKSB7XG5cdCAgICByZXR1cm4gZC5yZWR1Y2UoZDNfbGF5b3V0X3N0YWNrU3VtLCAwKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrU3VtKHAsIGQpIHtcblx0ICAgIHJldHVybiBwICsgZFsxXTtcblx0ICB9XG5cdCAgZDMubGF5b3V0Lmhpc3RvZ3JhbSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGZyZXF1ZW5jeSA9IHRydWUsIHZhbHVlciA9IE51bWJlciwgcmFuZ2VyID0gZDNfbGF5b3V0X2hpc3RvZ3JhbVJhbmdlLCBiaW5uZXIgPSBkM19sYXlvdXRfaGlzdG9ncmFtQmluU3R1cmdlcztcblx0ICAgIGZ1bmN0aW9uIGhpc3RvZ3JhbShkYXRhLCBpKSB7XG5cdCAgICAgIHZhciBiaW5zID0gW10sIHZhbHVlcyA9IGRhdGEubWFwKHZhbHVlciwgdGhpcyksIHJhbmdlID0gcmFuZ2VyLmNhbGwodGhpcywgdmFsdWVzLCBpKSwgdGhyZXNob2xkcyA9IGJpbm5lci5jYWxsKHRoaXMsIHJhbmdlLCB2YWx1ZXMsIGkpLCBiaW4sIGkgPSAtMSwgbiA9IHZhbHVlcy5sZW5ndGgsIG0gPSB0aHJlc2hvbGRzLmxlbmd0aCAtIDEsIGsgPSBmcmVxdWVuY3kgPyAxIDogMSAvIG4sIHg7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBtKSB7XG5cdCAgICAgICAgYmluID0gYmluc1tpXSA9IFtdO1xuXHQgICAgICAgIGJpbi5keCA9IHRocmVzaG9sZHNbaSArIDFdIC0gKGJpbi54ID0gdGhyZXNob2xkc1tpXSk7XG5cdCAgICAgICAgYmluLnkgPSAwO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChtID4gMCkge1xuXHQgICAgICAgIGkgPSAtMTtcblx0ICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgICAgeCA9IHZhbHVlc1tpXTtcblx0ICAgICAgICAgIGlmICh4ID49IHJhbmdlWzBdICYmIHggPD0gcmFuZ2VbMV0pIHtcblx0ICAgICAgICAgICAgYmluID0gYmluc1tkMy5iaXNlY3QodGhyZXNob2xkcywgeCwgMSwgbSkgLSAxXTtcblx0ICAgICAgICAgICAgYmluLnkgKz0gaztcblx0ICAgICAgICAgICAgYmluLnB1c2goZGF0YVtpXSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBiaW5zO1xuXHQgICAgfVxuXHQgICAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZXI7XG5cdCAgICAgIHZhbHVlciA9IHg7XG5cdCAgICAgIHJldHVybiBoaXN0b2dyYW07XG5cdCAgICB9O1xuXHQgICAgaGlzdG9ncmFtLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZXI7XG5cdCAgICAgIHJhbmdlciA9IGQzX2Z1bmN0b3IoeCk7XG5cdCAgICAgIHJldHVybiBoaXN0b2dyYW07XG5cdCAgICB9O1xuXHQgICAgaGlzdG9ncmFtLmJpbnMgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGJpbm5lcjtcblx0ICAgICAgYmlubmVyID0gdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyBmdW5jdGlvbihyYW5nZSkge1xuXHQgICAgICAgIHJldHVybiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIHgpO1xuXHQgICAgICB9IDogZDNfZnVuY3Rvcih4KTtcblx0ICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcblx0ICAgIH07XG5cdCAgICBoaXN0b2dyYW0uZnJlcXVlbmN5ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmcmVxdWVuY3k7XG5cdCAgICAgIGZyZXF1ZW5jeSA9ICEheDtcblx0ICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gaGlzdG9ncmFtO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpblN0dXJnZXMocmFuZ2UsIHZhbHVlcykge1xuXHQgICAgcmV0dXJuIGQzX2xheW91dF9oaXN0b2dyYW1CaW5GaXhlZChyYW5nZSwgTWF0aC5jZWlsKE1hdGgubG9nKHZhbHVlcy5sZW5ndGgpIC8gTWF0aC5MTjIgKyAxKSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1CaW5GaXhlZChyYW5nZSwgbikge1xuXHQgICAgdmFyIHggPSAtMSwgYiA9ICtyYW5nZVswXSwgbSA9IChyYW5nZVsxXSAtIGIpIC8gbiwgZiA9IFtdO1xuXHQgICAgd2hpbGUgKCsreCA8PSBuKSBmW3hdID0gbSAqIHggKyBiO1xuXHQgICAgcmV0dXJuIGY7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1SYW5nZSh2YWx1ZXMpIHtcblx0ICAgIHJldHVybiBbIGQzLm1pbih2YWx1ZXMpLCBkMy5tYXgodmFsdWVzKSBdO1xuXHQgIH1cblx0ICBkMy5sYXlvdXQucGFjayA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KGQzX2xheW91dF9wYWNrU29ydCksIHBhZGRpbmcgPSAwLCBzaXplID0gWyAxLCAxIF0sIHJhZGl1cztcblx0ICAgIGZ1bmN0aW9uIHBhY2soZCwgaSkge1xuXHQgICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdCA9IG5vZGVzWzBdLCB3ID0gc2l6ZVswXSwgaCA9IHNpemVbMV0sIHIgPSByYWRpdXMgPT0gbnVsbCA/IE1hdGguc3FydCA6IHR5cGVvZiByYWRpdXMgPT09IFwiZnVuY3Rpb25cIiA/IHJhZGl1cyA6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiByYWRpdXM7XG5cdCAgICAgIH07XG5cdCAgICAgIHJvb3QueCA9IHJvb3QueSA9IDA7XG5cdCAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICBkLnIgPSArcihkLnZhbHVlKTtcblx0ICAgICAgfSk7XG5cdCAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGQzX2xheW91dF9wYWNrU2libGluZ3MpO1xuXHQgICAgICBpZiAocGFkZGluZykge1xuXHQgICAgICAgIHZhciBkciA9IHBhZGRpbmcgKiAocmFkaXVzID8gMSA6IE1hdGgubWF4KDIgKiByb290LnIgLyB3LCAyICogcm9vdC5yIC8gaCkpIC8gMjtcblx0ICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgICBkLnIgKz0gZHI7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZDNfbGF5b3V0X3BhY2tTaWJsaW5ncyk7XG5cdCAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24oZCkge1xuXHQgICAgICAgICAgZC5yIC09IGRyO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKHJvb3QsIHcgLyAyLCBoIC8gMiwgcmFkaXVzID8gMSA6IDEgLyBNYXRoLm1heCgyICogcm9vdC5yIC8gdywgMiAqIHJvb3QuciAvIGgpKTtcblx0ICAgICAgcmV0dXJuIG5vZGVzO1xuXHQgICAgfVxuXHQgICAgcGFjay5zaXplID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuXHQgICAgICBzaXplID0gXztcblx0ICAgICAgcmV0dXJuIHBhY2s7XG5cdCAgICB9O1xuXHQgICAgcGFjay5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhZGl1cztcblx0ICAgICAgcmFkaXVzID0gXyA9PSBudWxsIHx8IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogK187XG5cdCAgICAgIHJldHVybiBwYWNrO1xuXHQgICAgfTtcblx0ICAgIHBhY2sucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkZGluZztcblx0ICAgICAgcGFkZGluZyA9ICtfO1xuXHQgICAgICByZXR1cm4gcGFjaztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZChwYWNrLCBoaWVyYXJjaHkpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tTb3J0KGEsIGIpIHtcblx0ICAgIHJldHVybiBhLnZhbHVlIC0gYi52YWx1ZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tJbnNlcnQoYSwgYikge1xuXHQgICAgdmFyIGMgPSBhLl9wYWNrX25leHQ7XG5cdCAgICBhLl9wYWNrX25leHQgPSBiO1xuXHQgICAgYi5fcGFja19wcmV2ID0gYTtcblx0ICAgIGIuX3BhY2tfbmV4dCA9IGM7XG5cdCAgICBjLl9wYWNrX3ByZXYgPSBiO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1NwbGljZShhLCBiKSB7XG5cdCAgICBhLl9wYWNrX25leHQgPSBiO1xuXHQgICAgYi5fcGFja19wcmV2ID0gYTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGEsIGIpIHtcblx0ICAgIHZhciBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnksIGRyID0gYS5yICsgYi5yO1xuXHQgICAgcmV0dXJuIC45OTkgKiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU2libGluZ3Mobm9kZSkge1xuXHQgICAgaWYgKCEobm9kZXMgPSBub2RlLmNoaWxkcmVuKSB8fCAhKG4gPSBub2Rlcy5sZW5ndGgpKSByZXR1cm47XG5cdCAgICB2YXIgbm9kZXMsIHhNaW4gPSBJbmZpbml0eSwgeE1heCA9IC1JbmZpbml0eSwgeU1pbiA9IEluZmluaXR5LCB5TWF4ID0gLUluZmluaXR5LCBhLCBiLCBjLCBpLCBqLCBrLCBuO1xuXHQgICAgZnVuY3Rpb24gYm91bmQobm9kZSkge1xuXHQgICAgICB4TWluID0gTWF0aC5taW4obm9kZS54IC0gbm9kZS5yLCB4TWluKTtcblx0ICAgICAgeE1heCA9IE1hdGgubWF4KG5vZGUueCArIG5vZGUuciwgeE1heCk7XG5cdCAgICAgIHlNaW4gPSBNYXRoLm1pbihub2RlLnkgLSBub2RlLnIsIHlNaW4pO1xuXHQgICAgICB5TWF4ID0gTWF0aC5tYXgobm9kZS55ICsgbm9kZS5yLCB5TWF4KTtcblx0ICAgIH1cblx0ICAgIG5vZGVzLmZvckVhY2goZDNfbGF5b3V0X3BhY2tMaW5rKTtcblx0ICAgIGEgPSBub2Rlc1swXTtcblx0ICAgIGEueCA9IC1hLnI7XG5cdCAgICBhLnkgPSAwO1xuXHQgICAgYm91bmQoYSk7XG5cdCAgICBpZiAobiA+IDEpIHtcblx0ICAgICAgYiA9IG5vZGVzWzFdO1xuXHQgICAgICBiLnggPSBiLnI7XG5cdCAgICAgIGIueSA9IDA7XG5cdCAgICAgIGJvdW5kKGIpO1xuXHQgICAgICBpZiAobiA+IDIpIHtcblx0ICAgICAgICBjID0gbm9kZXNbMl07XG5cdCAgICAgICAgZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjKTtcblx0ICAgICAgICBib3VuZChjKTtcblx0ICAgICAgICBkM19sYXlvdXRfcGFja0luc2VydChhLCBjKTtcblx0ICAgICAgICBhLl9wYWNrX3ByZXYgPSBjO1xuXHQgICAgICAgIGQzX2xheW91dF9wYWNrSW5zZXJ0KGMsIGIpO1xuXHQgICAgICAgIGIgPSBhLl9wYWNrX25leHQ7XG5cdCAgICAgICAgZm9yIChpID0gMzsgaSA8IG47IGkrKykge1xuXHQgICAgICAgICAgZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjID0gbm9kZXNbaV0pO1xuXHQgICAgICAgICAgdmFyIGlzZWN0ID0gMCwgczEgPSAxLCBzMiA9IDE7XG5cdCAgICAgICAgICBmb3IgKGogPSBiLl9wYWNrX25leHQ7IGogIT09IGI7IGogPSBqLl9wYWNrX25leHQsIHMxKyspIHtcblx0ICAgICAgICAgICAgaWYgKGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhqLCBjKSkge1xuXHQgICAgICAgICAgICAgIGlzZWN0ID0gMTtcblx0ICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKGlzZWN0ID09IDEpIHtcblx0ICAgICAgICAgICAgZm9yIChrID0gYS5fcGFja19wcmV2OyBrICE9PSBqLl9wYWNrX3ByZXY7IGsgPSBrLl9wYWNrX3ByZXYsIHMyKyspIHtcblx0ICAgICAgICAgICAgICBpZiAoZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGssIGMpKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChpc2VjdCkge1xuXHQgICAgICAgICAgICBpZiAoczEgPCBzMiB8fCBzMSA9PSBzMiAmJiBiLnIgPCBhLnIpIGQzX2xheW91dF9wYWNrU3BsaWNlKGEsIGIgPSBqKTsgZWxzZSBkM19sYXlvdXRfcGFja1NwbGljZShhID0gaywgYik7XG5cdCAgICAgICAgICAgIGktLTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGMpO1xuXHQgICAgICAgICAgICBiID0gYztcblx0ICAgICAgICAgICAgYm91bmQoYyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICB2YXIgY3ggPSAoeE1pbiArIHhNYXgpIC8gMiwgY3kgPSAoeU1pbiArIHlNYXgpIC8gMiwgY3IgPSAwO1xuXHQgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuXHQgICAgICBjID0gbm9kZXNbaV07XG5cdCAgICAgIGMueCAtPSBjeDtcblx0ICAgICAgYy55IC09IGN5O1xuXHQgICAgICBjciA9IE1hdGgubWF4KGNyLCBjLnIgKyBNYXRoLnNxcnQoYy54ICogYy54ICsgYy55ICogYy55KSk7XG5cdCAgICB9XG5cdCAgICBub2RlLnIgPSBjcjtcblx0ICAgIG5vZGVzLmZvckVhY2goZDNfbGF5b3V0X3BhY2tVbmxpbmspO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja0xpbmsobm9kZSkge1xuXHQgICAgbm9kZS5fcGFja19uZXh0ID0gbm9kZS5fcGFja19wcmV2ID0gbm9kZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tVbmxpbmsobm9kZSkge1xuXHQgICAgZGVsZXRlIG5vZGUuX3BhY2tfbmV4dDtcblx0ICAgIGRlbGV0ZSBub2RlLl9wYWNrX3ByZXY7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKG5vZGUsIHgsIHksIGspIHtcblx0ICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG5cdCAgICBub2RlLnggPSB4ICs9IGsgKiBub2RlLng7XG5cdCAgICBub2RlLnkgPSB5ICs9IGsgKiBub2RlLnk7XG5cdCAgICBub2RlLnIgKj0gaztcblx0ICAgIGlmIChjaGlsZHJlbikge1xuXHQgICAgICB2YXIgaSA9IC0xLCBuID0gY2hpbGRyZW4ubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgZDNfbGF5b3V0X3BhY2tUcmFuc2Zvcm0oY2hpbGRyZW5baV0sIHgsIHksIGspO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1BsYWNlKGEsIGIsIGMpIHtcblx0ICAgIHZhciBkYiA9IGEuciArIGMuciwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuXHQgICAgaWYgKGRiICYmIChkeCB8fCBkeSkpIHtcblx0ICAgICAgdmFyIGRhID0gYi5yICsgYy5yLCBkYyA9IGR4ICogZHggKyBkeSAqIGR5O1xuXHQgICAgICBkYSAqPSBkYTtcblx0ICAgICAgZGIgKj0gZGI7XG5cdCAgICAgIHZhciB4ID0gLjUgKyAoZGIgLSBkYSkgLyAoMiAqIGRjKSwgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCAyICogZGEgKiAoZGIgKyBkYykgLSAoZGIgLT0gZGMpICogZGIgLSBkYSAqIGRhKSkgLyAoMiAqIGRjKTtcblx0ICAgICAgYy54ID0gYS54ICsgeCAqIGR4ICsgeSAqIGR5O1xuXHQgICAgICBjLnkgPSBhLnkgKyB4ICogZHkgLSB5ICogZHg7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBjLnggPSBhLnggKyBkYjtcblx0ICAgICAgYy55ID0gYS55O1xuXHQgICAgfVxuXHQgIH1cblx0ICBkMy5sYXlvdXQudHJlZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KG51bGwpLnZhbHVlKG51bGwpLCBzZXBhcmF0aW9uID0gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uLCBzaXplID0gWyAxLCAxIF0sIG5vZGVTaXplID0gbnVsbDtcblx0ICAgIGZ1bmN0aW9uIHRyZWUoZCwgaSkge1xuXHQgICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdDAgPSBub2Rlc1swXSwgcm9vdDEgPSB3cmFwVHJlZShyb290MCk7XG5cdCAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QxLCBmaXJzdFdhbGspLCByb290MS5wYXJlbnQubSA9IC1yb290MS56O1xuXHQgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDEsIHNlY29uZFdhbGspO1xuXHQgICAgICBpZiAobm9kZVNpemUpIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgc2l6ZU5vZGUpOyBlbHNlIHtcblx0ICAgICAgICB2YXIgbGVmdCA9IHJvb3QwLCByaWdodCA9IHJvb3QwLCBib3R0b20gPSByb290MDtcblx0ICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDAsIGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuXHQgICAgICAgICAgaWYgKG5vZGUueCA+IHJpZ2h0LngpIHJpZ2h0ID0gbm9kZTtcblx0ICAgICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHZhciB0eCA9IHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMiAtIGxlZnQueCwga3ggPSBzaXplWzBdIC8gKHJpZ2h0LnggKyBzZXBhcmF0aW9uKHJpZ2h0LCBsZWZ0KSAvIDIgKyB0eCksIGt5ID0gc2l6ZVsxXSAvIChib3R0b20uZGVwdGggfHwgMSk7XG5cdCAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKHJvb3QwLCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG5cdCAgICAgICAgICBub2RlLnkgPSBub2RlLmRlcHRoICoga3k7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG5vZGVzO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gd3JhcFRyZWUocm9vdDApIHtcblx0ICAgICAgdmFyIHJvb3QxID0ge1xuXHQgICAgICAgIEE6IG51bGwsXG5cdCAgICAgICAgY2hpbGRyZW46IFsgcm9vdDAgXVxuXHQgICAgICB9LCBxdWV1ZSA9IFsgcm9vdDEgXSwgbm9kZTE7XG5cdCAgICAgIHdoaWxlICgobm9kZTEgPSBxdWV1ZS5wb3AoKSkgIT0gbnVsbCkge1xuXHQgICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gbm9kZTEuY2hpbGRyZW4sIGNoaWxkLCBpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuXHQgICAgICAgICAgcXVldWUucHVzaCgoY2hpbGRyZW5baV0gPSBjaGlsZCA9IHtcblx0ICAgICAgICAgICAgXzogY2hpbGRyZW5baV0sXG5cdCAgICAgICAgICAgIHBhcmVudDogbm9kZTEsXG5cdCAgICAgICAgICAgIGNoaWxkcmVuOiAoY2hpbGQgPSBjaGlsZHJlbltpXS5jaGlsZHJlbikgJiYgY2hpbGQuc2xpY2UoKSB8fCBbXSxcblx0ICAgICAgICAgICAgQTogbnVsbCxcblx0ICAgICAgICAgICAgYTogbnVsbCxcblx0ICAgICAgICAgICAgejogMCxcblx0ICAgICAgICAgICAgbTogMCxcblx0ICAgICAgICAgICAgYzogMCxcblx0ICAgICAgICAgICAgczogMCxcblx0ICAgICAgICAgICAgdDogbnVsbCxcblx0ICAgICAgICAgICAgaTogaVxuXHQgICAgICAgICAgfSkuYSA9IGNoaWxkKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJvb3QxLmNoaWxkcmVuWzBdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcblx0ICAgICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbiwgc2libGluZ3MgPSB2LnBhcmVudC5jaGlsZHJlbiwgdyA9IHYuaSA/IHNpYmxpbmdzW3YuaSAtIDFdIDogbnVsbDtcblx0ICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuXHQgICAgICAgIGQzX2xheW91dF90cmVlU2hpZnQodik7XG5cdCAgICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG5cdCAgICAgICAgaWYgKHcpIHtcblx0ICAgICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuXHQgICAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHYueiA9IG1pZHBvaW50O1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIGlmICh3KSB7XG5cdCAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG5cdCAgICAgIH1cblx0ICAgICAgdi5wYXJlbnQuQSA9IGFwcG9ydGlvbih2LCB3LCB2LnBhcmVudC5BIHx8IHNpYmxpbmdzWzBdKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHNlY29uZFdhbGsodikge1xuXHQgICAgICB2Ll8ueCA9IHYueiArIHYucGFyZW50Lm07XG5cdCAgICAgIHYubSArPSB2LnBhcmVudC5tO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXBwb3J0aW9uKHYsIHcsIGFuY2VzdG9yKSB7XG5cdCAgICAgIGlmICh3KSB7XG5cdCAgICAgICAgdmFyIHZpcCA9IHYsIHZvcCA9IHYsIHZpbSA9IHcsIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sIHNpcCA9IHZpcC5tLCBzb3AgPSB2b3AubSwgc2ltID0gdmltLm0sIHNvbSA9IHZvbS5tLCBzaGlmdDtcblx0ICAgICAgICB3aGlsZSAodmltID0gZDNfbGF5b3V0X3RyZWVSaWdodCh2aW0pLCB2aXAgPSBkM19sYXlvdXRfdHJlZUxlZnQodmlwKSwgdmltICYmIHZpcCkge1xuXHQgICAgICAgICAgdm9tID0gZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSk7XG5cdCAgICAgICAgICB2b3AgPSBkM19sYXlvdXRfdHJlZVJpZ2h0KHZvcCk7XG5cdCAgICAgICAgICB2b3AuYSA9IHY7XG5cdCAgICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG5cdCAgICAgICAgICBpZiAoc2hpZnQgPiAwKSB7XG5cdCAgICAgICAgICAgIGQzX2xheW91dF90cmVlTW92ZShkM19sYXlvdXRfdHJlZUFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG5cdCAgICAgICAgICAgIHNpcCArPSBzaGlmdDtcblx0ICAgICAgICAgICAgc29wICs9IHNoaWZ0O1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgc2ltICs9IHZpbS5tO1xuXHQgICAgICAgICAgc2lwICs9IHZpcC5tO1xuXHQgICAgICAgICAgc29tICs9IHZvbS5tO1xuXHQgICAgICAgICAgc29wICs9IHZvcC5tO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodmltICYmICFkM19sYXlvdXRfdHJlZVJpZ2h0KHZvcCkpIHtcblx0ICAgICAgICAgIHZvcC50ID0gdmltO1xuXHQgICAgICAgICAgdm9wLm0gKz0gc2ltIC0gc29wO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodmlwICYmICFkM19sYXlvdXRfdHJlZUxlZnQodm9tKSkge1xuXHQgICAgICAgICAgdm9tLnQgPSB2aXA7XG5cdCAgICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XG5cdCAgICAgICAgICBhbmNlc3RvciA9IHY7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBhbmNlc3Rvcjtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcblx0ICAgICAgbm9kZS54ICo9IHNpemVbMF07XG5cdCAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBzaXplWzFdO1xuXHQgICAgfVxuXHQgICAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzZXBhcmF0aW9uO1xuXHQgICAgICBzZXBhcmF0aW9uID0geDtcblx0ICAgICAgcmV0dXJuIHRyZWU7XG5cdCAgICB9O1xuXHQgICAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IG51bGwgOiBzaXplO1xuXHQgICAgICBub2RlU2l6ZSA9IChzaXplID0geCkgPT0gbnVsbCA/IHNpemVOb2RlIDogbnVsbDtcblx0ICAgICAgcmV0dXJuIHRyZWU7XG5cdCAgICB9O1xuXHQgICAgdHJlZS5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBzaXplIDogbnVsbDtcblx0ICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBudWxsIDogc2l6ZU5vZGU7XG5cdCAgICAgIHJldHVybiB0cmVlO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWUsIGhpZXJhcmNoeSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVNlcGFyYXRpb24oYSwgYikge1xuXHQgICAgcmV0dXJuIGEucGFyZW50ID09IGIucGFyZW50ID8gMSA6IDI7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlTGVmdCh2KSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuXHQgICAgcmV0dXJuIGNoaWxkcmVuLmxlbmd0aCA/IGNoaWxkcmVuWzBdIDogdi50O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVJpZ2h0KHYpIHtcblx0ICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sIG47XG5cdCAgICByZXR1cm4gKG4gPSBjaGlsZHJlbi5sZW5ndGgpID8gY2hpbGRyZW5bbiAtIDFdIDogdi50O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZU1vdmUod20sIHdwLCBzaGlmdCkge1xuXHQgICAgdmFyIGNoYW5nZSA9IHNoaWZ0IC8gKHdwLmkgLSB3bS5pKTtcblx0ICAgIHdwLmMgLT0gY2hhbmdlO1xuXHQgICAgd3AucyArPSBzaGlmdDtcblx0ICAgIHdtLmMgKz0gY2hhbmdlO1xuXHQgICAgd3AueiArPSBzaGlmdDtcblx0ICAgIHdwLm0gKz0gc2hpZnQ7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlU2hpZnQodikge1xuXHQgICAgdmFyIHNoaWZ0ID0gMCwgY2hhbmdlID0gMCwgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLCBpID0gY2hpbGRyZW4ubGVuZ3RoLCB3O1xuXHQgICAgd2hpbGUgKC0taSA+PSAwKSB7XG5cdCAgICAgIHcgPSBjaGlsZHJlbltpXTtcblx0ICAgICAgdy56ICs9IHNoaWZ0O1xuXHQgICAgICB3Lm0gKz0gc2hpZnQ7XG5cdCAgICAgIHNoaWZ0ICs9IHcucyArIChjaGFuZ2UgKz0gdy5jKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG5cdCAgICByZXR1cm4gdmltLmEucGFyZW50ID09PSB2LnBhcmVudCA/IHZpbS5hIDogYW5jZXN0b3I7XG5cdCAgfVxuXHQgIGQzLmxheW91dC5jbHVzdGVyID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLnNvcnQobnVsbCkudmFsdWUobnVsbCksIHNlcGFyYXRpb24gPSBkM19sYXlvdXRfdHJlZVNlcGFyYXRpb24sIHNpemUgPSBbIDEsIDEgXSwgbm9kZVNpemUgPSBmYWxzZTtcblx0ICAgIGZ1bmN0aW9uIGNsdXN0ZXIoZCwgaSkge1xuXHQgICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdCA9IG5vZGVzWzBdLCBwcmV2aW91c05vZGUsIHggPSAwO1xuXHQgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcblx0ICAgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdCAgICAgICAgICBub2RlLnggPSBkM19sYXlvdXRfY2x1c3RlclgoY2hpbGRyZW4pO1xuXHQgICAgICAgICAgbm9kZS55ID0gZDNfbGF5b3V0X2NsdXN0ZXJZKGNoaWxkcmVuKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgbm9kZS54ID0gcHJldmlvdXNOb2RlID8geCArPSBzZXBhcmF0aW9uKG5vZGUsIHByZXZpb3VzTm9kZSkgOiAwO1xuXHQgICAgICAgICAgbm9kZS55ID0gMDtcblx0ICAgICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgICAgdmFyIGxlZnQgPSBkM19sYXlvdXRfY2x1c3RlckxlZnQocm9vdCksIHJpZ2h0ID0gZDNfbGF5b3V0X2NsdXN0ZXJSaWdodChyb290KSwgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcblx0ICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgbm9kZVNpemUgPyBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHJvb3QueCkgKiBzaXplWzBdO1xuXHQgICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogc2l6ZVsxXTtcblx0ICAgICAgfSA6IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgICBub2RlLnggPSAobm9kZS54IC0geDApIC8gKHgxIC0geDApICogc2l6ZVswXTtcblx0ICAgICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBzaXplWzFdO1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIG5vZGVzO1xuXHQgICAgfVxuXHQgICAgY2x1c3Rlci5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzZXBhcmF0aW9uO1xuXHQgICAgICBzZXBhcmF0aW9uID0geDtcblx0ICAgICAgcmV0dXJuIGNsdXN0ZXI7XG5cdCAgICB9O1xuXHQgICAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IG51bGwgOiBzaXplO1xuXHQgICAgICBub2RlU2l6ZSA9IChzaXplID0geCkgPT0gbnVsbDtcblx0ICAgICAgcmV0dXJuIGNsdXN0ZXI7XG5cdCAgICB9O1xuXHQgICAgY2x1c3Rlci5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBzaXplIDogbnVsbDtcblx0ICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpICE9IG51bGw7XG5cdCAgICAgIHJldHVybiBjbHVzdGVyO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKGNsdXN0ZXIsIGhpZXJhcmNoeSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclkoY2hpbGRyZW4pIHtcblx0ICAgIHJldHVybiAxICsgZDMubWF4KGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkge1xuXHQgICAgICByZXR1cm4gY2hpbGQueTtcblx0ICAgIH0pO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclgoY2hpbGRyZW4pIHtcblx0ICAgIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24oeCwgY2hpbGQpIHtcblx0ICAgICAgcmV0dXJuIHggKyBjaGlsZC54O1xuXHQgICAgfSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyTGVmdChub2RlKSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuXHQgICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA/IGQzX2xheW91dF9jbHVzdGVyTGVmdChjaGlsZHJlblswXSkgOiBub2RlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclJpZ2h0KG5vZGUpIHtcblx0ICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIG47XG5cdCAgICByZXR1cm4gY2hpbGRyZW4gJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpID8gZDNfbGF5b3V0X2NsdXN0ZXJSaWdodChjaGlsZHJlbltuIC0gMV0pIDogbm9kZTtcblx0ICB9XG5cdCAgZDMubGF5b3V0LnRyZWVtYXAgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCksIHJvdW5kID0gTWF0aC5yb3VuZCwgc2l6ZSA9IFsgMSwgMSBdLCBwYWRkaW5nID0gbnVsbCwgcGFkID0gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsLCBzdGlja3kgPSBmYWxzZSwgc3RpY2tpZXMsIG1vZGUgPSBcInNxdWFyaWZ5XCIsIHJhdGlvID0gLjUgKiAoMSArIE1hdGguc3FydCg1KSk7XG5cdCAgICBmdW5jdGlvbiBzY2FsZShjaGlsZHJlbiwgaykge1xuXHQgICAgICB2YXIgaSA9IC0xLCBuID0gY2hpbGRyZW4ubGVuZ3RoLCBjaGlsZCwgYXJlYTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBhcmVhID0gKGNoaWxkID0gY2hpbGRyZW5baV0pLnZhbHVlICogKGsgPCAwID8gMCA6IGspO1xuXHQgICAgICAgIGNoaWxkLmFyZWEgPSBpc05hTihhcmVhKSB8fCBhcmVhIDw9IDAgPyAwIDogYXJlYTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc3F1YXJpZnkobm9kZSkge1xuXHQgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuXHQgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdCAgICAgICAgdmFyIHJlY3QgPSBwYWQobm9kZSksIHJvdyA9IFtdLCByZW1haW5pbmcgPSBjaGlsZHJlbi5zbGljZSgpLCBjaGlsZCwgYmVzdCA9IEluZmluaXR5LCBzY29yZSwgdSA9IG1vZGUgPT09IFwic2xpY2VcIiA/IHJlY3QuZHggOiBtb2RlID09PSBcImRpY2VcIiA/IHJlY3QuZHkgOiBtb2RlID09PSBcInNsaWNlLWRpY2VcIiA/IG5vZGUuZGVwdGggJiAxID8gcmVjdC5keSA6IHJlY3QuZHggOiBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KSwgbjtcblx0ICAgICAgICBzY2FsZShyZW1haW5pbmcsIHJlY3QuZHggKiByZWN0LmR5IC8gbm9kZS52YWx1ZSk7XG5cdCAgICAgICAgcm93LmFyZWEgPSAwO1xuXHQgICAgICAgIHdoaWxlICgobiA9IHJlbWFpbmluZy5sZW5ndGgpID4gMCkge1xuXHQgICAgICAgICAgcm93LnB1c2goY2hpbGQgPSByZW1haW5pbmdbbiAtIDFdKTtcblx0ICAgICAgICAgIHJvdy5hcmVhICs9IGNoaWxkLmFyZWE7XG5cdCAgICAgICAgICBpZiAobW9kZSAhPT0gXCJzcXVhcmlmeVwiIHx8IChzY29yZSA9IHdvcnN0KHJvdywgdSkpIDw9IGJlc3QpIHtcblx0ICAgICAgICAgICAgcmVtYWluaW5nLnBvcCgpO1xuXHQgICAgICAgICAgICBiZXN0ID0gc2NvcmU7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByb3cuYXJlYSAtPSByb3cucG9wKCkuYXJlYTtcblx0ICAgICAgICAgICAgcG9zaXRpb24ocm93LCB1LCByZWN0LCBmYWxzZSk7XG5cdCAgICAgICAgICAgIHUgPSBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KTtcblx0ICAgICAgICAgICAgcm93Lmxlbmd0aCA9IHJvdy5hcmVhID0gMDtcblx0ICAgICAgICAgICAgYmVzdCA9IEluZmluaXR5O1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocm93Lmxlbmd0aCkge1xuXHQgICAgICAgICAgcG9zaXRpb24ocm93LCB1LCByZWN0LCB0cnVlKTtcblx0ICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNoaWxkcmVuLmZvckVhY2goc3F1YXJpZnkpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzdGlja2lmeShub2RlKSB7XG5cdCAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG5cdCAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgICAgICB2YXIgcmVjdCA9IHBhZChub2RlKSwgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSwgY2hpbGQsIHJvdyA9IFtdO1xuXHQgICAgICAgIHNjYWxlKHJlbWFpbmluZywgcmVjdC5keCAqIHJlY3QuZHkgLyBub2RlLnZhbHVlKTtcblx0ICAgICAgICByb3cuYXJlYSA9IDA7XG5cdCAgICAgICAgd2hpbGUgKGNoaWxkID0gcmVtYWluaW5nLnBvcCgpKSB7XG5cdCAgICAgICAgICByb3cucHVzaChjaGlsZCk7XG5cdCAgICAgICAgICByb3cuYXJlYSArPSBjaGlsZC5hcmVhO1xuXHQgICAgICAgICAgaWYgKGNoaWxkLnogIT0gbnVsbCkge1xuXHQgICAgICAgICAgICBwb3NpdGlvbihyb3csIGNoaWxkLnogPyByZWN0LmR4IDogcmVjdC5keSwgcmVjdCwgIXJlbWFpbmluZy5sZW5ndGgpO1xuXHQgICAgICAgICAgICByb3cubGVuZ3RoID0gcm93LmFyZWEgPSAwO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKHN0aWNraWZ5KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gd29yc3Qocm93LCB1KSB7XG5cdCAgICAgIHZhciBzID0gcm93LmFyZWEsIHIsIHJtYXggPSAwLCBybWluID0gSW5maW5pdHksIGkgPSAtMSwgbiA9IHJvdy5sZW5ndGg7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgaWYgKCEociA9IHJvd1tpXS5hcmVhKSkgY29udGludWU7XG5cdCAgICAgICAgaWYgKHIgPCBybWluKSBybWluID0gcjtcblx0ICAgICAgICBpZiAociA+IHJtYXgpIHJtYXggPSByO1xuXHQgICAgICB9XG5cdCAgICAgIHMgKj0gcztcblx0ICAgICAgdSAqPSB1O1xuXHQgICAgICByZXR1cm4gcyA/IE1hdGgubWF4KHUgKiBybWF4ICogcmF0aW8gLyBzLCBzIC8gKHUgKiBybWluICogcmF0aW8pKSA6IEluZmluaXR5O1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcG9zaXRpb24ocm93LCB1LCByZWN0LCBmbHVzaCkge1xuXHQgICAgICB2YXIgaSA9IC0xLCBuID0gcm93Lmxlbmd0aCwgeCA9IHJlY3QueCwgeSA9IHJlY3QueSwgdiA9IHUgPyByb3VuZChyb3cuYXJlYSAvIHUpIDogMCwgbztcblx0ICAgICAgaWYgKHUgPT0gcmVjdC5keCkge1xuXHQgICAgICAgIGlmIChmbHVzaCB8fCB2ID4gcmVjdC5keSkgdiA9IHJlY3QuZHk7XG5cdCAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICAgIG8gPSByb3dbaV07XG5cdCAgICAgICAgICBvLnggPSB4O1xuXHQgICAgICAgICAgby55ID0geTtcblx0ICAgICAgICAgIG8uZHkgPSB2O1xuXHQgICAgICAgICAgeCArPSBvLmR4ID0gTWF0aC5taW4ocmVjdC54ICsgcmVjdC5keCAtIHgsIHYgPyByb3VuZChvLmFyZWEgLyB2KSA6IDApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBvLnogPSB0cnVlO1xuXHQgICAgICAgIG8uZHggKz0gcmVjdC54ICsgcmVjdC5keCAtIHg7XG5cdCAgICAgICAgcmVjdC55ICs9IHY7XG5cdCAgICAgICAgcmVjdC5keSAtPSB2O1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChmbHVzaCB8fCB2ID4gcmVjdC5keCkgdiA9IHJlY3QuZHg7XG5cdCAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICAgIG8gPSByb3dbaV07XG5cdCAgICAgICAgICBvLnggPSB4O1xuXHQgICAgICAgICAgby55ID0geTtcblx0ICAgICAgICAgIG8uZHggPSB2O1xuXHQgICAgICAgICAgeSArPSBvLmR5ID0gTWF0aC5taW4ocmVjdC55ICsgcmVjdC5keSAtIHksIHYgPyByb3VuZChvLmFyZWEgLyB2KSA6IDApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBvLnogPSBmYWxzZTtcblx0ICAgICAgICBvLmR5ICs9IHJlY3QueSArIHJlY3QuZHkgLSB5O1xuXHQgICAgICAgIHJlY3QueCArPSB2O1xuXHQgICAgICAgIHJlY3QuZHggLT0gdjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gdHJlZW1hcChkKSB7XG5cdCAgICAgIHZhciBub2RlcyA9IHN0aWNraWVzIHx8IGhpZXJhcmNoeShkKSwgcm9vdCA9IG5vZGVzWzBdO1xuXHQgICAgICByb290LnggPSByb290LnkgPSAwO1xuXHQgICAgICBpZiAocm9vdC52YWx1ZSkgcm9vdC5keCA9IHNpemVbMF0sIHJvb3QuZHkgPSBzaXplWzFdOyBlbHNlIHJvb3QuZHggPSByb290LmR5ID0gMDtcblx0ICAgICAgaWYgKHN0aWNraWVzKSBoaWVyYXJjaHkucmV2YWx1ZShyb290KTtcblx0ICAgICAgc2NhbGUoWyByb290IF0sIHJvb3QuZHggKiByb290LmR5IC8gcm9vdC52YWx1ZSk7XG5cdCAgICAgIChzdGlja2llcyA/IHN0aWNraWZ5IDogc3F1YXJpZnkpKHJvb3QpO1xuXHQgICAgICBpZiAoc3RpY2t5KSBzdGlja2llcyA9IG5vZGVzO1xuXHQgICAgICByZXR1cm4gbm9kZXM7XG5cdCAgICB9XG5cdCAgICB0cmVlbWFwLnNpemUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG5cdCAgICAgIHNpemUgPSB4O1xuXHQgICAgICByZXR1cm4gdHJlZW1hcDtcblx0ICAgIH07XG5cdCAgICB0cmVlbWFwLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZGRpbmc7XG5cdCAgICAgIGZ1bmN0aW9uIHBhZEZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgICB2YXIgcCA9IHguY2FsbCh0cmVlbWFwLCBub2RlLCBub2RlLmRlcHRoKTtcblx0ICAgICAgICByZXR1cm4gcCA9PSBudWxsID8gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsKG5vZGUpIDogZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgdHlwZW9mIHAgPT09IFwibnVtYmVyXCIgPyBbIHAsIHAsIHAsIHAgXSA6IHApO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIHBhZENvbnN0YW50KG5vZGUpIHtcblx0ICAgICAgICByZXR1cm4gZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgeCk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHR5cGU7XG5cdCAgICAgIHBhZCA9IChwYWRkaW5nID0geCkgPT0gbnVsbCA/IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbCA6ICh0eXBlID0gdHlwZW9mIHgpID09PSBcImZ1bmN0aW9uXCIgPyBwYWRGdW5jdGlvbiA6IHR5cGUgPT09IFwibnVtYmVyXCIgPyAoeCA9IFsgeCwgeCwgeCwgeCBdLCBcblx0ICAgICAgcGFkQ29uc3RhbnQpIDogcGFkQ29uc3RhbnQ7XG5cdCAgICAgIHJldHVybiB0cmVlbWFwO1xuXHQgICAgfTtcblx0ICAgIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJvdW5kICE9IE51bWJlcjtcblx0ICAgICAgcm91bmQgPSB4ID8gTWF0aC5yb3VuZCA6IE51bWJlcjtcblx0ICAgICAgcmV0dXJuIHRyZWVtYXA7XG5cdCAgICB9O1xuXHQgICAgdHJlZW1hcC5zdGlja3kgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0aWNreTtcblx0ICAgICAgc3RpY2t5ID0geDtcblx0ICAgICAgc3RpY2tpZXMgPSBudWxsO1xuXHQgICAgICByZXR1cm4gdHJlZW1hcDtcblx0ICAgIH07XG5cdCAgICB0cmVlbWFwLnJhdGlvID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYXRpbztcblx0ICAgICAgcmF0aW8gPSB4O1xuXHQgICAgICByZXR1cm4gdHJlZW1hcDtcblx0ICAgIH07XG5cdCAgICB0cmVlbWFwLm1vZGUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1vZGU7XG5cdCAgICAgIG1vZGUgPSB4ICsgXCJcIjtcblx0ICAgICAgcmV0dXJuIHRyZWVtYXA7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQodHJlZW1hcCwgaGllcmFyY2h5KTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlbWFwUGFkTnVsbChub2RlKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICB4OiBub2RlLngsXG5cdCAgICAgIHk6IG5vZGUueSxcblx0ICAgICAgZHg6IG5vZGUuZHgsXG5cdCAgICAgIGR5OiBub2RlLmR5XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCBwYWRkaW5nKSB7XG5cdCAgICB2YXIgeCA9IG5vZGUueCArIHBhZGRpbmdbM10sIHkgPSBub2RlLnkgKyBwYWRkaW5nWzBdLCBkeCA9IG5vZGUuZHggLSBwYWRkaW5nWzFdIC0gcGFkZGluZ1szXSwgZHkgPSBub2RlLmR5IC0gcGFkZGluZ1swXSAtIHBhZGRpbmdbMl07XG5cdCAgICBpZiAoZHggPCAwKSB7XG5cdCAgICAgIHggKz0gZHggLyAyO1xuXHQgICAgICBkeCA9IDA7XG5cdCAgICB9XG5cdCAgICBpZiAoZHkgPCAwKSB7XG5cdCAgICAgIHkgKz0gZHkgLyAyO1xuXHQgICAgICBkeSA9IDA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICB4OiB4LFxuXHQgICAgICB5OiB5LFxuXHQgICAgICBkeDogZHgsXG5cdCAgICAgIGR5OiBkeVxuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMucmFuZG9tID0ge1xuXHQgICAgbm9ybWFsOiBmdW5jdGlvbijCtSwgz4MpIHtcblx0ICAgICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgICAgICBpZiAobiA8IDIpIM+DID0gMTtcblx0ICAgICAgaWYgKG4gPCAxKSDCtSA9IDA7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgeCwgeSwgcjtcblx0ICAgICAgICBkbyB7XG5cdCAgICAgICAgICB4ID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xuXHQgICAgICAgICAgeSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcblx0ICAgICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuXHQgICAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblx0ICAgICAgICByZXR1cm4gwrUgKyDPgyAqIHggKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuXHQgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGxvZ05vcm1hbDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciByYW5kb20gPSBkMy5yYW5kb20ubm9ybWFsLmFwcGx5KGQzLCBhcmd1bWVudHMpO1xuXHQgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbSgpKTtcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBiYXRlczogZnVuY3Rpb24obSkge1xuXHQgICAgICB2YXIgcmFuZG9tID0gZDMucmFuZG9tLmlyd2luSGFsbChtKTtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiByYW5kb20oKSAvIG07XG5cdCAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgaXJ3aW5IYWxsOiBmdW5jdGlvbihtKSB7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBmb3IgKHZhciBzID0gMCwgaiA9IDA7IGogPCBtOyBqKyspIHMgKz0gTWF0aC5yYW5kb20oKTtcblx0ICAgICAgICByZXR1cm4gcztcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIGQzLnNjYWxlID0ge307XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSB7XG5cdCAgICB2YXIgc3RhcnQgPSBkb21haW5bMF0sIHN0b3AgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdO1xuXHQgICAgcmV0dXJuIHN0YXJ0IDwgc3RvcCA/IFsgc3RhcnQsIHN0b3AgXSA6IFsgc3RvcCwgc3RhcnQgXTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVSYW5nZShzY2FsZSkge1xuXHQgICAgcmV0dXJuIHNjYWxlLnJhbmdlRXh0ZW50ID8gc2NhbGUucmFuZ2VFeHRlbnQoKSA6IGQzX3NjYWxlRXh0ZW50KHNjYWxlLnJhbmdlKCkpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zY2FsZV9iaWxpbmVhcihkb21haW4sIHJhbmdlLCB1bmludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSkge1xuXHQgICAgdmFyIHUgPSB1bmludGVycG9sYXRlKGRvbWFpblswXSwgZG9tYWluWzFdKSwgaSA9IGludGVycG9sYXRlKHJhbmdlWzBdLCByYW5nZVsxXSk7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gaSh1KHgpKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX25pY2UoZG9tYWluLCBuaWNlKSB7XG5cdCAgICB2YXIgaTAgPSAwLCBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLCB4MCA9IGRvbWFpbltpMF0sIHgxID0gZG9tYWluW2kxXSwgZHg7XG5cdCAgICBpZiAoeDEgPCB4MCkge1xuXHQgICAgICBkeCA9IGkwLCBpMCA9IGkxLCBpMSA9IGR4O1xuXHQgICAgICBkeCA9IHgwLCB4MCA9IHgxLCB4MSA9IGR4O1xuXHQgICAgfVxuXHQgICAgZG9tYWluW2kwXSA9IG5pY2UuZmxvb3IoeDApO1xuXHQgICAgZG9tYWluW2kxXSA9IG5pY2UuY2VpbCh4MSk7XG5cdCAgICByZXR1cm4gZG9tYWluO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zY2FsZV9uaWNlU3RlcChzdGVwKSB7XG5cdCAgICByZXR1cm4gc3RlcCA/IHtcblx0ICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih4IC8gc3RlcCkgKiBzdGVwO1xuXHQgICAgICB9LFxuXHQgICAgICBjZWlsOiBmdW5jdGlvbih4KSB7XG5cdCAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh4IC8gc3RlcCkgKiBzdGVwO1xuXHQgICAgICB9XG5cdCAgICB9IDogZDNfc2NhbGVfbmljZUlkZW50aXR5O1xuXHQgIH1cblx0ICB2YXIgZDNfc2NhbGVfbmljZUlkZW50aXR5ID0ge1xuXHQgICAgZmxvb3I6IGQzX2lkZW50aXR5LFxuXHQgICAgY2VpbDogZDNfaWRlbnRpdHlcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX3BvbHlsaW5lYXIoZG9tYWluLCByYW5nZSwgdW5pbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpIHtcblx0ICAgIHZhciB1ID0gW10sIGkgPSBbXSwgaiA9IDAsIGsgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMTtcblx0ICAgIGlmIChkb21haW5ba10gPCBkb21haW5bMF0pIHtcblx0ICAgICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuXHQgICAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuXHQgICAgfVxuXHQgICAgd2hpbGUgKCsraiA8PSBrKSB7XG5cdCAgICAgIHUucHVzaCh1bmludGVycG9sYXRlKGRvbWFpbltqIC0gMV0sIGRvbWFpbltqXSkpO1xuXHQgICAgICBpLnB1c2goaW50ZXJwb2xhdGUocmFuZ2VbaiAtIDFdLCByYW5nZVtqXSkpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgdmFyIGogPSBkMy5iaXNlY3QoZG9tYWluLCB4LCAxLCBrKSAtIDE7XG5cdCAgICAgIHJldHVybiBpW2pdKHVbal0oeCkpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMuc2NhbGUubGluZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyKFsgMCwgMSBdLCBbIDAsIDEgXSwgZDNfaW50ZXJwb2xhdGUsIGZhbHNlKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApIHtcblx0ICAgIHZhciBvdXRwdXQsIGlucHV0O1xuXHQgICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcblx0ICAgICAgdmFyIGxpbmVhciA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gZDNfc2NhbGVfcG9seWxpbmVhciA6IGQzX3NjYWxlX2JpbGluZWFyLCB1bmludGVycG9sYXRlID0gY2xhbXAgPyBkM191bmludGVycG9sYXRlQ2xhbXAgOiBkM191bmludGVycG9sYXRlTnVtYmVyO1xuXHQgICAgICBvdXRwdXQgPSBsaW5lYXIoZG9tYWluLCByYW5nZSwgdW5pbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpO1xuXHQgICAgICBpbnB1dCA9IGxpbmVhcihyYW5nZSwgZG9tYWluLCB1bmludGVycG9sYXRlLCBkM19pbnRlcnBvbGF0ZSk7XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcblx0ICAgICAgcmV0dXJuIG91dHB1dCh4KTtcblx0ICAgIH1cblx0ICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0KHkpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuXHQgICAgICBkb21haW4gPSB4Lm1hcChOdW1iZXIpO1xuXHQgICAgICByZXR1cm4gcmVzY2FsZSgpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcblx0ICAgICAgcmFuZ2UgPSB4O1xuXHQgICAgICByZXR1cm4gcmVzY2FsZSgpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiBzY2FsZS5yYW5nZSh4KS5pbnRlcnBvbGF0ZShkM19pbnRlcnBvbGF0ZVJvdW5kKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xhbXA7XG5cdCAgICAgIGNsYW1wID0geDtcblx0ICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGU7XG5cdCAgICAgIGludGVycG9sYXRlID0geDtcblx0ICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKG0pIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKG0sIGZvcm1hdCkge1xuXHQgICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKG0pIHtcblx0ICAgICAgZDNfc2NhbGVfbGluZWFyTmljZShkb21haW4sIG0pO1xuXHQgICAgICByZXR1cm4gcmVzY2FsZSgpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiByZXNjYWxlKCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKSB7XG5cdCAgICByZXR1cm4gZDMucmViaW5kKHNjYWxlLCBsaW5lYXIsIFwicmFuZ2VcIiwgXCJyYW5nZVJvdW5kXCIsIFwiaW50ZXJwb2xhdGVcIiwgXCJjbGFtcFwiKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyTmljZShkb21haW4sIG0pIHtcblx0ICAgIGQzX3NjYWxlX25pY2UoZG9tYWluLCBkM19zY2FsZV9uaWNlU3RlcChkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKVsyXSkpO1xuXHQgICAgZDNfc2NhbGVfbmljZShkb21haW4sIGQzX3NjYWxlX25pY2VTdGVwKGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pWzJdKSk7XG5cdCAgICByZXR1cm4gZG9tYWluO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKSB7XG5cdCAgICBpZiAobSA9PSBudWxsKSBtID0gMTA7XG5cdCAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSwgc3BhbiA9IGV4dGVudFsxXSAtIGV4dGVudFswXSwgc3RlcCA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHNwYW4gLyBtKSAvIE1hdGguTE4xMCkpLCBlcnIgPSBtIC8gc3BhbiAqIHN0ZXA7XG5cdCAgICBpZiAoZXJyIDw9IC4xNSkgc3RlcCAqPSAxMDsgZWxzZSBpZiAoZXJyIDw9IC4zNSkgc3RlcCAqPSA1OyBlbHNlIGlmIChlcnIgPD0gLjc1KSBzdGVwICo9IDI7XG5cdCAgICBleHRlbnRbMF0gPSBNYXRoLmNlaWwoZXh0ZW50WzBdIC8gc3RlcCkgKiBzdGVwO1xuXHQgICAgZXh0ZW50WzFdID0gTWF0aC5mbG9vcihleHRlbnRbMV0gLyBzdGVwKSAqIHN0ZXAgKyBzdGVwICogLjU7XG5cdCAgICBleHRlbnRbMl0gPSBzdGVwO1xuXHQgICAgcmV0dXJuIGV4dGVudDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKSB7XG5cdCAgICByZXR1cm4gZDMucmFuZ2UuYXBwbHkoZDMsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCkge1xuXHQgICAgdmFyIHJhbmdlID0gZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGRvbWFpbiwgbSk7XG5cdCAgICBpZiAoZm9ybWF0KSB7XG5cdCAgICAgIHZhciBtYXRjaCA9IGQzX2Zvcm1hdF9yZS5leGVjKGZvcm1hdCk7XG5cdCAgICAgIG1hdGNoLnNoaWZ0KCk7XG5cdCAgICAgIGlmIChtYXRjaFs4XSA9PT0gXCJzXCIpIHtcblx0ICAgICAgICB2YXIgcHJlZml4ID0gZDMuZm9ybWF0UHJlZml4KE1hdGgubWF4KGFicyhyYW5nZVswXSksIGFicyhyYW5nZVsxXSkpKTtcblx0ICAgICAgICBpZiAoIW1hdGNoWzddKSBtYXRjaFs3XSA9IFwiLlwiICsgZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKHByZWZpeC5zY2FsZShyYW5nZVsyXSkpO1xuXHQgICAgICAgIG1hdGNoWzhdID0gXCJmXCI7XG5cdCAgICAgICAgZm9ybWF0ID0gZDMuZm9ybWF0KG1hdGNoLmpvaW4oXCJcIikpO1xuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgICByZXR1cm4gZm9ybWF0KHByZWZpeC5zY2FsZShkKSkgKyBwcmVmaXguc3ltYm9sO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKCFtYXRjaFs3XSkgbWF0Y2hbN10gPSBcIi5cIiArIGQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbihtYXRjaFs4XSwgcmFuZ2UpO1xuXHQgICAgICBmb3JtYXQgPSBtYXRjaC5qb2luKFwiXCIpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZm9ybWF0ID0gXCIsLlwiICsgZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKHJhbmdlWzJdKSArIFwiZlwiO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzLmZvcm1hdChmb3JtYXQpO1xuXHQgIH1cblx0ICB2YXIgZDNfc2NhbGVfbGluZWFyRm9ybWF0U2lnbmlmaWNhbnQgPSB7XG5cdCAgICBzOiAxLFxuXHQgICAgZzogMSxcblx0ICAgIHA6IDEsXG5cdCAgICByOiAxLFxuXHQgICAgZTogMVxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjEwICsgLjAxKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyRm9ybWF0UHJlY2lzaW9uKHR5cGUsIHJhbmdlKSB7XG5cdCAgICB2YXIgcCA9IGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbihyYW5nZVsyXSk7XG5cdCAgICByZXR1cm4gdHlwZSBpbiBkM19zY2FsZV9saW5lYXJGb3JtYXRTaWduaWZpY2FudCA/IE1hdGguYWJzKHAgLSBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24oTWF0aC5tYXgoYWJzKHJhbmdlWzBdKSwgYWJzKHJhbmdlWzFdKSkpKSArICsodHlwZSAhPT0gXCJlXCIpIDogcCAtICh0eXBlID09PSBcIiVcIikgKiAyO1xuXHQgIH1cblx0ICBkMy5zY2FsZS5sb2cgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19zY2FsZV9sb2coZDMuc2NhbGUubGluZWFyKCkuZG9tYWluKFsgMCwgMSBdKSwgMTAsIHRydWUsIFsgMSwgMTAgXSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zY2FsZV9sb2cobGluZWFyLCBiYXNlLCBwb3NpdGl2ZSwgZG9tYWluKSB7XG5cdCAgICBmdW5jdGlvbiBsb2coeCkge1xuXHQgICAgICByZXR1cm4gKHBvc2l0aXZlID8gTWF0aC5sb2coeCA8IDAgPyAwIDogeCkgOiAtTWF0aC5sb2coeCA+IDAgPyAwIDogLXgpKSAvIE1hdGgubG9nKGJhc2UpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcG93KHgpIHtcblx0ICAgICAgcmV0dXJuIHBvc2l0aXZlID8gTWF0aC5wb3coYmFzZSwgeCkgOiAtTWF0aC5wb3coYmFzZSwgLXgpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuXHQgICAgICByZXR1cm4gbGluZWFyKGxvZyh4KSk7XG5cdCAgICB9XG5cdCAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiBwb3cobGluZWFyLmludmVydCh4KSk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG5cdCAgICAgIHBvc2l0aXZlID0geFswXSA+PSAwO1xuXHQgICAgICBsaW5lYXIuZG9tYWluKChkb21haW4gPSB4Lm1hcChOdW1iZXIpKS5tYXAobG9nKSk7XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBiYXNlO1xuXHQgICAgICBiYXNlID0gK187XG5cdCAgICAgIGxpbmVhci5kb21haW4oZG9tYWluLm1hcChsb2cpKTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIG5pY2VkID0gZDNfc2NhbGVfbmljZShkb21haW4ubWFwKGxvZyksIHBvc2l0aXZlID8gTWF0aCA6IGQzX3NjYWxlX2xvZ05pY2VOZWdhdGl2ZSk7XG5cdCAgICAgIGxpbmVhci5kb21haW4obmljZWQpO1xuXHQgICAgICBkb21haW4gPSBuaWNlZC5tYXAocG93KTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBleHRlbnQgPSBkM19zY2FsZUV4dGVudChkb21haW4pLCB0aWNrcyA9IFtdLCB1ID0gZXh0ZW50WzBdLCB2ID0gZXh0ZW50WzFdLCBpID0gTWF0aC5mbG9vcihsb2codSkpLCBqID0gTWF0aC5jZWlsKGxvZyh2KSksIG4gPSBiYXNlICUgMSA/IDIgOiBiYXNlO1xuXHQgICAgICBpZiAoaXNGaW5pdGUoaiAtIGkpKSB7XG5cdCAgICAgICAgaWYgKHBvc2l0aXZlKSB7XG5cdCAgICAgICAgICBmb3IgKDtpIDwgajsgaSsrKSBmb3IgKHZhciBrID0gMTsgayA8IG47IGsrKykgdGlja3MucHVzaChwb3coaSkgKiBrKTtcblx0ICAgICAgICAgIHRpY2tzLnB1c2gocG93KGkpKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGlja3MucHVzaChwb3coaSkpO1xuXHQgICAgICAgICAgZm9yICg7aSsrIDwgajsgKSBmb3IgKHZhciBrID0gbiAtIDE7IGsgPiAwOyBrLS0pIHRpY2tzLnB1c2gocG93KGkpICogayk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZvciAoaSA9IDA7IHRpY2tzW2ldIDwgdTsgaSsrKSB7fVxuXHQgICAgICAgIGZvciAoaiA9IHRpY2tzLmxlbmd0aDsgdGlja3NbaiAtIDFdID4gdjsgai0tKSB7fVxuXHQgICAgICAgIHRpY2tzID0gdGlja3Muc2xpY2UoaSwgaik7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRpY2tzO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihuLCBmb3JtYXQpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZDNfc2NhbGVfbG9nRm9ybWF0O1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGZvcm1hdCA9IGQzX3NjYWxlX2xvZ0Zvcm1hdDsgZWxzZSBpZiAodHlwZW9mIGZvcm1hdCAhPT0gXCJmdW5jdGlvblwiKSBmb3JtYXQgPSBkMy5mb3JtYXQoZm9ybWF0KTtcblx0ICAgICAgdmFyIGsgPSBNYXRoLm1heCgxLCBiYXNlICogbiAvIHNjYWxlLnRpY2tzKCkubGVuZ3RoKTtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICB2YXIgaSA9IGQgLyBwb3coTWF0aC5yb3VuZChsb2coZCkpKTtcblx0ICAgICAgICBpZiAoaSAqIGJhc2UgPCBiYXNlIC0gLjUpIGkgKj0gYmFzZTtcblx0ICAgICAgICByZXR1cm4gaSA8PSBrID8gZm9ybWF0KGQpIDogXCJcIjtcblx0ICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9sb2cobGluZWFyLmNvcHkoKSwgYmFzZSwgcG9zaXRpdmUsIGRvbWFpbik7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKTtcblx0ICB9XG5cdCAgdmFyIGQzX3NjYWxlX2xvZ0Zvcm1hdCA9IGQzLmZvcm1hdChcIi4wZVwiKSwgZDNfc2NhbGVfbG9nTmljZU5lZ2F0aXZlID0ge1xuXHQgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIC1NYXRoLmNlaWwoLXgpO1xuXHQgICAgfSxcblx0ICAgIGNlaWw6IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIC1NYXRoLmZsb29yKC14KTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIGQzLnNjYWxlLnBvdyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3NjYWxlX3BvdyhkMy5zY2FsZS5saW5lYXIoKSwgMSwgWyAwLCAxIF0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfcG93KGxpbmVhciwgZXhwb25lbnQsIGRvbWFpbikge1xuXHQgICAgdmFyIHBvd3AgPSBkM19zY2FsZV9wb3dQb3coZXhwb25lbnQpLCBwb3diID0gZDNfc2NhbGVfcG93UG93KDEgLyBleHBvbmVudCk7XG5cdCAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG5cdCAgICAgIHJldHVybiBsaW5lYXIocG93cCh4KSk7XG5cdCAgICB9XG5cdCAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiBwb3diKGxpbmVhci5pbnZlcnQoeCkpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuXHQgICAgICBsaW5lYXIuZG9tYWluKChkb21haW4gPSB4Lm1hcChOdW1iZXIpKS5tYXAocG93cCkpO1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihtKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrcyhkb21haW4sIG0pO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihtLCBmb3JtYXQpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtLCBmb3JtYXQpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihtKSB7XG5cdCAgICAgIHJldHVybiBzY2FsZS5kb21haW4oZDNfc2NhbGVfbGluZWFyTmljZShkb21haW4sIG0pKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5leHBvbmVudCA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZXhwb25lbnQ7XG5cdCAgICAgIHBvd3AgPSBkM19zY2FsZV9wb3dQb3coZXhwb25lbnQgPSB4KTtcblx0ICAgICAgcG93YiA9IGQzX3NjYWxlX3Bvd1BvdygxIC8gZXhwb25lbnQpO1xuXHQgICAgICBsaW5lYXIuZG9tYWluKGRvbWFpbi5tYXAocG93cCkpO1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfc2NhbGVfcG93KGxpbmVhci5jb3B5KCksIGV4cG9uZW50LCBkb21haW4pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX3Bvd1BvdyhlKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGUpIDogTWF0aC5wb3coeCwgZSk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5zY2FsZS5zcXJ0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDMuc2NhbGUucG93KCkuZXhwb25lbnQoLjUpO1xuXHQgIH07XG5cdCAgZDMuc2NhbGUub3JkaW5hbCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3NjYWxlX29yZGluYWwoW10sIHtcblx0ICAgICAgdDogXCJyYW5nZVwiLFxuXHQgICAgICBhOiBbIFtdIF1cblx0ICAgIH0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfb3JkaW5hbChkb21haW4sIHJhbmdlcikge1xuXHQgICAgdmFyIGluZGV4LCByYW5nZSwgcmFuZ2VCYW5kO1xuXHQgICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuXHQgICAgICByZXR1cm4gcmFuZ2VbKChpbmRleC5nZXQoeCkgfHwgKHJhbmdlci50ID09PSBcInJhbmdlXCIgPyBpbmRleC5zZXQoeCwgZG9tYWluLnB1c2goeCkpIDogTmFOKSkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzdGVwcyhzdGFydCwgc3RlcCkge1xuXHQgICAgICByZXR1cm4gZDMucmFuZ2UoZG9tYWluLmxlbmd0aCkubWFwKGZ1bmN0aW9uKGkpIHtcblx0ICAgICAgICByZXR1cm4gc3RhcnQgKyBzdGVwICogaTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcblx0ICAgICAgZG9tYWluID0gW107XG5cdCAgICAgIGluZGV4ID0gbmV3IGQzX01hcCgpO1xuXHQgICAgICB2YXIgaSA9IC0xLCBuID0geC5sZW5ndGgsIHhpO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoeGkgPSB4W2ldKSkgaW5kZXguc2V0KHhpLCBkb21haW4ucHVzaCh4aSkpO1xuXHQgICAgICByZXR1cm4gc2NhbGVbcmFuZ2VyLnRdLmFwcGx5KHNjYWxlLCByYW5nZXIuYSk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuXHQgICAgICByYW5nZSA9IHg7XG5cdCAgICAgIHJhbmdlQmFuZCA9IDA7XG5cdCAgICAgIHJhbmdlciA9IHtcblx0ICAgICAgICB0OiBcInJhbmdlXCIsXG5cdCAgICAgICAgYTogYXJndW1lbnRzXG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5yYW5nZVBvaW50cyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcpIHtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwYWRkaW5nID0gMDtcblx0ICAgICAgdmFyIHN0YXJ0ID0geFswXSwgc3RvcCA9IHhbMV0sIHN0ZXAgPSBkb21haW4ubGVuZ3RoIDwgMiA/IChzdGFydCA9IChzdGFydCArIHN0b3ApIC8gMiwgXG5cdCAgICAgIDApIDogKHN0b3AgLSBzdGFydCkgLyAoZG9tYWluLmxlbmd0aCAtIDEgKyBwYWRkaW5nKTtcblx0ICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIHN0ZXAgKiBwYWRkaW5nIC8gMiwgc3RlcCk7XG5cdCAgICAgIHJhbmdlQmFuZCA9IDA7XG5cdCAgICAgIHJhbmdlciA9IHtcblx0ICAgICAgICB0OiBcInJhbmdlUG9pbnRzXCIsXG5cdCAgICAgICAgYTogYXJndW1lbnRzXG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5yYW5nZVJvdW5kUG9pbnRzID0gZnVuY3Rpb24oeCwgcGFkZGluZykge1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuXHQgICAgICB2YXIgc3RhcnQgPSB4WzBdLCBzdG9wID0geFsxXSwgc3RlcCA9IGRvbWFpbi5sZW5ndGggPCAyID8gKHN0YXJ0ID0gc3RvcCA9IE1hdGgucm91bmQoKHN0YXJ0ICsgc3RvcCkgLyAyKSwgXG5cdCAgICAgIDApIDogKHN0b3AgLSBzdGFydCkgLyAoZG9tYWluLmxlbmd0aCAtIDEgKyBwYWRkaW5nKSB8IDA7XG5cdCAgICAgIHJhbmdlID0gc3RlcHMoc3RhcnQgKyBNYXRoLnJvdW5kKHN0ZXAgKiBwYWRkaW5nIC8gMiArIChzdG9wIC0gc3RhcnQgLSAoZG9tYWluLmxlbmd0aCAtIDEgKyBwYWRkaW5nKSAqIHN0ZXApIC8gMiksIHN0ZXApO1xuXHQgICAgICByYW5nZUJhbmQgPSAwO1xuXHQgICAgICByYW5nZXIgPSB7XG5cdCAgICAgICAgdDogXCJyYW5nZVJvdW5kUG9pbnRzXCIsXG5cdCAgICAgICAgYTogYXJndW1lbnRzXG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5yYW5nZUJhbmRzID0gZnVuY3Rpb24oeCwgcGFkZGluZywgb3V0ZXJQYWRkaW5nKSB7XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgb3V0ZXJQYWRkaW5nID0gcGFkZGluZztcblx0ICAgICAgdmFyIHJldmVyc2UgPSB4WzFdIDwgeFswXSwgc3RhcnQgPSB4W3JldmVyc2UgLSAwXSwgc3RvcCA9IHhbMSAtIHJldmVyc2VdLCBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyAoZG9tYWluLmxlbmd0aCAtIHBhZGRpbmcgKyAyICogb3V0ZXJQYWRkaW5nKTtcblx0ICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIHN0ZXAgKiBvdXRlclBhZGRpbmcsIHN0ZXApO1xuXHQgICAgICBpZiAocmV2ZXJzZSkgcmFuZ2UucmV2ZXJzZSgpO1xuXHQgICAgICByYW5nZUJhbmQgPSBzdGVwICogKDEgLSBwYWRkaW5nKTtcblx0ICAgICAgcmFuZ2VyID0ge1xuXHQgICAgICAgIHQ6IFwicmFuZ2VCYW5kc1wiLFxuXHQgICAgICAgIGE6IGFyZ3VtZW50c1xuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2VSb3VuZEJhbmRzID0gZnVuY3Rpb24oeCwgcGFkZGluZywgb3V0ZXJQYWRkaW5nKSB7XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgb3V0ZXJQYWRkaW5nID0gcGFkZGluZztcblx0ICAgICAgdmFyIHJldmVyc2UgPSB4WzFdIDwgeFswXSwgc3RhcnQgPSB4W3JldmVyc2UgLSAwXSwgc3RvcCA9IHhbMSAtIHJldmVyc2VdLCBzdGVwID0gTWF0aC5mbG9vcigoc3RvcCAtIHN0YXJ0KSAvIChkb21haW4ubGVuZ3RoIC0gcGFkZGluZyArIDIgKiBvdXRlclBhZGRpbmcpKTtcblx0ICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIE1hdGgucm91bmQoKHN0b3AgLSBzdGFydCAtIChkb21haW4ubGVuZ3RoIC0gcGFkZGluZykgKiBzdGVwKSAvIDIpLCBzdGVwKTtcblx0ICAgICAgaWYgKHJldmVyc2UpIHJhbmdlLnJldmVyc2UoKTtcblx0ICAgICAgcmFuZ2VCYW5kID0gTWF0aC5yb3VuZChzdGVwICogKDEgLSBwYWRkaW5nKSk7XG5cdCAgICAgIHJhbmdlciA9IHtcblx0ICAgICAgICB0OiBcInJhbmdlUm91bmRCYW5kc1wiLFxuXHQgICAgICAgIGE6IGFyZ3VtZW50c1xuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2VCYW5kID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiByYW5nZUJhbmQ7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2VFeHRlbnQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlRXh0ZW50KHJhbmdlci5hWzBdKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9vcmRpbmFsKGRvbWFpbiwgcmFuZ2VyKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gc2NhbGUuZG9tYWluKGRvbWFpbik7XG5cdCAgfVxuXHQgIGQzLnNjYWxlLmNhdGVnb3J5MTAgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkxMCk7XG5cdCAgfTtcblx0ICBkMy5zY2FsZS5jYXRlZ29yeTIwID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MjApO1xuXHQgIH07XG5cdCAgZDMuc2NhbGUuY2F0ZWdvcnkyMGIgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMGIpO1xuXHQgIH07XG5cdCAgZDMuc2NhbGUuY2F0ZWdvcnkyMGMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMGMpO1xuXHQgIH07XG5cdCAgdmFyIGQzX2NhdGVnb3J5MTAgPSBbIDIwNjIyNjAsIDE2NzQ0MjA2LCAyOTI0NTg4LCAxNDAzNDcyOCwgOTcyNTg4NSwgOTE5NzEzMSwgMTQ5MDczMzAsIDgzNTU3MTEsIDEyMzY5MTg2LCAxNTU2MTc1IF0ubWFwKGQzX3JnYlN0cmluZyk7XG5cdCAgdmFyIGQzX2NhdGVnb3J5MjAgPSBbIDIwNjIyNjAsIDExNDU0NDQwLCAxNjc0NDIwNiwgMTY3NTk2NzIsIDI5MjQ1ODgsIDEwMDE4Njk4LCAxNDAzNDcyOCwgMTY3NTA3NDIsIDk3MjU4ODUsIDEyOTU1ODYxLCA5MTk3MTMxLCAxMjg4NTE0MCwgMTQ5MDczMzAsIDE2MjM0MTk0LCA4MzU1NzExLCAxMzA5MjgwNywgMTIzNjkxODYsIDE0NDA4NTg5LCAxNTU2MTc1LCAxMDQxMDcyNSBdLm1hcChkM19yZ2JTdHJpbmcpO1xuXHQgIHZhciBkM19jYXRlZ29yeTIwYiA9IFsgMzc1MDc3NywgNTM5NTYxOSwgNzA0MDcxOSwgMTAyNjQyODYsIDY1MTkwOTcsIDkyMTY1OTQsIDExOTE1MTE1LCAxMzU1NjYzNiwgOTIwMjk5MywgMTI0MjY4MDksIDE1MTg2NTE0LCAxNTE5MDkzMiwgODY2NjE2OSwgMTEzNTY0OTAsIDE0MDQ5NjQzLCAxNTE3NzM3MiwgODA3NzY4MywgMTA4MzQzMjQsIDEzNTI4NTA5LCAxNDU4OTY1NCBdLm1hcChkM19yZ2JTdHJpbmcpO1xuXHQgIHZhciBkM19jYXRlZ29yeTIwYyA9IFsgMzI0NDczMywgNzA1NzExMCwgMTA0MDY2MjUsIDEzMDMyNDMxLCAxNTA5NTA1MywgMTY2MTY3NjQsIDE2NjI1MjU5LCAxNjYzNDAxOCwgMzI1MzA3NiwgNzY1MjQ3MCwgMTA2MDcwMDMsIDEzMTAxNTA0LCA3Njk1MjgxLCAxMDM5NDMxMiwgMTIzNjkzNzIsIDE0MzQyODkxLCA2NTEzNTA3LCA5ODY4OTUwLCAxMjQzNDg3NywgMTQyNzcwODEgXS5tYXAoZDNfcmdiU3RyaW5nKTtcblx0ICBkMy5zY2FsZS5xdWFudGlsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aWxlKFtdLCBbXSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zY2FsZV9xdWFudGlsZShkb21haW4sIHJhbmdlKSB7XG5cdCAgICB2YXIgdGhyZXNob2xkcztcblx0ICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG5cdCAgICAgIHZhciBrID0gMCwgcSA9IHJhbmdlLmxlbmd0aDtcblx0ICAgICAgdGhyZXNob2xkcyA9IFtdO1xuXHQgICAgICB3aGlsZSAoKytrIDwgcSkgdGhyZXNob2xkc1trIC0gMV0gPSBkMy5xdWFudGlsZShkb21haW4sIGsgLyBxKTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuXHQgICAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtkMy5iaXNlY3QodGhyZXNob2xkcywgeCldO1xuXHQgICAgfVxuXHQgICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG5cdCAgICAgIGRvbWFpbiA9IHgubWFwKGQzX251bWJlcikuZmlsdGVyKGQzX251bWVyaWMpLnNvcnQoZDNfYXNjZW5kaW5nKTtcblx0ICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG5cdCAgICAgIHJhbmdlID0geDtcblx0ICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRocmVzaG9sZHM7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuXHQgICAgICB5ID0gcmFuZ2UuaW5kZXhPZih5KTtcblx0ICAgICAgcmV0dXJuIHkgPCAwID8gWyBOYU4sIE5hTiBdIDogWyB5ID4gMCA/IHRocmVzaG9sZHNbeSAtIDFdIDogZG9tYWluWzBdLCB5IDwgdGhyZXNob2xkcy5sZW5ndGggPyB0aHJlc2hvbGRzW3ldIDogZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSBdO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aWxlKGRvbWFpbiwgcmFuZ2UpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiByZXNjYWxlKCk7XG5cdCAgfVxuXHQgIGQzLnNjYWxlLnF1YW50aXplID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfc2NhbGVfcXVhbnRpemUoMCwgMSwgWyAwLCAxIF0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfcXVhbnRpemUoeDAsIHgxLCByYW5nZSkge1xuXHQgICAgdmFyIGt4LCBpO1xuXHQgICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuXHQgICAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4oaSwgTWF0aC5mbG9vcihreCAqICh4IC0geDApKSkpXTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG5cdCAgICAgIGt4ID0gcmFuZ2UubGVuZ3RoIC8gKHgxIC0geDApO1xuXHQgICAgICBpID0gcmFuZ2UubGVuZ3RoIC0gMTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfVxuXHQgICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIHgwLCB4MSBdO1xuXHQgICAgICB4MCA9ICt4WzBdO1xuXHQgICAgICB4MSA9ICt4W3gubGVuZ3RoIC0gMV07XG5cdCAgICAgIHJldHVybiByZXNjYWxlKCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuXHQgICAgICByYW5nZSA9IHg7XG5cdCAgICAgIHJldHVybiByZXNjYWxlKCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuXHQgICAgICB5ID0gcmFuZ2UuaW5kZXhPZih5KTtcblx0ICAgICAgeSA9IHkgPCAwID8gTmFOIDogeSAvIGt4ICsgeDA7XG5cdCAgICAgIHJldHVybiBbIHksIHkgKyAxIC8ga3ggXTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9xdWFudGl6ZSh4MCwgeDEsIHJhbmdlKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gcmVzY2FsZSgpO1xuXHQgIH1cblx0ICBkMy5zY2FsZS50aHJlc2hvbGQgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19zY2FsZV90aHJlc2hvbGQoWyAuNSBdLCBbIDAsIDEgXSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zY2FsZV90aHJlc2hvbGQoZG9tYWluLCByYW5nZSkge1xuXHQgICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuXHQgICAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbZDMuYmlzZWN0KGRvbWFpbiwgeCldO1xuXHQgICAgfVxuXHQgICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG5cdCAgICAgIGRvbWFpbiA9IF87XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG5cdCAgICAgIHJhbmdlID0gXztcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcblx0ICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG5cdCAgICAgIHJldHVybiBbIGRvbWFpblt5IC0gMV0sIGRvbWFpblt5XSBdO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX3RocmVzaG9sZChkb21haW4sIHJhbmdlKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gc2NhbGU7XG5cdCAgfVxuXHQgIGQzLnNjYWxlLmlkZW50aXR5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfc2NhbGVfaWRlbnRpdHkoWyAwLCAxIF0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfaWRlbnRpdHkoZG9tYWluKSB7XG5cdCAgICBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG5cdCAgICAgIHJldHVybiAreDtcblx0ICAgIH1cblx0ICAgIGlkZW50aXR5LmludmVydCA9IGlkZW50aXR5O1xuXHQgICAgaWRlbnRpdHkuZG9tYWluID0gaWRlbnRpdHkucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcblx0ICAgICAgZG9tYWluID0geC5tYXAoaWRlbnRpdHkpO1xuXHQgICAgICByZXR1cm4gaWRlbnRpdHk7XG5cdCAgICB9O1xuXHQgICAgaWRlbnRpdHkudGlja3MgPSBmdW5jdGlvbihtKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrcyhkb21haW4sIG0pO1xuXHQgICAgfTtcblx0ICAgIGlkZW50aXR5LnRpY2tGb3JtYXQgPSBmdW5jdGlvbihtLCBmb3JtYXQpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtLCBmb3JtYXQpO1xuXHQgICAgfTtcblx0ICAgIGlkZW50aXR5LmNvcHkgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX2lkZW50aXR5KGRvbWFpbik7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGlkZW50aXR5O1xuXHQgIH1cblx0ICBkMy5zdmcgPSB7fTtcblx0ICBmdW5jdGlvbiBkM196ZXJvKCkge1xuXHQgICAgcmV0dXJuIDA7XG5cdCAgfVxuXHQgIGQzLnN2Zy5hcmMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBpbm5lclJhZGl1cyA9IGQzX3N2Z19hcmNJbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMgPSBkM19zdmdfYXJjT3V0ZXJSYWRpdXMsIGNvcm5lclJhZGl1cyA9IGQzX3plcm8sIHBhZFJhZGl1cyA9IGQzX3N2Z19hcmNBdXRvLCBzdGFydEFuZ2xlID0gZDNfc3ZnX2FyY1N0YXJ0QW5nbGUsIGVuZEFuZ2xlID0gZDNfc3ZnX2FyY0VuZEFuZ2xlLCBwYWRBbmdsZSA9IGQzX3N2Z19hcmNQYWRBbmdsZTtcblx0ICAgIGZ1bmN0aW9uIGFyYygpIHtcblx0ICAgICAgdmFyIHIwID0gTWF0aC5tYXgoMCwgK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLCByMSA9IE1hdGgubWF4KDAsICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmz4AsIGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGbPgCwgZGEgPSBNYXRoLmFicyhhMSAtIGEwKSwgY3cgPSBhMCA+IGExID8gMCA6IDE7XG5cdCAgICAgIGlmIChyMSA8IHIwKSByYyA9IHIxLCByMSA9IHIwLCByMCA9IHJjO1xuXHQgICAgICBpZiAoZGEgPj0gz4TOtSkgcmV0dXJuIGNpcmNsZVNlZ21lbnQocjEsIGN3KSArIChyMCA/IGNpcmNsZVNlZ21lbnQocjAsIDEgLSBjdykgOiBcIlwiKSArIFwiWlwiO1xuXHQgICAgICB2YXIgcmMsIGNyLCBycCwgYXAsIHAwID0gMCwgcDEgPSAwLCB4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHBhdGggPSBbXTtcblx0ICAgICAgaWYgKGFwID0gKCtwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDApIC8gMikge1xuXHQgICAgICAgIHJwID0gcGFkUmFkaXVzID09PSBkM19zdmdfYXJjQXV0byA/IE1hdGguc3FydChyMCAqIHIwICsgcjEgKiByMSkgOiArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgaWYgKCFjdykgcDEgKj0gLTE7XG5cdCAgICAgICAgaWYgKHIxKSBwMSA9IGQzX2FzaW4ocnAgLyByMSAqIE1hdGguc2luKGFwKSk7XG5cdCAgICAgICAgaWYgKHIwKSBwMCA9IGQzX2FzaW4ocnAgLyByMCAqIE1hdGguc2luKGFwKSk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHIxKSB7XG5cdCAgICAgICAgeDAgPSByMSAqIE1hdGguY29zKGEwICsgcDEpO1xuXHQgICAgICAgIHkwID0gcjEgKiBNYXRoLnNpbihhMCArIHAxKTtcblx0ICAgICAgICB4MSA9IHIxICogTWF0aC5jb3MoYTEgLSBwMSk7XG5cdCAgICAgICAgeTEgPSByMSAqIE1hdGguc2luKGExIC0gcDEpO1xuXHQgICAgICAgIHZhciBsMSA9IE1hdGguYWJzKGExIC0gYTAgLSAyICogcDEpIDw9IM+AID8gMCA6IDE7XG5cdCAgICAgICAgaWYgKHAxICYmIGQzX3N2Z19hcmNTd2VlcCh4MCwgeTAsIHgxLCB5MSkgPT09IGN3IF4gbDEpIHtcblx0ICAgICAgICAgIHZhciBoMSA9IChhMCArIGExKSAvIDI7XG5cdCAgICAgICAgICB4MCA9IHIxICogTWF0aC5jb3MoaDEpO1xuXHQgICAgICAgICAgeTAgPSByMSAqIE1hdGguc2luKGgxKTtcblx0ICAgICAgICAgIHgxID0geTEgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB4MCA9IHkwID0gMDtcblx0ICAgICAgfVxuXHQgICAgICBpZiAocjApIHtcblx0ICAgICAgICB4MiA9IHIwICogTWF0aC5jb3MoYTEgLSBwMCk7XG5cdCAgICAgICAgeTIgPSByMCAqIE1hdGguc2luKGExIC0gcDApO1xuXHQgICAgICAgIHgzID0gcjAgKiBNYXRoLmNvcyhhMCArIHAwKTtcblx0ICAgICAgICB5MyA9IHIwICogTWF0aC5zaW4oYTAgKyBwMCk7XG5cdCAgICAgICAgdmFyIGwwID0gTWF0aC5hYnMoYTAgLSBhMSArIDIgKiBwMCkgPD0gz4AgPyAwIDogMTtcblx0ICAgICAgICBpZiAocDAgJiYgZDNfc3ZnX2FyY1N3ZWVwKHgyLCB5MiwgeDMsIHkzKSA9PT0gMSAtIGN3IF4gbDApIHtcblx0ICAgICAgICAgIHZhciBoMCA9IChhMCArIGExKSAvIDI7XG5cdCAgICAgICAgICB4MiA9IHIwICogTWF0aC5jb3MoaDApO1xuXHQgICAgICAgICAgeTIgPSByMCAqIE1hdGguc2luKGgwKTtcblx0ICAgICAgICAgIHgzID0geTMgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB4MiA9IHkyID0gMDtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoZGEgPiDOtSAmJiAocmMgPSBNYXRoLm1pbihNYXRoLmFicyhyMSAtIHIwKSAvIDIsICtjb3JuZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSkpID4gLjAwMSkge1xuXHQgICAgICAgIGNyID0gcjAgPCByMSBeIGN3ID8gMCA6IDE7XG5cdCAgICAgICAgdmFyIHJjMSA9IHJjLCByYzAgPSByYztcblx0ICAgICAgICBpZiAoZGEgPCDPgCkge1xuXHQgICAgICAgICAgdmFyIG9jID0geDMgPT0gbnVsbCA/IFsgeDIsIHkyIF0gOiB4MSA9PSBudWxsID8gWyB4MCwgeTAgXSA6IGQzX2dlb21fcG9seWdvbkludGVyc2VjdChbIHgwLCB5MCBdLCBbIHgzLCB5MyBdLCBbIHgxLCB5MSBdLCBbIHgyLCB5MiBdKSwgYXggPSB4MCAtIG9jWzBdLCBheSA9IHkwIC0gb2NbMV0sIGJ4ID0geDEgLSBvY1swXSwgYnkgPSB5MSAtIG9jWzFdLCBrYyA9IDEgLyBNYXRoLnNpbihNYXRoLmFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChNYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkpICogTWF0aC5zcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksIGxjID0gTWF0aC5zcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcblx0ICAgICAgICAgIHJjMCA9IE1hdGgubWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XG5cdCAgICAgICAgICByYzEgPSBNYXRoLm1pbihyYywgKHIxIC0gbGMpIC8gKGtjICsgMSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoeDEgIT0gbnVsbCkge1xuXHQgICAgICAgICAgdmFyIHQzMCA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyh4MyA9PSBudWxsID8gWyB4MiwgeTIgXSA6IFsgeDMsIHkzIF0sIFsgeDAsIHkwIF0sIHIxLCByYzEsIGN3KSwgdDEyID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKFsgeDEsIHkxIF0sIFsgeDIsIHkyIF0sIHIxLCByYzEsIGN3KTtcblx0ICAgICAgICAgIGlmIChyYyA9PT0gcmMxKSB7XG5cdCAgICAgICAgICAgIHBhdGgucHVzaChcIk1cIiwgdDMwWzBdLCBcIkFcIiwgcmMxLCBcIixcIiwgcmMxLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDMwWzFdLCBcIkFcIiwgcjEsIFwiLFwiLCByMSwgXCIgMCBcIiwgMSAtIGN3IF4gZDNfc3ZnX2FyY1N3ZWVwKHQzMFsxXVswXSwgdDMwWzFdWzFdLCB0MTJbMV1bMF0sIHQxMlsxXVsxXSksIFwiLFwiLCBjdywgXCIgXCIsIHQxMlsxXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQxMlswXSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAxLFwiLCBjciwgXCIgXCIsIHQxMlswXSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHBhdGgucHVzaChcIk1cIiwgeDAsIFwiLFwiLCB5MCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh4MyAhPSBudWxsKSB7XG5cdCAgICAgICAgICB2YXIgdDAzID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKFsgeDAsIHkwIF0sIFsgeDMsIHkzIF0sIHIwLCAtcmMwLCBjdyksIHQyMSA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhbIHgyLCB5MiBdLCB4MSA9PSBudWxsID8gWyB4MCwgeTAgXSA6IFsgeDEsIHkxIF0sIHIwLCAtcmMwLCBjdyk7XG5cdCAgICAgICAgICBpZiAocmMgPT09IHJjMCkge1xuXHQgICAgICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHQyMVswXSwgXCJBXCIsIHJjMCwgXCIsXCIsIHJjMCwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQyMVsxXSwgXCJBXCIsIHIwLCBcIixcIiwgcjAsIFwiIDAgXCIsIGN3IF4gZDNfc3ZnX2FyY1N3ZWVwKHQyMVsxXVswXSwgdDIxWzFdWzFdLCB0MDNbMV1bMF0sIHQwM1sxXVsxXSksIFwiLFwiLCAxIC0gY3csIFwiIFwiLCB0MDNbMV0sIFwiQVwiLCByYzAsIFwiLFwiLCByYzAsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MDNbMF0pO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB0MjFbMF0sIFwiQVwiLCByYzAsIFwiLFwiLCByYzAsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MDNbMF0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHgyLCBcIixcIiwgeTIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHgwLCBcIixcIiwgeTApO1xuXHQgICAgICAgIGlmICh4MSAhPSBudWxsKSBwYXRoLnB1c2goXCJBXCIsIHIxLCBcIixcIiwgcjEsIFwiIDAgXCIsIGwxLCBcIixcIiwgY3csIFwiIFwiLCB4MSwgXCIsXCIsIHkxKTtcblx0ICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHgyLCBcIixcIiwgeTIpO1xuXHQgICAgICAgIGlmICh4MyAhPSBudWxsKSBwYXRoLnB1c2goXCJBXCIsIHIwLCBcIixcIiwgcjAsIFwiIDAgXCIsIGwwLCBcIixcIiwgMSAtIGN3LCBcIiBcIiwgeDMsIFwiLFwiLCB5Myk7XG5cdCAgICAgIH1cblx0ICAgICAgcGF0aC5wdXNoKFwiWlwiKTtcblx0ICAgICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNpcmNsZVNlZ21lbnQocjEsIGN3KSB7XG5cdCAgICAgIHJldHVybiBcIk0wLFwiICsgcjEgKyBcIkFcIiArIHIxICsgXCIsXCIgKyByMSArIFwiIDAgMSxcIiArIGN3ICsgXCIgMCxcIiArIC1yMSArIFwiQVwiICsgcjEgKyBcIixcIiArIHIxICsgXCIgMCAxLFwiICsgY3cgKyBcIiAwLFwiICsgcjE7XG5cdCAgICB9XG5cdCAgICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGlubmVyUmFkaXVzO1xuXHQgICAgICBpbm5lclJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG5cdCAgICAgIHJldHVybiBhcmM7XG5cdCAgICB9O1xuXHQgICAgYXJjLm91dGVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvdXRlclJhZGl1cztcblx0ICAgICAgb3V0ZXJSYWRpdXMgPSBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gYXJjO1xuXHQgICAgfTtcblx0ICAgIGFyYy5jb3JuZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNvcm5lclJhZGl1cztcblx0ICAgICAgY29ybmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcblx0ICAgICAgcmV0dXJuIGFyYztcblx0ICAgIH07XG5cdCAgICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRSYWRpdXM7XG5cdCAgICAgIHBhZFJhZGl1cyA9IHYgPT0gZDNfc3ZnX2FyY0F1dG8gPyBkM19zdmdfYXJjQXV0byA6IGQzX2Z1bmN0b3Iodik7XG5cdCAgICAgIHJldHVybiBhcmM7XG5cdCAgICB9O1xuXHQgICAgYXJjLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG5cdCAgICAgIHN0YXJ0QW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gYXJjO1xuXHQgICAgfTtcblx0ICAgIGFyYy5lbmRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZW5kQW5nbGU7XG5cdCAgICAgIGVuZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcblx0ICAgICAgcmV0dXJuIGFyYztcblx0ICAgIH07XG5cdCAgICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZEFuZ2xlO1xuXHQgICAgICBwYWRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG5cdCAgICAgIHJldHVybiBhcmM7XG5cdCAgICB9O1xuXHQgICAgYXJjLmNlbnRyb2lkID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiwgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiAtIGhhbGbPgDtcblx0ICAgICAgcmV0dXJuIFsgTWF0aC5jb3MoYSkgKiByLCBNYXRoLnNpbihhKSAqIHIgXTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gYXJjO1xuXHQgIH07XG5cdCAgdmFyIGQzX3N2Z19hcmNBdXRvID0gXCJhdXRvXCI7XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2FyY0lubmVyUmFkaXVzKGQpIHtcblx0ICAgIHJldHVybiBkLmlubmVyUmFkaXVzO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfYXJjT3V0ZXJSYWRpdXMoZCkge1xuXHQgICAgcmV0dXJuIGQub3V0ZXJSYWRpdXM7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19hcmNTdGFydEFuZ2xlKGQpIHtcblx0ICAgIHJldHVybiBkLnN0YXJ0QW5nbGU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19hcmNFbmRBbmdsZShkKSB7XG5cdCAgICByZXR1cm4gZC5lbmRBbmdsZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2FyY1BhZEFuZ2xlKGQpIHtcblx0ICAgIHJldHVybiBkICYmIGQucGFkQW5nbGU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19hcmNTd2VlcCh4MCwgeTAsIHgxLCB5MSkge1xuXHQgICAgcmV0dXJuICh4MCAtIHgxKSAqIHkwIC0gKHkwIC0geTEpICogeDAgPiAwID8gMCA6IDE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhwMCwgcDEsIHIxLCByYywgY3cpIHtcblx0ICAgIHZhciB4MDEgPSBwMFswXSAtIHAxWzBdLCB5MDEgPSBwMFsxXSAtIHAxWzFdLCBsbyA9IChjdyA/IHJjIDogLXJjKSAvIE1hdGguc3FydCh4MDEgKiB4MDEgKyB5MDEgKiB5MDEpLCBveCA9IGxvICogeTAxLCBveSA9IC1sbyAqIHgwMSwgeDEgPSBwMFswXSArIG94LCB5MSA9IHAwWzFdICsgb3ksIHgyID0gcDFbMF0gKyBveCwgeTIgPSBwMVsxXSArIG95LCB4MyA9ICh4MSArIHgyKSAvIDIsIHkzID0gKHkxICsgeTIpIC8gMiwgZHggPSB4MiAtIHgxLCBkeSA9IHkyIC0geTEsIGQyID0gZHggKiBkeCArIGR5ICogZHksIHIgPSByMSAtIHJjLCBEID0geDEgKiB5MiAtIHgyICogeTEsIGQgPSAoZHkgPCAwID8gLTEgOiAxKSAqIE1hdGguc3FydChNYXRoLm1heCgwLCByICogciAqIGQyIC0gRCAqIEQpKSwgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMiwgY3kwID0gKC1EICogZHggLSBkeSAqIGQpIC8gZDIsIGN4MSA9IChEICogZHkgKyBkeCAqIGQpIC8gZDIsIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLCBkeDAgPSBjeDAgLSB4MywgZHkwID0gY3kwIC0geTMsIGR4MSA9IGN4MSAtIHgzLCBkeTEgPSBjeTEgLSB5Mztcblx0ICAgIGlmIChkeDAgKiBkeDAgKyBkeTAgKiBkeTAgPiBkeDEgKiBkeDEgKyBkeTEgKiBkeTEpIGN4MCA9IGN4MSwgY3kwID0gY3kxO1xuXHQgICAgcmV0dXJuIFsgWyBjeDAgLSBveCwgY3kwIC0gb3kgXSwgWyBjeDAgKiByMSAvIHIsIGN5MCAqIHIxIC8gciBdIF07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lKHByb2plY3Rpb24pIHtcblx0ICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WSwgZGVmaW5lZCA9IGQzX3RydWUsIGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVMaW5lYXIsIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUua2V5LCB0ZW5zaW9uID0gLjc7XG5cdCAgICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcblx0ICAgICAgdmFyIHNlZ21lbnRzID0gW10sIHBvaW50cyA9IFtdLCBpID0gLTEsIG4gPSBkYXRhLmxlbmd0aCwgZCwgZnggPSBkM19mdW5jdG9yKHgpLCBmeSA9IGQzX2Z1bmN0b3IoeSk7XG5cdCAgICAgIGZ1bmN0aW9uIHNlZ21lbnQoKSB7XG5cdCAgICAgICAgc2VnbWVudHMucHVzaChcIk1cIiwgaW50ZXJwb2xhdGUocHJvamVjdGlvbihwb2ludHMpLCB0ZW5zaW9uKSk7XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBpZiAoZGVmaW5lZC5jYWxsKHRoaXMsIGQgPSBkYXRhW2ldLCBpKSkge1xuXHQgICAgICAgICAgcG9pbnRzLnB1c2goWyArZnguY2FsbCh0aGlzLCBkLCBpKSwgK2Z5LmNhbGwodGhpcywgZCwgaSkgXSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChwb2ludHMubGVuZ3RoKSB7XG5cdCAgICAgICAgICBzZWdtZW50KCk7XG5cdCAgICAgICAgICBwb2ludHMgPSBbXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHBvaW50cy5sZW5ndGgpIHNlZ21lbnQoKTtcblx0ICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzLmpvaW4oXCJcIikgOiBudWxsO1xuXHQgICAgfVxuXHQgICAgbGluZS54ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4O1xuXHQgICAgICB4ID0gXztcblx0ICAgICAgcmV0dXJuIGxpbmU7XG5cdCAgICB9O1xuXHQgICAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5O1xuXHQgICAgICB5ID0gXztcblx0ICAgICAgcmV0dXJuIGxpbmU7XG5cdCAgICB9O1xuXHQgICAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkZWZpbmVkO1xuXHQgICAgICBkZWZpbmVkID0gXztcblx0ICAgICAgcmV0dXJuIGxpbmU7XG5cdCAgICB9O1xuXHQgICAgbGluZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGVLZXk7XG5cdCAgICAgIGlmICh0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiKSBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlID0gXzsgZWxzZSBpbnRlcnBvbGF0ZUtleSA9IChpbnRlcnBvbGF0ZSA9IGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycy5nZXQoXykgfHwgZDNfc3ZnX2xpbmVMaW5lYXIpLmtleTtcblx0ICAgICAgcmV0dXJuIGxpbmU7XG5cdCAgICB9O1xuXHQgICAgbGluZS50ZW5zaW9uID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0ZW5zaW9uO1xuXHQgICAgICB0ZW5zaW9uID0gXztcblx0ICAgICAgcmV0dXJuIGxpbmU7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGxpbmU7XG5cdCAgfVxuXHQgIGQzLnN2Zy5saW5lID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfc3ZnX2xpbmUoZDNfaWRlbnRpdHkpO1xuXHQgIH07XG5cdCAgdmFyIGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycyA9IGQzLm1hcCh7XG5cdCAgICBsaW5lYXI6IGQzX3N2Z19saW5lTGluZWFyLFxuXHQgICAgXCJsaW5lYXItY2xvc2VkXCI6IGQzX3N2Z19saW5lTGluZWFyQ2xvc2VkLFxuXHQgICAgc3RlcDogZDNfc3ZnX2xpbmVTdGVwLFxuXHQgICAgXCJzdGVwLWJlZm9yZVwiOiBkM19zdmdfbGluZVN0ZXBCZWZvcmUsXG5cdCAgICBcInN0ZXAtYWZ0ZXJcIjogZDNfc3ZnX2xpbmVTdGVwQWZ0ZXIsXG5cdCAgICBiYXNpczogZDNfc3ZnX2xpbmVCYXNpcyxcblx0ICAgIFwiYmFzaXMtb3BlblwiOiBkM19zdmdfbGluZUJhc2lzT3Blbixcblx0ICAgIFwiYmFzaXMtY2xvc2VkXCI6IGQzX3N2Z19saW5lQmFzaXNDbG9zZWQsXG5cdCAgICBidW5kbGU6IGQzX3N2Z19saW5lQnVuZGxlLFxuXHQgICAgY2FyZGluYWw6IGQzX3N2Z19saW5lQ2FyZGluYWwsXG5cdCAgICBcImNhcmRpbmFsLW9wZW5cIjogZDNfc3ZnX2xpbmVDYXJkaW5hbE9wZW4sXG5cdCAgICBcImNhcmRpbmFsLWNsb3NlZFwiOiBkM19zdmdfbGluZUNhcmRpbmFsQ2xvc2VkLFxuXHQgICAgbW9ub3RvbmU6IGQzX3N2Z19saW5lTW9ub3RvbmVcblx0ICB9KTtcblx0ICBkM19zdmdfbGluZUludGVycG9sYXRvcnMuZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdCAgICB2YWx1ZS5rZXkgPSBrZXk7XG5cdCAgICB2YWx1ZS5jbG9zZWQgPSAvLWNsb3NlZCQvLnRlc3Qoa2V5KTtcblx0ICB9KTtcblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIHtcblx0ICAgIHJldHVybiBwb2ludHMubGVuZ3RoID4gMSA/IHBvaW50cy5qb2luKFwiTFwiKSA6IHBvaW50cyArIFwiWlwiO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUxpbmVhckNsb3NlZChwb2ludHMpIHtcblx0ICAgIHJldHVybiBwb2ludHMuam9pbihcIkxcIikgKyBcIlpcIjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTdGVwKHBvaW50cykge1xuXHQgICAgdmFyIGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aCwgcCA9IHBvaW50c1swXSwgcGF0aCA9IFsgcFswXSwgXCIsXCIsIHBbMV0gXTtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSBwYXRoLnB1c2goXCJIXCIsIChwWzBdICsgKHAgPSBwb2ludHNbaV0pWzBdKSAvIDIsIFwiVlwiLCBwWzFdKTtcblx0ICAgIGlmIChuID4gMSkgcGF0aC5wdXNoKFwiSFwiLCBwWzBdKTtcblx0ICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcEJlZm9yZShwb2ludHMpIHtcblx0ICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sIFwiLFwiLCBwWzFdIF07XG5cdCAgICB3aGlsZSAoKytpIDwgbikgcGF0aC5wdXNoKFwiVlwiLCAocCA9IHBvaW50c1tpXSlbMV0sIFwiSFwiLCBwWzBdKTtcblx0ICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcEFmdGVyKHBvaW50cykge1xuXHQgICAgdmFyIGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aCwgcCA9IHBvaW50c1swXSwgcGF0aCA9IFsgcFswXSwgXCIsXCIsIHBbMV0gXTtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSBwYXRoLnB1c2goXCJIXCIsIChwID0gcG9pbnRzW2ldKVswXSwgXCJWXCIsIHBbMV0pO1xuXHQgICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVDYXJkaW5hbE9wZW4ocG9pbnRzLCB0ZW5zaW9uKSB7XG5cdCAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDQgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzFdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cy5zbGljZSgxLCAtMSksIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhwb2ludHMsIHRlbnNpb24pKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVDYXJkaW5hbENsb3NlZChwb2ludHMsIHRlbnNpb24pIHtcblx0ICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgMyA/IGQzX3N2Z19saW5lTGluZWFyQ2xvc2VkKHBvaW50cykgOiBwb2ludHNbMF0gKyBkM19zdmdfbGluZUhlcm1pdGUoKHBvaW50cy5wdXNoKHBvaW50c1swXSksIFxuXHQgICAgcG9pbnRzKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKFsgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXSBdLmNvbmNhdChwb2ludHMsIFsgcG9pbnRzWzFdIF0pLCB0ZW5zaW9uKSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWwocG9pbnRzLCB0ZW5zaW9uKSB7XG5cdCAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUhlcm1pdGUocG9pbnRzLCB0YW5nZW50cykge1xuXHQgICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA8IDEgfHwgcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGggJiYgcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGggKyAyKSB7XG5cdCAgICAgIHJldHVybiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpO1xuXHQgICAgfVxuXHQgICAgdmFyIHF1YWQgPSBwb2ludHMubGVuZ3RoICE9IHRhbmdlbnRzLmxlbmd0aCwgcGF0aCA9IFwiXCIsIHAwID0gcG9pbnRzWzBdLCBwID0gcG9pbnRzWzFdLCB0MCA9IHRhbmdlbnRzWzBdLCB0ID0gdDAsIHBpID0gMTtcblx0ICAgIGlmIChxdWFkKSB7XG5cdCAgICAgIHBhdGggKz0gXCJRXCIgKyAocFswXSAtIHQwWzBdICogMiAvIDMpICsgXCIsXCIgKyAocFsxXSAtIHQwWzFdICogMiAvIDMpICsgXCIsXCIgKyBwWzBdICsgXCIsXCIgKyBwWzFdO1xuXHQgICAgICBwMCA9IHBvaW50c1sxXTtcblx0ICAgICAgcGkgPSAyO1xuXHQgICAgfVxuXHQgICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA+IDEpIHtcblx0ICAgICAgdCA9IHRhbmdlbnRzWzFdO1xuXHQgICAgICBwID0gcG9pbnRzW3BpXTtcblx0ICAgICAgcGkrKztcblx0ICAgICAgcGF0aCArPSBcIkNcIiArIChwMFswXSArIHQwWzBdKSArIFwiLFwiICsgKHAwWzFdICsgdDBbMV0pICsgXCIsXCIgKyAocFswXSAtIHRbMF0pICsgXCIsXCIgKyAocFsxXSAtIHRbMV0pICsgXCIsXCIgKyBwWzBdICsgXCIsXCIgKyBwWzFdO1xuXHQgICAgICBmb3IgKHZhciBpID0gMjsgaSA8IHRhbmdlbnRzLmxlbmd0aDsgaSsrLCBwaSsrKSB7XG5cdCAgICAgICAgcCA9IHBvaW50c1twaV07XG5cdCAgICAgICAgdCA9IHRhbmdlbnRzW2ldO1xuXHQgICAgICAgIHBhdGggKz0gXCJTXCIgKyAocFswXSAtIHRbMF0pICsgXCIsXCIgKyAocFsxXSAtIHRbMV0pICsgXCIsXCIgKyBwWzBdICsgXCIsXCIgKyBwWzFdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAocXVhZCkge1xuXHQgICAgICB2YXIgbHAgPSBwb2ludHNbcGldO1xuXHQgICAgICBwYXRoICs9IFwiUVwiICsgKHBbMF0gKyB0WzBdICogMiAvIDMpICsgXCIsXCIgKyAocFsxXSArIHRbMV0gKiAyIC8gMykgKyBcIixcIiArIGxwWzBdICsgXCIsXCIgKyBscFsxXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBwYXRoO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMocG9pbnRzLCB0ZW5zaW9uKSB7XG5cdCAgICB2YXIgdGFuZ2VudHMgPSBbXSwgYSA9ICgxIC0gdGVuc2lvbikgLyAyLCBwMCwgcDEgPSBwb2ludHNbMF0sIHAyID0gcG9pbnRzWzFdLCBpID0gMSwgbiA9IHBvaW50cy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICBwMCA9IHAxO1xuXHQgICAgICBwMSA9IHAyO1xuXHQgICAgICBwMiA9IHBvaW50c1tpXTtcblx0ICAgICAgdGFuZ2VudHMucHVzaChbIGEgKiAocDJbMF0gLSBwMFswXSksIGEgKiAocDJbMV0gLSBwMFsxXSkgXSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGFuZ2VudHM7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXMocG9pbnRzKSB7XG5cdCAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDMpIHJldHVybiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpO1xuXHQgICAgdmFyIGkgPSAxLCBuID0gcG9pbnRzLmxlbmd0aCwgcGkgPSBwb2ludHNbMF0sIHgwID0gcGlbMF0sIHkwID0gcGlbMV0sIHB4ID0gWyB4MCwgeDAsIHgwLCAocGkgPSBwb2ludHNbMV0pWzBdIF0sIHB5ID0gWyB5MCwgeTAsIHkwLCBwaVsxXSBdLCBwYXRoID0gWyB4MCwgXCIsXCIsIHkwLCBcIkxcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB5KSBdO1xuXHQgICAgcG9pbnRzLnB1c2gocG9pbnRzW24gLSAxXSk7XG5cdCAgICB3aGlsZSAoKytpIDw9IG4pIHtcblx0ICAgICAgcGkgPSBwb2ludHNbaV07XG5cdCAgICAgIHB4LnNoaWZ0KCk7XG5cdCAgICAgIHB4LnB1c2gocGlbMF0pO1xuXHQgICAgICBweS5zaGlmdCgpO1xuXHQgICAgICBweS5wdXNoKHBpWzFdKTtcblx0ICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpO1xuXHQgICAgfVxuXHQgICAgcG9pbnRzLnBvcCgpO1xuXHQgICAgcGF0aC5wdXNoKFwiTFwiLCBwaSk7XG5cdCAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzT3Blbihwb2ludHMpIHtcblx0ICAgIGlmIChwb2ludHMubGVuZ3RoIDwgNCkgcmV0dXJuIGQzX3N2Z19saW5lTGluZWFyKHBvaW50cyk7XG5cdCAgICB2YXIgcGF0aCA9IFtdLCBpID0gLTEsIG4gPSBwb2ludHMubGVuZ3RoLCBwaSwgcHggPSBbIDAgXSwgcHkgPSBbIDAgXTtcblx0ICAgIHdoaWxlICgrK2kgPCAzKSB7XG5cdCAgICAgIHBpID0gcG9pbnRzW2ldO1xuXHQgICAgICBweC5wdXNoKHBpWzBdKTtcblx0ICAgICAgcHkucHVzaChwaVsxXSk7XG5cdCAgICB9XG5cdCAgICBwYXRoLnB1c2goZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCkgKyBcIixcIiArIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpKTtcblx0ICAgIC0taTtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgIHBpID0gcG9pbnRzW2ldO1xuXHQgICAgICBweC5zaGlmdCgpO1xuXHQgICAgICBweC5wdXNoKHBpWzBdKTtcblx0ICAgICAgcHkuc2hpZnQoKTtcblx0ICAgICAgcHkucHVzaChwaVsxXSk7XG5cdCAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXNDbG9zZWQocG9pbnRzKSB7XG5cdCAgICB2YXIgcGF0aCwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgbSA9IG4gKyA0LCBwaSwgcHggPSBbXSwgcHkgPSBbXTtcblx0ICAgIHdoaWxlICgrK2kgPCA0KSB7XG5cdCAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcblx0ICAgICAgcHgucHVzaChwaVswXSk7XG5cdCAgICAgIHB5LnB1c2gocGlbMV0pO1xuXHQgICAgfVxuXHQgICAgcGF0aCA9IFsgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB5KSBdO1xuXHQgICAgLS1pO1xuXHQgICAgd2hpbGUgKCsraSA8IG0pIHtcblx0ICAgICAgcGkgPSBwb2ludHNbaSAlIG5dO1xuXHQgICAgICBweC5zaGlmdCgpO1xuXHQgICAgICBweC5wdXNoKHBpWzBdKTtcblx0ICAgICAgcHkuc2hpZnQoKTtcblx0ICAgICAgcHkucHVzaChwaVsxXSk7XG5cdCAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lQnVuZGxlKHBvaW50cywgdGVuc2lvbikge1xuXHQgICAgdmFyIG4gPSBwb2ludHMubGVuZ3RoIC0gMTtcblx0ICAgIGlmIChuKSB7XG5cdCAgICAgIHZhciB4MCA9IHBvaW50c1swXVswXSwgeTAgPSBwb2ludHNbMF1bMV0sIGR4ID0gcG9pbnRzW25dWzBdIC0geDAsIGR5ID0gcG9pbnRzW25dWzFdIC0geTAsIGkgPSAtMSwgcCwgdDtcblx0ICAgICAgd2hpbGUgKCsraSA8PSBuKSB7XG5cdCAgICAgICAgcCA9IHBvaW50c1tpXTtcblx0ICAgICAgICB0ID0gaSAvIG47XG5cdCAgICAgICAgcFswXSA9IHRlbnNpb24gKiBwWzBdICsgKDEgLSB0ZW5zaW9uKSAqICh4MCArIHQgKiBkeCk7XG5cdCAgICAgICAgcFsxXSA9IHRlbnNpb24gKiBwWzFdICsgKDEgLSB0ZW5zaW9uKSAqICh5MCArIHQgKiBkeSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBkM19zdmdfbGluZUJhc2lzKHBvaW50cyk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lRG90NChhLCBiKSB7XG5cdCAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG5cdCAgfVxuXHQgIHZhciBkM19zdmdfbGluZUJhc2lzQmV6aWVyMSA9IFsgMCwgMiAvIDMsIDEgLyAzLCAwIF0sIGQzX3N2Z19saW5lQmFzaXNCZXppZXIyID0gWyAwLCAxIC8gMywgMiAvIDMsIDAgXSwgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMgPSBbIDAsIDEgLyA2LCAyIC8gMywgMSAvIDYgXTtcblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHgsIHkpIHtcblx0ICAgIHBhdGgucHVzaChcIkNcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIxLCB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMSwgeSksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjIsIHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIyLCB5KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgeCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHkpKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTbG9wZShwMCwgcDEpIHtcblx0ICAgIHJldHVybiAocDFbMV0gLSBwMFsxXSkgLyAocDFbMF0gLSBwMFswXSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSB7XG5cdCAgICB2YXIgaSA9IDAsIGogPSBwb2ludHMubGVuZ3RoIC0gMSwgbSA9IFtdLCBwMCA9IHBvaW50c1swXSwgcDEgPSBwb2ludHNbMV0sIGQgPSBtWzBdID0gZDNfc3ZnX2xpbmVTbG9wZShwMCwgcDEpO1xuXHQgICAgd2hpbGUgKCsraSA8IGopIHtcblx0ICAgICAgbVtpXSA9IChkICsgKGQgPSBkM19zdmdfbGluZVNsb3BlKHAwID0gcDEsIHAxID0gcG9pbnRzW2kgKyAxXSkpKSAvIDI7XG5cdCAgICB9XG5cdCAgICBtW2ldID0gZDtcblx0ICAgIHJldHVybiBtO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZU1vbm90b25lVGFuZ2VudHMocG9pbnRzKSB7XG5cdCAgICB2YXIgdGFuZ2VudHMgPSBbXSwgZCwgYSwgYiwgcywgbSA9IGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSwgaSA9IC0xLCBqID0gcG9pbnRzLmxlbmd0aCAtIDE7XG5cdCAgICB3aGlsZSAoKytpIDwgaikge1xuXHQgICAgICBkID0gZDNfc3ZnX2xpbmVTbG9wZShwb2ludHNbaV0sIHBvaW50c1tpICsgMV0pO1xuXHQgICAgICBpZiAoYWJzKGQpIDwgzrUpIHtcblx0ICAgICAgICBtW2ldID0gbVtpICsgMV0gPSAwO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGEgPSBtW2ldIC8gZDtcblx0ICAgICAgICBiID0gbVtpICsgMV0gLyBkO1xuXHQgICAgICAgIHMgPSBhICogYSArIGIgKiBiO1xuXHQgICAgICAgIGlmIChzID4gOSkge1xuXHQgICAgICAgICAgcyA9IGQgKiAzIC8gTWF0aC5zcXJ0KHMpO1xuXHQgICAgICAgICAgbVtpXSA9IHMgKiBhO1xuXHQgICAgICAgICAgbVtpICsgMV0gPSBzICogYjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGkgPSAtMTtcblx0ICAgIHdoaWxlICgrK2kgPD0gaikge1xuXHQgICAgICBzID0gKHBvaW50c1tNYXRoLm1pbihqLCBpICsgMSldWzBdIC0gcG9pbnRzW01hdGgubWF4KDAsIGkgLSAxKV1bMF0pIC8gKDYgKiAoMSArIG1baV0gKiBtW2ldKSk7XG5cdCAgICAgIHRhbmdlbnRzLnB1c2goWyBzIHx8IDAsIG1baV0gKiBzIHx8IDAgXSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGFuZ2VudHM7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lTW9ub3RvbmUocG9pbnRzKSB7XG5cdCAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzKHBvaW50cykpO1xuXHQgIH1cblx0ICBkMy5zdmcubGluZS5yYWRpYWwgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBsaW5lID0gZDNfc3ZnX2xpbmUoZDNfc3ZnX2xpbmVSYWRpYWwpO1xuXHQgICAgbGluZS5yYWRpdXMgPSBsaW5lLngsIGRlbGV0ZSBsaW5lLng7XG5cdCAgICBsaW5lLmFuZ2xlID0gbGluZS55LCBkZWxldGUgbGluZS55O1xuXHQgICAgcmV0dXJuIGxpbmU7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZVJhZGlhbChwb2ludHMpIHtcblx0ICAgIHZhciBwb2ludCwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgciwgYTtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuXHQgICAgICByID0gcG9pbnRbMF07XG5cdCAgICAgIGEgPSBwb2ludFsxXSAtIGhhbGbPgDtcblx0ICAgICAgcG9pbnRbMF0gPSByICogTWF0aC5jb3MoYSk7XG5cdCAgICAgIHBvaW50WzFdID0gciAqIE1hdGguc2luKGEpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHBvaW50cztcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2FyZWEocHJvamVjdGlvbikge1xuXHQgICAgdmFyIHgwID0gZDNfZ2VvbV9wb2ludFgsIHgxID0gZDNfZ2VvbV9wb2ludFgsIHkwID0gMCwgeTEgPSBkM19nZW9tX3BvaW50WSwgZGVmaW5lZCA9IGQzX3RydWUsIGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVMaW5lYXIsIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUua2V5LCBpbnRlcnBvbGF0ZVJldmVyc2UgPSBpbnRlcnBvbGF0ZSwgTCA9IFwiTFwiLCB0ZW5zaW9uID0gLjc7XG5cdCAgICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcblx0ICAgICAgdmFyIHNlZ21lbnRzID0gW10sIHBvaW50czAgPSBbXSwgcG9pbnRzMSA9IFtdLCBpID0gLTEsIG4gPSBkYXRhLmxlbmd0aCwgZCwgZngwID0gZDNfZnVuY3Rvcih4MCksIGZ5MCA9IGQzX2Z1bmN0b3IoeTApLCBmeDEgPSB4MCA9PT0geDEgPyBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4geDtcblx0ICAgICAgfSA6IGQzX2Z1bmN0b3IoeDEpLCBmeTEgPSB5MCA9PT0geTEgPyBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4geTtcblx0ICAgICAgfSA6IGQzX2Z1bmN0b3IoeTEpLCB4LCB5O1xuXHQgICAgICBmdW5jdGlvbiBzZWdtZW50KCkge1xuXHQgICAgICAgIHNlZ21lbnRzLnB1c2goXCJNXCIsIGludGVycG9sYXRlKHByb2plY3Rpb24ocG9pbnRzMSksIHRlbnNpb24pLCBMLCBpbnRlcnBvbGF0ZVJldmVyc2UocHJvamVjdGlvbihwb2ludHMwLnJldmVyc2UoKSksIHRlbnNpb24pLCBcIlpcIik7XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBpZiAoZGVmaW5lZC5jYWxsKHRoaXMsIGQgPSBkYXRhW2ldLCBpKSkge1xuXHQgICAgICAgICAgcG9pbnRzMC5wdXNoKFsgeCA9ICtmeDAuY2FsbCh0aGlzLCBkLCBpKSwgeSA9ICtmeTAuY2FsbCh0aGlzLCBkLCBpKSBdKTtcblx0ICAgICAgICAgIHBvaW50czEucHVzaChbICtmeDEuY2FsbCh0aGlzLCBkLCBpKSwgK2Z5MS5jYWxsKHRoaXMsIGQsIGkpIF0pO1xuXHQgICAgICAgIH0gZWxzZSBpZiAocG9pbnRzMC5sZW5ndGgpIHtcblx0ICAgICAgICAgIHNlZ21lbnQoKTtcblx0ICAgICAgICAgIHBvaW50czAgPSBbXTtcblx0ICAgICAgICAgIHBvaW50czEgPSBbXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHBvaW50czAubGVuZ3RoKSBzZWdtZW50KCk7XG5cdCAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50cy5qb2luKFwiXCIpIDogbnVsbDtcblx0ICAgIH1cblx0ICAgIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDE7XG5cdCAgICAgIHgwID0geDEgPSBfO1xuXHQgICAgICByZXR1cm4gYXJlYTtcblx0ICAgIH07XG5cdCAgICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MDtcblx0ICAgICAgeDAgPSBfO1xuXHQgICAgICByZXR1cm4gYXJlYTtcblx0ICAgIH07XG5cdCAgICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MTtcblx0ICAgICAgeDEgPSBfO1xuXHQgICAgICByZXR1cm4gYXJlYTtcblx0ICAgIH07XG5cdCAgICBhcmVhLnkgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuXHQgICAgICB5MCA9IHkxID0gXztcblx0ICAgICAgcmV0dXJuIGFyZWE7XG5cdCAgICB9O1xuXHQgICAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTA7XG5cdCAgICAgIHkwID0gXztcblx0ICAgICAgcmV0dXJuIGFyZWE7XG5cdCAgICB9O1xuXHQgICAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTE7XG5cdCAgICAgIHkxID0gXztcblx0ICAgICAgcmV0dXJuIGFyZWE7XG5cdCAgICB9O1xuXHQgICAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkZWZpbmVkO1xuXHQgICAgICBkZWZpbmVkID0gXztcblx0ICAgICAgcmV0dXJuIGFyZWE7XG5cdCAgICB9O1xuXHQgICAgYXJlYS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGVLZXk7XG5cdCAgICAgIGlmICh0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiKSBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlID0gXzsgZWxzZSBpbnRlcnBvbGF0ZUtleSA9IChpbnRlcnBvbGF0ZSA9IGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycy5nZXQoXykgfHwgZDNfc3ZnX2xpbmVMaW5lYXIpLmtleTtcblx0ICAgICAgaW50ZXJwb2xhdGVSZXZlcnNlID0gaW50ZXJwb2xhdGUucmV2ZXJzZSB8fCBpbnRlcnBvbGF0ZTtcblx0ICAgICAgTCA9IGludGVycG9sYXRlLmNsb3NlZCA/IFwiTVwiIDogXCJMXCI7XG5cdCAgICAgIHJldHVybiBhcmVhO1xuXHQgICAgfTtcblx0ICAgIGFyZWEudGVuc2lvbiA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGVuc2lvbjtcblx0ICAgICAgdGVuc2lvbiA9IF87XG5cdCAgICAgIHJldHVybiBhcmVhO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBhcmVhO1xuXHQgIH1cblx0ICBkM19zdmdfbGluZVN0ZXBCZWZvcmUucmV2ZXJzZSA9IGQzX3N2Z19saW5lU3RlcEFmdGVyO1xuXHQgIGQzX3N2Z19saW5lU3RlcEFmdGVyLnJldmVyc2UgPSBkM19zdmdfbGluZVN0ZXBCZWZvcmU7XG5cdCAgZDMuc3ZnLmFyZWEgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19zdmdfYXJlYShkM19pZGVudGl0eSk7XG5cdCAgfTtcblx0ICBkMy5zdmcuYXJlYS5yYWRpYWwgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBhcmVhID0gZDNfc3ZnX2FyZWEoZDNfc3ZnX2xpbmVSYWRpYWwpO1xuXHQgICAgYXJlYS5yYWRpdXMgPSBhcmVhLngsIGRlbGV0ZSBhcmVhLng7XG5cdCAgICBhcmVhLmlubmVyUmFkaXVzID0gYXJlYS54MCwgZGVsZXRlIGFyZWEueDA7XG5cdCAgICBhcmVhLm91dGVyUmFkaXVzID0gYXJlYS54MSwgZGVsZXRlIGFyZWEueDE7XG5cdCAgICBhcmVhLmFuZ2xlID0gYXJlYS55LCBkZWxldGUgYXJlYS55O1xuXHQgICAgYXJlYS5zdGFydEFuZ2xlID0gYXJlYS55MCwgZGVsZXRlIGFyZWEueTA7XG5cdCAgICBhcmVhLmVuZEFuZ2xlID0gYXJlYS55MSwgZGVsZXRlIGFyZWEueTE7XG5cdCAgICByZXR1cm4gYXJlYTtcblx0ICB9O1xuXHQgIGQzLnN2Zy5jaG9yZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHNvdXJjZSA9IGQzX3NvdXJjZSwgdGFyZ2V0ID0gZDNfdGFyZ2V0LCByYWRpdXMgPSBkM19zdmdfY2hvcmRSYWRpdXMsIHN0YXJ0QW5nbGUgPSBkM19zdmdfYXJjU3RhcnRBbmdsZSwgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGU7XG5cdCAgICBmdW5jdGlvbiBjaG9yZChkLCBpKSB7XG5cdCAgICAgIHZhciBzID0gc3ViZ3JvdXAodGhpcywgc291cmNlLCBkLCBpKSwgdCA9IHN1Ymdyb3VwKHRoaXMsIHRhcmdldCwgZCwgaSk7XG5cdCAgICAgIHJldHVybiBcIk1cIiArIHMucDAgKyBhcmMocy5yLCBzLnAxLCBzLmExIC0gcy5hMCkgKyAoZXF1YWxzKHMsIHQpID8gY3VydmUocy5yLCBzLnAxLCBzLnIsIHMucDApIDogY3VydmUocy5yLCBzLnAxLCB0LnIsIHQucDApICsgYXJjKHQuciwgdC5wMSwgdC5hMSAtIHQuYTApICsgY3VydmUodC5yLCB0LnAxLCBzLnIsIHMucDApKSArIFwiWlwiO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc3ViZ3JvdXAoc2VsZiwgZiwgZCwgaSkge1xuXHQgICAgICB2YXIgc3ViZ3JvdXAgPSBmLmNhbGwoc2VsZiwgZCwgaSksIHIgPSByYWRpdXMuY2FsbChzZWxmLCBzdWJncm91cCwgaSksIGEwID0gc3RhcnRBbmdsZS5jYWxsKHNlbGYsIHN1Ymdyb3VwLCBpKSAtIGhhbGbPgCwgYTEgPSBlbmRBbmdsZS5jYWxsKHNlbGYsIHN1Ymdyb3VwLCBpKSAtIGhhbGbPgDtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICByOiByLFxuXHQgICAgICAgIGEwOiBhMCxcblx0ICAgICAgICBhMTogYTEsXG5cdCAgICAgICAgcDA6IFsgciAqIE1hdGguY29zKGEwKSwgciAqIE1hdGguc2luKGEwKSBdLFxuXHQgICAgICAgIHAxOiBbIHIgKiBNYXRoLmNvcyhhMSksIHIgKiBNYXRoLnNpbihhMSkgXVxuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcblx0ICAgICAgcmV0dXJuIGEuYTAgPT0gYi5hMCAmJiBhLmExID09IGIuYTE7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBhcmMociwgcCwgYSkge1xuXHQgICAgICByZXR1cm4gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIgMCBcIiArICsoYSA+IM+AKSArIFwiLDEgXCIgKyBwO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY3VydmUocjAsIHAwLCByMSwgcDEpIHtcblx0ICAgICAgcmV0dXJuIFwiUSAwLDAgXCIgKyBwMTtcblx0ICAgIH1cblx0ICAgIGNob3JkLnJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFkaXVzO1xuXHQgICAgICByYWRpdXMgPSBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gY2hvcmQ7XG5cdCAgICB9O1xuXHQgICAgY2hvcmQuc291cmNlID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG5cdCAgICAgIHNvdXJjZSA9IGQzX2Z1bmN0b3Iodik7XG5cdCAgICAgIHJldHVybiBjaG9yZDtcblx0ICAgIH07XG5cdCAgICBjaG9yZC50YXJnZXQgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcblx0ICAgICAgdGFyZ2V0ID0gZDNfZnVuY3Rvcih2KTtcblx0ICAgICAgcmV0dXJuIGNob3JkO1xuXHQgICAgfTtcblx0ICAgIGNob3JkLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG5cdCAgICAgIHN0YXJ0QW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gY2hvcmQ7XG5cdCAgICB9O1xuXHQgICAgY2hvcmQuZW5kQW5nbGUgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGVuZEFuZ2xlO1xuXHQgICAgICBlbmRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG5cdCAgICAgIHJldHVybiBjaG9yZDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gY2hvcmQ7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zdmdfY2hvcmRSYWRpdXMoZCkge1xuXHQgICAgcmV0dXJuIGQucmFkaXVzO1xuXHQgIH1cblx0ICBkMy5zdmcuZGlhZ29uYWwgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBzb3VyY2UgPSBkM19zb3VyY2UsIHRhcmdldCA9IGQzX3RhcmdldCwgcHJvamVjdGlvbiA9IGQzX3N2Z19kaWFnb25hbFByb2plY3Rpb247XG5cdCAgICBmdW5jdGlvbiBkaWFnb25hbChkLCBpKSB7XG5cdCAgICAgIHZhciBwMCA9IHNvdXJjZS5jYWxsKHRoaXMsIGQsIGkpLCBwMyA9IHRhcmdldC5jYWxsKHRoaXMsIGQsIGkpLCBtID0gKHAwLnkgKyBwMy55KSAvIDIsIHAgPSBbIHAwLCB7XG5cdCAgICAgICAgeDogcDAueCxcblx0ICAgICAgICB5OiBtXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICB4OiBwMy54LFxuXHQgICAgICAgIHk6IG1cblx0ICAgICAgfSwgcDMgXTtcblx0ICAgICAgcCA9IHAubWFwKHByb2plY3Rpb24pO1xuXHQgICAgICByZXR1cm4gXCJNXCIgKyBwWzBdICsgXCJDXCIgKyBwWzFdICsgXCIgXCIgKyBwWzJdICsgXCIgXCIgKyBwWzNdO1xuXHQgICAgfVxuXHQgICAgZGlhZ29uYWwuc291cmNlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG5cdCAgICAgIHNvdXJjZSA9IGQzX2Z1bmN0b3IoeCk7XG5cdCAgICAgIHJldHVybiBkaWFnb25hbDtcblx0ICAgIH07XG5cdCAgICBkaWFnb25hbC50YXJnZXQgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcblx0ICAgICAgdGFyZ2V0ID0gZDNfZnVuY3Rvcih4KTtcblx0ICAgICAgcmV0dXJuIGRpYWdvbmFsO1xuXHQgICAgfTtcblx0ICAgIGRpYWdvbmFsLnByb2plY3Rpb24gPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByb2plY3Rpb247XG5cdCAgICAgIHByb2plY3Rpb24gPSB4O1xuXHQgICAgICByZXR1cm4gZGlhZ29uYWw7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGRpYWdvbmFsO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUHJvamVjdGlvbihkKSB7XG5cdCAgICByZXR1cm4gWyBkLngsIGQueSBdO1xuXHQgIH1cblx0ICBkMy5zdmcuZGlhZ29uYWwucmFkaWFsID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgZGlhZ29uYWwgPSBkMy5zdmcuZGlhZ29uYWwoKSwgcHJvamVjdGlvbiA9IGQzX3N2Z19kaWFnb25hbFByb2plY3Rpb24sIHByb2plY3Rpb25fID0gZGlhZ29uYWwucHJvamVjdGlvbjtcblx0ICAgIGRpYWdvbmFsLnByb2plY3Rpb24gPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcHJvamVjdGlvbl8oZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uID0geCkpIDogcHJvamVjdGlvbjtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZGlhZ29uYWw7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zdmdfZGlhZ29uYWxSYWRpYWxQcm9qZWN0aW9uKHByb2plY3Rpb24pIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGQgPSBwcm9qZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHIgPSBkWzBdLCBhID0gZFsxXSAtIGhhbGbPgDtcblx0ICAgICAgcmV0dXJuIFsgciAqIE1hdGguY29zKGEpLCByICogTWF0aC5zaW4oYSkgXTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLnN2Zy5zeW1ib2wgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciB0eXBlID0gZDNfc3ZnX3N5bWJvbFR5cGUsIHNpemUgPSBkM19zdmdfc3ltYm9sU2l6ZTtcblx0ICAgIGZ1bmN0aW9uIHN5bWJvbChkLCBpKSB7XG5cdCAgICAgIHJldHVybiAoZDNfc3ZnX3N5bWJvbHMuZ2V0KHR5cGUuY2FsbCh0aGlzLCBkLCBpKSkgfHwgZDNfc3ZnX3N5bWJvbENpcmNsZSkoc2l6ZS5jYWxsKHRoaXMsIGQsIGkpKTtcblx0ICAgIH1cblx0ICAgIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0eXBlO1xuXHQgICAgICB0eXBlID0gZDNfZnVuY3Rvcih4KTtcblx0ICAgICAgcmV0dXJuIHN5bWJvbDtcblx0ICAgIH07XG5cdCAgICBzeW1ib2wuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcblx0ICAgICAgc2l6ZSA9IGQzX2Z1bmN0b3IoeCk7XG5cdCAgICAgIHJldHVybiBzeW1ib2w7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHN5bWJvbDtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3N2Z19zeW1ib2xTaXplKCkge1xuXHQgICAgcmV0dXJuIDY0O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sVHlwZSgpIHtcblx0ICAgIHJldHVybiBcImNpcmNsZVwiO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sQ2lyY2xlKHNpemUpIHtcblx0ICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyDPgCk7XG5cdCAgICByZXR1cm4gXCJNMCxcIiArIHIgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiAwIDEsMSAwLFwiICsgLXIgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiAwIDEsMSAwLFwiICsgciArIFwiWlwiO1xuXHQgIH1cblx0ICB2YXIgZDNfc3ZnX3N5bWJvbHMgPSBkMy5tYXAoe1xuXHQgICAgY2lyY2xlOiBkM19zdmdfc3ltYm9sQ2lyY2xlLFxuXHQgICAgY3Jvc3M6IGZ1bmN0aW9uKHNpemUpIHtcblx0ICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIDUpIC8gMjtcblx0ICAgICAgcmV0dXJuIFwiTVwiICsgLTMgKiByICsgXCIsXCIgKyAtciArIFwiSFwiICsgLXIgKyBcIlZcIiArIC0zICogciArIFwiSFwiICsgciArIFwiVlwiICsgLXIgKyBcIkhcIiArIDMgKiByICsgXCJWXCIgKyByICsgXCJIXCIgKyByICsgXCJWXCIgKyAzICogciArIFwiSFwiICsgLXIgKyBcIlZcIiArIHIgKyBcIkhcIiArIC0zICogciArIFwiWlwiO1xuXHQgICAgfSxcblx0ICAgIGRpYW1vbmQ6IGZ1bmN0aW9uKHNpemUpIHtcblx0ICAgICAgdmFyIHJ5ID0gTWF0aC5zcXJ0KHNpemUgLyAoMiAqIGQzX3N2Z19zeW1ib2xUYW4zMCkpLCByeCA9IHJ5ICogZDNfc3ZnX3N5bWJvbFRhbjMwO1xuXHQgICAgICByZXR1cm4gXCJNMCxcIiArIC1yeSArIFwiTFwiICsgcnggKyBcIiwwXCIgKyBcIiAwLFwiICsgcnkgKyBcIiBcIiArIC1yeCArIFwiLDBcIiArIFwiWlwiO1xuXHQgICAgfSxcblx0ICAgIHNxdWFyZTogZnVuY3Rpb24oc2l6ZSkge1xuXHQgICAgICB2YXIgciA9IE1hdGguc3FydChzaXplKSAvIDI7XG5cdCAgICAgIHJldHVybiBcIk1cIiArIC1yICsgXCIsXCIgKyAtciArIFwiTFwiICsgciArIFwiLFwiICsgLXIgKyBcIiBcIiArIHIgKyBcIixcIiArIHIgKyBcIiBcIiArIC1yICsgXCIsXCIgKyByICsgXCJaXCI7XG5cdCAgICB9LFxuXHQgICAgXCJ0cmlhbmdsZS1kb3duXCI6IGZ1bmN0aW9uKHNpemUpIHtcblx0ICAgICAgdmFyIHJ4ID0gTWF0aC5zcXJ0KHNpemUgLyBkM19zdmdfc3ltYm9sU3FydDMpLCByeSA9IHJ4ICogZDNfc3ZnX3N5bWJvbFNxcnQzIC8gMjtcblx0ICAgICAgcmV0dXJuIFwiTTAsXCIgKyByeSArIFwiTFwiICsgcnggKyBcIixcIiArIC1yeSArIFwiIFwiICsgLXJ4ICsgXCIsXCIgKyAtcnkgKyBcIlpcIjtcblx0ICAgIH0sXG5cdCAgICBcInRyaWFuZ2xlLXVwXCI6IGZ1bmN0aW9uKHNpemUpIHtcblx0ICAgICAgdmFyIHJ4ID0gTWF0aC5zcXJ0KHNpemUgLyBkM19zdmdfc3ltYm9sU3FydDMpLCByeSA9IHJ4ICogZDNfc3ZnX3N5bWJvbFNxcnQzIC8gMjtcblx0ICAgICAgcmV0dXJuIFwiTTAsXCIgKyAtcnkgKyBcIkxcIiArIHJ4ICsgXCIsXCIgKyByeSArIFwiIFwiICsgLXJ4ICsgXCIsXCIgKyByeSArIFwiWlwiO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIGQzLnN2Zy5zeW1ib2xUeXBlcyA9IGQzX3N2Z19zeW1ib2xzLmtleXMoKTtcblx0ICB2YXIgZDNfc3ZnX3N5bWJvbFNxcnQzID0gTWF0aC5zcXJ0KDMpLCBkM19zdmdfc3ltYm9sVGFuMzAgPSBNYXRoLnRhbigzMCAqIGQzX3JhZGlhbnMpO1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS50cmFuc2l0aW9uID0gZnVuY3Rpb24obmFtZSkge1xuXHQgICAgdmFyIGlkID0gZDNfdHJhbnNpdGlvbkluaGVyaXRJZCB8fCArK2QzX3RyYW5zaXRpb25JZCwgbnMgPSBkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIG5vZGUsIHRyYW5zaXRpb24gPSBkM190cmFuc2l0aW9uSW5oZXJpdCB8fCB7XG5cdCAgICAgIHRpbWU6IERhdGUubm93KCksXG5cdCAgICAgIGVhc2U6IGQzX2Vhc2VfY3ViaWNJbk91dCxcblx0ICAgICAgZGVsYXk6IDAsXG5cdCAgICAgIGR1cmF0aW9uOiAyNTBcblx0ICAgIH07XG5cdCAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG5cdCAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuXHQgICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG5cdCAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgZDNfdHJhbnNpdGlvbk5vZGUobm9kZSwgaSwgbnMsIGlkLCB0cmFuc2l0aW9uKTtcblx0ICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIG5zLCBpZCk7XG5cdCAgfTtcblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24obmFtZSkge1xuXHQgICAgcmV0dXJuIHRoaXMuZWFjaChuYW1lID09IG51bGwgPyBkM19zZWxlY3Rpb25faW50ZXJydXB0IDogZDNfc2VsZWN0aW9uX2ludGVycnVwdE5TKGQzX3RyYW5zaXRpb25OYW1lc3BhY2UobmFtZSkpKTtcblx0ICB9O1xuXHQgIHZhciBkM19zZWxlY3Rpb25faW50ZXJydXB0ID0gZDNfc2VsZWN0aW9uX2ludGVycnVwdE5TKGQzX3RyYW5zaXRpb25OYW1lc3BhY2UoKSk7XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2ludGVycnVwdE5TKG5zKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBsb2NrLCBhY3RpdmVJZCwgYWN0aXZlO1xuXHQgICAgICBpZiAoKGxvY2sgPSB0aGlzW25zXSkgJiYgKGFjdGl2ZSA9IGxvY2tbYWN0aXZlSWQgPSBsb2NrLmFjdGl2ZV0pKSB7XG5cdCAgICAgICAgYWN0aXZlLnRpbWVyLmMgPSBudWxsO1xuXHQgICAgICAgIGFjdGl2ZS50aW1lci50ID0gTmFOO1xuXHQgICAgICAgIGlmICgtLWxvY2suY291bnQpIGRlbGV0ZSBsb2NrW2FjdGl2ZUlkXTsgZWxzZSBkZWxldGUgdGhpc1tuc107XG5cdCAgICAgICAgbG9jay5hY3RpdmUgKz0gLjU7XG5cdCAgICAgICAgYWN0aXZlLmV2ZW50ICYmIGFjdGl2ZS5ldmVudC5pbnRlcnJ1cHQuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBhY3RpdmUuaW5kZXgpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190cmFuc2l0aW9uKGdyb3VwcywgbnMsIGlkKSB7XG5cdCAgICBkM19zdWJjbGFzcyhncm91cHMsIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUpO1xuXHQgICAgZ3JvdXBzLm5hbWVzcGFjZSA9IG5zO1xuXHQgICAgZ3JvdXBzLmlkID0gaWQ7XG5cdCAgICByZXR1cm4gZ3JvdXBzO1xuXHQgIH1cblx0ICB2YXIgZDNfdHJhbnNpdGlvblByb3RvdHlwZSA9IFtdLCBkM190cmFuc2l0aW9uSWQgPSAwLCBkM190cmFuc2l0aW9uSW5oZXJpdElkLCBkM190cmFuc2l0aW9uSW5oZXJpdDtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmNhbGwgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2FsbDtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmVtcHR5ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUubm9kZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlO1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2l6ZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5zaXplO1xuXHQgIGQzLnRyYW5zaXRpb24gPSBmdW5jdGlvbihzZWxlY3Rpb24sIG5hbWUpIHtcblx0ICAgIHJldHVybiBzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLnRyYW5zaXRpb24gPyBkM190cmFuc2l0aW9uSW5oZXJpdElkID8gc2VsZWN0aW9uLnRyYW5zaXRpb24obmFtZSkgOiBzZWxlY3Rpb24gOiBkMy5zZWxlY3Rpb24oKS50cmFuc2l0aW9uKHNlbGVjdGlvbik7XG5cdCAgfTtcblx0ICBkMy50cmFuc2l0aW9uLnByb3RvdHlwZSA9IGQzX3RyYW5zaXRpb25Qcm90b3R5cGU7XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuXHQgICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2RlLCBub2RlO1xuXHQgICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpO1xuXHQgICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuXHQgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcblx0ICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuXHQgICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdG9yLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpKSB7XG5cdCAgICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuXHQgICAgICAgICAgZDNfdHJhbnNpdGlvbk5vZGUoc3Vibm9kZSwgaSwgbnMsIGlkLCBub2RlW25zXVtpZF0pO1xuXHQgICAgICAgICAgc3ViZ3JvdXAucHVzaChzdWJub2RlKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgbnMsIGlkKTtcblx0ICB9O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0ICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2UsIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgc3Vibm9kZXMsIG5vZGUsIHN1Ym5vZGUsIHRyYW5zaXRpb247XG5cdCAgICBzZWxlY3RvciA9IGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cdCAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG5cdCAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcblx0ICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG5cdCAgICAgICAgICB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuXHQgICAgICAgICAgc3Vibm9kZXMgPSBzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuXHQgICAgICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG5cdCAgICAgICAgICBmb3IgKHZhciBrID0gLTEsIG8gPSBzdWJub2Rlcy5sZW5ndGg7ICsrayA8IG87ICkge1xuXHQgICAgICAgICAgICBpZiAoc3Vibm9kZSA9IHN1Ym5vZGVzW2tdKSBkM190cmFuc2l0aW9uTm9kZShzdWJub2RlLCBrLCBucywgaWQsIHRyYW5zaXRpb24pO1xuXHQgICAgICAgICAgICBzdWJncm91cC5wdXNoKHN1Ym5vZGUpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQpO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcblx0ICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIGdyb3VwLCBub2RlO1xuXHQgICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIikgZmlsdGVyID0gZDNfc2VsZWN0aW9uX2ZpbHRlcihmaWx0ZXIpO1xuXHQgICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuXHQgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcblx0ICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHQgICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBmaWx0ZXIuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSkge1xuXHQgICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5uYW1lc3BhY2UsIHRoaXMuaWQpO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS50d2VlbiA9IGZ1bmN0aW9uKG5hbWUsIHR3ZWVuKSB7XG5cdCAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS50d2Vlbi5nZXQobmFtZSk7XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHdlZW4gPT0gbnVsbCA/IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnJlbW92ZShuYW1lKTtcblx0ICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgIG5vZGVbbnNdW2lkXS50d2Vlbi5zZXQobmFtZSwgdHdlZW4pO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM190cmFuc2l0aW9uX3R3ZWVuKGdyb3VwcywgbmFtZSwgdmFsdWUsIHR3ZWVuKSB7XG5cdCAgICB2YXIgaWQgPSBncm91cHMuaWQsIG5zID0gZ3JvdXBzLm5hbWVzcGFjZTtcblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gZnVuY3Rpb24obm9kZSwgaSwgaikge1xuXHQgICAgICBub2RlW25zXVtpZF0udHdlZW4uc2V0KG5hbWUsIHR3ZWVuKHZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpKTtcblx0ICAgIH0gOiAodmFsdWUgPSB0d2Vlbih2YWx1ZSksIGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB2YWx1ZSk7XG5cdCAgICB9KSk7XG5cdCAgfVxuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWVOUywgdmFsdWUpIHtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuXHQgICAgICBmb3IgKHZhbHVlIGluIG5hbWVOUykgdGhpcy5hdHRyKHZhbHVlLCBuYW1lTlNbdmFsdWVdKTtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgICB2YXIgaW50ZXJwb2xhdGUgPSBuYW1lTlMgPT0gXCJ0cmFuc2Zvcm1cIiA/IGQzX2ludGVycG9sYXRlVHJhbnNmb3JtIDogZDNfaW50ZXJwb2xhdGUsIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWVOUyk7XG5cdCAgICBmdW5jdGlvbiBhdHRyTnVsbCgpIHtcblx0ICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBhdHRyTnVsbE5TKCkge1xuXHQgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXR0clR3ZWVuKGIpIHtcblx0ICAgICAgcmV0dXJuIGIgPT0gbnVsbCA/IGF0dHJOdWxsIDogKGIgKz0gXCJcIiwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIGEgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKSwgaTtcblx0ICAgICAgICByZXR1cm4gYSAhPT0gYiAmJiAoaSA9IGludGVycG9sYXRlKGEsIGIpLCBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBhdHRyVHdlZW5OUyhiKSB7XG5cdCAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbE5TIDogKGIgKz0gXCJcIiwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIGEgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpLCBpO1xuXHQgICAgICAgIHJldHVybiBhICE9PSBiICYmIChpID0gaW50ZXJwb2xhdGUoYSwgYiksIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgaSh0KSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJhdHRyLlwiICsgbmFtZU5TLCB2YWx1ZSwgbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKTtcblx0ICB9O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0clR3ZWVuID0gZnVuY3Rpb24obmFtZU5TLCB0d2Vlbikge1xuXHQgICAgdmFyIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWVOUyk7XG5cdCAgICBmdW5jdGlvbiBhdHRyVHdlZW4oZCwgaSkge1xuXHQgICAgICB2YXIgZiA9IHR3ZWVuLmNhbGwodGhpcywgZCwgaSwgdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSkpO1xuXHQgICAgICByZXR1cm4gZiAmJiBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgZih0KSk7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBhdHRyVHdlZW5OUyhkLCBpKSB7XG5cdCAgICAgIHZhciBmID0gdHdlZW4uY2FsbCh0aGlzLCBkLCBpLCB0aGlzLmdldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpKTtcblx0ICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuXHQgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgZih0KSk7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy50d2VlbihcImF0dHIuXCIgKyBuYW1lTlMsIG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2Vlbik7XG5cdCAgfTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnN0eWxlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG5cdCAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICBpZiAobiA8IDMpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgICAgaWYgKG4gPCAyKSB2YWx1ZSA9IFwiXCI7XG5cdCAgICAgICAgZm9yIChwcmlvcml0eSBpbiBuYW1lKSB0aGlzLnN0eWxlKHByaW9yaXR5LCBuYW1lW3ByaW9yaXR5XSwgdmFsdWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHByaW9yaXR5ID0gXCJcIjtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHN0eWxlTnVsbCgpIHtcblx0ICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHN0eWxlU3RyaW5nKGIpIHtcblx0ICAgICAgcmV0dXJuIGIgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBhID0gZDNfd2luZG93KHRoaXMpLmdldENvbXB1dGVkU3R5bGUodGhpcywgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSwgaTtcblx0ICAgICAgICByZXR1cm4gYSAhPT0gYiAmJiAoaSA9IGQzX2ludGVycG9sYXRlKGEsIGIpLCBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfdHJhbnNpdGlvbl90d2Vlbih0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUsIHN0eWxlU3RyaW5nKTtcblx0ICB9O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc3R5bGVUd2VlbiA9IGZ1bmN0aW9uKG5hbWUsIHR3ZWVuLCBwcmlvcml0eSkge1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBwcmlvcml0eSA9IFwiXCI7XG5cdCAgICBmdW5jdGlvbiBzdHlsZVR3ZWVuKGQsIGkpIHtcblx0ICAgICAgdmFyIGYgPSB0d2Vlbi5jYWxsKHRoaXMsIGQsIGksIGQzX3dpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSkpO1xuXHQgICAgICByZXR1cm4gZiAmJiBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBmKHQpLCBwcmlvcml0eSk7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy50d2VlbihcInN0eWxlLlwiICsgbmFtZSwgc3R5bGVUd2Vlbik7XG5cdCAgfTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJ0ZXh0XCIsIHZhbHVlLCBkM190cmFuc2l0aW9uX3RleHQpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbl90ZXh0KGIpIHtcblx0ICAgIGlmIChiID09IG51bGwpIGIgPSBcIlwiO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLnRleHRDb250ZW50ID0gYjtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgbnMgPSB0aGlzLm5hbWVzcGFjZTtcblx0ICAgIHJldHVybiB0aGlzLmVhY2goXCJlbmQudHJhbnNpdGlvblwiLCBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHA7XG5cdCAgICAgIGlmICh0aGlzW25zXS5jb3VudCA8IDIgJiYgKHAgPSB0aGlzLnBhcmVudE5vZGUpKSBwLnJlbW92ZUNoaWxkKHRoaXMpO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmVhc2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0uZWFzZTtcblx0ICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBkMy5lYXNlLmFwcGx5KGQzLCBhcmd1bWVudHMpO1xuXHQgICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgbm9kZVtuc11baWRdLmVhc2UgPSB2YWx1ZTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kZWxheTtcblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcblx0ICAgICAgbm9kZVtuc11baWRdLmRlbGF5ID0gK3ZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG5cdCAgICB9IDogKHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgIG5vZGVbbnNdW2lkXS5kZWxheSA9IHZhbHVlO1xuXHQgICAgfSkpO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kdXJhdGlvbjtcblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcblx0ICAgICAgbm9kZVtuc11baWRdLmR1cmF0aW9uID0gTWF0aC5tYXgoMSwgdmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSk7XG5cdCAgICB9IDogKHZhbHVlID0gTWF0aC5tYXgoMSwgdmFsdWUpLCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgIG5vZGVbbnNdW2lkXS5kdXJhdGlvbiA9IHZhbHVlO1xuXHQgICAgfSkpO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcblx0ICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0ICAgICAgdmFyIGluaGVyaXQgPSBkM190cmFuc2l0aW9uSW5oZXJpdCwgaW5oZXJpdElkID0gZDNfdHJhbnNpdGlvbkluaGVyaXRJZDtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaWQ7XG5cdCAgICAgICAgZDNfc2VsZWN0aW9uX2VhY2godGhpcywgZnVuY3Rpb24obm9kZSwgaSwgaikge1xuXHQgICAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXQgPSBub2RlW25zXVtpZF07XG5cdCAgICAgICAgICB0eXBlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXQgPSBpbmhlcml0O1xuXHQgICAgICAgIGQzX3RyYW5zaXRpb25Jbmhlcml0SWQgPSBpbmhlcml0SWQ7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IG5vZGVbbnNdW2lkXTtcblx0ICAgICAgICAodHJhbnNpdGlvbi5ldmVudCB8fCAodHJhbnNpdGlvbi5ldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJpbnRlcnJ1cHRcIikpKS5vbih0eXBlLCBsaXN0ZW5lcik7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXM7XG5cdCAgfTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBpZDAgPSB0aGlzLmlkLCBpZDEgPSArK2QzX3RyYW5zaXRpb25JZCwgbnMgPSB0aGlzLm5hbWVzcGFjZSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZSwgdHJhbnNpdGlvbjtcblx0ICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcblx0ICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG5cdCAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0ICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG5cdCAgICAgICAgICB0cmFuc2l0aW9uID0gbm9kZVtuc11baWQwXTtcblx0ICAgICAgICAgIGQzX3RyYW5zaXRpb25Ob2RlKG5vZGUsIGksIG5zLCBpZDEsIHtcblx0ICAgICAgICAgICAgdGltZTogdHJhbnNpdGlvbi50aW1lLFxuXHQgICAgICAgICAgICBlYXNlOiB0cmFuc2l0aW9uLmVhc2UsXG5cdCAgICAgICAgICAgIGRlbGF5OiB0cmFuc2l0aW9uLmRlbGF5ICsgdHJhbnNpdGlvbi5kdXJhdGlvbixcblx0ICAgICAgICAgICAgZHVyYXRpb246IHRyYW5zaXRpb24uZHVyYXRpb25cblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIG5zLCBpZDEpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbk5hbWVzcGFjZShuYW1lKSB7XG5cdCAgICByZXR1cm4gbmFtZSA9PSBudWxsID8gXCJfX3RyYW5zaXRpb25fX1wiIDogXCJfX3RyYW5zaXRpb25fXCIgKyBuYW1lICsgXCJfX1wiO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190cmFuc2l0aW9uTm9kZShub2RlLCBpLCBucywgaWQsIGluaGVyaXQpIHtcblx0ICAgIHZhciBsb2NrID0gbm9kZVtuc10gfHwgKG5vZGVbbnNdID0ge1xuXHQgICAgICBhY3RpdmU6IDAsXG5cdCAgICAgIGNvdW50OiAwXG5cdCAgICB9KSwgdHJhbnNpdGlvbiA9IGxvY2tbaWRdLCB0aW1lLCB0aW1lciwgZHVyYXRpb24sIGVhc2UsIHR3ZWVucztcblx0ICAgIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcblx0ICAgICAgdmFyIGRlbGF5ID0gdHJhbnNpdGlvbi5kZWxheTtcblx0ICAgICAgdGltZXIudCA9IGRlbGF5ICsgdGltZTtcblx0ICAgICAgaWYgKGRlbGF5IDw9IGVsYXBzZWQpIHJldHVybiBzdGFydChlbGFwc2VkIC0gZGVsYXkpO1xuXHQgICAgICB0aW1lci5jID0gc3RhcnQ7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG5cdCAgICAgIHZhciBhY3RpdmVJZCA9IGxvY2suYWN0aXZlLCBhY3RpdmUgPSBsb2NrW2FjdGl2ZUlkXTtcblx0ICAgICAgaWYgKGFjdGl2ZSkge1xuXHQgICAgICAgIGFjdGl2ZS50aW1lci5jID0gbnVsbDtcblx0ICAgICAgICBhY3RpdmUudGltZXIudCA9IE5hTjtcblx0ICAgICAgICAtLWxvY2suY291bnQ7XG5cdCAgICAgICAgZGVsZXRlIGxvY2tbYWN0aXZlSWRdO1xuXHQgICAgICAgIGFjdGl2ZS5ldmVudCAmJiBhY3RpdmUuZXZlbnQuaW50ZXJydXB0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgYWN0aXZlLmluZGV4KTtcblx0ICAgICAgfVxuXHQgICAgICBmb3IgKHZhciBjYW5jZWxJZCBpbiBsb2NrKSB7XG5cdCAgICAgICAgaWYgKCtjYW5jZWxJZCA8IGlkKSB7XG5cdCAgICAgICAgICB2YXIgY2FuY2VsID0gbG9ja1tjYW5jZWxJZF07XG5cdCAgICAgICAgICBjYW5jZWwudGltZXIuYyA9IG51bGw7XG5cdCAgICAgICAgICBjYW5jZWwudGltZXIudCA9IE5hTjtcblx0ICAgICAgICAgIC0tbG9jay5jb3VudDtcblx0ICAgICAgICAgIGRlbGV0ZSBsb2NrW2NhbmNlbElkXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgdGltZXIuYyA9IHRpY2s7XG5cdCAgICAgIGQzX3RpbWVyKGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmICh0aW1lci5jICYmIHRpY2soZWxhcHNlZCB8fCAxKSkge1xuXHQgICAgICAgICAgdGltZXIuYyA9IG51bGw7XG5cdCAgICAgICAgICB0aW1lci50ID0gTmFOO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gMTtcblx0ICAgICAgfSwgMCwgdGltZSk7XG5cdCAgICAgIGxvY2suYWN0aXZlID0gaWQ7XG5cdCAgICAgIHRyYW5zaXRpb24uZXZlbnQgJiYgdHJhbnNpdGlvbi5ldmVudC5zdGFydC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGkpO1xuXHQgICAgICB0d2VlbnMgPSBbXTtcblx0ICAgICAgdHJhbnNpdGlvbi50d2Vlbi5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0ICAgICAgICBpZiAodmFsdWUgPSB2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGkpKSB7XG5cdCAgICAgICAgICB0d2VlbnMucHVzaCh2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgICAgZWFzZSA9IHRyYW5zaXRpb24uZWFzZTtcblx0ICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uLmR1cmF0aW9uO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG5cdCAgICAgIHZhciB0ID0gZWxhcHNlZCAvIGR1cmF0aW9uLCBlID0gZWFzZSh0KSwgbiA9IHR3ZWVucy5sZW5ndGg7XG5cdCAgICAgIHdoaWxlIChuID4gMCkge1xuXHQgICAgICAgIHR3ZWVuc1stLW5dLmNhbGwobm9kZSwgZSk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHQgPj0gMSkge1xuXHQgICAgICAgIHRyYW5zaXRpb24uZXZlbnQgJiYgdHJhbnNpdGlvbi5ldmVudC5lbmQuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpKTtcblx0ICAgICAgICBpZiAoLS1sb2NrLmNvdW50KSBkZWxldGUgbG9ja1tpZF07IGVsc2UgZGVsZXRlIG5vZGVbbnNdO1xuXHQgICAgICAgIHJldHVybiAxO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoIXRyYW5zaXRpb24pIHtcblx0ICAgICAgdGltZSA9IGluaGVyaXQudGltZTtcblx0ICAgICAgdGltZXIgPSBkM190aW1lcihzY2hlZHVsZSwgMCwgdGltZSk7XG5cdCAgICAgIHRyYW5zaXRpb24gPSBsb2NrW2lkXSA9IHtcblx0ICAgICAgICB0d2VlbjogbmV3IGQzX01hcCgpLFxuXHQgICAgICAgIHRpbWU6IHRpbWUsXG5cdCAgICAgICAgdGltZXI6IHRpbWVyLFxuXHQgICAgICAgIGRlbGF5OiBpbmhlcml0LmRlbGF5LFxuXHQgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuXHQgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZSxcblx0ICAgICAgICBpbmRleDogaVxuXHQgICAgICB9O1xuXHQgICAgICBpbmhlcml0ID0gbnVsbDtcblx0ICAgICAgKytsb2NrLmNvdW50O1xuXHQgICAgfVxuXHQgIH1cblx0ICBkMy5zdmcuYXhpcyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHNjYWxlID0gZDMuc2NhbGUubGluZWFyKCksIG9yaWVudCA9IGQzX3N2Z19heGlzRGVmYXVsdE9yaWVudCwgaW5uZXJUaWNrU2l6ZSA9IDYsIG91dGVyVGlja1NpemUgPSA2LCB0aWNrUGFkZGluZyA9IDMsIHRpY2tBcmd1bWVudHNfID0gWyAxMCBdLCB0aWNrVmFsdWVzID0gbnVsbCwgdGlja0Zvcm1hdF87XG5cdCAgICBmdW5jdGlvbiBheGlzKGcpIHtcblx0ICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBnID0gZDMuc2VsZWN0KHRoaXMpO1xuXHQgICAgICAgIHZhciBzY2FsZTAgPSB0aGlzLl9fY2hhcnRfXyB8fCBzY2FsZSwgc2NhbGUxID0gdGhpcy5fX2NoYXJ0X18gPSBzY2FsZS5jb3B5KCk7XG5cdCAgICAgICAgdmFyIHRpY2tzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gc2NhbGUxLnRpY2tzID8gc2NhbGUxLnRpY2tzLmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDogc2NhbGUxLmRvbWFpbigpIDogdGlja1ZhbHVlcywgdGlja0Zvcm1hdCA9IHRpY2tGb3JtYXRfID09IG51bGwgPyBzY2FsZTEudGlja0Zvcm1hdCA/IHNjYWxlMS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDogZDNfaWRlbnRpdHkgOiB0aWNrRm9ybWF0XywgdGljayA9IGcuc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh0aWNrcywgc2NhbGUxKSwgdGlja0VudGVyID0gdGljay5lbnRlcigpLmluc2VydChcImdcIiwgXCIuZG9tYWluXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIikuc3R5bGUoXCJvcGFjaXR5XCIsIM61KSwgdGlja0V4aXQgPSBkMy50cmFuc2l0aW9uKHRpY2suZXhpdCgpKS5zdHlsZShcIm9wYWNpdHlcIiwgzrUpLnJlbW92ZSgpLCB0aWNrVXBkYXRlID0gZDMudHJhbnNpdGlvbih0aWNrLm9yZGVyKCkpLnN0eWxlKFwib3BhY2l0eVwiLCAxKSwgdGlja1NwYWNpbmcgPSBNYXRoLm1heChpbm5lclRpY2tTaXplLCAwKSArIHRpY2tQYWRkaW5nLCB0aWNrVHJhbnNmb3JtO1xuXHQgICAgICAgIHZhciByYW5nZSA9IGQzX3NjYWxlUmFuZ2Uoc2NhbGUxKSwgcGF0aCA9IGcuc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFsgMCBdKSwgcGF0aFVwZGF0ZSA9IChwYXRoLmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIiksIFxuXHQgICAgICAgIGQzLnRyYW5zaXRpb24ocGF0aCkpO1xuXHQgICAgICAgIHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpO1xuXHQgICAgICAgIHRpY2tFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpO1xuXHQgICAgICAgIHZhciBsaW5lRW50ZXIgPSB0aWNrRW50ZXIuc2VsZWN0KFwibGluZVwiKSwgbGluZVVwZGF0ZSA9IHRpY2tVcGRhdGUuc2VsZWN0KFwibGluZVwiKSwgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKS50ZXh0KHRpY2tGb3JtYXQpLCB0ZXh0RW50ZXIgPSB0aWNrRW50ZXIuc2VsZWN0KFwidGV4dFwiKSwgdGV4dFVwZGF0ZSA9IHRpY2tVcGRhdGUuc2VsZWN0KFwidGV4dFwiKSwgc2lnbiA9IG9yaWVudCA9PT0gXCJ0b3BcIiB8fCBvcmllbnQgPT09IFwibGVmdFwiID8gLTEgOiAxLCB4MSwgeDIsIHkxLCB5Mjtcblx0ICAgICAgICBpZiAob3JpZW50ID09PSBcImJvdHRvbVwiIHx8IG9yaWVudCA9PT0gXCJ0b3BcIikge1xuXHQgICAgICAgICAgdGlja1RyYW5zZm9ybSA9IGQzX3N2Z19heGlzWCwgeDEgPSBcInhcIiwgeTEgPSBcInlcIiwgeDIgPSBcIngyXCIsIHkyID0gXCJ5MlwiO1xuXHQgICAgICAgICAgdGV4dC5hdHRyKFwiZHlcIiwgc2lnbiA8IDAgPyBcIjBlbVwiIDogXCIuNzFlbVwiKS5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpO1xuXHQgICAgICAgICAgcGF0aFVwZGF0ZS5hdHRyKFwiZFwiLCBcIk1cIiArIHJhbmdlWzBdICsgXCIsXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSArIFwiVjBIXCIgKyByYW5nZVsxXSArIFwiVlwiICsgc2lnbiAqIG91dGVyVGlja1NpemUpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB0aWNrVHJhbnNmb3JtID0gZDNfc3ZnX2F4aXNZLCB4MSA9IFwieVwiLCB5MSA9IFwieFwiLCB4MiA9IFwieTJcIiwgeTIgPSBcIngyXCI7XG5cdCAgICAgICAgICB0ZXh0LmF0dHIoXCJkeVwiLCBcIi4zMmVtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgc2lnbiA8IDAgPyBcImVuZFwiIDogXCJzdGFydFwiKTtcblx0ICAgICAgICAgIHBhdGhVcGRhdGUuYXR0cihcImRcIiwgXCJNXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSArIFwiLFwiICsgcmFuZ2VbMF0gKyBcIkgwVlwiICsgcmFuZ2VbMV0gKyBcIkhcIiArIHNpZ24gKiBvdXRlclRpY2tTaXplKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgbGluZUVudGVyLmF0dHIoeTIsIHNpZ24gKiBpbm5lclRpY2tTaXplKTtcblx0ICAgICAgICB0ZXh0RW50ZXIuYXR0cih5MSwgc2lnbiAqIHRpY2tTcGFjaW5nKTtcblx0ICAgICAgICBsaW5lVXBkYXRlLmF0dHIoeDIsIDApLmF0dHIoeTIsIHNpZ24gKiBpbm5lclRpY2tTaXplKTtcblx0ICAgICAgICB0ZXh0VXBkYXRlLmF0dHIoeDEsIDApLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG5cdCAgICAgICAgaWYgKHNjYWxlMS5yYW5nZUJhbmQpIHtcblx0ICAgICAgICAgIHZhciB4ID0gc2NhbGUxLCBkeCA9IHgucmFuZ2VCYW5kKCkgLyAyO1xuXHQgICAgICAgICAgc2NhbGUwID0gc2NhbGUxID0gZnVuY3Rpb24oZCkge1xuXHQgICAgICAgICAgICByZXR1cm4geChkKSArIGR4O1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHNjYWxlMC5yYW5nZUJhbmQpIHtcblx0ICAgICAgICAgIHNjYWxlMCA9IHNjYWxlMTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGlja0V4aXQuY2FsbCh0aWNrVHJhbnNmb3JtLCBzY2FsZTEsIHNjYWxlMCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRpY2tFbnRlci5jYWxsKHRpY2tUcmFuc2Zvcm0sIHNjYWxlMCwgc2NhbGUxKTtcblx0ICAgICAgICB0aWNrVXBkYXRlLmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUxLCBzY2FsZTEpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGF4aXMuc2NhbGUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNjYWxlO1xuXHQgICAgICBzY2FsZSA9IHg7XG5cdCAgICAgIHJldHVybiBheGlzO1xuXHQgICAgfTtcblx0ICAgIGF4aXMub3JpZW50ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmllbnQ7XG5cdCAgICAgIG9yaWVudCA9IHggaW4gZDNfc3ZnX2F4aXNPcmllbnRzID8geCArIFwiXCIgOiBkM19zdmdfYXhpc0RlZmF1bHRPcmllbnQ7XG5cdCAgICAgIHJldHVybiBheGlzO1xuXHQgICAgfTtcblx0ICAgIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja0FyZ3VtZW50c187XG5cdCAgICAgIHRpY2tBcmd1bWVudHNfID0gZDNfYXJyYXkoYXJndW1lbnRzKTtcblx0ICAgICAgcmV0dXJuIGF4aXM7XG5cdCAgICB9O1xuXHQgICAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrVmFsdWVzO1xuXHQgICAgICB0aWNrVmFsdWVzID0geDtcblx0ICAgICAgcmV0dXJuIGF4aXM7XG5cdCAgICB9O1xuXHQgICAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrRm9ybWF0Xztcblx0ICAgICAgdGlja0Zvcm1hdF8gPSB4O1xuXHQgICAgICByZXR1cm4gYXhpcztcblx0ICAgIH07XG5cdCAgICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICAgIGlmICghbikgcmV0dXJuIGlubmVyVGlja1NpemU7XG5cdCAgICAgIGlubmVyVGlja1NpemUgPSAreDtcblx0ICAgICAgb3V0ZXJUaWNrU2l6ZSA9ICthcmd1bWVudHNbbiAtIDFdO1xuXHQgICAgICByZXR1cm4gYXhpcztcblx0ICAgIH07XG5cdCAgICBheGlzLmlubmVyVGlja1NpemUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGlubmVyVGlja1NpemU7XG5cdCAgICAgIGlubmVyVGlja1NpemUgPSAreDtcblx0ICAgICAgcmV0dXJuIGF4aXM7XG5cdCAgICB9O1xuXHQgICAgYXhpcy5vdXRlclRpY2tTaXplID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvdXRlclRpY2tTaXplO1xuXHQgICAgICBvdXRlclRpY2tTaXplID0gK3g7XG5cdCAgICAgIHJldHVybiBheGlzO1xuXHQgICAgfTtcblx0ICAgIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRpY2tQYWRkaW5nO1xuXHQgICAgICB0aWNrUGFkZGluZyA9ICt4O1xuXHQgICAgICByZXR1cm4gYXhpcztcblx0ICAgIH07XG5cdCAgICBheGlzLnRpY2tTdWJkaXZpZGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggJiYgYXhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gYXhpcztcblx0ICB9O1xuXHQgIHZhciBkM19zdmdfYXhpc0RlZmF1bHRPcmllbnQgPSBcImJvdHRvbVwiLCBkM19zdmdfYXhpc09yaWVudHMgPSB7XG5cdCAgICB0b3A6IDEsXG5cdCAgICByaWdodDogMSxcblx0ICAgIGJvdHRvbTogMSxcblx0ICAgIGxlZnQ6IDFcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3N2Z19heGlzWChzZWxlY3Rpb24sIHgwLCB4MSkge1xuXHQgICAgc2VsZWN0aW9uLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgICB2YXIgdjAgPSB4MChkKTtcblx0ICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKGlzRmluaXRlKHYwKSA/IHYwIDogeDEoZCkpICsgXCIsMClcIjtcblx0ICAgIH0pO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfYXhpc1koc2VsZWN0aW9uLCB5MCwgeTEpIHtcblx0ICAgIHNlbGVjdGlvbi5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgdmFyIHYwID0geTAoZCk7XG5cdCAgICAgIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgKGlzRmluaXRlKHYwKSA/IHYwIDogeTEoZCkpICsgXCIpXCI7XG5cdCAgICB9KTtcblx0ICB9XG5cdCAgZDMuc3ZnLmJydXNoID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgZXZlbnQgPSBkM19ldmVudERpc3BhdGNoKGJydXNoLCBcImJydXNoc3RhcnRcIiwgXCJicnVzaFwiLCBcImJydXNoZW5kXCIpLCB4ID0gbnVsbCwgeSA9IG51bGwsIHhFeHRlbnQgPSBbIDAsIDAgXSwgeUV4dGVudCA9IFsgMCwgMCBdLCB4RXh0ZW50RG9tYWluLCB5RXh0ZW50RG9tYWluLCB4Q2xhbXAgPSB0cnVlLCB5Q2xhbXAgPSB0cnVlLCByZXNpemVzID0gZDNfc3ZnX2JydXNoUmVzaXplc1swXTtcblx0ICAgIGZ1bmN0aW9uIGJydXNoKGcpIHtcblx0ICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBnID0gZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIikuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpLm9uKFwibW91c2Vkb3duLmJydXNoXCIsIGJydXNoc3RhcnQpLm9uKFwidG91Y2hzdGFydC5icnVzaFwiLCBicnVzaHN0YXJ0KTtcblx0ICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGcuc2VsZWN0QWxsKFwiLmJhY2tncm91bmRcIikuZGF0YShbIDAgXSk7XG5cdCAgICAgICAgYmFja2dyb3VuZC5lbnRlcigpLmFwcGVuZChcInJlY3RcIikuYXR0cihcImNsYXNzXCIsIFwiYmFja2dyb3VuZFwiKS5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIikuc3R5bGUoXCJjdXJzb3JcIiwgXCJjcm9zc2hhaXJcIik7XG5cdCAgICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50XCIpLmRhdGEoWyAwIF0pLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJleHRlbnRcIikuc3R5bGUoXCJjdXJzb3JcIiwgXCJtb3ZlXCIpO1xuXHQgICAgICAgIHZhciByZXNpemUgPSBnLnNlbGVjdEFsbChcIi5yZXNpemVcIikuZGF0YShyZXNpemVzLCBkM19pZGVudGl0eSk7XG5cdCAgICAgICAgcmVzaXplLmV4aXQoKS5yZW1vdmUoKTtcblx0ICAgICAgICByZXNpemUuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgICByZXR1cm4gXCJyZXNpemUgXCIgKyBkO1xuXHQgICAgICAgIH0pLnN0eWxlKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICAgIHJldHVybiBkM19zdmdfYnJ1c2hDdXJzb3JbZF07XG5cdCAgICAgICAgfSkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgICByZXR1cm4gL1tld10kLy50ZXN0KGQpID8gLTMgOiBudWxsO1xuXHQgICAgICAgIH0pLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICAgIHJldHVybiAvXltuc10vLnRlc3QoZCkgPyAtMyA6IG51bGw7XG5cdCAgICAgICAgfSkuYXR0cihcIndpZHRoXCIsIDYpLmF0dHIoXCJoZWlnaHRcIiwgNikuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuXHQgICAgICAgIHJlc2l6ZS5zdHlsZShcImRpc3BsYXlcIiwgYnJ1c2guZW1wdHkoKSA/IFwibm9uZVwiIDogbnVsbCk7XG5cdCAgICAgICAgdmFyIGdVcGRhdGUgPSBkMy50cmFuc2l0aW9uKGcpLCBiYWNrZ3JvdW5kVXBkYXRlID0gZDMudHJhbnNpdGlvbihiYWNrZ3JvdW5kKSwgcmFuZ2U7XG5cdCAgICAgICAgaWYgKHgpIHtcblx0ICAgICAgICAgIHJhbmdlID0gZDNfc2NhbGVSYW5nZSh4KTtcblx0ICAgICAgICAgIGJhY2tncm91bmRVcGRhdGUuYXR0cihcInhcIiwgcmFuZ2VbMF0pLmF0dHIoXCJ3aWR0aFwiLCByYW5nZVsxXSAtIHJhbmdlWzBdKTtcblx0ICAgICAgICAgIHJlZHJhd1goZ1VwZGF0ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh5KSB7XG5cdCAgICAgICAgICByYW5nZSA9IGQzX3NjYWxlUmFuZ2UoeSk7XG5cdCAgICAgICAgICBiYWNrZ3JvdW5kVXBkYXRlLmF0dHIoXCJ5XCIsIHJhbmdlWzBdKS5hdHRyKFwiaGVpZ2h0XCIsIHJhbmdlWzFdIC0gcmFuZ2VbMF0pO1xuXHQgICAgICAgICAgcmVkcmF3WShnVXBkYXRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmVkcmF3KGdVcGRhdGUpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGJydXNoLmV2ZW50ID0gZnVuY3Rpb24oZykge1xuXHQgICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIGV2ZW50XyA9IGV2ZW50Lm9mKHRoaXMsIGFyZ3VtZW50cyksIGV4dGVudDEgPSB7XG5cdCAgICAgICAgICB4OiB4RXh0ZW50LFxuXHQgICAgICAgICAgeTogeUV4dGVudCxcblx0ICAgICAgICAgIGk6IHhFeHRlbnREb21haW4sXG5cdCAgICAgICAgICBqOiB5RXh0ZW50RG9tYWluXG5cdCAgICAgICAgfSwgZXh0ZW50MCA9IHRoaXMuX19jaGFydF9fIHx8IGV4dGVudDE7XG5cdCAgICAgICAgdGhpcy5fX2NoYXJ0X18gPSBleHRlbnQxO1xuXHQgICAgICAgIGlmIChkM190cmFuc2l0aW9uSW5oZXJpdElkKSB7XG5cdCAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgeEV4dGVudERvbWFpbiA9IGV4dGVudDAuaTtcblx0ICAgICAgICAgICAgeUV4dGVudERvbWFpbiA9IGV4dGVudDAuajtcblx0ICAgICAgICAgICAgeEV4dGVudCA9IGV4dGVudDAueDtcblx0ICAgICAgICAgICAgeUV4dGVudCA9IGV4dGVudDAueTtcblx0ICAgICAgICAgICAgZXZlbnRfKHtcblx0ICAgICAgICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH0pLnR3ZWVuKFwiYnJ1c2g6YnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHZhciB4aSA9IGQzX2ludGVycG9sYXRlQXJyYXkoeEV4dGVudCwgZXh0ZW50MS54KSwgeWkgPSBkM19pbnRlcnBvbGF0ZUFycmF5KHlFeHRlbnQsIGV4dGVudDEueSk7XG5cdCAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSB5RXh0ZW50RG9tYWluID0gbnVsbDtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgICAgICAgICB4RXh0ZW50ID0gZXh0ZW50MS54ID0geGkodCk7XG5cdCAgICAgICAgICAgICAgeUV4dGVudCA9IGV4dGVudDEueSA9IHlpKHQpO1xuXHQgICAgICAgICAgICAgIGV2ZW50Xyh7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG5cdCAgICAgICAgICAgICAgICBtb2RlOiBcInJlc2l6ZVwiXG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICB9KS5lYWNoKFwiZW5kLmJydXNoXCIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICB4RXh0ZW50RG9tYWluID0gZXh0ZW50MS5pO1xuXHQgICAgICAgICAgICB5RXh0ZW50RG9tYWluID0gZXh0ZW50MS5qO1xuXHQgICAgICAgICAgICBldmVudF8oe1xuXHQgICAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hcIixcblx0ICAgICAgICAgICAgICBtb2RlOiBcInJlc2l6ZVwiXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBldmVudF8oe1xuXHQgICAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBldmVudF8oe1xuXHQgICAgICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgICBldmVudF8oe1xuXHQgICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG5cdCAgICAgICAgICAgIG1vZGU6IFwicmVzaXplXCJcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgZXZlbnRfKHtcblx0ICAgICAgICAgICAgdHlwZTogXCJicnVzaGVuZFwiXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIHJlZHJhdyhnKSB7XG5cdCAgICAgIGcuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4RXh0ZW50WysvZSQvLnRlc3QoZCldICsgXCIsXCIgKyB5RXh0ZW50WysvXnMvLnRlc3QoZCldICsgXCIpXCI7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVkcmF3WChnKSB7XG5cdCAgICAgIGcuc2VsZWN0KFwiLmV4dGVudFwiKS5hdHRyKFwieFwiLCB4RXh0ZW50WzBdKTtcblx0ICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50LC5uPnJlY3QsLnM+cmVjdFwiKS5hdHRyKFwid2lkdGhcIiwgeEV4dGVudFsxXSAtIHhFeHRlbnRbMF0pO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVkcmF3WShnKSB7XG5cdCAgICAgIGcuc2VsZWN0KFwiLmV4dGVudFwiKS5hdHRyKFwieVwiLCB5RXh0ZW50WzBdKTtcblx0ICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50LC5lPnJlY3QsLnc+cmVjdFwiKS5hdHRyKFwiaGVpZ2h0XCIsIHlFeHRlbnRbMV0gLSB5RXh0ZW50WzBdKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGJydXNoc3RhcnQoKSB7XG5cdCAgICAgIHZhciB0YXJnZXQgPSB0aGlzLCBldmVudFRhcmdldCA9IGQzLnNlbGVjdChkMy5ldmVudC50YXJnZXQpLCBldmVudF8gPSBldmVudC5vZih0YXJnZXQsIGFyZ3VtZW50cyksIGcgPSBkMy5zZWxlY3QodGFyZ2V0KSwgcmVzaXppbmcgPSBldmVudFRhcmdldC5kYXR1bSgpLCByZXNpemluZ1ggPSAhL14obnxzKSQvLnRlc3QocmVzaXppbmcpICYmIHgsIHJlc2l6aW5nWSA9ICEvXihlfHcpJC8udGVzdChyZXNpemluZykgJiYgeSwgZHJhZ2dpbmcgPSBldmVudFRhcmdldC5jbGFzc2VkKFwiZXh0ZW50XCIpLCBkcmFnUmVzdG9yZSA9IGQzX2V2ZW50X2RyYWdTdXBwcmVzcyh0YXJnZXQpLCBjZW50ZXIsIG9yaWdpbiA9IGQzLm1vdXNlKHRhcmdldCksIG9mZnNldDtcblx0ICAgICAgdmFyIHcgPSBkMy5zZWxlY3QoZDNfd2luZG93KHRhcmdldCkpLm9uKFwia2V5ZG93bi5icnVzaFwiLCBrZXlkb3duKS5vbihcImtleXVwLmJydXNoXCIsIGtleXVwKTtcblx0ICAgICAgaWYgKGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG5cdCAgICAgICAgdy5vbihcInRvdWNobW92ZS5icnVzaFwiLCBicnVzaG1vdmUpLm9uKFwidG91Y2hlbmQuYnJ1c2hcIiwgYnJ1c2hlbmQpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHcub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcIm1vdXNldXAuYnJ1c2hcIiwgYnJ1c2hlbmQpO1xuXHQgICAgICB9XG5cdCAgICAgIGcuaW50ZXJydXB0KCkuc2VsZWN0QWxsKFwiKlwiKS5pbnRlcnJ1cHQoKTtcblx0ICAgICAgaWYgKGRyYWdnaW5nKSB7XG5cdCAgICAgICAgb3JpZ2luWzBdID0geEV4dGVudFswXSAtIG9yaWdpblswXTtcblx0ICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50WzBdIC0gb3JpZ2luWzFdO1xuXHQgICAgICB9IGVsc2UgaWYgKHJlc2l6aW5nKSB7XG5cdCAgICAgICAgdmFyIGV4ID0gKy93JC8udGVzdChyZXNpemluZyksIGV5ID0gKy9ebi8udGVzdChyZXNpemluZyk7XG5cdCAgICAgICAgb2Zmc2V0ID0gWyB4RXh0ZW50WzEgLSBleF0gLSBvcmlnaW5bMF0sIHlFeHRlbnRbMSAtIGV5XSAtIG9yaWdpblsxXSBdO1xuXHQgICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbZXhdO1xuXHQgICAgICAgIG9yaWdpblsxXSA9IHlFeHRlbnRbZXldO1xuXHQgICAgICB9IGVsc2UgaWYgKGQzLmV2ZW50LmFsdEtleSkgY2VudGVyID0gb3JpZ2luLnNsaWNlKCk7XG5cdCAgICAgIGcuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIikuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5zdHlsZShcImRpc3BsYXlcIiwgbnVsbCk7XG5cdCAgICAgIGQzLnNlbGVjdChcImJvZHlcIikuc3R5bGUoXCJjdXJzb3JcIiwgZXZlbnRUYXJnZXQuc3R5bGUoXCJjdXJzb3JcIikpO1xuXHQgICAgICBldmVudF8oe1xuXHQgICAgICAgIHR5cGU6IFwiYnJ1c2hzdGFydFwiXG5cdCAgICAgIH0pO1xuXHQgICAgICBicnVzaG1vdmUoKTtcblx0ICAgICAgZnVuY3Rpb24ga2V5ZG93bigpIHtcblx0ICAgICAgICBpZiAoZDMuZXZlbnQua2V5Q29kZSA9PSAzMikge1xuXHQgICAgICAgICAgaWYgKCFkcmFnZ2luZykge1xuXHQgICAgICAgICAgICBjZW50ZXIgPSBudWxsO1xuXHQgICAgICAgICAgICBvcmlnaW5bMF0gLT0geEV4dGVudFsxXTtcblx0ICAgICAgICAgICAgb3JpZ2luWzFdIC09IHlFeHRlbnRbMV07XG5cdCAgICAgICAgICAgIGRyYWdnaW5nID0gMjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24ga2V5dXAoKSB7XG5cdCAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIgJiYgZHJhZ2dpbmcgPT0gMikge1xuXHQgICAgICAgICAgb3JpZ2luWzBdICs9IHhFeHRlbnRbMV07XG5cdCAgICAgICAgICBvcmlnaW5bMV0gKz0geUV4dGVudFsxXTtcblx0ICAgICAgICAgIGRyYWdnaW5nID0gMDtcblx0ICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gYnJ1c2htb3ZlKCkge1xuXHQgICAgICAgIHZhciBwb2ludCA9IGQzLm1vdXNlKHRhcmdldCksIG1vdmVkID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKG9mZnNldCkge1xuXHQgICAgICAgICAgcG9pbnRbMF0gKz0gb2Zmc2V0WzBdO1xuXHQgICAgICAgICAgcG9pbnRbMV0gKz0gb2Zmc2V0WzFdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIWRyYWdnaW5nKSB7XG5cdCAgICAgICAgICBpZiAoZDMuZXZlbnQuYWx0S2V5KSB7XG5cdCAgICAgICAgICAgIGlmICghY2VudGVyKSBjZW50ZXIgPSBbICh4RXh0ZW50WzBdICsgeEV4dGVudFsxXSkgLyAyLCAoeUV4dGVudFswXSArIHlFeHRlbnRbMV0pIC8gMiBdO1xuXHQgICAgICAgICAgICBvcmlnaW5bMF0gPSB4RXh0ZW50WysocG9pbnRbMF0gPCBjZW50ZXJbMF0pXTtcblx0ICAgICAgICAgICAgb3JpZ2luWzFdID0geUV4dGVudFsrKHBvaW50WzFdIDwgY2VudGVyWzFdKV07XG5cdCAgICAgICAgICB9IGVsc2UgY2VudGVyID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHJlc2l6aW5nWCAmJiBtb3ZlMShwb2ludCwgeCwgMCkpIHtcblx0ICAgICAgICAgIHJlZHJhd1goZyk7XG5cdCAgICAgICAgICBtb3ZlZCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChyZXNpemluZ1kgJiYgbW92ZTEocG9pbnQsIHksIDEpKSB7XG5cdCAgICAgICAgICByZWRyYXdZKGcpO1xuXHQgICAgICAgICAgbW92ZWQgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobW92ZWQpIHtcblx0ICAgICAgICAgIHJlZHJhdyhnKTtcblx0ICAgICAgICAgIGV2ZW50Xyh7XG5cdCAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hcIixcblx0ICAgICAgICAgICAgbW9kZTogZHJhZ2dpbmcgPyBcIm1vdmVcIiA6IFwicmVzaXplXCJcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBtb3ZlMShwb2ludCwgc2NhbGUsIGkpIHtcblx0ICAgICAgICB2YXIgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHNjYWxlKSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXSwgcG9zaXRpb24gPSBvcmlnaW5baV0sIGV4dGVudCA9IGkgPyB5RXh0ZW50IDogeEV4dGVudCwgc2l6ZSA9IGV4dGVudFsxXSAtIGV4dGVudFswXSwgbWluLCBtYXg7XG5cdCAgICAgICAgaWYgKGRyYWdnaW5nKSB7XG5cdCAgICAgICAgICByMCAtPSBwb3NpdGlvbjtcblx0ICAgICAgICAgIHIxIC09IHNpemUgKyBwb3NpdGlvbjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgbWluID0gKGkgPyB5Q2xhbXAgOiB4Q2xhbXApID8gTWF0aC5tYXgocjAsIE1hdGgubWluKHIxLCBwb2ludFtpXSkpIDogcG9pbnRbaV07XG5cdCAgICAgICAgaWYgKGRyYWdnaW5nKSB7XG5cdCAgICAgICAgICBtYXggPSAobWluICs9IHBvc2l0aW9uKSArIHNpemU7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGlmIChjZW50ZXIpIHBvc2l0aW9uID0gTWF0aC5tYXgocjAsIE1hdGgubWluKHIxLCAyICogY2VudGVyW2ldIC0gbWluKSk7XG5cdCAgICAgICAgICBpZiAocG9zaXRpb24gPCBtaW4pIHtcblx0ICAgICAgICAgICAgbWF4ID0gbWluO1xuXHQgICAgICAgICAgICBtaW4gPSBwb3NpdGlvbjtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIG1heCA9IHBvc2l0aW9uO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoZXh0ZW50WzBdICE9IG1pbiB8fCBleHRlbnRbMV0gIT0gbWF4KSB7XG5cdCAgICAgICAgICBpZiAoaSkgeUV4dGVudERvbWFpbiA9IG51bGw7IGVsc2UgeEV4dGVudERvbWFpbiA9IG51bGw7XG5cdCAgICAgICAgICBleHRlbnRbMF0gPSBtaW47XG5cdCAgICAgICAgICBleHRlbnRbMV0gPSBtYXg7XG5cdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gYnJ1c2hlbmQoKSB7XG5cdCAgICAgICAgYnJ1c2htb3ZlKCk7XG5cdCAgICAgICAgZy5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpLnNlbGVjdEFsbChcIi5yZXNpemVcIikuc3R5bGUoXCJkaXNwbGF5XCIsIGJydXNoLmVtcHR5KCkgPyBcIm5vbmVcIiA6IG51bGwpO1xuXHQgICAgICAgIGQzLnNlbGVjdChcImJvZHlcIikuc3R5bGUoXCJjdXJzb3JcIiwgbnVsbCk7XG5cdCAgICAgICAgdy5vbihcIm1vdXNlbW92ZS5icnVzaFwiLCBudWxsKS5vbihcIm1vdXNldXAuYnJ1c2hcIiwgbnVsbCkub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgbnVsbCkub24oXCJ0b3VjaGVuZC5icnVzaFwiLCBudWxsKS5vbihcImtleWRvd24uYnJ1c2hcIiwgbnVsbCkub24oXCJrZXl1cC5icnVzaFwiLCBudWxsKTtcblx0ICAgICAgICBkcmFnUmVzdG9yZSgpO1xuXHQgICAgICAgIGV2ZW50Xyh7XG5cdCAgICAgICAgICB0eXBlOiBcImJydXNoZW5kXCJcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgYnJ1c2gueCA9IGZ1bmN0aW9uKHopIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcblx0ICAgICAgeCA9IHo7XG5cdCAgICAgIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWyF4IDw8IDEgfCAheV07XG5cdCAgICAgIHJldHVybiBicnVzaDtcblx0ICAgIH07XG5cdCAgICBicnVzaC55ID0gZnVuY3Rpb24oeikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5O1xuXHQgICAgICB5ID0gejtcblx0ICAgICAgcmVzaXplcyA9IGQzX3N2Z19icnVzaFJlc2l6ZXNbIXggPDwgMSB8ICF5XTtcblx0ICAgICAgcmV0dXJuIGJydXNoO1xuXHQgICAgfTtcblx0ICAgIGJydXNoLmNsYW1wID0gZnVuY3Rpb24oeikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4ICYmIHkgPyBbIHhDbGFtcCwgeUNsYW1wIF0gOiB4ID8geENsYW1wIDogeSA/IHlDbGFtcCA6IG51bGw7XG5cdCAgICAgIGlmICh4ICYmIHkpIHhDbGFtcCA9ICEhelswXSwgeUNsYW1wID0gISF6WzFdOyBlbHNlIGlmICh4KSB4Q2xhbXAgPSAhIXo7IGVsc2UgaWYgKHkpIHlDbGFtcCA9ICEhejtcblx0ICAgICAgcmV0dXJuIGJydXNoO1xuXHQgICAgfTtcblx0ICAgIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKHopIHtcblx0ICAgICAgdmFyIHgwLCB4MSwgeTAsIHkxLCB0O1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0ICAgICAgICBpZiAoeCkge1xuXHQgICAgICAgICAgaWYgKHhFeHRlbnREb21haW4pIHtcblx0ICAgICAgICAgICAgeDAgPSB4RXh0ZW50RG9tYWluWzBdLCB4MSA9IHhFeHRlbnREb21haW5bMV07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB4MCA9IHhFeHRlbnRbMF0sIHgxID0geEV4dGVudFsxXTtcblx0ICAgICAgICAgICAgaWYgKHguaW52ZXJ0KSB4MCA9IHguaW52ZXJ0KHgwKSwgeDEgPSB4LmludmVydCh4MSk7XG5cdCAgICAgICAgICAgIGlmICh4MSA8IHgwKSB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHkpIHtcblx0ICAgICAgICAgIGlmICh5RXh0ZW50RG9tYWluKSB7XG5cdCAgICAgICAgICAgIHkwID0geUV4dGVudERvbWFpblswXSwgeTEgPSB5RXh0ZW50RG9tYWluWzFdO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgeTAgPSB5RXh0ZW50WzBdLCB5MSA9IHlFeHRlbnRbMV07XG5cdCAgICAgICAgICAgIGlmICh5LmludmVydCkgeTAgPSB5LmludmVydCh5MCksIHkxID0geS5pbnZlcnQoeTEpO1xuXHQgICAgICAgICAgICBpZiAoeTEgPCB5MCkgdCA9IHkwLCB5MCA9IHkxLCB5MSA9IHQ7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB4ICYmIHkgPyBbIFsgeDAsIHkwIF0sIFsgeDEsIHkxIF0gXSA6IHggPyBbIHgwLCB4MSBdIDogeSAmJiBbIHkwLCB5MSBdO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh4KSB7XG5cdCAgICAgICAgeDAgPSB6WzBdLCB4MSA9IHpbMV07XG5cdCAgICAgICAgaWYgKHkpIHgwID0geDBbMF0sIHgxID0geDFbMF07XG5cdCAgICAgICAgeEV4dGVudERvbWFpbiA9IFsgeDAsIHgxIF07XG5cdCAgICAgICAgaWYgKHguaW52ZXJ0KSB4MCA9IHgoeDApLCB4MSA9IHgoeDEpO1xuXHQgICAgICAgIGlmICh4MSA8IHgwKSB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcblx0ICAgICAgICBpZiAoeDAgIT0geEV4dGVudFswXSB8fCB4MSAhPSB4RXh0ZW50WzFdKSB4RXh0ZW50ID0gWyB4MCwgeDEgXTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoeSkge1xuXHQgICAgICAgIHkwID0gelswXSwgeTEgPSB6WzFdO1xuXHQgICAgICAgIGlmICh4KSB5MCA9IHkwWzFdLCB5MSA9IHkxWzFdO1xuXHQgICAgICAgIHlFeHRlbnREb21haW4gPSBbIHkwLCB5MSBdO1xuXHQgICAgICAgIGlmICh5LmludmVydCkgeTAgPSB5KHkwKSwgeTEgPSB5KHkxKTtcblx0ICAgICAgICBpZiAoeTEgPCB5MCkgdCA9IHkwLCB5MCA9IHkxLCB5MSA9IHQ7XG5cdCAgICAgICAgaWYgKHkwICE9IHlFeHRlbnRbMF0gfHwgeTEgIT0geUV4dGVudFsxXSkgeUV4dGVudCA9IFsgeTAsIHkxIF07XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGJydXNoO1xuXHQgICAgfTtcblx0ICAgIGJydXNoLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICghYnJ1c2guZW1wdHkoKSkge1xuXHQgICAgICAgIHhFeHRlbnQgPSBbIDAsIDAgXSwgeUV4dGVudCA9IFsgMCwgMCBdO1xuXHQgICAgICAgIHhFeHRlbnREb21haW4gPSB5RXh0ZW50RG9tYWluID0gbnVsbDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gYnJ1c2g7XG5cdCAgICB9O1xuXHQgICAgYnJ1c2guZW1wdHkgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuICEheCAmJiB4RXh0ZW50WzBdID09IHhFeHRlbnRbMV0gfHwgISF5ICYmIHlFeHRlbnRbMF0gPT0geUV4dGVudFsxXTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZDMucmViaW5kKGJydXNoLCBldmVudCwgXCJvblwiKTtcblx0ICB9O1xuXHQgIHZhciBkM19zdmdfYnJ1c2hDdXJzb3IgPSB7XG5cdCAgICBuOiBcIm5zLXJlc2l6ZVwiLFxuXHQgICAgZTogXCJldy1yZXNpemVcIixcblx0ICAgIHM6IFwibnMtcmVzaXplXCIsXG5cdCAgICB3OiBcImV3LXJlc2l6ZVwiLFxuXHQgICAgbnc6IFwibndzZS1yZXNpemVcIixcblx0ICAgIG5lOiBcIm5lc3ctcmVzaXplXCIsXG5cdCAgICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuXHQgICAgc3c6IFwibmVzdy1yZXNpemVcIlxuXHQgIH07XG5cdCAgdmFyIGQzX3N2Z19icnVzaFJlc2l6ZXMgPSBbIFsgXCJuXCIsIFwiZVwiLCBcInNcIiwgXCJ3XCIsIFwibndcIiwgXCJuZVwiLCBcInNlXCIsIFwic3dcIiBdLCBbIFwiZVwiLCBcIndcIiBdLCBbIFwiblwiLCBcInNcIiBdLCBbXSBdO1xuXHQgIHZhciBkM190aW1lX2Zvcm1hdCA9IGQzX3RpbWUuZm9ybWF0ID0gZDNfbG9jYWxlX2VuVVMudGltZUZvcm1hdDtcblx0ICB2YXIgZDNfdGltZV9mb3JtYXRVdGMgPSBkM190aW1lX2Zvcm1hdC51dGM7XG5cdCAgdmFyIGQzX3RpbWVfZm9ybWF0SXNvID0gZDNfdGltZV9mb3JtYXRVdGMoXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIik7XG5cdCAgZDNfdGltZV9mb3JtYXQuaXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpID8gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUgOiBkM190aW1lX2Zvcm1hdElzbztcblx0ICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdElzb05hdGl2ZShkYXRlKSB7XG5cdCAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xuXHQgIH1cblx0ICBkM190aW1lX2Zvcm1hdElzb05hdGl2ZS5wYXJzZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuXHQgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuXHQgICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG5cdCAgfTtcblx0ICBkM190aW1lX2Zvcm1hdElzb05hdGl2ZS50b1N0cmluZyA9IGQzX3RpbWVfZm9ybWF0SXNvLnRvU3RyaW5nO1xuXHQgIGQzX3RpbWUuc2Vjb25kID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG5cdCAgICByZXR1cm4gbmV3IGQzX2RhdGUoTWF0aC5mbG9vcihkYXRlIC8gMWUzKSAqIDFlMyk7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG5cdCAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAxZTMpO1xuXHQgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIHJldHVybiBkYXRlLmdldFNlY29uZHMoKTtcblx0ICB9KTtcblx0ICBkM190aW1lLnNlY29uZHMgPSBkM190aW1lLnNlY29uZC5yYW5nZTtcblx0ICBkM190aW1lLnNlY29uZHMudXRjID0gZDNfdGltZS5zZWNvbmQudXRjLnJhbmdlO1xuXHQgIGQzX3RpbWUubWludXRlID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG5cdCAgICByZXR1cm4gbmV3IGQzX2RhdGUoTWF0aC5mbG9vcihkYXRlIC8gNmU0KSAqIDZlNCk7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG5cdCAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiA2ZTQpO1xuXHQgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcblx0ICB9KTtcblx0ICBkM190aW1lLm1pbnV0ZXMgPSBkM190aW1lLm1pbnV0ZS5yYW5nZTtcblx0ICBkM190aW1lLm1pbnV0ZXMudXRjID0gZDNfdGltZS5taW51dGUudXRjLnJhbmdlO1xuXHQgIGQzX3RpbWUuaG91ciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgdmFyIHRpbWV6b25lID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpIC8gNjA7XG5cdCAgICByZXR1cm4gbmV3IGQzX2RhdGUoKE1hdGguZmxvb3IoZGF0ZSAvIDM2ZTUgLSB0aW1lem9uZSkgKyB0aW1lem9uZSkgKiAzNmU1KTtcblx0ICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcblx0ICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDM2ZTUpO1xuXHQgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG5cdCAgfSk7XG5cdCAgZDNfdGltZS5ob3VycyA9IGQzX3RpbWUuaG91ci5yYW5nZTtcblx0ICBkM190aW1lLmhvdXJzLnV0YyA9IGQzX3RpbWUuaG91ci51dGMucmFuZ2U7XG5cdCAgZDNfdGltZS5tb250aCA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgZGF0ZSA9IGQzX3RpbWUuZGF5KGRhdGUpO1xuXHQgICAgZGF0ZS5zZXREYXRlKDEpO1xuXHQgICAgcmV0dXJuIGRhdGU7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG5cdCAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIG9mZnNldCk7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcblx0ICB9KTtcblx0ICBkM190aW1lLm1vbnRocyA9IGQzX3RpbWUubW9udGgucmFuZ2U7XG5cdCAgZDNfdGltZS5tb250aHMudXRjID0gZDNfdGltZS5tb250aC51dGMucmFuZ2U7XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9zY2FsZShsaW5lYXIsIG1ldGhvZHMsIGZvcm1hdCkge1xuXHQgICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuXHQgICAgICByZXR1cm4gbGluZWFyKHgpO1xuXHQgICAgfVxuXHQgICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gZDNfdGltZV9zY2FsZURhdGUobGluZWFyLmludmVydCh4KSk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5lYXIuZG9tYWluKCkubWFwKGQzX3RpbWVfc2NhbGVEYXRlKTtcblx0ICAgICAgbGluZWFyLmRvbWFpbih4KTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIHRpY2tNZXRob2QoZXh0ZW50LCBjb3VudCkge1xuXHQgICAgICB2YXIgc3BhbiA9IGV4dGVudFsxXSAtIGV4dGVudFswXSwgdGFyZ2V0ID0gc3BhbiAvIGNvdW50LCBpID0gZDMuYmlzZWN0KGQzX3RpbWVfc2NhbGVTdGVwcywgdGFyZ2V0KTtcblx0ICAgICAgcmV0dXJuIGkgPT0gZDNfdGltZV9zY2FsZVN0ZXBzLmxlbmd0aCA/IFsgbWV0aG9kcy55ZWFyLCBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZXh0ZW50Lm1hcChmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgcmV0dXJuIGQgLyAzMTUzNmU2O1xuXHQgICAgICB9KSwgY291bnQpWzJdIF0gOiAhaSA/IFsgZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcywgZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGV4dGVudCwgY291bnQpWzJdIF0gOiBtZXRob2RzW3RhcmdldCAvIGQzX3RpbWVfc2NhbGVTdGVwc1tpIC0gMV0gPCBkM190aW1lX3NjYWxlU3RlcHNbaV0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuXHQgICAgfVxuXHQgICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBza2lwKSB7XG5cdCAgICAgIHZhciBkb21haW4gPSBzY2FsZS5kb21haW4oKSwgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSwgbWV0aG9kID0gaW50ZXJ2YWwgPT0gbnVsbCA/IHRpY2tNZXRob2QoZXh0ZW50LCAxMCkgOiB0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIgJiYgdGlja01ldGhvZChleHRlbnQsIGludGVydmFsKTtcblx0ICAgICAgaWYgKG1ldGhvZCkgaW50ZXJ2YWwgPSBtZXRob2RbMF0sIHNraXAgPSBtZXRob2RbMV07XG5cdCAgICAgIGZ1bmN0aW9uIHNraXBwZWQoZGF0ZSkge1xuXHQgICAgICAgIHJldHVybiAhaXNOYU4oZGF0ZSkgJiYgIWludGVydmFsLnJhbmdlKGRhdGUsIGQzX3RpbWVfc2NhbGVEYXRlKCtkYXRlICsgMSksIHNraXApLmxlbmd0aDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gc2NhbGUuZG9tYWluKGQzX3NjYWxlX25pY2UoZG9tYWluLCBza2lwID4gMSA/IHtcblx0ICAgICAgICBmbG9vcjogZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgICAgICAgd2hpbGUgKHNraXBwZWQoZGF0ZSA9IGludGVydmFsLmZsb29yKGRhdGUpKSkgZGF0ZSA9IGQzX3RpbWVfc2NhbGVEYXRlKGRhdGUgLSAxKTtcblx0ICAgICAgICAgIHJldHVybiBkYXRlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgY2VpbDogZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgICAgICAgd2hpbGUgKHNraXBwZWQoZGF0ZSA9IGludGVydmFsLmNlaWwoZGF0ZSkpKSBkYXRlID0gZDNfdGltZV9zY2FsZURhdGUoK2RhdGUgKyAxKTtcblx0ICAgICAgICAgIHJldHVybiBkYXRlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSA6IGludGVydmFsKSk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCwgc2tpcCkge1xuXHQgICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoc2NhbGUuZG9tYWluKCkpLCBtZXRob2QgPSBpbnRlcnZhbCA9PSBudWxsID8gdGlja01ldGhvZChleHRlbnQsIDEwKSA6IHR5cGVvZiBpbnRlcnZhbCA9PT0gXCJudW1iZXJcIiA/IHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCkgOiAhaW50ZXJ2YWwucmFuZ2UgJiYgWyB7XG5cdCAgICAgICAgcmFuZ2U6IGludGVydmFsXG5cdCAgICAgIH0sIHNraXAgXTtcblx0ICAgICAgaWYgKG1ldGhvZCkgaW50ZXJ2YWwgPSBtZXRob2RbMF0sIHNraXAgPSBtZXRob2RbMV07XG5cdCAgICAgIHJldHVybiBpbnRlcnZhbC5yYW5nZShleHRlbnRbMF0sIGQzX3RpbWVfc2NhbGVEYXRlKCtleHRlbnRbMV0gKyAxKSwgc2tpcCA8IDEgPyAxIDogc2tpcCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZm9ybWF0O1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3RpbWVfc2NhbGUobGluZWFyLmNvcHkoKSwgbWV0aG9kcywgZm9ybWF0KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3NjYWxlRGF0ZSh0KSB7XG5cdCAgICByZXR1cm4gbmV3IERhdGUodCk7XG5cdCAgfVxuXHQgIHZhciBkM190aW1lX3NjYWxlU3RlcHMgPSBbIDFlMywgNWUzLCAxNWUzLCAzZTQsIDZlNCwgM2U1LCA5ZTUsIDE4ZTUsIDM2ZTUsIDEwOGU1LCAyMTZlNSwgNDMyZTUsIDg2NGU1LCAxNzI4ZTUsIDYwNDhlNSwgMjU5MmU2LCA3Nzc2ZTYsIDMxNTM2ZTYgXTtcblx0ICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcyA9IFsgWyBkM190aW1lLnNlY29uZCwgMSBdLCBbIGQzX3RpbWUuc2Vjb25kLCA1IF0sIFsgZDNfdGltZS5zZWNvbmQsIDE1IF0sIFsgZDNfdGltZS5zZWNvbmQsIDMwIF0sIFsgZDNfdGltZS5taW51dGUsIDEgXSwgWyBkM190aW1lLm1pbnV0ZSwgNSBdLCBbIGQzX3RpbWUubWludXRlLCAxNSBdLCBbIGQzX3RpbWUubWludXRlLCAzMCBdLCBbIGQzX3RpbWUuaG91ciwgMSBdLCBbIGQzX3RpbWUuaG91ciwgMyBdLCBbIGQzX3RpbWUuaG91ciwgNiBdLCBbIGQzX3RpbWUuaG91ciwgMTIgXSwgWyBkM190aW1lLmRheSwgMSBdLCBbIGQzX3RpbWUuZGF5LCAyIF0sIFsgZDNfdGltZS53ZWVrLCAxIF0sIFsgZDNfdGltZS5tb250aCwgMSBdLCBbIGQzX3RpbWUubW9udGgsIDMgXSwgWyBkM190aW1lLnllYXIsIDEgXSBdO1xuXHQgIHZhciBkM190aW1lX3NjYWxlTG9jYWxGb3JtYXQgPSBkM190aW1lX2Zvcm1hdC5tdWx0aShbIFsgXCIuJUxcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0TWlsbGlzZWNvbmRzKCk7XG5cdCAgfSBdLCBbIFwiOiVTXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldFNlY29uZHMoKTtcblx0ICB9IF0sIFsgXCIlSTolTVwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXRNaW51dGVzKCk7XG5cdCAgfSBdLCBbIFwiJUkgJXBcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0SG91cnMoKTtcblx0ICB9IF0sIFsgXCIlYSAlZFwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXREYXkoKSAmJiBkLmdldERhdGUoKSAhPSAxO1xuXHQgIH0gXSwgWyBcIiViICVkXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldERhdGUoKSAhPSAxO1xuXHQgIH0gXSwgWyBcIiVCXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldE1vbnRoKCk7XG5cdCAgfSBdLCBbIFwiJVlcIiwgZDNfdHJ1ZSBdIF0pO1xuXHQgIHZhciBkM190aW1lX3NjYWxlTWlsbGlzZWNvbmRzID0ge1xuXHQgICAgcmFuZ2U6IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG5cdCAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKSAqIHN0ZXAsICtzdG9wLCBzdGVwKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpO1xuXHQgICAgfSxcblx0ICAgIGZsb29yOiBkM19pZGVudGl0eSxcblx0ICAgIGNlaWw6IGQzX2lkZW50aXR5XG5cdCAgfTtcblx0ICBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLnllYXIgPSBkM190aW1lLnllYXI7XG5cdCAgZDNfdGltZS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3RpbWVfc2NhbGUoZDMuc2NhbGUubGluZWFyKCksIGQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMsIGQzX3RpbWVfc2NhbGVMb2NhbEZvcm1hdCk7XG5cdCAgfTtcblx0ICB2YXIgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMgPSBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLm1hcChmdW5jdGlvbihtKSB7XG5cdCAgICByZXR1cm4gWyBtWzBdLnV0YywgbVsxXSBdO1xuXHQgIH0pO1xuXHQgIHZhciBkM190aW1lX3NjYWxlVXRjRm9ybWF0ID0gZDNfdGltZV9mb3JtYXRVdGMubXVsdGkoWyBbIFwiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuXHQgIH0gXSwgWyBcIjolU1wiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXRVVENTZWNvbmRzKCk7XG5cdCAgfSBdLCBbIFwiJUk6JU1cIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0VVRDTWludXRlcygpO1xuXHQgIH0gXSwgWyBcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldFVUQ0hvdXJzKCk7XG5cdCAgfSBdLCBbIFwiJWEgJWRcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0VVRDRGF5KCkgJiYgZC5nZXRVVENEYXRlKCkgIT0gMTtcblx0ICB9IF0sIFsgXCIlYiAlZFwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXRVVENEYXRlKCkgIT0gMTtcblx0ICB9IF0sIFsgXCIlQlwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXRVVENNb250aCgpO1xuXHQgIH0gXSwgWyBcIiVZXCIsIGQzX3RydWUgXSBdKTtcblx0ICBkM190aW1lX3NjYWxlVXRjTWV0aG9kcy55ZWFyID0gZDNfdGltZS55ZWFyLnV0Yztcblx0ICBkM190aW1lLnNjYWxlLnV0YyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3RpbWVfc2NhbGUoZDMuc2NhbGUubGluZWFyKCksIGQzX3RpbWVfc2NhbGVVdGNNZXRob2RzLCBkM190aW1lX3NjYWxlVXRjRm9ybWF0KTtcblx0ICB9O1xuXHQgIGQzLnRleHQgPSBkM194aHJUeXBlKGZ1bmN0aW9uKHJlcXVlc3QpIHtcblx0ICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlVGV4dDtcblx0ICB9KTtcblx0ICBkMy5qc29uID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuXHQgICAgcmV0dXJuIGQzX3hocih1cmwsIFwiYXBwbGljYXRpb24vanNvblwiLCBkM19qc29uLCBjYWxsYmFjayk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19qc29uKHJlcXVlc3QpIHtcblx0ICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcblx0ICB9XG5cdCAgZDMuaHRtbCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcblx0ICAgIHJldHVybiBkM194aHIodXJsLCBcInRleHQvaHRtbFwiLCBkM19odG1sLCBjYWxsYmFjayk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19odG1sKHJlcXVlc3QpIHtcblx0ICAgIHZhciByYW5nZSA9IGQzX2RvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdCAgICByYW5nZS5zZWxlY3ROb2RlKGQzX2RvY3VtZW50LmJvZHkpO1xuXHQgICAgcmV0dXJuIHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG5cdCAgfVxuXHQgIGQzLnhtbCA9IGQzX3hoclR5cGUoZnVuY3Rpb24ocmVxdWVzdCkge1xuXHQgICAgcmV0dXJuIHJlcXVlc3QucmVzcG9uc2VYTUw7XG5cdCAgfSk7XG5cdCAgaWYgKHRydWUpIHRoaXMuZDMgPSBkMywgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZDMpLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID8gKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18sIGV4cG9ydHMsIG1vZHVsZSkpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpOyBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGQzOyBlbHNlIHRoaXMuZDMgPSBkMztcblx0fSgpO1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIEJhc2VFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEJhc2VFbGVtZW50KHN2Zykge1xuXHQgICAgICAgIHRoaXMuc3ZnID0gc3ZnO1xuXHQgICAgfVxuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VFbGVtZW50LnByb3RvdHlwZSwgXCJjeFwiLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLndpZHRoIC8gMjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlRWxlbWVudC5wcm90b3R5cGUsIFwiY3lcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQgLyAyO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VFbGVtZW50LnByb3RvdHlwZSwgXCJ3aWR0aFwiLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiArJChcIi52aXN1YWxpemVyXCIpLndpZHRoKCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUVsZW1lbnQucHJvdG90eXBlLCBcImhlaWdodFwiLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiArJChcIi52aXN1YWxpemVyXCIpLmhlaWdodCgpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIEJhc2VFbGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLkJhc2VFbGVtZW50ID0gQmFzZUVsZW1lbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qXHJcblx0XHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdFx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG5cdCovXHJcblx0Ly8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGxpc3QgPSBbXTtcclxuXHRcclxuXHRcdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcclxuXHRcdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuXHRcdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcclxuXHRcdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRyZXN1bHQucHVzaChcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGl0ZW1bMV0gKyBcIn1cIik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRcdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcclxuXHRcdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXHJcblx0XHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxyXG5cdFx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XHJcblx0XHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXHJcblx0XHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cclxuXHRcdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XHJcblx0XHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcclxuXHRcdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdHJldHVybiBsaXN0O1xyXG5cdH07XHJcblxuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcImZvbnRzL1NhbnN1bWktUmVndWxhci5lb3RcIjtcblxuLyoqKi8gfSxcbi8qIDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qXHJcblx0XHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdFx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG5cdCovXHJcblx0dmFyIHN0eWxlc0luRG9tID0ge30sXHJcblx0XHRtZW1vaXplID0gZnVuY3Rpb24oZm4pIHtcclxuXHRcdFx0dmFyIG1lbW87XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0XHRyZXR1cm4gbWVtbztcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblx0XHRpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIC9tc2llIFs2LTldXFxiLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xyXG5cdFx0fSksXHJcblx0XHRnZXRIZWFkRWxlbWVudCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XHJcblx0XHR9KSxcclxuXHRcdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxyXG5cdFx0c2luZ2xldG9uQ291bnRlciA9IDAsXHJcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xyXG5cdFxyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xyXG5cdFx0aWYoZmFsc2UpIHtcclxuXHRcdFx0aWYodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XHJcblx0XHR9XHJcblx0XHJcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHRcdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxyXG5cdFx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XHJcblx0XHJcblx0XHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcclxuXHRcclxuXHRcdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0XHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcclxuXHRcdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYobmV3TGlzdCkge1xyXG5cdFx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xyXG5cdFx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcclxuXHRcdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMrKztcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHRcdHZhciBzdHlsZXMgPSBbXTtcclxuXHRcdHZhciBuZXdTdHlsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbGlzdFtpXTtcclxuXHRcdFx0dmFyIGlkID0gaXRlbVswXTtcclxuXHRcdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XHJcblx0XHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xyXG5cdFx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxyXG5cdFx0XHRcdHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc3R5bGVzO1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0XHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XHJcblx0XHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcFtzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcclxuXHRcdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRcdGlmKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xyXG5cdFx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgaGVhZC5maXJzdENoaWxkKTtcclxuXHRcdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGVFbGVtZW50KTtcclxuXHRcdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdFx0aWYoaWR4ID49IDApIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0XHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdFx0c3R5bGVFbGVtZW50LnR5cGUgPSBcInRleHQvY3NzXCI7XHJcblx0XHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRcdHJldHVybiBzdHlsZUVsZW1lbnQ7XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpIHtcclxuXHRcdHZhciBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xyXG5cdFx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0XHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGlua0VsZW1lbnQpO1xyXG5cdFx0cmV0dXJuIGxpbmtFbGVtZW50O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcclxuXHRcdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cdFxyXG5cdFx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XHJcblx0XHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpO1xyXG5cdFx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHRcdH0gZWxzZSBpZihvYmouc291cmNlTWFwICYmXHJcblx0XHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xyXG5cdFx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KTtcclxuXHRcdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdFx0aWYoc3R5bGVFbGVtZW50LmhyZWYpXHJcblx0XHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdFx0fTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dXBkYXRlKG9iaik7XHJcblx0XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRcdGlmKG5ld09iaikge1xyXG5cdFx0XHRcdGlmKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcClcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZW1vdmUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblx0XHJcblx0dmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHRcclxuXHRcdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XHJcblx0XHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XHJcblx0XHR9O1xyXG5cdH0pKCk7XHJcblx0XHJcblx0ZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cdFxyXG5cdFx0aWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcclxuXHRcdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0XHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblx0XHJcblx0XHRpZihtZWRpYSkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXHJcblx0XHR9XHJcblx0XHJcblx0XHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0d2hpbGUoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gdXBkYXRlTGluayhsaW5rRWxlbWVudCwgb2JqKSB7XHJcblx0XHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHRcdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cdFxyXG5cdFx0aWYoc291cmNlTWFwKSB7XHJcblx0XHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XHJcblx0XHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xyXG5cdFxyXG5cdFx0dmFyIG9sZFNyYyA9IGxpbmtFbGVtZW50LmhyZWY7XHJcblx0XHJcblx0XHRsaW5rRWxlbWVudC5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHRcclxuXHRcdGlmKG9sZFNyYylcclxuXHRcdFx0VVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xyXG5cdH1cclxuXG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0ZnVuY3Rpb24gX19leHBvcnQobSkge1xuXHQgICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xuXHR9XG5cdF9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjkpKTtcblx0X19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyOCkpO1xuXHRfX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSk7XG5cblxuLyoqKi8gfSxcbi8qIDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdChmdW5jdGlvbihzZWxmKSB7XG5cdCAgJ3VzZSBzdHJpY3QnO1xuXHRcblx0ICBpZiAoc2VsZi5mZXRjaCkge1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHRcblx0ICB2YXIgc3VwcG9ydCA9IHtcblx0ICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcblx0ICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuXHQgICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIG5ldyBCbG9iKClcblx0ICAgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgICB9IGNhdGNoKGUpIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2Vcblx0ICAgICAgfVxuXHQgICAgfSkoKSxcblx0ICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG5cdCAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcblx0ICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcblx0ICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuXHQgICAgfVxuXHQgICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcblx0ICAgIH1cblx0ICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG5cdCAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuXHQgICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcblx0ICAgIH1cblx0ICAgIHJldHVybiB2YWx1ZVxuXHQgIH1cblx0XG5cdCAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3Rcblx0ICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuXHQgICAgdmFyIGl0ZXJhdG9yID0ge1xuXHQgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG5cdCAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuXHQgICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIGl0ZXJhdG9yXG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gaXRlcmF0b3Jcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuXHQgICAgdGhpcy5tYXAgPSB7fVxuXHRcblx0ICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuXHQgICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcblx0ICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcblx0ICAgICAgfSwgdGhpcylcblx0XG5cdCAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcblx0ICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcblx0ICAgICAgfSwgdGhpcylcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cdCAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuXHQgICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcblx0ICAgIHZhciBsaXN0ID0gdGhpcy5tYXBbbmFtZV1cblx0ICAgIGlmICghbGlzdCkge1xuXHQgICAgICBsaXN0ID0gW11cblx0ICAgICAgdGhpcy5tYXBbbmFtZV0gPSBsaXN0XG5cdCAgICB9XG5cdCAgICBsaXN0LnB1c2godmFsdWUpXG5cdCAgfVxuXHRcblx0ICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuXHQgICAgcmV0dXJuIHZhbHVlcyA/IHZhbHVlc1swXSA6IG51bGxcblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHJldHVybiB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSB8fCBbXVxuXHQgIH1cblx0XG5cdCAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuXHQgICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG5cdCAgfVxuXHRcblx0ICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHQgICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBbbm9ybWFsaXplVmFsdWUodmFsdWUpXVxuXHQgIH1cblx0XG5cdCAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG5cdCAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLm1hcCkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbHVlLCBuYW1lLCB0aGlzKVxuXHQgICAgICB9LCB0aGlzKVxuXHQgICAgfSwgdGhpcylcblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBpdGVtcyA9IFtdXG5cdCAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChuYW1lKSB9KVxuXHQgICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuXHQgIH1cblx0XG5cdCAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaXRlbXMgPSBbXVxuXHQgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IGl0ZW1zLnB1c2godmFsdWUpIH0pXG5cdCAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG5cdCAgfVxuXHRcblx0ICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaXRlbXMgPSBbXVxuXHQgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSkgfSlcblx0ICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcblx0ICB9XG5cdFxuXHQgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG5cdCAgICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuXHQgICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcblx0ICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuXHQgICAgfVxuXHQgICAgYm9keS5ib2R5VXNlZCA9IHRydWVcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcblx0ICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcblx0ICAgICAgfVxuXHQgICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG5cdCAgICAgIH1cblx0ICAgIH0pXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuXHQgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcblx0ICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuXHQgICAgcmV0dXJuIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG5cdCAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuXHQgICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcblx0ICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gQm9keSgpIHtcblx0ICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXHRcblx0ICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuXHQgICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcblx0ICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuXHQgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG5cdCAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG5cdCAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuXHQgICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcblx0ICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcblx0ICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuXHQgICAgICB9IGVsc2UgaWYgKCFib2R5KSB7XG5cdCAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuXHQgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcblx0ICAgICAgICAvLyBPbmx5IHN1cHBvcnQgQXJyYXlCdWZmZXJzIGZvciBQT1NUIG1ldGhvZC5cblx0ICAgICAgICAvLyBSZWNlaXZpbmcgQXJyYXlCdWZmZXJzIGhhcHBlbnMgdmlhIEJsb2JzLCBpbnN0ZWFkLlxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgQm9keUluaXQgdHlwZScpXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jylcblx0ICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcblx0ICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG5cdCAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcblx0ICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHN1cHBvcnQuYmxvYikge1xuXHQgICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuXHQgICAgICAgIGlmIChyZWplY3RlZCkge1xuXHQgICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcblx0ICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG5cdCAgICAgICAgaWYgKHJlamVjdGVkKSB7XG5cdCAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuXHQgICAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuXHQgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuXHQgICAgICAgIHJldHVybiByZWplY3RlZCA/IHJlamVjdGVkIDogUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcblx0ICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiB0aGlzXG5cdCAgfVxuXHRcblx0ICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcblx0ICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXHRcblx0ICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG5cdCAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG5cdCAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2Rcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcblx0ICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cdCAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXHQgICAgaWYgKFJlcXVlc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoaW5wdXQpKSB7XG5cdCAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcblx0ICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG5cdCAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG5cdCAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuXHQgICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG5cdCAgICAgIGlmICghYm9keSkge1xuXHQgICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcblx0ICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy51cmwgPSBpbnB1dFxuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG5cdCAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcblx0ICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuXHQgICAgfVxuXHQgICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG5cdCAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcblx0ICAgIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cdFxuXHQgICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG5cdCAgICB9XG5cdCAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuXHQgIH1cblx0XG5cdCAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzKVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcblx0ICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcblx0ICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuXHQgICAgICBpZiAoYnl0ZXMpIHtcblx0ICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG5cdCAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG5cdCAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG5cdCAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuXHQgICAgICB9XG5cdCAgICB9KVxuXHQgICAgcmV0dXJuIGZvcm1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGhlYWRlcnMoeGhyKSB7XG5cdCAgICB2YXIgaGVhZCA9IG5ldyBIZWFkZXJzKClcblx0ICAgIHZhciBwYWlycyA9ICh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpLnRyaW0oKS5zcGxpdCgnXFxuJylcblx0ICAgIHBhaXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG5cdCAgICAgIHZhciBzcGxpdCA9IGhlYWRlci50cmltKCkuc3BsaXQoJzonKVxuXHQgICAgICB2YXIga2V5ID0gc3BsaXQuc2hpZnQoKS50cmltKClcblx0ICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignOicpLnRyaW0oKVxuXHQgICAgICBoZWFkLmFwcGVuZChrZXksIHZhbHVlKVxuXHQgICAgfSlcblx0ICAgIHJldHVybiBoZWFkXG5cdCAgfVxuXHRcblx0ICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cdFxuXHQgIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG5cdCAgICBpZiAoIW9wdGlvbnMpIHtcblx0ICAgICAgb3B0aW9ucyA9IHt9XG5cdCAgICB9XG5cdFxuXHQgICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG5cdCAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzXG5cdCAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG5cdCAgICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHRcblx0ICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMgPyBvcHRpb25zLmhlYWRlcnMgOiBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG5cdCAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG5cdCAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcblx0ICB9XG5cdFxuXHQgIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cdFxuXHQgIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuXHQgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuXHQgICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG5cdCAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG5cdCAgICAgIHVybDogdGhpcy51cmxcblx0ICAgIH0pXG5cdCAgfVxuXHRcblx0ICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcblx0ICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG5cdCAgICByZXR1cm4gcmVzcG9uc2Vcblx0ICB9XG5cdFxuXHQgIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXHRcblx0ICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG5cdCAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG5cdCAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcblx0ICB9XG5cdFxuXHQgIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcblx0ICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG5cdCAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG5cdFxuXHQgIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuXHQgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICB2YXIgcmVxdWVzdFxuXHQgICAgICBpZiAoUmVxdWVzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihpbnB1dCkgJiYgIWluaXQpIHtcblx0ICAgICAgICByZXF1ZXN0ID0gaW5wdXRcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXHRcblx0ICAgICAgZnVuY3Rpb24gcmVzcG9uc2VVUkwoKSB7XG5cdCAgICAgICAgaWYgKCdyZXNwb25zZVVSTCcgaW4geGhyKSB7XG5cdCAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVVJMXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyBBdm9pZCBzZWN1cml0eSB3YXJuaW5ncyBvbiBnZXRSZXNwb25zZUhlYWRlciB3aGVuIG5vdCBhbGxvd2VkIGJ5IENPUlNcblx0ICAgICAgICBpZiAoL15YLVJlcXVlc3QtVVJMOi9tLnRlc3QoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkge1xuXHQgICAgICAgICAgcmV0dXJuIHhoci5nZXRSZXNwb25zZUhlYWRlcignWC1SZXF1ZXN0LVVSTCcpXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm5cblx0ICAgICAgfVxuXHRcblx0ICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0ge1xuXHQgICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuXHQgICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG5cdCAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKHhociksXG5cdCAgICAgICAgICB1cmw6IHJlc3BvbnNlVVJMKClcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcblx0ICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcblx0ICAgICAgfVxuXHRcblx0ICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcblx0ICAgICAgfVxuXHRcblx0ICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXHRcblx0ICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuXHQgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG5cdCAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuXHQgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuXHQgICAgICB9KVxuXHRcblx0ICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcblx0ICAgIH0pXG5cdCAgfVxuXHQgIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cdH0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcblxuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoKTtcblx0Ly8gaW1wb3J0c1xuXHRcblx0XG5cdC8vIG1vZHVsZVxuXHRleHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNle2ZvbnQtZmFtaWx5OlNhbnN1bWktUmVndWxhcjtzcmM6dXJsKFwiICsgX193ZWJwYWNrX3JlcXVpcmVfXyg2KSArIFwiKTtzcmM6dXJsKFwiICsgX193ZWJwYWNrX3JlcXVpcmVfXygxNSkgKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLHVybChcIiArIF9fd2VicGFja19yZXF1aXJlX18oMTQpICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLHVybChcIiArIF9fd2VicGFja19yZXF1aXJlX18oMTMpICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKSArIFwiI1NhbnN1bWktUmVndWxhcikgZm9ybWF0KFxcXCJzdmdcXFwiKSx1cmwoXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpICsgXCI/I2llZml4KSBmb3JtYXQoXFxcImVtYmVkZGVkLW9wZW50eXBlXFxcIik7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohIG5vcm1hbGl6ZS1zY3NzIHwgTUlUL0dQTHYyIExpY2Vuc2UgfCBiaXQubHkvbm9ybWFsaXplLXNjc3MgKi9odG1se2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWY7LW1zLXRleHQtc2l6ZS1hZGp1c3Q6MTAwJTstd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6MTAwJX1ib2R5e21hcmdpbjowfWFydGljbGUsYXNpZGUsZGV0YWlscyxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsaGVhZGVyLG1haW4sbWVudSxuYXYsc2VjdGlvbixzdW1tYXJ5e2Rpc3BsYXk6YmxvY2t9YXVkaW8sY2FudmFzLHByb2dyZXNzLHZpZGVve2Rpc3BsYXk6aW5saW5lLWJsb2NrfWF1ZGlvOm5vdChbY29udHJvbHNdKXtkaXNwbGF5Om5vbmU7aGVpZ2h0OjB9cHJvZ3Jlc3N7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9W2hpZGRlbl0sdGVtcGxhdGV7ZGlzcGxheTpub25lfWF7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOm9iamVjdHN9YTphY3RpdmUsYTpob3ZlcntvdXRsaW5lLXdpZHRoOjB9YWJiclt0aXRsZV17Ym9yZGVyLWJvdHRvbTpub25lO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSBkb3R0ZWR9YixzdHJvbmd7Zm9udC13ZWlnaHQ6aW5oZXJpdDtmb250LXdlaWdodDpib2xkZXJ9Y29kZSxrYmQsc2FtcHtmb250LWZhbWlseTptb25vc3BhY2UsbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19ZGZue2ZvbnQtc3R5bGU6aXRhbGljfWgxe2ZvbnQtc2l6ZToyZW07bWFyZ2luOi43NWVtIDB9bWFya3tiYWNrZ3JvdW5kLWNvbG9yOiNmZjA7Y29sb3I6IzAwMH1zbWFsbHtmb250LXNpemU6ODAlfXN1YixzdXB7Zm9udC1zaXplOjc1JTtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfXN1Yntib3R0b206LS4yNWVtfXN1cHt0b3A6LS41ZW19aW1ne2JvcmRlci1zdHlsZTpub25lfXN2Zzpub3QoOnJvb3Qpe292ZXJmbG93OmhpZGRlbn1maWd1cmV7bWFyZ2luOjEuNWVtIDQwcHh9aHJ7Ym94LXNpemluZzpjb250ZW50LWJveDtoZWlnaHQ6MDtvdmVyZmxvdzp2aXNpYmxlfXByZXtmb250LWZhbWlseTptb25vc3BhY2UsbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19YnV0dG9uLGlucHV0LG9wdGdyb3VwLHNlbGVjdCx0ZXh0YXJlYXtmb250OmluaGVyaXQ7bWFyZ2luOjB9YnV0dG9ue292ZXJmbG93OnZpc2libGV9YnV0dG9uLHNlbGVjdHt0ZXh0LXRyYW5zZm9ybTpub25lfVt0eXBlPXJlc2V0XSxbdHlwZT1zdWJtaXRdLGJ1dHRvbixodG1sIFt0eXBlPWJ1dHRvbl17LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbn1bdHlwZT1idXR0b25dOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPXJlc2V0XTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1zdWJtaXRdOjotbW96LWZvY3VzLWlubmVyLGJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcntib3JkZXItc3R5bGU6bm9uZTtwYWRkaW5nOjB9W3R5cGU9YnV0dG9uXTotbW96LWZvY3VzcmluZyxbdHlwZT1yZXNldF06LW1vei1mb2N1c3JpbmcsW3R5cGU9c3VibWl0XTotbW96LWZvY3VzcmluZyxidXR0b246LW1vei1mb2N1c3Jpbmd7b3V0bGluZToxcHggZG90dGVkIEJ1dHRvblRleHR9aW5wdXR7b3ZlcmZsb3c6dmlzaWJsZX1bdHlwZT1jaGVja2JveF0sW3R5cGU9cmFkaW9de2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjB9W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixbdHlwZT1udW1iZXJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9ue2hlaWdodDphdXRvfVt0eXBlPXNlYXJjaF17LXdlYmtpdC1hcHBlYXJhbmNlOnRleHRmaWVsZDtvdXRsaW5lLW9mZnNldDotMnB4fVt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sW3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX06Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6aW5oZXJpdDtvcGFjaXR5Oi41NH06Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b247Zm9udDppbmhlcml0fWZpZWxkc2V0e2JvcmRlcjoxcHggc29saWQgc2lsdmVyO21hcmdpbjowIDJweDtwYWRkaW5nOi4zNWVtIC42MjVlbSAuNzVlbX1sZWdlbmR7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6dGFibGU7bWF4LXdpZHRoOjEwMCU7d2hpdGUtc3BhY2U6bm9ybWFsO2NvbG9yOmluaGVyaXQ7cGFkZGluZzowfW9wdGdyb3Vwe2ZvbnQtd2VpZ2h0OjcwMH10ZXh0YXJlYXtvdmVyZmxvdzphdXRvfWgxLGgyLGxhYmVsLHB7Zm9udC1mYW1pbHk6U2Fuc3VtaS1SZWd1bGFyfWJvZHksaHRtbHtoZWlnaHQ6MTAwJTtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWluLWhlaWdodDoxMDB2aH1sYWJlbHtmb250LXNpemU6MTJweH1oMXtmb250LXNpemU6MThweH1oMntmb250LXNpemU6MTZweH0uY29udGVudHt3aWR0aDoxMDAlO2hlaWdodDpjYWxjKDEwMCUgLSA4MHB4KTtkaXNwbGF5OmZsZXg7ZmxleDoxfS5ub2RlIGNpcmNsZXtzdHJva2U6IzFmYmFkNztzdHJva2Utd2lkdGg6MnB4fS5ub2RlIC5ub2RlLWNvbG9yLTF7ZmlsbDojNmU4NjhkfS5ub2RlIC5ub2RlLWNvbG9yLTJ7ZmlsbDojNTY3MTdhfS5ub2RlIC5ub2RlLWNvbG9yLTN7ZmlsbDojM2U1ZDY3fS5ub2RlIC5ub2RlLWNvbG9yLTR7ZmlsbDojMjY0OTU0fS5ub2RlIC5ub2RlLWNvbG9yLTV7ZmlsbDojMGUzNTQxfS5ub2RlIGRpdntkaXNwbGF5OnRhYmxlO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7b3ZlcmZsb3c6aGlkZGVufS5ub2RlIHB7Zm9udC1zaXplOjhweDtjb2xvcjojZjJmMmYyO3RleHQtc2hhZG93OjFweCAxcHggNHB4ICMwZTM1NDE7ZGlzcGxheTp0YWJsZS1jZWxsO3RleHQtYWxpZ246Y2VudGVyO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0ubG9hZGVyIGNpcmNsZXtmaWxsLW9wYWNpdHk6MDtzdHJva2U6IzFmNzdiNDtzdHJva2Utd2lkdGg6M3B4fS5sb2FkZXIgcmVjdHtmaWxsOiNmZmZ9LnZpc3VhbGl6ZXJ7d2lkdGg6MTAwJTtmbGV4OjF9LnRvcC1iYXJ7YmFja2dyb3VuZC1jb2xvcjojMDkwOTFhO2hlaWdodDo4MHB4O2NvbG9yOiNmMmYyZjI7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nLWxlZnQ6NDhweH0udG9wLWJhciBwe3BhZGRpbmctbGVmdDoxNnB4O21hcmdpbjowfS5tZW51e2JhY2tncm91bmQtY29sb3I6I2ZmZjtjb2xvcjojMDkwOTFhO2ZsZXg6MCAwIDE2ZW07Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjMDkwOTFhO3BhZGRpbmctdG9wOjUwcHh9Lm1lbnUgZGl2LC5tZW51IGgyLC5tZW51IGltZywubWVudSBpbnB1dHtwYWRkaW5nLWxlZnQ6NDhweH0ubWVudSBoMSwubWVudSBpbWd7ZGlzcGxheTppbmxpbmV9Lm1lbnUgaDF7bGluZS1oZWlnaHQ6MH0ubWVudSBocntjb2xvcjojMDkwOTFhO3dpZHRoOjgwJTttYXJnaW4tYm90dG9tOjIwcHh9Lm1lbnUgaW5wdXR7bWFyZ2luOjVweCAwfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnN2Z1wiO1xuXG4vKioqLyB9LFxuLyogMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJmb250cy9TYW5zdW1pLVJlZ3VsYXIudHRmXCI7XG5cbi8qKiovIH0sXG4vKiAxNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcImZvbnRzL1NhbnN1bWktUmVndWxhci53b2ZmXCI7XG5cbi8qKiovIH0sXG4vKiAxNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcImZvbnRzL1NhbnN1bWktUmVndWxhci53b2ZmMlwiO1xuXG4vKioqLyB9LFxuLyogMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cdFxuXHQvLyBsb2FkIHRoZSBzdHlsZXNcblx0dmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0aWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cdC8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cblx0dmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNykoY29udGVudCwge30pO1xuXHRpZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcblx0Ly8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuXHRpZihmYWxzZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL1NhbnN1bWktUmVndWxhci5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1wiKTtcblx0XHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXHRcblx0Ly8gbG9hZCB0aGUgc3R5bGVzXG5cdHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdGlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXHQvLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG5cdHZhciB1cGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKGNvbnRlbnQsIHt9KTtcblx0aWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcblx0aWYoZmFsc2UpIHtcblx0XHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZXMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cdFx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xuXHR9XG5cbi8qKiovIH0sXG4vKiAxOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0dmFyIGNvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXHR2YXIgbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRsb2cuc2V0TGV2ZWwoXCJkZWJ1Z1wiKTtcblx0dmFyIEFwcCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBBcHAoKSB7XG5cdCAgICAgICAgdGhpcy5fdmlzdWFsaXplciA9IG5ldyBjb21wb25lbnRzXzEuVmlzdWFsaXplcihuZXcgY29tcG9uZW50c18xLk1lbnVDb21wb25lbnQoKSwge30pO1xuXHQgICAgfVxuXHQgICAgQXBwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICQoJ2JvZHknKS5mYWRlSW4oXCJmYXN0XCIpO1xuXHQgICAgICAgIHRoaXMuX3Zpc3VhbGl6ZXIuZHJhdygpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBBcHA7XG5cdH0oKSk7XG5cdGV4cG9ydHMuQXBwID0gQXBwO1xuXHR2YXIgYXBwID0gbmV3IEFwcCgpO1xuXHRhcHAuaW5pdCgpO1xuXG5cbi8qKiovIH0sXG4vKiAxOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcblx0ICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcblx0fVxuXHRfX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKSk7XG5cdF9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjQpKTtcblxuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdHZhciBwcmltYXJ5U2VsZWN0b3IgPSBcInByaW1hcnktc2VsZWN0b3JzXCI7XG5cdHZhciBzZWNvbmRhcnlTZWxlY3RvciA9IFwic2Vjb25kYXJ5LXNlbGVjdG9yc1wiO1xuXHR2YXIgbG9nTWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBsb2cgPSBsb2dNYW5hZ2VyLmdldExvZ2dlcihcIm1lbnVcIik7XG5cdHZhciBNZW51Q29tcG9uZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE1lbnVDb21wb25lbnQoKSB7XG5cdCAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB7fTtcblx0ICAgIH1cblx0ICAgIE1lbnVDb21wb25lbnQucHJvdG90eXBlLnNldFNlbGVjdG9ycyA9IGZ1bmN0aW9uIChzZWxlY3RvcnMpIHtcblx0ICAgICAgICB2YXIgc2VsZWN0ZWRQcmltYXJ5ID0gc2VsZWN0b3JzWzBdLnF1ZXJ5O1xuXHQgICAgICAgIHZhciBzZWxlY3RlZFNlY29uZGFyeSA9IHNlbGVjdG9yc1swXS5jaGlsZHJlblswXS5xdWVyeTtcblx0ICAgICAgICB0aGlzLnNldFNlbGVjdG9yc0ludGVybmFsKHByaW1hcnlTZWxlY3Rvciwgc2VsZWN0b3JzLCBzZWxlY3RlZFByaW1hcnkpO1xuXHQgICAgICAgIHRoaXMuc2V0U2VsZWN0b3JzSW50ZXJuYWwoc2Vjb25kYXJ5U2VsZWN0b3IsIHNlbGVjdG9yc1swXS5jaGlsZHJlbiwgc2VsZWN0ZWRTZWNvbmRhcnkpO1xuXHQgICAgICAgIHRoaXMuX3NlbGVjdG9yc0hpZXJhcmNoeSA9IHNlbGVjdG9ycztcblx0ICAgIH07XG5cdCAgICBNZW51Q29tcG9uZW50LnByb3RvdHlwZS5zZXRPblNlbGVjdG9yc0NhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcblx0ICAgIH07XG5cdCAgICBNZW51Q29tcG9uZW50LnByb3RvdHlwZS5zZXRTZWxlY3RvcnNJbnRlcm5hbCA9IGZ1bmN0aW9uIChjYXRlZ29yeSwgc2VsZWN0b3JzLCBzZWxlY3RlZCkge1xuXHQgICAgICAgIHRoaXMuX3NlbGVjdGVkW2NhdGVnb3J5XSA9IHNlbGVjdGVkO1xuXHQgICAgICAgIHZhciBjYXRlZ29yeUNsYXNzID0gXCIuXCIgKyBjYXRlZ29yeTtcblx0ICAgICAgICAkKGNhdGVnb3J5Q2xhc3MpLmVtcHR5KCk7XG5cdCAgICAgICAgc2VsZWN0b3JzLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdG9yLCBpKSB7XG5cdCAgICAgICAgICAgIHZhciBzZWxlY3RlZFN0cmluZyA9IHNlbGVjdGVkID09PSBzZWxlY3Rvci5xdWVyeSA/IFwiY2hlY2tlZFwiIDogXCJcIjtcblx0ICAgICAgICAgICAgdmFyIGh0bWwgPSBcIlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcIlwiICsgY2F0ZWdvcnkgKyBcIlxcXCIgaWQ9XFxcIlwiICsgY2F0ZWdvcnkgKyBcIi1cIiArIGkgKyBcIlxcXCIgdmFsdWU9XFxcIlwiICsgc2VsZWN0b3IucXVlcnkgKyBcIlxcXCIgXCIgKyBzZWxlY3RlZFN0cmluZyArIFwiIC8+XFxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcIlwiICsgY2F0ZWdvcnkgKyBcIi1cIiArIGkgKyBcIlxcXCI+XCIgKyBzZWxlY3Rvci5sYWJlbCArIFwiPC9sYWJlbD48YnI+XFxuICAgICAgICAgICAgXCI7XG5cdCAgICAgICAgICAgICQoY2F0ZWdvcnlDbGFzcykuYXBwZW5kKGh0bWwpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMuYWRkQ2hhbmdlTGlzdGVuZXIoY2F0ZWdvcnkpO1xuXHQgICAgfTtcblx0ICAgIE1lbnVDb21wb25lbnQucHJvdG90eXBlLmFkZENoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB2YXIgY2F0ZWdvcnlDbGFzcyA9IFwiLlwiICsgY2F0ZWdvcnk7XG5cdCAgICAgICAgJChjYXRlZ29yeUNsYXNzICsgJyBpbnB1dCcpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICB2YXIgc2VsZWN0ZWRWYWx1ZSA9ICQoXCJpbnB1dFtuYW1lPVxcXCJcIiArIGNhdGVnb3J5ICsgXCJcXFwiXTpjaGVja2VkXCIsIGNhdGVnb3J5Q2xhc3MpLnZhbCgpO1xuXHQgICAgICAgICAgICBfdGhpcy5fc2VsZWN0ZWRbY2F0ZWdvcnldID0gc2VsZWN0ZWRWYWx1ZTtcblx0ICAgICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBwcmltYXJ5U2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IF90aGlzLl9zZWxlY3RvcnNIaWVyYXJjaHkuZmluZChmdW5jdGlvbiAocykgeyByZXR1cm4gcy5xdWVyeSA9PT0gc2VsZWN0ZWRWYWx1ZTsgfSk7XG5cdCAgICAgICAgICAgICAgICBfdGhpcy5zZXRTZWxlY3RvcnNJbnRlcm5hbChzZWNvbmRhcnlTZWxlY3Rvciwgc2VsZWN0ZWQuY2hpbGRyZW4sIHNlbGVjdGVkLmNoaWxkcmVuWzBdLnF1ZXJ5KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBfdGhpcy5pbnZva2VDYWxsYmFjaygpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIE1lbnVDb21wb25lbnQucHJvdG90eXBlLmludm9rZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2spIHtcblx0ICAgICAgICAgICAgbG9nLmVycm9yKFwiQ2FsbGJhY2sgaGFzIG5vdCBiZWVuIHNldFwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9jYWxsYmFjayh7IHF1ZXJ5OiB0aGlzLl9zZWxlY3RlZFtwcmltYXJ5U2VsZWN0b3JdIH0sIHsgcXVlcnk6IHRoaXMuX3NlbGVjdGVkW3NlY29uZGFyeVNlbGVjdG9yXSB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gTWVudUNvbXBvbmVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5NZW51Q29tcG9uZW50ID0gTWVudUNvbXBvbmVudDtcblxuXG4vKioqLyB9LFxuLyogMjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRmdW5jdGlvbiBfX2V4cG9ydChtKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG5cdH1cblx0X19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG5cdF9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjIpKTtcblx0X19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyMykpO1xuXG5cbi8qKiovIH0sXG4vKiAyMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBkMyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBiYXNlX2VsZW1lbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBsb2dNYW5hZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGxvZyA9IGxvZ01hbmFnZXIuZ2V0TG9nZ2VyKFwibG9hZGVyXCIpO1xuXHR2YXIgU3RhbmRhcmRMb2FkZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFN0YW5kYXJkTG9hZGVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU3RhbmRhcmRMb2FkZXIoc3ZnKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgc3ZnKTtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSYWRpdXMgb2YgdGhlIGxvYWRlclxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRoaXMuciA9IDUwO1xuXHQgICAgfVxuXHQgICAgU3RhbmRhcmRMb2FkZXIucHJvdG90eXBlLnN0YXJ0TG9hZGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmcpIHtcblx0ICAgICAgICAgICAgbG9nLmRlYnVnKFwiQ2FsbGluZyBhbHJlYWR5IHN0YXJ0ZWQgbG9hZGVyXCIpO1xuXHQgICAgICAgICAgICByZXR1cm47IC8vIFdlIGlnbm9yZSBjYWxsIGlmIGFscmVhZHkgbG9hZGluZy5cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5nID0gdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuXHQgICAgICAgICAgICAuY2xhc3NlZChcImxvYWRlclwiLCB0cnVlKTtcblx0ICAgICAgICB0aGlzLmFkZENpcmNsZSh0aGlzLmcpO1xuXHQgICAgICAgIHRoaXMuYWRkUmVjdCh0aGlzLmcpO1xuXHQgICAgfTtcblx0ICAgIFN0YW5kYXJkTG9hZGVyLnByb3RvdHlwZS5zdG9wTG9hZGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmcpIHtcblx0ICAgICAgICAgICAgdGhpcy5nLnJlbW92ZSgpO1xuXHQgICAgICAgICAgICB0aGlzLmcgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvLy8gQWRkcyBhIGNpcmNsZSB0byB0aGUgc2VsZWN0aW9uLiBUaGUgY2lyY2xlIGlzIHBsYWNlZCBpbiB0aGUgY2VudGVyIG9mIHRoZSBib2FyZC5cblx0ICAgIFN0YW5kYXJkTG9hZGVyLnByb3RvdHlwZS5hZGRDaXJjbGUgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICBzZWxlY3Rpb24uYXBwZW5kKFwiY2lyY2xlXCIpXG5cdCAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY3g7IH0pXG5cdCAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY3k7IH0pXG5cdCAgICAgICAgICAgIC5hdHRyKFwiclwiLCB0aGlzLnIpO1xuXHQgICAgfTtcblx0ICAgIFN0YW5kYXJkTG9hZGVyLnByb3RvdHlwZS5hZGRSZWN0ID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuciAqIDIgKyA1OyAvLyAqMiA9IGRpYW1ldGVyLiArNSB0byBhY2NvdW50IGZvciB0aGUgY2lyY2xlcyBib3JkZXIuXG5cdCAgICAgICAgdmFyIHdpZHRoID0gMjA7IC8vIERlZmluZXMgdGhlIHdpZHRoIG9mIHRoZSBnYXAgaW4gdGhlIGNpcmNsZVxuXHQgICAgICAgIHZhciByZWN0ID0gc2VsZWN0aW9uLmFwcGVuZChcInJlY3RcIilcblx0ICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmN4IC0gMjAgLyAyOyB9KVxuXHQgICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY3kgLSBoZWlnaHQgLyAyOyB9KVxuXHQgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIDIwKVxuXHQgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xuXHQgICAgICAgIHRoaXMuYWRkUm90YXRpb24ocmVjdCk7XG5cdCAgICB9O1xuXHQgICAgU3RhbmRhcmRMb2FkZXIucHJvdG90eXBlLmFkZFJvdGF0aW9uID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdmFyIHRyYW5zaXN0aW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBzZWxlY3Rpb24udHJhbnNpdGlvbigpXG5cdCAgICAgICAgICAgICAgICAuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGQzLmludGVycG9sYXRlU3RyaW5nKFwicm90YXRlKDAsICAgXCIgKyBfdGhpcy5jeCArIFwiLCBcIiArIF90aGlzLmN5ICsgXCIpXCIsIFwicm90YXRlKDM2MCwgXCIgKyBfdGhpcy5jeCArIFwiLCBcIiArIF90aGlzLmN5ICsgXCIpXCIpOyB9KVxuXHQgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDIwMDApXG5cdCAgICAgICAgICAgICAgICAuZWFjaChcImVuZFwiLCB0cmFuc2lzdGlvbik7IC8vIFJlcGVhdCB0cmFuc2l0aW9uXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB0cmFuc2lzdGlvbigpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBTdGFuZGFyZExvYWRlcjtcblx0fShiYXNlX2VsZW1lbnRfMS5CYXNlRWxlbWVudCkpO1xuXHRleHBvcnRzLlN0YW5kYXJkTG9hZGVyID0gU3RhbmRhcmRMb2FkZXI7XG5cblxuLyoqKi8gfSxcbi8qIDIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIGQzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGJhc2VfZWxlbWVudF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIHV0aWxzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbG9nTWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBsb2cgPSBsb2dNYW5hZ2VyLmdldExvZ2dlcihcIm5vZGUtaGllcmFyY2h5XCIpO1xuXHR2YXIgTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24oKSB7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24gPSBOb2RlSGllcmFyY2h5RWxlbWVudE9wdGlvbjtcblx0LyoqXG5cdCAqIFRoZSBub2RlIEhpZXJhcmNoeSByZXByZXNlbnRzIGEgaGllcmFyY2h5IG9mIG5vZGVzLlxuXHQgKiBUaGUgZGVwdGggb2YgdGhlIGhpZXJhcmNoeSBpcyBhbHdheXMgb25lLlxuXHQgKi9cblx0dmFyIE5vZGVIaWVyYXJjaHlFbGVtZW50ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhOb2RlSGllcmFyY2h5RWxlbWVudCwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIE5vZGVIaWVyYXJjaHlFbGVtZW50KHN2ZywgX2NvbmZpZykge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHN2Zyk7XG5cdCAgICAgICAgdGhpcy5fY29uZmlnID0gX2NvbmZpZztcblx0ICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZykge1xuXHQgICAgICAgICAgICBsb2cuZXJyb3IoXCJObyBjb25maWd1cmF0aW9uIGlzIHNwZWNpZmllZFwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUsIFwiY29sb3JTY2hlbWVcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMuX2NvbG9yU2NoZW1lKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9jb2xvclNjaGVtZSA9IGQzLnNjYWxlLmNhdGVnb3J5MjBjKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yU2NoZW1lO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVGhlIGRlZmF1bHQgY29sb3JzY2hlbWUgY2FuIGJlIG92ZXJyaWRlblxuXHQgICAgICAgICovXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY29sb3JTY2hlbWUgPSB2YWx1ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUsIFwibWluaW11bVZhbHVlXCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5taW5pbXVtVmFsdWUgfHwgMDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5taW5pbXVtVmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUsIFwiZGF0YVwiLCB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2V0cyBkYXRhIGFuZCBzdGFydHMgZHJhd2luZyBub2RlZGVzXG5cdCAgICAgICAgICogICovXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fZGF0YSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jbGVhbigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuXHQgICAgICAgICAgICB0aGlzLnJlZHJhdygpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgTm9kZUhpZXJhcmNoeUVsZW1lbnQucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIi5ub2RlXCIpLnJlbW92ZSgpO1xuXHQgICAgfTtcblx0ICAgIE5vZGVIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB2YXIgdHJhbnNsYXRlTm9kZVRvQm9yZGVyID0gdXRpbHNfMS50cmFuc2xhdGVUb0JvcmRlckZhY3RvcnkodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXHQgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudmFsdWUgPj0gX3RoaXMubWluaW11bVZhbHVlICYmIGQubmFtZTsgfSk7XG5cdCAgICAgICAgdmFyIHBhY2sgPSBkMy5sYXlvdXQucGFjaygpXG5cdCAgICAgICAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAtYS5uYW1lLmxlbmd0aCAtIGIubmFtZS5sZW5ndGg7XG5cdCAgICAgICAgICAgIC8vIHZhciB0aHJlc2hvbGQgPSAxMDtcblx0ICAgICAgICAgICAgLy8gaWYgKChhLnZhbHVlID4gdGhyZXNob2xkKSAmJiAoYi52YWx1ZSA+IHRocmVzaG9sZCkpIHtcblx0ICAgICAgICAgICAgLy8gICAgIHJldHVybiAoYS52YWx1ZSAtIGIudmFsdWUpO1xuXHQgICAgICAgICAgICAvLyB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvLyAgICAgcmV0dXJuIDE7XG5cdCAgICAgICAgICAgIC8vIH1cblx0ICAgICAgICB9KVxuXHQgICAgICAgICAgICAuc2l6ZShbdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdKVxuXHQgICAgICAgICAgICAucGFkZGluZyg1KTtcblx0ICAgICAgICB2YXIgbGF5b3V0Tm9kZXMgPSBwYWNrLm5vZGVzKHsgY2hpbGRyZW46IGRhdGEgfSlcblx0ICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gIWQuY2hpbGRyZW47IH0pOyAvLyBSZW1vdmUgdGhlIHJvb3Qgbm9kZSBhcyB0aGUgaGllcmFyY2hpY2FsIG5hdHVyZSBpcyByZW1vdmVkLiBcblx0ICAgICAgICBsYXlvdXROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnJhZGl1cyA9IGQucjsgfSk7XG5cdCAgICAgICAgdmFyIG5vZGVzU2VsZWN0aW9uID0gdGhpcy5zdmdcblx0ICAgICAgICAgICAgLnNlbGVjdEFsbChcIi5ub2RlXCIpXG5cdCAgICAgICAgICAgIC5kYXRhKGxheW91dE5vZGVzKVxuXHQgICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG5cdCAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJub2RlXCIpXG5cdCAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zbGF0ZU5vZGVUb0JvcmRlcik7XG5cdCAgICAgICAgdGhpcy5hZGRUaXRsZShub2Rlc1NlbGVjdGlvbik7XG5cdCAgICAgICAgdGhpcy5hZGRDaXJjbGUobm9kZXNTZWxlY3Rpb24pO1xuXHQgICAgICAgIHRoaXMuYWRkTGFiZWwobm9kZXNTZWxlY3Rpb24pO1xuXHQgICAgICAgIHRoaXMudHJhbnNsYXRlVG9DZW50ZXIobm9kZXNTZWxlY3Rpb24pO1xuXHQgICAgfTtcblx0ICAgIE5vZGVIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZS50cmFuc2xhdGVUb0NlbnRlciA9IGZ1bmN0aW9uIChub2Rlc1NlbGVjdGlvbikge1xuXHQgICAgICAgIG5vZGVzU2VsZWN0aW9uLnRyYW5zaXRpb24oKVxuXHQgICAgICAgICAgICAuZHVyYXRpb24oMjAwMClcblx0ICAgICAgICAgICAgLmVhc2UoXCJjdWJpYy1pbi1vdXRcIilcblx0ICAgICAgICAgICAgLmRlbGF5KGZ1bmN0aW9uIChkLCBpKSB7IHJldHVybiBpICogMjAgKiBNYXRoLnJhbmRvbSgpOyB9KVxuXHQgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIiwgXCIgKyBkLnkgKyBcIilcIjtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICBOb2RlSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUuYWRkQ2lyY2xlID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuXHQgICAgICAgIHNlbGVjdGlvbi5hcHBlbmQoXCJjaXJjbGVcIilcblx0ICAgICAgICAgICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnI7IH0pXG5cdCAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24gKGQsIGkpIHsgcmV0dXJuIFwibm9kZS1jb2xvci1cIiArICgoaSAlIDYpICsgMSk7IH0pO1xuXHQgICAgfTtcblx0ICAgIE5vZGVIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZS5hZGRUaXRsZSA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcblx0ICAgICAgICBzZWxlY3Rpb24uYXBwZW5kKFwidGl0bGVcIilcblx0ICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSArIFwiOiBcIiArIGQudmFsdWU7IH0pO1xuXHQgICAgfTtcblx0ICAgIE5vZGVIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZS5hZGRMYWJlbCA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcblx0ICAgICAgICAvLyBBIGZvcmVpZ25PamVjdCBpcyBhZGRlZCBoZXJlIGluc3RlYWQgb2YganVzdCB1c2luZyBTVkcgdGV4dC4gXG5cdCAgICAgICAgLy8gU1ZHIHRleHQgZG9lcyBub3Qgc3VwcG9ydCB3b3JkIHdyYXAgaW4gYW55IGNsZWFuIHdheSBhdGxlYXN0LiBcblx0ICAgICAgICAvLyBVc2luZyBmb3JlaWduT2JqZWN0IGRpdiBhbmQgcCdzIGNhbiBiZSBpbnNlcnRlZCBcblx0ICAgICAgICAvLyBhbmQgQ1NTIGNhbiBlbnN1cmUgdGhlIGFyZSBwbGFjZWQgcHJvcGVybHkuIFxuXHQgICAgICAgIHNlbGVjdGlvbi5hcHBlbmQoXCJmb3JlaWduT2JqZWN0XCIpXG5cdCAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuciAqIDI7IH0pXG5cdCAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnIgKiAyOyB9KVxuXHQgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gKFwidHJhbnNsYXRlKFwiICsgLWQuciArIFwiLFwiICsgLWQuciArIFwiKVwiKTsgfSlcblx0ICAgICAgICAgICAgLmFwcGVuZChcInhodG1sOmRpdlwiKVxuXHQgICAgICAgICAgICAuYXBwZW5kKFwieGh0bWw6cFwiKVxuXHQgICAgICAgICAgICAuaHRtbChmdW5jdGlvbiAoZCkgeyByZXR1cm4gdXRpbHNfMS5zaG9ydGVuVG9XaXRoaW5SYWRpdXMoZC5yLCBkLm5hbWUpOyB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gTm9kZUhpZXJhcmNoeUVsZW1lbnQ7XG5cdH0oYmFzZV9lbGVtZW50XzEuQmFzZUVsZW1lbnQpKTtcblx0ZXhwb3J0cy5Ob2RlSGllcmFyY2h5RWxlbWVudCA9IE5vZGVIaWVyYXJjaHlFbGVtZW50O1xuXG5cbi8qKiovIH0sXG4vKiAyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBkMyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIGVsZW1lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0dmFyIHJlcG9zaXRvcmllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdHZhciBWaXN1YWxpemVyID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFZpc3VhbGl6ZXIoX21hbmFnZXIsIGNvbmZpZykge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdGhpcy5fbWFuYWdlciA9IF9tYW5hZ2VyO1xuXHQgICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHQgICAgICAgIHRoaXMub25TZWxlY3RvckNoYW5nZWQgPSBmdW5jdGlvbiAocHJpbWFyeSwgc2Vjb25kYXJ5KSB7XG5cdCAgICAgICAgICAgIGlmIChfdGhpcy5fbm9kZUhpZXJhcmNoeSkge1xuXHQgICAgICAgICAgICAgICAgX3RoaXMuX25vZGVIaWVyYXJjaHkuY2xlYW4oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBfdGhpcy5zZXRJc0xvYWRpbmcodHJ1ZSk7XG5cdCAgICAgICAgICAgIF90aGlzLl9yZXBvc2l0b3J5LmdldEdyb3VwcyhwcmltYXJ5LCBzZWNvbmRhcnkpXG5cdCAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZ3JvdXBzKSB7XG5cdCAgICAgICAgICAgICAgICBfdGhpcy5zZXREYXRhKGdyb3Vwcyk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdGhpcy5fcmVwb3NpdG9yeSA9IG5ldyByZXBvc2l0b3JpZXNfMS5Tb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5KCk7XG5cdCAgICB9XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlzdWFsaXplci5wcm90b3R5cGUsIFwidGFyZ2V0SWRcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcudGFyZ2V0SWQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy50YXJnZXRJZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gXCIudmlzdWFsaXplclwiO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdCAgICAgKiBEcmF3cyB0aGUgYm9hcmQgYW5kIGluaXRpYWxpc2VkIHJlbGF0ZWQgY29tcG9uZW50cy5cblx0ICAgICAqIERyYXcgaXMgZGVmaW5lZCBlbHNld2hlcmUgYXMgaXQgZW5zdXJlcyB0aGUgY2xhc3MgY2FuIGJlIGNvbnN0cnVjdGVkIHByaW9yIHRvIGFjdHVhbGx5IGJlIHNob3duLlxuXHQgICAgICogZHJhdygpIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIHNldERhdGEgdG8gc2hvdyBsb2FkaW5nIHdoaWxlIGRhdGEgaXMgYmVpbmcgZmV0Y2hlZFxuXHQgICAgICogKi9cblx0ICAgIFZpc3VhbGl6ZXIucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB0aGlzLl9yZXBvc2l0b3J5LmdldFNlbGVjdG9ycygpLnRoZW4oZnVuY3Rpb24gKHNlbGVjdG9ycykge1xuXHQgICAgICAgICAgICBpZiAoIXNlbGVjdG9ycyB8fCBzZWxlY3RvcnMubGVuZ3RoID09IDApIHtcblx0ICAgICAgICAgICAgICAgIGxvZy5lcnJvcihcIk5vIHNlbGVjdG9ycyBmb3VuZFwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBfdGhpcy5vblNlbGVjdG9yQ2hhbmdlZCh7IHF1ZXJ5OiBzZWxlY3RvcnNbMF0ucXVlcnkgfSwgeyBxdWVyeTogc2VsZWN0b3JzWzBdLmNoaWxkcmVuWzBdLnF1ZXJ5IH0pO1xuXHQgICAgICAgICAgICBfdGhpcy5fbWFuYWdlci5zZXRTZWxlY3RvcnMoc2VsZWN0b3JzKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB2YXIgdGFyZ2V0ID0gZDMuc2VsZWN0KHRoaXMudGFyZ2V0SWQpO1xuXHQgICAgICAgIHRoaXMuX3N2ZyA9IHRhcmdldC5hcHBlbmQoXCJzdmdcIilcblx0ICAgICAgICAgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAwIFwiICsgJCh0aGlzLnRhcmdldElkKS53aWR0aCgpICsgXCIgXCIgKyAkKHRoaXMudGFyZ2V0SWQpLmhlaWdodCgpKTtcblx0ICAgICAgICB0aGlzLl9sb2FkZXIgPSBuZXcgZWxlbWVudHNfMS5TdGFuZGFyZExvYWRlcih0aGlzLl9zdmcpO1xuXHQgICAgICAgIHRoaXMuc2V0SXNMb2FkaW5nKHRydWUpO1xuXHQgICAgICAgIHZhciBjb25maWcgPSB7XG5cdCAgICAgICAgICAgIG1pbmltdW1WYWx1ZTogMlxuXHQgICAgICAgIH07XG5cdCAgICAgICAgLy8gQm9vdHN0cmFwIHdpdGggZGVmYXVsdCBkYXRhXG5cdCAgICAgICAgdGhpcy5fbWFuYWdlci5zZXRPblNlbGVjdG9yc0NhbGxiYWNrKHRoaXMub25TZWxlY3RvckNoYW5nZWQpO1xuXHQgICAgICAgIHRoaXMuX25vZGVIaWVyYXJjaHkgPSBuZXcgZWxlbWVudHNfMS5Ob2RlSGllcmFyY2h5RWxlbWVudCh0aGlzLl9zdmcsIGNvbmZpZyk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBTZXRzIGRhdGEgYW5kIHNob3dzIGl0IG9uIHRoZSBzY3JlZW4uXG5cdCAgICAgKiAgQHBhcmFtIHtib29sZWFufSBpc0xvYWRpbmdcblx0ICAgICAqL1xuXHQgICAgVmlzdWFsaXplci5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLl9ub2RlSGllcmFyY2h5KSB7XG5cdCAgICAgICAgICAgIC8vIElmIHRoZSBfbm9kZUhpZXJhcmNoeSBpcyBub3QgY3JlYXRlZCBkcmF3IGhhcyBub3QgYmVlbiBjYWxsZWRcblx0ICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc2V0SXNMb2FkaW5nKGZhbHNlKTtcblx0ICAgICAgICB0aGlzLl9ub2RlSGllcmFyY2h5LmRhdGEgPSBkYXRhO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogU2V0IHdoZXRoZXIgb3Igbm90IGEgbG9hZGVyIHNob3VsZCBiZSBzaG93bi5cblx0ICAgICAqICBAcGFyYW0ge2Jvb2xlYW59IGlzTG9hZGluZ1xuXHQgICAgICovXG5cdCAgICBWaXN1YWxpemVyLnByb3RvdHlwZS5zZXRJc0xvYWRpbmcgPSBmdW5jdGlvbiAoaXNMb2FkaW5nKSB7XG5cdCAgICAgICAgaWYgKGlzTG9hZGluZykge1xuXHQgICAgICAgICAgICB0aGlzLl9sb2FkZXIuc3RhcnRMb2FkZXIoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xvYWRlci5zdG9wTG9hZGVyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBWaXN1YWxpemVyO1xuXHR9KCkpO1xuXHRleHBvcnRzLlZpc3VhbGl6ZXIgPSBWaXN1YWxpemVyO1xuXG5cbi8qKiovIH0sXG4vKiAyNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcblx0ICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcblx0fVxuXHRfX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KSk7XG5cblxuLyoqKi8gfSxcbi8qIDI2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblx0dmFyIGxvZ01hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgdXRpbHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBsb2cgPSBsb2dNYW5hZ2VyLmdldExvZ2dlcihcIm1vdmllLWxvY2F0aW9uLXJlcG9cIik7XG5cdHZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0LyoqXG5cdCAqIFRoZSBJbk1lbW9yeUZpbG1Mb2NhdGlvbiByZXBvc2l0b3J5IGZldGNoZXMgdGhlIGVudGlyZSBkYXRhIHNldCB1cCBmcm9udCBhbmQgc3RvcmVzIGl0IGluIG1lbW9yeS5cblx0ICogRm9yIHNtYWxsZXIgZGF0YSBzZXRzIHRoaXMgaXMgc3VmZmljaWVudCwgYnV0IGZvciBsYXJnZXIgaXQgaXMgbm90XG5cdCAqL1xuXHR2YXIgU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5KCkge1xuXHQgICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG5cdCAgICAgICAgdGhpcy51cmwgPSAnaHR0cHM6Ly9kYXRhLnNmZ292Lm9yZy9yZXNvdXJjZS93d211LWdtemMuanNvbic7XG5cdCAgICB9XG5cdCAgICBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5LnByb3RvdHlwZS5nZXRHcm91cHMgPSBmdW5jdGlvbiAocHJpbWFyeSwgc2Vjb25kYXJ5KSB7XG5cdCAgICAgICAgLy8gQSBtYXBwZXIgaXMgY3JlYXRlZC4gSXQgY29udmVydHMgdGhlIHJlc3VsdCBmcm9tIHRoZSBhcGkgdG8gYW4gYXJyYXkgb2YgSUdyb3VwXG5cdCAgICAgICAgdmFyIG1hcHBlciA9IHV0aWxzXzEuZ3JvdXBNYXBwZXJGYWN0b3J5KHByaW1hcnkucXVlcnksIFwiQ09VTlRfXCIgKyBzZWNvbmRhcnkucXVlcnkpO1xuXHQgICAgICAgIC8vIElmIG5laXRoZXIgc2VsZWN0b3IgaXMgdGhlIGxvY2F0aW9uIHdlIG5lZWQgYSBtb3JlIGFkdmFuY2VkIHF1ZXJ5IGFzIHdlIHdvdWxkIG90aGVyIHdpc2UgZ2V0IFxuXHQgICAgICAgIC8vIHZlcnkgbWlzbGVhZGluZyByZXN1bHRzIChvciBzaW1wbHkgcGxhaW4gd3JvbmcgcmVzdWx0cylcblx0ICAgICAgICAvLyBlLmcuIGlmIHByaW1hcnkgPSBwcm9kdWN0aW9uX2NvbXBhbnkgYW5kIHNlY29uZGFyeSA9IHdyaXRlciBpdCB3aWxsIHNob3cgdGhlIG51bWJlciBvZiBsb2NhdGlvbnMgXG5cdCAgICAgICAgLy8gdGhhdCBwcm9kdWN0aW9uIGNvbXBhbnkgaGFzIHVzZWQgdGhhdCB3cml0ZXIgbm90IGJhc2VkIG9uIG51bWJlciBvZiBmaWxtcyBcblx0ICAgICAgICBpZiAocHJpbWFyeS5xdWVyeSAhPT0gXCJsb2NhdGlvbnNcIiAmJiBzZWNvbmRhcnkucXVlcnkgIT09IFwibG9jYXRpb25zXCIpIHtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2godGhpcy51cmwgKyBcIj8kZ3JvdXA9XCIgKyBwcmltYXJ5LnF1ZXJ5ICsgXCImJHNlbGVjdD1cIiArIHByaW1hcnkucXVlcnkgKyBcIixDT1VOVChcIiArIHNlY29uZGFyeS5xdWVyeSArIFwiKVwiKVxuXHQgICAgICAgICAgICAudGhlbihtYXBwZXIpO1xuXHQgICAgfTtcblx0ICAgIFNvZGFGaWxtTG9jYXRpb1JlcG9zaXRvcnkucHJvdG90eXBlLmdldEF2YW5jZWRHcm91cHMgPSBmdW5jdGlvbiAocHJpbWFyeSwgc2Vjb25kYXJ5LCBtYXBwZXIpIHtcblx0ICAgICAgICB2YXIgcXVlcnkgPSBcIlNFTEVDVCBcIiArIHByaW1hcnkucXVlcnkgKyBcIiwgY291bnQoKikgXFxuICAgICAgICAgICAgICAgICAgICAgR1JPVVAgQlkgXCIgKyBzZWNvbmRhcnkucXVlcnkgKyBcIiwgXCIgKyBwcmltYXJ5LnF1ZXJ5ICsgXCIgfD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VMRUNUIFwiICsgcHJpbWFyeS5xdWVyeSArIFwiLCBDT1VOVCgqKSBBUyBjb3VudCBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR1JPVVAgQlkgXCIgKyBwcmltYXJ5LnF1ZXJ5O1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZldGNoKHRoaXMudXJsICsgXCI/JHF1ZXJ5XCIgKyBxdWVyeSlcblx0ICAgICAgICAgICAgLnRoZW4obWFwcGVyKTtcblx0ICAgIH07XG5cdCAgICBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5LnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uIChxdWVyeSkge1xuXHQgICAgICAgIHJldHVybiBmZXRjaChxdWVyeSlcblx0ICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZS5qc29uKCk7IH0pO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogR2V0cyB0aGUgcG9zc2libGUgc2VsZWN0b3JzLlxuXHQgICAgICogVGhlc2UgYXJlIGhhcmRjb2RlZCBmb3Igbm93LCBidXQgc2hvdWxkIHByZWZlcmFibHkgYmUgZmV0Y2hlZCBmcm9tIHRoZSBBUElcblx0ICAgICAqL1xuXHQgICAgU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeS5wcm90b3R5cGUuZ2V0U2VsZWN0b3JzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciB0aXRsZVNlbGVjdG9yID0ge1xuXHQgICAgICAgICAgICBsYWJlbDogXCJNb3ZpZVwiLFxuXHQgICAgICAgICAgICBxdWVyeTogXCJ0aXRsZVwiXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB2YXIgbG9jYXRpb25zU2VsZWN0b3IgPSB7XG5cdCAgICAgICAgICAgIGxhYmVsOiBcIkxvY2F0aW9uc1wiLFxuXHQgICAgICAgICAgICBxdWVyeTogXCJsb2NhdGlvbnNcIlxuXHQgICAgICAgIH07XG5cdCAgICAgICAgdmFyIHdyaXRlclNlbGVjdG9yID0ge1xuXHQgICAgICAgICAgICBsYWJlbDogXCJXcml0ZXJcIixcblx0ICAgICAgICAgICAgcXVlcnk6IFwid3JpdGVyXCJcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHZhciBkaXJlY3RvclNlbGVjdG9yID0ge1xuXHQgICAgICAgICAgICBsYWJlbDogXCJEaXJlY3RvclwiLFxuXHQgICAgICAgICAgICBxdWVyeTogXCJkaXJlY3RvclwiXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB2YXIgcHJvZHVjdGlvbkNvbXBhbnkgPSB7XG5cdCAgICAgICAgICAgIGxhYmVsOiBcIlByb2R1Y3Rpb24gQ29tcGFueVwiLFxuXHQgICAgICAgICAgICBxdWVyeTogXCJwcm9kdWN0aW9uX2NvbXBhbnlcIlxuXHQgICAgICAgIH07XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSBbXG5cdCAgICAgICAgICAgICAgICAkLmV4dGVuZCh0aXRsZVNlbGVjdG9yLCB7IGNoaWxkcmVuOiBbbG9jYXRpb25zU2VsZWN0b3JdIH0pLFxuXHQgICAgICAgICAgICAgICAgJC5leHRlbmQobG9jYXRpb25zU2VsZWN0b3IsIHsgY2hpbGRyZW46IFt0aXRsZVNlbGVjdG9yXSB9KSxcblx0ICAgICAgICAgICAgICAgICQuZXh0ZW5kKHdyaXRlclNlbGVjdG9yLCB7IGNoaWxkcmVuOiBbdGl0bGVTZWxlY3RvciwgbG9jYXRpb25zU2VsZWN0b3IsIGRpcmVjdG9yU2VsZWN0b3IsIHByb2R1Y3Rpb25Db21wYW55XSB9KSxcblx0ICAgICAgICAgICAgICAgICQuZXh0ZW5kKGRpcmVjdG9yU2VsZWN0b3IsIHsgY2hpbGRyZW46IFt0aXRsZVNlbGVjdG9yLCBsb2NhdGlvbnNTZWxlY3Rvciwgd3JpdGVyU2VsZWN0b3IsIHByb2R1Y3Rpb25Db21wYW55XSB9KSxcblx0ICAgICAgICAgICAgICAgICQuZXh0ZW5kKHByb2R1Y3Rpb25Db21wYW55LCB7IGNoaWxkcmVuOiBbdGl0bGVTZWxlY3RvciwgbG9jYXRpb25zU2VsZWN0b3IsIHdyaXRlclNlbGVjdG9yLCBkaXJlY3RvclNlbGVjdG9yXSB9KSxcblx0ICAgICAgICAgICAgXTtcblx0ICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeTtcblx0fSgpKTtcblx0ZXhwb3J0cy5Tb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5ID0gU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeTtcblxuXG4vKioqLyB9LFxuLyogMjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRleHBvcnRzLmdyb3VwTWFwcGVyRmFjdG9yeSA9IGZ1bmN0aW9uIChuYW1lTGFiZWwsIHZhbHVlTGFiZWwpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudHMpIHtcblx0ICAgICAgICByZXR1cm4gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbGVtKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICBuYW1lOiBlbGVtW25hbWVMYWJlbF0sXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogK2VsZW1bdmFsdWVMYWJlbF1cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHRha2VzIHRoZSByYWRpdXMgb2YgdGhlIGNpcmNsZSBhbmQgdGhlIHRleHQgYW5kIGF0dGVtcHRzIHRvXG5cdCAqIHNob3J0ZW4gdGhlIHRleHQgc3VjaCB0aGF0IGl0IGZpdHMgd2l0aGluIHRoZSBjaXJjbGUuXG5cdCAqIFRoZSBtZXRob2QgY291bGQgdXNlIGFuIG92ZXJoYXVsIGFuZCB0YWtlIHRoZSBmb250IHNpemUgYXMgaW5wdXQuXG5cdCAqIE9yIGJldHRlciBpdCBzaG91bGQgdHJ5IGFuZCBjYWxjdWxhdGUgdGhlIHNpemUgYW5kIHRoZW4gZml0IHdvcmRzIGludG8gdG8gZWFjaCBsaW5lXG5cdCAqIHN1Y2ggdGhhdCB0aGV5IGZvcm0gYSBjaXJjbGUuXG5cdCAqL1xuXHRleHBvcnRzLnNob3J0ZW5Ub1dpdGhpblJhZGl1cyA9IGZ1bmN0aW9uIChyYWRpdXMsIHRleHQpIHtcblx0ICAgIHZhciBtYXhXaWR0aCA9IHJhZGl1cyAvIDMuMTtcblx0ICAgIHZhciBsaW5lcyA9IHJhZGl1cyAvIDEwO1xuXHQgICAgdGV4dCA9IHRleHQuc3BsaXQoL1xccysvZykubWFwKGZ1bmN0aW9uIChzKSB7XG5cdCAgICAgICAgaWYgKHMubGVuZ3RoID49IG1heFdpZHRoKSB7XG5cdCAgICAgICAgICAgIHZhciBtYXJnaW4gPSAyO1xuXHQgICAgICAgICAgICByZXR1cm4gcy5zdWJzdHIoMCwgbWF4V2lkdGggLSBtYXJnaW4pICtcblx0ICAgICAgICAgICAgICAgIFwiLTxicj5cIiArXG5cdCAgICAgICAgICAgICAgICBzLnN1YnN0cihtYXhXaWR0aCAtIG1hcmdpbiArIDEsIHMubGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHM7XG5cdCAgICB9KS5qb2luKFwiIFwiKTtcblx0ICAgIGlmICh0ZXh0ICYmIHRleHQubGVuZ3RoID4gbWF4V2lkdGggKiBsaW5lcykge1xuXHQgICAgICAgIHZhciBzdWJzdHIgPSB0ZXh0LnN1YnN0cigwLCBtYXhXaWR0aCAtIDMpO1xuXHQgICAgICAgIGlmIChzdWJzdHIubGVuZ3RoIDwgNSkge1xuXHQgICAgICAgICAgICByZXR1cm4gXCJcIjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHN1YnN0ciArIFwiJmhlbGxpcDtcIjtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0ZXh0O1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGV4cG9ydHMudHJhbnNsYXRlVG9Cb3JkZXJGYWN0b3J5ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoZCkge1xuXHQgICAgICAgIHZhciBjeCA9IHdpZHRoIC8gMjtcblx0ICAgICAgICB2YXIgY3kgPSBoZWlnaHQgLyAyO1xuXHQgICAgICAgIHZhciB4Q2VudGVyRGlzdGFuY2UgPSAoZC54IC0gY3gpO1xuXHQgICAgICAgIHZhciB5Q2VudGVyRGlzdGFuY2UgPSAoZC55IC0gY3kpO1xuXHQgICAgICAgIHZhciBjbG9zZXRzWEJvcmRlciA9IHhDZW50ZXJEaXN0YW5jZSA8IDAgPyAwIDogd2lkdGg7XG5cdCAgICAgICAgdmFyIGNsb3NldHNZQm9yZGVyID0geUNlbnRlckRpc3RhbmNlIDwgMCA/IDAgOiBoZWlnaHQ7XG5cdCAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyAoaGVpZ2h0ICsgZC5yKSArIFwiKVwiO1xuXHQgICAgfTtcblx0fTtcblxuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBidW5kbGUubWluLmpzXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCAwYWE1OWUzYmJhZjkzODdhZjgyMFxuICoqLyIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4xLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOS0yMlQyMjozMFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0fVxuXG5cdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRcdHJlc29sdmUuY2FsbCggdW5kZWZpbmVkLCB2YWx1ZSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5jYWxsKCB1bmRlZmluZWQsIHZhbHVlICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSxcblx0XHR2YWwgPSAwO1xuXG5cdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRpZiAoIGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0aSA9IDQ7XG5cblx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHR9IGVsc2Uge1xuXHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuXHR2YXIgdmFsLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdGlmICggZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHR2YWwgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpWyBuYW1lIF07XG5cdH1cblxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHJhZigpIHtcblx0aWYgKCB0aW1lcklkICkge1xuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJhZiApO1xuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmIG9yIGlmIGRvY3VtZW50IGlzIGhpZGRlblxuXHRpZiAoIGpRdWVyeS5meC5vZmYgfHwgZG9jdW1lbnQuaGlkZGVuICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCByYWYgKSA6XG5cdFx0XHR3aW5kb3cuc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aWYgKCB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKCB0aW1lcklkICk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcblx0fVxuXG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLCByZWN0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGVsZW1lbnQgaXMgbm90IGhpZGRlbiAoZGlzcGxheTogbm9uZSlcblx0XHRpZiAoIHJlY3Qud2lkdGggfHwgcmVjdC5oZWlnaHQgKSB7XG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0cmV0dXJuIHJlY3Q7XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0bGVmdDogcGFyZW50T2Zmc2V0LmxlZnQgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2pxdWVyeS9kaXN0L2pxdWVyeS5qc1xuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXG4qIGxvZ2xldmVsIC0gaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsXG4qXG4qIENvcHlyaWdodCAoYykgMjAxMyBUaW0gUGVycnlcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuKi9cbihmdW5jdGlvbiAocm9vdCwgZGVmaW5pdGlvbikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKGRlZmluaXRpb24pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5sb2cgPSBkZWZpbml0aW9uKCk7XG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuICAgIHZhciB1bmRlZmluZWRUeXBlID0gXCJ1bmRlZmluZWRcIjtcblxuICAgIGZ1bmN0aW9uIHJlYWxNZXRob2QobWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gV2UgY2FuJ3QgYnVpbGQgYSByZWFsIG1ldGhvZCB3aXRob3V0IGEgY29uc29sZSB0byBsb2cgdG9cbiAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlW21ldGhvZE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsIG1ldGhvZE5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGUubG9nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsICdsb2cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub29wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmluZE1ldGhvZChvYmosIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9ialttZXRob2ROYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QuYmluZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5iaW5kKG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKG1ldGhvZCwgb2JqKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KG1ldGhvZCwgW29iaiwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRoZXNlIHByaXZhdGUgZnVuY3Rpb25zIGFsd2F5cyBuZWVkIGB0aGlzYCB0byBiZSBzZXQgcHJvcGVybHlcblxuICAgIGZ1bmN0aW9uIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMsIGxldmVsLCBsb2dnZXJOYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUxvZ2dpbmdNZXRob2RzKGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9nTWV0aG9kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSBsb2dNZXRob2RzW2ldO1xuICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IChpIDwgbGV2ZWwpID9cbiAgICAgICAgICAgICAgICBub29wIDpcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdE1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgcmV0dXJuIHJlYWxNZXRob2QobWV0aG9kTmFtZSkgfHxcbiAgICAgICAgICAgICAgIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICB2YXIgbG9nTWV0aG9kcyA9IFtcbiAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICBcImRlYnVnXCIsXG4gICAgICAgIFwiaW5mb1wiLFxuICAgICAgICBcIndhcm5cIixcbiAgICAgICAgXCJlcnJvclwiXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIExvZ2dlcihuYW1lLCBkZWZhdWx0TGV2ZWwsIGZhY3RvcnkpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBjdXJyZW50TGV2ZWw7XG4gICAgICB2YXIgc3RvcmFnZUtleSA9IFwibG9nbGV2ZWxcIjtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHN0b3JhZ2VLZXkgKz0gXCI6XCIgKyBuYW1lO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsTnVtKSB7XG4gICAgICAgICAgdmFyIGxldmVsTmFtZSA9IChsb2dNZXRob2RzW2xldmVsTnVtXSB8fCAnc2lsZW50JykudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XSA9IGxldmVsTmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPVxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiICsgbGV2ZWxOYW1lICsgXCI7XCI7XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRMZXZlbCgpIHtcbiAgICAgICAgICB2YXIgc3RvcmVkTGV2ZWw7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV07XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZWRMZXZlbCA9PT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IHdpbmRvdy5kb2N1bWVudC5jb29raWU7XG4gICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjb29raWUuaW5kZXhPZihcbiAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIik7XG4gICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IC9eKFteO10rKS8uZXhlYyhjb29raWUuc2xpY2UobG9jYXRpb24pKVsxXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZSBzdG9yZWQgbGV2ZWwgaXMgbm90IHZhbGlkLCB0cmVhdCBpdCBhcyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG4gICAgICAgICAgaWYgKHNlbGYubGV2ZWxzW3N0b3JlZExldmVsXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHN0b3JlZExldmVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdG9yZWRMZXZlbDtcbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqXG4gICAgICAgKiBQdWJsaWMgQVBJXG4gICAgICAgKlxuICAgICAgICovXG5cbiAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxuICAgICAgICAgIFwiRVJST1JcIjogNCwgXCJTSUxFTlRcIjogNX07XG5cbiAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XG5cbiAgICAgIHNlbGYuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRMZXZlbDtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwsIHBlcnNpc3QpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcInN0cmluZ1wiICYmIHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgbGV2ZWwgPSBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJudW1iZXJcIiAmJiBsZXZlbCA+PSAwICYmIGxldmVsIDw9IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgICAgaWYgKHBlcnNpc3QgIT09IGZhbHNlKSB7ICAvLyBkZWZhdWx0cyB0byB0cnVlXG4gICAgICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmLCBsZXZlbCwgbmFtZSk7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSAmJiBsZXZlbCA8IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gY29uc29sZSBhdmFpbGFibGUgZm9yIGxvZ2dpbmdcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IFwibG9nLnNldExldmVsKCkgY2FsbGVkIHdpdGggaW52YWxpZCBsZXZlbDogXCIgKyBsZXZlbDtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNldERlZmF1bHRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgIGlmICghZ2V0UGVyc2lzdGVkTGV2ZWwoKSkge1xuICAgICAgICAgICAgICBzZWxmLnNldExldmVsKGxldmVsLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5UUkFDRSwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQsIHBlcnNpc3QpO1xuICAgICAgfTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIHRoZSByaWdodCBsZXZlbFxuICAgICAgdmFyIGluaXRpYWxMZXZlbCA9IGdldFBlcnNpc3RlZExldmVsKCk7XG4gICAgICBpZiAoaW5pdGlhbExldmVsID09IG51bGwpIHtcbiAgICAgICAgICBpbml0aWFsTGV2ZWwgPSBkZWZhdWx0TGV2ZWwgPT0gbnVsbCA/IFwiV0FSTlwiIDogZGVmYXVsdExldmVsO1xuICAgICAgfVxuICAgICAgc2VsZi5zZXRMZXZlbChpbml0aWFsTGV2ZWwsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqXG4gICAgICogUGFja2FnZS1sZXZlbCBBUElcbiAgICAgKlxuICAgICAqL1xuXG4gICAgdmFyIGRlZmF1bHRMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbiAgICB2YXIgX2xvZ2dlcnNCeU5hbWUgPSB7fTtcbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlciA9IGZ1bmN0aW9uIGdldExvZ2dlcihuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIiB8fCBuYW1lID09PSBcIlwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV07XG4gICAgICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICAgICAgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV0gPSBuZXcgTG9nZ2VyKFxuICAgICAgICAgICAgbmFtZSwgZGVmYXVsdExvZ2dlci5nZXRMZXZlbCgpLCBkZWZhdWx0TG9nZ2VyLm1ldGhvZEZhY3RvcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfTtcblxuICAgIC8vIEdyYWIgdGhlIGN1cnJlbnQgZ2xvYmFsIGxvZyB2YXJpYWJsZSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuICAgIHZhciBfbG9nID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpID8gd2luZG93LmxvZyA6IHVuZGVmaW5lZDtcbiAgICBkZWZhdWx0TG9nZ2VyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiZcbiAgICAgICAgICAgICAgIHdpbmRvdy5sb2cgPT09IGRlZmF1bHRMb2dnZXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2cgPSBfbG9nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xufSkpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vbG9nbGV2ZWwvbGliL2xvZ2xldmVsLmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiIWZ1bmN0aW9uKCkge1xuICB2YXIgZDMgPSB7XG4gICAgdmVyc2lvbjogXCIzLjUuMTdcIlxuICB9O1xuICB2YXIgZDNfYXJyYXlTbGljZSA9IFtdLnNsaWNlLCBkM19hcnJheSA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICByZXR1cm4gZDNfYXJyYXlTbGljZS5jYWxsKGxpc3QpO1xuICB9O1xuICB2YXIgZDNfZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50O1xuICBmdW5jdGlvbiBkM19kb2N1bWVudEVsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlICYmIChub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZS5kb2N1bWVudCB8fCBub2RlKS5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfd2luZG93KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSAmJiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCBub2RlLmRvY3VtZW50ICYmIG5vZGUgfHwgbm9kZS5kZWZhdWx0Vmlldyk7XG4gIH1cbiAgaWYgKGQzX2RvY3VtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIGQzX2FycmF5KGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jaGlsZE5vZGVzKVswXS5ub2RlVHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkM19hcnJheSA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICAgICAgdmFyIGkgPSBsaXN0Lmxlbmd0aCwgYXJyYXkgPSBuZXcgQXJyYXkoaSk7XG4gICAgICAgIHdoaWxlIChpLS0pIGFycmF5W2ldID0gbGlzdFtpXTtcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKCFEYXRlLm5vdykgRGF0ZS5ub3cgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gK25ldyBEYXRlKCk7XG4gIH07XG4gIGlmIChkM19kb2N1bWVudCkge1xuICAgIHRyeSB7XG4gICAgICBkM19kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLnN0eWxlLnNldFByb3BlcnR5KFwib3BhY2l0eVwiLCAwLCBcIlwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdmFyIGQzX2VsZW1lbnRfcHJvdG90eXBlID0gdGhpcy5FbGVtZW50LnByb3RvdHlwZSwgZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGUgPSBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGUsIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlTlMgPSBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGVOUywgZDNfc3R5bGVfcHJvdG90eXBlID0gdGhpcy5DU1NTdHlsZURlY2xhcmF0aW9uLnByb3RvdHlwZSwgZDNfc3R5bGVfc2V0UHJvcGVydHkgPSBkM19zdHlsZV9wcm90b3R5cGUuc2V0UHJvcGVydHk7XG4gICAgICBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgICBkM19lbGVtZW50X3NldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlICsgXCJcIik7XG4gICAgICB9O1xuICAgICAgZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMgPSBmdW5jdGlvbihzcGFjZSwgbG9jYWwsIHZhbHVlKSB7XG4gICAgICAgIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlTlMuY2FsbCh0aGlzLCBzcGFjZSwgbG9jYWwsIHZhbHVlICsgXCJcIik7XG4gICAgICB9O1xuICAgICAgZDNfc3R5bGVfcHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgICAgIGQzX3N0eWxlX3NldFByb3BlcnR5LmNhbGwodGhpcywgbmFtZSwgdmFsdWUgKyBcIlwiLCBwcmlvcml0eSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBkMy5hc2NlbmRpbmcgPSBkM19hc2NlbmRpbmc7XG4gIGZ1bmN0aW9uIGQzX2FzY2VuZGluZyhhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xuICB9XG4gIGQzLmRlc2NlbmRpbmcgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xuICB9O1xuICBkMy5taW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGEsIGI7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGEgPiBiKSBhID0gYjtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYSA+IGIpIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfTtcbiAgZDMubWF4ID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBiO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+PSBiKSB7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID4gYSkgYSA9IGI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPiBhKSBhID0gYjtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH07XG4gIGQzLmV4dGVudCA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgYiwgYztcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICBhID0gYyA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhID4gYikgYSA9IGI7XG4gICAgICAgIGlmIChjIDwgYikgYyA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGMgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuICAgICAgICBpZiAoYyA8IGIpIGMgPSBiO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWyBhLCBjIF07XG4gIH07XG4gIGZ1bmN0aW9uIGQzX251bWJlcih4KSB7XG4gICAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbiAgfVxuICBmdW5jdGlvbiBkM19udW1lcmljKHgpIHtcbiAgICByZXR1cm4gIWlzTmFOKHgpO1xuICB9XG4gIGQzLnN1bSA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIHMgPSAwLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBpID0gLTE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gK2FycmF5W2ldKSkgcyArPSBhO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9ICtmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpIHMgKz0gYTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG4gIH07XG4gIGQzLm1lYW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBzID0gMCwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgaSA9IC0xLCBqID0gbjtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkgcyArPSBhOyBlbHNlIC0tajtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSkgcyArPSBhOyBlbHNlIC0tajtcbiAgICB9XG4gICAgaWYgKGopIHJldHVybiBzIC8gajtcbiAgfTtcbiAgZDMucXVhbnRpbGUgPSBmdW5jdGlvbih2YWx1ZXMsIHApIHtcbiAgICB2YXIgSCA9ICh2YWx1ZXMubGVuZ3RoIC0gMSkgKiBwICsgMSwgaCA9IE1hdGguZmxvb3IoSCksIHYgPSArdmFsdWVzW2ggLSAxXSwgZSA9IEggLSBoO1xuICAgIHJldHVybiBlID8gdiArIGUgKiAodmFsdWVzW2hdIC0gdikgOiB2O1xuICB9O1xuICBkMy5tZWRpYW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBudW1iZXJzID0gW10sIG4gPSBhcnJheS5sZW5ndGgsIGEsIGkgPSAtMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkgbnVtYmVycy5wdXNoKGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSBudW1iZXJzLnB1c2goYSk7XG4gICAgfVxuICAgIGlmIChudW1iZXJzLmxlbmd0aCkgcmV0dXJuIGQzLnF1YW50aWxlKG51bWJlcnMuc29ydChkM19hc2NlbmRpbmcpLCAuNSk7XG4gIH07XG4gIGQzLnZhcmlhbmNlID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgbiA9IGFycmF5Lmxlbmd0aCwgbSA9IDAsIGEsIGQsIHMgPSAwLCBpID0gLTEsIGogPSAwO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGFycmF5W2ldKSkpIHtcbiAgICAgICAgICBkID0gYSAtIG07XG4gICAgICAgICAgbSArPSBkIC8gKytqO1xuICAgICAgICAgIHMgKz0gZCAqIChhIC0gbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSB7XG4gICAgICAgICAgZCA9IGEgLSBtO1xuICAgICAgICAgIG0gKz0gZCAvICsrajtcbiAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChqID4gMSkgcmV0dXJuIHMgLyAoaiAtIDEpO1xuICB9O1xuICBkMy5kZXZpYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IGQzLnZhcmlhbmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xuICB9O1xuICBmdW5jdGlvbiBkM19iaXNlY3Rvcihjb21wYXJlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGxvID0gMDtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSBoaSA9IGEubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7IGVsc2UgaGkgPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvO1xuICAgICAgfSxcbiAgICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBsbyA9IDA7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7IGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsbztcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBkM19iaXNlY3QgPSBkM19iaXNlY3RvcihkM19hc2NlbmRpbmcpO1xuICBkMy5iaXNlY3RMZWZ0ID0gZDNfYmlzZWN0LmxlZnQ7XG4gIGQzLmJpc2VjdCA9IGQzLmJpc2VjdFJpZ2h0ID0gZDNfYmlzZWN0LnJpZ2h0O1xuICBkMy5iaXNlY3RvciA9IGZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gZDNfYmlzZWN0b3IoZi5sZW5ndGggPT09IDEgPyBmdW5jdGlvbihkLCB4KSB7XG4gICAgICByZXR1cm4gZDNfYXNjZW5kaW5nKGYoZCksIHgpO1xuICAgIH0gOiBmKTtcbiAgfTtcbiAgZDMuc2h1ZmZsZSA9IGZ1bmN0aW9uKGFycmF5LCBpMCwgaTEpIHtcbiAgICBpZiAoKG0gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDMpIHtcbiAgICAgIGkxID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKG0gPCAyKSBpMCA9IDA7XG4gICAgfVxuICAgIHZhciBtID0gaTEgLSBpMCwgdCwgaTtcbiAgICB3aGlsZSAobSkge1xuICAgICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgICAgdCA9IGFycmF5W20gKyBpMF0sIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdLCBhcnJheVtpICsgaTBdID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9O1xuICBkMy5wZXJtdXRlID0gZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSBwZXJtdXRlc1tpXSA9IGFycmF5W2luZGV4ZXNbaV1dO1xuICAgIHJldHVybiBwZXJtdXRlcztcbiAgfTtcbiAgZDMucGFpcnMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciBpID0gMCwgbiA9IGFycmF5Lmxlbmd0aCAtIDEsIHAwLCBwMSA9IGFycmF5WzBdLCBwYWlycyA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgICB3aGlsZSAoaSA8IG4pIHBhaXJzW2ldID0gWyBwMCA9IHAxLCBwMSA9IGFycmF5WysraV0gXTtcbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG4gIGQzLnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCkge1xuICAgIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuICAgIGZvciAodmFyIGkgPSAtMSwgbSA9IGQzLm1pbihtYXRyaXgsIGQzX3RyYW5zcG9zZUxlbmd0aCksIHRyYW5zcG9zZSA9IG5ldyBBcnJheShtKTsgKytpIDwgbTsgKSB7XG4gICAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjsgKSB7XG4gICAgICAgIHJvd1tqXSA9IG1hdHJpeFtqXVtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zcG9zZTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNwb3NlTGVuZ3RoKGQpIHtcbiAgICByZXR1cm4gZC5sZW5ndGg7XG4gIH1cbiAgZDMuemlwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnRyYW5zcG9zZShhcmd1bWVudHMpO1xuICB9O1xuICBkMy5rZXlzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcbiAgZDMudmFsdWVzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuICBkMy5lbnRyaWVzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe1xuICAgICAga2V5OiBrZXksXG4gICAgICB2YWx1ZTogbWFwW2tleV1cbiAgICB9KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfTtcbiAgZDMubWVyZ2UgPSBmdW5jdGlvbihhcnJheXMpIHtcbiAgICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsIG0sIGkgPSAtMSwgaiA9IDAsIG1lcmdlZCwgYXJyYXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGogKz0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG4gICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICBhcnJheSA9IGFycmF5c1tuXTtcbiAgICAgIG0gPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgICAgbWVyZ2VkWy0tal0gPSBhcnJheVttXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfTtcbiAgdmFyIGFicyA9IE1hdGguYWJzO1xuICBkMy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgICBzdGVwID0gMTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICBzdG9wID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKChzdG9wIC0gc3RhcnQpIC8gc3RlcCA9PT0gSW5maW5pdHkpIHRocm93IG5ldyBFcnJvcihcImluZmluaXRlIHJhbmdlXCIpO1xuICAgIHZhciByYW5nZSA9IFtdLCBrID0gZDNfcmFuZ2VfaW50ZWdlclNjYWxlKGFicyhzdGVwKSksIGkgPSAtMSwgajtcbiAgICBzdGFydCAqPSBrLCBzdG9wICo9IGssIHN0ZXAgKj0gaztcbiAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgoaiA9IHN0YXJ0ICsgc3RlcCAqICsraSkgPiBzdG9wKSByYW5nZS5wdXNoKGogLyBrKTsgZWxzZSB3aGlsZSAoKGogPSBzdGFydCArIHN0ZXAgKiArK2kpIDwgc3RvcCkgcmFuZ2UucHVzaChqIC8gayk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuICBmdW5jdGlvbiBkM19yYW5nZV9pbnRlZ2VyU2NhbGUoeCkge1xuICAgIHZhciBrID0gMTtcbiAgICB3aGlsZSAoeCAqIGsgJSAxKSBrICo9IDEwO1xuICAgIHJldHVybiBrO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2NsYXNzKGN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0b3IucHJvdG90eXBlLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHByb3BlcnRpZXNba2V5XSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBkMy5tYXAgPSBmdW5jdGlvbihvYmplY3QsIGYpIHtcbiAgICB2YXIgbWFwID0gbmV3IGQzX01hcCgpO1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBkM19NYXApIHtcbiAgICAgIG9iamVjdC5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aCwgbztcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pOyBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYuY2FsbChvYmplY3QsIG8gPSBvYmplY3RbaV0sIGkpLCBvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfTWFwKCkge1xuICAgIHRoaXMuXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgdmFyIGQzX21hcF9wcm90byA9IFwiX19wcm90b19fXCIsIGQzX21hcF96ZXJvID0gXCJcXHgwMFwiO1xuICBkM19jbGFzcyhkM19NYXAsIHtcbiAgICBoYXM6IGQzX21hcF9oYXMsXG4gICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9bZDNfbWFwX2VzY2FwZShrZXkpXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX1tkM19tYXBfZXNjYXBlKGtleSldID0gdmFsdWU7XG4gICAgfSxcbiAgICByZW1vdmU6IGQzX21hcF9yZW1vdmUsXG4gICAga2V5czogZDNfbWFwX2tleXMsXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIHZhbHVlcy5wdXNoKHRoaXMuX1trZXldKTtcbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBlbnRyaWVzLnB1c2goe1xuICAgICAgICBrZXk6IGQzX21hcF91bmVzY2FwZShrZXkpLFxuICAgICAgICB2YWx1ZTogdGhpcy5fW2tleV1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgfSxcbiAgICBzaXplOiBkM19tYXBfc2l6ZSxcbiAgICBlbXB0eTogZDNfbWFwX2VtcHR5LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIGYuY2FsbCh0aGlzLCBkM19tYXBfdW5lc2NhcGUoa2V5KSwgdGhpcy5fW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGQzX21hcF9lc2NhcGUoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkgKz0gXCJcIikgPT09IGQzX21hcF9wcm90byB8fCBrZXlbMF0gPT09IGQzX21hcF96ZXJvID8gZDNfbWFwX3plcm8gKyBrZXkgOiBrZXk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX3VuZXNjYXBlKGtleSkge1xuICAgIHJldHVybiAoa2V5ICs9IFwiXCIpWzBdID09PSBkM19tYXBfemVybyA/IGtleS5zbGljZSgxKSA6IGtleTtcbiAgfVxuICBmdW5jdGlvbiBkM19tYXBfaGFzKGtleSkge1xuICAgIHJldHVybiBkM19tYXBfZXNjYXBlKGtleSkgaW4gdGhpcy5fO1xuICB9XG4gIGZ1bmN0aW9uIGQzX21hcF9yZW1vdmUoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkgPSBkM19tYXBfZXNjYXBlKGtleSkpIGluIHRoaXMuXyAmJiBkZWxldGUgdGhpcy5fW2tleV07XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX2tleXMoKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBrZXlzLnB1c2goZDNfbWFwX3VuZXNjYXBlKGtleSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX21hcF9zaXplKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX2VtcHR5KCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBkMy5uZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5lc3QgPSB7fSwga2V5cyA9IFtdLCBzb3J0S2V5cyA9IFtdLCBzb3J0VmFsdWVzLCByb2xsdXA7XG4gICAgZnVuY3Rpb24gbWFwKG1hcFR5cGUsIGFycmF5LCBkZXB0aCkge1xuICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gcm9sbHVwID8gcm9sbHVwLmNhbGwobmVzdCwgYXJyYXkpIDogc29ydFZhbHVlcyA/IGFycmF5LnNvcnQoc29ydFZhbHVlcykgOiBhcnJheTtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGtleSA9IGtleXNbZGVwdGgrK10sIGtleVZhbHVlLCBvYmplY3QsIHNldHRlciwgdmFsdWVzQnlLZXkgPSBuZXcgZDNfTWFwKCksIHZhbHVlcztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkob2JqZWN0ID0gYXJyYXlbaV0pKSkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKG9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbIG9iamVjdCBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1hcFR5cGUpIHtcbiAgICAgICAgb2JqZWN0ID0gbWFwVHlwZSgpO1xuICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihrZXlWYWx1ZSwgdmFsdWVzKSB7XG4gICAgICAgICAgb2JqZWN0LnNldChrZXlWYWx1ZSwgbWFwKG1hcFR5cGUsIHZhbHVlcywgZGVwdGgpKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdCA9IHt9O1xuICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihrZXlWYWx1ZSwgdmFsdWVzKSB7XG4gICAgICAgICAgb2JqZWN0W2tleVZhbHVlXSA9IG1hcChtYXBUeXBlLCB2YWx1ZXMsIGRlcHRoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhbHVlc0J5S2V5LmZvckVhY2goc2V0dGVyKTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgICAgdmFyIGFycmF5ID0gW10sIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCsrXTtcbiAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKGtleSwga2V5TWFwKSB7XG4gICAgICAgIGFycmF5LnB1c2goe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlczogZW50cmllcyhrZXlNYXAsIGRlcHRoKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvcnRLZXkgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTtcbiAgICAgIH0pIDogYXJyYXk7XG4gICAgfVxuICAgIG5lc3QubWFwID0gZnVuY3Rpb24oYXJyYXksIG1hcFR5cGUpIHtcbiAgICAgIHJldHVybiBtYXAobWFwVHlwZSwgYXJyYXksIDApO1xuICAgIH07XG4gICAgbmVzdC5lbnRyaWVzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgIHJldHVybiBlbnRyaWVzKG1hcChkMy5tYXAsIGFycmF5LCAwKSwgMCk7XG4gICAgfTtcbiAgICBuZXN0LmtleSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIGtleXMucHVzaChkKTtcbiAgICAgIHJldHVybiBuZXN0O1xuICAgIH07XG4gICAgbmVzdC5zb3J0S2V5cyA9IGZ1bmN0aW9uKG9yZGVyKSB7XG4gICAgICBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7XG4gICAgICByZXR1cm4gbmVzdDtcbiAgICB9O1xuICAgIG5lc3Quc29ydFZhbHVlcyA9IGZ1bmN0aW9uKG9yZGVyKSB7XG4gICAgICBzb3J0VmFsdWVzID0gb3JkZXI7XG4gICAgICByZXR1cm4gbmVzdDtcbiAgICB9O1xuICAgIG5lc3Qucm9sbHVwID0gZnVuY3Rpb24oZikge1xuICAgICAgcm9sbHVwID0gZjtcbiAgICAgIHJldHVybiBuZXN0O1xuICAgIH07XG4gICAgcmV0dXJuIG5lc3Q7XG4gIH07XG4gIGQzLnNldCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHNldCA9IG5ldyBkM19TZXQoKTtcbiAgICBpZiAoYXJyYXkpIGZvciAodmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoOyBpIDwgbjsgKytpKSBzZXQuYWRkKGFycmF5W2ldKTtcbiAgICByZXR1cm4gc2V0O1xuICB9O1xuICBmdW5jdGlvbiBkM19TZXQoKSB7XG4gICAgdGhpcy5fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICBkM19jbGFzcyhkM19TZXQsIHtcbiAgICBoYXM6IGQzX21hcF9oYXMsXG4gICAgYWRkOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHRoaXMuX1tkM19tYXBfZXNjYXBlKGtleSArPSBcIlwiKV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9LFxuICAgIHJlbW92ZTogZDNfbWFwX3JlbW92ZSxcbiAgICB2YWx1ZXM6IGQzX21hcF9rZXlzLFxuICAgIHNpemU6IGQzX21hcF9zaXplLFxuICAgIGVtcHR5OiBkM19tYXBfZW1wdHksXG4gICAgZm9yRWFjaDogZnVuY3Rpb24oZikge1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgZi5jYWxsKHRoaXMsIGQzX21hcF91bmVzY2FwZShrZXkpKTtcbiAgICB9XG4gIH0pO1xuICBkMy5iZWhhdmlvciA9IHt9O1xuICBmdW5jdGlvbiBkM19pZGVudGl0eShkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH1cbiAgZDMucmViaW5kID0gZnVuY3Rpb24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICB2YXIgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZXRob2Q7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRhcmdldFttZXRob2QgPSBhcmd1bWVudHNbaV1dID0gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBzb3VyY2VbbWV0aG9kXSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBtZXRob2QuYXBwbHkoc291cmNlLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBzb3VyY2UgPyB0YXJnZXQgOiB2YWx1ZTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3ZlbmRvclN5bWJvbChvYmplY3QsIG5hbWUpIHtcbiAgICBpZiAobmFtZSBpbiBvYmplY3QpIHJldHVybiBuYW1lO1xuICAgIG5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGQzX3ZlbmRvclByZWZpeGVzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHByZWZpeE5hbWUgPSBkM192ZW5kb3JQcmVmaXhlc1tpXSArIG5hbWU7XG4gICAgICBpZiAocHJlZml4TmFtZSBpbiBvYmplY3QpIHJldHVybiBwcmVmaXhOYW1lO1xuICAgIH1cbiAgfVxuICB2YXIgZDNfdmVuZG9yUHJlZml4ZXMgPSBbIFwid2Via2l0XCIsIFwibXNcIiwgXCJtb3pcIiwgXCJNb3pcIiwgXCJvXCIsIFwiT1wiIF07XG4gIGZ1bmN0aW9uIGQzX25vb3AoKSB7fVxuICBkMy5kaXNwYXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkaXNwYXRjaCA9IG5ldyBkM19kaXNwYXRjaCgpLCBpID0gLTEsIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpO1xuICAgIHJldHVybiBkaXNwYXRjaDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZGlzcGF0Y2goKSB7fVxuICBkM19kaXNwYXRjaC5wcm90b3R5cGUub24gPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIHZhciBpID0gdHlwZS5pbmRleE9mKFwiLlwiKSwgbmFtZSA9IFwiXCI7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgbmFtZSA9IHR5cGUuc2xpY2UoaSArIDEpO1xuICAgICAgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSk7XG4gICAgfVxuICAgIGlmICh0eXBlKSByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB0aGlzW3R5cGVdLm9uKG5hbWUpIDogdGhpc1t0eXBlXS5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIGlmIChsaXN0ZW5lciA9PSBudWxsKSBmb3IgKHR5cGUgaW4gdGhpcykge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhpc1t0eXBlXS5vbihuYW1lLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gW10sIGxpc3RlbmVyQnlOYW1lID0gbmV3IGQzX01hcCgpO1xuICAgIGZ1bmN0aW9uIGV2ZW50KCkge1xuICAgICAgdmFyIHogPSBsaXN0ZW5lcnMsIGkgPSAtMSwgbiA9IHoubGVuZ3RoLCBsO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChsID0geltpXS5vbikgbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGRpc3BhdGNoO1xuICAgIH1cbiAgICBldmVudC5vbiA9IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbCA9IGxpc3RlbmVyQnlOYW1lLmdldChuYW1lKSwgaTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGwgJiYgbC5vbjtcbiAgICAgIGlmIChsKSB7XG4gICAgICAgIGwub24gPSBudWxsO1xuICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoMCwgaSA9IGxpc3RlbmVycy5pbmRleE9mKGwpKS5jb25jYXQobGlzdGVuZXJzLnNsaWNlKGkgKyAxKSk7XG4gICAgICAgIGxpc3RlbmVyQnlOYW1lLnJlbW92ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChsaXN0ZW5lcikgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXJCeU5hbWUuc2V0KG5hbWUsIHtcbiAgICAgICAgb246IGxpc3RlbmVyXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gZGlzcGF0Y2g7XG4gICAgfTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbiAgZDMuZXZlbnQgPSBudWxsO1xuICBmdW5jdGlvbiBkM19ldmVudFByZXZlbnREZWZhdWx0KCkge1xuICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZXZlbnRTb3VyY2UoKSB7XG4gICAgdmFyIGUgPSBkMy5ldmVudCwgcztcbiAgICB3aGlsZSAocyA9IGUuc291cmNlRXZlbnQpIGUgPSBzO1xuICAgIHJldHVybiBlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2V2ZW50RGlzcGF0Y2godGFyZ2V0KSB7XG4gICAgdmFyIGRpc3BhdGNoID0gbmV3IGQzX2Rpc3BhdGNoKCksIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgZGlzcGF0Y2hbYXJndW1lbnRzW2ldXSA9IGQzX2Rpc3BhdGNoX2V2ZW50KGRpc3BhdGNoKTtcbiAgICBkaXNwYXRjaC5vZiA9IGZ1bmN0aW9uKHRoaXosIGFyZ3VtZW50eikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUxKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGUwID0gZTEuc291cmNlRXZlbnQgPSBkMy5ldmVudDtcbiAgICAgICAgICBlMS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgZDMuZXZlbnQgPSBlMTtcbiAgICAgICAgICBkaXNwYXRjaFtlMS50eXBlXS5hcHBseSh0aGl6LCBhcmd1bWVudHopO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGQzLmV2ZW50ID0gZTA7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gZGlzcGF0Y2g7XG4gIH1cbiAgZDMucmVxdW90ZSA9IGZ1bmN0aW9uKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKGQzX3JlcXVvdGVfcmUsIFwiXFxcXCQmXCIpO1xuICB9O1xuICB2YXIgZDNfcmVxdW90ZV9yZSA9IC9bXFxcXFxcXlxcJFxcKlxcK1xcP1xcfFxcW1xcXVxcKFxcKVxcLlxce1xcfV0vZztcbiAgdmFyIGQzX3N1YmNsYXNzID0ge30uX19wcm90b19fID8gZnVuY3Rpb24ob2JqZWN0LCBwcm90b3R5cGUpIHtcbiAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICB9IDogZnVuY3Rpb24ob2JqZWN0LCBwcm90b3R5cGUpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm90b3R5cGUpIG9iamVjdFtwcm9wZXJ0eV0gPSBwcm90b3R5cGVbcHJvcGVydHldO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb24oZ3JvdXBzKSB7XG4gICAgZDNfc3ViY2xhc3MoZ3JvdXBzLCBkM19zZWxlY3Rpb25Qcm90b3R5cGUpO1xuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgdmFyIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICByZXR1cm4gbi5xdWVyeVNlbGVjdG9yKHMpO1xuICB9LCBkM19zZWxlY3RBbGwgPSBmdW5jdGlvbihzLCBuKSB7XG4gICAgcmV0dXJuIG4ucXVlcnlTZWxlY3RvckFsbChzKTtcbiAgfSwgZDNfc2VsZWN0TWF0Y2hlcyA9IGZ1bmN0aW9uKG4sIHMpIHtcbiAgICB2YXIgZDNfc2VsZWN0TWF0Y2hlciA9IG4ubWF0Y2hlcyB8fCBuW2QzX3ZlbmRvclN5bWJvbChuLCBcIm1hdGNoZXNTZWxlY3RvclwiKV07XG4gICAgZDNfc2VsZWN0TWF0Y2hlcyA9IGZ1bmN0aW9uKG4sIHMpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVyLmNhbGwobiwgcyk7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2VsZWN0TWF0Y2hlcyhuLCBzKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBTaXp6bGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICAgIHJldHVybiBTaXp6bGUocywgbilbMF0gfHwgbnVsbDtcbiAgICB9O1xuICAgIGQzX3NlbGVjdEFsbCA9IFNpenpsZTtcbiAgICBkM19zZWxlY3RNYXRjaGVzID0gU2l6emxlLm1hdGNoZXNTZWxlY3RvcjtcbiAgfVxuICBkMy5zZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2VsZWN0KGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gIH07XG4gIHZhciBkM19zZWxlY3Rpb25Qcm90b3R5cGUgPSBkMy5zZWxlY3Rpb24ucHJvdG90eXBlID0gW107XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIGdyb3VwLCBub2RlO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIHN1Ymdyb3VwLnBhcmVudE5vZGUgPSAoZ3JvdXAgPSB0aGlzW2pdKS5wYXJlbnROb2RlO1xuICAgICAgZm9yICh2YXIgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSA9IHNlbGVjdG9yLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpO1xuICAgICAgICAgIGlmIChzdWJub2RlICYmIFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0b3IgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3Qoc2VsZWN0b3IsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgbm9kZTtcbiAgICBzZWxlY3RvciA9IGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBkM19hcnJheShzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSk7XG4gICAgICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3RvciA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NlbGVjdEFsbChzZWxlY3RvciwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfbnNYaHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuICB2YXIgZDNfbnNQcmVmaXggPSB7XG4gICAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgeGh0bWw6IGQzX25zWGh0bWwsXG4gICAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG4gIH07XG4gIGQzLm5zID0ge1xuICAgIHByZWZpeDogZDNfbnNQcmVmaXgsXG4gICAgcXVhbGlmeTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoXCI6XCIpLCBwcmVmaXggPSBuYW1lO1xuICAgICAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICAgICAgcmV0dXJuIGQzX25zUHJlZml4Lmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7XG4gICAgICAgIHNwYWNlOiBkM19uc1ByZWZpeFtwcmVmaXhdLFxuICAgICAgICBsb2NhbDogbmFtZVxuICAgICAgfSA6IG5hbWU7XG4gICAgfVxuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICAgICAgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSk7XG4gICAgICAgIHJldHVybiBuYW1lLmxvY2FsID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSA6IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2F0dHIodmFsdWUsIG5hbWVbdmFsdWVdKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpO1xuICAgIGZ1bmN0aW9uIGF0dHJOdWxsKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJOdWxsTlMoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbigpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyRnVuY3Rpb25OUygpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7IGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB4KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBuYW1lLmxvY2FsID8gYXR0ck51bGxOUyA6IGF0dHJOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24gOiBuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfY29sbGFwc2Uocykge1xuICAgIHJldHVybiBzLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2xhc3NlZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKSwgbiA9IChuYW1lID0gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkpLmxlbmd0aCwgaSA9IC0xO1xuICAgICAgICBpZiAodmFsdWUgPSBub2RlLmNsYXNzTGlzdCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIXZhbHVlLmNvbnRhaW5zKG5hbWVbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWQzX3NlbGVjdGlvbl9jbGFzc2VkUmUobmFtZVtpXSkudGVzdCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9jbGFzc2VkKHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoPzpefFxcXFxzKylcIiArIGQzLnJlcXVvdGUobmFtZSkgKyBcIig/OlxcXFxzK3wkKVwiLCBcImdcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkge1xuICAgIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkubWFwKGQzX3NlbGVjdGlvbl9jbGFzc2VkTmFtZSk7XG4gICAgdmFyIG4gPSBuYW1lLmxlbmd0aDtcbiAgICBmdW5jdGlvbiBjbGFzc2VkQ29uc3RhbnQoKSB7XG4gICAgICB2YXIgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgdmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IC0xLCB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBuYW1lW2ldKHRoaXMsIHgpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzc2VkRnVuY3Rpb24gOiBjbGFzc2VkQ29uc3RhbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWROYW1lKG5hbWUpIHtcbiAgICB2YXIgcmUgPSBkM19zZWxlY3Rpb25fY2xhc3NlZFJlKG5hbWUpO1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgICAgaWYgKGMgPSBub2RlLmNsYXNzTGlzdCkgcmV0dXJuIHZhbHVlID8gYy5hZGQobmFtZSkgOiBjLnJlbW92ZShuYW1lKTtcbiAgICAgIHZhciBjID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGlmICghcmUudGVzdChjKSkgbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBkM19jb2xsYXBzZShjICsgXCIgXCIgKyBuYW1lKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGQzX2NvbGxhcHNlKGMucmVwbGFjZShyZSwgXCIgXCIpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIGZvciAocHJpb3JpdHkgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShwcmlvcml0eSwgbmFtZVtwcmlvcml0eV0sIHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKG4gPCAyKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgICAgIHJldHVybiBkM193aW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuICAgICAgfVxuICAgICAgcHJpb3JpdHkgPSBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIGZ1bmN0aW9uIHN0eWxlTnVsbCgpIHtcbiAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpOyBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgeCwgcHJpb3JpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVGdW5jdGlvbiA6IHN0eWxlQ29uc3RhbnQ7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHRoaXMubm9kZSgpW25hbWVdO1xuICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3Byb3BlcnR5KHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9wcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5TnVsbCgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KCkge1xuICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHggPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07IGVsc2UgdGhpc1tuYW1lXSA9IHg7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gcHJvcGVydHlOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wZXJ0eUZ1bmN0aW9uIDogcHJvcGVydHlDb25zdGFudDtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLmVhY2godHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH0pIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuZWFjaCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgfSkgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKG5hbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsIG5hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgICAgcmV0dXJuIG5hbWVzcGFjZSA9PT0gZDNfbnNYaHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSBkM19uc1hodG1sID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIG5hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVOUygpIHtcbiAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiAobmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSkpLmxvY2FsID8gY3JlYXRlTlMgOiBjcmVhdGU7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICAgIG5hbWUgPSBkM19zZWxlY3Rpb25fY3JlYXRvcihuYW1lKTtcbiAgICBiZWZvcmUgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3IoYmVmb3JlKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobmFtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBiZWZvcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgICB9KTtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uUmVtb3ZlKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uUmVtb3ZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHZhciBpID0gLTEsIG4gPSB0aGlzLmxlbmd0aCwgZ3JvdXAsIG5vZGU7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YWx1ZSA9IG5ldyBBcnJheShuID0gKGdyb3VwID0gdGhpc1swXSkubGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB2YWx1ZVtpXSA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluZChncm91cCwgZ3JvdXBEYXRhKSB7XG4gICAgICB2YXIgaSwgbiA9IGdyb3VwLmxlbmd0aCwgbSA9IGdyb3VwRGF0YS5sZW5ndGgsIG4wID0gTWF0aC5taW4obiwgbSksIHVwZGF0ZU5vZGVzID0gbmV3IEFycmF5KG0pLCBlbnRlck5vZGVzID0gbmV3IEFycmF5KG0pLCBleGl0Tm9kZXMgPSBuZXcgQXJyYXkobiksIG5vZGUsIG5vZGVEYXRhO1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgZDNfTWFwKCksIGtleVZhbHVlcyA9IG5ldyBBcnJheShuKSwga2V5VmFsdWU7XG4gICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBuOyApIHtcbiAgICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSkpKSB7XG4gICAgICAgICAgICAgIGV4aXROb2Rlc1tpXSA9IG5vZGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBtOyApIHtcbiAgICAgICAgICBpZiAoIShub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlID0ga2V5LmNhbGwoZ3JvdXBEYXRhLCBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXSwgaSkpKSkge1xuICAgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShub2RlRGF0YSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICB1cGRhdGVOb2Rlc1tpXSA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLl9fZGF0YV9fID0gbm9kZURhdGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG47ICkge1xuICAgICAgICAgIGlmIChpIGluIGtleVZhbHVlcyAmJiBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAtMTsgKytpIDwgbjA7ICkge1xuICAgICAgICAgIG5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgICBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXTtcbiAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5fX2RhdGFfXyA9IG5vZGVEYXRhO1xuICAgICAgICAgICAgdXBkYXRlTm9kZXNbaV0gPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnRlck5vZGVzW2ldID0gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKG5vZGVEYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7aSA8IG07ICsraSkge1xuICAgICAgICAgIGVudGVyTm9kZXNbaV0gPSBkM19zZWxlY3Rpb25fZGF0YU5vZGUoZ3JvdXBEYXRhW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDtpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVudGVyTm9kZXMudXBkYXRlID0gdXBkYXRlTm9kZXM7XG4gICAgICBlbnRlck5vZGVzLnBhcmVudE5vZGUgPSB1cGRhdGVOb2Rlcy5wYXJlbnROb2RlID0gZXhpdE5vZGVzLnBhcmVudE5vZGUgPSBncm91cC5wYXJlbnROb2RlO1xuICAgICAgZW50ZXIucHVzaChlbnRlck5vZGVzKTtcbiAgICAgIHVwZGF0ZS5wdXNoKHVwZGF0ZU5vZGVzKTtcbiAgICAgIGV4aXQucHVzaChleGl0Tm9kZXMpO1xuICAgIH1cbiAgICB2YXIgZW50ZXIgPSBkM19zZWxlY3Rpb25fZW50ZXIoW10pLCB1cGRhdGUgPSBkM19zZWxlY3Rpb24oW10pLCBleGl0ID0gZDNfc2VsZWN0aW9uKFtdKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGJpbmQoZ3JvdXAgPSB0aGlzW2ldLCB2YWx1ZS5jYWxsKGdyb3VwLCBncm91cC5wYXJlbnROb2RlLl9fZGF0YV9fLCBpKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGJpbmQoZ3JvdXAgPSB0aGlzW2ldLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZS5lbnRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVudGVyO1xuICAgIH07XG4gICAgdXBkYXRlLmV4aXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleGl0O1xuICAgIH07XG4gICAgcmV0dXJuIHVwZGF0ZTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKGRhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19kYXRhX186IGRhdGFcbiAgICB9O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXR1bSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpIDogdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgZ3JvdXAsIG5vZGU7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIikgZmlsdGVyID0gZDNfc2VsZWN0aW9uX2ZpbHRlcihmaWx0ZXIpO1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IChncm91cCA9IHRoaXNbal0pLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgZmlsdGVyLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2ZpbHRlcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVzKHRoaXMsIHNlbGVjdG9yKTtcbiAgICB9O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5vcmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgY29tcGFyYXRvciA9IGQzX3NlbGVjdGlvbl9zb3J0Q29tcGFyYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHRoaXNbal0uc29ydChjb21wYXJhdG9yKTtcbiAgICByZXR1cm4gdGhpcy5vcmRlcigpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IoY29tcGFyYXRvcikge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgY29tcGFyYXRvciA9IGQzX2FzY2VuZGluZztcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmF0b3IoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuICAgIH0pO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2sobm9kZSwgaSwgaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBhcmdzID0gZDNfYXJyYXkoYXJndW1lbnRzKTtcbiAgICBjYWxsYmFjay5hcHBseShhcmdzWzBdID0gdGhpcywgYXJncyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhdGhpcy5ub2RlKCk7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuID0gMDtcbiAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICAgICsrbjtcbiAgICB9KTtcbiAgICByZXR1cm4gbjtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2VudGVyKHNlbGVjdGlvbikge1xuICAgIGQzX3N1YmNsYXNzKHNlbGVjdGlvbiwgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlKTtcbiAgICByZXR1cm4gc2VsZWN0aW9uO1xuICB9XG4gIHZhciBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUgPSBbXTtcbiAgZDMuc2VsZWN0aW9uLmVudGVyID0gZDNfc2VsZWN0aW9uX2VudGVyO1xuICBkMy5zZWxlY3Rpb24uZW50ZXIucHJvdG90eXBlID0gZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuYXBwZW5kID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmFwcGVuZDtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLmVtcHR5ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5O1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUubm9kZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuY2FsbCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2l6ZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5zaXplO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2RlLCB1cGdyb3VwLCBncm91cCwgbm9kZTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICB1cGdyb3VwID0gKGdyb3VwID0gdGhpc1tqXSkudXBkYXRlO1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gZ3JvdXAucGFyZW50Tm9kZTtcbiAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKHVwZ3JvdXBbaV0gPSBzdWJub2RlID0gc2VsZWN0b3IuY2FsbChncm91cC5wYXJlbnROb2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSk7XG4gICAgICAgICAgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG4gIH07XG4gIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGJlZm9yZSA9IGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZSh0aGlzKTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydC5jYWxsKHRoaXMsIG5hbWUsIGJlZm9yZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZShlbnRlcikge1xuICAgIHZhciBpMCwgajA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGopIHtcbiAgICAgIHZhciBncm91cCA9IGVudGVyW2pdLnVwZGF0ZSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTtcbiAgICAgIGlmIChqICE9IGowKSBqMCA9IGosIGkwID0gMDtcbiAgICAgIGlmIChpID49IGkwKSBpMCA9IGkgKyAxO1xuICAgICAgd2hpbGUgKCEobm9kZSA9IGdyb3VwW2kwXSkgJiYgKytpMCA8IG4pIDtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gIH1cbiAgZDMuc2VsZWN0ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBncm91cDtcbiAgICBpZiAodHlwZW9mIG5vZGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGdyb3VwID0gWyBkM19zZWxlY3Qobm9kZSwgZDNfZG9jdW1lbnQpIF07XG4gICAgICBncm91cC5wYXJlbnROb2RlID0gZDNfZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cCA9IFsgbm9kZSBdO1xuICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IGQzX2RvY3VtZW50RWxlbWVudChub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihbIGdyb3VwIF0pO1xuICB9O1xuICBkMy5zZWxlY3RBbGwgPSBmdW5jdGlvbihub2Rlcykge1xuICAgIHZhciBncm91cDtcbiAgICBpZiAodHlwZW9mIG5vZGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBncm91cCA9IGQzX2FycmF5KGQzX3NlbGVjdEFsbChub2RlcywgZDNfZG9jdW1lbnQpKTtcbiAgICAgIGdyb3VwLnBhcmVudE5vZGUgPSBkM19kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwID0gZDNfYXJyYXkobm9kZXMpO1xuICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oWyBncm91cCBdKTtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLm9uID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSBsaXN0ZW5lciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNhcHR1cmUgaW4gdHlwZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9vbihjYXB0dXJlLCB0eXBlW2NhcHR1cmVdLCBsaXN0ZW5lcikpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmIChuIDwgMikgcmV0dXJuIChuID0gdGhpcy5ub2RlKClbXCJfX29uXCIgKyB0eXBlXSkgJiYgbi5fO1xuICAgICAgY2FwdHVyZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9vbih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICB2YXIgbmFtZSA9IFwiX19vblwiICsgdHlwZSwgaSA9IHR5cGUuaW5kZXhPZihcIi5cIiksIHdyYXAgPSBkM19zZWxlY3Rpb25fb25MaXN0ZW5lcjtcbiAgICBpZiAoaSA+IDApIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpO1xuICAgIHZhciBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLmdldCh0eXBlKTtcbiAgICBpZiAoZmlsdGVyKSB0eXBlID0gZmlsdGVyLCB3cmFwID0gZDNfc2VsZWN0aW9uX29uRmlsdGVyO1xuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlKCkge1xuICAgICAgdmFyIGwgPSB0aGlzW25hbWVdO1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGwsIGwuJCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkFkZCgpIHtcbiAgICAgIHZhciBsID0gd3JhcChsaXN0ZW5lciwgZDNfYXJyYXkoYXJndW1lbnRzKSk7XG4gICAgICBvblJlbW92ZS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHRoaXNbbmFtZV0gPSBsLCBsLiQgPSBjYXB0dXJlKTtcbiAgICAgIGwuXyA9IGxpc3RlbmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGwoKSB7XG4gICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiXl9fb24oW14uXSspXCIgKyBkMy5yZXF1b3RlKHR5cGUpICsgXCIkXCIpLCBtYXRjaDtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICBpZiAobWF0Y2ggPSBuYW1lLm1hdGNoKHJlKSkge1xuICAgICAgICAgIHZhciBsID0gdGhpc1tuYW1lXTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIobWF0Y2hbMV0sIGwsIGwuJCk7XG4gICAgICAgICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGkgPyBsaXN0ZW5lciA/IG9uQWRkIDogb25SZW1vdmUgOiBsaXN0ZW5lciA/IGQzX25vb3AgOiByZW1vdmVBbGw7XG4gIH1cbiAgdmFyIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMgPSBkMy5tYXAoe1xuICAgIG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG4gICAgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiXG4gIH0pO1xuICBpZiAoZDNfZG9jdW1lbnQpIHtcbiAgICBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgICAgaWYgKFwib25cIiArIGsgaW4gZDNfZG9jdW1lbnQpIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMucmVtb3ZlKGspO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIG8gPSBkMy5ldmVudDtcbiAgICAgIGQzLmV2ZW50ID0gZTtcbiAgICAgIGFyZ3VtZW50elswXSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0cnkge1xuICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHopO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDMuZXZlbnQgPSBvO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX29uRmlsdGVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcbiAgICB2YXIgbCA9IGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopO1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgcmVsYXRlZCA9IGUucmVsYXRlZFRhcmdldDtcbiAgICAgIGlmICghcmVsYXRlZCB8fCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRhcmdldCkgJiA4KSkge1xuICAgICAgICBsLmNhbGwodGFyZ2V0LCBlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBkM19ldmVudF9kcmFnU2VsZWN0LCBkM19ldmVudF9kcmFnSWQgPSAwO1xuICBmdW5jdGlvbiBkM19ldmVudF9kcmFnU3VwcHJlc3Mobm9kZSkge1xuICAgIHZhciBuYW1lID0gXCIuZHJhZ3N1cHByZXNzLVwiICsgKytkM19ldmVudF9kcmFnSWQsIGNsaWNrID0gXCJjbGlja1wiICsgbmFtZSwgdyA9IGQzLnNlbGVjdChkM193aW5kb3cobm9kZSkpLm9uKFwidG91Y2htb3ZlXCIgKyBuYW1lLCBkM19ldmVudFByZXZlbnREZWZhdWx0KS5vbihcImRyYWdzdGFydFwiICsgbmFtZSwgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCkub24oXCJzZWxlY3RzdGFydFwiICsgbmFtZSwgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCk7XG4gICAgaWYgKGQzX2V2ZW50X2RyYWdTZWxlY3QgPT0gbnVsbCkge1xuICAgICAgZDNfZXZlbnRfZHJhZ1NlbGVjdCA9IFwib25zZWxlY3RzdGFydFwiIGluIG5vZGUgPyBmYWxzZSA6IGQzX3ZlbmRvclN5bWJvbChub2RlLnN0eWxlLCBcInVzZXJTZWxlY3RcIik7XG4gICAgfVxuICAgIGlmIChkM19ldmVudF9kcmFnU2VsZWN0KSB7XG4gICAgICB2YXIgc3R5bGUgPSBkM19kb2N1bWVudEVsZW1lbnQobm9kZSkuc3R5bGUsIHNlbGVjdCA9IHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdO1xuICAgICAgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN1cHByZXNzQ2xpY2spIHtcbiAgICAgIHcub24obmFtZSwgbnVsbCk7XG4gICAgICBpZiAoZDNfZXZlbnRfZHJhZ1NlbGVjdCkgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBzZWxlY3Q7XG4gICAgICBpZiAoc3VwcHJlc3NDbGljaykge1xuICAgICAgICB2YXIgb2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdy5vbihjbGljaywgbnVsbCk7XG4gICAgICAgIH07XG4gICAgICAgIHcub24oY2xpY2ssIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBvZmYoKTtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIHNldFRpbWVvdXQob2ZmLCAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzLm1vdXNlID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCBkM19ldmVudFNvdXJjZSgpKTtcbiAgfTtcbiAgdmFyIGQzX21vdXNlX2J1ZzQ0MDgzID0gdGhpcy5uYXZpZ2F0b3IgJiYgL1dlYktpdC8udGVzdCh0aGlzLm5hdmlnYXRvci51c2VyQWdlbnQpID8gLTEgOiAwO1xuICBmdW5jdGlvbiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgZSkge1xuICAgIGlmIChlLmNoYW5nZWRUb3VjaGVzKSBlID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICB2YXIgc3ZnID0gY29udGFpbmVyLm93bmVyU1ZHRWxlbWVudCB8fCBjb250YWluZXI7XG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBpZiAoZDNfbW91c2VfYnVnNDQwODMgPCAwKSB7XG4gICAgICAgIHZhciB3aW5kb3cgPSBkM193aW5kb3coY29udGFpbmVyKTtcbiAgICAgICAgaWYgKHdpbmRvdy5zY3JvbGxYIHx8IHdpbmRvdy5zY3JvbGxZKSB7XG4gICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJzdmdcIikuc3R5bGUoe1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgYm9yZGVyOiBcIm5vbmVcIlxuICAgICAgICAgIH0sIFwiaW1wb3J0YW50XCIpO1xuICAgICAgICAgIHZhciBjdG0gPSBzdmdbMF1bMF0uZ2V0U2NyZWVuQ1RNKCk7XG4gICAgICAgICAgZDNfbW91c2VfYnVnNDQwODMgPSAhKGN0bS5mIHx8IGN0bS5lKTtcbiAgICAgICAgICBzdmcucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkM19tb3VzZV9idWc0NDA4MykgcG9pbnQueCA9IGUucGFnZVgsIHBvaW50LnkgPSBlLnBhZ2VZOyBlbHNlIHBvaW50LnggPSBlLmNsaWVudFgsIFxuICAgICAgcG9pbnQueSA9IGUuY2xpZW50WTtcbiAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKGNvbnRhaW5lci5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgICAgcmV0dXJuIFsgcG9pbnQueCwgcG9pbnQueSBdO1xuICAgIH1cbiAgICB2YXIgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gWyBlLmNsaWVudFggLSByZWN0LmxlZnQgLSBjb250YWluZXIuY2xpZW50TGVmdCwgZS5jbGllbnRZIC0gcmVjdC50b3AgLSBjb250YWluZXIuY2xpZW50VG9wIF07XG4gIH1cbiAgZDMudG91Y2ggPSBmdW5jdGlvbihjb250YWluZXIsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gZDNfZXZlbnRTb3VyY2UoKS5jaGFuZ2VkVG91Y2hlcztcbiAgICBpZiAodG91Y2hlcykgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzLmxlbmd0aCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgdG91Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgZDMuYmVoYXZpb3IuZHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goZHJhZywgXCJkcmFnXCIsIFwiZHJhZ3N0YXJ0XCIsIFwiZHJhZ2VuZFwiKSwgb3JpZ2luID0gbnVsbCwgbW91c2Vkb3duID0gZHJhZ3N0YXJ0KGQzX25vb3AsIGQzLm1vdXNlLCBkM193aW5kb3csIFwibW91c2Vtb3ZlXCIsIFwibW91c2V1cFwiKSwgdG91Y2hzdGFydCA9IGRyYWdzdGFydChkM19iZWhhdmlvcl9kcmFnVG91Y2hJZCwgZDMudG91Y2gsIGQzX2lkZW50aXR5LCBcInRvdWNobW92ZVwiLCBcInRvdWNoZW5kXCIpO1xuICAgIGZ1bmN0aW9uIGRyYWcoKSB7XG4gICAgICB0aGlzLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duKS5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZHJhZ3N0YXJ0KGlkLCBwb3NpdGlvbiwgc3ViamVjdCwgbW92ZSwgZW5kKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcywgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0LmNvcnJlc3BvbmRpbmdFbGVtZW50IHx8IGQzLmV2ZW50LnRhcmdldCwgcGFyZW50ID0gdGhhdC5wYXJlbnROb2RlLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBkcmFnSWQgPSBpZCgpLCBkcmFnTmFtZSA9IFwiLmRyYWdcIiArIChkcmFnSWQgPT0gbnVsbCA/IFwiXCIgOiBcIi1cIiArIGRyYWdJZCksIGRyYWdPZmZzZXQsIGRyYWdTdWJqZWN0ID0gZDMuc2VsZWN0KHN1YmplY3QodGFyZ2V0KSkub24obW92ZSArIGRyYWdOYW1lLCBtb3ZlZCkub24oZW5kICsgZHJhZ05hbWUsIGVuZGVkKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgcG9zaXRpb24wID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpO1xuICAgICAgICBpZiAob3JpZ2luKSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IG9yaWdpbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgIGRyYWdPZmZzZXQgPSBbIGRyYWdPZmZzZXQueCAtIHBvc2l0aW9uMFswXSwgZHJhZ09mZnNldC55IC0gcG9zaXRpb24wWzFdIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IFsgMCwgMCBdO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBcImRyYWdzdGFydFwiXG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgICAgICB2YXIgcG9zaXRpb24xID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpLCBkeCwgZHk7XG4gICAgICAgICAgaWYgKCFwb3NpdGlvbjEpIHJldHVybjtcbiAgICAgICAgICBkeCA9IHBvc2l0aW9uMVswXSAtIHBvc2l0aW9uMFswXTtcbiAgICAgICAgICBkeSA9IHBvc2l0aW9uMVsxXSAtIHBvc2l0aW9uMFsxXTtcbiAgICAgICAgICBkcmFnZ2VkIHw9IGR4IHwgZHk7XG4gICAgICAgICAgcG9zaXRpb24wID0gcG9zaXRpb24xO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ1wiLFxuICAgICAgICAgICAgeDogcG9zaXRpb24xWzBdICsgZHJhZ09mZnNldFswXSxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uMVsxXSArIGRyYWdPZmZzZXRbMV0sXG4gICAgICAgICAgICBkeDogZHgsXG4gICAgICAgICAgICBkeTogZHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgICAgICBpZiAoIXBvc2l0aW9uKHBhcmVudCwgZHJhZ0lkKSkgcmV0dXJuO1xuICAgICAgICAgIGRyYWdTdWJqZWN0Lm9uKG1vdmUgKyBkcmFnTmFtZSwgbnVsbCkub24oZW5kICsgZHJhZ05hbWUsIG51bGwpO1xuICAgICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ2VuZFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGRyYWcub3JpZ2luID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JpZ2luO1xuICAgICAgb3JpZ2luID0geDtcbiAgICAgIHJldHVybiBkcmFnO1xuICAgIH07XG4gICAgcmV0dXJuIGQzLnJlYmluZChkcmFnLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfYmVoYXZpb3JfZHJhZ1RvdWNoSWQoKSB7XG4gICAgcmV0dXJuIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gIH1cbiAgZDMudG91Y2hlcyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgdG91Y2hlcykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgdG91Y2hlcyA9IGQzX2V2ZW50U291cmNlKCkudG91Y2hlcztcbiAgICByZXR1cm4gdG91Y2hlcyA/IGQzX2FycmF5KHRvdWNoZXMpLm1hcChmdW5jdGlvbih0b3VjaCkge1xuICAgICAgdmFyIHBvaW50ID0gZDNfbW91c2VQb2ludChjb250YWluZXIsIHRvdWNoKTtcbiAgICAgIHBvaW50LmlkZW50aWZpZXIgPSB0b3VjaC5pZGVudGlmaWVyO1xuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH0pIDogW107XG4gIH07XG4gIHZhciDOtSA9IDFlLTYsIM61MiA9IM61ICogzrUsIM+AID0gTWF0aC5QSSwgz4QgPSAyICogz4AsIM+EzrUgPSDPhCAtIM61LCBoYWxmz4AgPSDPgCAvIDIsIGQzX3JhZGlhbnMgPSDPgCAvIDE4MCwgZDNfZGVncmVlcyA9IDE4MCAvIM+AO1xuICBmdW5jdGlvbiBkM19zZ24oeCkge1xuICAgIHJldHVybiB4ID4gMCA/IDEgOiB4IDwgMCA/IC0xIDogMDtcbiAgfVxuICBmdW5jdGlvbiBkM19jcm9zczJkKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBkM19hY29zKHgpIHtcbiAgICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gz4AgOiBNYXRoLmFjb3MoeCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfYXNpbih4KSB7XG4gICAgcmV0dXJuIHggPiAxID8gaGFsZs+AIDogeCA8IC0xID8gLWhhbGbPgCA6IE1hdGguYXNpbih4KTtcbiAgfVxuICBmdW5jdGlvbiBkM19zaW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM19jb3NoKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM190YW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbiAgfVxuICBmdW5jdGlvbiBkM19oYXZlcnNpbih4KSB7XG4gICAgcmV0dXJuICh4ID0gTWF0aC5zaW4oeCAvIDIpKSAqIHg7XG4gIH1cbiAgdmFyIM+BID0gTWF0aC5TUVJUMiwgz4EyID0gMiwgz4E0ID0gNDtcbiAgZDMuaW50ZXJwb2xhdGVab29tID0gZnVuY3Rpb24ocDAsIHAxKSB7XG4gICAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSwgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLCBkeCA9IHV4MSAtIHV4MCwgZHkgPSB1eTEgLSB1eTAsIGQyID0gZHggKiBkeCArIGR5ICogZHksIGksIFM7XG4gICAgaWYgKGQyIDwgzrUyKSB7XG4gICAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyDPgTtcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbIHV4MCArIHQgKiBkeCwgdXkwICsgdCAqIGR5LCB3MCAqIE1hdGguZXhwKM+BICogdCAqIFMpIF07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLCBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIM+BNCAqIGQyKSAvICgyICogdzAgKiDPgTIgKiBkMSksIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gz4E0ICogZDIpIC8gKDIgKiB3MSAqIM+BMiAqIGQxKSwgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLCByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgICBTID0gKHIxIC0gcjApIC8gz4E7XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgcyA9IHQgKiBTLCBjb3NocjAgPSBkM19jb3NoKHIwKSwgdSA9IHcwIC8gKM+BMiAqIGQxKSAqIChjb3NocjAgKiBkM190YW5oKM+BICogcyArIHIwKSAtIGQzX3NpbmgocjApKTtcbiAgICAgICAgcmV0dXJuIFsgdXgwICsgdSAqIGR4LCB1eTAgKyB1ICogZHksIHcwICogY29zaHIwIC8gZDNfY29zaCjPgSAqIHMgKyByMCkgXTtcbiAgICAgIH07XG4gICAgfVxuICAgIGkuZHVyYXRpb24gPSBTICogMWUzO1xuICAgIHJldHVybiBpO1xuICB9O1xuICBkMy5iZWhhdmlvci56b29tID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZXcgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIGs6IDFcbiAgICB9LCB0cmFuc2xhdGUwLCBjZW50ZXIwLCBjZW50ZXIsIHNpemUgPSBbIDk2MCwgNTAwIF0sIHNjYWxlRXh0ZW50ID0gZDNfYmVoYXZpb3Jfem9vbUluZmluaXR5LCBkdXJhdGlvbiA9IDI1MCwgem9vbWluZyA9IDAsIG1vdXNlZG93biA9IFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vtb3ZlID0gXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZXVwID0gXCJtb3VzZXVwLnpvb21cIiwgbW91c2V3aGVlbFRpbWVyLCB0b3VjaHN0YXJ0ID0gXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2h0aW1lLCBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goem9vbSwgXCJ6b29tc3RhcnRcIiwgXCJ6b29tXCIsIFwiem9vbWVuZFwiKSwgeDAsIHgxLCB5MCwgeTE7XG4gICAgaWYgKCFkM19iZWhhdmlvcl96b29tV2hlZWwpIHtcbiAgICAgIGQzX2JlaGF2aW9yX3pvb21XaGVlbCA9IFwib253aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gLWQzLmV2ZW50LmRlbHRhWSAqIChkMy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKTtcbiAgICAgIH0sIFwid2hlZWxcIikgOiBcIm9ubW91c2V3aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZDMuZXZlbnQud2hlZWxEZWx0YTtcbiAgICAgIH0sIFwibW91c2V3aGVlbFwiKSA6IChkM19iZWhhdmlvcl96b29tRGVsdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIC1kMy5ldmVudC5kZXRhaWw7XG4gICAgICB9LCBcIk1vek1vdXNlUGl4ZWxTY3JvbGxcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb20oZykge1xuICAgICAgZy5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbihkM19iZWhhdmlvcl96b29tV2hlZWwgKyBcIi56b29tXCIsIG1vdXNld2hlZWxlZCkub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpLm9uKHRvdWNoc3RhcnQsIHRvdWNoc3RhcnRlZCk7XG4gICAgfVxuICAgIHpvb20uZXZlbnQgPSBmdW5jdGlvbihnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoaXMsIGFyZ3VtZW50cyksIHZpZXcxID0gdmlldztcbiAgICAgICAgaWYgKGQzX3RyYW5zaXRpb25Jbmhlcml0SWQpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmlldyA9IHRoaXMuX19jaGFydF9fIHx8IHtcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgazogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KS50d2VlbihcInpvb206em9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHNpemVbMF0sIGR5ID0gc2l6ZVsxXSwgY3ggPSBjZW50ZXIwID8gY2VudGVyMFswXSA6IGR4IC8gMiwgY3kgPSBjZW50ZXIwID8gY2VudGVyMFsxXSA6IGR5IC8gMiwgaSA9IGQzLmludGVycG9sYXRlWm9vbShbIChjeCAtIHZpZXcueCkgLyB2aWV3LmssIChjeSAtIHZpZXcueSkgLyB2aWV3LmssIGR4IC8gdmlldy5rIF0sIFsgKGN4IC0gdmlldzEueCkgLyB2aWV3MS5rLCAoY3kgLSB2aWV3MS55KSAvIHZpZXcxLmssIGR4IC8gdmlldzEuayBdKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIHZhciBsID0gaSh0KSwgayA9IGR4IC8gbFsyXTtcbiAgICAgICAgICAgICAgdGhpcy5fX2NoYXJ0X18gPSB2aWV3ID0ge1xuICAgICAgICAgICAgICAgIHg6IGN4IC0gbFswXSAqIGssXG4gICAgICAgICAgICAgICAgeTogY3kgLSBsWzFdICogayxcbiAgICAgICAgICAgICAgICBrOiBrXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLmVhY2goXCJpbnRlcnJ1cHQuem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG4gICAgICAgICAgfSkuZWFjaChcImVuZC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IHZpZXc7XG4gICAgICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB6b29tLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgdmlldy54LCB2aWV3LnkgXTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6ICtfWzBdLFxuICAgICAgICB5OiArX1sxXSxcbiAgICAgICAgazogdmlldy5rXG4gICAgICB9O1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmlldy5rO1xuICAgICAgdmlldyA9IHtcbiAgICAgICAgeDogdmlldy54LFxuICAgICAgICB5OiB2aWV3LnksXG4gICAgICAgIGs6IG51bGxcbiAgICAgIH07XG4gICAgICBzY2FsZVRvKCtfKTtcbiAgICAgIHJlc2NhbGUoKTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNjYWxlRXh0ZW50O1xuICAgICAgc2NhbGVFeHRlbnQgPSBfID09IG51bGwgPyBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgOiBbICtfWzBdLCArX1sxXSBdO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNlbnRlcjtcbiAgICAgIGNlbnRlciA9IF8gJiYgWyArX1swXSwgK19bMV0gXTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSBfICYmIFsgK19bMF0sICtfWzFdIF07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkdXJhdGlvbjtcbiAgICAgIGR1cmF0aW9uID0gK187XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20ueCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxO1xuICAgICAgeDEgPSB6O1xuICAgICAgeDAgPSB6LmNvcHkoKTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGs6IDFcbiAgICAgIH07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20ueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuICAgICAgeTEgPSB6O1xuICAgICAgeTAgPSB6LmNvcHkoKTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGs6IDFcbiAgICAgIH07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uKHApIHtcbiAgICAgIHJldHVybiBbIChwWzBdIC0gdmlldy54KSAvIHZpZXcuaywgKHBbMV0gLSB2aWV3LnkpIC8gdmlldy5rIF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50KGwpIHtcbiAgICAgIHJldHVybiBbIGxbMF0gKiB2aWV3LmsgKyB2aWV3LngsIGxbMV0gKiB2aWV3LmsgKyB2aWV3LnkgXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGVUbyhzKSB7XG4gICAgICB2aWV3LmsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIHMpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8ocCwgbCkge1xuICAgICAgbCA9IHBvaW50KGwpO1xuICAgICAgdmlldy54ICs9IHBbMF0gLSBsWzBdO1xuICAgICAgdmlldy55ICs9IHBbMV0gLSBsWzFdO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tVG8odGhhdCwgcCwgbCwgaykge1xuICAgICAgdGhhdC5fX2NoYXJ0X18gPSB7XG4gICAgICAgIHg6IHZpZXcueCxcbiAgICAgICAgeTogdmlldy55LFxuICAgICAgICBrOiB2aWV3LmtcbiAgICAgIH07XG4gICAgICBzY2FsZVRvKE1hdGgucG93KDIsIGspKTtcbiAgICAgIHRyYW5zbGF0ZVRvKGNlbnRlcjAgPSBwLCBsKTtcbiAgICAgIHRoYXQgPSBkMy5zZWxlY3QodGhhdCk7XG4gICAgICBpZiAoZHVyYXRpb24gPiAwKSB0aGF0ID0gdGhhdC50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgdGhhdC5jYWxsKHpvb20uZXZlbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgaWYgKHgxKSB4MS5kb21haW4oeDAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gKHggLSB2aWV3LngpIC8gdmlldy5rO1xuICAgICAgfSkubWFwKHgwLmludmVydCkpO1xuICAgICAgaWYgKHkxKSB5MS5kb21haW4oeTAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeSkge1xuICAgICAgICByZXR1cm4gKHkgLSB2aWV3LnkpIC8gdmlldy5rO1xuICAgICAgfSkubWFwKHkwLmludmVydCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tc3RhcnRlZChkaXNwYXRjaCkge1xuICAgICAgaWYgKCF6b29taW5nKyspIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJ6b29tc3RhcnRcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb21lZChkaXNwYXRjaCkge1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcInpvb21cIixcbiAgICAgICAgc2NhbGU6IHZpZXcuayxcbiAgICAgICAgdHJhbnNsYXRlOiBbIHZpZXcueCwgdmlldy55IF1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tZW5kZWQoZGlzcGF0Y2gpIHtcbiAgICAgIGlmICghLS16b29taW5nKSBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwiem9vbWVuZFwiXG4gICAgICB9KSwgY2VudGVyMCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBzdWJqZWN0ID0gZDMuc2VsZWN0KGQzX3dpbmRvdyh0aGF0KSkub24obW91c2Vtb3ZlLCBtb3ZlZCkub24obW91c2V1cCwgZW5kZWQpLCBsb2NhdGlvbjAgPSBsb2NhdGlvbihkMy5tb3VzZSh0aGF0KSksIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKHRoYXQpO1xuICAgICAgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoYXQpO1xuICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICAgIGRyYWdnZWQgPSAxO1xuICAgICAgICB0cmFuc2xhdGVUbyhkMy5tb3VzZSh0aGF0KSwgbG9jYXRpb24wKTtcbiAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBzdWJqZWN0Lm9uKG1vdXNlbW92ZSwgbnVsbCkub24obW91c2V1cCwgbnVsbCk7XG4gICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsIGRpc3BhdGNoID0gZXZlbnQub2YodGhhdCwgYXJndW1lbnRzKSwgbG9jYXRpb25zMCA9IHt9LCBkaXN0YW5jZTAgPSAwLCBzY2FsZTAsIHpvb21OYW1lID0gXCIuem9vbS1cIiArIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIsIHRvdWNobW92ZSA9IFwidG91Y2htb3ZlXCIgKyB6b29tTmFtZSwgdG91Y2hlbmQgPSBcInRvdWNoZW5kXCIgKyB6b29tTmFtZSwgdGFyZ2V0cyA9IFtdLCBzdWJqZWN0ID0gZDMuc2VsZWN0KHRoYXQpLCBkcmFnUmVzdG9yZSA9IGQzX2V2ZW50X2RyYWdTdXBwcmVzcyh0aGF0KTtcbiAgICAgIHN0YXJ0ZWQoKTtcbiAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgIHN1YmplY3Qub24obW91c2Vkb3duLCBudWxsKS5vbih0b3VjaHN0YXJ0LCBzdGFydGVkKTtcbiAgICAgIGZ1bmN0aW9uIHJlbG9jYXRlKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCk7XG4gICAgICAgIHNjYWxlMCA9IHZpZXcuaztcbiAgICAgICAgdG91Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBpZiAodC5pZGVudGlmaWVyIGluIGxvY2F0aW9uczApIGxvY2F0aW9uczBbdC5pZGVudGlmaWVyXSA9IGxvY2F0aW9uKHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdWNoZXM7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0O1xuICAgICAgICBkMy5zZWxlY3QodGFyZ2V0KS5vbih0b3VjaG1vdmUsIG1vdmVkKS5vbih0b3VjaGVuZCwgZW5kZWQpO1xuICAgICAgICB0YXJnZXRzLnB1c2godGFyZ2V0KTtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGFuZ2VkLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGxvY2F0aW9uczBbY2hhbmdlZFtpXS5pZGVudGlmaWVyXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdWNoZXMgPSByZWxvY2F0ZSgpLCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAodG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBpZiAobm93IC0gdG91Y2h0aW1lIDwgNTAwKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRvdWNoZXNbMF07XG4gICAgICAgICAgICB6b29tVG8odGhhdCwgcCwgbG9jYXRpb25zMFtwLmlkZW50aWZpZXJdLCBNYXRoLmZsb29yKE1hdGgubG9nKHZpZXcuaykgLyBNYXRoLkxOMikgKyAxKTtcbiAgICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG91Y2h0aW1lID0gbm93O1xuICAgICAgICB9IGVsc2UgaWYgKHRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHZhciBwID0gdG91Y2hlc1swXSwgcSA9IHRvdWNoZXNbMV0sIGR4ID0gcFswXSAtIHFbMF0sIGR5ID0gcFsxXSAtIHFbMV07XG4gICAgICAgICAgZGlzdGFuY2UwID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCksIHAwLCBsMCwgcDEsIGwxO1xuICAgICAgICBkM19zZWxlY3Rpb25faW50ZXJydXB0LmNhbGwodGhhdCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcy5sZW5ndGg7IGkgPCBuOyArK2ksIGwxID0gbnVsbCkge1xuICAgICAgICAgIHAxID0gdG91Y2hlc1tpXTtcbiAgICAgICAgICBpZiAobDEgPSBsb2NhdGlvbnMwW3AxLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgICBpZiAobDApIGJyZWFrO1xuICAgICAgICAgICAgcDAgPSBwMSwgbDAgPSBsMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGwxKSB7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlMSA9IChkaXN0YW5jZTEgPSBwMVswXSAtIHAwWzBdKSAqIGRpc3RhbmNlMSArIChkaXN0YW5jZTEgPSBwMVsxXSAtIHAwWzFdKSAqIGRpc3RhbmNlMSwgc2NhbGUxID0gZGlzdGFuY2UwICYmIE1hdGguc3FydChkaXN0YW5jZTEgLyBkaXN0YW5jZTApO1xuICAgICAgICAgIHAwID0gWyAocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyIF07XG4gICAgICAgICAgbDAgPSBbIChsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDIgXTtcbiAgICAgICAgICBzY2FsZVRvKHNjYWxlMSAqIHNjYWxlMCk7XG4gICAgICAgIH1cbiAgICAgICAgdG91Y2h0aW1lID0gbnVsbDtcbiAgICAgICAgdHJhbnNsYXRlVG8ocDAsIGwwKTtcbiAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBpZiAoZDMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgY2hhbmdlZCA9IGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gY2hhbmdlZC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhdGlvbnMwW2NoYW5nZWRbaV0uaWRlbnRpZmllcl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGlkZW50aWZpZXIgaW4gbG9jYXRpb25zMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgcmVsb2NhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZDMuc2VsZWN0QWxsKHRhcmdldHMpLm9uKHpvb21OYW1lLCBudWxsKTtcbiAgICAgICAgc3ViamVjdC5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbih0b3VjaHN0YXJ0LCB0b3VjaHN0YXJ0ZWQpO1xuICAgICAgICBkcmFnUmVzdG9yZSgpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtb3VzZXdoZWVsZWQoKSB7XG4gICAgICB2YXIgZGlzcGF0Y2ggPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKG1vdXNld2hlZWxUaW1lcikgY2xlYXJUaW1lb3V0KG1vdXNld2hlZWxUaW1lcik7IGVsc2UgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoaXMpLCBcbiAgICAgIHRyYW5zbGF0ZTAgPSBsb2NhdGlvbihjZW50ZXIwID0gY2VudGVyIHx8IGQzLm1vdXNlKHRoaXMpKSwgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgbW91c2V3aGVlbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgbW91c2V3aGVlbFRpbWVyID0gbnVsbDtcbiAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgIH0sIDUwKTtcbiAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNjYWxlVG8oTWF0aC5wb3coMiwgZDNfYmVoYXZpb3Jfem9vbURlbHRhKCkgKiAuMDAyKSAqIHZpZXcuayk7XG4gICAgICB0cmFuc2xhdGVUbyhjZW50ZXIwLCB0cmFuc2xhdGUwKTtcbiAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRibGNsaWNrZWQoKSB7XG4gICAgICB2YXIgcCA9IGQzLm1vdXNlKHRoaXMpLCBrID0gTWF0aC5sb2codmlldy5rKSAvIE1hdGguTE4yO1xuICAgICAgem9vbVRvKHRoaXMsIHAsIGxvY2F0aW9uKHApLCBkMy5ldmVudC5zaGlmdEtleSA/IE1hdGguY2VpbChrKSAtIDEgOiBNYXRoLmZsb29yKGspICsgMSk7XG4gICAgfVxuICAgIHJldHVybiBkMy5yZWJpbmQoem9vbSwgZXZlbnQsIFwib25cIik7XG4gIH07XG4gIHZhciBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgPSBbIDAsIEluZmluaXR5IF0sIGQzX2JlaGF2aW9yX3pvb21EZWx0YSwgZDNfYmVoYXZpb3Jfem9vbVdoZWVsO1xuICBkMy5jb2xvciA9IGQzX2NvbG9yO1xuICBmdW5jdGlvbiBkM19jb2xvcigpIHt9XG4gIGQzX2NvbG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfTtcbiAgZDMuaHNsID0gZDNfaHNsO1xuICBmdW5jdGlvbiBkM19oc2woaCwgcywgbCkge1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfaHNsID8gdm9pZCAodGhpcy5oID0gK2gsIHRoaXMucyA9ICtzLCB0aGlzLmwgPSArbCkgOiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGggaW5zdGFuY2VvZiBkM19oc2wgPyBuZXcgZDNfaHNsKGguaCwgaC5zLCBoLmwpIDogZDNfcmdiX3BhcnNlKFwiXCIgKyBoLCBkM19yZ2JfaHNsLCBkM19oc2wpIDogbmV3IGQzX2hzbChoLCBzLCBsKTtcbiAgfVxuICB2YXIgZDNfaHNsUHJvdG90eXBlID0gZDNfaHNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuICBkM19oc2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpO1xuICAgIHJldHVybiBuZXcgZDNfaHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgLyBrKTtcbiAgfTtcbiAgZDNfaHNsUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgcmV0dXJuIG5ldyBkM19oc2wodGhpcy5oLCB0aGlzLnMsIGsgKiB0aGlzLmwpO1xuICB9O1xuICBkM19oc2xQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2hzbF9yZ2IodGhpcy5oLCB0aGlzLnMsIHRoaXMubCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2hzbF9yZ2IoaCwgcywgbCkge1xuICAgIHZhciBtMSwgbTI7XG4gICAgaCA9IGlzTmFOKGgpID8gMCA6IChoICU9IDM2MCkgPCAwID8gaCArIDM2MCA6IGg7XG4gICAgcyA9IGlzTmFOKHMpID8gMCA6IHMgPCAwID8gMCA6IHMgPiAxID8gMSA6IHM7XG4gICAgbCA9IGwgPCAwID8gMCA6IGwgPiAxID8gMSA6IGw7XG4gICAgbTIgPSBsIDw9IC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICBmdW5jdGlvbiB2KGgpIHtcbiAgICAgIGlmIChoID4gMzYwKSBoIC09IDM2MDsgZWxzZSBpZiAoaCA8IDApIGggKz0gMzYwO1xuICAgICAgaWYgKGggPCA2MCkgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAvIDYwO1xuICAgICAgaWYgKGggPCAxODApIHJldHVybiBtMjtcbiAgICAgIGlmIChoIDwgMjQwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MDtcbiAgICAgIHJldHVybiBtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdnYoaCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQodihoKSAqIDI1NSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgZDNfcmdiKHZ2KGggKyAxMjApLCB2dihoKSwgdnYoaCAtIDEyMCkpO1xuICB9XG4gIGQzLmhjbCA9IGQzX2hjbDtcbiAgZnVuY3Rpb24gZDNfaGNsKGgsIGMsIGwpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2hjbCA/IHZvaWQgKHRoaXMuaCA9ICtoLCB0aGlzLmMgPSArYywgdGhpcy5sID0gK2wpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBoIGluc3RhbmNlb2YgZDNfaGNsID8gbmV3IGQzX2hjbChoLmgsIGguYywgaC5sKSA6IGggaW5zdGFuY2VvZiBkM19sYWIgPyBkM19sYWJfaGNsKGgubCwgaC5hLCBoLmIpIDogZDNfbGFiX2hjbCgoaCA9IGQzX3JnYl9sYWIoKGggPSBkMy5yZ2IoaCkpLnIsIGguZywgaC5iKSkubCwgaC5hLCBoLmIpIDogbmV3IGQzX2hjbChoLCBjLCBsKTtcbiAgfVxuICB2YXIgZDNfaGNsUHJvdG90eXBlID0gZDNfaGNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuICBkM19oY2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBkM19oY2wodGhpcy5oLCB0aGlzLmMsIE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSkpO1xuICB9O1xuICBkM19oY2xQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfaGNsKHRoaXMuaCwgdGhpcy5jLCBNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSk7XG4gIH07XG4gIGQzX2hjbFByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfaGNsX2xhYih0aGlzLmgsIHRoaXMuYywgdGhpcy5sKS5yZ2IoKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfaGNsX2xhYihoLCBjLCBsKSB7XG4gICAgaWYgKGlzTmFOKGgpKSBoID0gMDtcbiAgICBpZiAoaXNOYU4oYykpIGMgPSAwO1xuICAgIHJldHVybiBuZXcgZDNfbGFiKGwsIE1hdGguY29zKGggKj0gZDNfcmFkaWFucykgKiBjLCBNYXRoLnNpbihoKSAqIGMpO1xuICB9XG4gIGQzLmxhYiA9IGQzX2xhYjtcbiAgZnVuY3Rpb24gZDNfbGFiKGwsIGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2xhYiA/IHZvaWQgKHRoaXMubCA9ICtsLCB0aGlzLmEgPSArYSwgdGhpcy5iID0gK2IpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBsIGluc3RhbmNlb2YgZDNfbGFiID8gbmV3IGQzX2xhYihsLmwsIGwuYSwgbC5iKSA6IGwgaW5zdGFuY2VvZiBkM19oY2wgPyBkM19oY2xfbGFiKGwuaCwgbC5jLCBsLmwpIDogZDNfcmdiX2xhYigobCA9IGQzX3JnYihsKSkuciwgbC5nLCBsLmIpIDogbmV3IGQzX2xhYihsLCBhLCBiKTtcbiAgfVxuICB2YXIgZDNfbGFiX0sgPSAxODtcbiAgdmFyIGQzX2xhYl9YID0gLjk1MDQ3LCBkM19sYWJfWSA9IDEsIGQzX2xhYl9aID0gMS4wODg4MztcbiAgdmFyIGQzX2xhYlByb3RvdHlwZSA9IGQzX2xhYi5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcbiAgZDNfbGFiUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfbGFiKE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSksIHRoaXMuYSwgdGhpcy5iKTtcbiAgfTtcbiAgZDNfbGFiUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IGQzX2xhYihNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSwgdGhpcy5hLCB0aGlzLmIpO1xuICB9O1xuICBkM19sYWJQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2xhYl9yZ2IodGhpcy5sLCB0aGlzLmEsIHRoaXMuYik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xhYl9yZ2IobCwgYSwgYikge1xuICAgIHZhciB5ID0gKGwgKyAxNikgLyAxMTYsIHggPSB5ICsgYSAvIDUwMCwgeiA9IHkgLSBiIC8gMjAwO1xuICAgIHggPSBkM19sYWJfeHl6KHgpICogZDNfbGFiX1g7XG4gICAgeSA9IGQzX2xhYl94eXooeSkgKiBkM19sYWJfWTtcbiAgICB6ID0gZDNfbGFiX3h5eih6KSAqIGQzX2xhYl9aO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKGQzX3h5el9yZ2IoMy4yNDA0NTQyICogeCAtIDEuNTM3MTM4NSAqIHkgLSAuNDk4NTMxNCAqIHopLCBkM194eXpfcmdiKC0uOTY5MjY2ICogeCArIDEuODc2MDEwOCAqIHkgKyAuMDQxNTU2ICogeiksIGQzX3h5el9yZ2IoLjA1NTY0MzQgKiB4IC0gLjIwNDAyNTkgKiB5ICsgMS4wNTcyMjUyICogeikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xhYl9oY2wobCwgYSwgYikge1xuICAgIHJldHVybiBsID4gMCA/IG5ldyBkM19oY2woTWF0aC5hdGFuMihiLCBhKSAqIGQzX2RlZ3JlZXMsIE1hdGguc3FydChhICogYSArIGIgKiBiKSwgbCkgOiBuZXcgZDNfaGNsKE5hTiwgTmFOLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYWJfeHl6KHgpIHtcbiAgICByZXR1cm4geCA+IC4yMDY4OTMwMzQgPyB4ICogeCAqIHggOiAoeCAtIDQgLyAyOSkgLyA3Ljc4NzAzNztcbiAgfVxuICBmdW5jdGlvbiBkM194eXpfbGFiKHgpIHtcbiAgICByZXR1cm4geCA+IC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiA3Ljc4NzAzNyAqIHggKyA0IC8gMjk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfeHl6X3JnYihyKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoMjU1ICogKHIgPD0gLjAwMzA0ID8gMTIuOTIgKiByIDogMS4wNTUgKiBNYXRoLnBvdyhyLCAxIC8gMi40KSAtIC4wNTUpKTtcbiAgfVxuICBkMy5yZ2IgPSBkM19yZ2I7XG4gIGZ1bmN0aW9uIGQzX3JnYihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBkM19yZ2IgPyB2b2lkICh0aGlzLnIgPSB+fnIsIHRoaXMuZyA9IH5+ZywgdGhpcy5iID0gfn5iKSA6IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gciBpbnN0YW5jZW9mIGQzX3JnYiA/IG5ldyBkM19yZ2Ioci5yLCByLmcsIHIuYikgOiBkM19yZ2JfcGFyc2UoXCJcIiArIHIsIGQzX3JnYiwgZDNfaHNsX3JnYikgOiBuZXcgZDNfcmdiKHIsIGcsIGIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYk51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgZDNfcmdiKHZhbHVlID4+IDE2LCB2YWx1ZSA+PiA4ICYgMjU1LCB2YWx1ZSAmIDI1NSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfcmdiU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIGQzX3JnYk51bWJlcih2YWx1ZSkgKyBcIlwiO1xuICB9XG4gIHZhciBkM19yZ2JQcm90b3R5cGUgPSBkM19yZ2IucHJvdG90eXBlID0gbmV3IGQzX2NvbG9yKCk7XG4gIGQzX3JnYlByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgdmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmIsIGkgPSAzMDtcbiAgICBpZiAoIXIgJiYgIWcgJiYgIWIpIHJldHVybiBuZXcgZDNfcmdiKGksIGksIGkpO1xuICAgIGlmIChyICYmIHIgPCBpKSByID0gaTtcbiAgICBpZiAoZyAmJiBnIDwgaSkgZyA9IGk7XG4gICAgaWYgKGIgJiYgYiA8IGkpIGIgPSBpO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKE1hdGgubWluKDI1NSwgciAvIGspLCBNYXRoLm1pbigyNTUsIGcgLyBrKSwgTWF0aC5taW4oMjU1LCBiIC8gaykpO1xuICB9O1xuICBkM19yZ2JQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKTtcbiAgICByZXR1cm4gbmV3IGQzX3JnYihrICogdGhpcy5yLCBrICogdGhpcy5nLCBrICogdGhpcy5iKTtcbiAgfTtcbiAgZDNfcmdiUHJvdG90eXBlLmhzbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19yZ2JfaHNsKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICB9O1xuICBkM19yZ2JQcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KHRoaXMucikgKyBkM19yZ2JfaGV4KHRoaXMuZykgKyBkM19yZ2JfaGV4KHRoaXMuYik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3JnYl9oZXgodikge1xuICAgIHJldHVybiB2IDwgMTYgPyBcIjBcIiArIE1hdGgubWF4KDAsIHYpLnRvU3RyaW5nKDE2KSA6IE1hdGgubWluKDI1NSwgdikudG9TdHJpbmcoMTYpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZShmb3JtYXQsIHJnYiwgaHNsKSB7XG4gICAgdmFyIHIgPSAwLCBnID0gMCwgYiA9IDAsIG0xLCBtMiwgY29sb3I7XG4gICAgbTEgPSAvKFthLXpdKylcXCgoLiopXFwpLy5leGVjKGZvcm1hdCA9IGZvcm1hdC50b0xvd2VyQ2FzZSgpKTtcbiAgICBpZiAobTEpIHtcbiAgICAgIG0yID0gbTFbMl0uc3BsaXQoXCIsXCIpO1xuICAgICAgc3dpdGNoIChtMVsxXSkge1xuICAgICAgIGNhc2UgXCJoc2xcIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBoc2wocGFyc2VGbG9hdChtMlswXSksIHBhcnNlRmxvYXQobTJbMV0pIC8gMTAwLCBwYXJzZUZsb2F0KG0yWzJdKSAvIDEwMCk7XG4gICAgICAgIH1cblxuICAgICAgIGNhc2UgXCJyZ2JcIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiByZ2IoZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzBdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzFdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzJdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbG9yID0gZDNfcmdiX25hbWVzLmdldChmb3JtYXQpKSB7XG4gICAgICByZXR1cm4gcmdiKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ICE9IG51bGwgJiYgZm9ybWF0LmNoYXJBdCgwKSA9PT0gXCIjXCIgJiYgIWlzTmFOKGNvbG9yID0gcGFyc2VJbnQoZm9ybWF0LnNsaWNlKDEpLCAxNikpKSB7XG4gICAgICBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICByID0gKGNvbG9yICYgMzg0MCkgPj4gNDtcbiAgICAgICAgciA9IHIgPj4gNCB8IHI7XG4gICAgICAgIGcgPSBjb2xvciAmIDI0MDtcbiAgICAgICAgZyA9IGcgPj4gNCB8IGc7XG4gICAgICAgIGIgPSBjb2xvciAmIDE1O1xuICAgICAgICBiID0gYiA8PCA0IHwgYjtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNykge1xuICAgICAgICByID0gKGNvbG9yICYgMTY3MTE2ODApID4+IDE2O1xuICAgICAgICBnID0gKGNvbG9yICYgNjUyODApID4+IDg7XG4gICAgICAgIGIgPSBjb2xvciAmIDI1NTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJnYihyLCBnLCBiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfaHNsKHIsIGcsIGIpIHtcbiAgICB2YXIgbWluID0gTWF0aC5taW4ociAvPSAyNTUsIGcgLz0gMjU1LCBiIC89IDI1NSksIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLCBkID0gbWF4IC0gbWluLCBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuICAgIGlmIChkKSB7XG4gICAgICBzID0gbCA8IC41ID8gZCAvIChtYXggKyBtaW4pIDogZCAvICgyIC0gbWF4IC0gbWluKTtcbiAgICAgIGlmIChyID09IG1heCkgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBlbHNlIGlmIChnID09IG1heCkgaCA9IChiIC0gcikgLyBkICsgMjsgZWxzZSBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IE5hTjtcbiAgICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IGQzX2hzbChoLCBzLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfbGFiKHIsIGcsIGIpIHtcbiAgICByID0gZDNfcmdiX3h5eihyKTtcbiAgICBnID0gZDNfcmdiX3h5eihnKTtcbiAgICBiID0gZDNfcmdiX3h5eihiKTtcbiAgICB2YXIgeCA9IGQzX3h5el9sYWIoKC40MTI0NTY0ICogciArIC4zNTc1NzYxICogZyArIC4xODA0Mzc1ICogYikgLyBkM19sYWJfWCksIHkgPSBkM194eXpfbGFiKCguMjEyNjcyOSAqIHIgKyAuNzE1MTUyMiAqIGcgKyAuMDcyMTc1ICogYikgLyBkM19sYWJfWSksIHogPSBkM194eXpfbGFiKCguMDE5MzMzOSAqIHIgKyAuMTE5MTkyICogZyArIC45NTAzMDQxICogYikgLyBkM19sYWJfWik7XG4gICAgcmV0dXJuIGQzX2xhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYl94eXoocikge1xuICAgIHJldHVybiAociAvPSAyNTUpIDw9IC4wNDA0NSA/IHIgLyAxMi45MiA6IE1hdGgucG93KChyICsgLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfcGFyc2VOdW1iZXIoYykge1xuICAgIHZhciBmID0gcGFyc2VGbG9hdChjKTtcbiAgICByZXR1cm4gYy5jaGFyQXQoYy5sZW5ndGggLSAxKSA9PT0gXCIlXCIgPyBNYXRoLnJvdW5kKGYgKiAyLjU1KSA6IGY7XG4gIH1cbiAgdmFyIGQzX3JnYl9uYW1lcyA9IGQzLm1hcCh7XG4gICAgYWxpY2VibHVlOiAxNTc5MjM4MyxcbiAgICBhbnRpcXVld2hpdGU6IDE2NDQ0Mzc1LFxuICAgIGFxdWE6IDY1NTM1LFxuICAgIGFxdWFtYXJpbmU6IDgzODg1NjQsXG4gICAgYXp1cmU6IDE1Nzk0MTc1LFxuICAgIGJlaWdlOiAxNjExOTI2MCxcbiAgICBiaXNxdWU6IDE2NzcwMjQ0LFxuICAgIGJsYWNrOiAwLFxuICAgIGJsYW5jaGVkYWxtb25kOiAxNjc3MjA0NSxcbiAgICBibHVlOiAyNTUsXG4gICAgYmx1ZXZpb2xldDogOTA1NTIwMixcbiAgICBicm93bjogMTA4MjQyMzQsXG4gICAgYnVybHl3b29kOiAxNDU5NjIzMSxcbiAgICBjYWRldGJsdWU6IDYyNjY1MjgsXG4gICAgY2hhcnRyZXVzZTogODM4ODM1MixcbiAgICBjaG9jb2xhdGU6IDEzNzg5NDcwLFxuICAgIGNvcmFsOiAxNjc0NDI3MixcbiAgICBjb3JuZmxvd2VyYmx1ZTogNjU5MTk4MSxcbiAgICBjb3Juc2lsazogMTY3NzUzODgsXG4gICAgY3JpbXNvbjogMTQ0MjMxMDAsXG4gICAgY3lhbjogNjU1MzUsXG4gICAgZGFya2JsdWU6IDEzOSxcbiAgICBkYXJrY3lhbjogMzU3MjMsXG4gICAgZGFya2dvbGRlbnJvZDogMTIwOTI5MzksXG4gICAgZGFya2dyYXk6IDExMTE5MDE3LFxuICAgIGRhcmtncmVlbjogMjU2MDAsXG4gICAgZGFya2dyZXk6IDExMTE5MDE3LFxuICAgIGRhcmtraGFraTogMTI0MzMyNTksXG4gICAgZGFya21hZ2VudGE6IDkxMDk2NDMsXG4gICAgZGFya29saXZlZ3JlZW46IDU1OTc5OTksXG4gICAgZGFya29yYW5nZTogMTY3NDc1MjAsXG4gICAgZGFya29yY2hpZDogMTAwNDAwMTIsXG4gICAgZGFya3JlZDogOTEwOTUwNCxcbiAgICBkYXJrc2FsbW9uOiAxNTMwODQxMCxcbiAgICBkYXJrc2VhZ3JlZW46IDk0MTk5MTksXG4gICAgZGFya3NsYXRlYmx1ZTogNDczNDM0NyxcbiAgICBkYXJrc2xhdGVncmF5OiAzMTAwNDk1LFxuICAgIGRhcmtzbGF0ZWdyZXk6IDMxMDA0OTUsXG4gICAgZGFya3R1cnF1b2lzZTogNTI5NDUsXG4gICAgZGFya3Zpb2xldDogOTY5OTUzOSxcbiAgICBkZWVwcGluazogMTY3MTY5NDcsXG4gICAgZGVlcHNreWJsdWU6IDQ5MTUxLFxuICAgIGRpbWdyYXk6IDY5MDgyNjUsXG4gICAgZGltZ3JleTogNjkwODI2NSxcbiAgICBkb2RnZXJibHVlOiAyMDAzMTk5LFxuICAgIGZpcmVicmljazogMTE2NzQxNDYsXG4gICAgZmxvcmFsd2hpdGU6IDE2Nzc1OTIwLFxuICAgIGZvcmVzdGdyZWVuOiAyMjYzODQyLFxuICAgIGZ1Y2hzaWE6IDE2NzExOTM1LFxuICAgIGdhaW5zYm9ybzogMTQ0NzQ0NjAsXG4gICAgZ2hvc3R3aGl0ZTogMTYzMTY2NzEsXG4gICAgZ29sZDogMTY3NjY3MjAsXG4gICAgZ29sZGVucm9kOiAxNDMyOTEyMCxcbiAgICBncmF5OiA4NDIxNTA0LFxuICAgIGdyZWVuOiAzMjc2OCxcbiAgICBncmVlbnllbGxvdzogMTE0MDMwNTUsXG4gICAgZ3JleTogODQyMTUwNCxcbiAgICBob25leWRldzogMTU3OTQxNjAsXG4gICAgaG90cGluazogMTY3Mzg3NDAsXG4gICAgaW5kaWFucmVkOiAxMzQ1ODUyNCxcbiAgICBpbmRpZ286IDQ5MTUzMzAsXG4gICAgaXZvcnk6IDE2Nzc3MjAwLFxuICAgIGtoYWtpOiAxNTc4NzY2MCxcbiAgICBsYXZlbmRlcjogMTUxMzI0MTAsXG4gICAgbGF2ZW5kZXJibHVzaDogMTY3NzMzNjUsXG4gICAgbGF3bmdyZWVuOiA4MTkwOTc2LFxuICAgIGxlbW9uY2hpZmZvbjogMTY3NzU4ODUsXG4gICAgbGlnaHRibHVlOiAxMTM5MzI1NCxcbiAgICBsaWdodGNvcmFsOiAxNTc2MTUzNixcbiAgICBsaWdodGN5YW46IDE0NzQ1NTk5LFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAxNjQ0ODIxMCxcbiAgICBsaWdodGdyYXk6IDEzODgyMzIzLFxuICAgIGxpZ2h0Z3JlZW46IDk0OTgyNTYsXG4gICAgbGlnaHRncmV5OiAxMzg4MjMyMyxcbiAgICBsaWdodHBpbms6IDE2NzU4NDY1LFxuICAgIGxpZ2h0c2FsbW9uOiAxNjc1Mjc2MixcbiAgICBsaWdodHNlYWdyZWVuOiAyMTQyODkwLFxuICAgIGxpZ2h0c2t5Ymx1ZTogODkwMDM0NixcbiAgICBsaWdodHNsYXRlZ3JheTogNzgzMzc1MyxcbiAgICBsaWdodHNsYXRlZ3JleTogNzgzMzc1MyxcbiAgICBsaWdodHN0ZWVsYmx1ZTogMTE1ODQ3MzQsXG4gICAgbGlnaHR5ZWxsb3c6IDE2Nzc3MTg0LFxuICAgIGxpbWU6IDY1MjgwLFxuICAgIGxpbWVncmVlbjogMzMyOTMzMCxcbiAgICBsaW5lbjogMTY0NDU2NzAsXG4gICAgbWFnZW50YTogMTY3MTE5MzUsXG4gICAgbWFyb29uOiA4Mzg4NjA4LFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IDY3MzczMjIsXG4gICAgbWVkaXVtYmx1ZTogMjA1LFxuICAgIG1lZGl1bW9yY2hpZDogMTIyMTE2NjcsXG4gICAgbWVkaXVtcHVycGxlOiA5NjYyNjgzLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAzOTc4MDk3LFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogODA4Nzc5MCxcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogNjQxNTQsXG4gICAgbWVkaXVtdHVycXVvaXNlOiA0NzcyMzAwLFxuICAgIG1lZGl1bXZpb2xldHJlZDogMTMwNDcxNzMsXG4gICAgbWlkbmlnaHRibHVlOiAxNjQ0OTEyLFxuICAgIG1pbnRjcmVhbTogMTYxMjE4NTAsXG4gICAgbWlzdHlyb3NlOiAxNjc3MDI3MyxcbiAgICBtb2NjYXNpbjogMTY3NzAyMjksXG4gICAgbmF2YWpvd2hpdGU6IDE2NzY4Njg1LFxuICAgIG5hdnk6IDEyOCxcbiAgICBvbGRsYWNlOiAxNjY0MzU1OCxcbiAgICBvbGl2ZTogODQyMTM3NixcbiAgICBvbGl2ZWRyYWI6IDcwNDg3MzksXG4gICAgb3JhbmdlOiAxNjc1MzkyMCxcbiAgICBvcmFuZ2VyZWQ6IDE2NzI5MzQ0LFxuICAgIG9yY2hpZDogMTQzMTU3MzQsXG4gICAgcGFsZWdvbGRlbnJvZDogMTU2NTcxMzAsXG4gICAgcGFsZWdyZWVuOiAxMDAyNTg4MCxcbiAgICBwYWxldHVycXVvaXNlOiAxMTUyOTk2NixcbiAgICBwYWxldmlvbGV0cmVkOiAxNDM4MTIwMyxcbiAgICBwYXBheWF3aGlwOiAxNjc3MzA3NyxcbiAgICBwZWFjaHB1ZmY6IDE2NzY3NjczLFxuICAgIHBlcnU6IDEzNDY4OTkxLFxuICAgIHBpbms6IDE2NzYxMDM1LFxuICAgIHBsdW06IDE0NTI0NjM3LFxuICAgIHBvd2RlcmJsdWU6IDExNTkxOTEwLFxuICAgIHB1cnBsZTogODM4ODczNixcbiAgICByZWJlY2NhcHVycGxlOiA2Njk3ODgxLFxuICAgIHJlZDogMTY3MTE2ODAsXG4gICAgcm9zeWJyb3duOiAxMjM1NzUxOSxcbiAgICByb3lhbGJsdWU6IDQyODY5NDUsXG4gICAgc2FkZGxlYnJvd246IDkxMjcxODcsXG4gICAgc2FsbW9uOiAxNjQxNjg4MixcbiAgICBzYW5keWJyb3duOiAxNjAzMjg2NCxcbiAgICBzZWFncmVlbjogMzA1MDMyNyxcbiAgICBzZWFzaGVsbDogMTY3NzQ2MzgsXG4gICAgc2llbm5hOiAxMDUwNjc5NyxcbiAgICBzaWx2ZXI6IDEyNjMyMjU2LFxuICAgIHNreWJsdWU6IDg5MDAzMzEsXG4gICAgc2xhdGVibHVlOiA2OTcwMDYxLFxuICAgIHNsYXRlZ3JheTogNzM3Mjk0NCxcbiAgICBzbGF0ZWdyZXk6IDczNzI5NDQsXG4gICAgc25vdzogMTY3NzU5MzAsXG4gICAgc3ByaW5nZ3JlZW46IDY1NDA3LFxuICAgIHN0ZWVsYmx1ZTogNDYyMDk4MCxcbiAgICB0YW46IDEzODA4NzgwLFxuICAgIHRlYWw6IDMyODk2LFxuICAgIHRoaXN0bGU6IDE0MjA0ODg4LFxuICAgIHRvbWF0bzogMTY3MzcwOTUsXG4gICAgdHVycXVvaXNlOiA0MjUxODU2LFxuICAgIHZpb2xldDogMTU2MzEwODYsXG4gICAgd2hlYXQ6IDE2MTEzMzMxLFxuICAgIHdoaXRlOiAxNjc3NzIxNSxcbiAgICB3aGl0ZXNtb2tlOiAxNjExOTI4NSxcbiAgICB5ZWxsb3c6IDE2Nzc2OTYwLFxuICAgIHllbGxvd2dyZWVuOiAxMDE0NTA3NFxuICB9KTtcbiAgZDNfcmdiX25hbWVzLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGQzX3JnYl9uYW1lcy5zZXQoa2V5LCBkM19yZ2JOdW1iZXIodmFsdWUpKTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGQzX2Z1bmN0b3Iodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdiA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbiAgfVxuICBkMy5mdW5jdG9yID0gZDNfZnVuY3RvcjtcbiAgZDMueGhyID0gZDNfeGhyVHlwZShkM19pZGVudGl0eSk7XG4gIGZ1bmN0aW9uIGQzX3hoclR5cGUocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCBtaW1lVHlwZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBtaW1lVHlwZSA9PT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjayA9IG1pbWVUeXBlLCBcbiAgICAgIG1pbWVUeXBlID0gbnVsbDtcbiAgICAgIHJldHVybiBkM194aHIodXJsLCBtaW1lVHlwZSwgcmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3hocih1cmwsIG1pbWVUeXBlLCByZXNwb25zZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgeGhyID0ge30sIGRpc3BhdGNoID0gZDMuZGlzcGF0Y2goXCJiZWZvcmVzZW5kXCIsIFwicHJvZ3Jlc3NcIiwgXCJsb2FkXCIsIFwiZXJyb3JcIiksIGhlYWRlcnMgPSB7fSwgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLCByZXNwb25zZVR5cGUgPSBudWxsO1xuICAgIGlmICh0aGlzLlhEb21haW5SZXF1ZXN0ICYmICEoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiByZXF1ZXN0KSAmJiAvXihodHRwKHMpPzopP1xcL1xcLy8udGVzdCh1cmwpKSByZXF1ZXN0ID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgXCJvbmxvYWRcIiBpbiByZXF1ZXN0ID8gcmVxdWVzdC5vbmxvYWQgPSByZXF1ZXN0Lm9uZXJyb3IgPSByZXNwb25kIDogcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlcXVlc3QucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZCgpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gcmVzcG9uZCgpIHtcbiAgICAgIHZhciBzdGF0dXMgPSByZXF1ZXN0LnN0YXR1cywgcmVzdWx0O1xuICAgICAgaWYgKCFzdGF0dXMgJiYgZDNfeGhySGFzUmVzcG9uc2UocmVxdWVzdCkgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoLmxvYWQuY2FsbCh4aHIsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgbyA9IGQzLmV2ZW50O1xuICAgICAgZDMuZXZlbnQgPSBldmVudDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRpc3BhdGNoLnByb2dyZXNzLmNhbGwoeGhyLCByZXF1ZXN0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzLmV2ZW50ID0gbztcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5oZWFkZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgbmFtZSA9IChuYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGhlYWRlcnNbbmFtZV07XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIGhlYWRlcnNbbmFtZV07IGVsc2UgaGVhZGVyc1tuYW1lXSA9IHZhbHVlICsgXCJcIjtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfTtcbiAgICB4aHIubWltZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWltZVR5cGU7XG4gICAgICBtaW1lVHlwZSA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmVzcG9uc2VUeXBlO1xuICAgICAgcmVzcG9uc2VUeXBlID0gdmFsdWU7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgeGhyLnJlc3BvbnNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3BvbnNlID0gdmFsdWU7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgWyBcImdldFwiLCBcInBvc3RcIiBdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICB4aHJbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geGhyLnNlbmQuYXBwbHkoeGhyLCBbIG1ldGhvZCBdLmNvbmNhdChkM19hcnJheShhcmd1bWVudHMpKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHhoci5zZW5kID0gZnVuY3Rpb24obWV0aG9kLCBkYXRhLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgICAgIHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiAhKFwiYWNjZXB0XCIgaW4gaGVhZGVycykpIGhlYWRlcnNbXCJhY2NlcHRcIl0gPSBtaW1lVHlwZSArIFwiLCovKlwiO1xuICAgICAgaWYgKHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcikgZm9yICh2YXIgbmFtZSBpbiBoZWFkZXJzKSByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIobmFtZSwgaGVhZGVyc1tuYW1lXSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUpIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZSk7XG4gICAgICBpZiAocmVzcG9uc2VUeXBlICE9IG51bGwpIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHhoci5vbihcImVycm9yXCIsIGNhbGxiYWNrKS5vbihcImxvYWRcIiwgZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXF1ZXN0KTtcbiAgICAgIH0pO1xuICAgICAgZGlzcGF0Y2guYmVmb3Jlc2VuZC5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICByZXF1ZXN0LnNlbmQoZGF0YSA9PSBudWxsID8gbnVsbCA6IGRhdGEpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIGQzLnJlYmluZCh4aHIsIGRpc3BhdGNoLCBcIm9uXCIpO1xuICAgIHJldHVybiBjYWxsYmFjayA9PSBudWxsID8geGhyIDogeGhyLmdldChkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spKTtcbiAgfVxuICBmdW5jdGlvbiBkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gY2FsbGJhY2subGVuZ3RoID09PSAxID8gZnVuY3Rpb24oZXJyb3IsIHJlcXVlc3QpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyByZXF1ZXN0IDogbnVsbCk7XG4gICAgfSA6IGNhbGxiYWNrO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3hockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICB2YXIgdHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xuICAgIHJldHVybiB0eXBlICYmIHR5cGUgIT09IFwidGV4dFwiID8gcmVxdWVzdC5yZXNwb25zZSA6IHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9XG4gIGQzLmRzdiA9IGZ1bmN0aW9uKGRlbGltaXRlciwgbWltZVR5cGUpIHtcbiAgICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKCdbXCInICsgZGVsaW1pdGVyICsgXCJcXG5dXCIpLCBkZWxpbWl0ZXJDb2RlID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG4gICAgZnVuY3Rpb24gZHN2KHVybCwgcm93LCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcbiAgICAgIHZhciB4aHIgPSBkM194aHIodXJsLCBtaW1lVHlwZSwgcm93ID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2Uocm93KSwgY2FsbGJhY2spO1xuICAgICAgeGhyLnJvdyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB4aHIucmVzcG9uc2UoKHJvdyA9IF8pID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2UoXykpIDogcm93O1xuICAgICAgfTtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0eXBlZFJlc3BvbnNlKGYpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQsIGYpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZHN2LnBhcnNlID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIG87XG4gICAgICByZXR1cm4gZHN2LnBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgICAgaWYgKG8pIHJldHVybiBvKHJvdywgaSAtIDEpO1xuICAgICAgICB2YXIgYSA9IG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgcm93Lm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gICAgICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuICAgICAgICBvID0gZiA/IGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgICAgIHJldHVybiBmKGEocm93KSwgaSk7XG4gICAgICAgIH0gOiBhO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBkc3YucGFyc2VSb3dzID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIEVPTCA9IHt9LCBFT0YgPSB7fSwgcm93cyA9IFtdLCBOID0gdGV4dC5sZW5ndGgsIEkgPSAwLCBuID0gMCwgdCwgZW9sO1xuICAgICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7XG4gICAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuICAgICAgICB2YXIgaiA9IEk7XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IDM0KSB7XG4gICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAzNCkge1xuICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMzQpIGJyZWFrO1xuICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEkgPSBpICsgMjtcbiAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICAgICAgaWYgKGMgPT09IDEzKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpICsgMikgPT09IDEwKSArK0k7XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAxMCkge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkpLnJlcGxhY2UoL1wiXCIvZywgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgICAgdmFyIGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSwgayA9IDE7XG4gICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlOyBlbHNlIGlmIChjID09PSAxMykge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IDEwKSArK0ksICsraztcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgIT09IGRlbGltaXRlckNvZGUpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIEkgLSBrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcbiAgICAgICAgICBhLnB1c2godCk7XG4gICAgICAgICAgdCA9IHRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGYgJiYgKGEgPSBmKGEsIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICByb3dzLnB1c2goYSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm93cztcbiAgICB9O1xuICAgIGRzdi5mb3JtYXQgPSBmdW5jdGlvbihyb3dzKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dzWzBdKSkgcmV0dXJuIGRzdi5mb3JtYXRSb3dzKHJvd3MpO1xuICAgICAgdmFyIGZpZWxkU2V0ID0gbmV3IGQzX1NldCgpLCBmaWVsZHMgPSBbXTtcbiAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgZm9yICh2YXIgZmllbGQgaW4gcm93KSB7XG4gICAgICAgICAgaWYgKCFmaWVsZFNldC5oYXMoZmllbGQpKSB7XG4gICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZFNldC5hZGQoZmllbGQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFsgZmllbGRzLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpIF0uY29uY2F0KHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICByZXR1cm4gZmllbGRzLm1hcChmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbZmllbGRdKTtcbiAgICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBkc3YuZm9ybWF0Um93cyA9IGZ1bmN0aW9uKHJvd3MpIHtcbiAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgICByZXR1cm4gcmVGb3JtYXQudGVzdCh0ZXh0KSA/ICdcIicgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgJ1wiXCInKSArICdcIicgOiB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gZHN2O1xuICB9O1xuICBkMy5jc3YgPSBkMy5kc3YoXCIsXCIsIFwidGV4dC9jc3ZcIik7XG4gIGQzLnRzdiA9IGQzLmRzdihcIlx0XCIsIFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiKTtcbiAgdmFyIGQzX3RpbWVyX3F1ZXVlSGVhZCwgZDNfdGltZXJfcXVldWVUYWlsLCBkM190aW1lcl9pbnRlcnZhbCwgZDNfdGltZXJfdGltZW91dCwgZDNfdGltZXJfZnJhbWUgPSB0aGlzW2QzX3ZlbmRvclN5bWJvbCh0aGlzLCBcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiKV0gfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNyk7XG4gIH07XG4gIGQzLnRpbWVyID0gZnVuY3Rpb24oKSB7XG4gICAgZDNfdGltZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aGVuKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChuIDwgMikgZGVsYXkgPSAwO1xuICAgIGlmIChuIDwgMykgdGhlbiA9IERhdGUubm93KCk7XG4gICAgdmFyIHRpbWUgPSB0aGVuICsgZGVsYXksIHRpbWVyID0ge1xuICAgICAgYzogY2FsbGJhY2ssXG4gICAgICB0OiB0aW1lLFxuICAgICAgbjogbnVsbFxuICAgIH07XG4gICAgaWYgKGQzX3RpbWVyX3F1ZXVlVGFpbCkgZDNfdGltZXJfcXVldWVUYWlsLm4gPSB0aW1lcjsgZWxzZSBkM190aW1lcl9xdWV1ZUhlYWQgPSB0aW1lcjtcbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0aW1lcjtcbiAgICBpZiAoIWQzX3RpbWVyX2ludGVydmFsKSB7XG4gICAgICBkM190aW1lcl90aW1lb3V0ID0gY2xlYXJUaW1lb3V0KGQzX3RpbWVyX3RpbWVvdXQpO1xuICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG4gICAgfVxuICAgIHJldHVybiB0aW1lcjtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lcl9zdGVwKCkge1xuICAgIHZhciBub3cgPSBkM190aW1lcl9tYXJrKCksIGRlbGF5ID0gZDNfdGltZXJfc3dlZXAoKSAtIG5vdztcbiAgICBpZiAoZGVsYXkgPiAyNCkge1xuICAgICAgaWYgKGlzRmluaXRlKGRlbGF5KSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZDNfdGltZXJfdGltZW91dCk7XG4gICAgICAgIGQzX3RpbWVyX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGQzX3RpbWVyX3N0ZXAsIGRlbGF5KTtcbiAgICAgIH1cbiAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG4gICAgfVxuICB9XG4gIGQzLnRpbWVyLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgZDNfdGltZXJfbWFyaygpO1xuICAgIGQzX3RpbWVyX3N3ZWVwKCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RpbWVyX21hcmsoKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCksIHRpbWVyID0gZDNfdGltZXJfcXVldWVIZWFkO1xuICAgIHdoaWxlICh0aW1lcikge1xuICAgICAgaWYgKG5vdyA+PSB0aW1lci50ICYmIHRpbWVyLmMobm93IC0gdGltZXIudCkpIHRpbWVyLmMgPSBudWxsO1xuICAgICAgdGltZXIgPSB0aW1lci5uO1xuICAgIH1cbiAgICByZXR1cm4gbm93O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVyX3N3ZWVwKCkge1xuICAgIHZhciB0MCwgdDEgPSBkM190aW1lcl9xdWV1ZUhlYWQsIHRpbWUgPSBJbmZpbml0eTtcbiAgICB3aGlsZSAodDEpIHtcbiAgICAgIGlmICh0MS5jKSB7XG4gICAgICAgIGlmICh0MS50IDwgdGltZSkgdGltZSA9IHQxLnQ7XG4gICAgICAgIHQxID0gKHQwID0gdDEpLm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0MSA9IHQwID8gdDAubiA9IHQxLm4gOiBkM190aW1lcl9xdWV1ZUhlYWQgPSB0MS5uO1xuICAgICAgfVxuICAgIH1cbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0MDtcbiAgICByZXR1cm4gdGltZTtcbiAgfVxuICBmdW5jdGlvbiBkM19mb3JtYXRfcHJlY2lzaW9uKHgsIHApIHtcbiAgICByZXR1cm4gcCAtICh4ID8gTWF0aC5jZWlsKE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwKSA6IDEpO1xuICB9XG4gIGQzLnJvdW5kID0gZnVuY3Rpb24oeCwgbikge1xuICAgIHJldHVybiBuID8gTWF0aC5yb3VuZCh4ICogKG4gPSBNYXRoLnBvdygxMCwgbikpKSAvIG4gOiBNYXRoLnJvdW5kKHgpO1xuICB9O1xuICB2YXIgZDNfZm9ybWF0UHJlZml4ZXMgPSBbIFwieVwiLCBcInpcIiwgXCJhXCIsIFwiZlwiLCBcInBcIiwgXCJuXCIsIFwiwrVcIiwgXCJtXCIsIFwiXCIsIFwia1wiLCBcIk1cIiwgXCJHXCIsIFwiVFwiLCBcIlBcIiwgXCJFXCIsIFwiWlwiLCBcIllcIiBdLm1hcChkM19mb3JtYXRQcmVmaXgpO1xuICBkMy5mb3JtYXRQcmVmaXggPSBmdW5jdGlvbih2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlmICh2YWx1ZSA9ICt2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgKj0gLTE7XG4gICAgICBpZiAocHJlY2lzaW9uKSB2YWx1ZSA9IGQzLnJvdW5kKHZhbHVlLCBkM19mb3JtYXRfcHJlY2lzaW9uKHZhbHVlLCBwcmVjaXNpb24pKTtcbiAgICAgIGkgPSAxICsgTWF0aC5mbG9vcigxZS0xMiArIE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4xMCk7XG4gICAgICBpID0gTWF0aC5tYXgoLTI0LCBNYXRoLm1pbigyNCwgTWF0aC5mbG9vcigoaSAtIDEpIC8gMykgKiAzKSk7XG4gICAgfVxuICAgIHJldHVybiBkM19mb3JtYXRQcmVmaXhlc1s4ICsgaSAvIDNdO1xuICB9O1xuICBmdW5jdGlvbiBkM19mb3JtYXRQcmVmaXgoZCwgaSkge1xuICAgIHZhciBrID0gTWF0aC5wb3coMTAsIGFicyg4IC0gaSkgKiAzKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2NhbGU6IGkgPiA4ID8gZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZCAvIGs7XG4gICAgICB9IDogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZCAqIGs7XG4gICAgICB9LFxuICAgICAgc3ltYm9sOiBkXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLCBsb2NhbGVfdGhvdXNhbmRzID0gbG9jYWxlLnRob3VzYW5kcywgbG9jYWxlX2dyb3VwaW5nID0gbG9jYWxlLmdyb3VwaW5nLCBsb2NhbGVfY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksIGZvcm1hdEdyb3VwID0gbG9jYWxlX2dyb3VwaW5nICYmIGxvY2FsZV90aG91c2FuZHMgPyBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLCB0ID0gW10sIGogPSAwLCBnID0gbG9jYWxlX2dyb3VwaW5nWzBdLCBsZW5ndGggPSAwO1xuICAgICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgICBnID0gbG9jYWxlX2dyb3VwaW5nW2ogPSAoaiArIDEpICUgbG9jYWxlX2dyb3VwaW5nLmxlbmd0aF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbihsb2NhbGVfdGhvdXNhbmRzKTtcbiAgICB9IDogZDNfaWRlbnRpdHk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIG1hdGNoID0gZDNfZm9ybWF0X3JlLmV4ZWMoc3BlY2lmaWVyKSwgZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiLCBhbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiLCBzaWduID0gbWF0Y2hbM10gfHwgXCItXCIsIHN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCIsIHpmaWxsID0gbWF0Y2hbNV0sIHdpZHRoID0gK21hdGNoWzZdLCBjb21tYSA9IG1hdGNoWzddLCBwcmVjaXNpb24gPSBtYXRjaFs4XSwgdHlwZSA9IG1hdGNoWzldLCBzY2FsZSA9IDEsIHByZWZpeCA9IFwiXCIsIHN1ZmZpeCA9IFwiXCIsIGludGVnZXIgPSBmYWxzZSwgZXhwb25lbnQgPSB0cnVlO1xuICAgICAgaWYgKHByZWNpc2lvbikgcHJlY2lzaW9uID0gK3ByZWNpc2lvbi5zdWJzdHJpbmcoMSk7XG4gICAgICBpZiAoemZpbGwgfHwgZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSB7XG4gICAgICAgIHpmaWxsID0gZmlsbCA9IFwiMFwiO1xuICAgICAgICBhbGlnbiA9IFwiPVwiO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgY2FzZSBcIm5cIjpcbiAgICAgICAgY29tbWEgPSB0cnVlO1xuICAgICAgICB0eXBlID0gXCJnXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcIiVcIjpcbiAgICAgICAgc2NhbGUgPSAxMDA7XG4gICAgICAgIHN1ZmZpeCA9IFwiJVwiO1xuICAgICAgICB0eXBlID0gXCJmXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcInBcIjpcbiAgICAgICAgc2NhbGUgPSAxMDA7XG4gICAgICAgIHN1ZmZpeCA9IFwiJVwiO1xuICAgICAgICB0eXBlID0gXCJyXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcImJcIjpcbiAgICAgICBjYXNlIFwib1wiOlxuICAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgaWYgKHN5bWJvbCA9PT0gXCIjXCIpIHByZWZpeCA9IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgZXhwb25lbnQgPSBmYWxzZTtcblxuICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIGludGVnZXIgPSB0cnVlO1xuICAgICAgICBwcmVjaXNpb24gPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIHNjYWxlID0gLTE7XG4gICAgICAgIHR5cGUgPSBcInJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoc3ltYm9sID09PSBcIiRcIikgcHJlZml4ID0gbG9jYWxlX2N1cnJlbmN5WzBdLCBzdWZmaXggPSBsb2NhbGVfY3VycmVuY3lbMV07XG4gICAgICBpZiAodHlwZSA9PSBcInJcIiAmJiAhcHJlY2lzaW9uKSB0eXBlID0gXCJnXCI7XG4gICAgICBpZiAocHJlY2lzaW9uICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJnXCIpIHByZWNpc2lvbiA9IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKTsgZWxzZSBpZiAodHlwZSA9PSBcImVcIiB8fCB0eXBlID09IFwiZlwiKSBwcmVjaXNpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG4gICAgICB9XG4gICAgICB0eXBlID0gZDNfZm9ybWF0X3R5cGVzLmdldCh0eXBlKSB8fCBkM19mb3JtYXRfdHlwZURlZmF1bHQ7XG4gICAgICB2YXIgemNvbW1hID0gemZpbGwgJiYgY29tbWE7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGZ1bGxTdWZmaXggPSBzdWZmaXg7XG4gICAgICAgIGlmIChpbnRlZ2VyICYmIHZhbHVlICUgMSkgcmV0dXJuIFwiXCI7XG4gICAgICAgIHZhciBuZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gKHZhbHVlID0gLXZhbHVlLCBcIi1cIikgOiBzaWduID09PSBcIi1cIiA/IFwiXCIgOiBzaWduO1xuICAgICAgICBpZiAoc2NhbGUgPCAwKSB7XG4gICAgICAgICAgdmFyIHVuaXQgPSBkMy5mb3JtYXRQcmVmaXgodmFsdWUsIHByZWNpc2lvbik7XG4gICAgICAgICAgdmFsdWUgPSB1bml0LnNjYWxlKHZhbHVlKTtcbiAgICAgICAgICBmdWxsU3VmZml4ID0gdW5pdC5zeW1ib2wgKyBzdWZmaXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgKj0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB0eXBlKHZhbHVlLCBwcmVjaXNpb24pO1xuICAgICAgICB2YXIgaSA9IHZhbHVlLmxhc3RJbmRleE9mKFwiLlwiKSwgYmVmb3JlLCBhZnRlcjtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgdmFyIGogPSBleHBvbmVudCA/IHZhbHVlLmxhc3RJbmRleE9mKFwiZVwiKSA6IC0xO1xuICAgICAgICAgIGlmIChqIDwgMCkgYmVmb3JlID0gdmFsdWUsIGFmdGVyID0gXCJcIjsgZWxzZSBiZWZvcmUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgaiksIGFmdGVyID0gdmFsdWUuc3Vic3RyaW5nKGopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IHZhbHVlLnN1YnN0cmluZygwLCBpKTtcbiAgICAgICAgICBhZnRlciA9IGxvY2FsZV9kZWNpbWFsICsgdmFsdWUuc3Vic3RyaW5nKGkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXpmaWxsICYmIGNvbW1hKSBiZWZvcmUgPSBmb3JtYXRHcm91cChiZWZvcmUsIEluZmluaXR5KTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHByZWZpeC5sZW5ndGggKyBiZWZvcmUubGVuZ3RoICsgYWZ0ZXIubGVuZ3RoICsgKHpjb21tYSA/IDAgOiBuZWdhdGl2ZS5sZW5ndGgpLCBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkobGVuZ3RoID0gd2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcbiAgICAgICAgaWYgKHpjb21tYSkgYmVmb3JlID0gZm9ybWF0R3JvdXAocGFkZGluZyArIGJlZm9yZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIGFmdGVyLmxlbmd0aCA6IEluZmluaXR5KTtcbiAgICAgICAgbmVnYXRpdmUgKz0gcHJlZml4O1xuICAgICAgICB2YWx1ZSA9IGJlZm9yZSArIGFmdGVyO1xuICAgICAgICByZXR1cm4gKGFsaWduID09PSBcIjxcIiA/IG5lZ2F0aXZlICsgdmFsdWUgKyBwYWRkaW5nIDogYWxpZ24gPT09IFwiPlwiID8gcGFkZGluZyArIG5lZ2F0aXZlICsgdmFsdWUgOiBhbGlnbiA9PT0gXCJeXCIgPyBwYWRkaW5nLnN1YnN0cmluZygwLCBsZW5ndGggPj49IDEpICsgbmVnYXRpdmUgKyB2YWx1ZSArIHBhZGRpbmcuc3Vic3RyaW5nKGxlbmd0aCkgOiBuZWdhdGl2ZSArICh6Y29tbWEgPyB2YWx1ZSA6IHBhZGRpbmcgKyB2YWx1ZSkpICsgZnVsbFN1ZmZpeDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZm9ybWF0X3JlID0gLyg/OihbXntdKT8oWzw+PV5dKSk/KFsrXFwtIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuLT9cXGQrKT8oW2EteiVdKT8vaTtcbiAgdmFyIGQzX2Zvcm1hdF90eXBlcyA9IGQzLm1hcCh7XG4gICAgYjogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMik7XG4gICAgfSxcbiAgICBjOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgICB9LFxuICAgIG86IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4LnRvU3RyaW5nKDgpO1xuICAgIH0sXG4gICAgeDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpO1xuICAgIH0sXG4gICAgWDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgfSxcbiAgICBnOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b1ByZWNpc2lvbihwKTtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uKHgsIHApIHtcbiAgICAgIHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b0ZpeGVkKHApO1xuICAgIH0sXG4gICAgcjogZnVuY3Rpb24oeCwgcCkge1xuICAgICAgcmV0dXJuICh4ID0gZDMucm91bmQoeCwgZDNfZm9ybWF0X3ByZWNpc2lvbih4LCBwKSkpLnRvRml4ZWQoTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIGQzX2Zvcm1hdF9wcmVjaXNpb24oeCAqICgxICsgMWUtMTUpLCBwKSkpKTtcbiAgICB9XG4gIH0pO1xuICBmdW5jdGlvbiBkM19mb3JtYXRfdHlwZURlZmF1bHQoeCkge1xuICAgIHJldHVybiB4ICsgXCJcIjtcbiAgfVxuICB2YXIgZDNfdGltZSA9IGQzLnRpbWUgPSB7fSwgZDNfZGF0ZSA9IERhdGU7XG4gIGZ1bmN0aW9uIGQzX2RhdGVfdXRjKCkge1xuICAgIHRoaXMuXyA9IG5ldyBEYXRlKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gRGF0ZS5VVEMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGFyZ3VtZW50c1swXSk7XG4gIH1cbiAgZDNfZGF0ZV91dGMucHJvdG90eXBlID0ge1xuICAgIGdldERhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXRlKCk7XG4gICAgfSxcbiAgICBnZXREYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXkoKTtcbiAgICB9LFxuICAgIGdldEZ1bGxZZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDRnVsbFllYXIoKTtcbiAgICB9LFxuICAgIGdldEhvdXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDSG91cnMoKTtcbiAgICB9LFxuICAgIGdldE1pbGxpc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIH0sXG4gICAgZ2V0TWludXRlczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbnV0ZXMoKTtcbiAgICB9LFxuICAgIGdldE1vbnRoOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDTW9udGgoKTtcbiAgICB9LFxuICAgIGdldFNlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENTZWNvbmRzKCk7XG4gICAgfSxcbiAgICBnZXRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VGltZSgpO1xuICAgIH0sXG4gICAgZ2V0VGltZXpvbmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8udmFsdWVPZigpO1xuICAgIH0sXG4gICAgc2V0RGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXRlLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldERheTogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXkuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0RnVsbFllYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDRnVsbFllYXIuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0SG91cnM6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDSG91cnMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TWlsbGlzZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbGxpc2Vjb25kcy5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzZXRNaW51dGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbnV0ZXMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TW9udGg6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDTW9udGguYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0U2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENTZWNvbmRzLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldFRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VGltZS5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xuICB2YXIgZDNfdGltZV9wcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbiAgZnVuY3Rpb24gZDNfdGltZV9pbnRlcnZhbChsb2NhbCwgc3RlcCwgbnVtYmVyKSB7XG4gICAgZnVuY3Rpb24gcm91bmQoZGF0ZSkge1xuICAgICAgdmFyIGQwID0gbG9jYWwoZGF0ZSksIGQxID0gb2Zmc2V0KGQwLCAxKTtcbiAgICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjZWlsKGRhdGUpIHtcbiAgICAgIHN0ZXAoZGF0ZSA9IGxvY2FsKG5ldyBkM19kYXRlKGRhdGUgLSAxKSksIDEpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9mZnNldChkYXRlLCBrKSB7XG4gICAgICBzdGVwKGRhdGUgPSBuZXcgZDNfZGF0ZSgrZGF0ZSksIGspO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlKHQwLCB0MSwgZHQpIHtcbiAgICAgIHZhciB0aW1lID0gY2VpbCh0MCksIHRpbWVzID0gW107XG4gICAgICBpZiAoZHQgPiAxKSB7XG4gICAgICAgIHdoaWxlICh0aW1lIDwgdDEpIHtcbiAgICAgICAgICBpZiAoIShudW1iZXIodGltZSkgJSBkdCkpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKTtcbiAgICAgICAgICBzdGVwKHRpbWUsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAodGltZSA8IHQxKSB0aW1lcy5wdXNoKG5ldyBEYXRlKCt0aW1lKSksIHN0ZXAodGltZSwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGltZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlX3V0Yyh0MCwgdDEsIGR0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBkM19kYXRlID0gZDNfZGF0ZV91dGM7XG4gICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZV91dGMoKTtcbiAgICAgICAgdXRjLl8gPSB0MDtcbiAgICAgICAgcmV0dXJuIHJhbmdlKHV0YywgdDEsIGR0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2NhbC5mbG9vciA9IGxvY2FsO1xuICAgIGxvY2FsLnJvdW5kID0gcm91bmQ7XG4gICAgbG9jYWwuY2VpbCA9IGNlaWw7XG4gICAgbG9jYWwub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIGxvY2FsLnJhbmdlID0gcmFuZ2U7XG4gICAgdmFyIHV0YyA9IGxvY2FsLnV0YyA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKGxvY2FsKTtcbiAgICB1dGMuZmxvb3IgPSB1dGM7XG4gICAgdXRjLnJvdW5kID0gZDNfdGltZV9pbnRlcnZhbF91dGMocm91bmQpO1xuICAgIHV0Yy5jZWlsID0gZDNfdGltZV9pbnRlcnZhbF91dGMoY2VpbCk7XG4gICAgdXRjLm9mZnNldCA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKG9mZnNldCk7XG4gICAgdXRjLnJhbmdlID0gcmFuZ2VfdXRjO1xuICAgIHJldHVybiBsb2NhbDtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2ludGVydmFsX3V0YyhtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICB2YXIgdXRjID0gbmV3IGQzX2RhdGVfdXRjKCk7XG4gICAgICAgIHV0Yy5fID0gZGF0ZTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZCh1dGMsIGspLl87XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzX3RpbWUueWVhciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUgPSBkM190aW1lLmRheShkYXRlKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIHJldHVybiBkYXRlO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9KTtcbiAgZDNfdGltZS55ZWFycyA9IGQzX3RpbWUueWVhci5yYW5nZTtcbiAgZDNfdGltZS55ZWFycy51dGMgPSBkM190aW1lLnllYXIudXRjLnJhbmdlO1xuICBkM190aW1lLmRheSA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkYXkgPSBuZXcgZDNfZGF0ZSgyZTMsIDApO1xuICAgIGRheS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgIHJldHVybiBkYXk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIG9mZnNldCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xuICB9KTtcbiAgZDNfdGltZS5kYXlzID0gZDNfdGltZS5kYXkucmFuZ2U7XG4gIGQzX3RpbWUuZGF5cy51dGMgPSBkM190aW1lLmRheS51dGMucmFuZ2U7XG4gIGQzX3RpbWUuZGF5T2ZZZWFyID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB5ZWFyID0gZDNfdGltZS55ZWFyKGRhdGUpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKChkYXRlIC0geWVhciAtIChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLSB5ZWFyLmdldFRpbWV6b25lT2Zmc2V0KCkpICogNmU0KSAvIDg2NGU1KTtcbiAgfTtcbiAgWyBcInN1bmRheVwiLCBcIm1vbmRheVwiLCBcInR1ZXNkYXlcIiwgXCJ3ZWRuZXNkYXlcIiwgXCJ0aHVyc2RheVwiLCBcImZyaWRheVwiLCBcInNhdHVyZGF5XCIgXS5mb3JFYWNoKGZ1bmN0aW9uKGRheSwgaSkge1xuICAgIGkgPSA3IC0gaTtcbiAgICB2YXIgaW50ZXJ2YWwgPSBkM190aW1lW2RheV0gPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIChkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSkpLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIGkpICUgNyk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDcpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpIC0gKGRheSAhPT0gaSk7XG4gICAgfSk7XG4gICAgZDNfdGltZVtkYXkgKyBcInNcIl0gPSBpbnRlcnZhbC5yYW5nZTtcbiAgICBkM190aW1lW2RheSArIFwic1wiXS51dGMgPSBpbnRlcnZhbC51dGMucmFuZ2U7XG4gICAgZDNfdGltZVtkYXkgKyBcIk9mWWVhclwiXSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpO1xuICAgIH07XG4gIH0pO1xuICBkM190aW1lLndlZWsgPSBkM190aW1lLnN1bmRheTtcbiAgZDNfdGltZS53ZWVrcyA9IGQzX3RpbWUuc3VuZGF5LnJhbmdlO1xuICBkM190aW1lLndlZWtzLnV0YyA9IGQzX3RpbWUuc3VuZGF5LnV0Yy5yYW5nZTtcbiAgZDNfdGltZS53ZWVrT2ZZZWFyID0gZDNfdGltZS5zdW5kYXlPZlllYXI7XG4gIGZ1bmN0aW9uIGQzX2xvY2FsZV90aW1lRm9ybWF0KGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsIGxvY2FsZV9kYXlzID0gbG9jYWxlLmRheXMsIGxvY2FsZV9zaG9ydERheXMgPSBsb2NhbGUuc2hvcnREYXlzLCBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocywgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuICAgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKSB7XG4gICAgICB2YXIgbiA9IHRlbXBsYXRlLmxlbmd0aDtcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgICAgIHZhciBzdHJpbmcgPSBbXSwgaSA9IC0xLCBqID0gMCwgYywgcCwgZjtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpZiAodGVtcGxhdGUuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICAgIHN0cmluZy5wdXNoKHRlbXBsYXRlLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICAgIGlmICgocCA9IGQzX3RpbWVfZm9ybWF0UGFkc1tjID0gdGVtcGxhdGUuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gdGVtcGxhdGUuY2hhckF0KCsraSk7XG4gICAgICAgICAgICBpZiAoZiA9IGQzX3RpbWVfZm9ybWF0c1tjXSkgYyA9IGYoZGF0ZSwgcCA9PSBudWxsID8gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiIDogcCk7XG4gICAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyaW5nLnB1c2godGVtcGxhdGUuc2xpY2UoaiwgaSkpO1xuICAgICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICB9XG4gICAgICBmb3JtYXQucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgdmFyIGQgPSB7XG4gICAgICAgICAgeTogMTkwMCxcbiAgICAgICAgICBtOiAwLFxuICAgICAgICAgIGQ6IDEsXG4gICAgICAgICAgSDogMCxcbiAgICAgICAgICBNOiAwLFxuICAgICAgICAgIFM6IDAsXG4gICAgICAgICAgTDogMCxcbiAgICAgICAgICBaOiBudWxsXG4gICAgICAgIH0sIGkgPSBkM190aW1lX3BhcnNlKGQsIHRlbXBsYXRlLCBzdHJpbmcsIDApO1xuICAgICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG4gICAgICAgIHZhciBsb2NhbFogPSBkLlogIT0gbnVsbCAmJiBkM19kYXRlICE9PSBkM19kYXRlX3V0YywgZGF0ZSA9IG5ldyAobG9jYWxaID8gZDNfZGF0ZV91dGMgOiBkM19kYXRlKSgpO1xuICAgICAgICBpZiAoXCJqXCIgaW4gZCkgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIGQuaik7IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIDEpO1xuICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55LCAwLCBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDYpICUgNyk7XG4gICAgICAgIH0gZWxzZSBkYXRlLnNldEZ1bGxZZWFyKGQueSwgZC5tLCBkLmQpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKGQuSCArIChkLlogLyAxMDAgfCAwKSwgZC5NICsgZC5aICUgMTAwLCBkLlMsIGQuTCk7XG4gICAgICAgIHJldHVybiBsb2NhbFogPyBkYXRlLl8gOiBkYXRlO1xuICAgICAgfTtcbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZShkYXRlLCB0ZW1wbGF0ZSwgc3RyaW5nLCBqKSB7XG4gICAgICB2YXIgYywgcCwgdCwgaSA9IDAsIG4gPSB0ZW1wbGF0ZS5sZW5ndGgsIG0gPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgICAgYyA9IHRlbXBsYXRlLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgICAgdCA9IHRlbXBsYXRlLmNoYXJBdChpKyspO1xuICAgICAgICAgIHAgPSBkM190aW1lX3BhcnNlcnNbdCBpbiBkM190aW1lX2Zvcm1hdFBhZHMgPyB0ZW1wbGF0ZS5jaGFyQXQoaSsrKSA6IHRdO1xuICAgICAgICAgIGlmICghcCB8fCAoaiA9IHAoZGF0ZSwgc3RyaW5nLCBqKSkgPCAwKSByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gajtcbiAgICB9XG4gICAgZDNfdGltZV9mb3JtYXQudXRjID0gZnVuY3Rpb24odGVtcGxhdGUpIHtcbiAgICAgIHZhciBsb2NhbCA9IGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKTtcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZSgpO1xuICAgICAgICAgIHV0Yy5fID0gZGF0ZTtcbiAgICAgICAgICByZXR1cm4gbG9jYWwodXRjKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9ybWF0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICAgIHZhciBkYXRlID0gbG9jYWwucGFyc2Uoc3RyaW5nKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLl87XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IERhdGU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmb3JtYXQudG9TdHJpbmcgPSBsb2NhbC50b1N0cmluZztcbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfTtcbiAgICBkM190aW1lX2Zvcm1hdC5tdWx0aSA9IGQzX3RpbWVfZm9ybWF0LnV0Yy5tdWx0aSA9IGQzX3RpbWVfZm9ybWF0TXVsdGk7XG4gICAgdmFyIGQzX3RpbWVfcGVyaW9kTG9va3VwID0gZDMubWFwKCksIGQzX3RpbWVfZGF5UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9kYXlzKSwgZDNfdGltZV9kYXlMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfZGF5cyksIGQzX3RpbWVfZGF5QWJicmV2UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX2RheUFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX21vbnRoUmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9tb250aHMpLCBkM190aW1lX21vbnRoTG9va3VwID0gZDNfdGltZV9mb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksIGQzX3RpbWVfbW9udGhBYmJyZXZSZSA9IGQzX3RpbWVfZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSwgZDNfdGltZV9tb250aEFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG4gICAgbG9jYWxlX3BlcmlvZHMuZm9yRWFjaChmdW5jdGlvbihwLCBpKSB7XG4gICAgICBkM190aW1lX3BlcmlvZExvb2t1cC5zZXQocC50b0xvd2VyQ2FzZSgpLCBpKTtcbiAgICB9KTtcbiAgICB2YXIgZDNfdGltZV9mb3JtYXRzID0ge1xuICAgICAgYTogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3Nob3J0RGF5c1tkLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBBOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfZGF5c1tkLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBiOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgICAgIH0sXG4gICAgICBCOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gICAgICB9LFxuICAgICAgYzogZDNfdGltZV9mb3JtYXQobG9jYWxlX2RhdGVUaW1lKSxcbiAgICAgIGQ6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBlOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldERhdGUoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgSDogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBJOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG4gICAgICB9LFxuICAgICAgajogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoMSArIGQzX3RpbWUuZGF5T2ZZZWFyKGQpLCBwLCAzKTtcbiAgICAgIH0sXG4gICAgICBMOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbiAgICAgIH0sXG4gICAgICBtOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBNOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgcDogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgICAgIH0sXG4gICAgICBTOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgVTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5zdW5kYXlPZlllYXIoZCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHc6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuZ2V0RGF5KCk7XG4gICAgICB9LFxuICAgICAgVzogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5tb25kYXlPZlllYXIoZCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV9kYXRlKSxcbiAgICAgIFg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV90aW1lKSxcbiAgICAgIHk6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG4gICAgICB9LFxuICAgICAgWTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRGdWxsWWVhcigpICUgMWU0LCBwLCA0KTtcbiAgICAgIH0sXG4gICAgICBaOiBkM190aW1lX3pvbmUsXG4gICAgICBcIiVcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIiVcIjtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBkM190aW1lX3BhcnNlcnMgPSB7XG4gICAgICBhOiBkM190aW1lX3BhcnNlV2Vla2RheUFiYnJldixcbiAgICAgIEE6IGQzX3RpbWVfcGFyc2VXZWVrZGF5LFxuICAgICAgYjogZDNfdGltZV9wYXJzZU1vbnRoQWJicmV2LFxuICAgICAgQjogZDNfdGltZV9wYXJzZU1vbnRoLFxuICAgICAgYzogZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwsXG4gICAgICBkOiBkM190aW1lX3BhcnNlRGF5LFxuICAgICAgZTogZDNfdGltZV9wYXJzZURheSxcbiAgICAgIEg6IGQzX3RpbWVfcGFyc2VIb3VyMjQsXG4gICAgICBJOiBkM190aW1lX3BhcnNlSG91cjI0LFxuICAgICAgajogZDNfdGltZV9wYXJzZURheU9mWWVhcixcbiAgICAgIEw6IGQzX3RpbWVfcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgICBtOiBkM190aW1lX3BhcnNlTW9udGhOdW1iZXIsXG4gICAgICBNOiBkM190aW1lX3BhcnNlTWludXRlcyxcbiAgICAgIHA6IGQzX3RpbWVfcGFyc2VBbVBtLFxuICAgICAgUzogZDNfdGltZV9wYXJzZVNlY29uZHMsXG4gICAgICBVOiBkM190aW1lX3BhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICAgIHc6IGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyLFxuICAgICAgVzogZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgICB4OiBkM190aW1lX3BhcnNlTG9jYWxlRGF0ZSxcbiAgICAgIFg6IGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lLFxuICAgICAgeTogZDNfdGltZV9wYXJzZVllYXIsXG4gICAgICBZOiBkM190aW1lX3BhcnNlRnVsbFllYXIsXG4gICAgICBaOiBkM190aW1lX3BhcnNlWm9uZSxcbiAgICAgIFwiJVwiOiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheUFiYnJldlJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5QWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aEFiYnJldihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIGQzX3RpbWVfbW9udGhBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX21vbnRoQWJicmV2UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gZDNfdGltZV9tb250aEFiYnJldkxvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTW9udGgoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICBkM190aW1lX21vbnRoUmUubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBuID0gZDNfdGltZV9tb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUubSA9IGQzX3RpbWVfbW9udGhMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gZDNfdGltZV9wYXJzZShkYXRlLCBkM190aW1lX2Zvcm1hdHMuYy50b1N0cmluZygpLCBzdHJpbmcsIGkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTG9jYWxlRGF0ZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3BhcnNlKGRhdGUsIGQzX3RpbWVfZm9ybWF0cy54LnRvU3RyaW5nKCksIHN0cmluZywgaSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lKGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgcmV0dXJuIGQzX3RpbWVfcGFyc2UoZGF0ZSwgZDNfdGltZV9mb3JtYXRzLlgudG9TdHJpbmcoKSwgc3RyaW5nLCBpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUFtUG0oZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IGQzX3RpbWVfcGVyaW9kTG9va3VwLmdldChzdHJpbmcuc2xpY2UoaSwgaSArPSAyKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIHJldHVybiBuID09IG51bGwgPyAtMSA6IChkYXRlLnAgPSBuLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0O1xuICB9XG4gIHZhciBkM190aW1lX2Zvcm1hdFBhZHMgPSB7XG4gICAgXCItXCI6IFwiXCIsXG4gICAgXzogXCIgXCIsXG4gICAgXCIwXCI6IFwiMFwiXG4gIH0sIGQzX3RpbWVfbnVtYmVyUmUgPSAvXlxccypcXGQrLywgZDNfdGltZV9wZXJjZW50UmUgPSAvXiUvO1xuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdFBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIiwgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRSZShuYW1lcykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKGQzLnJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdExvb2t1cChuYW1lcykge1xuICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwKCksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgbWFwLnNldChuYW1lc1tpXS50b0xvd2VyQ2FzZSgpLCBpKTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGRhdGUuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXkoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRnVsbFllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9IGQzX3RpbWVfZXhwYW5kWWVhcigrblswXSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlWm9uZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gL15bKy1dXFxkezR9JC8udGVzdChzdHJpbmcgPSBzdHJpbmcuc2xpY2UoaSwgaSArIDUpKSA/IChkYXRlLlogPSAtc3RyaW5nLCBcbiAgICBpICsgNSkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2V4cGFuZFllYXIoZCkge1xuICAgIHJldHVybiBkICsgKGQgPiA2OCA/IDE5MDAgOiAyZTMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aE51bWJlcihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VEYXlPZlllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICAgIHJldHVybiBuID8gKGRhdGUuaiA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUhvdXIyNChkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWludXRlcyhkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlU2Vjb25kcyhkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfem9uZShkKSB7XG4gICAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCksIHpzID0geiA+IDAgPyBcIi1cIiA6IFwiK1wiLCB6aCA9IGFicyh6KSAvIDYwIHwgMCwgem0gPSBhYnMoeikgJSA2MDtcbiAgICByZXR1cm4genMgKyBkM190aW1lX2Zvcm1hdFBhZCh6aCwgXCIwXCIsIDIpICsgZDNfdGltZV9mb3JtYXRQYWQoem0sIFwiMFwiLCAyKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnQoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9wZXJjZW50UmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gICAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdE11bHRpKGZvcm1hdHMpIHtcbiAgICB2YXIgbiA9IGZvcm1hdHMubGVuZ3RoLCBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8IG4pIGZvcm1hdHNbaV1bMF0gPSB0aGlzKGZvcm1hdHNbaV1bMF0pO1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgaSA9IDAsIGYgPSBmb3JtYXRzW2ldO1xuICAgICAgd2hpbGUgKCFmWzFdKGRhdGUpKSBmID0gZm9ybWF0c1srK2ldO1xuICAgICAgcmV0dXJuIGZbMF0oZGF0ZSk7XG4gICAgfTtcbiAgfVxuICBkMy5sb2NhbGUgPSBmdW5jdGlvbihsb2NhbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyRm9ybWF0OiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSksXG4gICAgICB0aW1lRm9ybWF0OiBkM19sb2NhbGVfdGltZUZvcm1hdChsb2NhbGUpXG4gICAgfTtcbiAgfTtcbiAgdmFyIGQzX2xvY2FsZV9lblVTID0gZDMubG9jYWxlKHtcbiAgICBkZWNpbWFsOiBcIi5cIixcbiAgICB0aG91c2FuZHM6IFwiLFwiLFxuICAgIGdyb3VwaW5nOiBbIDMgXSxcbiAgICBjdXJyZW5jeTogWyBcIiRcIiwgXCJcIiBdLFxuICAgIGRhdGVUaW1lOiBcIiVhICViICVlICVYICVZXCIsXG4gICAgZGF0ZTogXCIlbS8lZC8lWVwiLFxuICAgIHRpbWU6IFwiJUg6JU06JVNcIixcbiAgICBwZXJpb2RzOiBbIFwiQU1cIiwgXCJQTVwiIF0sXG4gICAgZGF5czogWyBcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCIgXSxcbiAgICBzaG9ydERheXM6IFsgXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiBdLFxuICAgIG1vbnRoczogWyBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCIgXSxcbiAgICBzaG9ydE1vbnRoczogWyBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiIF1cbiAgfSk7XG4gIGQzLmZvcm1hdCA9IGQzX2xvY2FsZV9lblVTLm51bWJlckZvcm1hdDtcbiAgZDMuZ2VvID0ge307XG4gIGZ1bmN0aW9uIGQzX2FkZGVyKCkge31cbiAgZDNfYWRkZXIucHJvdG90eXBlID0ge1xuICAgIHM6IDAsXG4gICAgdDogMCxcbiAgICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIGQzX2FkZGVyU3VtKHksIHRoaXMudCwgZDNfYWRkZXJUZW1wKTtcbiAgICAgIGQzX2FkZGVyU3VtKGQzX2FkZGVyVGVtcC5zLCB0aGlzLnMsIHRoaXMpO1xuICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IGQzX2FkZGVyVGVtcC50OyBlbHNlIHRoaXMucyA9IGQzX2FkZGVyVGVtcC50O1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zID0gdGhpcy50ID0gMDtcbiAgICB9LFxuICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucztcbiAgICB9XG4gIH07XG4gIHZhciBkM19hZGRlclRlbXAgPSBuZXcgZDNfYWRkZXIoKTtcbiAgZnVuY3Rpb24gZDNfYWRkZXJTdW0oYSwgYiwgbykge1xuICAgIHZhciB4ID0gby5zID0gYSArIGIsIGJ2ID0geCAtIGEsIGF2ID0geCAtIGJ2O1xuICAgIG8udCA9IGEgLSBhdiArIChiIC0gYnYpO1xuICB9XG4gIGQzLmdlby5zdHJlYW0gPSBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgaWYgKG9iamVjdCAmJiBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KG9iamVjdCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBsaXN0ZW5lcikge1xuICAgIGlmIChnZW9tZXRyeSAmJiBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgICBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBsaXN0ZW5lcik7XG4gICAgfVxuICB9XG4gIHZhciBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZSA9IHtcbiAgICBGZWF0dXJlOiBmdW5jdGlvbihmZWF0dXJlLCBsaXN0ZW5lcikge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGZlYXR1cmUuZ2VvbWV0cnksIGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIGxpc3RlbmVyKTtcbiAgICB9XG4gIH07XG4gIHZhciBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xuICAgIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIuc3BoZXJlKCk7XG4gICAgfSxcbiAgICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgb2JqZWN0ID0gb2JqZWN0LmNvb3JkaW5hdGVzO1xuICAgICAgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICBkM19nZW9fc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCAwKTtcbiAgICB9LFxuICAgIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLCAwKTtcbiAgICB9LFxuICAgIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgbGlzdGVuZXIpO1xuICAgIH0sXG4gICAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIpO1xuICAgIH0sXG4gICAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCBjbG9zZWQpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLCBjb29yZGluYXRlO1xuICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgbGlzdGVuZXIpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIsIDEpO1xuICAgIGxpc3RlbmVyLnBvbHlnb25FbmQoKTtcbiAgfVxuICBkMy5nZW8uYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19hcmVhU3VtID0gMDtcbiAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2FyZWEpO1xuICAgIHJldHVybiBkM19nZW9fYXJlYVN1bTtcbiAgfTtcbiAgdmFyIGQzX2dlb19hcmVhU3VtLCBkM19nZW9fYXJlYVJpbmdTdW0gPSBuZXcgZDNfYWRkZXIoKTtcbiAgdmFyIGQzX2dlb19hcmVhID0ge1xuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fYXJlYVN1bSArPSA0ICogz4A7XG4gICAgfSxcbiAgICBwb2ludDogZDNfbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG4gICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQgPSBkM19nZW9fYXJlYVJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZWEgPSAyICogZDNfZ2VvX2FyZWFSaW5nU3VtO1xuICAgICAgZDNfZ2VvX2FyZWFTdW0gKz0gYXJlYSA8IDAgPyA0ICogz4AgKyBhcmVhIDogYXJlYTtcbiAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCA9IGQzX2dlb19hcmVhLmxpbmVFbmQgPSBkM19nZW9fYXJlYS5wb2ludCA9IGQzX25vb3A7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fYXJlYVJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgzrswLCBjb3PPhjAsIHNpbs+GMDtcbiAgICBkM19nZW9fYXJlYS5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgZDNfZ2VvX2FyZWEucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICDOuzAgPSAozrswMCA9IM67KSAqIGQzX3JhZGlhbnMsIGNvc8+GMCA9IE1hdGguY29zKM+GID0gKM+GMDAgPSDPhikgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNCksIFxuICAgICAgc2luz4YwID0gTWF0aC5zaW4oz4YpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIM+GID0gz4YgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNDtcbiAgICAgIHZhciBkzrsgPSDOuyAtIM67MCwgc2TOuyA9IGTOuyA+PSAwID8gMSA6IC0xLCBhZM67ID0gc2TOuyAqIGTOuywgY29zz4YgPSBNYXRoLmNvcyjPhiksIHNpbs+GID0gTWF0aC5zaW4oz4YpLCBrID0gc2luz4YwICogc2luz4YsIHUgPSBjb3PPhjAgKiBjb3PPhiArIGsgKiBNYXRoLmNvcyhhZM67KSwgdiA9IGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyk7XG4gICAgICBkM19nZW9fYXJlYVJpbmdTdW0uYWRkKE1hdGguYXRhbjIodiwgdSkpO1xuICAgICAgzrswID0gzrssIGNvc8+GMCA9IGNvc8+GLCBzaW7PhjAgPSBzaW7PhjtcbiAgICB9XG4gICAgZDNfZ2VvX2FyZWEubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgbmV4dFBvaW50KM67MDAsIM+GMDApO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgICB2YXIgzrsgPSBzcGhlcmljYWxbMF0sIM+GID0gc3BoZXJpY2FsWzFdLCBjb3PPhiA9IE1hdGguY29zKM+GKTtcbiAgICByZXR1cm4gWyBjb3PPhiAqIE1hdGguY29zKM67KSwgY29zz4YgKiBNYXRoLnNpbijOuyksIE1hdGguc2luKM+GKSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgICByZXR1cm4gWyBhWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdIF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkFkZChhLCBiKSB7XG4gICAgYVswXSArPSBiWzBdO1xuICAgIGFbMV0gKz0gYlsxXTtcbiAgICBhWzJdICs9IGJbMl07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICAgIHJldHVybiBbIHZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGsgXTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGQpIHtcbiAgICB2YXIgbCA9IE1hdGguc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICAgIGRbMF0gLz0gbDtcbiAgICBkWzFdIC89IGw7XG4gICAgZFsyXSAvPSBsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gICAgcmV0dXJuIFsgTWF0aC5hdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGQzX2FzaW4oY2FydGVzaWFuWzJdKSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWxFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGFicyhhWzBdIC0gYlswXSkgPCDOtSAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgzrU7XG4gIH1cbiAgZDMuZ2VvLmJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciDOuzAsIM+GMCwgzrsxLCDPhjEsIM67XywgzrtfXywgz4ZfXywgcDAsIGTOu1N1bSwgcmFuZ2VzLCByYW5nZTtcbiAgICB2YXIgYm91bmQgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBib3VuZC5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuICAgICAgICBib3VuZC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgZM67U3VtID0gMDtcbiAgICAgICAgZDNfZ2VvX2FyZWEucG9seWdvblN0YXJ0KCk7XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGQzX2dlb19hcmVhLnBvbHlnb25FbmQoKTtcbiAgICAgICAgYm91bmQucG9pbnQgPSBwb2ludDtcbiAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBib3VuZC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgaWYgKGQzX2dlb19hcmVhUmluZ1N1bSA8IDApIM67MCA9IC0ozrsxID0gMTgwKSwgz4YwID0gLSjPhjEgPSA5MCk7IGVsc2UgaWYgKGTOu1N1bSA+IM61KSDPhjEgPSA5MDsgZWxzZSBpZiAoZM67U3VtIDwgLc61KSDPhjAgPSAtOTA7XG4gICAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHBvaW50KM67LCDPhikge1xuICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbIM67MCA9IM67LCDOuzEgPSDOuyBdKTtcbiAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG4gICAgICBpZiAoz4YgPiDPhjEpIM+GMSA9IM+GO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQozrssIM+GKSB7XG4gICAgICB2YXIgcCA9IGQzX2dlb19jYXJ0ZXNpYW4oWyDOuyAqIGQzX3JhZGlhbnMsIM+GICogZDNfcmFkaWFucyBdKTtcbiAgICAgIGlmIChwMCkge1xuICAgICAgICB2YXIgbm9ybWFsID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKHAwLCBwKSwgZXF1YXRvcmlhbCA9IFsgbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwIF0sIGluZmxlY3Rpb24gPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcbiAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShpbmZsZWN0aW9uKTtcbiAgICAgICAgaW5mbGVjdGlvbiA9IGQzX2dlb19zcGhlcmljYWwoaW5mbGVjdGlvbik7XG4gICAgICAgIHZhciBkzrsgPSDOuyAtIM67XywgcyA9IGTOuyA+IDAgPyAxIDogLTEsIM67aSA9IGluZmxlY3Rpb25bMF0gKiBkM19kZWdyZWVzICogcywgYW50aW1lcmlkaWFuID0gYWJzKGTOuykgPiAxODA7XG4gICAgICAgIGlmIChhbnRpbWVyaWRpYW4gXiAocyAqIM67XyA8IM67aSAmJiDOu2kgPCBzICogzrspKSB7XG4gICAgICAgICAgdmFyIM+GaSA9IGluZmxlY3Rpb25bMV0gKiBkM19kZWdyZWVzO1xuICAgICAgICAgIGlmICjPhmkgPiDPhjEpIM+GMSA9IM+GaTtcbiAgICAgICAgfSBlbHNlIGlmICjOu2kgPSAozrtpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHMgKiDOu18gPCDOu2kgJiYgzrtpIDwgcyAqIM67KSkge1xuICAgICAgICAgIHZhciDPhmkgPSAtaW5mbGVjdGlvblsxXSAqIGQzX2RlZ3JlZXM7XG4gICAgICAgICAgaWYgKM+GaSA8IM+GMCkgz4YwID0gz4ZpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG4gICAgICAgICAgaWYgKM+GID4gz4YxKSDPhjEgPSDPhjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICAgICAgaWYgKM67IDwgzrtfKSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUozrssIM67MSkgPiBhbmdsZSjOuzAsIM67MSkpIM67MCA9IM67O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAozrsxID49IM67MCkge1xuICAgICAgICAgICAgaWYgKM67IDwgzrswKSDOuzAgPSDOuztcbiAgICAgICAgICAgIGlmICjOuyA+IM67MSkgzrsxID0gzrs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICjOuyA+IM67Xykge1xuICAgICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ2xlKM67LCDOuzEpID4gYW5nbGUozrswLCDOuzEpKSDOuzAgPSDOuztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50KM67LCDPhik7XG4gICAgICB9XG4gICAgICBwMCA9IHAsIM67XyA9IM67O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBib3VuZC5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIGJvdW5kLnBvaW50ID0gcG9pbnQ7XG4gICAgICBwMCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludCjOuywgz4YpIHtcbiAgICAgIGlmIChwMCkge1xuICAgICAgICB2YXIgZM67ID0gzrsgLSDOu187XG4gICAgICAgIGTOu1N1bSArPSBhYnMoZM67KSA+IDE4MCA/IGTOuyArIChkzrsgPiAwID8gMzYwIDogLTM2MCkgOiBkzrs7XG4gICAgICB9IGVsc2UgzrtfXyA9IM67LCDPhl9fID0gz4Y7XG4gICAgICBkM19nZW9fYXJlYS5wb2ludCjOuywgz4YpO1xuICAgICAgbGluZVBvaW50KM67LCDPhik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmluZ1BvaW50KM67X18sIM+GX18pO1xuICAgICAgZDNfZ2VvX2FyZWEubGluZUVuZCgpO1xuICAgICAgaWYgKGFicyhkzrtTdW0pID4gzrUpIM67MCA9IC0ozrsxID0gMTgwKTtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIHAwID0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW5nbGUozrswLCDOuzEpIHtcbiAgICAgIHJldHVybiAozrsxIC09IM67MCkgPCAwID8gzrsxICsgMzYwIDogzrsxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUmFuZ2VzKGEsIGIpIHtcbiAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd2l0aGluUmFuZ2UoeCwgcmFuZ2UpIHtcbiAgICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICDPhjEgPSDOuzEgPSAtKM67MCA9IM+GMCA9IEluZmluaXR5KTtcbiAgICAgIHJhbmdlcyA9IFtdO1xuICAgICAgZDMuZ2VvLnN0cmVhbShmZWF0dXJlLCBib3VuZCk7XG4gICAgICB2YXIgbiA9IHJhbmdlcy5sZW5ndGg7XG4gICAgICBpZiAobikge1xuICAgICAgICByYW5nZXMuc29ydChjb21wYXJlUmFuZ2VzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGEgPSByYW5nZXNbMF0sIGIsIG1lcmdlZCA9IFsgYSBdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgYiA9IHJhbmdlc1tpXTtcbiAgICAgICAgICBpZiAod2l0aGluUmFuZ2UoYlswXSwgYSkgfHwgd2l0aGluUmFuZ2UoYlsxXSwgYSkpIHtcbiAgICAgICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgICAgIGlmIChhbmdsZShiWzBdLCBhWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzBdID0gYlswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYmVzdCA9IC1JbmZpbml0eSwgZM67O1xuICAgICAgICBmb3IgKHZhciBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dLCBiOyBpIDw9IG47IGEgPSBiLCArK2kpIHtcbiAgICAgICAgICBiID0gbWVyZ2VkW2ldO1xuICAgICAgICAgIGlmICgoZM67ID0gYW5nbGUoYVsxXSwgYlswXSkpID4gYmVzdCkgYmVzdCA9IGTOuywgzrswID0gYlswXSwgzrsxID0gYVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmFuZ2VzID0gcmFuZ2UgPSBudWxsO1xuICAgICAgcmV0dXJuIM67MCA9PT0gSW5maW5pdHkgfHwgz4YwID09PSBJbmZpbml0eSA/IFsgWyBOYU4sIE5hTiBdLCBbIE5hTiwgTmFOIF0gXSA6IFsgWyDOuzAsIM+GMCBdLCBbIM67MSwgz4YxIF0gXTtcbiAgICB9O1xuICB9KCk7XG4gIGQzLmdlby5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19jZW50cm9pZFcwID0gZDNfZ2VvX2NlbnRyb2lkVzEgPSBkM19nZW9fY2VudHJvaWRYMCA9IGQzX2dlb19jZW50cm9pZFkwID0gZDNfZ2VvX2NlbnRyb2lkWjAgPSBkM19nZW9fY2VudHJvaWRYMSA9IGQzX2dlb19jZW50cm9pZFkxID0gZDNfZ2VvX2NlbnRyb2lkWjEgPSBkM19nZW9fY2VudHJvaWRYMiA9IGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBkM19nZW9fY2VudHJvaWQpO1xuICAgIHZhciB4ID0gZDNfZ2VvX2NlbnRyb2lkWDIsIHkgPSBkM19nZW9fY2VudHJvaWRZMiwgeiA9IGQzX2dlb19jZW50cm9pZFoyLCBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIGlmIChtIDwgzrUyKSB7XG4gICAgICB4ID0gZDNfZ2VvX2NlbnRyb2lkWDEsIHkgPSBkM19nZW9fY2VudHJvaWRZMSwgeiA9IGQzX2dlb19jZW50cm9pZFoxO1xuICAgICAgaWYgKGQzX2dlb19jZW50cm9pZFcxIDwgzrUpIHggPSBkM19nZW9fY2VudHJvaWRYMCwgeSA9IGQzX2dlb19jZW50cm9pZFkwLCB6ID0gZDNfZ2VvX2NlbnRyb2lkWjA7XG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgICAgaWYgKG0gPCDOtTIpIHJldHVybiBbIE5hTiwgTmFOIF07XG4gICAgfVxuICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSwgeCkgKiBkM19kZWdyZWVzLCBkM19hc2luKHogLyBNYXRoLnNxcnQobSkpICogZDNfZGVncmVlcyBdO1xuICB9O1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkVzAsIGQzX2dlb19jZW50cm9pZFcxLCBkM19nZW9fY2VudHJvaWRYMCwgZDNfZ2VvX2NlbnRyb2lkWTAsIGQzX2dlb19jZW50cm9pZFowLCBkM19nZW9fY2VudHJvaWRYMSwgZDNfZ2VvX2NlbnRyb2lkWTEsIGQzX2dlb19jZW50cm9pZFoxLCBkM19nZW9fY2VudHJvaWRYMiwgZDNfZ2VvX2NlbnRyb2lkWTIsIGQzX2dlb19jZW50cm9pZFoyO1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkID0ge1xuICAgIHNwaGVyZTogZDNfbm9vcCxcbiAgICBwb2ludDogZDNfZ2VvX2NlbnRyb2lkUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fY2VudHJvaWRMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZFJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZExpbmVTdGFydDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50KM67LCDPhikge1xuICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyk7XG4gICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooY29zz4YgKiBNYXRoLmNvcyjOuyksIGNvc8+GICogTWF0aC5zaW4ozrspLCBNYXRoLnNpbijPhikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgsIHksIHopIHtcbiAgICArK2QzX2dlb19jZW50cm9pZFcwO1xuICAgIGQzX2dlb19jZW50cm9pZFgwICs9ICh4IC0gZDNfZ2VvX2NlbnRyb2lkWDApIC8gZDNfZ2VvX2NlbnRyb2lkVzA7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWTAgKz0gKHkgLSBkM19nZW9fY2VudHJvaWRZMCkgLyBkM19nZW9fY2VudHJvaWRXMDtcbiAgICBkM19nZW9fY2VudHJvaWRaMCArPSAoeiAtIGQzX2dlb19jZW50cm9pZFowKSAvIGQzX2dlb19jZW50cm9pZFcwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZExpbmVTdGFydCgpIHtcbiAgICB2YXIgeDAsIHkwLCB6MDtcbiAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKTtcbiAgICAgIHgwID0gY29zz4YgKiBNYXRoLmNvcyjOuyk7XG4gICAgICB5MCA9IGNvc8+GICogTWF0aC5zaW4ozrspO1xuICAgICAgejAgPSBNYXRoLnNpbijPhik7XG4gICAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKSwgeCA9IGNvc8+GICogTWF0aC5jb3MozrspLCB5ID0gY29zz4YgKiBNYXRoLnNpbijOuyksIHogPSBNYXRoLnNpbijPhiksIHcgPSBNYXRoLmF0YW4yKE1hdGguc3FydCgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgeDAsIHkwLCB6MDtcbiAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67MDAgPSDOuywgz4YwMCA9IM+GO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpO1xuICAgICAgeDAgPSBjb3PPhiAqIE1hdGguY29zKM67KTtcbiAgICAgIHkwID0gY29zz4YgKiBNYXRoLnNpbijOuyk7XG4gICAgICB6MCA9IE1hdGguc2luKM+GKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH07XG4gICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCjOuzAwLCDPhjAwKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5saW5lRW5kID0gZDNfZ2VvX2NlbnRyb2lkTGluZUVuZDtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpLCB4ID0gY29zz4YgKiBNYXRoLmNvcyjOuyksIHkgPSBjb3PPhiAqIE1hdGguc2luKM67KSwgeiA9IE1hdGguc2luKM+GKSwgY3ggPSB5MCAqIHogLSB6MCAqIHksIGN5ID0gejAgKiB4IC0geDAgKiB6LCBjeiA9IHgwICogeSAtIHkwICogeCwgbSA9IE1hdGguc3FydChjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLCB1ID0geDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6LCB2ID0gbSAmJiAtZDNfYWNvcyh1KSAvIG0sIHcgPSBNYXRoLmF0YW4yKG0sIHUpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0gdiAqIGN4O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgKz0gdiAqIGN5O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjIgKz0gdiAqIGN6O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY29tcG9zZShhLCBiKSB7XG4gICAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gICAgfVxuICAgIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2U7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJ1ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmUsIGNsaXBTdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIHN1YmplY3QgPSBbXSwgY2xpcCA9IFtdO1xuICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgICAgaWYgKChuID0gc2VnbWVudC5sZW5ndGggLSAxKSA8PSAwKSByZXR1cm47XG4gICAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl07XG4gICAgICBpZiAoZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSksIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAwLCBudWxsLCBhLCBmYWxzZSk7XG4gICAgICBhLm8gPSBiO1xuICAgICAgc3ViamVjdC5wdXNoKGEpO1xuICAgICAgY2xpcC5wdXNoKGIpO1xuICAgICAgYSA9IG5ldyBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKTtcbiAgICAgIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAxLCBudWxsLCBhLCB0cnVlKTtcbiAgICAgIGEubyA9IGI7XG4gICAgICBzdWJqZWN0LnB1c2goYSk7XG4gICAgICBjbGlwLnB1c2goYik7XG4gICAgfSk7XG4gICAgY2xpcC5zb3J0KGNvbXBhcmUpO1xuICAgIGQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhcihzdWJqZWN0KTtcbiAgICBkM19nZW9fY2xpcFBvbHlnb25MaW5rQ2lyY3VsYXIoY2xpcCk7XG4gICAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuICAgIGZvciAodmFyIGkgPSAwLCBlbnRyeSA9IGNsaXBTdGFydEluc2lkZSwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBjbGlwW2ldLmUgPSBlbnRyeSA9ICFlbnRyeTtcbiAgICB9XG4gICAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSwgcG9pbnRzLCBwb2ludDtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydCwgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgICBwb2ludHMgPSBjdXJyZW50LnAuejtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50LnAueCwgLTEsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBQb2x5Z29uTGlua0NpcmN1bGFyKGFycmF5KSB7XG4gICAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbiwgaSA9IDAsIGEgPSBhcnJheVswXSwgYjtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgICAgYi5wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICBhLm4gPSBiID0gYXJyYXlbMF07XG4gICAgYi5wID0gYTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gICAgdGhpcy54ID0gcG9pbnQ7XG4gICAgdGhpcy56ID0gcG9pbnRzO1xuICAgIHRoaXMubyA9IG90aGVyO1xuICAgIHRoaXMuZSA9IGVudHJ5O1xuICAgIHRoaXMudiA9IGZhbHNlO1xuICAgIHRoaXMubiA9IHRoaXMucCA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXAocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIGNsaXBTdGFydCkge1xuICAgIHJldHVybiBmdW5jdGlvbihyb3RhdGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGluZSA9IGNsaXBMaW5lKGxpc3RlbmVyKSwgcm90YXRlZENsaXBTdGFydCA9IHJvdGF0ZS5pbnZlcnQoY2xpcFN0YXJ0WzBdLCBjbGlwU3RhcnRbMV0pO1xuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50UmluZztcbiAgICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgICBjbGlwLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IGQzLm1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgICB2YXIgY2xpcFN0YXJ0SW5zaWRlID0gZDNfZ2VvX3BvaW50SW5Qb2x5Z29uKHJvdGF0ZWRDbGlwU3RhcnQsIHBvbHlnb24pO1xuICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGQzX2dlb19jbGlwU29ydCwgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xpcFN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGlzdGVuZXIucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgbGlzdGVuZXIpO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmdW5jdGlvbiBwb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG4gICAgICAgIGlmIChwb2ludFZpc2libGUozrsgPSBwb2ludFswXSwgz4YgPSBwb2ludFsxXSkpIGxpc3RlbmVyLnBvaW50KM67LCDPhik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwb2ludExpbmUozrssIM+GKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZSjOuywgz4YpO1xuICAgICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XG4gICAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgdmFyIHNlZ21lbnRzO1xuICAgICAgdmFyIGJ1ZmZlciA9IGQzX2dlb19jbGlwQnVmZmVyTGlzdGVuZXIoKSwgcmluZ0xpc3RlbmVyID0gY2xpcExpbmUoYnVmZmVyKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZSwgcG9seWdvbiwgcmluZztcbiAgICAgIGZ1bmN0aW9uIHBvaW50UmluZyjOuywgz4YpIHtcbiAgICAgICAgcmluZy5wdXNoKFsgzrssIM+GIF0pO1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUozrssIM+GKTtcbiAgICAgICAgcmluZ0xpc3RlbmVyLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICAgIHJpbmdMaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgcmluZyA9IFtdO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xuICAgICAgICByaW5nTGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICB2YXIgY2xlYW4gPSByaW5nTGlzdGVuZXIuY2xlYW4oKSwgcmluZ1NlZ21lbnRzID0gYnVmZmVyLmJ1ZmZlcigpLCBzZWdtZW50LCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgcmluZy5wb3AoKTtcbiAgICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgICByaW5nID0gbnVsbDtcbiAgICAgICAgaWYgKCFuKSByZXR1cm47XG4gICAgICAgIGlmIChjbGVhbiAmIDEpIHtcbiAgICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICAgIHZhciBuID0gc2VnbWVudC5sZW5ndGggLSAxLCBpID0gLTEsIHBvaW50O1xuICAgICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHNlZ21lbnRbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcihkM19nZW9fY2xpcFNlZ21lbnRMZW5ndGgxKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xpcDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEoc2VnbWVudCkge1xuICAgIHJldHVybiBzZWdtZW50Lmxlbmd0aCA+IDE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpIHtcbiAgICB2YXIgbGluZXMgPSBbXSwgbGluZTtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGluZXMucHVzaChsaW5lID0gW10pO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgICAgbGluZS5wdXNoKFsgzrssIM+GIF0pO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgICBidWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gbGluZXM7XG4gICAgICAgIGxpbmVzID0gW107XG4gICAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgfSxcbiAgICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFNvcnQoYSwgYikge1xuICAgIHJldHVybiAoKGEgPSBhLngpWzBdIDwgMCA/IGFbMV0gLSBoYWxmz4AgLSDOtSA6IGhhbGbPgCAtIGFbMV0pIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZs+AIC0gzrUgOiBoYWxmz4AgLSBiWzFdKTtcbiAgfVxuICB2YXIgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4gPSBkM19nZW9fY2xpcChkM190cnVlLCBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUsIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsIFsgLc+ALCAtz4AgLyAyIF0pO1xuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUobGlzdGVuZXIpIHtcbiAgICB2YXIgzrswID0gTmFOLCDPhjAgPSBOYU4sIHPOuzAgPSBOYU4sIGNsZWFuO1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbijOuzEsIM+GMSkge1xuICAgICAgICB2YXIgc867MSA9IM67MSA+IDAgPyDPgCA6IC3PgCwgZM67ID0gYWJzKM67MSAtIM67MCk7XG4gICAgICAgIGlmIChhYnMoZM67IC0gz4ApIDwgzrUpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludCjOuzAsIM+GMCA9ICjPhjAgKyDPhjEpIC8gMiA+IDAgPyBoYWxmz4AgOiAtaGFsZs+AKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrswLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrsxLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KM67MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoc867MCAhPT0gc867MSAmJiBkzrsgPj0gz4ApIHtcbiAgICAgICAgICBpZiAoYWJzKM67MCAtIHPOuzApIDwgzrUpIM67MCAtPSBzzrswICogzrU7XG4gICAgICAgICAgaWYgKGFicyjOuzEgLSBzzrsxKSA8IM61KSDOuzEgLT0gc867MSAqIM61O1xuICAgICAgICAgIM+GMCA9IGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KM67MCwgz4YwLCDOuzEsIM+GMSk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MCwgz4YwKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdGVuZXIucG9pbnQozrswID0gzrsxLCDPhjAgPSDPhjEpO1xuICAgICAgICBzzrswID0gc867MTtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICDOuzAgPSDPhjAgPSBOYU47XG4gICAgICB9LFxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMiAtIGNsZWFuO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QozrswLCDPhjAsIM67MSwgz4YxKSB7XG4gICAgdmFyIGNvc8+GMCwgY29zz4YxLCBzaW7OuzBfzrsxID0gTWF0aC5zaW4ozrswIC0gzrsxKTtcbiAgICByZXR1cm4gYWJzKHNpbs67MF/OuzEpID4gzrUgPyBNYXRoLmF0YW4oKE1hdGguc2luKM+GMCkgKiAoY29zz4YxID0gTWF0aC5jb3Moz4YxKSkgKiBNYXRoLnNpbijOuzEpIC0gTWF0aC5zaW4oz4YxKSAqIChjb3PPhjAgPSBNYXRoLmNvcyjPhjApKSAqIE1hdGguc2luKM67MCkpIC8gKGNvc8+GMCAqIGNvc8+GMSAqIHNpbs67MF/OuzEpKSA6ICjPhjAgKyDPhjEpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIGxpc3RlbmVyKSB7XG4gICAgdmFyIM+GO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogaGFsZs+AO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCjPgCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIDApO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIC3Phik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAwKTtcbiAgICAgIGxpc3RlbmVyLnBvaW50KC3PgCwgz4YpO1xuICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiDOtSkge1xuICAgICAgdmFyIHMgPSBmcm9tWzBdIDwgdG9bMF0gPyDPgCA6IC3PgDtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogcyAvIDI7XG4gICAgICBsaXN0ZW5lci5wb2ludCgtcywgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoMCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQocywgz4YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0ZW5lci5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcG9pbnRJblBvbHlnb24ocG9pbnQsIHBvbHlnb24pIHtcbiAgICB2YXIgbWVyaWRpYW4gPSBwb2ludFswXSwgcGFyYWxsZWwgPSBwb2ludFsxXSwgbWVyaWRpYW5Ob3JtYWwgPSBbIE1hdGguc2luKG1lcmlkaWFuKSwgLU1hdGguY29zKG1lcmlkaWFuKSwgMCBdLCBwb2xhckFuZ2xlID0gMCwgd2luZGluZyA9IDA7XG4gICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHJpbmcgPSBwb2x5Z29uW2ldLCBtID0gcmluZy5sZW5ndGg7XG4gICAgICBpZiAoIW0pIGNvbnRpbnVlO1xuICAgICAgdmFyIHBvaW50MCA9IHJpbmdbMF0sIM67MCA9IHBvaW50MFswXSwgz4YwID0gcG9pbnQwWzFdIC8gMiArIM+AIC8gNCwgc2luz4YwID0gTWF0aC5zaW4oz4YwKSwgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgaiA9IDE7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoaiA9PT0gbSkgaiA9IDA7XG4gICAgICAgIHBvaW50ID0gcmluZ1tqXTtcbiAgICAgICAgdmFyIM67ID0gcG9pbnRbMF0sIM+GID0gcG9pbnRbMV0gLyAyICsgz4AgLyA0LCBzaW7PhiA9IE1hdGguc2luKM+GKSwgY29zz4YgPSBNYXRoLmNvcyjPhiksIGTOuyA9IM67IC0gzrswLCBzZM67ID0gZM67ID49IDAgPyAxIDogLTEsIGFkzrsgPSBzZM67ICogZM67LCBhbnRpbWVyaWRpYW4gPSBhZM67ID4gz4AsIGsgPSBzaW7PhjAgKiBzaW7PhjtcbiAgICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLmFkZChNYXRoLmF0YW4yKGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyksIGNvc8+GMCAqIGNvc8+GICsgayAqIE1hdGguY29zKGFkzrspKSk7XG4gICAgICAgIHBvbGFyQW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZM67ICsgc2TOuyAqIM+EIDogZM67O1xuICAgICAgICBpZiAoYW50aW1lcmlkaWFuIF4gzrswID49IG1lcmlkaWFuIF4gzrsgPj0gbWVyaWRpYW4pIHtcbiAgICAgICAgICB2YXIgYXJjID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGQzX2dlb19jYXJ0ZXNpYW4ocG9pbnQwKSwgZDNfZ2VvX2NhcnRlc2lhbihwb2ludCkpO1xuICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYXJjKTtcbiAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKG1lcmlkaWFuTm9ybWFsLCBhcmMpO1xuICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgICB2YXIgz4ZhcmMgPSAoYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAtMSA6IDEpICogZDNfYXNpbihpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICAgIGlmIChwYXJhbGxlbCA+IM+GYXJjIHx8IHBhcmFsbGVsID09PSDPhmFyYyAmJiAoYXJjWzBdIHx8IGFyY1sxXSkpIHtcbiAgICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAxIDogLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaisrKSBicmVhaztcbiAgICAgICAgzrswID0gzrssIHNpbs+GMCA9IHNpbs+GLCBjb3PPhjAgPSBjb3PPhiwgcG9pbnQwID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAocG9sYXJBbmdsZSA8IC3OtSB8fCBwb2xhckFuZ2xlIDwgzrUgJiYgZDNfZ2VvX2FyZWFSaW5nU3VtIDwgLc61KSBeIHdpbmRpbmcgJiAxO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwQ2lyY2xlKHJhZGl1cykge1xuICAgIHZhciBjciA9IE1hdGguY29zKHJhZGl1cyksIHNtYWxsUmFkaXVzID0gY3IgPiAwLCBub3RIZW1pc3BoZXJlID0gYWJzKGNyKSA+IM61LCBpbnRlcnBvbGF0ZSA9IGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZShyYWRpdXMsIDYgKiBkM19yYWRpYW5zKTtcbiAgICByZXR1cm4gZDNfZ2VvX2NsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFsgMCwgLXJhZGl1cyBdIDogWyAtz4AsIHJhZGl1cyAtIM+AIF0pO1xuICAgIGZ1bmN0aW9uIHZpc2libGUozrssIM+GKSB7XG4gICAgICByZXR1cm4gTWF0aC5jb3MozrspICogTWF0aC5jb3Moz4YpID4gY3I7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsaXBMaW5lKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgcG9pbnQwLCBjMCwgdjAsIHYwMCwgY2xlYW47XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHYwMCA9IHYwID0gZmFsc2U7XG4gICAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgICB9LFxuICAgICAgICBwb2ludDogZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICAgICAgdmFyIHBvaW50MSA9IFsgzrssIM+GIF0sIHBvaW50MiwgdiA9IHZpc2libGUozrssIM+GKSwgYyA9IHNtYWxsUmFkaXVzID8gdiA/IDAgOiBjb2RlKM67LCDPhikgOiB2ID8gY29kZSjOuyArICjOuyA8IDAgPyDPgCA6IC3PgCksIM+GKSA6IDA7XG4gICAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgIGlmIChkM19nZW9fc3BoZXJpY2FsRXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IGQzX2dlb19zcGhlcmljYWxFcXVhbChwb2ludDEsIHBvaW50MikpIHtcbiAgICAgICAgICAgICAgcG9pbnQxWzBdICs9IM61O1xuICAgICAgICAgICAgICBwb2ludDFbMV0gKz0gzrU7XG4gICAgICAgICAgICAgIHYgPSB2aXNpYmxlKHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcbiAgICAgICAgICAgIHZhciB0O1xuICAgICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnQwID0gcG9pbnQxLCB2MCA9IHYsIGMwID0gYztcbiAgICAgICAgfSxcbiAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHYwKSBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgcG9pbnQwID0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBjbGVhbiB8ICh2MDAgJiYgdjApIDw8IDE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICAgIHZhciBwYSA9IGQzX2dlb19jYXJ0ZXNpYW4oYSksIHBiID0gZDNfZ2VvX2NhcnRlc2lhbihiKTtcbiAgICAgIHZhciBuMSA9IFsgMSwgMCwgMCBdLCBuMiA9IGQzX2dlb19jYXJ0ZXNpYW5Dcm9zcyhwYSwgcGIpLCBuMm4yID0gZDNfZ2VvX2NhcnRlc2lhbkRvdChuMiwgbjIpLCBuMW4yID0gbjJbMF0sIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuICAgICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcbiAgICAgIHZhciBjMSA9IGNyICogbjJuMiAvIGRldGVybWluYW50LCBjMiA9IC1jciAqIG4xbjIgLyBkZXRlcm1pbmFudCwgbjF4bjIgPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSwgQSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLCBCID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKG4yLCBjMik7XG4gICAgICBkM19nZW9fY2FydGVzaWFuQWRkKEEsIEIpO1xuICAgICAgdmFyIHUgPSBuMXhuMiwgdyA9IGQzX2dlb19jYXJ0ZXNpYW5Eb3QoQSwgdSksIHV1ID0gZDNfZ2VvX2NhcnRlc2lhbkRvdCh1LCB1KSwgdDIgPSB3ICogdyAtIHV1ICogKGQzX2dlb19jYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcbiAgICAgIGlmICh0MiA8IDApIHJldHVybjtcbiAgICAgIHZhciB0ID0gTWF0aC5zcXJ0KHQyKSwgcSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICAgIGQzX2dlb19jYXJ0ZXNpYW5BZGQocSwgQSk7XG4gICAgICBxID0gZDNfZ2VvX3NwaGVyaWNhbChxKTtcbiAgICAgIGlmICghdHdvKSByZXR1cm4gcTtcbiAgICAgIHZhciDOuzAgPSBhWzBdLCDOuzEgPSBiWzBdLCDPhjAgPSBhWzFdLCDPhjEgPSBiWzFdLCB6O1xuICAgICAgaWYgKM67MSA8IM67MCkgeiA9IM67MCwgzrswID0gzrsxLCDOuzEgPSB6O1xuICAgICAgdmFyIM60zrsgPSDOuzEgLSDOuzAsIHBvbGFyID0gYWJzKM60zrsgLSDPgCkgPCDOtSwgbWVyaWRpYW4gPSBwb2xhciB8fCDOtM67IDwgzrU7XG4gICAgICBpZiAoIXBvbGFyICYmIM+GMSA8IM+GMCkgeiA9IM+GMCwgz4YwID0gz4YxLCDPhjEgPSB6O1xuICAgICAgaWYgKG1lcmlkaWFuID8gcG9sYXIgPyDPhjAgKyDPhjEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIM67MCkgPCDOtSA/IM+GMCA6IM+GMSkgOiDPhjAgPD0gcVsxXSAmJiBxWzFdIDw9IM+GMSA6IM60zrsgPiDPgCBeICjOuzAgPD0gcVswXSAmJiBxWzBdIDw9IM67MSkpIHtcbiAgICAgICAgdmFyIHExID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHUsICgtdyArIHQpIC8gdXUpO1xuICAgICAgICBkM19nZW9fY2FydGVzaWFuQWRkKHExLCBBKTtcbiAgICAgICAgcmV0dXJuIFsgcSwgZDNfZ2VvX3NwaGVyaWNhbChxMSkgXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY29kZSjOuywgz4YpIHtcbiAgICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiDPgCAtIHJhZGl1cywgY29kZSA9IDA7XG4gICAgICBpZiAozrsgPCAtcikgY29kZSB8PSAxOyBlbHNlIGlmICjOuyA+IHIpIGNvZGUgfD0gMjtcbiAgICAgIGlmICjPhiA8IC1yKSBjb2RlIHw9IDQ7IGVsc2UgaWYgKM+GID4gcikgY29kZSB8PSA4O1xuICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fY2xpcExpbmUoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIGEgPSBsaW5lLmEsIGIgPSBsaW5lLmIsIGF4ID0gYS54LCBheSA9IGEueSwgYnggPSBiLngsIGJ5ID0gYi55LCB0MCA9IDAsIHQxID0gMSwgZHggPSBieCAtIGF4LCBkeSA9IGJ5IC0gYXksIHI7XG4gICAgICByID0geDAgLSBheDtcbiAgICAgIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHg7XG4gICAgICBpZiAoZHggPCAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgICB9XG4gICAgICByID0geDEgLSBheDtcbiAgICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHg7XG4gICAgICBpZiAoZHggPCAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgICB9XG4gICAgICByID0geTAgLSBheTtcbiAgICAgIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHk7XG4gICAgICBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgICB9XG4gICAgICByID0geTEgLSBheTtcbiAgICAgIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHk7XG4gICAgICBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgICB9XG4gICAgICBpZiAodDAgPiAwKSBsaW5lLmEgPSB7XG4gICAgICAgIHg6IGF4ICsgdDAgKiBkeCxcbiAgICAgICAgeTogYXkgKyB0MCAqIGR5XG4gICAgICB9O1xuICAgICAgaWYgKHQxIDwgMSkgbGluZS5iID0ge1xuICAgICAgICB4OiBheCArIHQxICogZHgsXG4gICAgICAgIHk6IGF5ICsgdDEgKiBkeVxuICAgICAgfTtcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2dlb19jbGlwRXh0ZW50TUFYID0gMWU5O1xuICBkMy5nZW8uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4MCwgeTAsIHgxLCB5MSwgc3RyZWFtLCBjbGlwLCBjbGlwRXh0ZW50ID0ge1xuICAgICAgc3RyZWFtOiBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHN0cmVhbSA9IGNsaXAob3V0cHV0KTtcbiAgICAgICAgc3RyZWFtLnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgIH0sXG4gICAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIHgwLCB5MCBdLCBbIHgxLCB5MSBdIF07XG4gICAgICAgIGNsaXAgPSBkM19nZW9fY2xpcEV4dGVudCh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKTtcbiAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2UsIHN0cmVhbSA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbGlwRXh0ZW50O1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGNsaXBFeHRlbnQuZXh0ZW50KFsgWyAwLCAwIF0sIFsgOTYwLCA1MDAgXSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0ZW5lcl8gPSBsaXN0ZW5lciwgYnVmZmVyTGlzdGVuZXIgPSBkM19nZW9fY2xpcEJ1ZmZlckxpc3RlbmVyKCksIGNsaXBMaW5lID0gZDNfZ2VvbV9jbGlwTGluZSh4MCwgeTAsIHgxLCB5MSksIHNlZ21lbnRzLCBwb2x5Z29uLCByaW5nO1xuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGlzdGVuZXIgPSBidWZmZXJMaXN0ZW5lcjtcbiAgICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgICAgICBjbGVhbiA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJfO1xuICAgICAgICAgIHNlZ21lbnRzID0gZDMubWVyZ2Uoc2VnbWVudHMpO1xuICAgICAgICAgIHZhciBjbGlwU3RhcnRJbnNpZGUgPSBpbnNpZGVQb2x5Z29uKFsgeDAsIHkxIF0pLCBpbnNpZGUgPSBjbGVhbiAmJiBjbGlwU3RhcnRJbnNpZGUsIHZpc2libGUgPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgICAgaWYgKGluc2lkZSB8fCB2aXNpYmxlKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICAgIGlmIChpbnNpZGUpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgICAgZDNfZ2VvX2NsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlLCBjbGlwU3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gaW5zaWRlUG9seWdvbihwKSB7XG4gICAgICAgIHZhciB3biA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aCwgeSA9IHBbMV07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDEsIHYgPSBwb2x5Z29uW2ldLCBtID0gdi5sZW5ndGgsIGEgPSB2WzBdLCBiOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgICBiID0gdltqXTtcbiAgICAgICAgICAgIGlmIChhWzFdIDw9IHkpIHtcbiAgICAgICAgICAgICAgaWYgKGJbMV0gPiB5ICYmIGQzX2Nyb3NzMmQoYSwgYiwgcCkgPiAwKSArK3duO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJbMV0gPD0geSAmJiBkM19jcm9zczJkKGEsIGIsIHApIDwgMCkgLS13bjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEgPSBiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd24gIT09IDA7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgYSA9IDAsIGExID0gMDtcbiAgICAgICAgaWYgKGZyb20gPT0gbnVsbCB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID0gY29ybmVyKHRvLCBkaXJlY3Rpb24pKSB8fCBjb21wYXJlUG9pbnRzKGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgICAgICB9IHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHBvaW50VmlzaWJsZSh4LCB5KSB7XG4gICAgICAgIHJldHVybiB4MCA8PSB4ICYmIHggPD0geDEgJiYgeTAgPD0geSAmJiB5IDw9IHkxO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICBpZiAocG9pbnRWaXNpYmxlKHgsIHkpKSBsaXN0ZW5lci5wb2ludCh4LCB5KTtcbiAgICAgIH1cbiAgICAgIHZhciB4X18sIHlfXywgdl9fLCB4XywgeV8sIHZfLCBmaXJzdCwgY2xlYW47XG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgICB2XyA9IGZhbHNlO1xuICAgICAgICB4XyA9IHlfID0gTmFOO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgaWYgKHNlZ21lbnRzKSB7XG4gICAgICAgICAgbGluZVBvaW50KHhfXywgeV9fKTtcbiAgICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJMaXN0ZW5lci5yZWpvaW4oKTtcbiAgICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlckxpc3RlbmVyLmJ1ZmZlcigpKTtcbiAgICAgICAgfVxuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGlmICh2XykgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZVBvaW50KHgsIHkpIHtcbiAgICAgICAgeCA9IE1hdGgubWF4KC1kM19nZW9fY2xpcEV4dGVudE1BWCwgTWF0aC5taW4oZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIHgpKTtcbiAgICAgICAgeSA9IE1hdGgubWF4KC1kM19nZW9fY2xpcEV4dGVudE1BWCwgTWF0aC5taW4oZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIHkpKTtcbiAgICAgICAgdmFyIHYgPSBwb2ludFZpc2libGUoeCwgeSk7XG4gICAgICAgIGlmIChwb2x5Z29uKSByaW5nLnB1c2goWyB4LCB5IF0pO1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2ICYmIHZfKSBsaXN0ZW5lci5wb2ludCh4LCB5KTsgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbCA9IHtcbiAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgIHg6IHhfLFxuICAgICAgICAgICAgICAgIHk6IHlfXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGI6IHtcbiAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgIHk6IHlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjbGlwTGluZShsKSkge1xuICAgICAgICAgICAgICBpZiAoIXZfKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQobC5hLngsIGwuYS55KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludChsLmIueCwgbC5iLnkpO1xuICAgICAgICAgICAgICBpZiAoIXYpIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xpcDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNvcm5lcihwLCBkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IM61ID8gZGlyZWN0aW9uID4gMCA/IDAgOiAzIDogYWJzKHBbMF0gLSB4MSkgPCDOtSA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMSA6IGFicyhwWzFdIC0geTApIDwgzrUgPyBkaXJlY3Rpb24gPiAwID8gMSA6IDAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludHMoYS54LCBiLngpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKGEsIGIpIHtcbiAgICAgIHZhciBjYSA9IGNvcm5lcihhLCAxKSwgY2IgPSBjb3JuZXIoYiwgMSk7XG4gICAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYiA6IGNhID09PSAwID8gYlsxXSAtIGFbMV0gOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXSA6IGJbMF0gLSBhWzBdO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY29uaWMocHJvamVjdEF0KSB7XG4gICAgdmFyIM+GMCA9IDAsIM+GMSA9IM+AIC8gMywgbSA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLCBwID0gbSjPhjAsIM+GMSk7XG4gICAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIM+GMCAvIM+AICogMTgwLCDPhjEgLyDPgCAqIDE4MCBdO1xuICAgICAgcmV0dXJuIG0oz4YwID0gX1swXSAqIM+AIC8gMTgwLCDPhjEgPSBfWzFdICogz4AgLyAxODApO1xuICAgIH07XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NvbmljRXF1YWxBcmVhKM+GMCwgz4YxKSB7XG4gICAgdmFyIHNpbs+GMCA9IE1hdGguc2luKM+GMCksIG4gPSAoc2luz4YwICsgTWF0aC5zaW4oz4YxKSkgLyAyLCBDID0gMSArIHNpbs+GMCAqICgyICogbiAtIHNpbs+GMCksIM+BMCA9IE1hdGguc3FydChDKSAvIG47XG4gICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcbiAgICAgIHZhciDPgSA9IE1hdGguc3FydChDIC0gMiAqIG4gKiBNYXRoLnNpbijPhikpIC8gbjtcbiAgICAgIHJldHVybiBbIM+BICogTWF0aC5zaW4ozrsgKj0gbiksIM+BMCAtIM+BICogTWF0aC5jb3MozrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gz4EwIC0geTtcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeCwgz4EwX3kpIC8gbiwgZDNfYXNpbigoQyAtICh4ICogeCArIM+BMF95ICogz4EwX3kpICogbiAqIG4pIC8gKDIgKiBuKSkgXTtcbiAgICB9O1xuICAgIHJldHVybiBmb3J3YXJkO1xuICB9XG4gIChkMy5nZW8uY29uaWNFcXVhbEFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX2NvbmljKGQzX2dlb19jb25pY0VxdWFsQXJlYSk7XG4gIH0pLnJhdyA9IGQzX2dlb19jb25pY0VxdWFsQXJlYTtcbiAgZDMuZ2VvLmFsYmVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyA5NiwgMCBdKS5jZW50ZXIoWyAtLjYsIDM4LjcgXSkucGFyYWxsZWxzKFsgMjkuNSwgNDUuNSBdKS5zY2FsZSgxMDcwKTtcbiAgfTtcbiAgZDMuZ2VvLmFsYmVyc1VzYSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsb3dlcjQ4ID0gZDMuZ2VvLmFsYmVycygpO1xuICAgIHZhciBhbGFza2EgPSBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyAxNTQsIDAgXSkuY2VudGVyKFsgLTIsIDU4LjUgXSkucGFyYWxsZWxzKFsgNTUsIDY1IF0pO1xuICAgIHZhciBoYXdhaWkgPSBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyAxNTcsIDAgXSkuY2VudGVyKFsgLTMsIDE5LjkgXSkucGFyYWxsZWxzKFsgOCwgMTggXSk7XG4gICAgdmFyIHBvaW50LCBwb2ludFN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHBvaW50ID0gWyB4LCB5IF07XG4gICAgICB9XG4gICAgfSwgbG93ZXI0OFBvaW50LCBhbGFza2FQb2ludCwgaGF3YWlpUG9pbnQ7XG4gICAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgICB2YXIgeCA9IGNvb3JkaW5hdGVzWzBdLCB5ID0gY29vcmRpbmF0ZXNbMV07XG4gICAgICBwb2ludCA9IG51bGw7XG4gICAgICAobG93ZXI0OFBvaW50KHgsIHkpLCBwb2ludCkgfHwgKGFsYXNrYVBvaW50KHgsIHkpLCBwb2ludCkgfHwgaGF3YWlpUG9pbnQoeCwgeSk7XG4gICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICAgIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHQgPSBsb3dlcjQ4LnRyYW5zbGF0ZSgpLCB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLCB5ID0gKGNvb3JkaW5hdGVzWzFdIC0gdFsxXSkgLyBrO1xuICAgICAgcmV0dXJuICh5ID49IC4xMiAmJiB5IDwgLjIzNCAmJiB4ID49IC0uNDI1ICYmIHggPCAtLjIxNCA/IGFsYXNrYSA6IHkgPj0gLjE2NiAmJiB5IDwgLjIzNCAmJiB4ID49IC0uMjE0ICYmIHggPCAtLjExNSA/IGhhd2FpaSA6IGxvd2VyNDgpLmludmVydChjb29yZGluYXRlcyk7XG4gICAgfTtcbiAgICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgbG93ZXI0OFN0cmVhbSA9IGxvd2VyNDguc3RyZWFtKHN0cmVhbSksIGFsYXNrYVN0cmVhbSA9IGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpU3RyZWFtID0gaGF3YWlpLnN0cmVhbShzdHJlYW0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICBsb3dlcjQ4U3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5zcGhlcmUoKTtcbiAgICAgICAgICBhbGFza2FTdHJlYW0uc3BoZXJlKCk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLnNwaGVyZSgpO1xuICAgICAgICB9LFxuICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGhhd2FpaVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgIGhhd2FpaVN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgucHJlY2lzaW9uKCk7XG4gICAgICBsb3dlcjQ4LnByZWNpc2lvbihfKTtcbiAgICAgIGFsYXNrYS5wcmVjaXNpb24oXyk7XG4gICAgICBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9O1xuICAgIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDguc2NhbGUoKTtcbiAgICAgIGxvd2VyNDguc2NhbGUoXyk7XG4gICAgICBhbGFza2Euc2NhbGUoXyAqIC4zNSk7XG4gICAgICBoYXdhaWkuc2NhbGUoXyk7XG4gICAgICByZXR1cm4gYWxiZXJzVXNhLnRyYW5zbGF0ZShsb3dlcjQ4LnRyYW5zbGF0ZSgpKTtcbiAgICB9O1xuICAgIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnRyYW5zbGF0ZSgpO1xuICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHggPSArX1swXSwgeSA9ICtfWzFdO1xuICAgICAgbG93ZXI0OFBvaW50ID0gbG93ZXI0OC50cmFuc2xhdGUoXykuY2xpcEV4dGVudChbIFsgeCAtIC40NTUgKiBrLCB5IC0gLjIzOCAqIGsgXSwgWyB4ICsgLjQ1NSAqIGssIHkgKyAuMjM4ICogayBdIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG4gICAgICBhbGFza2FQb2ludCA9IGFsYXNrYS50cmFuc2xhdGUoWyB4IC0gLjMwNyAqIGssIHkgKyAuMjAxICogayBdKS5jbGlwRXh0ZW50KFsgWyB4IC0gLjQyNSAqIGsgKyDOtSwgeSArIC4xMiAqIGsgKyDOtSBdLCBbIHggLSAuMjE0ICogayAtIM61LCB5ICsgLjIzNCAqIGsgLSDOtSBdIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG4gICAgICBoYXdhaWlQb2ludCA9IGhhd2FpaS50cmFuc2xhdGUoWyB4IC0gLjIwNSAqIGssIHkgKyAuMjEyICogayBdKS5jbGlwRXh0ZW50KFsgWyB4IC0gLjIxNCAqIGsgKyDOtSwgeSArIC4xNjYgKiBrICsgzrUgXSwgWyB4IC0gLjExNSAqIGsgLSDOtSwgeSArIC4yMzQgKiBrIC0gzrUgXSBdKS5zdHJlYW0ocG9pbnRTdHJlYW0pLnBvaW50O1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9O1xuICAgIHJldHVybiBhbGJlcnNVc2Euc2NhbGUoMTA3MCk7XG4gIH07XG4gIHZhciBkM19nZW9fcGF0aEFyZWFTdW0sIGQzX2dlb19wYXRoQXJlYVBvbHlnb24sIGQzX2dlb19wYXRoQXJlYSA9IHtcbiAgICBwb2ludDogZDNfbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG4gICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiA9IDA7XG4gICAgICBkM19nZW9fcGF0aEFyZWEubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhBcmVhUmluZ1N0YXJ0O1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fcGF0aEFyZWEubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhBcmVhLmxpbmVFbmQgPSBkM19nZW9fcGF0aEFyZWEucG9pbnQgPSBkM19ub29wO1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhU3VtICs9IGFicyhkM19nZW9fcGF0aEFyZWFQb2x5Z29uIC8gMik7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fcGF0aEFyZWFSaW5nU3RhcnQoKSB7XG4gICAgdmFyIHgwMCwgeTAwLCB4MCwgeTA7XG4gICAgZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiArPSB5MCAqIHggLSB4MCAqIHk7XG4gICAgICB4MCA9IHgsIHkwID0geTtcbiAgICB9XG4gICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCh4MDAsIHkwMCk7XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZ2VvX3BhdGhCb3VuZHNYMCwgZDNfZ2VvX3BhdGhCb3VuZHNZMCwgZDNfZ2VvX3BhdGhCb3VuZHNYMSwgZDNfZ2VvX3BhdGhCb3VuZHNZMTtcbiAgdmFyIGQzX2dlb19wYXRoQm91bmRzID0ge1xuICAgIHBvaW50OiBkM19nZW9fcGF0aEJvdW5kc1BvaW50LFxuICAgIGxpbmVTdGFydDogZDNfbm9vcCxcbiAgICBsaW5lRW5kOiBkM19ub29wLFxuICAgIHBvbHlnb25TdGFydDogZDNfbm9vcCxcbiAgICBwb2x5Z29uRW5kOiBkM19ub29wXG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQm91bmRzUG9pbnQoeCwgeSkge1xuICAgIGlmICh4IDwgZDNfZ2VvX3BhdGhCb3VuZHNYMCkgZDNfZ2VvX3BhdGhCb3VuZHNYMCA9IHg7XG4gICAgaWYgKHggPiBkM19nZW9fcGF0aEJvdW5kc1gxKSBkM19nZW9fcGF0aEJvdW5kc1gxID0geDtcbiAgICBpZiAoeSA8IGQzX2dlb19wYXRoQm91bmRzWTApIGQzX2dlb19wYXRoQm91bmRzWTAgPSB5O1xuICAgIGlmICh5ID4gZDNfZ2VvX3BhdGhCb3VuZHNZMSkgZDNfZ2VvX3BhdGhCb3VuZHNZMSA9IHk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhCdWZmZXIoKSB7XG4gICAgdmFyIHBvaW50Q2lyY2xlID0gZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUoNC41KSwgYnVmZmVyID0gW107XG4gICAgdmFyIHN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgfSxcbiAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHBvaW50Q2lyY2xlID0gZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUoXyk7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LFxuICAgICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgYnVmZmVyLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCBwb2ludENpcmNsZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcbiAgICAgIGJ1ZmZlci5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSk7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZSh4LCB5KSB7XG4gICAgICBidWZmZXIucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpbmVFbmRQb2x5Z29uKCkge1xuICAgICAgYnVmZmVyLnB1c2goXCJaXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKHJhZGl1cykge1xuICAgIHJldHVybiBcIm0wLFwiICsgcmFkaXVzICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1cyArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgMiAqIHJhZGl1cyArIFwielwiO1xuICB9XG4gIHZhciBkM19nZW9fcGF0aENlbnRyb2lkID0ge1xuICAgIHBvaW50OiBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fcGF0aENlbnRyb2lkTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQ2VudHJvaWRSaW5nU3RhcnQ7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQ7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVFbmQgPSBkM19nZW9fcGF0aENlbnRyb2lkTGluZUVuZDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4LCB5KSB7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWDAgKz0geDtcbiAgICBkM19nZW9fY2VudHJvaWRZMCArPSB5O1xuICAgICsrZDNfZ2VvX2NlbnRyb2lkWjA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydCgpIHtcbiAgICB2YXIgeDAsIHkwO1xuICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCh4LCB5KSB7XG4gICAgICB2YXIgZHggPSB4IC0geDAsIGR5ID0geSAtIHkwLCB6ID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gejtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICB2YXIgeDAwLCB5MDAsIHgwLCB5MDtcbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geSk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuICAgICAgdmFyIGR4ID0geCAtIHgwLCBkeSA9IHkgLSB5MCwgeiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0geiAqICh5MCArIHkpIC8gMjtcbiAgICAgIGQzX2dlb19jZW50cm9pZFoxICs9IHo7XG4gICAgICB6ID0geTAgKiB4IC0geDAgKiB5O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0geiAqICh4MCArIHgpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgKz0geiAqICh5MCArIHkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjIgKz0geiAqIDM7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xuICAgIH1cbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCh4MDAsIHkwMCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcGF0aENvbnRleHQoY29udGV4dCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNTtcbiAgICB2YXIgc3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lU3RhcnQ7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZFBvbHlnb247XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICB9LFxuICAgICAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcG9pbnRSYWRpdXMgPSBfO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgfSxcbiAgICAgIHJlc3VsdDogZDNfbm9vcFxuICAgIH07XG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oeCArIHBvaW50UmFkaXVzLCB5KTtcbiAgICAgIGNvbnRleHQuYXJjKHgsIHksIHBvaW50UmFkaXVzLCAwLCDPhCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHgsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZUVuZFBvbHlnb24oKSB7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19yZXNhbXBsZShwcm9qZWN0KSB7XG4gICAgdmFyIM60MiA9IC41LCBjb3NNaW5EaXN0YW5jZSA9IE1hdGguY29zKDMwICogZDNfcmFkaWFucyksIG1heERlcHRoID0gMTY7XG4gICAgZnVuY3Rpb24gcmVzYW1wbGUoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gKG1heERlcHRoID8gcmVzYW1wbGVSZWN1cnNpdmUgOiByZXNhbXBsZU5vbmUpKHN0cmVhbSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2FtcGxlTm9uZShzdHJlYW0pIHtcbiAgICAgIHJldHVybiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzYW1wbGVSZWN1cnNpdmUoc3RyZWFtKSB7XG4gICAgICB2YXIgzrswMCwgz4YwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIM67MCwgeDAsIHkwLCBhMCwgYjAsIGMwO1xuICAgICAgdmFyIHJlc2FtcGxlID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICByZXNhbXBsZS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgcmVzYW1wbGUubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgICB4MCA9IE5hTjtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIGMgPSBkM19nZW9fY2FydGVzaWFuKFsgzrssIM+GIF0pLCBwID0gcHJvamVjdCjOuywgz4YpO1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIM67MCA9IM67LCBhMCA9IGNbMF0sIGIwID0gY1sxXSwgYzAgPSBjWzJdLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICByZXNhbXBsZS5wb2ludCA9IHBvaW50O1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgICBsaW5lU3RhcnQoKTtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICAgIHJlc2FtcGxlLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ1BvaW50KM67LCDPhikge1xuICAgICAgICBsaW5lUG9pbnQozrswMCA9IM67LCDPhjAwID0gz4YpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICAgIHJlc2FtcGxlLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCDOuzAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgcmVzYW1wbGUubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIGxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNhbXBsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgzrsxLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZHggPSB4MSAtIHgwLCBkeSA9IHkxIC0geTAsIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPiA0ICogzrQyICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFyIGEgPSBhMCArIGExLCBiID0gYjAgKyBiMSwgYyA9IGMwICsgYzEsIG0gPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSwgz4YyID0gTWF0aC5hc2luKGMgLz0gbSksIM67MiA9IGFicyhhYnMoYykgLSAxKSA8IM61IHx8IGFicyjOuzAgLSDOuzEpIDwgzrUgPyAozrswICsgzrsxKSAvIDIgOiBNYXRoLmF0YW4yKGIsIGEpLCBwID0gcHJvamVjdCjOuzIsIM+GMiksIHgyID0gcFswXSwgeTIgPSBwWzFdLCBkeDIgPSB4MiAtIHgwLCBkeTIgPSB5MiAtIHkwLCBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XG4gICAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiDOtDIgfHwgYWJzKChkeCAqIGR4MiArIGR5ICogZHkyKSAvIGQyIC0gLjUpID4gLjMgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHtcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDIsIHkyLCDOuzIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MiwgeTIsIM67MiwgYSwgYiwgYywgeDEsIHkxLCDOuzEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlc2FtcGxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCjOtDIpO1xuICAgICAgbWF4RGVwdGggPSAozrQyID0gXyAqIF8pID4gMCAmJiAxNjtcbiAgICAgIHJldHVybiByZXNhbXBsZTtcbiAgICB9O1xuICAgIHJldHVybiByZXNhbXBsZTtcbiAgfVxuICBkMy5nZW8ucGF0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNSwgcHJvamVjdGlvbiwgY29udGV4dCwgcHJvamVjdFN0cmVhbSwgY29udGV4dFN0cmVhbSwgY2FjaGVTdHJlYW07XG4gICAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtwb2ludFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgaWYgKCFjYWNoZVN0cmVhbSB8fCAhY2FjaGVTdHJlYW0udmFsaWQpIGNhY2hlU3RyZWFtID0gcHJvamVjdFN0cmVhbShjb250ZXh0U3RyZWFtKTtcbiAgICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGNhY2hlU3RyZWFtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuICAgIH1cbiAgICBwYXRoLmFyZWEgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGQzX2dlb19wYXRoQXJlYVN1bSA9IDA7XG4gICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aEFyZWEpKTtcbiAgICAgIHJldHVybiBkM19nZW9fcGF0aEFyZWFTdW07XG4gICAgfTtcbiAgICBwYXRoLmNlbnRyb2lkID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMCA9IGQzX2dlb19jZW50cm9pZFkwID0gZDNfZ2VvX2NlbnRyb2lkWjAgPSBkM19nZW9fY2VudHJvaWRYMSA9IGQzX2dlb19jZW50cm9pZFkxID0gZDNfZ2VvX2NlbnRyb2lkWjEgPSBkM19nZW9fY2VudHJvaWRYMiA9IGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIHByb2plY3RTdHJlYW0oZDNfZ2VvX3BhdGhDZW50cm9pZCkpO1xuICAgICAgcmV0dXJuIGQzX2dlb19jZW50cm9pZFoyID8gWyBkM19nZW9fY2VudHJvaWRYMiAvIGQzX2dlb19jZW50cm9pZFoyLCBkM19nZW9fY2VudHJvaWRZMiAvIGQzX2dlb19jZW50cm9pZFoyIF0gOiBkM19nZW9fY2VudHJvaWRaMSA/IFsgZDNfZ2VvX2NlbnRyb2lkWDEgLyBkM19nZW9fY2VudHJvaWRaMSwgZDNfZ2VvX2NlbnRyb2lkWTEgLyBkM19nZW9fY2VudHJvaWRaMSBdIDogZDNfZ2VvX2NlbnRyb2lkWjAgPyBbIGQzX2dlb19jZW50cm9pZFgwIC8gZDNfZ2VvX2NlbnRyb2lkWjAsIGQzX2dlb19jZW50cm9pZFkwIC8gZDNfZ2VvX2NlbnRyb2lkWjAgXSA6IFsgTmFOLCBOYU4gXTtcbiAgICB9O1xuICAgIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBkM19nZW9fcGF0aEJvdW5kc1gxID0gZDNfZ2VvX3BhdGhCb3VuZHNZMSA9IC0oZDNfZ2VvX3BhdGhCb3VuZHNYMCA9IGQzX2dlb19wYXRoQm91bmRzWTAgPSBJbmZpbml0eSk7XG4gICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aEJvdW5kcykpO1xuICAgICAgcmV0dXJuIFsgWyBkM19nZW9fcGF0aEJvdW5kc1gwLCBkM19nZW9fcGF0aEJvdW5kc1kwIF0sIFsgZDNfZ2VvX3BhdGhCb3VuZHNYMSwgZDNfZ2VvX3BhdGhCb3VuZHNZMSBdIF07XG4gICAgfTtcbiAgICBwYXRoLnByb2plY3Rpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcm9qZWN0aW9uO1xuICAgICAgcHJvamVjdFN0cmVhbSA9IChwcm9qZWN0aW9uID0gXykgPyBfLnN0cmVhbSB8fCBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0oXykgOiBkM19pZGVudGl0eTtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICAgIGNvbnRleHRTdHJlYW0gPSAoY29udGV4dCA9IF8pID09IG51bGwgPyBuZXcgZDNfZ2VvX3BhdGhCdWZmZXIoKSA6IG5ldyBkM19nZW9fcGF0aENvbnRleHQoXyk7XG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIHJldHVybiBwYXRoLnByb2plY3Rpb24oZDMuZ2VvLmFsYmVyc1VzYSgpKS5jb250ZXh0KG51bGwpO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0ocHJvamVjdCkge1xuICAgIHZhciByZXNhbXBsZSA9IGQzX2dlb19yZXNhbXBsZShmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4gcHJvamVjdChbIHggKiBkM19kZWdyZWVzLCB5ICogZDNfZGVncmVlcyBdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHJlc2FtcGxlKHN0cmVhbSkpO1xuICAgIH07XG4gIH1cbiAgZDMuZ2VvLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKG1ldGhvZHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyZWFtOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IG5ldyBkM19nZW9fdHJhbnNmb3JtKHN0cmVhbSk7XG4gICAgICAgIGZvciAodmFyIGsgaW4gbWV0aG9kcykgdHJhbnNmb3JtW2tdID0gbWV0aG9kc1trXTtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnNmb3JtKHN0cmVhbSkge1xuICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICB9XG4gIGQzX2dlb190cmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5zcGhlcmUoKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHJlYW0ubGluZUVuZCgpO1xuICAgIH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBwb2ludCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0uc3BoZXJlKCk7XG4gICAgICB9LFxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzLmdlby5wcm9qZWN0aW9uID0gZDNfZ2VvX3Byb2plY3Rpb247XG4gIGQzLmdlby5wcm9qZWN0aW9uTXV0YXRvciA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcjtcbiAgZnVuY3Rpb24gZDNfZ2VvX3Byb2plY3Rpb24ocHJvamVjdCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcHJvamVjdDtcbiAgICB9KSgpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcbiAgICB2YXIgcHJvamVjdCwgcm90YXRlLCBwcm9qZWN0Um90YXRlLCBwcm9qZWN0UmVzYW1wbGUgPSBkM19nZW9fcmVzYW1wbGUoZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICByZXR1cm4gWyB4WzBdICogayArIM60eCwgzrR5IC0geFsxXSAqIGsgXTtcbiAgICB9KSwgayA9IDE1MCwgeCA9IDQ4MCwgeSA9IDI1MCwgzrsgPSAwLCDPhiA9IDAsIM60zrsgPSAwLCDOtM+GID0gMCwgzrTOsyA9IDAsIM60eCwgzrR5LCBwcmVjbGlwID0gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4sIHBvc3RjbGlwID0gZDNfaWRlbnRpdHksIGNsaXBBbmdsZSA9IG51bGwsIGNsaXBFeHRlbnQgPSBudWxsLCBzdHJlYW07XG4gICAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlKHBvaW50WzBdICogZDNfcmFkaWFucywgcG9pbnRbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBbIHBvaW50WzBdICogayArIM60eCwgzrR5IC0gcG9pbnRbMV0gKiBrIF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlLmludmVydCgocG9pbnRbMF0gLSDOtHgpIC8gaywgKM60eSAtIHBvaW50WzFdKSAvIGspO1xuICAgICAgcmV0dXJuIHBvaW50ICYmIFsgcG9pbnRbMF0gKiBkM19kZWdyZWVzLCBwb2ludFsxXSAqIGQzX2RlZ3JlZXMgXTtcbiAgICB9XG4gICAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtID0gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHByZWNsaXAocm90YXRlLCBwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAob3V0cHV0KSkpKTtcbiAgICAgIHN0cmVhbS52YWxpZCA9IHRydWU7XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwQW5nbGU7XG4gICAgICBwcmVjbGlwID0gXyA9PSBudWxsID8gKGNsaXBBbmdsZSA9IF8sIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuKSA6IGQzX2dlb19jbGlwQ2lyY2xlKChjbGlwQW5nbGUgPSArXykgKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBpbnZhbGlkYXRlKCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50O1xuICAgICAgY2xpcEV4dGVudCA9IF87XG4gICAgICBwb3N0Y2xpcCA9IF8gPyBkM19nZW9fY2xpcEV4dGVudChfWzBdWzBdLCBfWzBdWzFdLCBfWzFdWzBdLCBfWzFdWzFdKSA6IGQzX2lkZW50aXR5O1xuICAgICAgcmV0dXJuIGludmFsaWRhdGUoKTtcbiAgICB9O1xuICAgIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBrO1xuICAgICAgayA9ICtfO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgeCwgeSBdO1xuICAgICAgeCA9ICtfWzBdO1xuICAgICAgeSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgzrsgKiBkM19kZWdyZWVzLCDPhiAqIGQzX2RlZ3JlZXMgXTtcbiAgICAgIM67ID0gX1swXSAlIDM2MCAqIGQzX3JhZGlhbnM7XG4gICAgICDPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgzrTOuyAqIGQzX2RlZ3JlZXMsIM60z4YgKiBkM19kZWdyZWVzLCDOtM6zICogZDNfZGVncmVlcyBdO1xuICAgICAgzrTOuyA9IF9bMF0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgzrTPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgzrTOsyA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiBkM19yYWRpYW5zIDogMDtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgZDMucmViaW5kKHByb2plY3Rpb24sIHByb2plY3RSZXNhbXBsZSwgXCJwcmVjaXNpb25cIik7XG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBwcm9qZWN0Um90YXRlID0gZDNfZ2VvX2NvbXBvc2Uocm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKM60zrssIM60z4YsIM60zrMpLCBwcm9qZWN0KTtcbiAgICAgIHZhciBjZW50ZXIgPSBwcm9qZWN0KM67LCDPhik7XG4gICAgICDOtHggPSB4IC0gY2VudGVyWzBdICogaztcbiAgICAgIM60eSA9IHkgKyBjZW50ZXJbMV0gKiBrO1xuICAgICAgcmV0dXJuIGludmFsaWRhdGUoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlLCBzdHJlYW0gPSBudWxsO1xuICAgICAgcmV0dXJuIHByb2plY3Rpb247XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHByb2plY3QgPSBwcm9qZWN0QXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcHJvamVjdGlvblJhZGlhbnMoc3RyZWFtKSB7XG4gICAgcmV0dXJuIGQzX2dlb190cmFuc2Zvcm1Qb2ludChzdHJlYW0sIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHN0cmVhbS5wb2ludCh4ICogZDNfcmFkaWFucywgeSAqIGQzX3JhZGlhbnMpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIozrssIM+GKSB7XG4gICAgcmV0dXJuIFsgzrssIM+GIF07XG4gIH1cbiAgKGQzLmdlby5lcXVpcmVjdGFuZ3VsYXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcik7XG4gIH0pLnJhdyA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIuaW52ZXJ0ID0gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcjtcbiAgZDMuZ2VvLnJvdGF0aW9uID0gZnVuY3Rpb24ocm90YXRlKSB7XG4gICAgcm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKHJvdGF0ZVswXSAlIDM2MCAqIGQzX3JhZGlhbnMsIHJvdGF0ZVsxXSAqIGQzX3JhZGlhbnMsIHJvdGF0ZS5sZW5ndGggPiAyID8gcm90YXRlWzJdICogZDNfcmFkaWFucyA6IDApO1xuICAgIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlcztcbiAgICB9XG4gICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlcztcbiAgICB9O1xuICAgIHJldHVybiBmb3J3YXJkO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9faWRlbnRpdHlSb3RhdGlvbijOuywgz4YpIHtcbiAgICByZXR1cm4gWyDOuyA+IM+AID8gzrsgLSDPhCA6IM67IDwgLc+AID8gzrsgKyDPhCA6IM67LCDPhiBdO1xuICB9XG4gIGQzX2dlb19pZGVudGl0eVJvdGF0aW9uLmludmVydCA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG4gIGZ1bmN0aW9uIGQzX2dlb19yb3RhdGlvbijOtM67LCDOtM+GLCDOtM6zKSB7XG4gICAgcmV0dXJuIM60zrsgPyDOtM+GIHx8IM60zrMgPyBkM19nZW9fY29tcG9zZShkM19nZW9fcm90YXRpb27OuyjOtM67KSwgZDNfZ2VvX3JvdGF0aW9uz4bOsyjOtM+GLCDOtM6zKSkgOiBkM19nZW9fcm90YXRpb27OuyjOtM67KSA6IM60z4YgfHwgzrTOsyA/IGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykgOiBkM19nZW9faWRlbnRpdHlSb3RhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fZm9yd2FyZFJvdGF0aW9uzrsozrTOuykge1xuICAgIHJldHVybiBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIHJldHVybiDOuyArPSDOtM67LCBbIM67ID4gz4AgPyDOuyAtIM+EIDogzrsgPCAtz4AgPyDOuyArIM+EIDogzrssIM+GIF07XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcm90YXRpb27OuyjOtM67KSB7XG4gICAgdmFyIHJvdGF0aW9uID0gZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67KM60zrspO1xuICAgIHJvdGF0aW9uLmludmVydCA9IGQzX2dlb19mb3J3YXJkUm90YXRpb27OuygtzrTOuyk7XG4gICAgcmV0dXJuIHJvdGF0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykge1xuICAgIHZhciBjb3POtM+GID0gTWF0aC5jb3MozrTPhiksIHNpbs60z4YgPSBNYXRoLnNpbijOtM+GKSwgY29zzrTOsyA9IE1hdGguY29zKM60zrMpLCBzaW7OtM6zID0gTWF0aC5zaW4ozrTOsyk7XG4gICAgZnVuY3Rpb24gcm90YXRpb24ozrssIM+GKSB7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhiwgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLCB6ID0gTWF0aC5zaW4oz4YpLCBrID0geiAqIGNvc860z4YgKyB4ICogc2luzrTPhjtcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSAqIGNvc860zrMgLSBrICogc2luzrTOsywgeCAqIGNvc860z4YgLSB6ICogc2luzrTPhiksIGQzX2FzaW4oayAqIGNvc860zrMgKyB5ICogc2luzrTOsykgXTtcbiAgICB9XG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhiwgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLCB6ID0gTWF0aC5zaW4oz4YpLCBrID0geiAqIGNvc860zrMgLSB5ICogc2luzrTOsztcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSAqIGNvc860zrMgKyB6ICogc2luzrTOsywgeCAqIGNvc860z4YgKyBrICogc2luzrTPhiksIGQzX2FzaW4oayAqIGNvc860z4YgLSB4ICogc2luzrTPhikgXTtcbiAgICB9O1xuICAgIHJldHVybiByb3RhdGlvbjtcbiAgfVxuICBkMy5nZW8uY2lyY2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9yaWdpbiA9IFsgMCwgMCBdLCBhbmdsZSwgcHJlY2lzaW9uID0gNiwgaW50ZXJwb2xhdGU7XG4gICAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgICAgdmFyIGNlbnRlciA9IHR5cGVvZiBvcmlnaW4gPT09IFwiZnVuY3Rpb25cIiA/IG9yaWdpbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogb3JpZ2luLCByb3RhdGUgPSBkM19nZW9fcm90YXRpb24oLWNlbnRlclswXSAqIGQzX3JhZGlhbnMsIC1jZW50ZXJbMV0gKiBkM19yYWRpYW5zLCAwKS5pbnZlcnQsIHJpbmcgPSBbXTtcbiAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgICAgICAgeFswXSAqPSBkM19kZWdyZWVzLCB4WzFdICo9IGQzX2RlZ3JlZXM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbIHJpbmcgXVxuICAgICAgfTtcbiAgICB9XG4gICAgY2lyY2xlLm9yaWdpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9yaWdpbjtcbiAgICAgIG9yaWdpbiA9IHg7XG4gICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH07XG4gICAgY2lyY2xlLmFuZ2xlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYW5nbGU7XG4gICAgICBpbnRlcnBvbGF0ZSA9IGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZSgoYW5nbGUgPSAreCkgKiBkM19yYWRpYW5zLCBwcmVjaXNpb24gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjaXJjbGU7XG4gICAgfTtcbiAgICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgICAgaW50ZXJwb2xhdGUgPSBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUoYW5nbGUgKiBkM19yYWRpYW5zLCAocHJlY2lzaW9uID0gK18pICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH07XG4gICAgcmV0dXJuIGNpcmNsZS5hbmdsZSg5MCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZShyYWRpdXMsIHByZWNpc2lvbikge1xuICAgIHZhciBjciA9IE1hdGguY29zKHJhZGl1cyksIHNyID0gTWF0aC5zaW4ocmFkaXVzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZnJvbSwgdG8sIGRpcmVjdGlvbiwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBzdGVwID0gZGlyZWN0aW9uICogcHJlY2lzaW9uO1xuICAgICAgaWYgKGZyb20gIT0gbnVsbCkge1xuICAgICAgICBmcm9tID0gZDNfZ2VvX2NpcmNsZUFuZ2xlKGNyLCBmcm9tKTtcbiAgICAgICAgdG8gPSBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHRvKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA+IDAgPyBmcm9tIDwgdG8gOiBmcm9tID4gdG8pIGZyb20gKz0gZGlyZWN0aW9uICogz4Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcm9tID0gcmFkaXVzICsgZGlyZWN0aW9uICogz4Q7XG4gICAgICAgIHRvID0gcmFkaXVzIC0gLjUgKiBzdGVwO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgcG9pbnQsIHQgPSBmcm9tOyBkaXJlY3Rpb24gPiAwID8gdCA+IHRvIDogdCA8IHRvOyB0IC09IHN0ZXApIHtcbiAgICAgICAgbGlzdGVuZXIucG9pbnQoKHBvaW50ID0gZDNfZ2VvX3NwaGVyaWNhbChbIGNyLCAtc3IgKiBNYXRoLmNvcyh0KSwgLXNyICogTWF0aC5zaW4odCkgXSkpWzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHBvaW50KSB7XG4gICAgdmFyIGEgPSBkM19nZW9fY2FydGVzaWFuKHBvaW50KTtcbiAgICBhWzBdIC09IGNyO1xuICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYSk7XG4gICAgdmFyIGFuZ2xlID0gZDNfYWNvcygtYVsxXSk7XG4gICAgcmV0dXJuICgoLWFbMl0gPCAwID8gLWFuZ2xlIDogYW5nbGUpICsgMiAqIE1hdGguUEkgLSDOtSkgJSAoMiAqIE1hdGguUEkpO1xuICB9XG4gIGQzLmdlby5kaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgzpTOuyA9IChiWzBdIC0gYVswXSkgKiBkM19yYWRpYW5zLCDPhjAgPSBhWzFdICogZDNfcmFkaWFucywgz4YxID0gYlsxXSAqIGQzX3JhZGlhbnMsIHNpbs6UzrsgPSBNYXRoLnNpbijOlM67KSwgY29zzpTOuyA9IE1hdGguY29zKM6UzrspLCBzaW7PhjAgPSBNYXRoLnNpbijPhjApLCBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLCBzaW7PhjEgPSBNYXRoLnNpbijPhjEpLCBjb3PPhjEgPSBNYXRoLmNvcyjPhjEpLCB0O1xuICAgIHJldHVybiBNYXRoLmF0YW4yKE1hdGguc3FydCgodCA9IGNvc8+GMSAqIHNpbs6UzrspICogdCArICh0ID0gY29zz4YwICogc2luz4YxIC0gc2luz4YwICogY29zz4YxICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YxICsgY29zz4YwICogY29zz4YxICogY29zzpTOuyk7XG4gIH07XG4gIGQzLmdlby5ncmF0aWN1bGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgeDEsIHgwLCBYMSwgWDAsIHkxLCB5MCwgWTEsIFkwLCBkeCA9IDEwLCBkeSA9IGR4LCBEWCA9IDkwLCBEWSA9IDM2MCwgeCwgeSwgWCwgWSwgcHJlY2lzaW9uID0gMi41O1xuICAgIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBsaW5lcygpXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoWDAgLyBEWCkgKiBEWCwgWDEsIERYKS5tYXAoWCkuY29uY2F0KGQzLnJhbmdlKE1hdGguY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSkuY29uY2F0KGQzLnJhbmdlKE1hdGguY2VpbCh4MCAvIGR4KSAqIGR4LCB4MSwgZHgpLmZpbHRlcihmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBhYnMoeCAlIERYKSA+IM61O1xuICAgICAgfSkubWFwKHgpKS5jb25jYXQoZDMucmFuZ2UoTWF0aC5jZWlsKHkwIC8gZHkpICogZHksIHkxLCBkeSkuZmlsdGVyKGZ1bmN0aW9uKHkpIHtcbiAgICAgICAgcmV0dXJuIGFicyh5ICUgRFkpID4gzrU7XG4gICAgICB9KS5tYXAoeSkpO1xuICAgIH1cbiAgICBncmF0aWN1bGUubGluZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiTGluZVN0cmluZ1wiLFxuICAgICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBncmF0aWN1bGUub3V0bGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbIFgoWDApLmNvbmNhdChZKFkxKS5zbGljZSgxKSwgWChYMSkucmV2ZXJzZSgpLnNsaWNlKDEpLCBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpIF1cbiAgICAgIH07XG4gICAgfTtcbiAgICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLm1pbm9yRXh0ZW50KCk7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yRXh0ZW50KF8pLm1pbm9yRXh0ZW50KF8pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm1ham9yRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIFgwLCBZMCBdLCBbIFgxLCBZMSBdIF07XG4gICAgICBYMCA9ICtfWzBdWzBdLCBYMSA9ICtfWzFdWzBdO1xuICAgICAgWTAgPSArX1swXVsxXSwgWTEgPSArX1sxXVsxXTtcbiAgICAgIGlmIChYMCA+IFgxKSBfID0gWDAsIFgwID0gWDEsIFgxID0gXztcbiAgICAgIGlmIChZMCA+IFkxKSBfID0gWTAsIFkwID0gWTEsIFkxID0gXztcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gICAgfTtcbiAgICBncmF0aWN1bGUubWlub3JFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIFsgeDAsIHkwIF0sIFsgeDEsIHkxIF0gXTtcbiAgICAgIHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF07XG4gICAgICB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdO1xuICAgICAgaWYgKHgwID4geDEpIF8gPSB4MCwgeDAgPSB4MSwgeDEgPSBfO1xuICAgICAgaWYgKHkwID4geTEpIF8gPSB5MCwgeTAgPSB5MSwgeTEgPSBfO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLm1pbm9yU3RlcCgpO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5tYWpvclN0ZXAoXykubWlub3JTdGVwKF8pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm1ham9yU3RlcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgRFgsIERZIF07XG4gICAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5taW5vclN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIGR4LCBkeSBdO1xuICAgICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcbiAgICBncmF0aWN1bGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgICAgcHJlY2lzaW9uID0gK187XG4gICAgICB4ID0gZDNfZ2VvX2dyYXRpY3VsZVgoeTAsIHkxLCA5MCk7XG4gICAgICB5ID0gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBwcmVjaXNpb24pO1xuICAgICAgWCA9IGQzX2dlb19ncmF0aWN1bGVYKFkwLCBZMSwgOTApO1xuICAgICAgWSA9IGQzX2dlb19ncmF0aWN1bGVZKFgwLCBYMSwgcHJlY2lzaW9uKTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcbiAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yRXh0ZW50KFsgWyAtMTgwLCAtOTAgKyDOtSBdLCBbIDE4MCwgOTAgLSDOtSBdIF0pLm1pbm9yRXh0ZW50KFsgWyAtMTgwLCAtODAgLSDOtSBdLCBbIDE4MCwgODAgKyDOtSBdIF0pO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gICAgdmFyIHkgPSBkMy5yYW5nZSh5MCwgeTEgLSDOtSwgZHkpLmNvbmNhdCh5MSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7XG4gICAgICAgIHJldHVybiBbIHgsIHkgXTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBkeCkge1xuICAgIHZhciB4ID0gZDMucmFuZ2UoeDAsIHgxIC0gzrUsIGR4KS5jb25jYXQoeDEpO1xuICAgIHJldHVybiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gWyB4LCB5IF07XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NvdXJjZShkKSB7XG4gICAgcmV0dXJuIGQuc291cmNlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RhcmdldChkKSB7XG4gICAgcmV0dXJuIGQudGFyZ2V0O1xuICB9XG4gIGQzLmdlby5ncmVhdEFyYyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3VyY2UgPSBkM19zb3VyY2UsIHNvdXJjZV8sIHRhcmdldCA9IGQzX3RhcmdldCwgdGFyZ2V0XztcbiAgICBmdW5jdGlvbiBncmVhdEFyYygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiTGluZVN0cmluZ1wiLFxuICAgICAgICBjb29yZGluYXRlczogWyBzb3VyY2VfIHx8IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0YXJnZXRfIHx8IHRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIF1cbiAgICAgIH07XG4gICAgfVxuICAgIGdyZWF0QXJjLmRpc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDMuZ2VvLmRpc3RhbmNlKHNvdXJjZV8gfHwgc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRhcmdldF8gfHwgdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgZ3JlYXRBcmMuc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc291cmNlO1xuICAgICAgc291cmNlID0gXywgc291cmNlXyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBudWxsIDogXztcbiAgICAgIHJldHVybiBncmVhdEFyYztcbiAgICB9O1xuICAgIGdyZWF0QXJjLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcbiAgICAgIHRhcmdldCA9IF8sIHRhcmdldF8gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gbnVsbCA6IF87XG4gICAgICByZXR1cm4gZ3JlYXRBcmM7XG4gICAgfTtcbiAgICBncmVhdEFyYy5wcmVjaXNpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZ3JlYXRBcmMgOiAwO1xuICAgIH07XG4gICAgcmV0dXJuIGdyZWF0QXJjO1xuICB9O1xuICBkMy5nZW8uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihzb3VyY2UsIHRhcmdldCkge1xuICAgIHJldHVybiBkM19nZW9faW50ZXJwb2xhdGUoc291cmNlWzBdICogZDNfcmFkaWFucywgc291cmNlWzFdICogZDNfcmFkaWFucywgdGFyZ2V0WzBdICogZDNfcmFkaWFucywgdGFyZ2V0WzFdICogZDNfcmFkaWFucyk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19pbnRlcnBvbGF0ZSh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBjeTAgPSBNYXRoLmNvcyh5MCksIHN5MCA9IE1hdGguc2luKHkwKSwgY3kxID0gTWF0aC5jb3MoeTEpLCBzeTEgPSBNYXRoLnNpbih5MSksIGt4MCA9IGN5MCAqIE1hdGguY29zKHgwKSwga3kwID0gY3kwICogTWF0aC5zaW4oeDApLCBreDEgPSBjeTEgKiBNYXRoLmNvcyh4MSksIGt5MSA9IGN5MSAqIE1hdGguc2luKHgxKSwgZCA9IDIgKiBNYXRoLmFzaW4oTWF0aC5zcXJ0KGQzX2hhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogZDNfaGF2ZXJzaW4oeDEgLSB4MCkpKSwgayA9IDEgLyBNYXRoLnNpbihkKTtcbiAgICB2YXIgaW50ZXJwb2xhdGUgPSBkID8gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIEIgPSBNYXRoLnNpbih0ICo9IGQpICogaywgQSA9IE1hdGguc2luKGQgLSB0KSAqIGssIHggPSBBICoga3gwICsgQiAqIGt4MSwgeSA9IEEgKiBreTAgKyBCICoga3kxLCB6ID0gQSAqIHN5MCArIEIgKiBzeTE7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHksIHgpICogZDNfZGVncmVlcywgTWF0aC5hdGFuMih6LCBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSkpICogZDNfZGVncmVlcyBdO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbIHgwICogZDNfZGVncmVlcywgeTAgKiBkM19kZWdyZWVzIF07XG4gICAgfTtcbiAgICBpbnRlcnBvbGF0ZS5kaXN0YW5jZSA9IGQ7XG4gICAgcmV0dXJuIGludGVycG9sYXRlO1xuICB9XG4gIGQzLmdlby5sZW5ndGggPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBkM19nZW9fbGVuZ3RoU3VtID0gMDtcbiAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2xlbmd0aCk7XG4gICAgcmV0dXJuIGQzX2dlb19sZW5ndGhTdW07XG4gIH07XG4gIHZhciBkM19nZW9fbGVuZ3RoU3VtO1xuICB2YXIgZDNfZ2VvX2xlbmd0aCA9IHtcbiAgICBzcGhlcmU6IGQzX25vb3AsXG4gICAgcG9pbnQ6IGQzX25vb3AsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fbGVuZ3RoTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgcG9seWdvblN0YXJ0OiBkM19ub29wLFxuICAgIHBvbHlnb25FbmQ6IGQzX25vb3BcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX2xlbmd0aExpbmVTdGFydCgpIHtcbiAgICB2YXIgzrswLCBzaW7PhjAsIGNvc8+GMDtcbiAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICDOuzAgPSDOuyAqIGQzX3JhZGlhbnMsIHNpbs+GMCA9IE1hdGguc2luKM+GICo9IGQzX3JhZGlhbnMpLCBjb3PPhjAgPSBNYXRoLmNvcyjPhik7XG4gICAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gbmV4dFBvaW50O1xuICAgIH07XG4gICAgZDNfZ2VvX2xlbmd0aC5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gZDNfZ2VvX2xlbmd0aC5saW5lRW5kID0gZDNfbm9vcDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcbiAgICAgIHZhciBzaW7PhiA9IE1hdGguc2luKM+GICo9IGQzX3JhZGlhbnMpLCBjb3PPhiA9IE1hdGguY29zKM+GKSwgdCA9IGFicygozrsgKj0gZDNfcmFkaWFucykgLSDOuzApLCBjb3POlM67ID0gTWF0aC5jb3ModCk7XG4gICAgICBkM19nZW9fbGVuZ3RoU3VtICs9IE1hdGguYXRhbjIoTWF0aC5zcXJ0KCh0ID0gY29zz4YgKiBNYXRoLnNpbih0KSkgKiB0ICsgKHQgPSBjb3PPhjAgKiBzaW7PhiAtIHNpbs+GMCAqIGNvc8+GICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YgKyBjb3PPhjAgKiBjb3PPhiAqIGNvc86UzrspO1xuICAgICAgzrswID0gzrssIHNpbs+GMCA9IHNpbs+GLCBjb3PPhjAgPSBjb3PPhjtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2F6aW11dGhhbChzY2FsZSwgYW5nbGUpIHtcbiAgICBmdW5jdGlvbiBhemltdXRoYWwozrssIM+GKSB7XG4gICAgICB2YXIgY29zzrsgPSBNYXRoLmNvcyjOuyksIGNvc8+GID0gTWF0aC5jb3Moz4YpLCBrID0gc2NhbGUoY29zzrsgKiBjb3PPhik7XG4gICAgICByZXR1cm4gWyBrICogY29zz4YgKiBNYXRoLnNpbijOuyksIGsgKiBNYXRoLnNpbijPhikgXTtcbiAgICB9XG4gICAgYXppbXV0aGFsLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgSA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSwgYyA9IGFuZ2xlKM+BKSwgc2luYyA9IE1hdGguc2luKGMpLCBjb3NjID0gTWF0aC5jb3MoYyk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHggKiBzaW5jLCDPgSAqIGNvc2MpLCBNYXRoLmFzaW4oz4EgJiYgeSAqIHNpbmMgLyDPgSkgXTtcbiAgICB9O1xuICAgIHJldHVybiBhemltdXRoYWw7XG4gIH1cbiAgdmFyIGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWEgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KDIgLyAoMSArIGNvc867Y29zz4YpKTtcbiAgfSwgZnVuY3Rpb24oz4EpIHtcbiAgICByZXR1cm4gMiAqIE1hdGguYXNpbijPgSAvIDIpO1xuICB9KTtcbiAgKGQzLmdlby5hemltdXRoYWxFcXVhbEFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2F6aW11dGhhbEVxdWFsQXJlYSk7XG4gIH0pLnJhdyA9IGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWE7XG4gIHZhciBkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcbiAgICB2YXIgYyA9IE1hdGguYWNvcyhjb3POu2Nvc8+GKTtcbiAgICByZXR1cm4gYyAmJiBjIC8gTWF0aC5zaW4oYyk7XG4gIH0sIGQzX2lkZW50aXR5KTtcbiAgKGQzLmdlby5hemltdXRoYWxFcXVpZGlzdGFudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQpO1xuICB9KS5yYXcgPSBkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQ7XG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0NvbmZvcm1hbCjPhjAsIM+GMSkge1xuICAgIHZhciBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLCB0ID0gZnVuY3Rpb24oz4YpIHtcbiAgICAgIHJldHVybiBNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpO1xuICAgIH0sIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiBNYXRoLmxvZyhjb3PPhjAgLyBNYXRoLmNvcyjPhjEpKSAvIE1hdGgubG9nKHQoz4YxKSAvIHQoz4YwKSksIEYgPSBjb3PPhjAgKiBNYXRoLnBvdyh0KM+GMCksIG4pIC8gbjtcbiAgICBpZiAoIW4pIHJldHVybiBkM19nZW9fbWVyY2F0b3I7XG4gICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcbiAgICAgIGlmIChGID4gMCkge1xuICAgICAgICBpZiAoz4YgPCAtaGFsZs+AICsgzrUpIM+GID0gLWhhbGbPgCArIM61O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKM+GID4gaGFsZs+AIC0gzrUpIM+GID0gaGFsZs+AIC0gzrU7XG4gICAgICB9XG4gICAgICB2YXIgz4EgPSBGIC8gTWF0aC5wb3codCjPhiksIG4pO1xuICAgICAgcmV0dXJuIFsgz4EgKiBNYXRoLnNpbihuICogzrspLCBGIC0gz4EgKiBNYXRoLmNvcyhuICogzrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gRiAtIHksIM+BID0gZDNfc2duKG4pICogTWF0aC5zcXJ0KHggKiB4ICsgz4EwX3kgKiDPgTBfeSk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIDIgKiBNYXRoLmF0YW4oTWF0aC5wb3coRiAvIM+BLCAxIC8gbikpIC0gaGFsZs+AIF07XG4gICAgfTtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxuICAoZDMuZ2VvLmNvbmljQ29uZm9ybWFsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNDb25mb3JtYWwpO1xuICB9KS5yYXcgPSBkM19nZW9fY29uaWNDb25mb3JtYWw7XG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0VxdWlkaXN0YW50KM+GMCwgz4YxKSB7XG4gICAgdmFyIGNvc8+GMCA9IE1hdGguY29zKM+GMCksIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiAoY29zz4YwIC0gTWF0aC5jb3Moz4YxKSkgLyAoz4YxIC0gz4YwKSwgRyA9IGNvc8+GMCAvIG4gKyDPhjA7XG4gICAgaWYgKGFicyhuKSA8IM61KSByZXR1cm4gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcjtcbiAgICBmdW5jdGlvbiBmb3J3YXJkKM67LCDPhikge1xuICAgICAgdmFyIM+BID0gRyAtIM+GO1xuICAgICAgcmV0dXJuIFsgz4EgKiBNYXRoLnNpbihuICogzrspLCBHIC0gz4EgKiBNYXRoLmNvcyhuICogzrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gRyAtIHk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIEcgLSBkM19zZ24obikgKiBNYXRoLnNxcnQoeCAqIHggKyDPgTBfeSAqIM+BMF95KSBdO1xuICAgIH07XG4gICAgcmV0dXJuIGZvcndhcmQ7XG4gIH1cbiAgKGQzLmdlby5jb25pY0VxdWlkaXN0YW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNFcXVpZGlzdGFudCk7XG4gIH0pLnJhdyA9IGQzX2dlb19jb25pY0VxdWlkaXN0YW50O1xuICB2YXIgZDNfZ2VvX2dub21vbmljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgcmV0dXJuIDEgLyBjb3POu2Nvc8+GO1xuICB9LCBNYXRoLmF0YW4pO1xuICAoZDMuZ2VvLmdub21vbmljID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19nbm9tb25pYyk7XG4gIH0pLnJhdyA9IGQzX2dlb19nbm9tb25pYztcbiAgZnVuY3Rpb24gZDNfZ2VvX21lcmNhdG9yKM67LCDPhikge1xuICAgIHJldHVybiBbIM67LCBNYXRoLmxvZyhNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpKSBdO1xuICB9XG4gIGQzX2dlb19tZXJjYXRvci5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsgeCwgMiAqIE1hdGguYXRhbihNYXRoLmV4cCh5KSkgLSBoYWxmz4AgXTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gICAgdmFyIG0gPSBkM19nZW9fcHJvamVjdGlvbihwcm9qZWN0KSwgc2NhbGUgPSBtLnNjYWxlLCB0cmFuc2xhdGUgPSBtLnRyYW5zbGF0ZSwgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCwgY2xpcEF1dG87XG4gICAgbS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSBzY2FsZS5hcHBseShtLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHYgPT09IG0gPyBjbGlwQXV0byA/IG0uY2xpcEV4dGVudChudWxsKSA6IG0gOiB2O1xuICAgIH07XG4gICAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdHJhbnNsYXRlLmFwcGx5KG0sIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdiA9PT0gbSA/IGNsaXBBdXRvID8gbS5jbGlwRXh0ZW50KG51bGwpIDogbSA6IHY7XG4gICAgfTtcbiAgICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICB2YXIgdiA9IGNsaXBFeHRlbnQuYXBwbHkobSwgYXJndW1lbnRzKTtcbiAgICAgIGlmICh2ID09PSBtKSB7XG4gICAgICAgIGlmIChjbGlwQXV0byA9IF8gPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBrID0gz4AgKiBzY2FsZSgpLCB0ID0gdHJhbnNsYXRlKCk7XG4gICAgICAgICAgY2xpcEV4dGVudChbIFsgdFswXSAtIGssIHRbMV0gLSBrIF0sIFsgdFswXSArIGssIHRbMV0gKyBrIF0gXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2xpcEF1dG8pIHtcbiAgICAgICAgdiA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdjtcbiAgICB9O1xuICAgIHJldHVybiBtLmNsaXBFeHRlbnQobnVsbCk7XG4gIH1cbiAgKGQzLmdlby5tZXJjYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uKGQzX2dlb19tZXJjYXRvcik7XG4gIH0pLnJhdyA9IGQzX2dlb19tZXJjYXRvcjtcbiAgdmFyIGQzX2dlb19vcnRob2dyYXBoaWMgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAxO1xuICB9LCBNYXRoLmFzaW4pO1xuICAoZDMuZ2VvLm9ydGhvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fb3J0aG9ncmFwaGljKTtcbiAgfSkucmF3ID0gZDNfZ2VvX29ydGhvZ3JhcGhpYztcbiAgdmFyIGQzX2dlb19zdGVyZW9ncmFwaGljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgcmV0dXJuIDEgLyAoMSArIGNvc867Y29zz4YpO1xuICB9LCBmdW5jdGlvbijPgSkge1xuICAgIHJldHVybiAyICogTWF0aC5hdGFuKM+BKTtcbiAgfSk7XG4gIChkMy5nZW8uc3RlcmVvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fc3RlcmVvZ3JhcGhpYyk7XG4gIH0pLnJhdyA9IGQzX2dlb19zdGVyZW9ncmFwaGljO1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yKM67LCDPhikge1xuICAgIHJldHVybiBbIE1hdGgubG9nKE1hdGgudGFuKM+AIC8gNCArIM+GIC8gMikpLCAtzrsgXTtcbiAgfVxuICBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gWyAteSwgMiAqIE1hdGguYXRhbihNYXRoLmV4cCh4KSkgLSBoYWxmz4AgXTtcbiAgfTtcbiAgKGQzLmdlby50cmFuc3ZlcnNlTWVyY2F0b3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvamVjdGlvbiA9IGQzX2dlb19tZXJjYXRvclByb2plY3Rpb24oZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvciksIGNlbnRlciA9IHByb2plY3Rpb24uY2VudGVyLCByb3RhdGUgPSBwcm9qZWN0aW9uLnJvdGF0ZTtcbiAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBfID8gY2VudGVyKFsgLV9bMV0sIF9bMF0gXSkgOiAoXyA9IGNlbnRlcigpLCBbIF9bMV0sIC1fWzBdIF0pO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gXyA/IHJvdGF0ZShbIF9bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwIF0pIDogKF8gPSByb3RhdGUoKSwgXG4gICAgICBbIF9bMF0sIF9bMV0sIF9bMl0gLSA5MCBdKTtcbiAgICB9O1xuICAgIHJldHVybiByb3RhdGUoWyAwLCAwLCA5MCBdKTtcbiAgfSkucmF3ID0gZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvcjtcbiAgZDMuZ2VvbSA9IHt9O1xuICBmdW5jdGlvbiBkM19nZW9tX3BvaW50WChkKSB7XG4gICAgcmV0dXJuIGRbMF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2ludFkoZCkge1xuICAgIHJldHVybiBkWzFdO1xuICB9XG4gIGQzLmdlb20uaHVsbCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaHVsbCh2ZXJ0aWNlcyk7XG4gICAgZnVuY3Rpb24gaHVsbChkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5sZW5ndGggPCAzKSByZXR1cm4gW107XG4gICAgICB2YXIgZnggPSBkM19mdW5jdG9yKHgpLCBmeSA9IGQzX2Z1bmN0b3IoeSksIGksIG4gPSBkYXRhLmxlbmd0aCwgcG9pbnRzID0gW10sIGZsaXBwZWRQb2ludHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcG9pbnRzLnB1c2goWyArZnguY2FsbCh0aGlzLCBkYXRhW2ldLCBpKSwgK2Z5LmNhbGwodGhpcywgZGF0YVtpXSwgaSksIGkgXSk7XG4gICAgICB9XG4gICAgICBwb2ludHMuc29ydChkM19nZW9tX2h1bGxPcmRlcik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBmbGlwcGVkUG9pbnRzLnB1c2goWyBwb2ludHNbaV1bMF0sIC1wb2ludHNbaV1bMV0gXSk7XG4gICAgICB2YXIgdXBwZXIgPSBkM19nZW9tX2h1bGxVcHBlcihwb2ludHMpLCBsb3dlciA9IGQzX2dlb21faHVsbFVwcGVyKGZsaXBwZWRQb2ludHMpO1xuICAgICAgdmFyIHNraXBMZWZ0ID0gbG93ZXJbMF0gPT09IHVwcGVyWzBdLCBza2lwUmlnaHQgPSBsb3dlcltsb3dlci5sZW5ndGggLSAxXSA9PT0gdXBwZXJbdXBwZXIubGVuZ3RoIC0gMV0sIHBvbHlnb24gPSBbXTtcbiAgICAgIGZvciAoaSA9IHVwcGVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBwb2x5Z29uLnB1c2goZGF0YVtwb2ludHNbdXBwZXJbaV1dWzJdXSk7XG4gICAgICBmb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlci5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgcG9seWdvbi5wdXNoKGRhdGFbcG9pbnRzW2xvd2VyW2ldXVsyXV0pO1xuICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfVxuICAgIGh1bGwueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSBfLCBodWxsKSA6IHg7XG4gICAgfTtcbiAgICBodWxsLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gXywgaHVsbCkgOiB5O1xuICAgIH07XG4gICAgcmV0dXJuIGh1bGw7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21faHVsbFVwcGVyKHBvaW50cykge1xuICAgIHZhciBuID0gcG9pbnRzLmxlbmd0aCwgaHVsbCA9IFsgMCwgMSBdLCBocyA9IDI7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyBpKyspIHtcbiAgICAgIHdoaWxlIChocyA+IDEgJiYgZDNfY3Jvc3MyZChwb2ludHNbaHVsbFtocyAtIDJdXSwgcG9pbnRzW2h1bGxbaHMgLSAxXV0sIHBvaW50c1tpXSkgPD0gMCkgLS1ocztcbiAgICAgIGh1bGxbaHMrK10gPSBpO1xuICAgIH1cbiAgICByZXR1cm4gaHVsbC5zbGljZSgwLCBocyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9odWxsT3JkZXIoYSwgYikge1xuICAgIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbiAgfVxuICBkMy5nZW9tLnBvbHlnb24gPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIGQzX3N1YmNsYXNzKGNvb3JkaW5hdGVzLCBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUpO1xuICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgfTtcbiAgdmFyIGQzX2dlb21fcG9seWdvblByb3RvdHlwZSA9IGQzLmdlb20ucG9seWdvbi5wcm90b3R5cGUgPSBbXTtcbiAgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlLmFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIGEsIGIgPSB0aGlzW24gLSAxXSwgYXJlYSA9IDA7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBhcmVhICs9IGFbMV0gKiBiWzBdIC0gYVswXSAqIGJbMV07XG4gICAgfVxuICAgIHJldHVybiBhcmVhICogLjU7XG4gIH07XG4gIGQzX2dlb21fcG9seWdvblByb3RvdHlwZS5jZW50cm9pZCA9IGZ1bmN0aW9uKGspIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIHggPSAwLCB5ID0gMCwgYSwgYiA9IHRoaXNbbiAtIDFdLCBjO1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgayA9IC0xIC8gKDYgKiB0aGlzLmFyZWEoKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBjID0gYVswXSAqIGJbMV0gLSBiWzBdICogYVsxXTtcbiAgICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgICB5ICs9IChhWzFdICsgYlsxXSkgKiBjO1xuICAgIH1cbiAgICByZXR1cm4gWyB4ICogaywgeSAqIGsgXTtcbiAgfTtcbiAgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlLmNsaXAgPSBmdW5jdGlvbihzdWJqZWN0KSB7XG4gICAgdmFyIGlucHV0LCBjbG9zZWQgPSBkM19nZW9tX3BvbHlnb25DbG9zZWQoc3ViamVjdCksIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoIC0gZDNfZ2VvbV9wb2x5Z29uQ2xvc2VkKHRoaXMpLCBqLCBtLCBhID0gdGhpc1tuIC0gMV0sIGIsIGMsIGQ7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlucHV0ID0gc3ViamVjdC5zbGljZSgpO1xuICAgICAgc3ViamVjdC5sZW5ndGggPSAwO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBjID0gaW5wdXRbKG0gPSBpbnB1dC5sZW5ndGggLSBjbG9zZWQpIC0gMV07XG4gICAgICBqID0gLTE7XG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICBkID0gaW5wdXRbal07XG4gICAgICAgIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoZCwgYSwgYikpIHtcbiAgICAgICAgICBpZiAoIWQzX2dlb21fcG9seWdvbkluc2lkZShjLCBhLCBiKSkge1xuICAgICAgICAgICAgc3ViamVjdC5wdXNoKGQzX2dlb21fcG9seWdvbkludGVyc2VjdChjLCBkLCBhLCBiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1YmplY3QucHVzaChkKTtcbiAgICAgICAgfSBlbHNlIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoYywgYSwgYikpIHtcbiAgICAgICAgICBzdWJqZWN0LnB1c2goZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpKTtcbiAgICAgICAgfVxuICAgICAgICBjID0gZDtcbiAgICAgIH1cbiAgICAgIGlmIChjbG9zZWQpIHN1YmplY3QucHVzaChzdWJqZWN0WzBdKTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gc3ViamVjdDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKHAsIGEsIGIpIHtcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChwWzFdIC0gYVsxXSkgPCAoYlsxXSAtIGFbMV0pICogKHBbMF0gLSBhWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoYywgZCwgYSwgYikge1xuICAgIHZhciB4MSA9IGNbMF0sIHgzID0gYVswXSwgeDIxID0gZFswXSAtIHgxLCB4NDMgPSBiWzBdIC0geDMsIHkxID0gY1sxXSwgeTMgPSBhWzFdLCB5MjEgPSBkWzFdIC0geTEsIHk0MyA9IGJbMV0gLSB5MywgdWEgPSAoeDQzICogKHkxIC0geTMpIC0geTQzICogKHgxIC0geDMpKSAvICh5NDMgKiB4MjEgLSB4NDMgKiB5MjEpO1xuICAgIHJldHVybiBbIHgxICsgdWEgKiB4MjEsIHkxICsgdWEgKiB5MjEgXTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25DbG9zZWQoY29vcmRpbmF0ZXMpIHtcbiAgICB2YXIgYSA9IGNvb3JkaW5hdGVzWzBdLCBiID0gY29vcmRpbmF0ZXNbY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuICEoYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV0pO1xuICB9XG4gIHZhciBkM19nZW9tX3Zvcm9ub2lFZGdlcywgZDNfZ2VvbV92b3Jvbm9pQ2VsbHMsIGQzX2dlb21fdm9yb25vaUJlYWNoZXMsIGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbCA9IFtdLCBkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZSwgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcywgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbCA9IFtdO1xuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lCZWFjaCgpIHtcbiAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUodGhpcyk7XG4gICAgdGhpcy5lZGdlID0gdGhpcy5zaXRlID0gdGhpcy5jaXJjbGUgPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNyZWF0ZUJlYWNoKHNpdGUpIHtcbiAgICB2YXIgYmVhY2ggPSBkM19nZW9tX3Zvcm9ub2lCZWFjaFBvb2wucG9wKCkgfHwgbmV3IGQzX2dlb21fdm9yb25vaUJlYWNoKCk7XG4gICAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gICAgcmV0dXJuIGJlYWNoO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGJlYWNoKSB7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hQb29sLnB1c2goYmVhY2gpO1xuICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShiZWFjaCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goYmVhY2gpIHtcbiAgICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLCB4ID0gY2lyY2xlLngsIHkgPSBjaXJjbGUuY3ksIHZlcnRleCA9IHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfSwgcHJldmlvdXMgPSBiZWFjaC5QLCBuZXh0ID0gYmVhY2guTiwgZGlzYXBwZWFyaW5nID0gWyBiZWFjaCBdO1xuICAgIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGJlYWNoKTtcbiAgICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICAgIHdoaWxlIChsQXJjLmNpcmNsZSAmJiBhYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgzrUgJiYgYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCDOtSkge1xuICAgICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGxBcmMpO1xuICAgICAgbEFyYyA9IHByZXZpb3VzO1xuICAgIH1cbiAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgdmFyIHJBcmMgPSBuZXh0O1xuICAgIHdoaWxlIChyQXJjLmNpcmNsZSAmJiBhYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgzrUgJiYgYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCDOtSkge1xuICAgICAgbmV4dCA9IHJBcmMuTjtcbiAgICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQmVhY2gockFyYyk7XG4gICAgICByQXJjID0gbmV4dDtcbiAgICB9XG4gICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsIGlBcmM7XG4gICAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbaUFyY107XG4gICAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICAgIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgICB9XG4gICAgbEFyYyA9IGRpc2FwcGVhcmluZ1swXTtcbiAgICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gICAgckFyYy5lZGdlID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKHJBcmMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUFkZEJlYWNoKHNpdGUpIHtcbiAgICB2YXIgeCA9IHNpdGUueCwgZGlyZWN0cml4ID0gc2l0ZS55LCBsQXJjLCByQXJjLCBkeGwsIGR4ciwgbm9kZSA9IGQzX2dlb21fdm9yb25vaUJlYWNoZXMuXztcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgZHhsID0gZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KSAtIHg7XG4gICAgICBpZiAoZHhsID4gzrUpIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuICAgICAgICBkeHIgPSB4IC0gZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCk7XG4gICAgICAgIGlmIChkeHIgPiDOtSkge1xuICAgICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlID0gbm9kZS5SO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChkeGwgPiAtzrUpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgICByQXJjID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC3OtSkge1xuICAgICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgICByQXJjID0gbm9kZS5OO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsQXJjID0gckFyYyA9IG5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBuZXdBcmMgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVCZWFjaChzaXRlKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuICAgIGlmICghbEFyYyAmJiAhckFyYykgcmV0dXJuO1xuICAgIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgICByQXJjID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaUJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUockFyYyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghckFyYykge1xuICAgICAgbmV3QXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSwgYXggPSBsU2l0ZS54LCBheSA9IGxTaXRlLnksIGJ4ID0gc2l0ZS54IC0gYXgsIGJ5ID0gc2l0ZS55IC0gYXksIHJTaXRlID0gckFyYy5zaXRlLCBjeCA9IHJTaXRlLnggLSBheCwgY3kgPSByU2l0ZS55IC0gYXksIGQgPSAyICogKGJ4ICogY3kgLSBieSAqIGN4KSwgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSwgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSwgdmVydGV4ID0ge1xuICAgICAgeDogKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCxcbiAgICAgIHk6IChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXlcbiAgICB9O1xuICAgIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQockFyYy5lZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCk7XG4gICAgbmV3QXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICAgIHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2Uoc2l0ZSwgclNpdGUsIG51bGwsIHZlcnRleCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShyQXJjKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lMZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICAgIHZhciBzaXRlID0gYXJjLnNpdGUsIHJmb2N4ID0gc2l0ZS54LCByZm9jeSA9IHNpdGUueSwgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuICAgIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuICAgIHZhciBsQXJjID0gYXJjLlA7XG4gICAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuICAgIHNpdGUgPSBsQXJjLnNpdGU7XG4gICAgdmFyIGxmb2N4ID0gc2l0ZS54LCBsZm9jeSA9IHNpdGUueSwgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcbiAgICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG4gICAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCwgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLCBiID0gaGwgLyBwbGJ5MjtcbiAgICBpZiAoYWJ5MikgcmV0dXJuICgtYiArIE1hdGguc3FydChiICogYiAtIDIgKiBhYnkyICogKGhsICogaGwgLyAoLTIgKiBwbGJ5MikgLSBsZm9jeSArIHBsYnkyIC8gMiArIHJmb2N5IC0gcGJ5MiAvIDIpKSkgLyBhYnkyICsgcmZvY3g7XG4gICAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gICAgdmFyIHJBcmMgPSBhcmMuTjtcbiAgICBpZiAockFyYykgcmV0dXJuIGQzX2dlb21fdm9yb25vaUxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gICAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgICByZXR1cm4gc2l0ZS55ID09PSBkaXJlY3RyaXggPyBzaXRlLnggOiBJbmZpbml0eTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDZWxsKHNpdGUpIHtcbiAgICB0aGlzLnNpdGUgPSBzaXRlO1xuICAgIHRoaXMuZWRnZXMgPSBbXTtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lDZWxsLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhhbGZFZGdlcyA9IHRoaXMuZWRnZXMsIGlIYWxmRWRnZSA9IGhhbGZFZGdlcy5sZW5ndGgsIGVkZ2U7XG4gICAgd2hpbGUgKGlIYWxmRWRnZS0tKSB7XG4gICAgICBlZGdlID0gaGFsZkVkZ2VzW2lIYWxmRWRnZV0uZWRnZTtcbiAgICAgIGlmICghZWRnZS5iIHx8ICFlZGdlLmEpIGhhbGZFZGdlcy5zcGxpY2UoaUhhbGZFZGdlLCAxKTtcbiAgICB9XG4gICAgaGFsZkVkZ2VzLnNvcnQoZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlcik7XG4gICAgcmV0dXJuIGhhbGZFZGdlcy5sZW5ndGg7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNsb3NlQ2VsbHMoZXh0ZW50KSB7XG4gICAgdmFyIHgwID0gZXh0ZW50WzBdWzBdLCB4MSA9IGV4dGVudFsxXVswXSwgeTAgPSBleHRlbnRbMF1bMV0sIHkxID0gZXh0ZW50WzFdWzFdLCB4MiwgeTIsIHgzLCB5MywgY2VsbHMgPSBkM19nZW9tX3Zvcm9ub2lDZWxscywgaUNlbGwgPSBjZWxscy5sZW5ndGgsIGNlbGwsIGlIYWxmRWRnZSwgaGFsZkVkZ2VzLCBuSGFsZkVkZ2VzLCBzdGFydCwgZW5kO1xuICAgIHdoaWxlIChpQ2VsbC0tKSB7XG4gICAgICBjZWxsID0gY2VsbHNbaUNlbGxdO1xuICAgICAgaWYgKCFjZWxsIHx8ICFjZWxsLnByZXBhcmUoKSkgY29udGludWU7XG4gICAgICBoYWxmRWRnZXMgPSBjZWxsLmVkZ2VzO1xuICAgICAgbkhhbGZFZGdlcyA9IGhhbGZFZGdlcy5sZW5ndGg7XG4gICAgICBpSGFsZkVkZ2UgPSAwO1xuICAgICAgd2hpbGUgKGlIYWxmRWRnZSA8IG5IYWxmRWRnZXMpIHtcbiAgICAgICAgZW5kID0gaGFsZkVkZ2VzW2lIYWxmRWRnZV0uZW5kKCksIHgzID0gZW5kLngsIHkzID0gZW5kLnk7XG4gICAgICAgIHN0YXJ0ID0gaGFsZkVkZ2VzWysraUhhbGZFZGdlICUgbkhhbGZFZGdlc10uc3RhcnQoKSwgeDIgPSBzdGFydC54LCB5MiA9IHN0YXJ0Lnk7XG4gICAgICAgIGlmIChhYnMoeDMgLSB4MikgPiDOtSB8fCBhYnMoeTMgLSB5MikgPiDOtSkge1xuICAgICAgICAgIGhhbGZFZGdlcy5zcGxpY2UoaUhhbGZFZGdlLCAwLCBuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZShjZWxsLnNpdGUsIGVuZCwgYWJzKHgzIC0geDApIDwgzrUgJiYgeTEgLSB5MyA+IM61ID8ge1xuICAgICAgICAgICAgeDogeDAsXG4gICAgICAgICAgICB5OiBhYnMoeDIgLSB4MCkgPCDOtSA/IHkyIDogeTFcbiAgICAgICAgICB9IDogYWJzKHkzIC0geTEpIDwgzrUgJiYgeDEgLSB4MyA+IM61ID8ge1xuICAgICAgICAgICAgeDogYWJzKHkyIC0geTEpIDwgzrUgPyB4MiA6IHgxLFxuICAgICAgICAgICAgeTogeTFcbiAgICAgICAgICB9IDogYWJzKHgzIC0geDEpIDwgzrUgJiYgeTMgLSB5MCA+IM61ID8ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBhYnMoeDIgLSB4MSkgPCDOtSA/IHkyIDogeTBcbiAgICAgICAgICB9IDogYWJzKHkzIC0geTApIDwgzrUgJiYgeDMgLSB4MCA+IM61ID8ge1xuICAgICAgICAgICAgeDogYWJzKHkyIC0geTApIDwgzrUgPyB4MiA6IHgwLFxuICAgICAgICAgICAgeTogeTBcbiAgICAgICAgICB9IDogbnVsbCksIGNlbGwuc2l0ZSwgbnVsbCkpO1xuICAgICAgICAgICsrbkhhbGZFZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZU9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hbmdsZSAtIGEuYW5nbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlKCkge1xuICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLmFyYyA9IHRoaXMuc2l0ZSA9IHRoaXMuY3kgPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShhcmMpIHtcbiAgICB2YXIgbEFyYyA9IGFyYy5QLCByQXJjID0gYXJjLk47XG4gICAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG4gICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLCBjU2l0ZSA9IGFyYy5zaXRlLCByU2l0ZSA9IHJBcmMuc2l0ZTtcbiAgICBpZiAobFNpdGUgPT09IHJTaXRlKSByZXR1cm47XG4gICAgdmFyIGJ4ID0gY1NpdGUueCwgYnkgPSBjU2l0ZS55LCBheCA9IGxTaXRlLnggLSBieCwgYXkgPSBsU2l0ZS55IC0gYnksIGN4ID0gclNpdGUueCAtIGJ4LCBjeSA9IHJTaXRlLnkgLSBieTtcbiAgICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICAgIGlmIChkID49IC3OtTIpIHJldHVybjtcbiAgICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSwgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSwgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLCB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQsIGN5ID0geSArIGJ5O1xuICAgIHZhciBjaXJjbGUgPSBkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBkM19nZW9tX3Zvcm9ub2lDaXJjbGUoKTtcbiAgICBjaXJjbGUuYXJjID0gYXJjO1xuICAgIGNpcmNsZS5zaXRlID0gY1NpdGU7XG4gICAgY2lyY2xlLnggPSB4ICsgYng7XG4gICAgY2lyY2xlLnkgPSBjeSArIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICBjaXJjbGUuY3kgPSBjeTtcbiAgICBhcmMuY2lyY2xlID0gY2lyY2xlO1xuICAgIHZhciBiZWZvcmUgPSBudWxsLCBub2RlID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcy5fO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgY2lyY2xlLnkgPT09IG5vZGUueSAmJiBjaXJjbGUueCA8PSBub2RlLngpIHtcbiAgICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gbm9kZS5QO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SOyBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcbiAgICBpZiAoIWJlZm9yZSkgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUgPSBjaXJjbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGFyYykge1xuICAgIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuICAgIGlmIChjaXJjbGUpIHtcbiAgICAgIGlmICghY2lyY2xlLlApIGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlID0gY2lyY2xlLk47XG4gICAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUoY2lyY2xlKTtcbiAgICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDbGlwRWRnZXMoZXh0ZW50KSB7XG4gICAgdmFyIGVkZ2VzID0gZDNfZ2VvbV92b3Jvbm9pRWRnZXMsIGNsaXAgPSBkM19nZW9tX2NsaXBMaW5lKGV4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdLCBleHRlbnRbMV1bMF0sIGV4dGVudFsxXVsxXSksIGkgPSBlZGdlcy5sZW5ndGgsIGU7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgZSA9IGVkZ2VzW2ldO1xuICAgICAgaWYgKCFkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZShlLCBleHRlbnQpIHx8ICFjbGlwKGUpIHx8IGFicyhlLmEueCAtIGUuYi54KSA8IM61ICYmIGFicyhlLmEueSAtIGUuYi55KSA8IM61KSB7XG4gICAgICAgIGUuYSA9IGUuYiA9IG51bGw7XG4gICAgICAgIGVkZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ29ubmVjdEVkZ2UoZWRnZSwgZXh0ZW50KSB7XG4gICAgdmFyIHZiID0gZWRnZS5iO1xuICAgIGlmICh2YikgcmV0dXJuIHRydWU7XG4gICAgdmFyIHZhID0gZWRnZS5hLCB4MCA9IGV4dGVudFswXVswXSwgeDEgPSBleHRlbnRbMV1bMF0sIHkwID0gZXh0ZW50WzBdWzFdLCB5MSA9IGV4dGVudFsxXVsxXSwgbFNpdGUgPSBlZGdlLmwsIHJTaXRlID0gZWRnZS5yLCBseCA9IGxTaXRlLngsIGx5ID0gbFNpdGUueSwgcnggPSByU2l0ZS54LCByeSA9IHJTaXRlLnksIGZ4ID0gKGx4ICsgcngpIC8gMiwgZnkgPSAobHkgKyByeSkgLyAyLCBmbSwgZmI7XG4gICAgaWYgKHJ5ID09PSBseSkge1xuICAgICAgaWYgKGZ4IDwgeDAgfHwgZnggPj0geDEpIHJldHVybjtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkwXG4gICAgICAgIH07IGVsc2UgaWYgKHZhLnkgPj0geTEpIHJldHVybjtcbiAgICAgICAgdmIgPSB7XG4gICAgICAgICAgeDogZngsXG4gICAgICAgICAgeTogeTFcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkxXG4gICAgICAgIH07IGVsc2UgaWYgKHZhLnkgPCB5MCkgcmV0dXJuO1xuICAgICAgICB2YiA9IHtcbiAgICAgICAgICB4OiBmeCxcbiAgICAgICAgICB5OiB5MFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuICAgICAgaWYgKGZtIDwgLTEgfHwgZm0gPiAxKSB7XG4gICAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiAoeTAgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueSA+PSB5MSkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogKHkxIC0gZmIpIC8gZm0sXG4gICAgICAgICAgICB5OiB5MVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiAoeTEgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkxXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueSA8IHkwKSByZXR1cm47XG4gICAgICAgICAgdmIgPSB7XG4gICAgICAgICAgICB4OiAoeTAgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGx5IDwgcnkpIHtcbiAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcbiAgICAgICAgICAgIHg6IHgwLFxuICAgICAgICAgICAgeTogZm0gKiB4MCArIGZiXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueCA+PSB4MSkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcbiAgICAgICAgICB9OyBlbHNlIGlmICh2YS54IDwgeDApIHJldHVybjtcbiAgICAgICAgICB2YiA9IHtcbiAgICAgICAgICAgIHg6IHgwLFxuICAgICAgICAgICAgeTogZm0gKiB4MCArIGZiXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlZGdlLmEgPSB2YTtcbiAgICBlZGdlLmIgPSB2YjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lFZGdlKGxTaXRlLCByU2l0ZSkge1xuICAgIHRoaXMubCA9IGxTaXRlO1xuICAgIHRoaXMuciA9IHJTaXRlO1xuICAgIHRoaXMuYSA9IHRoaXMuYiA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsU2l0ZSwgclNpdGUsIHZhLCB2Yikge1xuICAgIHZhciBlZGdlID0gbmV3IGQzX2dlb21fdm9yb25vaUVkZ2UobFNpdGUsIHJTaXRlKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lFZGdlcy5wdXNoKGVkZ2UpO1xuICAgIGlmICh2YSkgZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZChlZGdlLCBsU2l0ZSwgclNpdGUsIHZhKTtcbiAgICBpZiAodmIpIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQoZWRnZSwgclNpdGUsIGxTaXRlLCB2Yik7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHNbbFNpdGUuaV0uZWRnZXMucHVzaChuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgbFNpdGUsIHJTaXRlKSk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHNbclNpdGUuaV0uZWRnZXMucHVzaChuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgclNpdGUsIGxTaXRlKSk7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZShsU2l0ZSwgdmEsIHZiKSB7XG4gICAgdmFyIGVkZ2UgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pRWRnZShsU2l0ZSwgbnVsbCk7XG4gICAgZWRnZS5hID0gdmE7XG4gICAgZWRnZS5iID0gdmI7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRWRnZXMucHVzaChlZGdlKTtcbiAgICByZXR1cm4gZWRnZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKGVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KSB7XG4gICAgaWYgKCFlZGdlLmEgJiYgIWVkZ2UuYikge1xuICAgICAgZWRnZS5hID0gdmVydGV4O1xuICAgICAgZWRnZS5sID0gbFNpdGU7XG4gICAgICBlZGdlLnIgPSByU2l0ZTtcbiAgICB9IGVsc2UgaWYgKGVkZ2UubCA9PT0gclNpdGUpIHtcbiAgICAgIGVkZ2UuYiA9IHZlcnRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRnZS5hID0gdmVydGV4O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZShlZGdlLCBsU2l0ZSwgclNpdGUpIHtcbiAgICB2YXIgdmEgPSBlZGdlLmEsIHZiID0gZWRnZS5iO1xuICAgIHRoaXMuZWRnZSA9IGVkZ2U7XG4gICAgdGhpcy5zaXRlID0gbFNpdGU7XG4gICAgdGhpcy5hbmdsZSA9IHJTaXRlID8gTWF0aC5hdGFuMihyU2l0ZS55IC0gbFNpdGUueSwgclNpdGUueCAtIGxTaXRlLngpIDogZWRnZS5sID09PSBsU2l0ZSA/IE1hdGguYXRhbjIodmIueCAtIHZhLngsIHZhLnkgLSB2Yi55KSA6IE1hdGguYXRhbjIodmEueCAtIHZiLngsIHZiLnkgLSB2YS55KTtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZS5wcm90b3R5cGUgPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWRnZS5sID09PSB0aGlzLnNpdGUgPyB0aGlzLmVkZ2UuYSA6IHRoaXMuZWRnZS5iO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVkZ2UubCA9PT0gdGhpcy5zaXRlID8gdGhpcy5lZGdlLmIgOiB0aGlzLmVkZ2UuYTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpIHtcbiAgICB0aGlzLl8gPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShub2RlKSB7XG4gICAgbm9kZS5VID0gbm9kZS5DID0gbm9kZS5MID0gbm9kZS5SID0gbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUucHJvdG90eXBlID0ge1xuICAgIGluc2VydDogZnVuY3Rpb24oYWZ0ZXIsIG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgICBub2RlLk4gPSBhZnRlci5OO1xuICAgICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICAgIGlmIChhZnRlci5SKSB7XG4gICAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgICAgYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgICBhZnRlciA9IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QodGhpcy5fKTtcbiAgICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICAgIGFmdGVyLlAgPSBhZnRlci5MID0gbm9kZTtcbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuICAgICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgICBwYXJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICAgIG5vZGUuQyA9IHRydWU7XG4gICAgICBhZnRlciA9IG5vZGU7XG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gZ3JhbmRwYS5MKSB7XG4gICAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgfVxuICAgICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICAgIG5vZGUuTiA9IG5vZGUuUCA9IG51bGw7XG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5VLCBzaWJsaW5nLCBsZWZ0ID0gbm9kZS5MLCByaWdodCA9IG5vZGUuUiwgbmV4dCwgcmVkO1xuICAgICAgaWYgKCFsZWZ0KSBuZXh0ID0gcmlnaHQ7IGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7IGVsc2UgbmV4dCA9IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QocmlnaHQpO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDsgZWxzZSBwYXJlbnQuUiA9IG5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl8gPSBuZXh0O1xuICAgICAgfVxuICAgICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcbiAgICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICAgIG5leHQuTCA9IGxlZnQ7XG4gICAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICAgIHBhcmVudCA9IG5leHQuVTtcbiAgICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XG4gICAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkID0gbm9kZS5DO1xuICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgICBpZiAocmVkKSByZXR1cm47XG4gICAgICBpZiAobm9kZSAmJiBub2RlLkMpIHtcbiAgICAgICAgbm9kZS5DID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2libGluZy5MICYmIHNpYmxpbmcuTC5DIHx8IHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQyB8fCBzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuICAgICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsIHEgPSBub2RlLlIsIHBhcmVudCA9IHAuVTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTsgZWxzZSBwYXJlbnQuUiA9IHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWUuXyA9IHE7XG4gICAgfVxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuUiA9IHEuTDtcbiAgICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gICAgcS5MID0gcDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsIHEgPSBub2RlLkwsIHBhcmVudCA9IHAuVTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTsgZWxzZSBwYXJlbnQuUiA9IHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWUuXyA9IHE7XG4gICAgfVxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuTCA9IHEuUjtcbiAgICBpZiAocC5MKSBwLkwuVSA9IHA7XG4gICAgcS5SID0gcDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgICB3aGlsZSAobm9kZS5MKSBub2RlID0gbm9kZS5MO1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaShzaXRlcywgYmJveCkge1xuICAgIHZhciBzaXRlID0gc2l0ZXMuc29ydChkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcikucG9wKCksIHgwLCB5MCwgY2lyY2xlO1xuICAgIGQzX2dlb21fdm9yb25vaUVkZ2VzID0gW107XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHMgPSBuZXcgQXJyYXkoc2l0ZXMubGVuZ3RoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzID0gbmV3IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpO1xuICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tUcmVlKCk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNpcmNsZSA9IGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlO1xuICAgICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZS55IDwgY2lyY2xlLnkgfHwgc2l0ZS55ID09PSBjaXJjbGUueSAmJiBzaXRlLnggPCBjaXJjbGUueCkpIHtcbiAgICAgICAgaWYgKHNpdGUueCAhPT0geDAgfHwgc2l0ZS55ICE9PSB5MCkge1xuICAgICAgICAgIGQzX2dlb21fdm9yb25vaUNlbGxzW3NpdGUuaV0gPSBuZXcgZDNfZ2VvbV92b3Jvbm9pQ2VsbChzaXRlKTtcbiAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaChzaXRlKTtcbiAgICAgICAgICB4MCA9IHNpdGUueCwgeTAgPSBzaXRlLnk7XG4gICAgICAgIH1cbiAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJib3gpIGQzX2dlb21fdm9yb25vaUNsaXBFZGdlcyhiYm94KSwgZDNfZ2VvbV92b3Jvbm9pQ2xvc2VDZWxscyhiYm94KTtcbiAgICB2YXIgZGlhZ3JhbSA9IHtcbiAgICAgIGNlbGxzOiBkM19nZW9tX3Zvcm9ub2lDZWxscyxcbiAgICAgIGVkZ2VzOiBkM19nZW9tX3Zvcm9ub2lFZGdlc1xuICAgIH07XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyA9IGQzX2dlb21fdm9yb25vaUNpcmNsZXMgPSBkM19nZW9tX3Zvcm9ub2lFZGdlcyA9IGQzX2dlb21fdm9yb25vaUNlbGxzID0gbnVsbDtcbiAgICByZXR1cm4gZGlhZ3JhbTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGIueSAtIGEueSB8fCBiLnggLSBhLng7XG4gIH1cbiAgZDMuZ2VvbS52b3Jvbm9pID0gZnVuY3Rpb24ocG9pbnRzKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZLCBmeCA9IHgsIGZ5ID0geSwgY2xpcEV4dGVudCA9IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQ7XG4gICAgaWYgKHBvaW50cykgcmV0dXJuIHZvcm9ub2kocG9pbnRzKTtcbiAgICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICAgIHZhciBwb2x5Z29ucyA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCksIHgwID0gY2xpcEV4dGVudFswXVswXSwgeTAgPSBjbGlwRXh0ZW50WzBdWzFdLCB4MSA9IGNsaXBFeHRlbnRbMV1bMF0sIHkxID0gY2xpcEV4dGVudFsxXVsxXTtcbiAgICAgIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSwgY2xpcEV4dGVudCkuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICAgIHZhciBlZGdlcyA9IGNlbGwuZWRnZXMsIHNpdGUgPSBjZWxsLnNpdGUsIHBvbHlnb24gPSBwb2x5Z29uc1tpXSA9IGVkZ2VzLmxlbmd0aCA/IGVkZ2VzLm1hcChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHMgPSBlLnN0YXJ0KCk7XG4gICAgICAgICAgcmV0dXJuIFsgcy54LCBzLnkgXTtcbiAgICAgICAgfSkgOiBzaXRlLnggPj0geDAgJiYgc2l0ZS54IDw9IHgxICYmIHNpdGUueSA+PSB5MCAmJiBzaXRlLnkgPD0geTEgPyBbIFsgeDAsIHkxIF0sIFsgeDEsIHkxIF0sIFsgeDEsIHkwIF0sIFsgeDAsIHkwIF0gXSA6IFtdO1xuICAgICAgICBwb2x5Z29uLnBvaW50ID0gZGF0YVtpXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBvbHlnb25zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaXRlcyhkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IE1hdGgucm91bmQoZngoZCwgaSkgLyDOtSkgKiDOtSxcbiAgICAgICAgICB5OiBNYXRoLnJvdW5kKGZ5KGQsIGkpIC8gzrUpICogzrUsXG4gICAgICAgICAgaTogaVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZvcm9ub2kubGlua3MgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpKS5lZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICByZXR1cm4gZWRnZS5sICYmIGVkZ2UucjtcbiAgICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBkYXRhW2VkZ2UubC5pXSxcbiAgICAgICAgICB0YXJnZXQ6IGRhdGFbZWRnZS5yLmldXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIHRyaWFuZ2xlcyA9IFtdO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpKS5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgICAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsIGVkZ2VzID0gY2VsbC5lZGdlcy5zb3J0KGQzX2dlb21fdm9yb25vaUhhbGZFZGdlT3JkZXIpLCBqID0gLTEsIG0gPSBlZGdlcy5sZW5ndGgsIGUwLCBzMCwgZTEgPSBlZGdlc1ttIC0gMV0uZWRnZSwgczEgPSBlMS5sID09PSBzaXRlID8gZTEuciA6IGUxLmw7XG4gICAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgICAgZTAgPSBlMTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIGUxID0gZWRnZXNbal0uZWRnZTtcbiAgICAgICAgICBzMSA9IGUxLmwgPT09IHNpdGUgPyBlMS5yIDogZTEubDtcbiAgICAgICAgICBpZiAoaSA8IHMwLmkgJiYgaSA8IHMxLmkgJiYgZDNfZ2VvbV92b3Jvbm9pVHJpYW5nbGVBcmVhKHNpdGUsIHMwLCBzMSkgPCAwKSB7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChbIGRhdGFbaV0sIGRhdGFbczAuaV0sIGRhdGFbczEuaV0gXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmlhbmdsZXM7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmeCA9IGQzX2Z1bmN0b3IoeCA9IF8pLCB2b3Jvbm9pKSA6IHg7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmeSA9IGQzX2Z1bmN0b3IoeSA9IF8pLCB2b3Jvbm9pKSA6IHk7XG4gICAgfTtcbiAgICB2b3Jvbm9pLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50ID09PSBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50ID8gbnVsbCA6IGNsaXBFeHRlbnQ7XG4gICAgICBjbGlwRXh0ZW50ID0gXyA9PSBudWxsID8gZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA6IF87XG4gICAgICByZXR1cm4gdm9yb25vaTtcbiAgICB9O1xuICAgIHZvcm9ub2kuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsaXBFeHRlbnQgPT09IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgPyBudWxsIDogY2xpcEV4dGVudCAmJiBjbGlwRXh0ZW50WzFdO1xuICAgICAgcmV0dXJuIHZvcm9ub2kuY2xpcEV4dGVudChfICYmIFsgWyAwLCAwIF0sIF8gXSk7XG4gICAgfTtcbiAgICByZXR1cm4gdm9yb25vaTtcbiAgfTtcbiAgdmFyIGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgPSBbIFsgLTFlNiwgLTFlNiBdLCBbIDFlNiwgMWU2IF0gXTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pVHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGEueCAtIGMueCkgKiAoYi55IC0gYS55KSAtIChhLnggLSBiLngpICogKGMueSAtIGEueSk7XG4gIH1cbiAgZDMuZ2VvbS5kZWxhdW5heSA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgcmV0dXJuIGQzLmdlb20udm9yb25vaSgpLnRyaWFuZ2xlcyh2ZXJ0aWNlcyk7XG4gIH07XG4gIGQzLmdlb20ucXVhZHRyZWUgPSBmdW5jdGlvbihwb2ludHMsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZLCBjb21wYXQ7XG4gICAgaWYgKGNvbXBhdCA9IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHggPSBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WDtcbiAgICAgIHkgPSBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WTtcbiAgICAgIGlmIChjb21wYXQgPT09IDMpIHtcbiAgICAgICAgeTIgPSB5MTtcbiAgICAgICAgeDIgPSB4MTtcbiAgICAgICAgeTEgPSB4MSA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcXVhZHRyZWUocG9pbnRzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcXVhZHRyZWUoZGF0YSkge1xuICAgICAgdmFyIGQsIGZ4ID0gZDNfZnVuY3Rvcih4KSwgZnkgPSBkM19mdW5jdG9yKHkpLCB4cywgeXMsIGksIG4sIHgxXywgeTFfLCB4Ml8sIHkyXztcbiAgICAgIGlmICh4MSAhPSBudWxsKSB7XG4gICAgICAgIHgxXyA9IHgxLCB5MV8gPSB5MSwgeDJfID0geDIsIHkyXyA9IHkyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDJfID0geTJfID0gLSh4MV8gPSB5MV8gPSBJbmZpbml0eSk7XG4gICAgICAgIHhzID0gW10sIHlzID0gW107XG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvbXBhdCkgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGQgPSBkYXRhW2ldO1xuICAgICAgICAgIGlmIChkLnggPCB4MV8pIHgxXyA9IGQueDtcbiAgICAgICAgICBpZiAoZC55IDwgeTFfKSB5MV8gPSBkLnk7XG4gICAgICAgICAgaWYgKGQueCA+IHgyXykgeDJfID0gZC54O1xuICAgICAgICAgIGlmIChkLnkgPiB5Ml8pIHkyXyA9IGQueTtcbiAgICAgICAgICB4cy5wdXNoKGQueCk7XG4gICAgICAgICAgeXMucHVzaChkLnkpO1xuICAgICAgICB9IGVsc2UgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIHZhciB4XyA9ICtmeChkID0gZGF0YVtpXSwgaSksIHlfID0gK2Z5KGQsIGkpO1xuICAgICAgICAgIGlmICh4XyA8IHgxXykgeDFfID0geF87XG4gICAgICAgICAgaWYgKHlfIDwgeTFfKSB5MV8gPSB5XztcbiAgICAgICAgICBpZiAoeF8gPiB4Ml8pIHgyXyA9IHhfO1xuICAgICAgICAgIGlmICh5XyA+IHkyXykgeTJfID0geV87XG4gICAgICAgICAgeHMucHVzaCh4Xyk7XG4gICAgICAgICAgeXMucHVzaCh5Xyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBkeCA9IHgyXyAtIHgxXywgZHkgPSB5Ml8gLSB5MV87XG4gICAgICBpZiAoZHggPiBkeSkgeTJfID0geTFfICsgZHg7IGVsc2UgeDJfID0geDFfICsgZHk7XG4gICAgICBmdW5jdGlvbiBpbnNlcnQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm47XG4gICAgICAgIGlmIChuLmxlYWYpIHtcbiAgICAgICAgICB2YXIgbnggPSBuLngsIG55ID0gbi55O1xuICAgICAgICAgIGlmIChueCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoYWJzKG54IC0geCkgKyBhYnMobnkgLSB5KSA8IC4wMSkge1xuICAgICAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgblBvaW50ID0gbi5wb2ludDtcbiAgICAgICAgICAgICAgbi54ID0gbi55ID0gbi5wb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIG5Qb2ludCwgbngsIG55LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbi54ID0geCwgbi55ID0geSwgbi5wb2ludCA9IGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaW5zZXJ0Q2hpbGQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgdmFyIHhtID0gKHgxICsgeDIpICogLjUsIHltID0gKHkxICsgeTIpICogLjUsIHJpZ2h0ID0geCA+PSB4bSwgYmVsb3cgPSB5ID49IHltLCBpID0gYmVsb3cgPDwgMSB8IHJpZ2h0O1xuICAgICAgICBuLmxlYWYgPSBmYWxzZTtcbiAgICAgICAgbiA9IG4ubm9kZXNbaV0gfHwgKG4ubm9kZXNbaV0gPSBkM19nZW9tX3F1YWR0cmVlTm9kZSgpKTtcbiAgICAgICAgaWYgKHJpZ2h0KSB4MSA9IHhtOyBlbHNlIHgyID0geG07XG4gICAgICAgIGlmIChiZWxvdykgeTEgPSB5bTsgZWxzZSB5MiA9IHltO1xuICAgICAgICBpbnNlcnQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuICAgICAgfVxuICAgICAgdmFyIHJvb3QgPSBkM19nZW9tX3F1YWR0cmVlTm9kZSgpO1xuICAgICAgcm9vdC5hZGQgPSBmdW5jdGlvbihkKSB7XG4gICAgICAgIGluc2VydChyb290LCBkLCArZngoZCwgKytpKSwgK2Z5KGQsIGkpLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgfTtcbiAgICAgIHJvb3QudmlzaXQgPSBmdW5jdGlvbihmKSB7XG4gICAgICAgIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCByb290LCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgfTtcbiAgICAgIHJvb3QuZmluZCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgIHJldHVybiBkM19nZW9tX3F1YWR0cmVlRmluZChyb290LCBwb2ludFswXSwgcG9pbnRbMV0sIHgxXywgeTFfLCB4Ml8sIHkyXyk7XG4gICAgICB9O1xuICAgICAgaSA9IC0xO1xuICAgICAgaWYgKHgxID09IG51bGwpIHtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpbnNlcnQocm9vdCwgZGF0YVtpXSwgeHNbaV0sIHlzW2ldLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgICB9XG4gICAgICAgIC0taTtcbiAgICAgIH0gZWxzZSBkYXRhLmZvckVhY2gocm9vdC5hZGQpO1xuICAgICAgeHMgPSB5cyA9IGRhdGEgPSBkID0gbnVsbDtcbiAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICBxdWFkdHJlZS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IF8sIHF1YWR0cmVlKSA6IHg7XG4gICAgfTtcbiAgICBxdWFkdHJlZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IF8sIHF1YWR0cmVlKSA6IHk7XG4gICAgfTtcbiAgICBxdWFkdHJlZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFsgWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSBdO1xuICAgICAgaWYgKF8gPT0gbnVsbCkgeDEgPSB5MSA9IHgyID0geTIgPSBudWxsOyBlbHNlIHgxID0gK19bMF1bMF0sIHkxID0gK19bMF1bMV0sIHgyID0gK19bMV1bMF0sIFxuICAgICAgeTIgPSArX1sxXVsxXTtcbiAgICAgIHJldHVybiBxdWFkdHJlZTtcbiAgICB9O1xuICAgIHF1YWR0cmVlLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFsgeDIgLSB4MSwgeTIgLSB5MSBdO1xuICAgICAgaWYgKF8gPT0gbnVsbCkgeDEgPSB5MSA9IHgyID0geTIgPSBudWxsOyBlbHNlIHgxID0geTEgPSAwLCB4MiA9ICtfWzBdLCB5MiA9ICtfWzFdO1xuICAgICAgcmV0dXJuIHF1YWR0cmVlO1xuICAgIH07XG4gICAgcmV0dXJuIHF1YWR0cmVlO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WChkKSB7XG4gICAgcmV0dXJuIGQueDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WShkKSB7XG4gICAgcmV0dXJuIGQueTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlTm9kZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVhZjogdHJ1ZSxcbiAgICAgIG5vZGVzOiBbXSxcbiAgICAgIHBvaW50OiBudWxsLFxuICAgICAgeDogbnVsbCxcbiAgICAgIHk6IG51bGxcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBub2RlLCB4MSwgeTEsIHgyLCB5Mikge1xuICAgIGlmICghZihub2RlLCB4MSwgeTEsIHgyLCB5MikpIHtcbiAgICAgIHZhciBzeCA9ICh4MSArIHgyKSAqIC41LCBzeSA9ICh5MSArIHkyKSAqIC41LCBjaGlsZHJlbiA9IG5vZGUubm9kZXM7XG4gICAgICBpZiAoY2hpbGRyZW5bMF0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblswXSwgeDEsIHkxLCBzeCwgc3kpO1xuICAgICAgaWYgKGNoaWxkcmVuWzFdKSBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgY2hpbGRyZW5bMV0sIHN4LCB5MSwgeDIsIHN5KTtcbiAgICAgIGlmIChjaGlsZHJlblsyXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzJdLCB4MSwgc3ksIHN4LCB5Mik7XG4gICAgICBpZiAoY2hpbGRyZW5bM10pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblszXSwgc3gsIHN5LCB4MiwgeTIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlRmluZChyb290LCB4LCB5LCB4MCwgeTAsIHgzLCB5Mykge1xuICAgIHZhciBtaW5EaXN0YW5jZTIgPSBJbmZpbml0eSwgY2xvc2VzdFBvaW50O1xuICAgIChmdW5jdGlvbiBmaW5kKG5vZGUsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICBpZiAoeDEgPiB4MyB8fCB5MSA+IHkzIHx8IHgyIDwgeDAgfHwgeTIgPCB5MCkgcmV0dXJuO1xuICAgICAgaWYgKHBvaW50ID0gbm9kZS5wb2ludCkge1xuICAgICAgICB2YXIgcG9pbnQsIGR4ID0geCAtIG5vZGUueCwgZHkgPSB5IC0gbm9kZS55LCBkaXN0YW5jZTIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGRpc3RhbmNlMiA8IG1pbkRpc3RhbmNlMikge1xuICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChtaW5EaXN0YW5jZTIgPSBkaXN0YW5jZTIpO1xuICAgICAgICAgIHgwID0geCAtIGRpc3RhbmNlLCB5MCA9IHkgLSBkaXN0YW5jZTtcbiAgICAgICAgICB4MyA9IHggKyBkaXN0YW5jZSwgeTMgPSB5ICsgZGlzdGFuY2U7XG4gICAgICAgICAgY2xvc2VzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUubm9kZXMsIHhtID0gKHgxICsgeDIpICogLjUsIHltID0gKHkxICsgeTIpICogLjUsIHJpZ2h0ID0geCA+PSB4bSwgYmVsb3cgPSB5ID49IHltO1xuICAgICAgZm9yICh2YXIgaSA9IGJlbG93IDw8IDEgfCByaWdodCwgaiA9IGkgKyA0OyBpIDwgajsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gY2hpbGRyZW5baSAmIDNdKSBzd2l0Y2ggKGkgJiAzKSB7XG4gICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgZmluZChub2RlLCB4MSwgeTEsIHhtLCB5bSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBmaW5kKG5vZGUsIHhtLCB5MSwgeDIsIHltKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGZpbmQobm9kZSwgeDEsIHltLCB4bSwgeTIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgZmluZChub2RlLCB4bSwgeW0sIHgyLCB5Mik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KShyb290LCB4MCwgeTAsIHgzLCB5Myk7XG4gICAgcmV0dXJuIGNsb3Nlc3RQb2ludDtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVJnYiA9IGQzX2ludGVycG9sYXRlUmdiO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVJnYihhLCBiKSB7XG4gICAgYSA9IGQzLnJnYihhKTtcbiAgICBiID0gZDMucmdiKGIpO1xuICAgIHZhciBhciA9IGEuciwgYWcgPSBhLmcsIGFiID0gYS5iLCBiciA9IGIuciAtIGFyLCBiZyA9IGIuZyAtIGFnLCBiYiA9IGIuYiAtIGFiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KE1hdGgucm91bmQoYXIgKyBiciAqIHQpKSArIGQzX3JnYl9oZXgoTWF0aC5yb3VuZChhZyArIGJnICogdCkpICsgZDNfcmdiX2hleChNYXRoLnJvdW5kKGFiICsgYmIgKiB0KSk7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZU9iamVjdCA9IGQzX2ludGVycG9sYXRlT2JqZWN0O1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZU9iamVjdChhLCBiKSB7XG4gICAgdmFyIGkgPSB7fSwgYyA9IHt9LCBrO1xuICAgIGZvciAoayBpbiBhKSB7XG4gICAgICBpZiAoayBpbiBiKSB7XG4gICAgICAgIGlba10gPSBkM19pbnRlcnBvbGF0ZShhW2tdLCBiW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNba10gPSBhW2tdO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgaW4gYikge1xuICAgICAgaWYgKCEoayBpbiBhKSkge1xuICAgICAgICBjW2tdID0gYltrXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVOdW1iZXIgPSBkM19pbnRlcnBvbGF0ZU51bWJlcjtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVOdW1iZXIoYSwgYikge1xuICAgIGEgPSArYSwgYiA9ICtiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgICB9O1xuICB9XG4gIGQzLmludGVycG9sYXRlU3RyaW5nID0gZDNfaW50ZXJwb2xhdGVTdHJpbmc7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU3RyaW5nKGEsIGIpIHtcbiAgICB2YXIgYmkgPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJBLmxhc3RJbmRleCA9IGQzX2ludGVycG9sYXRlX251bWJlckIubGFzdEluZGV4ID0gMCwgYW0sIGJtLCBicywgaSA9IC0xLCBzID0gW10sIHEgPSBbXTtcbiAgICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcbiAgICB3aGlsZSAoKGFtID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5leGVjKGEpKSAmJiAoYm0gPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJCLmV4ZWMoYikpKSB7XG4gICAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHtcbiAgICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyBlbHNlIHNbKytpXSA9IGJzO1xuICAgICAgfVxuICAgICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7XG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyBlbHNlIHNbKytpXSA9IGJtO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgICAgcS5wdXNoKHtcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKGFtLCBibSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBiaSA9IGQzX2ludGVycG9sYXRlX251bWJlckIubGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICByZXR1cm4gcy5sZW5ndGggPCAyID8gcVswXSA/IChiID0gcVswXS54LCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gICAgfSkgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH0gOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZywgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQiA9IG5ldyBSZWdFeHAoZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5zb3VyY2UsIFwiZ1wiKTtcbiAgZDMuaW50ZXJwb2xhdGUgPSBkM19pbnRlcnBvbGF0ZTtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGUoYSwgYikge1xuICAgIHZhciBpID0gZDMuaW50ZXJwb2xhdG9ycy5sZW5ndGgsIGY7XG4gICAgd2hpbGUgKC0taSA+PSAwICYmICEoZiA9IGQzLmludGVycG9sYXRvcnNbaV0oYSwgYikpKSA7XG4gICAgcmV0dXJuIGY7XG4gIH1cbiAgZDMuaW50ZXJwb2xhdG9ycyA9IFsgZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciB0ID0gdHlwZW9mIGI7XG4gICAgcmV0dXJuICh0ID09PSBcInN0cmluZ1wiID8gZDNfcmdiX25hbWVzLmhhcyhiLnRvTG93ZXJDYXNlKCkpIHx8IC9eKCN8cmdiXFwofGhzbFxcKCkvaS50ZXN0KGIpID8gZDNfaW50ZXJwb2xhdGVSZ2IgOiBkM19pbnRlcnBvbGF0ZVN0cmluZyA6IGIgaW5zdGFuY2VvZiBkM19jb2xvciA/IGQzX2ludGVycG9sYXRlUmdiIDogQXJyYXkuaXNBcnJheShiKSA/IGQzX2ludGVycG9sYXRlQXJyYXkgOiB0ID09PSBcIm9iamVjdFwiICYmIGlzTmFOKGIpID8gZDNfaW50ZXJwb2xhdGVPYmplY3QgOiBkM19pbnRlcnBvbGF0ZU51bWJlcikoYSwgYik7XG4gIH0gXTtcbiAgZDMuaW50ZXJwb2xhdGVBcnJheSA9IGQzX2ludGVycG9sYXRlQXJyYXk7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlQXJyYXkoYSwgYikge1xuICAgIHZhciB4ID0gW10sIGMgPSBbXSwgbmEgPSBhLmxlbmd0aCwgbmIgPSBiLmxlbmd0aCwgbjAgPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpLCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSB4LnB1c2goZDNfaW50ZXJwb2xhdGUoYVtpXSwgYltpXSkpO1xuICAgIGZvciAoO2kgPCBuYTsgKytpKSBjW2ldID0gYVtpXTtcbiAgICBmb3IgKDtpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2Vhc2VfZGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19pZGVudGl0eTtcbiAgfTtcbiAgdmFyIGQzX2Vhc2UgPSBkMy5tYXAoe1xuICAgIGxpbmVhcjogZDNfZWFzZV9kZWZhdWx0LFxuICAgIHBvbHk6IGQzX2Vhc2VfcG9seSxcbiAgICBxdWFkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX3F1YWQ7XG4gICAgfSxcbiAgICBjdWJpYzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9jdWJpYztcbiAgICB9LFxuICAgIHNpbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9zaW47XG4gICAgfSxcbiAgICBleHA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX2Vhc2VfZXhwO1xuICAgIH0sXG4gICAgY2lyY2xlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX2NpcmNsZTtcbiAgICB9LFxuICAgIGVsYXN0aWM6IGQzX2Vhc2VfZWxhc3RpYyxcbiAgICBiYWNrOiBkM19lYXNlX2JhY2ssXG4gICAgYm91bmNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX2JvdW5jZTtcbiAgICB9XG4gIH0pO1xuICB2YXIgZDNfZWFzZV9tb2RlID0gZDMubWFwKHtcbiAgICBcImluXCI6IGQzX2lkZW50aXR5LFxuICAgIG91dDogZDNfZWFzZV9yZXZlcnNlLFxuICAgIFwiaW4tb3V0XCI6IGQzX2Vhc2VfcmVmbGVjdCxcbiAgICBcIm91dC1pblwiOiBmdW5jdGlvbihmKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9yZWZsZWN0KGQzX2Vhc2VfcmV2ZXJzZShmKSk7XG4gICAgfVxuICB9KTtcbiAgZDMuZWFzZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IG5hbWUuaW5kZXhPZihcIi1cIiksIHQgPSBpID49IDAgPyBuYW1lLnNsaWNlKDAsIGkpIDogbmFtZSwgbSA9IGkgPj0gMCA/IG5hbWUuc2xpY2UoaSArIDEpIDogXCJpblwiO1xuICAgIHQgPSBkM19lYXNlLmdldCh0KSB8fCBkM19lYXNlX2RlZmF1bHQ7XG4gICAgbSA9IGQzX2Vhc2VfbW9kZS5nZXQobSkgfHwgZDNfaWRlbnRpdHk7XG4gICAgcmV0dXJuIGQzX2Vhc2VfY2xhbXAobSh0LmFwcGx5KG51bGwsIGQzX2FycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19lYXNlX2NsYW1wKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQgPD0gMCA/IDAgOiB0ID49IDEgPyAxIDogZih0KTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcmV2ZXJzZShmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiAxIC0gZigxIC0gdCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX3JlZmxlY3QoZikge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gLjUgKiAodCA8IC41ID8gZigyICogdCkgOiAyIC0gZigyIC0gMiAqIHQpKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcXVhZCh0KSB7XG4gICAgcmV0dXJuIHQgKiB0O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfY3ViaWModCkge1xuICAgIHJldHVybiB0ICogdCAqIHQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9jdWJpY0luT3V0KHQpIHtcbiAgICBpZiAodCA8PSAwKSByZXR1cm4gMDtcbiAgICBpZiAodCA+PSAxKSByZXR1cm4gMTtcbiAgICB2YXIgdDIgPSB0ICogdCwgdDMgPSB0MiAqIHQ7XG4gICAgcmV0dXJuIDQgKiAodCA8IC41ID8gdDMgOiAzICogKHQgLSB0MikgKyB0MyAtIC43NSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9wb2x5KGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9zaW4odCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGbPgCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9leHAodCkge1xuICAgIHJldHVybiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfY2lyY2xlKHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfZWxhc3RpYyhhLCBwKSB7XG4gICAgdmFyIHM7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwID0gLjQ1O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSBzID0gcCAvIM+EICogTWF0aC5hc2luKDEgLyBhKTsgZWxzZSBhID0gMSwgcyA9IHAgLyA0O1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gMSArIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiDPhCAvIHApO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9iYWNrKHMpIHtcbiAgICBpZiAoIXMpIHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfYm91bmNlKHQpIHtcbiAgICByZXR1cm4gdCA8IDEgLyAyLjc1ID8gNy41NjI1ICogdCAqIHQgOiB0IDwgMiAvIDIuNzUgPyA3LjU2MjUgKiAodCAtPSAxLjUgLyAyLjc1KSAqIHQgKyAuNzUgOiB0IDwgMi41IC8gMi43NSA/IDcuNTYyNSAqICh0IC09IDIuMjUgLyAyLjc1KSAqIHQgKyAuOTM3NSA6IDcuNTYyNSAqICh0IC09IDIuNjI1IC8gMi43NSkgKiB0ICsgLjk4NDM3NTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUhjbCA9IGQzX2ludGVycG9sYXRlSGNsO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUhjbChhLCBiKSB7XG4gICAgYSA9IGQzLmhjbChhKTtcbiAgICBiID0gZDMuaGNsKGIpO1xuICAgIHZhciBhaCA9IGEuaCwgYWMgPSBhLmMsIGFsID0gYS5sLCBiaCA9IGIuaCAtIGFoLCBiYyA9IGIuYyAtIGFjLCBibCA9IGIubCAtIGFsO1xuICAgIGlmIChpc05hTihiYykpIGJjID0gMCwgYWMgPSBpc05hTihhYykgPyBiLmMgOiBhYztcbiAgICBpZiAoaXNOYU4oYmgpKSBiaCA9IDAsIGFoID0gaXNOYU4oYWgpID8gYi5oIDogYWg7IGVsc2UgaWYgKGJoID4gMTgwKSBiaCAtPSAzNjA7IGVsc2UgaWYgKGJoIDwgLTE4MCkgYmggKz0gMzYwO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfaGNsX2xhYihhaCArIGJoICogdCwgYWMgKyBiYyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUhzbCA9IGQzX2ludGVycG9sYXRlSHNsO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUhzbChhLCBiKSB7XG4gICAgYSA9IGQzLmhzbChhKTtcbiAgICBiID0gZDMuaHNsKGIpO1xuICAgIHZhciBhaCA9IGEuaCwgYXMgPSBhLnMsIGFsID0gYS5sLCBiaCA9IGIuaCAtIGFoLCBicyA9IGIucyAtIGFzLCBibCA9IGIubCAtIGFsO1xuICAgIGlmIChpc05hTihicykpIGJzID0gMCwgYXMgPSBpc05hTihhcykgPyBiLnMgOiBhcztcbiAgICBpZiAoaXNOYU4oYmgpKSBiaCA9IDAsIGFoID0gaXNOYU4oYWgpID8gYi5oIDogYWg7IGVsc2UgaWYgKGJoID4gMTgwKSBiaCAtPSAzNjA7IGVsc2UgaWYgKGJoIDwgLTE4MCkgYmggKz0gMzYwO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfaHNsX3JnYihhaCArIGJoICogdCwgYXMgKyBicyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUxhYiA9IGQzX2ludGVycG9sYXRlTGFiO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUxhYihhLCBiKSB7XG4gICAgYSA9IGQzLmxhYihhKTtcbiAgICBiID0gZDMubGFiKGIpO1xuICAgIHZhciBhbCA9IGEubCwgYWEgPSBhLmEsIGFiID0gYS5iLCBibCA9IGIubCAtIGFsLCBiYSA9IGIuYSAtIGFhLCBiYiA9IGIuYiAtIGFiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfbGFiX3JnYihhbCArIGJsICogdCwgYWEgKyBiYSAqIHQsIGFiICsgYmIgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVJvdW5kID0gZDNfaW50ZXJwb2xhdGVSb3VuZDtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSb3VuZChhLCBiKSB7XG4gICAgYiAtPSBhO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICAgIH07XG4gIH1cbiAgZDMudHJhbnNmb3JtID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGcgPSBkM19kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZDMubnMucHJlZml4LnN2ZywgXCJnXCIpO1xuICAgIHJldHVybiAoZDMudHJhbnNmb3JtID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBpZiAoc3RyaW5nICE9IG51bGwpIHtcbiAgICAgICAgZy5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RyaW5nKTtcbiAgICAgICAgdmFyIHQgPSBnLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IGQzX3RyYW5zZm9ybSh0ID8gdC5tYXRyaXggOiBkM190cmFuc2Zvcm1JZGVudGl0eSk7XG4gICAgfSkoc3RyaW5nKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtKG0pIHtcbiAgICB2YXIgcjAgPSBbIG0uYSwgbS5iIF0sIHIxID0gWyBtLmMsIG0uZCBdLCBreCA9IGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShyMCksIGt6ID0gZDNfdHJhbnNmb3JtRG90KHIwLCByMSksIGt5ID0gZDNfdHJhbnNmb3JtTm9ybWFsaXplKGQzX3RyYW5zZm9ybUNvbWJpbmUocjEsIHIwLCAta3opKSB8fCAwO1xuICAgIGlmIChyMFswXSAqIHIxWzFdIDwgcjFbMF0gKiByMFsxXSkge1xuICAgICAgcjBbMF0gKj0gLTE7XG4gICAgICByMFsxXSAqPSAtMTtcbiAgICAgIGt4ICo9IC0xO1xuICAgICAga3ogKj0gLTE7XG4gICAgfVxuICAgIHRoaXMucm90YXRlID0gKGt4ID8gTWF0aC5hdGFuMihyMFsxXSwgcjBbMF0pIDogTWF0aC5hdGFuMigtcjFbMF0sIHIxWzFdKSkgKiBkM19kZWdyZWVzO1xuICAgIHRoaXMudHJhbnNsYXRlID0gWyBtLmUsIG0uZiBdO1xuICAgIHRoaXMuc2NhbGUgPSBbIGt4LCBreSBdO1xuICAgIHRoaXMuc2tldyA9IGt5ID8gTWF0aC5hdGFuMihreiwga3kpICogZDNfZGVncmVlcyA6IDA7XG4gIH1cbiAgZDNfdHJhbnNmb3JtLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMudHJhbnNsYXRlICsgXCIpcm90YXRlKFwiICsgdGhpcy5yb3RhdGUgKyBcIilza2V3WChcIiArIHRoaXMuc2tldyArIFwiKXNjYWxlKFwiICsgdGhpcy5zY2FsZSArIFwiKVwiO1xuICB9O1xuICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShhKSB7XG4gICAgdmFyIGsgPSBNYXRoLnNxcnQoZDNfdHJhbnNmb3JtRG90KGEsIGEpKTtcbiAgICBpZiAoaykge1xuICAgICAgYVswXSAvPSBrO1xuICAgICAgYVsxXSAvPSBrO1xuICAgIH1cbiAgICByZXR1cm4gaztcbiAgfVxuICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Db21iaW5lKGEsIGIsIGspIHtcbiAgICBhWzBdICs9IGsgKiBiWzBdO1xuICAgIGFbMV0gKz0gayAqIGJbMV07XG4gICAgcmV0dXJuIGE7XG4gIH1cbiAgdmFyIGQzX3RyYW5zZm9ybUlkZW50aXR5ID0ge1xuICAgIGE6IDEsXG4gICAgYjogMCxcbiAgICBjOiAwLFxuICAgIGQ6IDEsXG4gICAgZTogMCxcbiAgICBmOiAwXG4gIH07XG4gIGQzLmludGVycG9sYXRlVHJhbnNmb3JtID0gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm07XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIsXCIgOiBcIlwiO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNsYXRlKHRhLCB0YiwgcywgcSkge1xuICAgIGlmICh0YVswXSAhPT0gdGJbMF0gfHwgdGFbMV0gIT09IHRiWzFdKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7XG4gICAgICAgIGk6IGkgLSA0LFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVswXSwgdGJbMF0pXG4gICAgICB9LCB7XG4gICAgICAgIGk6IGkgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVsxXSwgdGJbMV0pXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRiWzBdIHx8IHRiWzFdKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB0YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSb3RhdGUocmEsIHJiLCBzLCBxKSB7XG4gICAgaWYgKHJhICE9PSByYikge1xuICAgICAgaWYgKHJhIC0gcmIgPiAxODApIHJiICs9IDM2MDsgZWxzZSBpZiAocmIgLSByYSA+IDE4MCkgcmEgKz0gMzYwO1xuICAgICAgcS5wdXNoKHtcbiAgICAgICAgaTogcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIFwiKVwiKSAtIDIsXG4gICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKHJhLCByYilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmIpIHtcbiAgICAgIHMucHVzaChkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSArIFwicm90YXRlKFwiICsgcmIgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU2tldyh3YSwgd2IsIHMsIHEpIHtcbiAgICBpZiAod2EgIT09IHdiKSB7XG4gICAgICBxLnB1c2goe1xuICAgICAgICBpOiBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBcIilcIikgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih3YSwgd2IpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHdiKSB7XG4gICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNrZXdYKFwiICsgd2IgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU2NhbGUoa2EsIGtiLCBzLCBxKSB7XG4gICAgaWYgKGthWzBdICE9PSBrYlswXSB8fCBrYVsxXSAhPT0ga2JbMV0pIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7XG4gICAgICAgIGk6IGkgLSA0LFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihrYVswXSwga2JbMF0pXG4gICAgICB9LCB7XG4gICAgICAgIGk6IGkgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihrYVsxXSwga2JbMV0pXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGtiWzBdICE9PSAxIHx8IGtiWzFdICE9PSAxKSB7XG4gICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNjYWxlKFwiICsga2IgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNmb3JtKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCBxID0gW107XG4gICAgYSA9IGQzLnRyYW5zZm9ybShhKSwgYiA9IGQzLnRyYW5zZm9ybShiKTtcbiAgICBkM19pbnRlcnBvbGF0ZVRyYW5zbGF0ZShhLnRyYW5zbGF0ZSwgYi50cmFuc2xhdGUsIHMsIHEpO1xuICAgIGQzX2ludGVycG9sYXRlUm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgZDNfaW50ZXJwb2xhdGVTa2V3KGEuc2tldywgYi5za2V3LCBzLCBxKTtcbiAgICBkM19pbnRlcnBvbGF0ZVNjYWxlKGEuc2NhbGUsIGIuc2NhbGUsIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM191bmludGVycG9sYXRlTnVtYmVyKGEsIGIpIHtcbiAgICBiID0gKGIgLT0gYSA9ICthKSB8fCAxIC8gYjtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuICh4IC0gYSkgLyBiO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wKGEsIGIpIHtcbiAgICBiID0gKGIgLT0gYSA9ICthKSB8fCAxIC8gYjtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsICh4IC0gYSkgLyBiKSk7XG4gICAgfTtcbiAgfVxuICBkMy5sYXlvdXQgPSB7fTtcbiAgZDMubGF5b3V0LmJ1bmRsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihsaW5rcykge1xuICAgICAgdmFyIHBhdGhzID0gW10sIGkgPSAtMSwgbiA9IGxpbmtzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBwYXRocy5wdXNoKGQzX2xheW91dF9idW5kbGVQYXRoKGxpbmtzW2ldKSk7XG4gICAgICByZXR1cm4gcGF0aHM7XG4gICAgfTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZVBhdGgobGluaykge1xuICAgIHZhciBzdGFydCA9IGxpbmsuc291cmNlLCBlbmQgPSBsaW5rLnRhcmdldCwgbGNhID0gZDNfbGF5b3V0X2J1bmRsZUxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksIHBvaW50cyA9IFsgc3RhcnQgXTtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGxjYSkge1xuICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgICBwb2ludHMucHVzaChzdGFydCk7XG4gICAgfVxuICAgIHZhciBrID0gcG9pbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoZW5kICE9PSBsY2EpIHtcbiAgICAgIHBvaW50cy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhub2RlKSB7XG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdLCBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICAgIHJldHVybiBhbmNlc3RvcnM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZUxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICAgIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgICB2YXIgYU5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhhKSwgYk5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhiKSwgYU5vZGUgPSBhTm9kZXMucG9wKCksIGJOb2RlID0gYk5vZGVzLnBvcCgpLCBzaGFyZWROb2RlID0gbnVsbDtcbiAgICB3aGlsZSAoYU5vZGUgPT09IGJOb2RlKSB7XG4gICAgICBzaGFyZWROb2RlID0gYU5vZGU7XG4gICAgICBhTm9kZSA9IGFOb2Rlcy5wb3AoKTtcbiAgICAgIGJOb2RlID0gYk5vZGVzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2hhcmVkTm9kZTtcbiAgfVxuICBkMy5sYXlvdXQuY2hvcmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hvcmQgPSB7fSwgY2hvcmRzLCBncm91cHMsIG1hdHJpeCwgbiwgcGFkZGluZyA9IDAsIHNvcnRHcm91cHMsIHNvcnRTdWJncm91cHMsIHNvcnRDaG9yZHM7XG4gICAgZnVuY3Rpb24gcmVsYXlvdXQoKSB7XG4gICAgICB2YXIgc3ViZ3JvdXBzID0ge30sIGdyb3VwU3VtcyA9IFtdLCBncm91cEluZGV4ID0gZDMucmFuZ2UobiksIHN1Ymdyb3VwSW5kZXggPSBbXSwgaywgeCwgeDAsIGksIGo7XG4gICAgICBjaG9yZHMgPSBbXTtcbiAgICAgIGdyb3VwcyA9IFtdO1xuICAgICAgayA9IDAsIGkgPSAtMTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHggPSAwLCBqID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgICAgeCArPSBtYXRyaXhbaV1bal07XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XG4gICAgICAgIHN1Ymdyb3VwSW5kZXgucHVzaChkMy5yYW5nZShuKSk7XG4gICAgICAgIGsgKz0geDtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0R3JvdXBzKSB7XG4gICAgICAgIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0U3ViZ3JvdXBzKSB7XG4gICAgICAgIHN1Ymdyb3VwSW5kZXguZm9yRWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBrID0gKM+EIC0gcGFkZGluZyAqIG4pIC8gaztcbiAgICAgIHggPSAwLCBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICB4MCA9IHgsIGogPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLCBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLCB2ID0gbWF0cml4W2RpXVtkal0sIGEwID0geCwgYTEgPSB4ICs9IHYgKiBrO1xuICAgICAgICAgIHN1Ymdyb3Vwc1tkaSArIFwiLVwiICsgZGpdID0ge1xuICAgICAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICAgICAgc3ViaW5kZXg6IGRqLFxuICAgICAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgICAgICB2YWx1ZTogdlxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzW2RpXSA9IHtcbiAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgc3RhcnRBbmdsZTogeDAsXG4gICAgICAgICAgZW5kQW5nbGU6IHgsXG4gICAgICAgICAgdmFsdWU6IGdyb3VwU3Vtc1tkaV1cbiAgICAgICAgfTtcbiAgICAgICAgeCArPSBwYWRkaW5nO1xuICAgICAgfVxuICAgICAgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaiA9IGkgLSAxO1xuICAgICAgICB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaSArIFwiLVwiICsgal0sIHRhcmdldCA9IHN1Ymdyb3Vwc1tqICsgXCItXCIgKyBpXTtcbiAgICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlID8ge1xuICAgICAgICAgICAgICBzb3VyY2U6IHRhcmdldCxcbiAgICAgICAgICAgICAgdGFyZ2V0OiBzb3VyY2VcbiAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc29ydENob3JkcykgcmVzb3J0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc29ydCgpIHtcbiAgICAgIGNob3Jkcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRDaG9yZHMoKGEuc291cmNlLnZhbHVlICsgYS50YXJnZXQudmFsdWUpIC8gMiwgKGIuc291cmNlLnZhbHVlICsgYi50YXJnZXQudmFsdWUpIC8gMik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY2hvcmQubWF0cml4ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWF0cml4O1xuICAgICAgbiA9IChtYXRyaXggPSB4KSAmJiBtYXRyaXgubGVuZ3RoO1xuICAgICAgY2hvcmRzID0gZ3JvdXBzID0gbnVsbDtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRkaW5nO1xuICAgICAgcGFkZGluZyA9IHg7XG4gICAgICBjaG9yZHMgPSBncm91cHMgPSBudWxsO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQuc29ydEdyb3VwcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnRHcm91cHM7XG4gICAgICBzb3J0R3JvdXBzID0geDtcbiAgICAgIGNob3JkcyA9IGdyb3VwcyA9IG51bGw7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3J0U3ViZ3JvdXBzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydFN1Ymdyb3VwcztcbiAgICAgIHNvcnRTdWJncm91cHMgPSB4O1xuICAgICAgY2hvcmRzID0gbnVsbDtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnNvcnRDaG9yZHMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0Q2hvcmRzO1xuICAgICAgc29ydENob3JkcyA9IHg7XG4gICAgICBpZiAoY2hvcmRzKSByZXNvcnQoKTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLmNob3JkcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFjaG9yZHMpIHJlbGF5b3V0KCk7XG4gICAgICByZXR1cm4gY2hvcmRzO1xuICAgIH07XG4gICAgY2hvcmQuZ3JvdXBzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWdyb3VwcykgcmVsYXlvdXQoKTtcbiAgICAgIHJldHVybiBncm91cHM7XG4gICAgfTtcbiAgICByZXR1cm4gY2hvcmQ7XG4gIH07XG4gIGQzLmxheW91dC5mb3JjZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JjZSA9IHt9LCBldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIiwgXCJ0aWNrXCIsIFwiZW5kXCIpLCB0aW1lciwgc2l6ZSA9IFsgMSwgMSBdLCBkcmFnLCBhbHBoYSwgZnJpY3Rpb24gPSAuOSwgbGlua0Rpc3RhbmNlID0gZDNfbGF5b3V0X2ZvcmNlTGlua0Rpc3RhbmNlLCBsaW5rU3RyZW5ndGggPSBkM19sYXlvdXRfZm9yY2VMaW5rU3RyZW5ndGgsIGNoYXJnZSA9IC0zMCwgY2hhcmdlRGlzdGFuY2UyID0gZDNfbGF5b3V0X2ZvcmNlQ2hhcmdlRGlzdGFuY2UyLCBncmF2aXR5ID0gLjEsIHRoZXRhMiA9IC42NCwgbm9kZXMgPSBbXSwgbGlua3MgPSBbXSwgZGlzdGFuY2VzLCBzdHJlbmd0aHMsIGNoYXJnZXM7XG4gICAgZnVuY3Rpb24gcmVwdWxzZShub2RlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgICAgIGlmIChxdWFkLnBvaW50ICE9PSBub2RlKSB7XG4gICAgICAgICAgdmFyIGR4ID0gcXVhZC5jeCAtIG5vZGUueCwgZHkgPSBxdWFkLmN5IC0gbm9kZS55LCBkdyA9IHgyIC0geDEsIGRuID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGR3ICogZHcgLyB0aGV0YTIgPCBkbikge1xuICAgICAgICAgICAgaWYgKGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gcXVhZC5jaGFyZ2UgLyBkbjtcbiAgICAgICAgICAgICAgbm9kZS5weCAtPSBkeCAqIGs7XG4gICAgICAgICAgICAgIG5vZGUucHkgLT0gZHkgKiBrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChxdWFkLnBvaW50ICYmIGRuICYmIGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG4gICAgICAgICAgICB2YXIgayA9IHF1YWQucG9pbnRDaGFyZ2UgLyBkbjtcbiAgICAgICAgICAgIG5vZGUucHggLT0gZHggKiBrO1xuICAgICAgICAgICAgbm9kZS5weSAtPSBkeSAqIGs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcXVhZC5jaGFyZ2U7XG4gICAgICB9O1xuICAgIH1cbiAgICBmb3JjZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGFscGhhICo9IC45OSkgPCAuMDA1KSB7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgZXZlbnQuZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImVuZFwiLFxuICAgICAgICAgIGFscGhhOiBhbHBoYSA9IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG4gPSBub2Rlcy5sZW5ndGgsIG0gPSBsaW5rcy5sZW5ndGgsIHEsIGksIG8sIHMsIHQsIGwsIGssIHgsIHk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSB7XG4gICAgICAgIG8gPSBsaW5rc1tpXTtcbiAgICAgICAgcyA9IG8uc291cmNlO1xuICAgICAgICB0ID0gby50YXJnZXQ7XG4gICAgICAgIHggPSB0LnggLSBzLng7XG4gICAgICAgIHkgPSB0LnkgLSBzLnk7XG4gICAgICAgIGlmIChsID0geCAqIHggKyB5ICogeSkge1xuICAgICAgICAgIGwgPSBhbHBoYSAqIHN0cmVuZ3Roc1tpXSAqICgobCA9IE1hdGguc3FydChsKSkgLSBkaXN0YW5jZXNbaV0pIC8gbDtcbiAgICAgICAgICB4ICo9IGw7XG4gICAgICAgICAgeSAqPSBsO1xuICAgICAgICAgIHQueCAtPSB4ICogKGsgPSBzLndlaWdodCArIHQud2VpZ2h0ID8gcy53ZWlnaHQgLyAocy53ZWlnaHQgKyB0LndlaWdodCkgOiAuNSk7XG4gICAgICAgICAgdC55IC09IHkgKiBrO1xuICAgICAgICAgIHMueCArPSB4ICogKGsgPSAxIC0gayk7XG4gICAgICAgICAgcy55ICs9IHkgKiBrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoayA9IGFscGhhICogZ3Jhdml0eSkge1xuICAgICAgICB4ID0gc2l6ZVswXSAvIDI7XG4gICAgICAgIHkgPSBzaXplWzFdIC8gMjtcbiAgICAgICAgaSA9IC0xO1xuICAgICAgICBpZiAoaykgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBvID0gbm9kZXNbaV07XG4gICAgICAgICAgby54ICs9ICh4IC0gby54KSAqIGs7XG4gICAgICAgICAgby55ICs9ICh5IC0gby55KSAqIGs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFyZ2UpIHtcbiAgICAgICAgZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZShxID0gZDMuZ2VvbS5xdWFkdHJlZShub2RlcyksIGFscGhhLCBjaGFyZ2VzKTtcbiAgICAgICAgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIGlmICghKG8gPSBub2Rlc1tpXSkuZml4ZWQpIHtcbiAgICAgICAgICAgIHEudmlzaXQocmVwdWxzZShvKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBvID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChvLmZpeGVkKSB7XG4gICAgICAgICAgby54ID0gby5weDtcbiAgICAgICAgICBvLnkgPSBvLnB5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG8ueCAtPSAoby5weCAtIChvLnB4ID0gby54KSkgKiBmcmljdGlvbjtcbiAgICAgICAgICBvLnkgLT0gKG8ucHkgLSAoby5weSA9IG8ueSkpICogZnJpY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGV2ZW50LnRpY2soe1xuICAgICAgICB0eXBlOiBcInRpY2tcIixcbiAgICAgICAgYWxwaGE6IGFscGhhXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGZvcmNlLm5vZGVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZXM7XG4gICAgICBub2RlcyA9IHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5saW5rcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmtzO1xuICAgICAgbGlua3MgPSB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2Uuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0geDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmxpbmtEaXN0YW5jZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmtEaXN0YW5jZTtcbiAgICAgIGxpbmtEaXN0YW5jZSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5kaXN0YW5jZSA9IGZvcmNlLmxpbmtEaXN0YW5jZTtcbiAgICBmb3JjZS5saW5rU3RyZW5ndGggPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rU3RyZW5ndGg7XG4gICAgICBsaW5rU3RyZW5ndGggPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuZnJpY3Rpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmcmljdGlvbjtcbiAgICAgIGZyaWN0aW9uID0gK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5jaGFyZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjaGFyZ2U7XG4gICAgICBjaGFyZ2UgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuY2hhcmdlRGlzdGFuY2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQoY2hhcmdlRGlzdGFuY2UyKTtcbiAgICAgIGNoYXJnZURpc3RhbmNlMiA9IHggKiB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuZ3Jhdml0eSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXZpdHk7XG4gICAgICBncmF2aXR5ID0gK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCh0aGV0YTIpO1xuICAgICAgdGhldGEyID0geCAqIHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5hbHBoYSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGFscGhhO1xuICAgICAgeCA9ICt4O1xuICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgIGlmICh4ID4gMCkge1xuICAgICAgICAgIGFscGhhID0geDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lci5jID0gbnVsbCwgdGltZXIudCA9IE5hTiwgdGltZXIgPSBudWxsO1xuICAgICAgICAgIGV2ZW50LmVuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImVuZFwiLFxuICAgICAgICAgICAgYWxwaGE6IGFscGhhID0gMFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHggPiAwKSB7XG4gICAgICAgIGV2ZW50LnN0YXJ0KHtcbiAgICAgICAgICB0eXBlOiBcInN0YXJ0XCIsXG4gICAgICAgICAgYWxwaGE6IGFscGhhID0geFxuICAgICAgICB9KTtcbiAgICAgICAgdGltZXIgPSBkM190aW1lcihmb3JjZS50aWNrKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbSA9IGxpbmtzLmxlbmd0aCwgdyA9IHNpemVbMF0sIGggPSBzaXplWzFdLCBuZWlnaGJvcnMsIG87XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIChvID0gbm9kZXNbaV0pLmluZGV4ID0gaTtcbiAgICAgICAgby53ZWlnaHQgPSAwO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkge1xuICAgICAgICBvID0gbGlua3NbaV07XG4gICAgICAgIGlmICh0eXBlb2Ygby5zb3VyY2UgPT0gXCJudW1iZXJcIikgby5zb3VyY2UgPSBub2Rlc1tvLnNvdXJjZV07XG4gICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQgPT0gXCJudW1iZXJcIikgby50YXJnZXQgPSBub2Rlc1tvLnRhcmdldF07XG4gICAgICAgICsrby5zb3VyY2Uud2VpZ2h0O1xuICAgICAgICArK28udGFyZ2V0LndlaWdodDtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbyA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoaXNOYU4oby54KSkgby54ID0gcG9zaXRpb24oXCJ4XCIsIHcpO1xuICAgICAgICBpZiAoaXNOYU4oby55KSkgby55ID0gcG9zaXRpb24oXCJ5XCIsIGgpO1xuICAgICAgICBpZiAoaXNOYU4oby5weCkpIG8ucHggPSBvLng7XG4gICAgICAgIGlmIChpc05hTihvLnB5KSkgby5weSA9IG8ueTtcbiAgICAgIH1cbiAgICAgIGRpc3RhbmNlcyA9IFtdO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rRGlzdGFuY2UgPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG07ICsraSkgZGlzdGFuY2VzW2ldID0gK2xpbmtEaXN0YW5jZS5jYWxsKHRoaXMsIGxpbmtzW2ldLCBpKTsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBkaXN0YW5jZXNbaV0gPSBsaW5rRGlzdGFuY2U7XG4gICAgICBzdHJlbmd0aHMgPSBbXTtcbiAgICAgIGlmICh0eXBlb2YgbGlua1N0cmVuZ3RoID09PSBcImZ1bmN0aW9uXCIpIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHN0cmVuZ3Roc1tpXSA9ICtsaW5rU3RyZW5ndGguY2FsbCh0aGlzLCBsaW5rc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc3RyZW5ndGhzW2ldID0gbGlua1N0cmVuZ3RoO1xuICAgICAgY2hhcmdlcyA9IFtdO1xuICAgICAgaWYgKHR5cGVvZiBjaGFyZ2UgPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hhcmdlc1tpXSA9ICtjaGFyZ2UuY2FsbCh0aGlzLCBub2Rlc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hhcmdlc1tpXSA9IGNoYXJnZTtcbiAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uKGRpbWVuc2lvbiwgc2l6ZSkge1xuICAgICAgICBpZiAoIW5laWdoYm9ycykge1xuICAgICAgICAgIG5laWdoYm9ycyA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbjsgKytqKSB7XG4gICAgICAgICAgICBuZWlnaGJvcnNbal0gPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICAgICAgdmFyIG8gPSBsaW5rc1tqXTtcbiAgICAgICAgICAgIG5laWdoYm9yc1tvLnNvdXJjZS5pbmRleF0ucHVzaChvLnRhcmdldCk7XG4gICAgICAgICAgICBuZWlnaGJvcnNbby50YXJnZXQuaW5kZXhdLnB1c2goby5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FuZGlkYXRlcyA9IG5laWdoYm9yc1tpXSwgaiA9IC0xLCBsID0gY2FuZGlkYXRlcy5sZW5ndGgsIHg7XG4gICAgICAgIHdoaWxlICgrK2ogPCBsKSBpZiAoIWlzTmFOKHggPSBjYW5kaWRhdGVzW2pdW2RpbWVuc2lvbl0pKSByZXR1cm4geDtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiBzaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcmNlLnJlc3VtZSgpO1xuICAgIH07XG4gICAgZm9yY2UucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm9yY2UuYWxwaGEoLjEpO1xuICAgIH07XG4gICAgZm9yY2Uuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcmNlLmFscGhhKDApO1xuICAgIH07XG4gICAgZm9yY2UuZHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFkcmFnKSBkcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpLm9yaWdpbihkM19pZGVudGl0eSkub24oXCJkcmFnc3RhcnQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KS5vbihcImRyYWcuZm9yY2VcIiwgZHJhZ21vdmUpLm9uKFwiZHJhZ2VuZC5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VEcmFnZW5kKTtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRyYWc7XG4gICAgICB0aGlzLm9uKFwibW91c2VvdmVyLmZvcmNlXCIsIGQzX2xheW91dF9mb3JjZU1vdXNlb3Zlcikub24oXCJtb3VzZW91dC5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VNb3VzZW91dCkuY2FsbChkcmFnKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGRyYWdtb3ZlKGQpIHtcbiAgICAgIGQucHggPSBkMy5ldmVudC54LCBkLnB5ID0gZDMuZXZlbnQueTtcbiAgICAgIGZvcmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZDMucmViaW5kKGZvcmNlLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KGQpIHtcbiAgICBkLmZpeGVkIHw9IDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ2VuZChkKSB7XG4gICAgZC5maXhlZCAmPSB+NjtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VNb3VzZW92ZXIoZCkge1xuICAgIGQuZml4ZWQgfD0gNDtcbiAgICBkLnB4ID0gZC54LCBkLnB5ID0gZC55O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZU1vdXNlb3V0KGQpIHtcbiAgICBkLmZpeGVkICY9IH40O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZUFjY3VtdWxhdGUocXVhZCwgYWxwaGEsIGNoYXJnZXMpIHtcbiAgICB2YXIgY3ggPSAwLCBjeSA9IDA7XG4gICAgcXVhZC5jaGFyZ2UgPSAwO1xuICAgIGlmICghcXVhZC5sZWFmKSB7XG4gICAgICB2YXIgbm9kZXMgPSBxdWFkLm5vZGVzLCBuID0gbm9kZXMubGVuZ3RoLCBpID0gLTEsIGM7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBjID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChjID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBkM19sYXlvdXRfZm9yY2VBY2N1bXVsYXRlKGMsIGFscGhhLCBjaGFyZ2VzKTtcbiAgICAgICAgcXVhZC5jaGFyZ2UgKz0gYy5jaGFyZ2U7XG4gICAgICAgIGN4ICs9IGMuY2hhcmdlICogYy5jeDtcbiAgICAgICAgY3kgKz0gYy5jaGFyZ2UgKiBjLmN5O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVhZC5wb2ludCkge1xuICAgICAgaWYgKCFxdWFkLmxlYWYpIHtcbiAgICAgICAgcXVhZC5wb2ludC54ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcbiAgICAgICAgcXVhZC5wb2ludC55ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcbiAgICAgIH1cbiAgICAgIHZhciBrID0gYWxwaGEgKiBjaGFyZ2VzW3F1YWQucG9pbnQuaW5kZXhdO1xuICAgICAgcXVhZC5jaGFyZ2UgKz0gcXVhZC5wb2ludENoYXJnZSA9IGs7XG4gICAgICBjeCArPSBrICogcXVhZC5wb2ludC54O1xuICAgICAgY3kgKz0gayAqIHF1YWQucG9pbnQueTtcbiAgICB9XG4gICAgcXVhZC5jeCA9IGN4IC8gcXVhZC5jaGFyZ2U7XG4gICAgcXVhZC5jeSA9IGN5IC8gcXVhZC5jaGFyZ2U7XG4gIH1cbiAgdmFyIGQzX2xheW91dF9mb3JjZUxpbmtEaXN0YW5jZSA9IDIwLCBkM19sYXlvdXRfZm9yY2VMaW5rU3RyZW5ndGggPSAxLCBkM19sYXlvdXRfZm9yY2VDaGFyZ2VEaXN0YW5jZTIgPSBJbmZpbml0eTtcbiAgZDMubGF5b3V0LmhpZXJhcmNoeSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3J0ID0gZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQsIGNoaWxkcmVuID0gZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuLCB2YWx1ZSA9IGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZTtcbiAgICBmdW5jdGlvbiBoaWVyYXJjaHkocm9vdCkge1xuICAgICAgdmFyIHN0YWNrID0gWyByb290IF0sIG5vZGVzID0gW10sIG5vZGU7XG4gICAgICByb290LmRlcHRoID0gMDtcbiAgICAgIHdoaWxlICgobm9kZSA9IHN0YWNrLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4uY2FsbChoaWVyYXJjaHksIG5vZGUsIG5vZGUuZGVwdGgpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICAgICAgdmFyIG4sIGNoaWxkcywgY2hpbGQ7XG4gICAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGNoaWxkID0gY2hpbGRzW25dKTtcbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUpIG5vZGUudmFsdWUgPSAwO1xuICAgICAgICAgIG5vZGUuY2hpbGRyZW4gPSBjaGlsZHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHZhbHVlKSBub2RlLnZhbHVlID0gK3ZhbHVlLmNhbGwoaGllcmFyY2h5LCBub2RlLCBub2RlLmRlcHRoKSB8fCAwO1xuICAgICAgICAgIGRlbGV0ZSBub2RlLmNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZHMsIHBhcmVudDtcbiAgICAgICAgaWYgKHNvcnQgJiYgKGNoaWxkcyA9IG5vZGUuY2hpbGRyZW4pKSBjaGlsZHMuc29ydChzb3J0KTtcbiAgICAgICAgaWYgKHZhbHVlICYmIChwYXJlbnQgPSBub2RlLnBhcmVudCkpIHBhcmVudC52YWx1ZSArPSBub2RlLnZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGhpZXJhcmNoeS5zb3J0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydDtcbiAgICAgIHNvcnQgPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS5jaGlsZHJlbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgY2hpbGRyZW4gPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS52YWx1ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlO1xuICAgICAgdmFsdWUgPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS5yZXZhbHVlID0gZnVuY3Rpb24ocm9vdCkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIG5vZGUudmFsdWUgPSAwO1xuICAgICAgICB9KTtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIHZhciBwYXJlbnQ7XG4gICAgICAgICAgaWYgKCFub2RlLmNoaWxkcmVuKSBub2RlLnZhbHVlID0gK3ZhbHVlLmNhbGwoaGllcmFyY2h5LCBub2RlLCBub2RlLmRlcHRoKSB8fCAwO1xuICAgICAgICAgIGlmIChwYXJlbnQgPSBub2RlLnBhcmVudCkgcGFyZW50LnZhbHVlICs9IG5vZGUudmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfTtcbiAgICByZXR1cm4gaGllcmFyY2h5O1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKG9iamVjdCwgaGllcmFyY2h5KSB7XG4gICAgZDMucmViaW5kKG9iamVjdCwgaGllcmFyY2h5LCBcInNvcnRcIiwgXCJjaGlsZHJlblwiLCBcInZhbHVlXCIpO1xuICAgIG9iamVjdC5ub2RlcyA9IG9iamVjdDtcbiAgICBvYmplY3QubGlua3MgPSBkM19sYXlvdXRfaGllcmFyY2h5TGlua3M7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUobm9kZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgbm9kZXMgPSBbIG5vZGUgXTtcbiAgICB3aGlsZSAoKG5vZGUgPSBub2Rlcy5wb3AoKSkgIT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICBpZiAoKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBuLCBjaGlsZHJlbjtcbiAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSBub2Rlcy5wdXNoKGNoaWxkcmVuW25dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIobm9kZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgbm9kZXMgPSBbIG5vZGUgXSwgbm9kZXMyID0gW107XG4gICAgd2hpbGUgKChub2RlID0gbm9kZXMucG9wKCkpICE9IG51bGwpIHtcbiAgICAgIG5vZGVzMi5wdXNoKG5vZGUpO1xuICAgICAgaWYgKChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuLCBjaGlsZHJlbjtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoKG5vZGUgPSBub2RlczIucG9wKCkpICE9IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5Q2hpbGRyZW4oZCkge1xuICAgIHJldHVybiBkLmNoaWxkcmVuO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZShkKSB7XG4gICAgcmV0dXJuIGQudmFsdWU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQoYSwgYikge1xuICAgIHJldHVybiBiLnZhbHVlIC0gYS52YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5TGlua3Mobm9kZXMpIHtcbiAgICByZXR1cm4gZDMubWVyZ2Uobm9kZXMubWFwKGZ1bmN0aW9uKHBhcmVudCkge1xuICAgICAgcmV0dXJuIChwYXJlbnQuY2hpbGRyZW4gfHwgW10pLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogcGFyZW50LFxuICAgICAgICAgIHRhcmdldDogY2hpbGRcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxuICBkMy5sYXlvdXQucGFydGl0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKSwgc2l6ZSA9IFsgMSwgMSBdO1xuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUsIHgsIGR4LCBkeSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIG5vZGUueCA9IHg7XG4gICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gICAgICBub2RlLmR4ID0gZHg7XG4gICAgICBub2RlLmR5ID0gZHk7XG4gICAgICBpZiAoY2hpbGRyZW4gJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG4sIGMsIGQ7XG4gICAgICAgIGR4ID0gbm9kZS52YWx1ZSA/IGR4IC8gbm9kZS52YWx1ZSA6IDA7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgcG9zaXRpb24oYyA9IGNoaWxkcmVuW2ldLCB4LCBkID0gYy52YWx1ZSAqIGR4LCBkeSk7XG4gICAgICAgICAgeCArPSBkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlcHRoKG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIGQgPSAwO1xuICAgICAgaWYgKGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgZCA9IE1hdGgubWF4KGQsIGRlcHRoKGNoaWxkcmVuW2ldKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gMSArIGQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnRpdGlvbihkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgIHBvc2l0aW9uKG5vZGVzWzBdLCAwLCBzaXplWzBdLCBzaXplWzFdIC8gZGVwdGgobm9kZXNbMF0pKTtcbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgICAgc2l6ZSA9IHg7XG4gICAgICByZXR1cm4gcGFydGl0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQocGFydGl0aW9uLCBoaWVyYXJjaHkpO1xuICB9O1xuICBkMy5sYXlvdXQucGllID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gTnVtYmVyLCBzb3J0ID0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlLCBzdGFydEFuZ2xlID0gMCwgZW5kQW5nbGUgPSDPhCwgcGFkQW5nbGUgPSAwO1xuICAgIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCB2YWx1ZXMgPSBkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiArdmFsdWUuY2FsbChwaWUsIGQsIGkpO1xuICAgICAgfSksIGEgPSArKHR5cGVvZiBzdGFydEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzdGFydEFuZ2xlKSwgZGEgPSAodHlwZW9mIGVuZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogZW5kQW5nbGUpIC0gYSwgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sICsodHlwZW9mIHBhZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcGFkQW5nbGUpKSwgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksIHN1bSA9IGQzLnN1bSh2YWx1ZXMpLCBrID0gc3VtID8gKGRhIC0gbiAqIHBhKSAvIHN1bSA6IDAsIGluZGV4ID0gZDMucmFuZ2UobiksIGFyY3MgPSBbXSwgdjtcbiAgICAgIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoc29ydCA9PT0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlID8gZnVuY3Rpb24oaSwgaikge1xuICAgICAgICByZXR1cm4gdmFsdWVzW2pdIC0gdmFsdWVzW2ldO1xuICAgICAgfSA6IGZ1bmN0aW9uKGksIGopIHtcbiAgICAgICAgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7XG4gICAgICB9KTtcbiAgICAgIGluZGV4LmZvckVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBhcmNzW2ldID0ge1xuICAgICAgICAgIGRhdGE6IGRhdGFbaV0sXG4gICAgICAgICAgdmFsdWU6IHYgPSB2YWx1ZXNbaV0sXG4gICAgICAgICAgc3RhcnRBbmdsZTogYSxcbiAgICAgICAgICBlbmRBbmdsZTogYSArPSB2ICogayArIHBhLFxuICAgICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhcmNzO1xuICAgIH1cbiAgICBwaWUudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZTtcbiAgICAgIHZhbHVlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuc29ydCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnQ7XG4gICAgICBzb3J0ID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG4gICAgICBzdGFydEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcbiAgICAgIGVuZEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcbiAgICAgIHBhZEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICByZXR1cm4gcGllO1xuICB9O1xuICB2YXIgZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlID0ge307XG4gIGQzLmxheW91dC5zdGFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBkM19pZGVudGl0eSwgb3JkZXIgPSBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQsIG9mZnNldCA9IGQzX2xheW91dF9zdGFja09mZnNldFplcm8sIG91dCA9IGQzX2xheW91dF9zdGFja091dCwgeCA9IGQzX2xheW91dF9zdGFja1gsIHkgPSBkM19sYXlvdXRfc3RhY2tZO1xuICAgIGZ1bmN0aW9uIHN0YWNrKGRhdGEsIGluZGV4KSB7XG4gICAgICBpZiAoIShuID0gZGF0YS5sZW5ndGgpKSByZXR1cm4gZGF0YTtcbiAgICAgIHZhciBzZXJpZXMgPSBkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuY2FsbChzdGFjaywgZCwgaSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBwb2ludHMgPSBzZXJpZXMubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQubWFwKGZ1bmN0aW9uKHYsIGkpIHtcbiAgICAgICAgICByZXR1cm4gWyB4LmNhbGwoc3RhY2ssIHYsIGkpLCB5LmNhbGwoc3RhY2ssIHYsIGkpIF07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgb3JkZXJzID0gb3JkZXIuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG4gICAgICBzZXJpZXMgPSBkMy5wZXJtdXRlKHNlcmllcywgb3JkZXJzKTtcbiAgICAgIHBvaW50cyA9IGQzLnBlcm11dGUocG9pbnRzLCBvcmRlcnMpO1xuICAgICAgdmFyIG9mZnNldHMgPSBvZmZzZXQuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG4gICAgICB2YXIgbSA9IHNlcmllc1swXS5sZW5ndGgsIG4sIGksIGosIG87XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIG91dC5jYWxsKHN0YWNrLCBzZXJpZXNbMF1bal0sIG8gPSBvZmZzZXRzW2pdLCBwb2ludHNbMF1bal1bMV0pO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgb3V0LmNhbGwoc3RhY2ssIHNlcmllc1tpXVtqXSwgbyArPSBwb2ludHNbaSAtIDFdW2pdWzFdLCBwb2ludHNbaV1bal1bMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgc3RhY2sudmFsdWVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWVzO1xuICAgICAgdmFsdWVzID0geDtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLm9yZGVyID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JkZXI7XG4gICAgICBvcmRlciA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogZDNfbGF5b3V0X3N0YWNrT3JkZXJzLmdldCh4KSB8fCBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQ7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvZmZzZXQ7XG4gICAgICBvZmZzZXQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGQzX2xheW91dF9zdGFja09mZnNldHMuZ2V0KHgpIHx8IGQzX2xheW91dF9zdGFja09mZnNldFplcm87XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay54ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcbiAgICAgIHggPSB6O1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgc3RhY2sueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHk7XG4gICAgICB5ID0gejtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLm91dCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dDtcbiAgICAgIG91dCA9IHo7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1goZCkge1xuICAgIHJldHVybiBkLng7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrWShkKSB7XG4gICAgcmV0dXJuIGQueTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tPdXQoZCwgeTAsIHkpIHtcbiAgICBkLnkwID0geTA7XG4gICAgZC55ID0geTtcbiAgfVxuICB2YXIgZDNfbGF5b3V0X3N0YWNrT3JkZXJzID0gZDMubWFwKHtcbiAgICBcImluc2lkZS1vdXRcIjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgaSwgaiwgbWF4ID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgpLCBzdW1zID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKSwgaW5kZXggPSBkMy5yYW5nZShuKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIG1heFthXSAtIG1heFtiXTtcbiAgICAgIH0pLCB0b3AgPSAwLCBib3R0b20gPSAwLCB0b3BzID0gW10sIGJvdHRvbXMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaiA9IGluZGV4W2ldO1xuICAgICAgICBpZiAodG9wIDwgYm90dG9tKSB7XG4gICAgICAgICAgdG9wICs9IHN1bXNbal07XG4gICAgICAgICAgdG9wcy5wdXNoKGopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xuICAgICAgICAgIGJvdHRvbXMucHVzaChqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJvdHRvbXMucmV2ZXJzZSgpLmNvbmNhdCh0b3BzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShkYXRhLmxlbmd0aCkucmV2ZXJzZSgpO1xuICAgIH0sXG4gICAgXCJkZWZhdWx0XCI6IGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdFxuICB9KTtcbiAgdmFyIGQzX2xheW91dF9zdGFja09mZnNldHMgPSBkMy5tYXAoe1xuICAgIHNpbGhvdWV0dGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIG0gPSBkYXRhWzBdLmxlbmd0aCwgc3VtcyA9IFtdLCBtYXggPSAwLCBpLCBqLCBvLCB5MCA9IFtdO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBmb3IgKGkgPSAwLCBvID0gMDsgaSA8IG47IGkrKykgbyArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBpZiAobyA+IG1heCkgbWF4ID0gbztcbiAgICAgICAgc3Vtcy5wdXNoKG8pO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICB5MFtqXSA9IChtYXggLSBzdW1zW2pdKSAvIDI7XG4gICAgICB9XG4gICAgICByZXR1cm4geTA7XG4gICAgfSxcbiAgICB3aWdnbGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIHggPSBkYXRhWzBdLCBtID0geC5sZW5ndGgsIGksIGosIGssIHMxLCBzMiwgczMsIGR4LCBvLCBvMCwgeTAgPSBbXTtcbiAgICAgIHkwWzBdID0gbyA9IG8wID0gMDtcbiAgICAgIGZvciAoaiA9IDE7IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgczEgPSAwOyBpIDwgbjsgKytpKSBzMSArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBmb3IgKGkgPSAwLCBzMiA9IDAsIGR4ID0geFtqXVswXSAtIHhbaiAtIDFdWzBdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZm9yIChrID0gMCwgczMgPSAoZGF0YVtpXVtqXVsxXSAtIGRhdGFbaV1baiAtIDFdWzFdKSAvICgyICogZHgpOyBrIDwgaTsgKytrKSB7XG4gICAgICAgICAgICBzMyArPSAoZGF0YVtrXVtqXVsxXSAtIGRhdGFba11baiAtIDFdWzFdKSAvIGR4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzMiArPSBzMyAqIGRhdGFbaV1bal1bMV07XG4gICAgICAgIH1cbiAgICAgICAgeTBbal0gPSBvIC09IHMxID8gczIgLyBzMSAqIGR4IDogMDtcbiAgICAgICAgaWYgKG8gPCBvMCkgbzAgPSBvO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgeTBbal0gLT0gbzA7XG4gICAgICByZXR1cm4geTA7XG4gICAgfSxcbiAgICBleHBhbmQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIG0gPSBkYXRhWzBdLmxlbmd0aCwgayA9IDEgLyBuLCBpLCBqLCBvLCB5MCA9IFtdO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBmb3IgKGkgPSAwLCBvID0gMDsgaSA8IG47IGkrKykgbyArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBpZiAobykgZm9yIChpID0gMDsgaSA8IG47IGkrKykgZGF0YVtpXVtqXVsxXSAvPSBvOyBlbHNlIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGRhdGFbaV1bal1bMV0gPSBrO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgeTBbal0gPSAwO1xuICAgICAgcmV0dXJuIHkwO1xuICAgIH0sXG4gICAgemVybzogZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVyb1xuICB9KTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0KGRhdGEpIHtcbiAgICByZXR1cm4gZDMucmFuZ2UoZGF0YS5sZW5ndGgpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja09mZnNldFplcm8oZGF0YSkge1xuICAgIHZhciBqID0gLTEsIG0gPSBkYXRhWzBdLmxlbmd0aCwgeTAgPSBbXTtcbiAgICB3aGlsZSAoKytqIDwgbSkgeTBbal0gPSAwO1xuICAgIHJldHVybiB5MDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tNYXhJbmRleChhcnJheSkge1xuICAgIHZhciBpID0gMSwgaiA9IDAsIHYgPSBhcnJheVswXVsxXSwgaywgbiA9IGFycmF5Lmxlbmd0aDtcbiAgICBmb3IgKDtpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGsgPSBhcnJheVtpXVsxXSkgPiB2KSB7XG4gICAgICAgIGogPSBpO1xuICAgICAgICB2ID0gaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGo7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKGQpIHtcbiAgICByZXR1cm4gZC5yZWR1Y2UoZDNfbGF5b3V0X3N0YWNrU3VtLCAwKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tTdW0ocCwgZCkge1xuICAgIHJldHVybiBwICsgZFsxXTtcbiAgfVxuICBkMy5sYXlvdXQuaGlzdG9ncmFtID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZyZXF1ZW5jeSA9IHRydWUsIHZhbHVlciA9IE51bWJlciwgcmFuZ2VyID0gZDNfbGF5b3V0X2hpc3RvZ3JhbVJhbmdlLCBiaW5uZXIgPSBkM19sYXlvdXRfaGlzdG9ncmFtQmluU3R1cmdlcztcbiAgICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSwgaSkge1xuICAgICAgdmFyIGJpbnMgPSBbXSwgdmFsdWVzID0gZGF0YS5tYXAodmFsdWVyLCB0aGlzKSwgcmFuZ2UgPSByYW5nZXIuY2FsbCh0aGlzLCB2YWx1ZXMsIGkpLCB0aHJlc2hvbGRzID0gYmlubmVyLmNhbGwodGhpcywgcmFuZ2UsIHZhbHVlcywgaSksIGJpbiwgaSA9IC0xLCBuID0gdmFsdWVzLmxlbmd0aCwgbSA9IHRocmVzaG9sZHMubGVuZ3RoIC0gMSwgayA9IGZyZXF1ZW5jeSA/IDEgOiAxIC8gbiwgeDtcbiAgICAgIHdoaWxlICgrK2kgPCBtKSB7XG4gICAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcbiAgICAgICAgYmluLmR4ID0gdGhyZXNob2xkc1tpICsgMV0gLSAoYmluLnggPSB0aHJlc2hvbGRzW2ldKTtcbiAgICAgICAgYmluLnkgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKG0gPiAwKSB7XG4gICAgICAgIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICB4ID0gdmFsdWVzW2ldO1xuICAgICAgICAgIGlmICh4ID49IHJhbmdlWzBdICYmIHggPD0gcmFuZ2VbMV0pIHtcbiAgICAgICAgICAgIGJpbiA9IGJpbnNbZDMuYmlzZWN0KHRocmVzaG9sZHMsIHgsIDEsIG0pIC0gMV07XG4gICAgICAgICAgICBiaW4ueSArPSBrO1xuICAgICAgICAgICAgYmluLnB1c2goZGF0YVtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmlucztcbiAgICB9XG4gICAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWVyO1xuICAgICAgdmFsdWVyID0geDtcbiAgICAgIHJldHVybiBoaXN0b2dyYW07XG4gICAgfTtcbiAgICBoaXN0b2dyYW0ucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZXI7XG4gICAgICByYW5nZXIgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgICB9O1xuICAgIGhpc3RvZ3JhbS5iaW5zID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYmlubmVyO1xuICAgICAgYmlubmVyID0gdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICByZXR1cm4gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpbkZpeGVkKHJhbmdlLCB4KTtcbiAgICAgIH0gOiBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgICB9O1xuICAgIGhpc3RvZ3JhbS5mcmVxdWVuY3kgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmcmVxdWVuY3k7XG4gICAgICBmcmVxdWVuY3kgPSAhIXg7XG4gICAgICByZXR1cm4gaGlzdG9ncmFtO1xuICAgIH07XG4gICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpblN0dXJnZXMocmFuZ2UsIHZhbHVlcykge1xuICAgIHJldHVybiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yICsgMSkpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1CaW5GaXhlZChyYW5nZSwgbikge1xuICAgIHZhciB4ID0gLTEsIGIgPSArcmFuZ2VbMF0sIG0gPSAocmFuZ2VbMV0gLSBiKSAvIG4sIGYgPSBbXTtcbiAgICB3aGlsZSAoKyt4IDw9IG4pIGZbeF0gPSBtICogeCArIGI7XG4gICAgcmV0dXJuIGY7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpc3RvZ3JhbVJhbmdlKHZhbHVlcykge1xuICAgIHJldHVybiBbIGQzLm1pbih2YWx1ZXMpLCBkMy5tYXgodmFsdWVzKSBdO1xuICB9XG4gIGQzLmxheW91dC5wYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KGQzX2xheW91dF9wYWNrU29ydCksIHBhZGRpbmcgPSAwLCBzaXplID0gWyAxLCAxIF0sIHJhZGl1cztcbiAgICBmdW5jdGlvbiBwYWNrKGQsIGkpIHtcbiAgICAgIHZhciBub2RlcyA9IGhpZXJhcmNoeS5jYWxsKHRoaXMsIGQsIGkpLCByb290ID0gbm9kZXNbMF0sIHcgPSBzaXplWzBdLCBoID0gc2l6ZVsxXSwgciA9IHJhZGl1cyA9PSBudWxsID8gTWF0aC5zcXJ0IDogdHlwZW9mIHJhZGl1cyA9PT0gXCJmdW5jdGlvblwiID8gcmFkaXVzIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByYWRpdXM7XG4gICAgICB9O1xuICAgICAgcm9vdC54ID0gcm9vdC55ID0gMDtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgZC5yID0gK3IoZC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGQzX2xheW91dF9wYWNrU2libGluZ3MpO1xuICAgICAgaWYgKHBhZGRpbmcpIHtcbiAgICAgICAgdmFyIGRyID0gcGFkZGluZyAqIChyYWRpdXMgPyAxIDogTWF0aC5tYXgoMiAqIHJvb3QuciAvIHcsIDIgKiByb290LnIgLyBoKSkgLyAyO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgZC5yICs9IGRyO1xuICAgICAgICB9KTtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZDNfbGF5b3V0X3BhY2tTaWJsaW5ncyk7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICBkLnIgLT0gZHI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZDNfbGF5b3V0X3BhY2tUcmFuc2Zvcm0ocm9vdCwgdyAvIDIsIGggLyAyLCByYWRpdXMgPyAxIDogMSAvIE1hdGgubWF4KDIgKiByb290LnIgLyB3LCAyICogcm9vdC5yIC8gaCkpO1xuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICBwYWNrLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgICAgc2l6ZSA9IF87XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHBhY2sucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFkaXVzO1xuICAgICAgcmFkaXVzID0gXyA9PSBudWxsIHx8IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogK187XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHBhY2sucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZGRpbmc7XG4gICAgICBwYWRkaW5nID0gK187XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHBhY2ssIGhpZXJhcmNoeSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU29ydChhLCBiKSB7XG4gICAgcmV0dXJuIGEudmFsdWUgLSBiLnZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGIpIHtcbiAgICB2YXIgYyA9IGEuX3BhY2tfbmV4dDtcbiAgICBhLl9wYWNrX25leHQgPSBiO1xuICAgIGIuX3BhY2tfcHJldiA9IGE7XG4gICAgYi5fcGFja19uZXh0ID0gYztcbiAgICBjLl9wYWNrX3ByZXYgPSBiO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU3BsaWNlKGEsIGIpIHtcbiAgICBhLl9wYWNrX25leHQgPSBiO1xuICAgIGIuX3BhY2tfcHJldiA9IGE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGEsIGIpIHtcbiAgICB2YXIgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55LCBkciA9IGEuciArIGIucjtcbiAgICByZXR1cm4gLjk5OSAqIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1NpYmxpbmdzKG5vZGUpIHtcbiAgICBpZiAoIShub2RlcyA9IG5vZGUuY2hpbGRyZW4pIHx8ICEobiA9IG5vZGVzLmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbm9kZXMsIHhNaW4gPSBJbmZpbml0eSwgeE1heCA9IC1JbmZpbml0eSwgeU1pbiA9IEluZmluaXR5LCB5TWF4ID0gLUluZmluaXR5LCBhLCBiLCBjLCBpLCBqLCBrLCBuO1xuICAgIGZ1bmN0aW9uIGJvdW5kKG5vZGUpIHtcbiAgICAgIHhNaW4gPSBNYXRoLm1pbihub2RlLnggLSBub2RlLnIsIHhNaW4pO1xuICAgICAgeE1heCA9IE1hdGgubWF4KG5vZGUueCArIG5vZGUuciwgeE1heCk7XG4gICAgICB5TWluID0gTWF0aC5taW4obm9kZS55IC0gbm9kZS5yLCB5TWluKTtcbiAgICAgIHlNYXggPSBNYXRoLm1heChub2RlLnkgKyBub2RlLnIsIHlNYXgpO1xuICAgIH1cbiAgICBub2Rlcy5mb3JFYWNoKGQzX2xheW91dF9wYWNrTGluayk7XG4gICAgYSA9IG5vZGVzWzBdO1xuICAgIGEueCA9IC1hLnI7XG4gICAgYS55ID0gMDtcbiAgICBib3VuZChhKTtcbiAgICBpZiAobiA+IDEpIHtcbiAgICAgIGIgPSBub2Rlc1sxXTtcbiAgICAgIGIueCA9IGIucjtcbiAgICAgIGIueSA9IDA7XG4gICAgICBib3VuZChiKTtcbiAgICAgIGlmIChuID4gMikge1xuICAgICAgICBjID0gbm9kZXNbMl07XG4gICAgICAgIGQzX2xheW91dF9wYWNrUGxhY2UoYSwgYiwgYyk7XG4gICAgICAgIGJvdW5kKGMpO1xuICAgICAgICBkM19sYXlvdXRfcGFja0luc2VydChhLCBjKTtcbiAgICAgICAgYS5fcGFja19wcmV2ID0gYztcbiAgICAgICAgZDNfbGF5b3V0X3BhY2tJbnNlcnQoYywgYik7XG4gICAgICAgIGIgPSBhLl9wYWNrX25leHQ7XG4gICAgICAgIGZvciAoaSA9IDM7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBkM19sYXlvdXRfcGFja1BsYWNlKGEsIGIsIGMgPSBub2Rlc1tpXSk7XG4gICAgICAgICAgdmFyIGlzZWN0ID0gMCwgczEgPSAxLCBzMiA9IDE7XG4gICAgICAgICAgZm9yIChqID0gYi5fcGFja19uZXh0OyBqICE9PSBiOyBqID0gai5fcGFja19uZXh0LCBzMSsrKSB7XG4gICAgICAgICAgICBpZiAoZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGosIGMpKSB7XG4gICAgICAgICAgICAgIGlzZWN0ID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc2VjdCA9PSAxKSB7XG4gICAgICAgICAgICBmb3IgKGsgPSBhLl9wYWNrX3ByZXY7IGsgIT09IGouX3BhY2tfcHJldjsgayA9IGsuX3BhY2tfcHJldiwgczIrKykge1xuICAgICAgICAgICAgICBpZiAoZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGssIGMpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzZWN0KSB7XG4gICAgICAgICAgICBpZiAoczEgPCBzMiB8fCBzMSA9PSBzMiAmJiBiLnIgPCBhLnIpIGQzX2xheW91dF9wYWNrU3BsaWNlKGEsIGIgPSBqKTsgZWxzZSBkM19sYXlvdXRfcGFja1NwbGljZShhID0gaywgYik7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGMpO1xuICAgICAgICAgICAgYiA9IGM7XG4gICAgICAgICAgICBib3VuZChjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGN4ID0gKHhNaW4gKyB4TWF4KSAvIDIsIGN5ID0gKHlNaW4gKyB5TWF4KSAvIDIsIGNyID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICBjID0gbm9kZXNbaV07XG4gICAgICBjLnggLT0gY3g7XG4gICAgICBjLnkgLT0gY3k7XG4gICAgICBjciA9IE1hdGgubWF4KGNyLCBjLnIgKyBNYXRoLnNxcnQoYy54ICogYy54ICsgYy55ICogYy55KSk7XG4gICAgfVxuICAgIG5vZGUuciA9IGNyO1xuICAgIG5vZGVzLmZvckVhY2goZDNfbGF5b3V0X3BhY2tVbmxpbmspO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrTGluayhub2RlKSB7XG4gICAgbm9kZS5fcGFja19uZXh0ID0gbm9kZS5fcGFja19wcmV2ID0gbm9kZTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1VubGluayhub2RlKSB7XG4gICAgZGVsZXRlIG5vZGUuX3BhY2tfbmV4dDtcbiAgICBkZWxldGUgbm9kZS5fcGFja19wcmV2O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKG5vZGUsIHgsIHksIGspIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIG5vZGUueCA9IHggKz0gayAqIG5vZGUueDtcbiAgICBub2RlLnkgPSB5ICs9IGsgKiBub2RlLnk7XG4gICAgbm9kZS5yICo9IGs7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKGNoaWxkcmVuW2ldLCB4LCB5LCBrKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjKSB7XG4gICAgdmFyIGRiID0gYS5yICsgYy5yLCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gICAgaWYgKGRiICYmIChkeCB8fCBkeSkpIHtcbiAgICAgIHZhciBkYSA9IGIuciArIGMuciwgZGMgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGRhICo9IGRhO1xuICAgICAgZGIgKj0gZGI7XG4gICAgICB2YXIgeCA9IC41ICsgKGRiIC0gZGEpIC8gKDIgKiBkYyksIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgMiAqIGRhICogKGRiICsgZGMpIC0gKGRiIC09IGRjKSAqIGRiIC0gZGEgKiBkYSkpIC8gKDIgKiBkYyk7XG4gICAgICBjLnggPSBhLnggKyB4ICogZHggKyB5ICogZHk7XG4gICAgICBjLnkgPSBhLnkgKyB4ICogZHkgLSB5ICogZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMueCA9IGEueCArIGRiO1xuICAgICAgYy55ID0gYS55O1xuICAgIH1cbiAgfVxuICBkMy5sYXlvdXQudHJlZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChudWxsKS52YWx1ZShudWxsKSwgc2VwYXJhdGlvbiA9IGQzX2xheW91dF90cmVlU2VwYXJhdGlvbiwgc2l6ZSA9IFsgMSwgMSBdLCBub2RlU2l6ZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gdHJlZShkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdDAgPSBub2Rlc1swXSwgcm9vdDEgPSB3cmFwVHJlZShyb290MCk7XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290MSwgZmlyc3RXYWxrKSwgcm9vdDEucGFyZW50Lm0gPSAtcm9vdDEuejtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MSwgc2Vjb25kV2Fsayk7XG4gICAgICBpZiAobm9kZVNpemUpIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgc2l6ZU5vZGUpOyBlbHNlIHtcbiAgICAgICAgdmFyIGxlZnQgPSByb290MCwgcmlnaHQgPSByb290MCwgYm90dG9tID0gcm9vdDA7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG4gICAgICAgICAgaWYgKG5vZGUuZGVwdGggPiBib3R0b20uZGVwdGgpIGJvdHRvbSA9IG5vZGU7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdHggPSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIgLSBsZWZ0LngsIGt4ID0gc2l6ZVswXSAvIChyaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyICsgdHgpLCBreSA9IHNpemVbMV0gLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDAsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG4gICAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JhcFRyZWUocm9vdDApIHtcbiAgICAgIHZhciByb290MSA9IHtcbiAgICAgICAgQTogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IFsgcm9vdDAgXVxuICAgICAgfSwgcXVldWUgPSBbIHJvb3QxIF0sIG5vZGUxO1xuICAgICAgd2hpbGUgKChub2RlMSA9IHF1ZXVlLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gbm9kZTEuY2hpbGRyZW4sIGNoaWxkLCBpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIHF1ZXVlLnB1c2goKGNoaWxkcmVuW2ldID0gY2hpbGQgPSB7XG4gICAgICAgICAgICBfOiBjaGlsZHJlbltpXSxcbiAgICAgICAgICAgIHBhcmVudDogbm9kZTEsXG4gICAgICAgICAgICBjaGlsZHJlbjogKGNoaWxkID0gY2hpbGRyZW5baV0uY2hpbGRyZW4pICYmIGNoaWxkLnNsaWNlKCkgfHwgW10sXG4gICAgICAgICAgICBBOiBudWxsLFxuICAgICAgICAgICAgYTogbnVsbCxcbiAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICBtOiAwLFxuICAgICAgICAgICAgYzogMCxcbiAgICAgICAgICAgIHM6IDAsXG4gICAgICAgICAgICB0OiBudWxsLFxuICAgICAgICAgICAgaTogaVxuICAgICAgICAgIH0pLmEgPSBjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByb290MS5jaGlsZHJlblswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIGQzX2xheW91dF90cmVlU2hpZnQodik7XG4gICAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xuICAgICAgICBpZiAodykge1xuICAgICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICB9XG4gICAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZWNvbmRXYWxrKHYpIHtcbiAgICAgIHYuXy54ID0gdi56ICsgdi5wYXJlbnQubTtcbiAgICAgIHYubSArPSB2LnBhcmVudC5tO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHZhciB2aXAgPSB2LCB2b3AgPSB2LCB2aW0gPSB3LCB2b20gPSB2aXAucGFyZW50LmNoaWxkcmVuWzBdLCBzaXAgPSB2aXAubSwgc29wID0gdm9wLm0sIHNpbSA9IHZpbS5tLCBzb20gPSB2b20ubSwgc2hpZnQ7XG4gICAgICAgIHdoaWxlICh2aW0gPSBkM19sYXlvdXRfdHJlZVJpZ2h0KHZpbSksIHZpcCA9IGQzX2xheW91dF90cmVlTGVmdCh2aXApLCB2aW0gJiYgdmlwKSB7XG4gICAgICAgICAgdm9tID0gZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSk7XG4gICAgICAgICAgdm9wID0gZDNfbGF5b3V0X3RyZWVSaWdodCh2b3ApO1xuICAgICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgICAgZDNfbGF5b3V0X3RyZWVNb3ZlKGQzX2xheW91dF90cmVlQW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcbiAgICAgICAgICAgIHNpcCArPSBzaGlmdDtcbiAgICAgICAgICAgIHNvcCArPSBzaGlmdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2ltICs9IHZpbS5tO1xuICAgICAgICAgIHNpcCArPSB2aXAubTtcbiAgICAgICAgICBzb20gKz0gdm9tLm07XG4gICAgICAgICAgc29wICs9IHZvcC5tO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aW0gJiYgIWQzX2xheW91dF90cmVlUmlnaHQodm9wKSkge1xuICAgICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlwICYmICFkM19sYXlvdXRfdHJlZUxlZnQodm9tKSkge1xuICAgICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICAgIHZvbS5tICs9IHNpcCAtIHNvbTtcbiAgICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbmNlc3RvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgICAgbm9kZS54ICo9IHNpemVbMF07XG4gICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogc2l6ZVsxXTtcbiAgICB9XG4gICAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2VwYXJhdGlvbjtcbiAgICAgIHNlcGFyYXRpb24gPSB4O1xuICAgICAgcmV0dXJuIHRyZWU7XG4gICAgfTtcbiAgICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IG51bGwgOiBzaXplO1xuICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBzaXplTm9kZSA6IG51bGw7XG4gICAgICByZXR1cm4gdHJlZTtcbiAgICB9O1xuICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IHNpemUgOiBudWxsO1xuICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBudWxsIDogc2l6ZU5vZGU7XG4gICAgICByZXR1cm4gdHJlZTtcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWUsIGhpZXJhcmNoeSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlU2VwYXJhdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEucGFyZW50ID09IGIucGFyZW50ID8gMSA6IDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVMZWZ0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbi5sZW5ndGggPyBjaGlsZHJlblswXSA6IHYudDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVJpZ2h0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLCBuO1xuICAgIHJldHVybiAobiA9IGNoaWxkcmVuLmxlbmd0aCkgPyBjaGlsZHJlbltuIC0gMV0gOiB2LnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVNb3ZlKHdtLCB3cCwgc2hpZnQpIHtcbiAgICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICAgIHdwLmMgLT0gY2hhbmdlO1xuICAgIHdwLnMgKz0gc2hpZnQ7XG4gICAgd20uYyArPSBjaGFuZ2U7XG4gICAgd3AueiArPSBzaGlmdDtcbiAgICB3cC5tICs9IHNoaWZ0O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlU2hpZnQodikge1xuICAgIHZhciBzaGlmdCA9IDAsIGNoYW5nZSA9IDAsIGNoaWxkcmVuID0gdi5jaGlsZHJlbiwgaSA9IGNoaWxkcmVuLmxlbmd0aCwgdztcbiAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgIHcgPSBjaGlsZHJlbltpXTtcbiAgICAgIHcueiArPSBzaGlmdDtcbiAgICAgIHcubSArPSBzaGlmdDtcbiAgICAgIHNoaWZ0ICs9IHcucyArIChjaGFuZ2UgKz0gdy5jKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gICAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xuICB9XG4gIGQzLmxheW91dC5jbHVzdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KG51bGwpLnZhbHVlKG51bGwpLCBzZXBhcmF0aW9uID0gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uLCBzaXplID0gWyAxLCAxIF0sIG5vZGVTaXplID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gY2x1c3RlcihkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdCA9IG5vZGVzWzBdLCBwcmV2aW91c05vZGUsIHggPSAwO1xuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgbm9kZS54ID0gZDNfbGF5b3V0X2NsdXN0ZXJYKGNoaWxkcmVuKTtcbiAgICAgICAgICBub2RlLnkgPSBkM19sYXlvdXRfY2x1c3RlclkoY2hpbGRyZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDtcbiAgICAgICAgICBub2RlLnkgPSAwO1xuICAgICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGxlZnQgPSBkM19sYXlvdXRfY2x1c3RlckxlZnQocm9vdCksIHJpZ2h0ID0gZDNfbGF5b3V0X2NsdXN0ZXJSaWdodChyb290KSwgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIG5vZGVTaXplID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54IC0gcm9vdC54KSAqIHNpemVbMF07XG4gICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogc2l6ZVsxXTtcbiAgICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggLSB4MCkgLyAoeDEgLSB4MCkgKiBzaXplWzBdO1xuICAgICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBzaXplWzFdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNlcGFyYXRpb247XG4gICAgICBzZXBhcmF0aW9uID0geDtcbiAgICAgIHJldHVybiBjbHVzdGVyO1xuICAgIH07XG4gICAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBudWxsIDogc2l6ZTtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSA9PSBudWxsO1xuICAgICAgcmV0dXJuIGNsdXN0ZXI7XG4gICAgfTtcbiAgICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBzaXplIDogbnVsbDtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSAhPSBudWxsO1xuICAgICAgcmV0dXJuIGNsdXN0ZXI7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZChjbHVzdGVyLCBoaWVyYXJjaHkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclkoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gMSArIGQzLm1heChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC55O1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyWChjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24oeCwgY2hpbGQpIHtcbiAgICAgIHJldHVybiB4ICsgY2hpbGQueDtcbiAgICB9LCAwKSAvIGNoaWxkcmVuLmxlbmd0aDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlckxlZnQobm9kZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA/IGQzX2xheW91dF9jbHVzdGVyTGVmdChjaGlsZHJlblswXSkgOiBub2RlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyUmlnaHQobm9kZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIG47XG4gICAgcmV0dXJuIGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSA/IGQzX2xheW91dF9jbHVzdGVyUmlnaHQoY2hpbGRyZW5bbiAtIDFdKSA6IG5vZGU7XG4gIH1cbiAgZDMubGF5b3V0LnRyZWVtYXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLCByb3VuZCA9IE1hdGgucm91bmQsIHNpemUgPSBbIDEsIDEgXSwgcGFkZGluZyA9IG51bGwsIHBhZCA9IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbCwgc3RpY2t5ID0gZmFsc2UsIHN0aWNraWVzLCBtb2RlID0gXCJzcXVhcmlmeVwiLCByYXRpbyA9IC41ICogKDEgKyBNYXRoLnNxcnQoNSkpO1xuICAgIGZ1bmN0aW9uIHNjYWxlKGNoaWxkcmVuLCBrKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gY2hpbGRyZW4ubGVuZ3RoLCBjaGlsZCwgYXJlYTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGFyZWEgPSAoY2hpbGQgPSBjaGlsZHJlbltpXSkudmFsdWUgKiAoayA8IDAgPyAwIDogayk7XG4gICAgICAgIGNoaWxkLmFyZWEgPSBpc05hTihhcmVhKSB8fCBhcmVhIDw9IDAgPyAwIDogYXJlYTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3F1YXJpZnkobm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBwYWQobm9kZSksIHJvdyA9IFtdLCByZW1haW5pbmcgPSBjaGlsZHJlbi5zbGljZSgpLCBjaGlsZCwgYmVzdCA9IEluZmluaXR5LCBzY29yZSwgdSA9IG1vZGUgPT09IFwic2xpY2VcIiA/IHJlY3QuZHggOiBtb2RlID09PSBcImRpY2VcIiA/IHJlY3QuZHkgOiBtb2RlID09PSBcInNsaWNlLWRpY2VcIiA/IG5vZGUuZGVwdGggJiAxID8gcmVjdC5keSA6IHJlY3QuZHggOiBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KSwgbjtcbiAgICAgICAgc2NhbGUocmVtYWluaW5nLCByZWN0LmR4ICogcmVjdC5keSAvIG5vZGUudmFsdWUpO1xuICAgICAgICByb3cuYXJlYSA9IDA7XG4gICAgICAgIHdoaWxlICgobiA9IHJlbWFpbmluZy5sZW5ndGgpID4gMCkge1xuICAgICAgICAgIHJvdy5wdXNoKGNoaWxkID0gcmVtYWluaW5nW24gLSAxXSk7XG4gICAgICAgICAgcm93LmFyZWEgKz0gY2hpbGQuYXJlYTtcbiAgICAgICAgICBpZiAobW9kZSAhPT0gXCJzcXVhcmlmeVwiIHx8IChzY29yZSA9IHdvcnN0KHJvdywgdSkpIDw9IGJlc3QpIHtcbiAgICAgICAgICAgIHJlbWFpbmluZy5wb3AoKTtcbiAgICAgICAgICAgIGJlc3QgPSBzY29yZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm93LmFyZWEgLT0gcm93LnBvcCgpLmFyZWE7XG4gICAgICAgICAgICBwb3NpdGlvbihyb3csIHUsIHJlY3QsIGZhbHNlKTtcbiAgICAgICAgICAgIHUgPSBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KTtcbiAgICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG4gICAgICAgICAgICBiZXN0ID0gSW5maW5pdHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyb3cubGVuZ3RoKSB7XG4gICAgICAgICAgcG9zaXRpb24ocm93LCB1LCByZWN0LCB0cnVlKTtcbiAgICAgICAgICByb3cubGVuZ3RoID0gcm93LmFyZWEgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goc3F1YXJpZnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdGlja2lmeShub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICB2YXIgcmVjdCA9IHBhZChub2RlKSwgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSwgY2hpbGQsIHJvdyA9IFtdO1xuICAgICAgICBzY2FsZShyZW1haW5pbmcsIHJlY3QuZHggKiByZWN0LmR5IC8gbm9kZS52YWx1ZSk7XG4gICAgICAgIHJvdy5hcmVhID0gMDtcbiAgICAgICAgd2hpbGUgKGNoaWxkID0gcmVtYWluaW5nLnBvcCgpKSB7XG4gICAgICAgICAgcm93LnB1c2goY2hpbGQpO1xuICAgICAgICAgIHJvdy5hcmVhICs9IGNoaWxkLmFyZWE7XG4gICAgICAgICAgaWYgKGNoaWxkLnogIT0gbnVsbCkge1xuICAgICAgICAgICAgcG9zaXRpb24ocm93LCBjaGlsZC56ID8gcmVjdC5keCA6IHJlY3QuZHksIHJlY3QsICFyZW1haW5pbmcubGVuZ3RoKTtcbiAgICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goc3RpY2tpZnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3b3JzdChyb3csIHUpIHtcbiAgICAgIHZhciBzID0gcm93LmFyZWEsIHIsIHJtYXggPSAwLCBybWluID0gSW5maW5pdHksIGkgPSAtMSwgbiA9IHJvdy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIShyID0gcm93W2ldLmFyZWEpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKHIgPCBybWluKSBybWluID0gcjtcbiAgICAgICAgaWYgKHIgPiBybWF4KSBybWF4ID0gcjtcbiAgICAgIH1cbiAgICAgIHMgKj0gcztcbiAgICAgIHUgKj0gdTtcbiAgICAgIHJldHVybiBzID8gTWF0aC5tYXgodSAqIHJtYXggKiByYXRpbyAvIHMsIHMgLyAodSAqIHJtaW4gKiByYXRpbykpIDogSW5maW5pdHk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgZmx1c2gpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSByb3cubGVuZ3RoLCB4ID0gcmVjdC54LCB5ID0gcmVjdC55LCB2ID0gdSA/IHJvdW5kKHJvdy5hcmVhIC8gdSkgOiAwLCBvO1xuICAgICAgaWYgKHUgPT0gcmVjdC5keCkge1xuICAgICAgICBpZiAoZmx1c2ggfHwgdiA+IHJlY3QuZHkpIHYgPSByZWN0LmR5O1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIG8gPSByb3dbaV07XG4gICAgICAgICAgby54ID0geDtcbiAgICAgICAgICBvLnkgPSB5O1xuICAgICAgICAgIG8uZHkgPSB2O1xuICAgICAgICAgIHggKz0gby5keCA9IE1hdGgubWluKHJlY3QueCArIHJlY3QuZHggLSB4LCB2ID8gcm91bmQoby5hcmVhIC8gdikgOiAwKTtcbiAgICAgICAgfVxuICAgICAgICBvLnogPSB0cnVlO1xuICAgICAgICBvLmR4ICs9IHJlY3QueCArIHJlY3QuZHggLSB4O1xuICAgICAgICByZWN0LnkgKz0gdjtcbiAgICAgICAgcmVjdC5keSAtPSB2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZsdXNoIHx8IHYgPiByZWN0LmR4KSB2ID0gcmVjdC5keDtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBvID0gcm93W2ldO1xuICAgICAgICAgIG8ueCA9IHg7XG4gICAgICAgICAgby55ID0geTtcbiAgICAgICAgICBvLmR4ID0gdjtcbiAgICAgICAgICB5ICs9IG8uZHkgPSBNYXRoLm1pbihyZWN0LnkgKyByZWN0LmR5IC0geSwgdiA/IHJvdW5kKG8uYXJlYSAvIHYpIDogMCk7XG4gICAgICAgIH1cbiAgICAgICAgby56ID0gZmFsc2U7XG4gICAgICAgIG8uZHkgKz0gcmVjdC55ICsgcmVjdC5keSAtIHk7XG4gICAgICAgIHJlY3QueCArPSB2O1xuICAgICAgICByZWN0LmR4IC09IHY7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyZWVtYXAoZCkge1xuICAgICAgdmFyIG5vZGVzID0gc3RpY2tpZXMgfHwgaGllcmFyY2h5KGQpLCByb290ID0gbm9kZXNbMF07XG4gICAgICByb290LnggPSByb290LnkgPSAwO1xuICAgICAgaWYgKHJvb3QudmFsdWUpIHJvb3QuZHggPSBzaXplWzBdLCByb290LmR5ID0gc2l6ZVsxXTsgZWxzZSByb290LmR4ID0gcm9vdC5keSA9IDA7XG4gICAgICBpZiAoc3RpY2tpZXMpIGhpZXJhcmNoeS5yZXZhbHVlKHJvb3QpO1xuICAgICAgc2NhbGUoWyByb290IF0sIHJvb3QuZHggKiByb290LmR5IC8gcm9vdC52YWx1ZSk7XG4gICAgICAoc3RpY2tpZXMgPyBzdGlja2lmeSA6IHNxdWFyaWZ5KShyb290KTtcbiAgICAgIGlmIChzdGlja3kpIHN0aWNraWVzID0gbm9kZXM7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIHRyZWVtYXAuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0geDtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkZGluZztcbiAgICAgIGZ1bmN0aW9uIHBhZEZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdmFyIHAgPSB4LmNhbGwodHJlZW1hcCwgbm9kZSwgbm9kZS5kZXB0aCk7XG4gICAgICAgIHJldHVybiBwID09IG51bGwgPyBkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwobm9kZSkgOiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCB0eXBlb2YgcCA9PT0gXCJudW1iZXJcIiA/IFsgcCwgcCwgcCwgcCBdIDogcCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwYWRDb25zdGFudChub2RlKSB7XG4gICAgICAgIHJldHVybiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCB4KTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlO1xuICAgICAgcGFkID0gKHBhZGRpbmcgPSB4KSA9PSBudWxsID8gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsIDogKHR5cGUgPSB0eXBlb2YgeCkgPT09IFwiZnVuY3Rpb25cIiA/IHBhZEZ1bmN0aW9uIDogdHlwZSA9PT0gXCJudW1iZXJcIiA/ICh4ID0gWyB4LCB4LCB4LCB4IF0sIFxuICAgICAgcGFkQ29uc3RhbnQpIDogcGFkQ29uc3RhbnQ7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByb3VuZCAhPSBOdW1iZXI7XG4gICAgICByb3VuZCA9IHggPyBNYXRoLnJvdW5kIDogTnVtYmVyO1xuICAgICAgcmV0dXJuIHRyZWVtYXA7XG4gICAgfTtcbiAgICB0cmVlbWFwLnN0aWNreSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0aWNreTtcbiAgICAgIHN0aWNreSA9IHg7XG4gICAgICBzdGlja2llcyA9IG51bGw7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYXRpbztcbiAgICAgIHJhdGlvID0geDtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgdHJlZW1hcC5tb2RlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbW9kZTtcbiAgICAgIG1vZGUgPSB4ICsgXCJcIjtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQodHJlZW1hcCwgaGllcmFyY2h5KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsKG5vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogbm9kZS54LFxuICAgICAgeTogbm9kZS55LFxuICAgICAgZHg6IG5vZGUuZHgsXG4gICAgICBkeTogbm9kZS5keVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgcGFkZGluZykge1xuICAgIHZhciB4ID0gbm9kZS54ICsgcGFkZGluZ1szXSwgeSA9IG5vZGUueSArIHBhZGRpbmdbMF0sIGR4ID0gbm9kZS5keCAtIHBhZGRpbmdbMV0gLSBwYWRkaW5nWzNdLCBkeSA9IG5vZGUuZHkgLSBwYWRkaW5nWzBdIC0gcGFkZGluZ1syXTtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICB4ICs9IGR4IC8gMjtcbiAgICAgIGR4ID0gMDtcbiAgICB9XG4gICAgaWYgKGR5IDwgMCkge1xuICAgICAgeSArPSBkeSAvIDI7XG4gICAgICBkeSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeSxcbiAgICAgIGR4OiBkeCxcbiAgICAgIGR5OiBkeVxuICAgIH07XG4gIH1cbiAgZDMucmFuZG9tID0ge1xuICAgIG5vcm1hbDogZnVuY3Rpb24owrUsIM+DKSB7XG4gICAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAobiA8IDIpIM+DID0gMTtcbiAgICAgIGlmIChuIDwgMSkgwrUgPSAwO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgeCwgeSwgcjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHggPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG4gICAgICAgICAgeSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuICAgICAgICByZXR1cm4gwrUgKyDPgyAqIHggKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGxvZ05vcm1hbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmFuZG9tID0gZDMucmFuZG9tLm5vcm1hbC5hcHBseShkMywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbSgpKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBiYXRlczogZnVuY3Rpb24obSkge1xuICAgICAgdmFyIHJhbmRvbSA9IGQzLnJhbmRvbS5pcndpbkhhbGwobSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByYW5kb20oKSAvIG07XG4gICAgICB9O1xuICAgIH0sXG4gICAgaXJ3aW5IYWxsOiBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIHMgPSAwLCBqID0gMDsgaiA8IG07IGorKykgcyArPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICBkMy5zY2FsZSA9IHt9O1xuICBmdW5jdGlvbiBkM19zY2FsZUV4dGVudChkb21haW4pIHtcbiAgICB2YXIgc3RhcnQgPSBkb21haW5bMF0sIHN0b3AgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBzdGFydCA8IHN0b3AgPyBbIHN0YXJ0LCBzdG9wIF0gOiBbIHN0b3AsIHN0YXJ0IF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVSYW5nZShzY2FsZSkge1xuICAgIHJldHVybiBzY2FsZS5yYW5nZUV4dGVudCA/IHNjYWxlLnJhbmdlRXh0ZW50KCkgOiBkM19zY2FsZUV4dGVudChzY2FsZS5yYW5nZSgpKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9iaWxpbmVhcihkb21haW4sIHJhbmdlLCB1bmludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSkge1xuICAgIHZhciB1ID0gdW5pbnRlcnBvbGF0ZShkb21haW5bMF0sIGRvbWFpblsxXSksIGkgPSBpbnRlcnBvbGF0ZShyYW5nZVswXSwgcmFuZ2VbMV0pO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gaSh1KHgpKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX25pY2UoZG9tYWluLCBuaWNlKSB7XG4gICAgdmFyIGkwID0gMCwgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSwgeDAgPSBkb21haW5baTBdLCB4MSA9IGRvbWFpbltpMV0sIGR4O1xuICAgIGlmICh4MSA8IHgwKSB7XG4gICAgICBkeCA9IGkwLCBpMCA9IGkxLCBpMSA9IGR4O1xuICAgICAgZHggPSB4MCwgeDAgPSB4MSwgeDEgPSBkeDtcbiAgICB9XG4gICAgZG9tYWluW2kwXSA9IG5pY2UuZmxvb3IoeDApO1xuICAgIGRvbWFpbltpMV0gPSBuaWNlLmNlaWwoeDEpO1xuICAgIHJldHVybiBkb21haW47XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbmljZVN0ZXAoc3RlcCkge1xuICAgIHJldHVybiBzdGVwID8ge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoeCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoeCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH1cbiAgICB9IDogZDNfc2NhbGVfbmljZUlkZW50aXR5O1xuICB9XG4gIHZhciBkM19zY2FsZV9uaWNlSWRlbnRpdHkgPSB7XG4gICAgZmxvb3I6IGQzX2lkZW50aXR5LFxuICAgIGNlaWw6IGQzX2lkZW50aXR5XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3BvbHlsaW5lYXIoZG9tYWluLCByYW5nZSwgdW5pbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgdSA9IFtdLCBpID0gW10sIGogPSAwLCBrID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDE7XG4gICAgaWYgKGRvbWFpbltrXSA8IGRvbWFpblswXSkge1xuICAgICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgd2hpbGUgKCsraiA8PSBrKSB7XG4gICAgICB1LnB1c2godW5pbnRlcnBvbGF0ZShkb21haW5baiAtIDFdLCBkb21haW5bal0pKTtcbiAgICAgIGkucHVzaChpbnRlcnBvbGF0ZShyYW5nZVtqIC0gMV0sIHJhbmdlW2pdKSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICB2YXIgaiA9IGQzLmJpc2VjdChkb21haW4sIHgsIDEsIGspIC0gMTtcbiAgICAgIHJldHVybiBpW2pdKHVbal0oeCkpO1xuICAgIH07XG4gIH1cbiAgZDMuc2NhbGUubGluZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihbIDAsIDEgXSwgWyAwLCAxIF0sIGQzX2ludGVycG9sYXRlLCBmYWxzZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApIHtcbiAgICB2YXIgb3V0cHV0LCBpbnB1dDtcbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgdmFyIGxpbmVhciA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gZDNfc2NhbGVfcG9seWxpbmVhciA6IGQzX3NjYWxlX2JpbGluZWFyLCB1bmludGVycG9sYXRlID0gY2xhbXAgPyBkM191bmludGVycG9sYXRlQ2xhbXAgOiBkM191bmludGVycG9sYXRlTnVtYmVyO1xuICAgICAgb3V0cHV0ID0gbGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKTtcbiAgICAgIGlucHV0ID0gbGluZWFyKHJhbmdlLCBkb21haW4sIHVuaW50ZXJwb2xhdGUsIGQzX2ludGVycG9sYXRlKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIG91dHB1dCh4KTtcbiAgICB9XG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIGlucHV0KHkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0geC5tYXAoTnVtYmVyKTtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuICAgICAgcmFuZ2UgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gc2NhbGUucmFuZ2UoeCkuaW50ZXJwb2xhdGUoZDNfaW50ZXJwb2xhdGVSb3VuZCk7XG4gICAgfTtcbiAgICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsYW1wO1xuICAgICAgY2xhbXAgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGU7XG4gICAgICBpbnRlcnBvbGF0ZSA9IHg7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihtLCBmb3JtYXQpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrRm9ybWF0KGRvbWFpbiwgbSwgZm9ybWF0KTtcbiAgICB9O1xuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihtKSB7XG4gICAgICBkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApO1xuICAgIH07XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcikge1xuICAgIHJldHVybiBkMy5yZWJpbmQoc2NhbGUsIGxpbmVhciwgXCJyYW5nZVwiLCBcInJhbmdlUm91bmRcIiwgXCJpbnRlcnBvbGF0ZVwiLCBcImNsYW1wXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhck5pY2UoZG9tYWluLCBtKSB7XG4gICAgZDNfc2NhbGVfbmljZShkb21haW4sIGQzX3NjYWxlX25pY2VTdGVwKGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pWzJdKSk7XG4gICAgZDNfc2NhbGVfbmljZShkb21haW4sIGQzX3NjYWxlX25pY2VTdGVwKGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pWzJdKSk7XG4gICAgcmV0dXJuIGRvbWFpbjtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKSB7XG4gICAgaWYgKG0gPT0gbnVsbCkgbSA9IDEwO1xuICAgIHZhciBleHRlbnQgPSBkM19zY2FsZUV4dGVudChkb21haW4pLCBzcGFuID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdLCBzdGVwID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3BhbiAvIG0pIC8gTWF0aC5MTjEwKSksIGVyciA9IG0gLyBzcGFuICogc3RlcDtcbiAgICBpZiAoZXJyIDw9IC4xNSkgc3RlcCAqPSAxMDsgZWxzZSBpZiAoZXJyIDw9IC4zNSkgc3RlcCAqPSA1OyBlbHNlIGlmIChlcnIgPD0gLjc1KSBzdGVwICo9IDI7XG4gICAgZXh0ZW50WzBdID0gTWF0aC5jZWlsKGV4dGVudFswXSAvIHN0ZXApICogc3RlcDtcbiAgICBleHRlbnRbMV0gPSBNYXRoLmZsb29yKGV4dGVudFsxXSAvIHN0ZXApICogc3RlcCArIHN0ZXAgKiAuNTtcbiAgICBleHRlbnRbMl0gPSBzdGVwO1xuICAgIHJldHVybiBleHRlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKSB7XG4gICAgcmV0dXJuIGQzLnJhbmdlLmFwcGx5KGQzLCBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCkge1xuICAgIHZhciByYW5nZSA9IGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pO1xuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIHZhciBtYXRjaCA9IGQzX2Zvcm1hdF9yZS5leGVjKGZvcm1hdCk7XG4gICAgICBtYXRjaC5zaGlmdCgpO1xuICAgICAgaWYgKG1hdGNoWzhdID09PSBcInNcIikge1xuICAgICAgICB2YXIgcHJlZml4ID0gZDMuZm9ybWF0UHJlZml4KE1hdGgubWF4KGFicyhyYW5nZVswXSksIGFicyhyYW5nZVsxXSkpKTtcbiAgICAgICAgaWYgKCFtYXRjaFs3XSkgbWF0Y2hbN10gPSBcIi5cIiArIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbihwcmVmaXguc2NhbGUocmFuZ2VbMl0pKTtcbiAgICAgICAgbWF0Y2hbOF0gPSBcImZcIjtcbiAgICAgICAgZm9ybWF0ID0gZDMuZm9ybWF0KG1hdGNoLmpvaW4oXCJcIikpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBmb3JtYXQocHJlZml4LnNjYWxlKGQpKSArIHByZWZpeC5zeW1ib2w7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoIW1hdGNoWzddKSBtYXRjaFs3XSA9IFwiLlwiICsgZDNfc2NhbGVfbGluZWFyRm9ybWF0UHJlY2lzaW9uKG1hdGNoWzhdLCByYW5nZSk7XG4gICAgICBmb3JtYXQgPSBtYXRjaC5qb2luKFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtYXQgPSBcIiwuXCIgKyBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24ocmFuZ2VbMl0pICsgXCJmXCI7XG4gICAgfVxuICAgIHJldHVybiBkMy5mb3JtYXQoZm9ybWF0KTtcbiAgfVxuICB2YXIgZDNfc2NhbGVfbGluZWFyRm9ybWF0U2lnbmlmaWNhbnQgPSB7XG4gICAgczogMSxcbiAgICBnOiAxLFxuICAgIHA6IDEsXG4gICAgcjogMSxcbiAgICBlOiAxXG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbih2YWx1ZSkge1xuICAgIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMTAgKyAuMDEpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbih0eXBlLCByYW5nZSkge1xuICAgIHZhciBwID0gZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKHJhbmdlWzJdKTtcbiAgICByZXR1cm4gdHlwZSBpbiBkM19zY2FsZV9saW5lYXJGb3JtYXRTaWduaWZpY2FudCA/IE1hdGguYWJzKHAgLSBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24oTWF0aC5tYXgoYWJzKHJhbmdlWzBdKSwgYWJzKHJhbmdlWzFdKSkpKSArICsodHlwZSAhPT0gXCJlXCIpIDogcCAtICh0eXBlID09PSBcIiVcIikgKiAyO1xuICB9XG4gIGQzLnNjYWxlLmxvZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9sb2coZDMuc2NhbGUubGluZWFyKCkuZG9tYWluKFsgMCwgMSBdKSwgMTAsIHRydWUsIFsgMSwgMTAgXSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xvZyhsaW5lYXIsIGJhc2UsIHBvc2l0aXZlLCBkb21haW4pIHtcbiAgICBmdW5jdGlvbiBsb2coeCkge1xuICAgICAgcmV0dXJuIChwb3NpdGl2ZSA/IE1hdGgubG9nKHggPCAwID8gMCA6IHgpIDogLU1hdGgubG9nKHggPiAwID8gMCA6IC14KSkgLyBNYXRoLmxvZyhiYXNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG93KHgpIHtcbiAgICAgIHJldHVybiBwb3NpdGl2ZSA/IE1hdGgucG93KGJhc2UsIHgpIDogLU1hdGgucG93KGJhc2UsIC14KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIGxpbmVhcihsb2coeCkpO1xuICAgIH1cbiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gcG93KGxpbmVhci5pbnZlcnQoeCkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgcG9zaXRpdmUgPSB4WzBdID49IDA7XG4gICAgICBsaW5lYXIuZG9tYWluKChkb21haW4gPSB4Lm1hcChOdW1iZXIpKS5tYXAobG9nKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYmFzZTtcbiAgICAgIGJhc2UgPSArXztcbiAgICAgIGxpbmVhci5kb21haW4oZG9tYWluLm1hcChsb2cpKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBuaWNlZCA9IGQzX3NjYWxlX25pY2UoZG9tYWluLm1hcChsb2cpLCBwb3NpdGl2ZSA/IE1hdGggOiBkM19zY2FsZV9sb2dOaWNlTmVnYXRpdmUpO1xuICAgICAgbGluZWFyLmRvbWFpbihuaWNlZCk7XG4gICAgICBkb21haW4gPSBuaWNlZC5tYXAocG93KTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSwgdGlja3MgPSBbXSwgdSA9IGV4dGVudFswXSwgdiA9IGV4dGVudFsxXSwgaSA9IE1hdGguZmxvb3IobG9nKHUpKSwgaiA9IE1hdGguY2VpbChsb2codikpLCBuID0gYmFzZSAlIDEgPyAyIDogYmFzZTtcbiAgICAgIGlmIChpc0Zpbml0ZShqIC0gaSkpIHtcbiAgICAgICAgaWYgKHBvc2l0aXZlKSB7XG4gICAgICAgICAgZm9yICg7aSA8IGo7IGkrKykgZm9yICh2YXIgayA9IDE7IGsgPCBuOyBrKyspIHRpY2tzLnB1c2gocG93KGkpICogayk7XG4gICAgICAgICAgdGlja3MucHVzaChwb3coaSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tzLnB1c2gocG93KGkpKTtcbiAgICAgICAgICBmb3IgKDtpKysgPCBqOyApIGZvciAodmFyIGsgPSBuIC0gMTsgayA+IDA7IGstLSkgdGlja3MucHVzaChwb3coaSkgKiBrKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyB0aWNrc1tpXSA8IHU7IGkrKykge31cbiAgICAgICAgZm9yIChqID0gdGlja3MubGVuZ3RoOyB0aWNrc1tqIC0gMV0gPiB2OyBqLS0pIHt9XG4gICAgICAgIHRpY2tzID0gdGlja3Muc2xpY2UoaSwgaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGlja3M7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obiwgZm9ybWF0KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkM19zY2FsZV9sb2dGb3JtYXQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGZvcm1hdCA9IGQzX3NjYWxlX2xvZ0Zvcm1hdDsgZWxzZSBpZiAodHlwZW9mIGZvcm1hdCAhPT0gXCJmdW5jdGlvblwiKSBmb3JtYXQgPSBkMy5mb3JtYXQoZm9ybWF0KTtcbiAgICAgIHZhciBrID0gTWF0aC5tYXgoMSwgYmFzZSAqIG4gLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgaSA9IGQgLyBwb3coTWF0aC5yb3VuZChsb2coZCkpKTtcbiAgICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIC41KSBpICo9IGJhc2U7XG4gICAgICAgIHJldHVybiBpIDw9IGsgPyBmb3JtYXQoZCkgOiBcIlwiO1xuICAgICAgfTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9sb2cobGluZWFyLmNvcHkoKSwgYmFzZSwgcG9zaXRpdmUsIGRvbWFpbik7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpO1xuICB9XG4gIHZhciBkM19zY2FsZV9sb2dGb3JtYXQgPSBkMy5mb3JtYXQoXCIuMGVcIiksIGQzX3NjYWxlX2xvZ05pY2VOZWdhdGl2ZSA9IHtcbiAgICBmbG9vcjogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmNlaWwoLXgpO1xuICAgIH0sXG4gICAgY2VpbDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmZsb29yKC14KTtcbiAgICB9XG4gIH07XG4gIGQzLnNjYWxlLnBvdyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9wb3coZDMuc2NhbGUubGluZWFyKCksIDEsIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfcG93KGxpbmVhciwgZXhwb25lbnQsIGRvbWFpbikge1xuICAgIHZhciBwb3dwID0gZDNfc2NhbGVfcG93UG93KGV4cG9uZW50KSwgcG93YiA9IGQzX3NjYWxlX3Bvd1BvdygxIC8gZXhwb25lbnQpO1xuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIocG93cCh4KSk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBwb3diKGxpbmVhci5pbnZlcnQoeCkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgbGluZWFyLmRvbWFpbigoZG9tYWluID0geC5tYXAoTnVtYmVyKSkubWFwKHBvd3ApKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG4gICAgfTtcbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSkpO1xuICAgIH07XG4gICAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBleHBvbmVudDtcbiAgICAgIHBvd3AgPSBkM19zY2FsZV9wb3dQb3coZXhwb25lbnQgPSB4KTtcbiAgICAgIHBvd2IgPSBkM19zY2FsZV9wb3dQb3coMSAvIGV4cG9uZW50KTtcbiAgICAgIGxpbmVhci5kb21haW4oZG9tYWluLm1hcChwb3dwKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcG93KGxpbmVhci5jb3B5KCksIGV4cG9uZW50LCBkb21haW4pO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9wb3dQb3coZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGUpIDogTWF0aC5wb3coeCwgZSk7XG4gICAgfTtcbiAgfVxuICBkMy5zY2FsZS5zcXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnNjYWxlLnBvdygpLmV4cG9uZW50KC41KTtcbiAgfTtcbiAgZDMuc2NhbGUub3JkaW5hbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9vcmRpbmFsKFtdLCB7XG4gICAgICB0OiBcInJhbmdlXCIsXG4gICAgICBhOiBbIFtdIF1cbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfb3JkaW5hbChkb21haW4sIHJhbmdlcikge1xuICAgIHZhciBpbmRleCwgcmFuZ2UsIHJhbmdlQmFuZDtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gcmFuZ2VbKChpbmRleC5nZXQoeCkgfHwgKHJhbmdlci50ID09PSBcInJhbmdlXCIgPyBpbmRleC5zZXQoeCwgZG9tYWluLnB1c2goeCkpIDogTmFOKSkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0ZXBzKHN0YXJ0LCBzdGVwKSB7XG4gICAgICByZXR1cm4gZDMucmFuZ2UoZG9tYWluLmxlbmd0aCkubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0gW107XG4gICAgICBpbmRleCA9IG5ldyBkM19NYXAoKTtcbiAgICAgIHZhciBpID0gLTEsIG4gPSB4Lmxlbmd0aCwgeGk7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoeGkgPSB4W2ldKSkgaW5kZXguc2V0KHhpLCBkb21haW4ucHVzaCh4aSkpO1xuICAgICAgcmV0dXJuIHNjYWxlW3Jhbmdlci50XS5hcHBseShzY2FsZSwgcmFuZ2VyLmEpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJhbmdlQmFuZCA9IDA7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VQb2ludHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuICAgICAgdmFyIHN0YXJ0ID0geFswXSwgc3RvcCA9IHhbMV0sIHN0ZXAgPSBkb21haW4ubGVuZ3RoIDwgMiA/IChzdGFydCA9IChzdGFydCArIHN0b3ApIC8gMiwgXG4gICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZyk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgc3RlcCAqIHBhZGRpbmcgLyAyLCBzdGVwKTtcbiAgICAgIHJhbmdlQmFuZCA9IDA7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VQb2ludHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VSb3VuZFBvaW50cyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICB2YXIgc3RhcnQgPSB4WzBdLCBzdG9wID0geFsxXSwgc3RlcCA9IGRvbWFpbi5sZW5ndGggPCAyID8gKHN0YXJ0ID0gc3RvcCA9IE1hdGgucm91bmQoKHN0YXJ0ICsgc3RvcCkgLyAyKSwgXG4gICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZykgfCAwO1xuICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIE1hdGgucm91bmQoc3RlcCAqIHBhZGRpbmcgLyAyICsgKHN0b3AgLSBzdGFydCAtIChkb21haW4ubGVuZ3RoIC0gMSArIHBhZGRpbmcpICogc3RlcCkgLyAyKSwgc3RlcCk7XG4gICAgICByYW5nZUJhbmQgPSAwO1xuICAgICAgcmFuZ2VyID0ge1xuICAgICAgICB0OiBcInJhbmdlUm91bmRQb2ludHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VCYW5kcyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcsIG91dGVyUGFkZGluZykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwYWRkaW5nID0gMDtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgb3V0ZXJQYWRkaW5nID0gcGFkZGluZztcbiAgICAgIHZhciByZXZlcnNlID0geFsxXSA8IHhbMF0sIHN0YXJ0ID0geFtyZXZlcnNlIC0gMF0sIHN0b3AgPSB4WzEgLSByZXZlcnNlXSwgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSBwYWRkaW5nICsgMiAqIG91dGVyUGFkZGluZyk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgc3RlcCAqIG91dGVyUGFkZGluZywgc3RlcCk7XG4gICAgICBpZiAocmV2ZXJzZSkgcmFuZ2UucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2VCYW5kID0gc3RlcCAqICgxIC0gcGFkZGluZyk7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VCYW5kc1wiLFxuICAgICAgICBhOiBhcmd1bWVudHNcbiAgICAgIH07XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZVJvdW5kQmFuZHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nLCBvdXRlclBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIG91dGVyUGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICB2YXIgcmV2ZXJzZSA9IHhbMV0gPCB4WzBdLCBzdGFydCA9IHhbcmV2ZXJzZSAtIDBdLCBzdG9wID0geFsxIC0gcmV2ZXJzZV0sIHN0ZXAgPSBNYXRoLmZsb29yKChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSBwYWRkaW5nICsgMiAqIG91dGVyUGFkZGluZykpO1xuICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIE1hdGgucm91bmQoKHN0b3AgLSBzdGFydCAtIChkb21haW4ubGVuZ3RoIC0gcGFkZGluZykgKiBzdGVwKSAvIDIpLCBzdGVwKTtcbiAgICAgIGlmIChyZXZlcnNlKSByYW5nZS5yZXZlcnNlKCk7XG4gICAgICByYW5nZUJhbmQgPSBNYXRoLnJvdW5kKHN0ZXAgKiAoMSAtIHBhZGRpbmcpKTtcbiAgICAgIHJhbmdlciA9IHtcbiAgICAgICAgdDogXCJyYW5nZVJvdW5kQmFuZHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VCYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmFuZ2VCYW5kO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VFeHRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZUV4dGVudChyYW5nZXIuYVswXSk7XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfb3JkaW5hbChkb21haW4sIHJhbmdlcik7XG4gICAgfTtcbiAgICByZXR1cm4gc2NhbGUuZG9tYWluKGRvbWFpbik7XG4gIH1cbiAgZDMuc2NhbGUuY2F0ZWdvcnkxMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkxMCk7XG4gIH07XG4gIGQzLnNjYWxlLmNhdGVnb3J5MjAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MjApO1xuICB9O1xuICBkMy5zY2FsZS5jYXRlZ29yeTIwYiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMGIpO1xuICB9O1xuICBkMy5zY2FsZS5jYXRlZ29yeTIwYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMGMpO1xuICB9O1xuICB2YXIgZDNfY2F0ZWdvcnkxMCA9IFsgMjA2MjI2MCwgMTY3NDQyMDYsIDI5MjQ1ODgsIDE0MDM0NzI4LCA5NzI1ODg1LCA5MTk3MTMxLCAxNDkwNzMzMCwgODM1NTcxMSwgMTIzNjkxODYsIDE1NTYxNzUgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgdmFyIGQzX2NhdGVnb3J5MjAgPSBbIDIwNjIyNjAsIDExNDU0NDQwLCAxNjc0NDIwNiwgMTY3NTk2NzIsIDI5MjQ1ODgsIDEwMDE4Njk4LCAxNDAzNDcyOCwgMTY3NTA3NDIsIDk3MjU4ODUsIDEyOTU1ODYxLCA5MTk3MTMxLCAxMjg4NTE0MCwgMTQ5MDczMzAsIDE2MjM0MTk0LCA4MzU1NzExLCAxMzA5MjgwNywgMTIzNjkxODYsIDE0NDA4NTg5LCAxNTU2MTc1LCAxMDQxMDcyNSBdLm1hcChkM19yZ2JTdHJpbmcpO1xuICB2YXIgZDNfY2F0ZWdvcnkyMGIgPSBbIDM3NTA3NzcsIDUzOTU2MTksIDcwNDA3MTksIDEwMjY0Mjg2LCA2NTE5MDk3LCA5MjE2NTk0LCAxMTkxNTExNSwgMTM1NTY2MzYsIDkyMDI5OTMsIDEyNDI2ODA5LCAxNTE4NjUxNCwgMTUxOTA5MzIsIDg2NjYxNjksIDExMzU2NDkwLCAxNDA0OTY0MywgMTUxNzczNzIsIDgwNzc2ODMsIDEwODM0MzI0LCAxMzUyODUwOSwgMTQ1ODk2NTQgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgdmFyIGQzX2NhdGVnb3J5MjBjID0gWyAzMjQ0NzMzLCA3MDU3MTEwLCAxMDQwNjYyNSwgMTMwMzI0MzEsIDE1MDk1MDUzLCAxNjYxNjc2NCwgMTY2MjUyNTksIDE2NjM0MDE4LCAzMjUzMDc2LCA3NjUyNDcwLCAxMDYwNzAwMywgMTMxMDE1MDQsIDc2OTUyODEsIDEwMzk0MzEyLCAxMjM2OTM3MiwgMTQzNDI4OTEsIDY1MTM1MDcsIDk4Njg5NTAsIDEyNDM0ODc3LCAxNDI3NzA4MSBdLm1hcChkM19yZ2JTdHJpbmcpO1xuICBkMy5zY2FsZS5xdWFudGlsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9xdWFudGlsZShbXSwgW10pO1xuICB9O1xuICBmdW5jdGlvbiBkM19zY2FsZV9xdWFudGlsZShkb21haW4sIHJhbmdlKSB7XG4gICAgdmFyIHRocmVzaG9sZHM7XG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIHZhciBrID0gMCwgcSA9IHJhbmdlLmxlbmd0aDtcbiAgICAgIHRocmVzaG9sZHMgPSBbXTtcbiAgICAgIHdoaWxlICgrK2sgPCBxKSB0aHJlc2hvbGRzW2sgLSAxXSA9IGQzLnF1YW50aWxlKGRvbWFpbiwgayAvIHEpO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtkMy5iaXNlY3QodGhyZXNob2xkcywgeCldO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG4gICAgICBkb21haW4gPSB4Lm1hcChkM19udW1iZXIpLmZpbHRlcihkM19udW1lcmljKS5zb3J0KGQzX2FzY2VuZGluZyk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aHJlc2hvbGRzO1xuICAgIH07XG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICByZXR1cm4geSA8IDAgPyBbIE5hTiwgTmFOIF0gOiBbIHkgPiAwID8gdGhyZXNob2xkc1t5IC0gMV0gOiBkb21haW5bMF0sIHkgPCB0aHJlc2hvbGRzLmxlbmd0aCA/IHRocmVzaG9sZHNbeV0gOiBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdIF07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcXVhbnRpbGUoZG9tYWluLCByYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9XG4gIGQzLnNjYWxlLnF1YW50aXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aXplKDAsIDEsIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfcXVhbnRpemUoeDAsIHgxLCByYW5nZSkge1xuICAgIHZhciBreCwgaTtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4oaSwgTWF0aC5mbG9vcihreCAqICh4IC0geDApKSkpXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIGt4ID0gcmFuZ2UubGVuZ3RoIC8gKHgxIC0geDApO1xuICAgICAgaSA9IHJhbmdlLmxlbmd0aCAtIDE7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgeDAsIHgxIF07XG4gICAgICB4MCA9ICt4WzBdO1xuICAgICAgeDEgPSAreFt4Lmxlbmd0aCAtIDFdO1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG4gICAgICByYW5nZSA9IHg7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICB5ID0geSA8IDAgPyBOYU4gOiB5IC8ga3ggKyB4MDtcbiAgICAgIHJldHVybiBbIHksIHkgKyAxIC8ga3ggXTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9xdWFudGl6ZSh4MCwgeDEsIHJhbmdlKTtcbiAgICB9O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cbiAgZDMuc2NhbGUudGhyZXNob2xkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX3RocmVzaG9sZChbIC41IF0sIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfdGhyZXNob2xkKGRvbWFpbiwgcmFuZ2UpIHtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbZDMuYmlzZWN0KGRvbWFpbiwgeCldO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG4gICAgICBkb21haW4gPSBfO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0gXztcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgICAgcmV0dXJuIFsgZG9tYWluW3kgLSAxXSwgZG9tYWluW3ldIF07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfdGhyZXNob2xkKGRvbWFpbiwgcmFuZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG4gIGQzLnNjYWxlLmlkZW50aXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX2lkZW50aXR5KFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfaWRlbnRpdHkoZG9tYWluKSB7XG4gICAgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgICAgcmV0dXJuICt4O1xuICAgIH1cbiAgICBpZGVudGl0eS5pbnZlcnQgPSBpZGVudGl0eTtcbiAgICBpZGVudGl0eS5kb21haW4gPSBpZGVudGl0eS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcbiAgICAgIGRvbWFpbiA9IHgubWFwKGlkZW50aXR5KTtcbiAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9O1xuICAgIGlkZW50aXR5LnRpY2tzID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG4gICAgfTtcbiAgICBpZGVudGl0eS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG4gICAgfTtcbiAgICBpZGVudGl0eS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfaWRlbnRpdHkoZG9tYWluKTtcbiAgICB9O1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBkMy5zdmcgPSB7fTtcbiAgZnVuY3Rpb24gZDNfemVybygpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBkMy5zdmcuYXJjID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlubmVyUmFkaXVzID0gZDNfc3ZnX2FyY0lubmVyUmFkaXVzLCBvdXRlclJhZGl1cyA9IGQzX3N2Z19hcmNPdXRlclJhZGl1cywgY29ybmVyUmFkaXVzID0gZDNfemVybywgcGFkUmFkaXVzID0gZDNfc3ZnX2FyY0F1dG8sIHN0YXJ0QW5nbGUgPSBkM19zdmdfYXJjU3RhcnRBbmdsZSwgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGUsIHBhZEFuZ2xlID0gZDNfc3ZnX2FyY1BhZEFuZ2xlO1xuICAgIGZ1bmN0aW9uIGFyYygpIHtcbiAgICAgIHZhciByMCA9IE1hdGgubWF4KDAsICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgcjEgPSBNYXRoLm1heCgwLCArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZs+ALCBhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmz4AsIGRhID0gTWF0aC5hYnMoYTEgLSBhMCksIGN3ID0gYTAgPiBhMSA/IDAgOiAxO1xuICAgICAgaWYgKHIxIDwgcjApIHJjID0gcjEsIHIxID0gcjAsIHIwID0gcmM7XG4gICAgICBpZiAoZGEgPj0gz4TOtSkgcmV0dXJuIGNpcmNsZVNlZ21lbnQocjEsIGN3KSArIChyMCA/IGNpcmNsZVNlZ21lbnQocjAsIDEgLSBjdykgOiBcIlwiKSArIFwiWlwiO1xuICAgICAgdmFyIHJjLCBjciwgcnAsIGFwLCBwMCA9IDAsIHAxID0gMCwgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCBwYXRoID0gW107XG4gICAgICBpZiAoYXAgPSAoK3BhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMCkgLyAyKSB7XG4gICAgICAgIHJwID0gcGFkUmFkaXVzID09PSBkM19zdmdfYXJjQXV0byA/IE1hdGguc3FydChyMCAqIHIwICsgcjEgKiByMSkgOiArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICghY3cpIHAxICo9IC0xO1xuICAgICAgICBpZiAocjEpIHAxID0gZDNfYXNpbihycCAvIHIxICogTWF0aC5zaW4oYXApKTtcbiAgICAgICAgaWYgKHIwKSBwMCA9IGQzX2FzaW4ocnAgLyByMCAqIE1hdGguc2luKGFwKSk7XG4gICAgICB9XG4gICAgICBpZiAocjEpIHtcbiAgICAgICAgeDAgPSByMSAqIE1hdGguY29zKGEwICsgcDEpO1xuICAgICAgICB5MCA9IHIxICogTWF0aC5zaW4oYTAgKyBwMSk7XG4gICAgICAgIHgxID0gcjEgKiBNYXRoLmNvcyhhMSAtIHAxKTtcbiAgICAgICAgeTEgPSByMSAqIE1hdGguc2luKGExIC0gcDEpO1xuICAgICAgICB2YXIgbDEgPSBNYXRoLmFicyhhMSAtIGEwIC0gMiAqIHAxKSA8PSDPgCA/IDAgOiAxO1xuICAgICAgICBpZiAocDEgJiYgZDNfc3ZnX2FyY1N3ZWVwKHgwLCB5MCwgeDEsIHkxKSA9PT0gY3cgXiBsMSkge1xuICAgICAgICAgIHZhciBoMSA9IChhMCArIGExKSAvIDI7XG4gICAgICAgICAgeDAgPSByMSAqIE1hdGguY29zKGgxKTtcbiAgICAgICAgICB5MCA9IHIxICogTWF0aC5zaW4oaDEpO1xuICAgICAgICAgIHgxID0geTEgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MCA9IHkwID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChyMCkge1xuICAgICAgICB4MiA9IHIwICogTWF0aC5jb3MoYTEgLSBwMCk7XG4gICAgICAgIHkyID0gcjAgKiBNYXRoLnNpbihhMSAtIHAwKTtcbiAgICAgICAgeDMgPSByMCAqIE1hdGguY29zKGEwICsgcDApO1xuICAgICAgICB5MyA9IHIwICogTWF0aC5zaW4oYTAgKyBwMCk7XG4gICAgICAgIHZhciBsMCA9IE1hdGguYWJzKGEwIC0gYTEgKyAyICogcDApIDw9IM+AID8gMCA6IDE7XG4gICAgICAgIGlmIChwMCAmJiBkM19zdmdfYXJjU3dlZXAoeDIsIHkyLCB4MywgeTMpID09PSAxIC0gY3cgXiBsMCkge1xuICAgICAgICAgIHZhciBoMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgICAgeDIgPSByMCAqIE1hdGguY29zKGgwKTtcbiAgICAgICAgICB5MiA9IHIwICogTWF0aC5zaW4oaDApO1xuICAgICAgICAgIHgzID0geTMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHkyID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChkYSA+IM61ICYmIChyYyA9IE1hdGgubWluKE1hdGguYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSkgPiAuMDAxKSB7XG4gICAgICAgIGNyID0gcjAgPCByMSBeIGN3ID8gMCA6IDE7XG4gICAgICAgIHZhciByYzEgPSByYywgcmMwID0gcmM7XG4gICAgICAgIGlmIChkYSA8IM+AKSB7XG4gICAgICAgICAgdmFyIG9jID0geDMgPT0gbnVsbCA/IFsgeDIsIHkyIF0gOiB4MSA9PSBudWxsID8gWyB4MCwgeTAgXSA6IGQzX2dlb21fcG9seWdvbkludGVyc2VjdChbIHgwLCB5MCBdLCBbIHgzLCB5MyBdLCBbIHgxLCB5MSBdLCBbIHgyLCB5MiBdKSwgYXggPSB4MCAtIG9jWzBdLCBheSA9IHkwIC0gb2NbMV0sIGJ4ID0geDEgLSBvY1swXSwgYnkgPSB5MSAtIG9jWzFdLCBrYyA9IDEgLyBNYXRoLnNpbihNYXRoLmFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChNYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkpICogTWF0aC5zcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksIGxjID0gTWF0aC5zcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICByYzAgPSBNYXRoLm1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgIHJjMSA9IE1hdGgubWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHgxICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgdDMwID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKHgzID09IG51bGwgPyBbIHgyLCB5MiBdIDogWyB4MywgeTMgXSwgWyB4MCwgeTAgXSwgcjEsIHJjMSwgY3cpLCB0MTIgPSBkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMoWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICAgIGlmIChyYyA9PT0gcmMxKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQzMFsxXSwgXCJBXCIsIHIxLCBcIixcIiwgcjEsIFwiIDAgXCIsIDEgLSBjdyBeIGQzX3N2Z19hcmNTd2VlcCh0MzBbMV1bMF0sIHQzMFsxXVsxXSwgdDEyWzFdWzBdLCB0MTJbMV1bMV0pLCBcIixcIiwgY3csIFwiIFwiLCB0MTJbMV0sIFwiQVwiLCByYzEsIFwiLFwiLCByYzEsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MTJbMF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAxLFwiLCBjciwgXCIgXCIsIHQxMlswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGgucHVzaChcIk1cIiwgeDAsIFwiLFwiLCB5MCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHgzICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgdDAzID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKFsgeDAsIHkwIF0sIFsgeDMsIHkzIF0sIHIwLCAtcmMwLCBjdyksIHQyMSA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhbIHgyLCB5MiBdLCB4MSA9PSBudWxsID8gWyB4MCwgeTAgXSA6IFsgeDEsIHkxIF0sIHIwLCAtcmMwLCBjdyk7XG4gICAgICAgICAgaWYgKHJjID09PSByYzApIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgdDIxWzBdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDIxWzFdLCBcIkFcIiwgcjAsIFwiLFwiLCByMCwgXCIgMCBcIiwgY3cgXiBkM19zdmdfYXJjU3dlZXAodDIxWzFdWzBdLCB0MjFbMV1bMV0sIHQwM1sxXVswXSwgdDAzWzFdWzFdKSwgXCIsXCIsIDEgLSBjdywgXCIgXCIsIHQwM1sxXSwgXCJBXCIsIHJjMCwgXCIsXCIsIHJjMCwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQwM1swXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgdDIxWzBdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDAzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB4MiwgXCIsXCIsIHkyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0aC5wdXNoKFwiTVwiLCB4MCwgXCIsXCIsIHkwKTtcbiAgICAgICAgaWYgKHgxICE9IG51bGwpIHBhdGgucHVzaChcIkFcIiwgcjEsIFwiLFwiLCByMSwgXCIgMCBcIiwgbDEsIFwiLFwiLCBjdywgXCIgXCIsIHgxLCBcIixcIiwgeTEpO1xuICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHgyLCBcIixcIiwgeTIpO1xuICAgICAgICBpZiAoeDMgIT0gbnVsbCkgcGF0aC5wdXNoKFwiQVwiLCByMCwgXCIsXCIsIHIwLCBcIiAwIFwiLCBsMCwgXCIsXCIsIDEgLSBjdywgXCIgXCIsIHgzLCBcIixcIiwgeTMpO1xuICAgICAgfVxuICAgICAgcGF0aC5wdXNoKFwiWlwiKTtcbiAgICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNpcmNsZVNlZ21lbnQocjEsIGN3KSB7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIHIxICsgXCJBXCIgKyByMSArIFwiLFwiICsgcjEgKyBcIiAwIDEsXCIgKyBjdyArIFwiIDAsXCIgKyAtcjEgKyBcIkFcIiArIHIxICsgXCIsXCIgKyByMSArIFwiIDAgMSxcIiArIGN3ICsgXCIgMCxcIiArIHIxO1xuICAgIH1cbiAgICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbm5lclJhZGl1cztcbiAgICAgIGlubmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMub3V0ZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvdXRlclJhZGl1cztcbiAgICAgIG91dGVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29ybmVyUmFkaXVzO1xuICAgICAgY29ybmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkUmFkaXVzO1xuICAgICAgcGFkUmFkaXVzID0gdiA9PSBkM19zdmdfYXJjQXV0byA/IGQzX3N2Z19hcmNBdXRvIDogZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG4gICAgICBzdGFydEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcbiAgICAgIGVuZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcbiAgICAgIHBhZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiwgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiAtIGhhbGbPgDtcbiAgICAgIHJldHVybiBbIE1hdGguY29zKGEpICogciwgTWF0aC5zaW4oYSkgKiByIF07XG4gICAgfTtcbiAgICByZXR1cm4gYXJjO1xuICB9O1xuICB2YXIgZDNfc3ZnX2FyY0F1dG8gPSBcImF1dG9cIjtcbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY0lubmVyUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gZC5pbm5lclJhZGl1cztcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfYXJjT3V0ZXJSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLm91dGVyUmFkaXVzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNTdGFydEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNFbmRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQuZW5kQW5nbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY1BhZEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNTd2VlcCh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHJldHVybiAoeDAgLSB4MSkgKiB5MCAtICh5MCAtIHkxKSAqIHgwID4gMCA/IDAgOiAxO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhwMCwgcDEsIHIxLCByYywgY3cpIHtcbiAgICB2YXIgeDAxID0gcDBbMF0gLSBwMVswXSwgeTAxID0gcDBbMV0gLSBwMVsxXSwgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBNYXRoLnNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSwgb3ggPSBsbyAqIHkwMSwgb3kgPSAtbG8gKiB4MDEsIHgxID0gcDBbMF0gKyBveCwgeTEgPSBwMFsxXSArIG95LCB4MiA9IHAxWzBdICsgb3gsIHkyID0gcDFbMV0gKyBveSwgeDMgPSAoeDEgKyB4MikgLyAyLCB5MyA9ICh5MSArIHkyKSAvIDIsIGR4ID0geDIgLSB4MSwgZHkgPSB5MiAtIHkxLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5LCByID0gcjEgLSByYywgRCA9IHgxICogeTIgLSB4MiAqIHkxLCBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLCBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLCBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMiwgZHgwID0gY3gwIC0geDMsIGR5MCA9IGN5MCAtIHkzLCBkeDEgPSBjeDEgLSB4MywgZHkxID0gY3kxIC0geTM7XG4gICAgaWYgKGR4MCAqIGR4MCArIGR5MCAqIGR5MCA+IGR4MSAqIGR4MSArIGR5MSAqIGR5MSkgY3gwID0gY3gxLCBjeTAgPSBjeTE7XG4gICAgcmV0dXJuIFsgWyBjeDAgLSBveCwgY3kwIC0gb3kgXSwgWyBjeDAgKiByMSAvIHIsIGN5MCAqIHIxIC8gciBdIF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmUocHJvamVjdGlvbikge1xuICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WSwgZGVmaW5lZCA9IGQzX3RydWUsIGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVMaW5lYXIsIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUua2V5LCB0ZW5zaW9uID0gLjc7XG4gICAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgICB2YXIgc2VnbWVudHMgPSBbXSwgcG9pbnRzID0gW10sIGkgPSAtMSwgbiA9IGRhdGEubGVuZ3RoLCBkLCBmeCA9IGQzX2Z1bmN0b3IoeCksIGZ5ID0gZDNfZnVuY3Rvcih5KTtcbiAgICAgIGZ1bmN0aW9uIHNlZ21lbnQoKSB7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goXCJNXCIsIGludGVycG9sYXRlKHByb2plY3Rpb24ocG9pbnRzKSwgdGVuc2lvbikpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcbiAgICAgICAgICBwb2ludHMucHVzaChbICtmeC5jYWxsKHRoaXMsIGQsIGkpLCArZnkuY2FsbCh0aGlzLCBkLCBpKSBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgc2VnbWVudCgpO1xuICAgICAgICAgIHBvaW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCkgc2VnbWVudCgpO1xuICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzLmpvaW4oXCJcIikgOiBudWxsO1xuICAgIH1cbiAgICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4O1xuICAgICAgeCA9IF87XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHk7XG4gICAgICB5ID0gXztcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGVmaW5lZDtcbiAgICAgIGRlZmluZWQgPSBfO1xuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfTtcbiAgICBsaW5lLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGVLZXk7XG4gICAgICBpZiAodHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIikgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZSA9IF87IGVsc2UgaW50ZXJwb2xhdGVLZXkgPSAoaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUludGVycG9sYXRvcnMuZ2V0KF8pIHx8IGQzX3N2Z19saW5lTGluZWFyKS5rZXk7XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIGxpbmUudGVuc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRlbnNpb247XG4gICAgICB0ZW5zaW9uID0gXztcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgcmV0dXJuIGxpbmU7XG4gIH1cbiAgZDMuc3ZnLmxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc3ZnX2xpbmUoZDNfaWRlbnRpdHkpO1xuICB9O1xuICB2YXIgZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzID0gZDMubWFwKHtcbiAgICBsaW5lYXI6IGQzX3N2Z19saW5lTGluZWFyLFxuICAgIFwibGluZWFyLWNsb3NlZFwiOiBkM19zdmdfbGluZUxpbmVhckNsb3NlZCxcbiAgICBzdGVwOiBkM19zdmdfbGluZVN0ZXAsXG4gICAgXCJzdGVwLWJlZm9yZVwiOiBkM19zdmdfbGluZVN0ZXBCZWZvcmUsXG4gICAgXCJzdGVwLWFmdGVyXCI6IGQzX3N2Z19saW5lU3RlcEFmdGVyLFxuICAgIGJhc2lzOiBkM19zdmdfbGluZUJhc2lzLFxuICAgIFwiYmFzaXMtb3BlblwiOiBkM19zdmdfbGluZUJhc2lzT3BlbixcbiAgICBcImJhc2lzLWNsb3NlZFwiOiBkM19zdmdfbGluZUJhc2lzQ2xvc2VkLFxuICAgIGJ1bmRsZTogZDNfc3ZnX2xpbmVCdW5kbGUsXG4gICAgY2FyZGluYWw6IGQzX3N2Z19saW5lQ2FyZGluYWwsXG4gICAgXCJjYXJkaW5hbC1vcGVuXCI6IGQzX3N2Z19saW5lQ2FyZGluYWxPcGVuLFxuICAgIFwiY2FyZGluYWwtY2xvc2VkXCI6IGQzX3N2Z19saW5lQ2FyZGluYWxDbG9zZWQsXG4gICAgbW9ub3RvbmU6IGQzX3N2Z19saW5lTW9ub3RvbmVcbiAgfSk7XG4gIGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB2YWx1ZS5rZXkgPSBrZXk7XG4gICAgdmFsdWUuY2xvc2VkID0gLy1jbG9zZWQkLy50ZXN0KGtleSk7XG4gIH0pO1xuICBmdW5jdGlvbiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA+IDEgPyBwb2ludHMuam9pbihcIkxcIikgOiBwb2ludHMgKyBcIlpcIjtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUxpbmVhckNsb3NlZChwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmpvaW4oXCJMXCIpICsgXCJaXCI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTdGVwKHBvaW50cykge1xuICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sIFwiLFwiLCBwWzFdIF07XG4gICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaChcIkhcIiwgKHBbMF0gKyAocCA9IHBvaW50c1tpXSlbMF0pIC8gMiwgXCJWXCIsIHBbMV0pO1xuICAgIGlmIChuID4gMSkgcGF0aC5wdXNoKFwiSFwiLCBwWzBdKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcEJlZm9yZShwb2ludHMpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoLCBwID0gcG9pbnRzWzBdLCBwYXRoID0gWyBwWzBdLCBcIixcIiwgcFsxXSBdO1xuICAgIHdoaWxlICgrK2kgPCBuKSBwYXRoLnB1c2goXCJWXCIsIChwID0gcG9pbnRzW2ldKVsxXSwgXCJIXCIsIHBbMF0pO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTdGVwQWZ0ZXIocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aCwgcCA9IHBvaW50c1swXSwgcGF0aCA9IFsgcFswXSwgXCIsXCIsIHBbMV0gXTtcbiAgICB3aGlsZSAoKytpIDwgbikgcGF0aC5wdXNoKFwiSFwiLCAocCA9IHBvaW50c1tpXSlbMF0sIFwiVlwiLCBwWzFdKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxPcGVuKHBvaW50cywgdGVuc2lvbikge1xuICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgNCA/IGQzX3N2Z19saW5lTGluZWFyKHBvaW50cykgOiBwb2ludHNbMV0gKyBkM19zdmdfbGluZUhlcm1pdGUocG9pbnRzLnNsaWNlKDEsIC0xKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxDbG9zZWQocG9pbnRzLCB0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXJDbG9zZWQocG9pbnRzKSA6IHBvaW50c1swXSArIGQzX3N2Z19saW5lSGVybWl0ZSgocG9pbnRzLnB1c2gocG9pbnRzWzBdKSwgXG4gICAgcG9pbnRzKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKFsgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXSBdLmNvbmNhdChwb2ludHMsIFsgcG9pbnRzWzFdIF0pLCB0ZW5zaW9uKSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVDYXJkaW5hbChwb2ludHMsIHRlbnNpb24pIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMsIHRhbmdlbnRzKSB7XG4gICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA8IDEgfHwgcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGggJiYgcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGggKyAyKSB7XG4gICAgICByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB9XG4gICAgdmFyIHF1YWQgPSBwb2ludHMubGVuZ3RoICE9IHRhbmdlbnRzLmxlbmd0aCwgcGF0aCA9IFwiXCIsIHAwID0gcG9pbnRzWzBdLCBwID0gcG9pbnRzWzFdLCB0MCA9IHRhbmdlbnRzWzBdLCB0ID0gdDAsIHBpID0gMTtcbiAgICBpZiAocXVhZCkge1xuICAgICAgcGF0aCArPSBcIlFcIiArIChwWzBdIC0gdDBbMF0gKiAyIC8gMykgKyBcIixcIiArIChwWzFdIC0gdDBbMV0gKiAyIC8gMykgKyBcIixcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICBwMCA9IHBvaW50c1sxXTtcbiAgICAgIHBpID0gMjtcbiAgICB9XG4gICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHQgPSB0YW5nZW50c1sxXTtcbiAgICAgIHAgPSBwb2ludHNbcGldO1xuICAgICAgcGkrKztcbiAgICAgIHBhdGggKz0gXCJDXCIgKyAocDBbMF0gKyB0MFswXSkgKyBcIixcIiArIChwMFsxXSArIHQwWzFdKSArIFwiLFwiICsgKHBbMF0gLSB0WzBdKSArIFwiLFwiICsgKHBbMV0gLSB0WzFdKSArIFwiLFwiICsgcFswXSArIFwiLFwiICsgcFsxXTtcbiAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgdGFuZ2VudHMubGVuZ3RoOyBpKyssIHBpKyspIHtcbiAgICAgICAgcCA9IHBvaW50c1twaV07XG4gICAgICAgIHQgPSB0YW5nZW50c1tpXTtcbiAgICAgICAgcGF0aCArPSBcIlNcIiArIChwWzBdIC0gdFswXSkgKyBcIixcIiArIChwWzFdIC0gdFsxXSkgKyBcIixcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxdWFkKSB7XG4gICAgICB2YXIgbHAgPSBwb2ludHNbcGldO1xuICAgICAgcGF0aCArPSBcIlFcIiArIChwWzBdICsgdFswXSAqIDIgLyAzKSArIFwiLFwiICsgKHBbMV0gKyB0WzFdICogMiAvIDMpICsgXCIsXCIgKyBscFswXSArIFwiLFwiICsgbHBbMV07XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhwb2ludHMsIHRlbnNpb24pIHtcbiAgICB2YXIgdGFuZ2VudHMgPSBbXSwgYSA9ICgxIC0gdGVuc2lvbikgLyAyLCBwMCwgcDEgPSBwb2ludHNbMF0sIHAyID0gcG9pbnRzWzFdLCBpID0gMSwgbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHAwID0gcDE7XG4gICAgICBwMSA9IHAyO1xuICAgICAgcDIgPSBwb2ludHNbaV07XG4gICAgICB0YW5nZW50cy5wdXNoKFsgYSAqIChwMlswXSAtIHAwWzBdKSwgYSAqIChwMlsxXSAtIHAwWzFdKSBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhbmdlbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXMocG9pbnRzKSB7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAzKSByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB2YXIgaSA9IDEsIG4gPSBwb2ludHMubGVuZ3RoLCBwaSA9IHBvaW50c1swXSwgeDAgPSBwaVswXSwgeTAgPSBwaVsxXSwgcHggPSBbIHgwLCB4MCwgeDAsIChwaSA9IHBvaW50c1sxXSlbMF0gXSwgcHkgPSBbIHkwLCB5MCwgeTAsIHBpWzFdIF0sIHBhdGggPSBbIHgwLCBcIixcIiwgeTAsIFwiTFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpIF07XG4gICAgcG9pbnRzLnB1c2gocG9pbnRzW24gLSAxXSk7XG4gICAgd2hpbGUgKCsraSA8PSBuKSB7XG4gICAgICBwaSA9IHBvaW50c1tpXTtcbiAgICAgIHB4LnNoaWZ0KCk7XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnNoaWZ0KCk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcbiAgICB9XG4gICAgcG9pbnRzLnBvcCgpO1xuICAgIHBhdGgucHVzaChcIkxcIiwgcGkpO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc09wZW4ocG9pbnRzKSB7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCA0KSByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB2YXIgcGF0aCA9IFtdLCBpID0gLTEsIG4gPSBwb2ludHMubGVuZ3RoLCBwaSwgcHggPSBbIDAgXSwgcHkgPSBbIDAgXTtcbiAgICB3aGlsZSAoKytpIDwgMykge1xuICAgICAgcGkgPSBwb2ludHNbaV07XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgIH1cbiAgICBwYXRoLnB1c2goZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCkgKyBcIixcIiArIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpKTtcbiAgICAtLWk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHBpID0gcG9pbnRzW2ldO1xuICAgICAgcHguc2hpZnQoKTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkuc2hpZnQoKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXNDbG9zZWQocG9pbnRzKSB7XG4gICAgdmFyIHBhdGgsIGkgPSAtMSwgbiA9IHBvaW50cy5sZW5ndGgsIG0gPSBuICsgNCwgcGksIHB4ID0gW10sIHB5ID0gW107XG4gICAgd2hpbGUgKCsraSA8IDQpIHtcbiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkucHVzaChwaVsxXSk7XG4gICAgfVxuICAgIHBhdGggPSBbIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSkgXTtcbiAgICAtLWk7XG4gICAgd2hpbGUgKCsraSA8IG0pIHtcbiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcbiAgICAgIHB4LnNoaWZ0KCk7XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnNoaWZ0KCk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUJ1bmRsZShwb2ludHMsIHRlbnNpb24pIHtcbiAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGggLSAxO1xuICAgIGlmIChuKSB7XG4gICAgICB2YXIgeDAgPSBwb2ludHNbMF1bMF0sIHkwID0gcG9pbnRzWzBdWzFdLCBkeCA9IHBvaW50c1tuXVswXSAtIHgwLCBkeSA9IHBvaW50c1tuXVsxXSAtIHkwLCBpID0gLTEsIHAsIHQ7XG4gICAgICB3aGlsZSAoKytpIDw9IG4pIHtcbiAgICAgICAgcCA9IHBvaW50c1tpXTtcbiAgICAgICAgdCA9IGkgLyBuO1xuICAgICAgICBwWzBdID0gdGVuc2lvbiAqIHBbMF0gKyAoMSAtIHRlbnNpb24pICogKHgwICsgdCAqIGR4KTtcbiAgICAgICAgcFsxXSA9IHRlbnNpb24gKiBwWzFdICsgKDEgLSB0ZW5zaW9uKSAqICh5MCArIHQgKiBkeSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zdmdfbGluZUJhc2lzKHBvaW50cyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVEb3Q0KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG4gIH1cbiAgdmFyIGQzX3N2Z19saW5lQmFzaXNCZXppZXIxID0gWyAwLCAyIC8gMywgMSAvIDMsIDAgXSwgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjIgPSBbIDAsIDEgLyAzLCAyIC8gMywgMCBdLCBkM19zdmdfbGluZUJhc2lzQmV6aWVyMyA9IFsgMCwgMSAvIDYsIDIgLyAzLCAxIC8gNiBdO1xuICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHgsIHkpIHtcbiAgICBwYXRoLnB1c2goXCJDXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMSwgeCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEsIHkpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIyLCB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMiwgeSksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCB5KSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTbG9wZShwMCwgcDEpIHtcbiAgICByZXR1cm4gKHAxWzFdIC0gcDBbMV0pIC8gKHAxWzBdIC0gcDBbMF0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLCBqID0gcG9pbnRzLmxlbmd0aCAtIDEsIG0gPSBbXSwgcDAgPSBwb2ludHNbMF0sIHAxID0gcG9pbnRzWzFdLCBkID0gbVswXSA9IGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKTtcbiAgICB3aGlsZSAoKytpIDwgaikge1xuICAgICAgbVtpXSA9IChkICsgKGQgPSBkM19zdmdfbGluZVNsb3BlKHAwID0gcDEsIHAxID0gcG9pbnRzW2kgKyAxXSkpKSAvIDI7XG4gICAgfVxuICAgIG1baV0gPSBkO1xuICAgIHJldHVybiBtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lTW9ub3RvbmVUYW5nZW50cyhwb2ludHMpIHtcbiAgICB2YXIgdGFuZ2VudHMgPSBbXSwgZCwgYSwgYiwgcywgbSA9IGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSwgaSA9IC0xLCBqID0gcG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCsraSA8IGopIHtcbiAgICAgIGQgPSBkM19zdmdfbGluZVNsb3BlKHBvaW50c1tpXSwgcG9pbnRzW2kgKyAxXSk7XG4gICAgICBpZiAoYWJzKGQpIDwgzrUpIHtcbiAgICAgICAgbVtpXSA9IG1baSArIDFdID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGEgPSBtW2ldIC8gZDtcbiAgICAgICAgYiA9IG1baSArIDFdIC8gZDtcbiAgICAgICAgcyA9IGEgKiBhICsgYiAqIGI7XG4gICAgICAgIGlmIChzID4gOSkge1xuICAgICAgICAgIHMgPSBkICogMyAvIE1hdGguc3FydChzKTtcbiAgICAgICAgICBtW2ldID0gcyAqIGE7XG4gICAgICAgICAgbVtpICsgMV0gPSBzICogYjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8PSBqKSB7XG4gICAgICBzID0gKHBvaW50c1tNYXRoLm1pbihqLCBpICsgMSldWzBdIC0gcG9pbnRzW01hdGgubWF4KDAsIGkgLSAxKV1bMF0pIC8gKDYgKiAoMSArIG1baV0gKiBtW2ldKSk7XG4gICAgICB0YW5nZW50cy5wdXNoKFsgcyB8fCAwLCBtW2ldICogcyB8fCAwIF0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFuZ2VudHM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVNb25vdG9uZShwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzKHBvaW50cykpO1xuICB9XG4gIGQzLnN2Zy5saW5lLnJhZGlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsaW5lID0gZDNfc3ZnX2xpbmUoZDNfc3ZnX2xpbmVSYWRpYWwpO1xuICAgIGxpbmUucmFkaXVzID0gbGluZS54LCBkZWxldGUgbGluZS54O1xuICAgIGxpbmUuYW5nbGUgPSBsaW5lLnksIGRlbGV0ZSBsaW5lLnk7XG4gICAgcmV0dXJuIGxpbmU7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lUmFkaWFsKHBvaW50cykge1xuICAgIHZhciBwb2ludCwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgciwgYTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICByID0gcG9pbnRbMF07XG4gICAgICBhID0gcG9pbnRbMV0gLSBoYWxmz4A7XG4gICAgICBwb2ludFswXSA9IHIgKiBNYXRoLmNvcyhhKTtcbiAgICAgIHBvaW50WzFdID0gciAqIE1hdGguc2luKGEpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmVhKHByb2plY3Rpb24pIHtcbiAgICB2YXIgeDAgPSBkM19nZW9tX3BvaW50WCwgeDEgPSBkM19nZW9tX3BvaW50WCwgeTAgPSAwLCB5MSA9IGQzX2dlb21fcG9pbnRZLCBkZWZpbmVkID0gZDNfdHJ1ZSwgaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUxpbmVhciwgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZS5rZXksIGludGVycG9sYXRlUmV2ZXJzZSA9IGludGVycG9sYXRlLCBMID0gXCJMXCIsIHRlbnNpb24gPSAuNztcbiAgICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICAgIHZhciBzZWdtZW50cyA9IFtdLCBwb2ludHMwID0gW10sIHBvaW50czEgPSBbXSwgaSA9IC0xLCBuID0gZGF0YS5sZW5ndGgsIGQsIGZ4MCA9IGQzX2Z1bmN0b3IoeDApLCBmeTAgPSBkM19mdW5jdG9yKHkwKSwgZngxID0geDAgPT09IHgxID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfSA6IGQzX2Z1bmN0b3IoeDEpLCBmeTEgPSB5MCA9PT0geTEgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9IDogZDNfZnVuY3Rvcih5MSksIHgsIHk7XG4gICAgICBmdW5jdGlvbiBzZWdtZW50KCkge1xuICAgICAgICBzZWdtZW50cy5wdXNoKFwiTVwiLCBpbnRlcnBvbGF0ZShwcm9qZWN0aW9uKHBvaW50czEpLCB0ZW5zaW9uKSwgTCwgaW50ZXJwb2xhdGVSZXZlcnNlKHByb2plY3Rpb24ocG9pbnRzMC5yZXZlcnNlKCkpLCB0ZW5zaW9uKSwgXCJaXCIpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcbiAgICAgICAgICBwb2ludHMwLnB1c2goWyB4ID0gK2Z4MC5jYWxsKHRoaXMsIGQsIGkpLCB5ID0gK2Z5MC5jYWxsKHRoaXMsIGQsIGkpIF0pO1xuICAgICAgICAgIHBvaW50czEucHVzaChbICtmeDEuY2FsbCh0aGlzLCBkLCBpKSwgK2Z5MS5jYWxsKHRoaXMsIGQsIGkpIF0pO1xuICAgICAgICB9IGVsc2UgaWYgKHBvaW50czAubGVuZ3RoKSB7XG4gICAgICAgICAgc2VnbWVudCgpO1xuICAgICAgICAgIHBvaW50czAgPSBbXTtcbiAgICAgICAgICBwb2ludHMxID0gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwb2ludHMwLmxlbmd0aCkgc2VnbWVudCgpO1xuICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzLmpvaW4oXCJcIikgOiBudWxsO1xuICAgIH1cbiAgICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MTtcbiAgICAgIHgwID0geDEgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDA7XG4gICAgICB4MCA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MTtcbiAgICAgIHgxID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTE7XG4gICAgICB5MCA9IHkxID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkwO1xuICAgICAgeTAgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTE7XG4gICAgICB5MSA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRlZmluZWQ7XG4gICAgICBkZWZpbmVkID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlS2V5O1xuICAgICAgaWYgKHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIpIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUgPSBfOyBlbHNlIGludGVycG9sYXRlS2V5ID0gKGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzLmdldChfKSB8fCBkM19zdmdfbGluZUxpbmVhcikua2V5O1xuICAgICAgaW50ZXJwb2xhdGVSZXZlcnNlID0gaW50ZXJwb2xhdGUucmV2ZXJzZSB8fCBpbnRlcnBvbGF0ZTtcbiAgICAgIEwgPSBpbnRlcnBvbGF0ZS5jbG9zZWQgPyBcIk1cIiA6IFwiTFwiO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLnRlbnNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0ZW5zaW9uO1xuICAgICAgdGVuc2lvbiA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIHJldHVybiBhcmVhO1xuICB9XG4gIGQzX3N2Z19saW5lU3RlcEJlZm9yZS5yZXZlcnNlID0gZDNfc3ZnX2xpbmVTdGVwQWZ0ZXI7XG4gIGQzX3N2Z19saW5lU3RlcEFmdGVyLnJldmVyc2UgPSBkM19zdmdfbGluZVN0ZXBCZWZvcmU7XG4gIGQzLnN2Zy5hcmVhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3N2Z19hcmVhKGQzX2lkZW50aXR5KTtcbiAgfTtcbiAgZDMuc3ZnLmFyZWEucmFkaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWEgPSBkM19zdmdfYXJlYShkM19zdmdfbGluZVJhZGlhbCk7XG4gICAgYXJlYS5yYWRpdXMgPSBhcmVhLngsIGRlbGV0ZSBhcmVhLng7XG4gICAgYXJlYS5pbm5lclJhZGl1cyA9IGFyZWEueDAsIGRlbGV0ZSBhcmVhLngwO1xuICAgIGFyZWEub3V0ZXJSYWRpdXMgPSBhcmVhLngxLCBkZWxldGUgYXJlYS54MTtcbiAgICBhcmVhLmFuZ2xlID0gYXJlYS55LCBkZWxldGUgYXJlYS55O1xuICAgIGFyZWEuc3RhcnRBbmdsZSA9IGFyZWEueTAsIGRlbGV0ZSBhcmVhLnkwO1xuICAgIGFyZWEuZW5kQW5nbGUgPSBhcmVhLnkxLCBkZWxldGUgYXJlYS55MTtcbiAgICByZXR1cm4gYXJlYTtcbiAgfTtcbiAgZDMuc3ZnLmNob3JkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNvdXJjZSA9IGQzX3NvdXJjZSwgdGFyZ2V0ID0gZDNfdGFyZ2V0LCByYWRpdXMgPSBkM19zdmdfY2hvcmRSYWRpdXMsIHN0YXJ0QW5nbGUgPSBkM19zdmdfYXJjU3RhcnRBbmdsZSwgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGU7XG4gICAgZnVuY3Rpb24gY2hvcmQoZCwgaSkge1xuICAgICAgdmFyIHMgPSBzdWJncm91cCh0aGlzLCBzb3VyY2UsIGQsIGkpLCB0ID0gc3ViZ3JvdXAodGhpcywgdGFyZ2V0LCBkLCBpKTtcbiAgICAgIHJldHVybiBcIk1cIiArIHMucDAgKyBhcmMocy5yLCBzLnAxLCBzLmExIC0gcy5hMCkgKyAoZXF1YWxzKHMsIHQpID8gY3VydmUocy5yLCBzLnAxLCBzLnIsIHMucDApIDogY3VydmUocy5yLCBzLnAxLCB0LnIsIHQucDApICsgYXJjKHQuciwgdC5wMSwgdC5hMSAtIHQuYTApICsgY3VydmUodC5yLCB0LnAxLCBzLnIsIHMucDApKSArIFwiWlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdWJncm91cChzZWxmLCBmLCBkLCBpKSB7XG4gICAgICB2YXIgc3ViZ3JvdXAgPSBmLmNhbGwoc2VsZiwgZCwgaSksIHIgPSByYWRpdXMuY2FsbChzZWxmLCBzdWJncm91cCwgaSksIGEwID0gc3RhcnRBbmdsZS5jYWxsKHNlbGYsIHN1Ymdyb3VwLCBpKSAtIGhhbGbPgCwgYTEgPSBlbmRBbmdsZS5jYWxsKHNlbGYsIHN1Ymdyb3VwLCBpKSAtIGhhbGbPgDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHI6IHIsXG4gICAgICAgIGEwOiBhMCxcbiAgICAgICAgYTE6IGExLFxuICAgICAgICBwMDogWyByICogTWF0aC5jb3MoYTApLCByICogTWF0aC5zaW4oYTApIF0sXG4gICAgICAgIHAxOiBbIHIgKiBNYXRoLmNvcyhhMSksIHIgKiBNYXRoLnNpbihhMSkgXVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmEwID09IGIuYTAgJiYgYS5hMSA9PSBiLmExO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcmMociwgcCwgYSkge1xuICAgICAgcmV0dXJuIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgXCIgKyArKGEgPiDPgCkgKyBcIiwxIFwiICsgcDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3VydmUocjAsIHAwLCByMSwgcDEpIHtcbiAgICAgIHJldHVybiBcIlEgMCwwIFwiICsgcDE7XG4gICAgfVxuICAgIGNob3JkLnJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhZGl1cztcbiAgICAgIHJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3VyY2UgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG4gICAgICBzb3VyY2UgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQudGFyZ2V0ID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICAgICAgdGFyZ2V0ID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuICAgICAgc3RhcnRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5lbmRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGVuZEFuZ2xlO1xuICAgICAgZW5kQW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgcmV0dXJuIGNob3JkO1xuICB9O1xuICBmdW5jdGlvbiBkM19zdmdfY2hvcmRSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLnJhZGl1cztcbiAgfVxuICBkMy5zdmcuZGlhZ29uYWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc291cmNlID0gZDNfc291cmNlLCB0YXJnZXQgPSBkM190YXJnZXQsIHByb2plY3Rpb24gPSBkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uO1xuICAgIGZ1bmN0aW9uIGRpYWdvbmFsKGQsIGkpIHtcbiAgICAgIHZhciBwMCA9IHNvdXJjZS5jYWxsKHRoaXMsIGQsIGkpLCBwMyA9IHRhcmdldC5jYWxsKHRoaXMsIGQsIGkpLCBtID0gKHAwLnkgKyBwMy55KSAvIDIsIHAgPSBbIHAwLCB7XG4gICAgICAgIHg6IHAwLngsXG4gICAgICAgIHk6IG1cbiAgICAgIH0sIHtcbiAgICAgICAgeDogcDMueCxcbiAgICAgICAgeTogbVxuICAgICAgfSwgcDMgXTtcbiAgICAgIHAgPSBwLm1hcChwcm9qZWN0aW9uKTtcbiAgICAgIHJldHVybiBcIk1cIiArIHBbMF0gKyBcIkNcIiArIHBbMV0gKyBcIiBcIiArIHBbMl0gKyBcIiBcIiArIHBbM107XG4gICAgfVxuICAgIGRpYWdvbmFsLnNvdXJjZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvdXJjZTtcbiAgICAgIHNvdXJjZSA9IGQzX2Z1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gZGlhZ29uYWw7XG4gICAgfTtcbiAgICBkaWFnb25hbC50YXJnZXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0YXJnZXQ7XG4gICAgICB0YXJnZXQgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGRpYWdvbmFsO1xuICAgIH07XG4gICAgZGlhZ29uYWwucHJvamVjdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByb2plY3Rpb247XG4gICAgICBwcm9qZWN0aW9uID0geDtcbiAgICAgIHJldHVybiBkaWFnb25hbDtcbiAgICB9O1xuICAgIHJldHVybiBkaWFnb25hbDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUHJvamVjdGlvbihkKSB7XG4gICAgcmV0dXJuIFsgZC54LCBkLnkgXTtcbiAgfVxuICBkMy5zdmcuZGlhZ29uYWwucmFkaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpYWdvbmFsID0gZDMuc3ZnLmRpYWdvbmFsKCksIHByb2plY3Rpb24gPSBkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uLCBwcm9qZWN0aW9uXyA9IGRpYWdvbmFsLnByb2plY3Rpb247XG4gICAgZGlhZ29uYWwucHJvamVjdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcHJvamVjdGlvbl8oZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uID0geCkpIDogcHJvamVjdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBkaWFnb25hbDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGQgPSBwcm9qZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHIgPSBkWzBdLCBhID0gZFsxXSAtIGhhbGbPgDtcbiAgICAgIHJldHVybiBbIHIgKiBNYXRoLmNvcyhhKSwgciAqIE1hdGguc2luKGEpIF07XG4gICAgfTtcbiAgfVxuICBkMy5zdmcuc3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHR5cGUgPSBkM19zdmdfc3ltYm9sVHlwZSwgc2l6ZSA9IGQzX3N2Z19zeW1ib2xTaXplO1xuICAgIGZ1bmN0aW9uIHN5bWJvbChkLCBpKSB7XG4gICAgICByZXR1cm4gKGQzX3N2Z19zeW1ib2xzLmdldCh0eXBlLmNhbGwodGhpcywgZCwgaSkpIHx8IGQzX3N2Z19zeW1ib2xDaXJjbGUpKHNpemUuY2FsbCh0aGlzLCBkLCBpKSk7XG4gICAgfVxuICAgIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdHlwZTtcbiAgICAgIHR5cGUgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgICB9O1xuICAgIHN5bWJvbC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgICB9O1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3N2Z19zeW1ib2xTaXplKCkge1xuICAgIHJldHVybiA2NDtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sVHlwZSgpIHtcbiAgICByZXR1cm4gXCJjaXJjbGVcIjtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sQ2lyY2xlKHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gz4ApO1xuICAgIHJldHVybiBcIk0wLFwiICsgciArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgMSwxIDAsXCIgKyAtciArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgMSwxIDAsXCIgKyByICsgXCJaXCI7XG4gIH1cbiAgdmFyIGQzX3N2Z19zeW1ib2xzID0gZDMubWFwKHtcbiAgICBjaXJjbGU6IGQzX3N2Z19zeW1ib2xDaXJjbGUsXG4gICAgY3Jvc3M6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG4gICAgICByZXR1cm4gXCJNXCIgKyAtMyAqIHIgKyBcIixcIiArIC1yICsgXCJIXCIgKyAtciArIFwiVlwiICsgLTMgKiByICsgXCJIXCIgKyByICsgXCJWXCIgKyAtciArIFwiSFwiICsgMyAqIHIgKyBcIlZcIiArIHIgKyBcIkhcIiArIHIgKyBcIlZcIiArIDMgKiByICsgXCJIXCIgKyAtciArIFwiVlwiICsgciArIFwiSFwiICsgLTMgKiByICsgXCJaXCI7XG4gICAgfSxcbiAgICBkaWFtb25kOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgcnkgPSBNYXRoLnNxcnQoc2l6ZSAvICgyICogZDNfc3ZnX3N5bWJvbFRhbjMwKSksIHJ4ID0gcnkgKiBkM19zdmdfc3ltYm9sVGFuMzA7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIC1yeSArIFwiTFwiICsgcnggKyBcIiwwXCIgKyBcIiAwLFwiICsgcnkgKyBcIiBcIiArIC1yeCArIFwiLDBcIiArIFwiWlwiO1xuICAgIH0sXG4gICAgc3F1YXJlOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplKSAvIDI7XG4gICAgICByZXR1cm4gXCJNXCIgKyAtciArIFwiLFwiICsgLXIgKyBcIkxcIiArIHIgKyBcIixcIiArIC1yICsgXCIgXCIgKyByICsgXCIsXCIgKyByICsgXCIgXCIgKyAtciArIFwiLFwiICsgciArIFwiWlwiO1xuICAgIH0sXG4gICAgXCJ0cmlhbmdsZS1kb3duXCI6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHZhciByeCA9IE1hdGguc3FydChzaXplIC8gZDNfc3ZnX3N5bWJvbFNxcnQzKSwgcnkgPSByeCAqIGQzX3N2Z19zeW1ib2xTcXJ0MyAvIDI7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIHJ5ICsgXCJMXCIgKyByeCArIFwiLFwiICsgLXJ5ICsgXCIgXCIgKyAtcnggKyBcIixcIiArIC1yeSArIFwiWlwiO1xuICAgIH0sXG4gICAgXCJ0cmlhbmdsZS11cFwiOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgcnggPSBNYXRoLnNxcnQoc2l6ZSAvIGQzX3N2Z19zeW1ib2xTcXJ0MyksIHJ5ID0gcnggKiBkM19zdmdfc3ltYm9sU3FydDMgLyAyO1xuICAgICAgcmV0dXJuIFwiTTAsXCIgKyAtcnkgKyBcIkxcIiArIHJ4ICsgXCIsXCIgKyByeSArIFwiIFwiICsgLXJ4ICsgXCIsXCIgKyByeSArIFwiWlwiO1xuICAgIH1cbiAgfSk7XG4gIGQzLnN2Zy5zeW1ib2xUeXBlcyA9IGQzX3N2Z19zeW1ib2xzLmtleXMoKTtcbiAgdmFyIGQzX3N2Z19zeW1ib2xTcXJ0MyA9IE1hdGguc3FydCgzKSwgZDNfc3ZnX3N5bWJvbFRhbjMwID0gTWF0aC50YW4oMzAgKiBkM19yYWRpYW5zKTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGlkID0gZDNfdHJhbnNpdGlvbkluaGVyaXRJZCB8fCArK2QzX3RyYW5zaXRpb25JZCwgbnMgPSBkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIG5vZGUsIHRyYW5zaXRpb24gPSBkM190cmFuc2l0aW9uSW5oZXJpdCB8fCB7XG4gICAgICB0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZWFzZTogZDNfZWFzZV9jdWJpY0luT3V0LFxuICAgICAgZGVsYXk6IDAsXG4gICAgICBkdXJhdGlvbjogMjUwXG4gICAgfTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgZDNfdHJhbnNpdGlvbk5vZGUobm9kZSwgaSwgbnMsIGlkLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVhY2gobmFtZSA9PSBudWxsID8gZDNfc2VsZWN0aW9uX2ludGVycnVwdCA6IGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpKSk7XG4gIH07XG4gIHZhciBkM19zZWxlY3Rpb25faW50ZXJydXB0ID0gZDNfc2VsZWN0aW9uX2ludGVycnVwdE5TKGQzX3RyYW5zaXRpb25OYW1lc3BhY2UoKSk7XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhucykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsb2NrLCBhY3RpdmVJZCwgYWN0aXZlO1xuICAgICAgaWYgKChsb2NrID0gdGhpc1tuc10pICYmIChhY3RpdmUgPSBsb2NrW2FjdGl2ZUlkID0gbG9jay5hY3RpdmVdKSkge1xuICAgICAgICBhY3RpdmUudGltZXIuYyA9IG51bGw7XG4gICAgICAgIGFjdGl2ZS50aW1lci50ID0gTmFOO1xuICAgICAgICBpZiAoLS1sb2NrLmNvdW50KSBkZWxldGUgbG9ja1thY3RpdmVJZF07IGVsc2UgZGVsZXRlIHRoaXNbbnNdO1xuICAgICAgICBsb2NrLmFjdGl2ZSArPSAuNTtcbiAgICAgICAgYWN0aXZlLmV2ZW50ICYmIGFjdGl2ZS5ldmVudC5pbnRlcnJ1cHQuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBhY3RpdmUuaW5kZXgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbihncm91cHMsIG5zLCBpZCkge1xuICAgIGQzX3N1YmNsYXNzKGdyb3VwcywgZDNfdHJhbnNpdGlvblByb3RvdHlwZSk7XG4gICAgZ3JvdXBzLm5hbWVzcGFjZSA9IG5zO1xuICAgIGdyb3Vwcy5pZCA9IGlkO1xuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgdmFyIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUgPSBbXSwgZDNfdHJhbnNpdGlvbklkID0gMCwgZDNfdHJhbnNpdGlvbkluaGVyaXRJZCwgZDNfdHJhbnNpdGlvbkluaGVyaXQ7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuY2FsbCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsO1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmVtcHR5ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLm5vZGUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zaXplID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNpemU7XG4gIGQzLnRyYW5zaXRpb24gPSBmdW5jdGlvbihzZWxlY3Rpb24sIG5hbWUpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uICYmIHNlbGVjdGlvbi50cmFuc2l0aW9uID8gZDNfdHJhbnNpdGlvbkluaGVyaXRJZCA/IHNlbGVjdGlvbi50cmFuc2l0aW9uKG5hbWUpIDogc2VsZWN0aW9uIDogZDMuc2VsZWN0aW9uKCkudHJhbnNpdGlvbihzZWxlY3Rpb24pO1xuICB9O1xuICBkMy50cmFuc2l0aW9uLnByb3RvdHlwZSA9IGQzX3RyYW5zaXRpb25Qcm90b3R5cGU7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIG5vZGU7XG4gICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSkge1xuICAgICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgICAgZDNfdHJhbnNpdGlvbk5vZGUoc3Vibm9kZSwgaSwgbnMsIGlkLCBub2RlW25zXVtpZF0pO1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIG5zLCBpZCk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGVzLCBub2RlLCBzdWJub2RlLCB0cmFuc2l0aW9uO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuICAgICAgICAgIHN1Ym5vZGVzID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgICAgICBmb3IgKHZhciBrID0gLTEsIG8gPSBzdWJub2Rlcy5sZW5ndGg7ICsrayA8IG87ICkge1xuICAgICAgICAgICAgaWYgKHN1Ym5vZGUgPSBzdWJub2Rlc1trXSkgZDNfdHJhbnNpdGlvbk5vZGUoc3Vibm9kZSwgaywgbnMsIGlkLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgbnMsIGlkKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZTtcbiAgICBpZiAodHlwZW9mIGZpbHRlciAhPT0gXCJmdW5jdGlvblwiKSBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fZmlsdGVyKGZpbHRlcik7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBmaWx0ZXIuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLm5hbWVzcGFjZSwgdGhpcy5pZCk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudHdlZW4gPSBmdW5jdGlvbihuYW1lLCB0d2Vlbikge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS50d2Vlbi5nZXQobmFtZSk7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIHR3ZWVuID09IG51bGwgPyBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0udHdlZW4ucmVtb3ZlKG5hbWUpO1xuICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0udHdlZW4uc2V0KG5hbWUsIHR3ZWVuKTtcbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbl90d2Vlbihncm91cHMsIG5hbWUsIHZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBpZCA9IGdyb3Vwcy5pZCwgbnMgPSBncm91cHMubmFtZXNwYWNlO1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gZnVuY3Rpb24obm9kZSwgaSwgaikge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB0d2Vlbih2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSk7XG4gICAgfSA6ICh2YWx1ZSA9IHR3ZWVuKHZhbHVlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgfSkpO1xuICB9XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWVOUywgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZU5TKSB0aGlzLmF0dHIodmFsdWUsIG5hbWVOU1t2YWx1ZV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBpbnRlcnBvbGF0ZSA9IG5hbWVOUyA9PSBcInRyYW5zZm9ybVwiID8gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBkM19pbnRlcnBvbGF0ZSwgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZU5TKTtcbiAgICBmdW5jdGlvbiBhdHRyTnVsbCgpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyTnVsbE5TKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXR0clR3ZWVuKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbCA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpLCBpO1xuICAgICAgICByZXR1cm4gYSAhPT0gYiAmJiAoaSA9IGludGVycG9sYXRlKGEsIGIpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaSh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbE5TIDogKGIgKz0gXCJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSwgaTtcbiAgICAgICAgcmV0dXJuIGEgIT09IGIgJiYgKGkgPSBpbnRlcnBvbGF0ZShhLCBiKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uX3R3ZWVuKHRoaXMsIFwiYXR0ci5cIiArIG5hbWVOUywgdmFsdWUsIG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2Vlbik7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0clR3ZWVuID0gZnVuY3Rpb24obmFtZU5TLCB0d2Vlbikge1xuICAgIHZhciBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lTlMpO1xuICAgIGZ1bmN0aW9uIGF0dHJUd2VlbihkLCBpKSB7XG4gICAgICB2YXIgZiA9IHR3ZWVuLmNhbGwodGhpcywgZCwgaSwgdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSkpO1xuICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBmKHQpKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGQsIGkpIHtcbiAgICAgIHZhciBmID0gdHdlZW4uY2FsbCh0aGlzLCBkLCBpLCB0aGlzLmdldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpKTtcbiAgICAgIHJldHVybiBmICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCBmKHQpKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwiYXR0ci5cIiArIG5hbWVOUywgbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobiA8IDMpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAobiA8IDIpIHZhbHVlID0gXCJcIjtcbiAgICAgICAgZm9yIChwcmlvcml0eSBpbiBuYW1lKSB0aGlzLnN0eWxlKHByaW9yaXR5LCBuYW1lW3ByaW9yaXR5XSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHByaW9yaXR5ID0gXCJcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3R5bGVOdWxsKCkge1xuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3R5bGVTdHJpbmcoYikge1xuICAgICAgcmV0dXJuIGIgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYSA9IGQzX3dpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSksIGk7XG4gICAgICAgIHJldHVybiBhICE9PSBiICYmIChpID0gZDNfaW50ZXJwb2xhdGUoYSwgYiksIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlLCBzdHlsZVN0cmluZyk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc3R5bGVUd2VlbiA9IGZ1bmN0aW9uKG5hbWUsIHR3ZWVuLCBwcmlvcml0eSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgcHJpb3JpdHkgPSBcIlwiO1xuICAgIGZ1bmN0aW9uIHN0eWxlVHdlZW4oZCwgaSkge1xuICAgICAgdmFyIGYgPSB0d2Vlbi5jYWxsKHRoaXMsIGQsIGksIGQzX3dpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSkpO1xuICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGYodCksIHByaW9yaXR5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwic3R5bGUuXCIgKyBuYW1lLCBzdHlsZVR3ZWVuKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbl90d2Vlbih0aGlzLCBcInRleHRcIiwgdmFsdWUsIGQzX3RyYW5zaXRpb25fdGV4dCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb25fdGV4dChiKSB7XG4gICAgaWYgKGIgPT0gbnVsbCkgYiA9IFwiXCI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IGI7XG4gICAgfTtcbiAgfVxuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIHJldHVybiB0aGlzLmVhY2goXCJlbmQudHJhbnNpdGlvblwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwO1xuICAgICAgaWYgKHRoaXNbbnNdLmNvdW50IDwgMiAmJiAocCA9IHRoaXMucGFyZW50Tm9kZSkpIHAucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgfSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZWFzZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHJldHVybiB0aGlzLm5vZGUoKVtuc11baWRdLmVhc2U7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGQzLmVhc2UuYXBwbHkoZDMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGVbbnNdW2lkXS5lYXNlID0gdmFsdWU7XG4gICAgfSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kZWxheTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBub2RlW25zXVtpZF0uZGVsYXkgPSArdmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcbiAgICB9IDogKHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0uZGVsYXkgPSB2YWx1ZTtcbiAgICB9KSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kdXJhdGlvbjtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBub2RlW25zXVtpZF0uZHVyYXRpb24gPSBNYXRoLm1heCgxLCB2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKTtcbiAgICB9IDogKHZhbHVlID0gTWF0aC5tYXgoMSwgdmFsdWUpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0uZHVyYXRpb24gPSB2YWx1ZTtcbiAgICB9KSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBpbmhlcml0ID0gZDNfdHJhbnNpdGlvbkluaGVyaXQsIGluaGVyaXRJZCA9IGQzX3RyYW5zaXRpb25Jbmhlcml0SWQ7XG4gICAgICB0cnkge1xuICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaWQ7XG4gICAgICAgIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcbiAgICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdCA9IG5vZGVbbnNdW2lkXTtcbiAgICAgICAgICB0eXBlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG4gICAgICAgIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXQgPSBpbmhlcml0O1xuICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaW5oZXJpdElkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuICAgICAgICAodHJhbnNpdGlvbi5ldmVudCB8fCAodHJhbnNpdGlvbi5ldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJpbnRlcnJ1cHRcIikpKS5vbih0eXBlLCBsaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZDAgPSB0aGlzLmlkLCBpZDEgPSArK2QzX3RyYW5zaXRpb25JZCwgbnMgPSB0aGlzLm5hbWVzcGFjZSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZSwgdHJhbnNpdGlvbjtcbiAgICBmb3IgKHZhciBqID0gMCwgbSA9IHRoaXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHRyYW5zaXRpb24gPSBub2RlW25zXVtpZDBdO1xuICAgICAgICAgIGQzX3RyYW5zaXRpb25Ob2RlKG5vZGUsIGksIG5zLCBpZDEsIHtcbiAgICAgICAgICAgIHRpbWU6IHRyYW5zaXRpb24udGltZSxcbiAgICAgICAgICAgIGVhc2U6IHRyYW5zaXRpb24uZWFzZSxcbiAgICAgICAgICAgIGRlbGF5OiB0cmFuc2l0aW9uLmRlbGF5ICsgdHJhbnNpdGlvbi5kdXJhdGlvbixcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uLmR1cmF0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQxKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbk5hbWVzcGFjZShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgPT0gbnVsbCA/IFwiX190cmFuc2l0aW9uX19cIiA6IFwiX190cmFuc2l0aW9uX1wiICsgbmFtZSArIFwiX19cIjtcbiAgfVxuICBmdW5jdGlvbiBkM190cmFuc2l0aW9uTm9kZShub2RlLCBpLCBucywgaWQsIGluaGVyaXQpIHtcbiAgICB2YXIgbG9jayA9IG5vZGVbbnNdIHx8IChub2RlW25zXSA9IHtcbiAgICAgIGFjdGl2ZTogMCxcbiAgICAgIGNvdW50OiAwXG4gICAgfSksIHRyYW5zaXRpb24gPSBsb2NrW2lkXSwgdGltZSwgdGltZXIsIGR1cmF0aW9uLCBlYXNlLCB0d2VlbnM7XG4gICAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgICAgdmFyIGRlbGF5ID0gdHJhbnNpdGlvbi5kZWxheTtcbiAgICAgIHRpbWVyLnQgPSBkZWxheSArIHRpbWU7XG4gICAgICBpZiAoZGVsYXkgPD0gZWxhcHNlZCkgcmV0dXJuIHN0YXJ0KGVsYXBzZWQgLSBkZWxheSk7XG4gICAgICB0aW1lci5jID0gc3RhcnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICAgIHZhciBhY3RpdmVJZCA9IGxvY2suYWN0aXZlLCBhY3RpdmUgPSBsb2NrW2FjdGl2ZUlkXTtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlLnRpbWVyLmMgPSBudWxsO1xuICAgICAgICBhY3RpdmUudGltZXIudCA9IE5hTjtcbiAgICAgICAgLS1sb2NrLmNvdW50O1xuICAgICAgICBkZWxldGUgbG9ja1thY3RpdmVJZF07XG4gICAgICAgIGFjdGl2ZS5ldmVudCAmJiBhY3RpdmUuZXZlbnQuaW50ZXJydXB0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgYWN0aXZlLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGNhbmNlbElkIGluIGxvY2spIHtcbiAgICAgICAgaWYgKCtjYW5jZWxJZCA8IGlkKSB7XG4gICAgICAgICAgdmFyIGNhbmNlbCA9IGxvY2tbY2FuY2VsSWRdO1xuICAgICAgICAgIGNhbmNlbC50aW1lci5jID0gbnVsbDtcbiAgICAgICAgICBjYW5jZWwudGltZXIudCA9IE5hTjtcbiAgICAgICAgICAtLWxvY2suY291bnQ7XG4gICAgICAgICAgZGVsZXRlIGxvY2tbY2FuY2VsSWRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aW1lci5jID0gdGljaztcbiAgICAgIGQzX3RpbWVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGltZXIuYyAmJiB0aWNrKGVsYXBzZWQgfHwgMSkpIHtcbiAgICAgICAgICB0aW1lci5jID0gbnVsbDtcbiAgICAgICAgICB0aW1lci50ID0gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSwgMCwgdGltZSk7XG4gICAgICBsb2NrLmFjdGl2ZSA9IGlkO1xuICAgICAgdHJhbnNpdGlvbi5ldmVudCAmJiB0cmFuc2l0aW9uLmV2ZW50LnN0YXJ0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSk7XG4gICAgICB0d2VlbnMgPSBbXTtcbiAgICAgIHRyYW5zaXRpb24udHdlZW4uZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9IHZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSkpIHtcbiAgICAgICAgICB0d2VlbnMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZWFzZSA9IHRyYW5zaXRpb24uZWFzZTtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbi5kdXJhdGlvbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgICB2YXIgdCA9IGVsYXBzZWQgLyBkdXJhdGlvbiwgZSA9IGVhc2UodCksIG4gPSB0d2VlbnMubGVuZ3RoO1xuICAgICAgd2hpbGUgKG4gPiAwKSB7XG4gICAgICAgIHR3ZWVuc1stLW5dLmNhbGwobm9kZSwgZSk7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb24uZXZlbnQgJiYgdHJhbnNpdGlvbi5ldmVudC5lbmQuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpKTtcbiAgICAgICAgaWYgKC0tbG9jay5jb3VudCkgZGVsZXRlIGxvY2tbaWRdOyBlbHNlIGRlbGV0ZSBub2RlW25zXTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdHJhbnNpdGlvbikge1xuICAgICAgdGltZSA9IGluaGVyaXQudGltZTtcbiAgICAgIHRpbWVyID0gZDNfdGltZXIoc2NoZWR1bGUsIDAsIHRpbWUpO1xuICAgICAgdHJhbnNpdGlvbiA9IGxvY2tbaWRdID0ge1xuICAgICAgICB0d2VlbjogbmV3IGQzX01hcCgpLFxuICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICB0aW1lcjogdGltZXIsXG4gICAgICAgIGRlbGF5OiBpbmhlcml0LmRlbGF5LFxuICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlLFxuICAgICAgICBpbmRleDogaVxuICAgICAgfTtcbiAgICAgIGluaGVyaXQgPSBudWxsO1xuICAgICAgKytsb2NrLmNvdW50O1xuICAgIH1cbiAgfVxuICBkMy5zdmcuYXhpcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpLCBvcmllbnQgPSBkM19zdmdfYXhpc0RlZmF1bHRPcmllbnQsIGlubmVyVGlja1NpemUgPSA2LCBvdXRlclRpY2tTaXplID0gNiwgdGlja1BhZGRpbmcgPSAzLCB0aWNrQXJndW1lbnRzXyA9IFsgMTAgXSwgdGlja1ZhbHVlcyA9IG51bGwsIHRpY2tGb3JtYXRfO1xuICAgIGZ1bmN0aW9uIGF4aXMoZykge1xuICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZyA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgdmFyIHNjYWxlMCA9IHRoaXMuX19jaGFydF9fIHx8IHNjYWxlLCBzY2FsZTEgPSB0aGlzLl9fY2hhcnRfXyA9IHNjYWxlLmNvcHkoKTtcbiAgICAgICAgdmFyIHRpY2tzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gc2NhbGUxLnRpY2tzID8gc2NhbGUxLnRpY2tzLmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDogc2NhbGUxLmRvbWFpbigpIDogdGlja1ZhbHVlcywgdGlja0Zvcm1hdCA9IHRpY2tGb3JtYXRfID09IG51bGwgPyBzY2FsZTEudGlja0Zvcm1hdCA/IHNjYWxlMS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDogZDNfaWRlbnRpdHkgOiB0aWNrRm9ybWF0XywgdGljayA9IGcuc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh0aWNrcywgc2NhbGUxKSwgdGlja0VudGVyID0gdGljay5lbnRlcigpLmluc2VydChcImdcIiwgXCIuZG9tYWluXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIikuc3R5bGUoXCJvcGFjaXR5XCIsIM61KSwgdGlja0V4aXQgPSBkMy50cmFuc2l0aW9uKHRpY2suZXhpdCgpKS5zdHlsZShcIm9wYWNpdHlcIiwgzrUpLnJlbW92ZSgpLCB0aWNrVXBkYXRlID0gZDMudHJhbnNpdGlvbih0aWNrLm9yZGVyKCkpLnN0eWxlKFwib3BhY2l0eVwiLCAxKSwgdGlja1NwYWNpbmcgPSBNYXRoLm1heChpbm5lclRpY2tTaXplLCAwKSArIHRpY2tQYWRkaW5nLCB0aWNrVHJhbnNmb3JtO1xuICAgICAgICB2YXIgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHNjYWxlMSksIHBhdGggPSBnLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbIDAgXSksIHBhdGhVcGRhdGUgPSAocGF0aC5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpLCBcbiAgICAgICAgZDMudHJhbnNpdGlvbihwYXRoKSk7XG4gICAgICAgIHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpO1xuICAgICAgICB0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKTtcbiAgICAgICAgdmFyIGxpbmVFbnRlciA9IHRpY2tFbnRlci5zZWxlY3QoXCJsaW5lXCIpLCBsaW5lVXBkYXRlID0gdGlja1VwZGF0ZS5zZWxlY3QoXCJsaW5lXCIpLCB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpLnRleHQodGlja0Zvcm1hdCksIHRleHRFbnRlciA9IHRpY2tFbnRlci5zZWxlY3QoXCJ0ZXh0XCIpLCB0ZXh0VXBkYXRlID0gdGlja1VwZGF0ZS5zZWxlY3QoXCJ0ZXh0XCIpLCBzaWduID0gb3JpZW50ID09PSBcInRvcFwiIHx8IG9yaWVudCA9PT0gXCJsZWZ0XCIgPyAtMSA6IDEsIHgxLCB4MiwgeTEsIHkyO1xuICAgICAgICBpZiAob3JpZW50ID09PSBcImJvdHRvbVwiIHx8IG9yaWVudCA9PT0gXCJ0b3BcIikge1xuICAgICAgICAgIHRpY2tUcmFuc2Zvcm0gPSBkM19zdmdfYXhpc1gsIHgxID0gXCJ4XCIsIHkxID0gXCJ5XCIsIHgyID0gXCJ4MlwiLCB5MiA9IFwieTJcIjtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJkeVwiLCBzaWduIDwgMCA/IFwiMGVtXCIgOiBcIi43MWVtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIik7XG4gICAgICAgICAgcGF0aFVwZGF0ZS5hdHRyKFwiZFwiLCBcIk1cIiArIHJhbmdlWzBdICsgXCIsXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSArIFwiVjBIXCIgKyByYW5nZVsxXSArIFwiVlwiICsgc2lnbiAqIG91dGVyVGlja1NpemUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tUcmFuc2Zvcm0gPSBkM19zdmdfYXhpc1ksIHgxID0gXCJ5XCIsIHkxID0gXCJ4XCIsIHgyID0gXCJ5MlwiLCB5MiA9IFwieDJcIjtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJkeVwiLCBcIi4zMmVtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgc2lnbiA8IDAgPyBcImVuZFwiIDogXCJzdGFydFwiKTtcbiAgICAgICAgICBwYXRoVXBkYXRlLmF0dHIoXCJkXCIsIFwiTVwiICsgc2lnbiAqIG91dGVyVGlja1NpemUgKyBcIixcIiArIHJhbmdlWzBdICsgXCJIMFZcIiArIHJhbmdlWzFdICsgXCJIXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUVudGVyLmF0dHIoeTIsIHNpZ24gKiBpbm5lclRpY2tTaXplKTtcbiAgICAgICAgdGV4dEVudGVyLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG4gICAgICAgIGxpbmVVcGRhdGUuYXR0cih4MiwgMCkuYXR0cih5Miwgc2lnbiAqIGlubmVyVGlja1NpemUpO1xuICAgICAgICB0ZXh0VXBkYXRlLmF0dHIoeDEsIDApLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG4gICAgICAgIGlmIChzY2FsZTEucmFuZ2VCYW5kKSB7XG4gICAgICAgICAgdmFyIHggPSBzY2FsZTEsIGR4ID0geC5yYW5nZUJhbmQoKSAvIDI7XG4gICAgICAgICAgc2NhbGUwID0gc2NhbGUxID0gZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIHgoZCkgKyBkeDtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHNjYWxlMC5yYW5nZUJhbmQpIHtcbiAgICAgICAgICBzY2FsZTAgPSBzY2FsZTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGlja0V4aXQuY2FsbCh0aWNrVHJhbnNmb3JtLCBzY2FsZTEsIHNjYWxlMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGlja0VudGVyLmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUwLCBzY2FsZTEpO1xuICAgICAgICB0aWNrVXBkYXRlLmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUxLCBzY2FsZTEpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGF4aXMuc2NhbGUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzY2FsZTtcbiAgICAgIHNjYWxlID0geDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy5vcmllbnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmllbnQ7XG4gICAgICBvcmllbnQgPSB4IGluIGQzX3N2Z19heGlzT3JpZW50cyA/IHggKyBcIlwiIDogZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrQXJndW1lbnRzXztcbiAgICAgIHRpY2tBcmd1bWVudHNfID0gZDNfYXJyYXkoYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja1ZhbHVlcztcbiAgICAgIHRpY2tWYWx1ZXMgPSB4O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrRm9ybWF0XztcbiAgICAgIHRpY2tGb3JtYXRfID0geDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbikgcmV0dXJuIGlubmVyVGlja1NpemU7XG4gICAgICBpbm5lclRpY2tTaXplID0gK3g7XG4gICAgICBvdXRlclRpY2tTaXplID0gK2FyZ3VtZW50c1tuIC0gMV07XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMuaW5uZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGlubmVyVGlja1NpemU7XG4gICAgICBpbm5lclRpY2tTaXplID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMub3V0ZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dGVyVGlja1NpemU7XG4gICAgICBvdXRlclRpY2tTaXplID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrUGFkZGluZztcbiAgICAgIHRpY2tQYWRkaW5nID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1N1YmRpdmlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggJiYgYXhpcztcbiAgICB9O1xuICAgIHJldHVybiBheGlzO1xuICB9O1xuICB2YXIgZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50ID0gXCJib3R0b21cIiwgZDNfc3ZnX2F4aXNPcmllbnRzID0ge1xuICAgIHRvcDogMSxcbiAgICByaWdodDogMSxcbiAgICBib3R0b206IDEsXG4gICAgbGVmdDogMVxuICB9O1xuICBmdW5jdGlvbiBkM19zdmdfYXhpc1goc2VsZWN0aW9uLCB4MCwgeDEpIHtcbiAgICBzZWxlY3Rpb24uYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgdjAgPSB4MChkKTtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIChpc0Zpbml0ZSh2MCkgPyB2MCA6IHgxKGQpKSArIFwiLDApXCI7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2F4aXNZKHNlbGVjdGlvbiwgeTAsIHkxKSB7XG4gICAgc2VsZWN0aW9uLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIHYwID0geTAoZCk7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArIChpc0Zpbml0ZSh2MCkgPyB2MCA6IHkxKGQpKSArIFwiKVwiO1xuICAgIH0pO1xuICB9XG4gIGQzLnN2Zy5icnVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goYnJ1c2gsIFwiYnJ1c2hzdGFydFwiLCBcImJydXNoXCIsIFwiYnJ1c2hlbmRcIiksIHggPSBudWxsLCB5ID0gbnVsbCwgeEV4dGVudCA9IFsgMCwgMCBdLCB5RXh0ZW50ID0gWyAwLCAwIF0sIHhFeHRlbnREb21haW4sIHlFeHRlbnREb21haW4sIHhDbGFtcCA9IHRydWUsIHlDbGFtcCA9IHRydWUsIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWzBdO1xuICAgIGZ1bmN0aW9uIGJydXNoKGcpIHtcbiAgICAgIGcuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGcgPSBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKS5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIikub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgYnJ1c2hzdGFydCkub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIGJydXNoc3RhcnQpO1xuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGcuc2VsZWN0QWxsKFwiLmJhY2tncm91bmRcIikuZGF0YShbIDAgXSk7XG4gICAgICAgIGJhY2tncm91bmQuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBcImJhY2tncm91bmRcIikuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpLnN0eWxlKFwiY3Vyc29yXCIsIFwiY3Jvc3NoYWlyXCIpO1xuICAgICAgICBnLnNlbGVjdEFsbChcIi5leHRlbnRcIikuZGF0YShbIDAgXSkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBcImV4dGVudFwiKS5zdHlsZShcImN1cnNvclwiLCBcIm1vdmVcIik7XG4gICAgICAgIHZhciByZXNpemUgPSBnLnNlbGVjdEFsbChcIi5yZXNpemVcIikuZGF0YShyZXNpemVzLCBkM19pZGVudGl0eSk7XG4gICAgICAgIHJlc2l6ZS5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgIHJlc2l6ZS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gXCJyZXNpemUgXCIgKyBkO1xuICAgICAgICB9KS5zdHlsZShcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIGQzX3N2Z19icnVzaEN1cnNvcltkXTtcbiAgICAgICAgfSkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIC9bZXddJC8udGVzdChkKSA/IC0zIDogbnVsbDtcbiAgICAgICAgfSkuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiAvXltuc10vLnRlc3QoZCkgPyAtMyA6IG51bGw7XG4gICAgICAgIH0pLmF0dHIoXCJ3aWR0aFwiLCA2KS5hdHRyKFwiaGVpZ2h0XCIsIDYpLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgcmVzaXplLnN0eWxlKFwiZGlzcGxheVwiLCBicnVzaC5lbXB0eSgpID8gXCJub25lXCIgOiBudWxsKTtcbiAgICAgICAgdmFyIGdVcGRhdGUgPSBkMy50cmFuc2l0aW9uKGcpLCBiYWNrZ3JvdW5kVXBkYXRlID0gZDMudHJhbnNpdGlvbihiYWNrZ3JvdW5kKSwgcmFuZ2U7XG4gICAgICAgIGlmICh4KSB7XG4gICAgICAgICAgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHgpO1xuICAgICAgICAgIGJhY2tncm91bmRVcGRhdGUuYXR0cihcInhcIiwgcmFuZ2VbMF0pLmF0dHIoXCJ3aWR0aFwiLCByYW5nZVsxXSAtIHJhbmdlWzBdKTtcbiAgICAgICAgICByZWRyYXdYKGdVcGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh5KSB7XG4gICAgICAgICAgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHkpO1xuICAgICAgICAgIGJhY2tncm91bmRVcGRhdGUuYXR0cihcInlcIiwgcmFuZ2VbMF0pLmF0dHIoXCJoZWlnaHRcIiwgcmFuZ2VbMV0gLSByYW5nZVswXSk7XG4gICAgICAgICAgcmVkcmF3WShnVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZWRyYXcoZ1VwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYnJ1c2guZXZlbnQgPSBmdW5jdGlvbihnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBldmVudF8gPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpLCBleHRlbnQxID0ge1xuICAgICAgICAgIHg6IHhFeHRlbnQsXG4gICAgICAgICAgeTogeUV4dGVudCxcbiAgICAgICAgICBpOiB4RXh0ZW50RG9tYWluLFxuICAgICAgICAgIGo6IHlFeHRlbnREb21haW5cbiAgICAgICAgfSwgZXh0ZW50MCA9IHRoaXMuX19jaGFydF9fIHx8IGV4dGVudDE7XG4gICAgICAgIHRoaXMuX19jaGFydF9fID0gZXh0ZW50MTtcbiAgICAgICAgaWYgKGQzX3RyYW5zaXRpb25Jbmhlcml0SWQpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSBleHRlbnQwLmk7XG4gICAgICAgICAgICB5RXh0ZW50RG9tYWluID0gZXh0ZW50MC5qO1xuICAgICAgICAgICAgeEV4dGVudCA9IGV4dGVudDAueDtcbiAgICAgICAgICAgIHlFeHRlbnQgPSBleHRlbnQwLnk7XG4gICAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkudHdlZW4oXCJicnVzaDpicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB4aSA9IGQzX2ludGVycG9sYXRlQXJyYXkoeEV4dGVudCwgZXh0ZW50MS54KSwgeWkgPSBkM19pbnRlcnBvbGF0ZUFycmF5KHlFeHRlbnQsIGV4dGVudDEueSk7XG4gICAgICAgICAgICB4RXh0ZW50RG9tYWluID0geUV4dGVudERvbWFpbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICB4RXh0ZW50ID0gZXh0ZW50MS54ID0geGkodCk7XG4gICAgICAgICAgICAgIHlFeHRlbnQgPSBleHRlbnQxLnkgPSB5aSh0KTtcbiAgICAgICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG4gICAgICAgICAgICAgICAgbW9kZTogXCJyZXNpemVcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkuZWFjaChcImVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSBleHRlbnQxLmk7XG4gICAgICAgICAgICB5RXh0ZW50RG9tYWluID0gZXh0ZW50MS5qO1xuICAgICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJicnVzaFwiLFxuICAgICAgICAgICAgICBtb2RlOiBcInJlc2l6ZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hzdGFydFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hcIixcbiAgICAgICAgICAgIG1vZGU6IFwicmVzaXplXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgdHlwZTogXCJicnVzaGVuZFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgZnVuY3Rpb24gcmVkcmF3KGcpIHtcbiAgICAgIGcuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeEV4dGVudFsrL2UkLy50ZXN0KGQpXSArIFwiLFwiICsgeUV4dGVudFsrL15zLy50ZXN0KGQpXSArIFwiKVwiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHJhd1goZykge1xuICAgICAgZy5zZWxlY3QoXCIuZXh0ZW50XCIpLmF0dHIoXCJ4XCIsIHhFeHRlbnRbMF0pO1xuICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50LC5uPnJlY3QsLnM+cmVjdFwiKS5hdHRyKFwid2lkdGhcIiwgeEV4dGVudFsxXSAtIHhFeHRlbnRbMF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWRyYXdZKGcpIHtcbiAgICAgIGcuc2VsZWN0KFwiLmV4dGVudFwiKS5hdHRyKFwieVwiLCB5RXh0ZW50WzBdKTtcbiAgICAgIGcuc2VsZWN0QWxsKFwiLmV4dGVudCwuZT5yZWN0LC53PnJlY3RcIikuYXR0cihcImhlaWdodFwiLCB5RXh0ZW50WzFdIC0geUV4dGVudFswXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJydXNoc3RhcnQoKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgZXZlbnRUYXJnZXQgPSBkMy5zZWxlY3QoZDMuZXZlbnQudGFyZ2V0KSwgZXZlbnRfID0gZXZlbnQub2YodGFyZ2V0LCBhcmd1bWVudHMpLCBnID0gZDMuc2VsZWN0KHRhcmdldCksIHJlc2l6aW5nID0gZXZlbnRUYXJnZXQuZGF0dW0oKSwgcmVzaXppbmdYID0gIS9eKG58cykkLy50ZXN0KHJlc2l6aW5nKSAmJiB4LCByZXNpemluZ1kgPSAhL14oZXx3KSQvLnRlc3QocmVzaXppbmcpICYmIHksIGRyYWdnaW5nID0gZXZlbnRUYXJnZXQuY2xhc3NlZChcImV4dGVudFwiKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgY2VudGVyLCBvcmlnaW4gPSBkMy5tb3VzZSh0YXJnZXQpLCBvZmZzZXQ7XG4gICAgICB2YXIgdyA9IGQzLnNlbGVjdChkM193aW5kb3codGFyZ2V0KSkub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd24pLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXApO1xuICAgICAgaWYgKGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIHcub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcInRvdWNoZW5kLmJydXNoXCIsIGJydXNoZW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHcub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcIm1vdXNldXAuYnJ1c2hcIiwgYnJ1c2hlbmQpO1xuICAgICAgfVxuICAgICAgZy5pbnRlcnJ1cHQoKS5zZWxlY3RBbGwoXCIqXCIpLmludGVycnVwdCgpO1xuICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbMF0gLSBvcmlnaW5bMF07XG4gICAgICAgIG9yaWdpblsxXSA9IHlFeHRlbnRbMF0gLSBvcmlnaW5bMV07XG4gICAgICB9IGVsc2UgaWYgKHJlc2l6aW5nKSB7XG4gICAgICAgIHZhciBleCA9ICsvdyQvLnRlc3QocmVzaXppbmcpLCBleSA9ICsvXm4vLnRlc3QocmVzaXppbmcpO1xuICAgICAgICBvZmZzZXQgPSBbIHhFeHRlbnRbMSAtIGV4XSAtIG9yaWdpblswXSwgeUV4dGVudFsxIC0gZXldIC0gb3JpZ2luWzFdIF07XG4gICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbZXhdO1xuICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50W2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoZDMuZXZlbnQuYWx0S2V5KSBjZW50ZXIgPSBvcmlnaW4uc2xpY2UoKTtcbiAgICAgIGcuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIikuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5zdHlsZShcImRpc3BsYXlcIiwgbnVsbCk7XG4gICAgICBkMy5zZWxlY3QoXCJib2R5XCIpLnN0eWxlKFwiY3Vyc29yXCIsIGV2ZW50VGFyZ2V0LnN0eWxlKFwiY3Vyc29yXCIpKTtcbiAgICAgIGV2ZW50Xyh7XG4gICAgICAgIHR5cGU6IFwiYnJ1c2hzdGFydFwiXG4gICAgICB9KTtcbiAgICAgIGJydXNobW92ZSgpO1xuICAgICAgZnVuY3Rpb24ga2V5ZG93bigpIHtcbiAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIpIHtcbiAgICAgICAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICAgICAgICBjZW50ZXIgPSBudWxsO1xuICAgICAgICAgICAgb3JpZ2luWzBdIC09IHhFeHRlbnRbMV07XG4gICAgICAgICAgICBvcmlnaW5bMV0gLT0geUV4dGVudFsxXTtcbiAgICAgICAgICAgIGRyYWdnaW5nID0gMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBrZXl1cCgpIHtcbiAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIgJiYgZHJhZ2dpbmcgPT0gMikge1xuICAgICAgICAgIG9yaWdpblswXSArPSB4RXh0ZW50WzFdO1xuICAgICAgICAgIG9yaWdpblsxXSArPSB5RXh0ZW50WzFdO1xuICAgICAgICAgIGRyYWdnaW5nID0gMDtcbiAgICAgICAgICBkM19ldmVudFByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJydXNobW92ZSgpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gZDMubW91c2UodGFyZ2V0KSwgbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgIHBvaW50WzBdICs9IG9mZnNldFswXTtcbiAgICAgICAgICBwb2ludFsxXSArPSBvZmZzZXRbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgICAgIGlmIChkMy5ldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgIGlmICghY2VudGVyKSBjZW50ZXIgPSBbICh4RXh0ZW50WzBdICsgeEV4dGVudFsxXSkgLyAyLCAoeUV4dGVudFswXSArIHlFeHRlbnRbMV0pIC8gMiBdO1xuICAgICAgICAgICAgb3JpZ2luWzBdID0geEV4dGVudFsrKHBvaW50WzBdIDwgY2VudGVyWzBdKV07XG4gICAgICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50WysocG9pbnRbMV0gPCBjZW50ZXJbMV0pXTtcbiAgICAgICAgICB9IGVsc2UgY2VudGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzaXppbmdYICYmIG1vdmUxKHBvaW50LCB4LCAwKSkge1xuICAgICAgICAgIHJlZHJhd1goZyk7XG4gICAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNpemluZ1kgJiYgbW92ZTEocG9pbnQsIHksIDEpKSB7XG4gICAgICAgICAgcmVkcmF3WShnKTtcbiAgICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vdmVkKSB7XG4gICAgICAgICAgcmVkcmF3KGcpO1xuICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG4gICAgICAgICAgICBtb2RlOiBkcmFnZ2luZyA/IFwibW92ZVwiIDogXCJyZXNpemVcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBtb3ZlMShwb2ludCwgc2NhbGUsIGkpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gZDNfc2NhbGVSYW5nZShzY2FsZSksIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV0sIHBvc2l0aW9uID0gb3JpZ2luW2ldLCBleHRlbnQgPSBpID8geUV4dGVudCA6IHhFeHRlbnQsIHNpemUgPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIG1pbiwgbWF4O1xuICAgICAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgICAgICByMCAtPSBwb3NpdGlvbjtcbiAgICAgICAgICByMSAtPSBzaXplICsgcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gKGkgPyB5Q2xhbXAgOiB4Q2xhbXApID8gTWF0aC5tYXgocjAsIE1hdGgubWluKHIxLCBwb2ludFtpXSkpIDogcG9pbnRbaV07XG4gICAgICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgICAgIG1heCA9IChtaW4gKz0gcG9zaXRpb24pICsgc2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY2VudGVyKSBwb3NpdGlvbiA9IE1hdGgubWF4KHIwLCBNYXRoLm1pbihyMSwgMiAqIGNlbnRlcltpXSAtIG1pbikpO1xuICAgICAgICAgIGlmIChwb3NpdGlvbiA8IG1pbikge1xuICAgICAgICAgICAgbWF4ID0gbWluO1xuICAgICAgICAgICAgbWluID0gcG9zaXRpb247XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heCA9IHBvc2l0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZW50WzBdICE9IG1pbiB8fCBleHRlbnRbMV0gIT0gbWF4KSB7XG4gICAgICAgICAgaWYgKGkpIHlFeHRlbnREb21haW4gPSBudWxsOyBlbHNlIHhFeHRlbnREb21haW4gPSBudWxsO1xuICAgICAgICAgIGV4dGVudFswXSA9IG1pbjtcbiAgICAgICAgICBleHRlbnRbMV0gPSBtYXg7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJydXNoZW5kKCkge1xuICAgICAgICBicnVzaG1vdmUoKTtcbiAgICAgICAgZy5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpLnNlbGVjdEFsbChcIi5yZXNpemVcIikuc3R5bGUoXCJkaXNwbGF5XCIsIGJydXNoLmVtcHR5KCkgPyBcIm5vbmVcIiA6IG51bGwpO1xuICAgICAgICBkMy5zZWxlY3QoXCJib2R5XCIpLnN0eWxlKFwiY3Vyc29yXCIsIG51bGwpO1xuICAgICAgICB3Lm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG51bGwpLm9uKFwibW91c2V1cC5icnVzaFwiLCBudWxsKS5vbihcInRvdWNobW92ZS5icnVzaFwiLCBudWxsKS5vbihcInRvdWNoZW5kLmJydXNoXCIsIG51bGwpLm9uKFwia2V5ZG93bi5icnVzaFwiLCBudWxsKS5vbihcImtleXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgICBkcmFnUmVzdG9yZSgpO1xuICAgICAgICBldmVudF8oe1xuICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYnJ1c2gueCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHg7XG4gICAgICB4ID0gejtcbiAgICAgIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWyF4IDw8IDEgfCAheV07XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC55ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTtcbiAgICAgIHkgPSB6O1xuICAgICAgcmVzaXplcyA9IGQzX3N2Z19icnVzaFJlc2l6ZXNbIXggPDwgMSB8ICF5XTtcbiAgICAgIHJldHVybiBicnVzaDtcbiAgICB9O1xuICAgIGJydXNoLmNsYW1wID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geCAmJiB5ID8gWyB4Q2xhbXAsIHlDbGFtcCBdIDogeCA/IHhDbGFtcCA6IHkgPyB5Q2xhbXAgOiBudWxsO1xuICAgICAgaWYgKHggJiYgeSkgeENsYW1wID0gISF6WzBdLCB5Q2xhbXAgPSAhIXpbMV07IGVsc2UgaWYgKHgpIHhDbGFtcCA9ICEhejsgZWxzZSBpZiAoeSkgeUNsYW1wID0gISF6O1xuICAgICAgcmV0dXJuIGJydXNoO1xuICAgIH07XG4gICAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oeikge1xuICAgICAgdmFyIHgwLCB4MSwgeTAsIHkxLCB0O1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGlmICh4KSB7XG4gICAgICAgICAgaWYgKHhFeHRlbnREb21haW4pIHtcbiAgICAgICAgICAgIHgwID0geEV4dGVudERvbWFpblswXSwgeDEgPSB4RXh0ZW50RG9tYWluWzFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4MCA9IHhFeHRlbnRbMF0sIHgxID0geEV4dGVudFsxXTtcbiAgICAgICAgICAgIGlmICh4LmludmVydCkgeDAgPSB4LmludmVydCh4MCksIHgxID0geC5pbnZlcnQoeDEpO1xuICAgICAgICAgICAgaWYgKHgxIDwgeDApIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoeSkge1xuICAgICAgICAgIGlmICh5RXh0ZW50RG9tYWluKSB7XG4gICAgICAgICAgICB5MCA9IHlFeHRlbnREb21haW5bMF0sIHkxID0geUV4dGVudERvbWFpblsxXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeTAgPSB5RXh0ZW50WzBdLCB5MSA9IHlFeHRlbnRbMV07XG4gICAgICAgICAgICBpZiAoeS5pbnZlcnQpIHkwID0geS5pbnZlcnQoeTApLCB5MSA9IHkuaW52ZXJ0KHkxKTtcbiAgICAgICAgICAgIGlmICh5MSA8IHkwKSB0ID0geTAsIHkwID0geTEsIHkxID0gdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggJiYgeSA/IFsgWyB4MCwgeTAgXSwgWyB4MSwgeTEgXSBdIDogeCA/IFsgeDAsIHgxIF0gOiB5ICYmIFsgeTAsIHkxIF07XG4gICAgICB9XG4gICAgICBpZiAoeCkge1xuICAgICAgICB4MCA9IHpbMF0sIHgxID0gelsxXTtcbiAgICAgICAgaWYgKHkpIHgwID0geDBbMF0sIHgxID0geDFbMF07XG4gICAgICAgIHhFeHRlbnREb21haW4gPSBbIHgwLCB4MSBdO1xuICAgICAgICBpZiAoeC5pbnZlcnQpIHgwID0geCh4MCksIHgxID0geCh4MSk7XG4gICAgICAgIGlmICh4MSA8IHgwKSB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgICAgICAgaWYgKHgwICE9IHhFeHRlbnRbMF0gfHwgeDEgIT0geEV4dGVudFsxXSkgeEV4dGVudCA9IFsgeDAsIHgxIF07XG4gICAgICB9XG4gICAgICBpZiAoeSkge1xuICAgICAgICB5MCA9IHpbMF0sIHkxID0gelsxXTtcbiAgICAgICAgaWYgKHgpIHkwID0geTBbMV0sIHkxID0geTFbMV07XG4gICAgICAgIHlFeHRlbnREb21haW4gPSBbIHkwLCB5MSBdO1xuICAgICAgICBpZiAoeS5pbnZlcnQpIHkwID0geSh5MCksIHkxID0geSh5MSk7XG4gICAgICAgIGlmICh5MSA8IHkwKSB0ID0geTAsIHkwID0geTEsIHkxID0gdDtcbiAgICAgICAgaWYgKHkwICE9IHlFeHRlbnRbMF0gfHwgeTEgIT0geUV4dGVudFsxXSkgeUV4dGVudCA9IFsgeTAsIHkxIF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFicnVzaC5lbXB0eSgpKSB7XG4gICAgICAgIHhFeHRlbnQgPSBbIDAsIDAgXSwgeUV4dGVudCA9IFsgMCwgMCBdO1xuICAgICAgICB4RXh0ZW50RG9tYWluID0geUV4dGVudERvbWFpbiA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICEheCAmJiB4RXh0ZW50WzBdID09IHhFeHRlbnRbMV0gfHwgISF5ICYmIHlFeHRlbnRbMF0gPT0geUV4dGVudFsxXTtcbiAgICB9O1xuICAgIHJldHVybiBkMy5yZWJpbmQoYnJ1c2gsIGV2ZW50LCBcIm9uXCIpO1xuICB9O1xuICB2YXIgZDNfc3ZnX2JydXNoQ3Vyc29yID0ge1xuICAgIG46IFwibnMtcmVzaXplXCIsXG4gICAgZTogXCJldy1yZXNpemVcIixcbiAgICBzOiBcIm5zLXJlc2l6ZVwiLFxuICAgIHc6IFwiZXctcmVzaXplXCIsXG4gICAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICAgIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gICAgc3c6IFwibmVzdy1yZXNpemVcIlxuICB9O1xuICB2YXIgZDNfc3ZnX2JydXNoUmVzaXplcyA9IFsgWyBcIm5cIiwgXCJlXCIsIFwic1wiLCBcIndcIiwgXCJud1wiLCBcIm5lXCIsIFwic2VcIiwgXCJzd1wiIF0sIFsgXCJlXCIsIFwid1wiIF0sIFsgXCJuXCIsIFwic1wiIF0sIFtdIF07XG4gIHZhciBkM190aW1lX2Zvcm1hdCA9IGQzX3RpbWUuZm9ybWF0ID0gZDNfbG9jYWxlX2VuVVMudGltZUZvcm1hdDtcbiAgdmFyIGQzX3RpbWVfZm9ybWF0VXRjID0gZDNfdGltZV9mb3JtYXQudXRjO1xuICB2YXIgZDNfdGltZV9mb3JtYXRJc28gPSBkM190aW1lX2Zvcm1hdFV0YyhcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiKTtcbiAgZDNfdGltZV9mb3JtYXQuaXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpID8gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUgOiBkM190aW1lX2Zvcm1hdElzbztcbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgZDNfdGltZV9mb3JtYXRJc29OYXRpdmUucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG4gIH07XG4gIGQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlLnRvU3RyaW5nID0gZDNfdGltZV9mb3JtYXRJc28udG9TdHJpbmc7XG4gIGQzX3RpbWUuc2Vjb25kID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDFlMykgKiAxZTMpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAxZTMpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpO1xuICB9KTtcbiAgZDNfdGltZS5zZWNvbmRzID0gZDNfdGltZS5zZWNvbmQucmFuZ2U7XG4gIGQzX3RpbWUuc2Vjb25kcy51dGMgPSBkM190aW1lLnNlY29uZC51dGMucmFuZ2U7XG4gIGQzX3RpbWUubWludXRlID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDZlNCkgKiA2ZTQpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiA2ZTQpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xuICB9KTtcbiAgZDNfdGltZS5taW51dGVzID0gZDNfdGltZS5taW51dGUucmFuZ2U7XG4gIGQzX3RpbWUubWludXRlcy51dGMgPSBkM190aW1lLm1pbnV0ZS51dGMucmFuZ2U7XG4gIGQzX3RpbWUuaG91ciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB0aW1lem9uZSA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwO1xuICAgIHJldHVybiBuZXcgZDNfZGF0ZSgoTWF0aC5mbG9vcihkYXRlIC8gMzZlNSAtIHRpbWV6b25lKSArIHRpbWV6b25lKSAqIDM2ZTUpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAzNmU1KTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG4gIH0pO1xuICBkM190aW1lLmhvdXJzID0gZDNfdGltZS5ob3VyLnJhbmdlO1xuICBkM190aW1lLmhvdXJzLnV0YyA9IGQzX3RpbWUuaG91ci51dGMucmFuZ2U7XG4gIGQzX3RpbWUubW9udGggPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSk7XG4gICAgZGF0ZS5zZXREYXRlKDEpO1xuICAgIHJldHVybiBkYXRlO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xuICB9KTtcbiAgZDNfdGltZS5tb250aHMgPSBkM190aW1lLm1vbnRoLnJhbmdlO1xuICBkM190aW1lLm1vbnRocy51dGMgPSBkM190aW1lLm1vbnRoLnV0Yy5yYW5nZTtcbiAgZnVuY3Rpb24gZDNfdGltZV9zY2FsZShsaW5lYXIsIG1ldGhvZHMsIGZvcm1hdCkge1xuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIoeCk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3NjYWxlRGF0ZShsaW5lYXIuaW52ZXJ0KHgpKTtcbiAgICB9O1xuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmVhci5kb21haW4oKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpO1xuICAgICAgbGluZWFyLmRvbWFpbih4KTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRpY2tNZXRob2QoZXh0ZW50LCBjb3VudCkge1xuICAgICAgdmFyIHNwYW4gPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIHRhcmdldCA9IHNwYW4gLyBjb3VudCwgaSA9IGQzLmJpc2VjdChkM190aW1lX3NjYWxlU3RlcHMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gaSA9PSBkM190aW1lX3NjYWxlU3RlcHMubGVuZ3RoID8gWyBtZXRob2RzLnllYXIsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShleHRlbnQubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQgLyAzMTUzNmU2O1xuICAgICAgfSksIGNvdW50KVsyXSBdIDogIWkgPyBbIGQzX3RpbWVfc2NhbGVNaWxsaXNlY29uZHMsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShleHRlbnQsIGNvdW50KVsyXSBdIDogbWV0aG9kc1t0YXJnZXQgLyBkM190aW1lX3NjYWxlU3RlcHNbaSAtIDFdIDwgZDNfdGltZV9zY2FsZVN0ZXBzW2ldIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcbiAgICB9XG4gICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBza2lwKSB7XG4gICAgICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluKCksIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGRvbWFpbiksIG1ldGhvZCA9IGludGVydmFsID09IG51bGwgPyB0aWNrTWV0aG9kKGV4dGVudCwgMTApIDogdHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiICYmIHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCk7XG4gICAgICBpZiAobWV0aG9kKSBpbnRlcnZhbCA9IG1ldGhvZFswXSwgc2tpcCA9IG1ldGhvZFsxXTtcbiAgICAgIGZ1bmN0aW9uIHNraXBwZWQoZGF0ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKGRhdGUpICYmICFpbnRlcnZhbC5yYW5nZShkYXRlLCBkM190aW1lX3NjYWxlRGF0ZSgrZGF0ZSArIDEpLCBza2lwKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2NhbGUuZG9tYWluKGQzX3NjYWxlX25pY2UoZG9tYWluLCBza2lwID4gMSA/IHtcbiAgICAgICAgZmxvb3I6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB3aGlsZSAoc2tpcHBlZChkYXRlID0gaW50ZXJ2YWwuZmxvb3IoZGF0ZSkpKSBkYXRlID0gZDNfdGltZV9zY2FsZURhdGUoZGF0ZSAtIDEpO1xuICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9LFxuICAgICAgICBjZWlsOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgd2hpbGUgKHNraXBwZWQoZGF0ZSA9IGludGVydmFsLmNlaWwoZGF0ZSkpKSBkYXRlID0gZDNfdGltZV9zY2FsZURhdGUoK2RhdGUgKyAxKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSA6IGludGVydmFsKSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBza2lwKSB7XG4gICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoc2NhbGUuZG9tYWluKCkpLCBtZXRob2QgPSBpbnRlcnZhbCA9PSBudWxsID8gdGlja01ldGhvZChleHRlbnQsIDEwKSA6IHR5cGVvZiBpbnRlcnZhbCA9PT0gXCJudW1iZXJcIiA/IHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCkgOiAhaW50ZXJ2YWwucmFuZ2UgJiYgWyB7XG4gICAgICAgIHJhbmdlOiBpbnRlcnZhbFxuICAgICAgfSwgc2tpcCBdO1xuICAgICAgaWYgKG1ldGhvZCkgaW50ZXJ2YWwgPSBtZXRob2RbMF0sIHNraXAgPSBtZXRob2RbMV07XG4gICAgICByZXR1cm4gaW50ZXJ2YWwucmFuZ2UoZXh0ZW50WzBdLCBkM190aW1lX3NjYWxlRGF0ZSgrZXh0ZW50WzFdICsgMSksIHNraXAgPCAxID8gMSA6IHNraXApO1xuICAgIH07XG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3NjYWxlKGxpbmVhci5jb3B5KCksIG1ldGhvZHMsIGZvcm1hdCk7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGVEYXRlKHQpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodCk7XG4gIH1cbiAgdmFyIGQzX3RpbWVfc2NhbGVTdGVwcyA9IFsgMWUzLCA1ZTMsIDE1ZTMsIDNlNCwgNmU0LCAzZTUsIDllNSwgMThlNSwgMzZlNSwgMTA4ZTUsIDIxNmU1LCA0MzJlNSwgODY0ZTUsIDE3MjhlNSwgNjA0OGU1LCAyNTkyZTYsIDc3NzZlNiwgMzE1MzZlNiBdO1xuICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcyA9IFsgWyBkM190aW1lLnNlY29uZCwgMSBdLCBbIGQzX3RpbWUuc2Vjb25kLCA1IF0sIFsgZDNfdGltZS5zZWNvbmQsIDE1IF0sIFsgZDNfdGltZS5zZWNvbmQsIDMwIF0sIFsgZDNfdGltZS5taW51dGUsIDEgXSwgWyBkM190aW1lLm1pbnV0ZSwgNSBdLCBbIGQzX3RpbWUubWludXRlLCAxNSBdLCBbIGQzX3RpbWUubWludXRlLCAzMCBdLCBbIGQzX3RpbWUuaG91ciwgMSBdLCBbIGQzX3RpbWUuaG91ciwgMyBdLCBbIGQzX3RpbWUuaG91ciwgNiBdLCBbIGQzX3RpbWUuaG91ciwgMTIgXSwgWyBkM190aW1lLmRheSwgMSBdLCBbIGQzX3RpbWUuZGF5LCAyIF0sIFsgZDNfdGltZS53ZWVrLCAxIF0sIFsgZDNfdGltZS5tb250aCwgMSBdLCBbIGQzX3RpbWUubW9udGgsIDMgXSwgWyBkM190aW1lLnllYXIsIDEgXSBdO1xuICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsRm9ybWF0ID0gZDNfdGltZV9mb3JtYXQubXVsdGkoWyBbIFwiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgfSBdLCBbIFwiOiVTXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRTZWNvbmRzKCk7XG4gIH0gXSwgWyBcIiVJOiVNXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRNaW51dGVzKCk7XG4gIH0gXSwgWyBcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRIb3VycygpO1xuICB9IF0sIFsgXCIlYSAlZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0RGF5KCkgJiYgZC5nZXREYXRlKCkgIT0gMTtcbiAgfSBdLCBbIFwiJWIgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldERhdGUoKSAhPSAxO1xuICB9IF0sIFsgXCIlQlwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0TW9udGgoKTtcbiAgfSBdLCBbIFwiJVlcIiwgZDNfdHJ1ZSBdIF0pO1xuICB2YXIgZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcyA9IHtcbiAgICByYW5nZTogZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKSAqIHN0ZXAsICtzdG9wLCBzdGVwKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpO1xuICAgIH0sXG4gICAgZmxvb3I6IGQzX2lkZW50aXR5LFxuICAgIGNlaWw6IGQzX2lkZW50aXR5XG4gIH07XG4gIGQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMueWVhciA9IGQzX3RpbWUueWVhcjtcbiAgZDNfdGltZS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM190aW1lX3NjYWxlKGQzLnNjYWxlLmxpbmVhcigpLCBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLCBkM190aW1lX3NjYWxlTG9jYWxGb3JtYXQpO1xuICB9O1xuICB2YXIgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMgPSBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLm1hcChmdW5jdGlvbihtKSB7XG4gICAgcmV0dXJuIFsgbVswXS51dGMsIG1bMV0gXTtcbiAgfSk7XG4gIHZhciBkM190aW1lX3NjYWxlVXRjRm9ybWF0ID0gZDNfdGltZV9mb3JtYXRVdGMubXVsdGkoWyBbIFwiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgfSBdLCBbIFwiOiVTXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENTZWNvbmRzKCk7XG4gIH0gXSwgWyBcIiVJOiVNXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENNaW51dGVzKCk7XG4gIH0gXSwgWyBcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENIb3VycygpO1xuICB9IF0sIFsgXCIlYSAlZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDRGF5KCkgJiYgZC5nZXRVVENEYXRlKCkgIT0gMTtcbiAgfSBdLCBbIFwiJWIgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldFVUQ0RhdGUoKSAhPSAxO1xuICB9IF0sIFsgXCIlQlwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDTW9udGgoKTtcbiAgfSBdLCBbIFwiJVlcIiwgZDNfdHJ1ZSBdIF0pO1xuICBkM190aW1lX3NjYWxlVXRjTWV0aG9kcy55ZWFyID0gZDNfdGltZS55ZWFyLnV0YztcbiAgZDNfdGltZS5zY2FsZS51dGMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfdGltZV9zY2FsZShkMy5zY2FsZS5saW5lYXIoKSwgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMsIGQzX3RpbWVfc2NhbGVVdGNGb3JtYXQpO1xuICB9O1xuICBkMy50ZXh0ID0gZDNfeGhyVHlwZShmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9KTtcbiAgZDMuanNvbiA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZDNfeGhyKHVybCwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIGQzX2pzb24sIGNhbGxiYWNrKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfanNvbihyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICB9XG4gIGQzLmh0bWwgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGQzX3hocih1cmwsIFwidGV4dC9odG1sXCIsIGQzX2h0bWwsIGNhbGxiYWNrKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfaHRtbChyZXF1ZXN0KSB7XG4gICAgdmFyIHJhbmdlID0gZDNfZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZWxlY3ROb2RlKGQzX2RvY3VtZW50LmJvZHkpO1xuICAgIHJldHVybiByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICB9XG4gIGQzLnhtbCA9IGQzX3hoclR5cGUoZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlWE1MO1xuICB9KTtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB0aGlzLmQzID0gZDMsIGRlZmluZShkMyk7IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZDM7IGVsc2UgdGhpcy5kMyA9IGQzO1xufSgpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2QzL2QzLmpzXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0ICogYXMgJCBmcm9tIFwianF1ZXJ5XCI7XG5cbmV4cG9ydCBjbGFzcyBCYXNlRWxlbWVudCB7XG5cbiAgIGNvbnN0cnVjdG9yIChwcm90ZWN0ZWQgc3ZnOiBkMy5TZWxlY3Rpb248YW55PikgeyB9XG5cbiAgICBnZXQgY3goKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggLyAyO1xuICAgIH1cblxuICAgIGdldCBjeSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQgLyAyO1xuICAgIH1cblxuICAgIGdldCB3aWR0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKyQoXCIudmlzdWFsaXplclwiKS53aWR0aCgpXG4gICAgfVxuXG4gICAgZ2V0IGhlaWdodCgpOiBudW1iZXIgIHtcbiAgICAgICAgcmV0dXJuICskKFwiLnZpc3VhbGl6ZXJcIikuaGVpZ2h0KClcbiAgICB9XG5cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NvbXBvbmVudHMvdmlzdWFsaXplci9lbGVtZW50cy9iYXNlLWVsZW1lbnQudHNcbiAqKi8iLCIvKlxyXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qL1xyXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBsaXN0ID0gW107XHJcblxyXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcclxuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IHRoaXNbaV07XHJcblx0XHRcdGlmKGl0ZW1bMl0pIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGl0ZW1bMV0gKyBcIn1cIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goaXRlbVsxXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcclxuXHR9O1xyXG5cclxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxyXG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcclxuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxyXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XHJcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcclxuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxyXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xyXG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXHJcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXHJcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXHJcblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXHJcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XHJcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XHJcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRyZXR1cm4gbGlzdDtcclxufTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9TYW5zdW1pLVJlZ3VsYXIuZW90XCI7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9zdGF0aWMvZm9udHMvU2Fuc3VtaS1SZWd1bGFyLmVvdFxuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbnZhciBzdHlsZXNJbkRvbSA9IHt9LFxyXG5cdG1lbW9pemUgPSBmdW5jdGlvbihmbikge1xyXG5cdFx0dmFyIG1lbW87XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRyZXR1cm4gbWVtbztcclxuXHRcdH07XHJcblx0fSxcclxuXHRpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiAvbXNpZSBbNi05XVxcYi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcclxuXHR9KSxcclxuXHRnZXRIZWFkRWxlbWVudCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cdH0pLFxyXG5cdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxyXG5cdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxyXG5cdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wID0gW107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRpZih0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcclxuXHRcdGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xyXG5cdH1cclxuXHJcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XHJcblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xyXG5cclxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XHJcblxyXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcclxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xyXG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHR9XHJcblx0XHRpZihuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XHJcblx0XHR9XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcclxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKCk7XHJcblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XHJcblx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XHJcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHR2YXIgc3R5bGVzID0gW107XHJcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XHJcblx0XHR2YXIgaWQgPSBpdGVtWzBdO1xyXG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XHJcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRpZighbmV3U3R5bGVzW2lkXSlcclxuXHRcdFx0c3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcclxuXHRcdGVsc2VcclxuXHRcdFx0bmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xyXG5cdH1cclxuXHRyZXR1cm4gc3R5bGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wW3N0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xyXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRpZighbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcclxuXHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBoZWFkLmZpcnN0Q2hpbGQpO1xyXG5cdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AucHVzaChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XHJcblx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdGlmKGlkeCA+PSAwKSB7XHJcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuXHRzdHlsZUVsZW1lbnQudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRyZXR1cm4gc3R5bGVFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XHJcblx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmtFbGVtZW50KTtcclxuXHRyZXR1cm4gbGlua0VsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xyXG5cdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cclxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcclxuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0c3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XHJcblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSk7XHJcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHR9IGVsc2UgaWYob2JqLnNvdXJjZU1hcCAmJlxyXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHRpZihzdHlsZUVsZW1lbnQuaHJlZilcclxuXHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZShvYmopO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRpZihuZXdPYmopIHtcclxuXHRcdFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcclxuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xyXG5cdH07XHJcbn0pKCk7XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cclxuXHRpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xyXG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGVFbGVtZW50LCBvYmopIHtcclxuXHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblxyXG5cdGlmKG1lZGlhKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXHJcblx0fVxyXG5cclxuXHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcclxuXHR9IGVsc2Uge1xyXG5cdFx0d2hpbGUoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuXHRcdH1cclxuXHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUxpbmsobGlua0VsZW1lbnQsIG9iaikge1xyXG5cdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cclxuXHRpZihzb3VyY2VNYXApIHtcclxuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XHJcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XHJcblx0fVxyXG5cclxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcclxuXHJcblx0dmFyIG9sZFNyYyA9IGxpbmtFbGVtZW50LmhyZWY7XHJcblxyXG5cdGxpbmtFbGVtZW50LmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cclxuXHRpZihvbGRTcmMpXHJcblx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XHJcbn1cclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydCAqIGZyb20gJy4vdHJhbnNmb3JtcydcbmV4cG9ydCAqIGZyb20gJy4vdGV4dC1tYW5pcHVsYXRpb24nXG5leHBvcnQgKiBmcm9tICcuL2RhdGEtbWFwcGVyJ1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2luZGV4LnRzXG4gKiovIiwiKGZ1bmN0aW9uKHNlbGYpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChzZWxmLmZldGNoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gICAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVyYXRvclxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIGxpc3QgPSB0aGlzLm1hcFtuYW1lXVxuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IFtdXG4gICAgICB0aGlzLm1hcFtuYW1lXSA9IGxpc3RcbiAgICB9XG4gICAgbGlzdC5wdXNoKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICAgIHJldHVybiB2YWx1ZXMgPyB2YWx1ZXNbMF0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldIHx8IFtdXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gW25vcm1hbGl6ZVZhbHVlKHZhbHVlKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMubWFwKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwgbmFtZSwgdGhpcylcbiAgICAgIH0sIHRoaXMpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgICByZXR1cm4gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIC8vIE9ubHkgc3VwcG9ydCBBcnJheUJ1ZmZlcnMgZm9yIFBPU1QgbWV0aG9kLlxuICAgICAgICAvLyBSZWNlaXZpbmcgQXJyYXlCdWZmZXJzIGhhcHBlbnMgdmlhIEJsb2JzLCBpbnN0ZWFkLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG5cbiAgICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkID8gcmVqZWN0ZWQgOiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG4gICAgaWYgKFJlcXVlc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoaW5wdXQpKSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gaW5wdXRcbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0J1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcylcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gaGVhZGVycyh4aHIpIHtcbiAgICB2YXIgaGVhZCA9IG5ldyBIZWFkZXJzKClcbiAgICB2YXIgcGFpcnMgPSAoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKS50cmltKCkuc3BsaXQoJ1xcbicpXG4gICAgcGFpcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHZhciBzcGxpdCA9IGhlYWRlci50cmltKCkuc3BsaXQoJzonKVxuICAgICAgdmFyIGtleSA9IHNwbGl0LnNoaWZ0KCkudHJpbSgpXG4gICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc6JykudHJpbSgpXG4gICAgICBoZWFkLmFwcGVuZChrZXksIHZhbHVlKVxuICAgIH0pXG4gICAgcmV0dXJuIGhlYWRcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1c1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHRcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzID8gb3B0aW9ucy5oZWFkZXJzIDogbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfVxuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2VcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdFxuICAgICAgaWYgKFJlcXVlc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoaW5wdXQpICYmICFpbml0KSB7XG4gICAgICAgIHJlcXVlc3QgPSBpbnB1dFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICAgICAgfVxuXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgZnVuY3Rpb24gcmVzcG9uc2VVUkwoKSB7XG4gICAgICAgIGlmICgncmVzcG9uc2VVUkwnIGluIHhocikge1xuICAgICAgICAgIHJldHVybiB4aHIucmVzcG9uc2VVUkxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF2b2lkIHNlY3VyaXR5IHdhcm5pbmdzIG9uIGdldFJlc3BvbnNlSGVhZGVyIHdoZW4gbm90IGFsbG93ZWQgYnkgQ09SU1xuICAgICAgICBpZiAoL15YLVJlcXVlc3QtVVJMOi9tLnRlc3QoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkge1xuICAgICAgICAgIHJldHVybiB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoeGhyKSxcbiAgICAgICAgICB1cmw6IHJlc3BvbnNlVVJMKClcbiAgICAgICAgfVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vd2hhdHdnLWZldGNoL2ZldGNoLmpzXG4gKiogbW9kdWxlIGlkID0gOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNle2ZvbnQtZmFtaWx5OlNhbnN1bWktUmVndWxhcjtzcmM6dXJsKFwiICsgcmVxdWlyZShcIi4vU2Fuc3VtaS1SZWd1bGFyLmVvdFwiKSArIFwiKTtzcmM6dXJsKFwiICsgcmVxdWlyZShcIi4vU2Fuc3VtaS1SZWd1bGFyLndvZmYyXCIpICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSx1cmwoXCIgKyByZXF1aXJlKFwiLi9TYW5zdW1pLVJlZ3VsYXIud29mZlwiKSArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSx1cmwoXCIgKyByZXF1aXJlKFwiLi9TYW5zdW1pLVJlZ3VsYXIudHRmXCIpICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXCIgKyByZXF1aXJlKFwiLi9TYW5zdW1pLVJlZ3VsYXIuc3ZnXCIpICsgXCIjU2Fuc3VtaS1SZWd1bGFyKSBmb3JtYXQoXFxcInN2Z1xcXCIpLHVybChcIiArIHJlcXVpcmUoXCIuL1NhbnN1bWktUmVndWxhci5lb3RcIikgKyBcIj8jaWVmaXgpIGZvcm1hdChcXFwiZW1iZWRkZWQtb3BlbnR5cGVcXFwiKTtmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL34vcG9zdGNzcy1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyIS4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3JtYWxpemUtc2NzcyB8IE1JVC9HUEx2MiBMaWNlbnNlIHwgYml0Lmx5L25vcm1hbGl6ZS1zY3NzICovaHRtbHtmb250LWZhbWlseTpzYW5zLXNlcmlmOy1tcy10ZXh0LXNpemUtYWRqdXN0OjEwMCU7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OjEwMCV9Ym9keXttYXJnaW46MH1hcnRpY2xlLGFzaWRlLGRldGFpbHMsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGhlYWRlcixtYWluLG1lbnUsbmF2LHNlY3Rpb24sc3VtbWFyeXtkaXNwbGF5OmJsb2NrfWF1ZGlvLGNhbnZhcyxwcm9ncmVzcyx2aWRlb3tkaXNwbGF5OmlubGluZS1ibG9ja31hdWRpbzpub3QoW2NvbnRyb2xzXSl7ZGlzcGxheTpub25lO2hlaWdodDowfXByb2dyZXNze3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfVtoaWRkZW5dLHRlbXBsYXRle2Rpc3BsYXk6bm9uZX1he2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcDpvYmplY3RzfWE6YWN0aXZlLGE6aG92ZXJ7b3V0bGluZS13aWR0aDowfWFiYnJbdGl0bGVde2JvcmRlci1ib3R0b206bm9uZTt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUgZG90dGVkfWIsc3Ryb25ne2ZvbnQtd2VpZ2h0OmluaGVyaXQ7Zm9udC13ZWlnaHQ6Ym9sZGVyfWNvZGUsa2JkLHNhbXB7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLG1vbm9zcGFjZTtmb250LXNpemU6MWVtfWRmbntmb250LXN0eWxlOml0YWxpY31oMXtmb250LXNpemU6MmVtO21hcmdpbjouNzVlbSAwfW1hcmt7YmFja2dyb3VuZC1jb2xvcjojZmYwO2NvbG9yOiMwMDB9c21hbGx7Zm9udC1zaXplOjgwJX1zdWIsc3Vwe2ZvbnQtc2l6ZTo3NSU7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjpyZWxhdGl2ZTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX1zdWJ7Ym90dG9tOi0uMjVlbX1zdXB7dG9wOi0uNWVtfWltZ3tib3JkZXItc3R5bGU6bm9uZX1zdmc6bm90KDpyb290KXtvdmVyZmxvdzpoaWRkZW59ZmlndXJle21hcmdpbjoxLjVlbSA0MHB4fWhye2JveC1zaXppbmc6Y29udGVudC1ib3g7aGVpZ2h0OjA7b3ZlcmZsb3c6dmlzaWJsZX1wcmV7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLG1vbm9zcGFjZTtmb250LXNpemU6MWVtfWJ1dHRvbixpbnB1dCxvcHRncm91cCxzZWxlY3QsdGV4dGFyZWF7Zm9udDppbmhlcml0O21hcmdpbjowfWJ1dHRvbntvdmVyZmxvdzp2aXNpYmxlfWJ1dHRvbixzZWxlY3R7dGV4dC10cmFuc2Zvcm06bm9uZX1bdHlwZT1yZXNldF0sW3R5cGU9c3VibWl0XSxidXR0b24saHRtbCBbdHlwZT1idXR0b25dey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b259W3R5cGU9YnV0dG9uXTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1yZXNldF06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9c3VibWl0XTo6LW1vei1mb2N1cy1pbm5lcixidXR0b246Oi1tb3otZm9jdXMtaW5uZXJ7Ym9yZGVyLXN0eWxlOm5vbmU7cGFkZGluZzowfVt0eXBlPWJ1dHRvbl06LW1vei1mb2N1c3JpbmcsW3R5cGU9cmVzZXRdOi1tb3otZm9jdXNyaW5nLFt0eXBlPXN1Ym1pdF06LW1vei1mb2N1c3JpbmcsYnV0dG9uOi1tb3otZm9jdXNyaW5ne291dGxpbmU6MXB4IGRvdHRlZCBCdXR0b25UZXh0fWlucHV0e292ZXJmbG93OnZpc2libGV9W3R5cGU9Y2hlY2tib3hdLFt0eXBlPXJhZGlvXXtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzowfVt0eXBlPW51bWJlcl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sW3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbntoZWlnaHQ6YXV0b31bdHlwZT1zZWFyY2hdey13ZWJraXQtYXBwZWFyYW5jZTp0ZXh0ZmllbGQ7b3V0bGluZS1vZmZzZXQ6LTJweH1bdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb257LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOmluaGVyaXQ7b3BhY2l0eTouNTR9Ojotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbnstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO2ZvbnQ6aW5oZXJpdH1maWVsZHNldHtib3JkZXI6MXB4IHNvbGlkIHNpbHZlcjttYXJnaW46MCAycHg7cGFkZGluZzouMzVlbSAuNjI1ZW0gLjc1ZW19bGVnZW5ke2JveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OnRhYmxlO21heC13aWR0aDoxMDAlO3doaXRlLXNwYWNlOm5vcm1hbDtjb2xvcjppbmhlcml0O3BhZGRpbmc6MH1vcHRncm91cHtmb250LXdlaWdodDo3MDB9dGV4dGFyZWF7b3ZlcmZsb3c6YXV0b31oMSxoMixsYWJlbCxwe2ZvbnQtZmFtaWx5OlNhbnN1bWktUmVndWxhcn1ib2R5LGh0bWx7aGVpZ2h0OjEwMCU7ZmxleC1kaXJlY3Rpb246Y29sdW1uO21pbi1oZWlnaHQ6MTAwdmh9bGFiZWx7Zm9udC1zaXplOjEycHh9aDF7Zm9udC1zaXplOjE4cHh9aDJ7Zm9udC1zaXplOjE2cHh9LmNvbnRlbnR7d2lkdGg6MTAwJTtoZWlnaHQ6Y2FsYygxMDAlIC0gODBweCk7ZGlzcGxheTpmbGV4O2ZsZXg6MX0ubm9kZSBjaXJjbGV7c3Ryb2tlOiMxZmJhZDc7c3Ryb2tlLXdpZHRoOjJweH0ubm9kZSAubm9kZS1jb2xvci0xe2ZpbGw6IzZlODY4ZH0ubm9kZSAubm9kZS1jb2xvci0ye2ZpbGw6IzU2NzE3YX0ubm9kZSAubm9kZS1jb2xvci0ze2ZpbGw6IzNlNWQ2N30ubm9kZSAubm9kZS1jb2xvci00e2ZpbGw6IzI2NDk1NH0ubm9kZSAubm9kZS1jb2xvci01e2ZpbGw6IzBlMzU0MX0ubm9kZSBkaXZ7ZGlzcGxheTp0YWJsZTtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO292ZXJmbG93OmhpZGRlbn0ubm9kZSBwe2ZvbnQtc2l6ZTo4cHg7Y29sb3I6I2YyZjJmMjt0ZXh0LXNoYWRvdzoxcHggMXB4IDRweCAjMGUzNTQxO2Rpc3BsYXk6dGFibGUtY2VsbDt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LmxvYWRlciBjaXJjbGV7ZmlsbC1vcGFjaXR5OjA7c3Ryb2tlOiMxZjc3YjQ7c3Ryb2tlLXdpZHRoOjNweH0ubG9hZGVyIHJlY3R7ZmlsbDojZmZmfS52aXN1YWxpemVye3dpZHRoOjEwMCU7ZmxleDoxfS50b3AtYmFye2JhY2tncm91bmQtY29sb3I6IzA5MDkxYTtoZWlnaHQ6ODBweDtjb2xvcjojZjJmMmYyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZy1sZWZ0OjQ4cHh9LnRvcC1iYXIgcHtwYWRkaW5nLWxlZnQ6MTZweDttYXJnaW46MH0ubWVudXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Y29sb3I6IzA5MDkxYTtmbGV4OjAgMCAxNmVtO2JvcmRlci1yaWdodDoxcHggc29saWQgIzA5MDkxYTtwYWRkaW5nLXRvcDo1MHB4fS5tZW51IGRpdiwubWVudSBoMiwubWVudSBpbWcsLm1lbnUgaW5wdXR7cGFkZGluZy1sZWZ0OjQ4cHh9Lm1lbnUgaDEsLm1lbnUgaW1ne2Rpc3BsYXk6aW5saW5lfS5tZW51IGgxe2xpbmUtaGVpZ2h0OjB9Lm1lbnUgaHJ7Y29sb3I6IzA5MDkxYTt3aWR0aDo4MCU7bWFyZ2luLWJvdHRvbToyMHB4fS5tZW51IGlucHV0e21hcmdpbjo1cHggMH1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vc2Fzcy1sb2FkZXIhLi9zcmMvc3R5bGVzLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnN2Z1wiO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci5zdmdcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnR0ZlwiO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci50dGZcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvU2Fuc3VtaS1SZWd1bGFyLndvZmZcIjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIud29mZlxuICoqIG1vZHVsZSBpZCA9IDE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9TYW5zdW1pLVJlZ3VsYXIud29mZjJcIjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIud29mZjJcbiAqKiBtb2R1bGUgaWQgPSAxNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL1NhbnN1bWktUmVndWxhci5zY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvc3R5bGVzLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0ICcuL3N0eWxlcy5zY3NzJ1xuaW1wb3J0ICcuL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIuc2NzcydcblxuaW1wb3J0IHsgTWVudUNvbXBvbmVudCwgVmlzdWFsaXplciB9IGZyb20gJy4vY29tcG9uZW50cydcbmltcG9ydCAqIGFzIGxvZyBmcm9tICdsb2dsZXZlbCdcbmltcG9ydCAqIGFzICQgZnJvbSAnanF1ZXJ5J1xuXG5sb2cuc2V0TGV2ZWwoXCJkZWJ1Z1wiKVxuXG5leHBvcnQgY2xhc3MgQXBwIHtcbiAgICBwcml2YXRlIF92aXN1YWxpemVyOiBWaXN1YWxpemVyO1xuXG4gICAgY29uc3RydWN0b3IoICl7XG4gICAgICAgIHRoaXMuX3Zpc3VhbGl6ZXIgPSBuZXcgVmlzdWFsaXplcihuZXcgTWVudUNvbXBvbmVudCgpLCB7IH0pO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgJCgnYm9keScpLmZhZGVJbihcImZhc3RcIik7XG4gICAgICAgIHRoaXMuX3Zpc3VhbGl6ZXIuZHJhdygpO1xuICAgIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuXG5hcHAuaW5pdCgpO1xuXG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC50c1xuICoqLyIsImV4cG9ydCAqIGZyb20gJy4vbWVudS9tZW51J1xuZXhwb3J0ICogZnJvbSAnLi92aXN1YWxpemVyL3Zpc3VhbGl6ZXInXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY29tcG9uZW50cy9pbmRleC50c1xuICoqLyIsIlxuaW1wb3J0IHsgSVNlbGVjdG9yLCBJU2VsZWN0b3JNYW5hZ2VyLCBJU2VsZWN0b3JIaWVyYXJjaHkgfSBmcm9tICcuLi8uLi9tb2RlbCdcblxuaW1wb3J0ICogYXMgJCBmcm9tICdqcXVlcnknXG5cbmNvbnN0IHByaW1hcnlTZWxlY3RvciA9IFwicHJpbWFyeS1zZWxlY3RvcnNcIjtcbmNvbnN0IHNlY29uZGFyeVNlbGVjdG9yID0gXCJzZWNvbmRhcnktc2VsZWN0b3JzXCI7XG5cbmltcG9ydCAqIGFzIGxvZ01hbmFnZXIgZnJvbSAnbG9nbGV2ZWwnXG5sZXQgbG9nID0gbG9nTWFuYWdlci5nZXRMb2dnZXIoXCJtZW51XCIpO1xuXG5cbmludGVyZmFjZSBJRGljdGlvbmFyeSB7XG4gICAgW2luZGV4OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBNZW51Q29tcG9uZW50IGltcGxlbWVudHMgSVNlbGVjdG9yTWFuYWdlciB7XG5cbiAgICBwcml2YXRlIF9zZWxlY3RvcnNIaWVyYXJjaHk6IEFycmF5PElTZWxlY3RvckhpZXJhcmNoeT47XG4gICAgcHJpdmF0ZSBfY2FsbGJhY2s6IChwcmltYXJ5OiBJU2VsZWN0b3IsIHNlY29uZGFyeTogSVNlbGVjdG9yKSA9PiB2b2lkO1xuXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IElEaWN0aW9uYXJ5ID0ge30gYXMgSURpY3Rpb25hcnk7XG5cbiAgICBzZXRTZWxlY3RvcnMoc2VsZWN0b3JzOiBBcnJheTxJU2VsZWN0b3JIaWVyYXJjaHk+KSB7XG4gICAgICAgIGxldCBzZWxlY3RlZFByaW1hcnkgPSBzZWxlY3RvcnNbMF0ucXVlcnk7XG4gICAgICAgIGxldCBzZWxlY3RlZFNlY29uZGFyeSA9IHNlbGVjdG9yc1swXS5jaGlsZHJlblswXS5xdWVyeTtcblxuXG4gICAgICAgIHRoaXMuc2V0U2VsZWN0b3JzSW50ZXJuYWwocHJpbWFyeVNlbGVjdG9yLCBzZWxlY3RvcnMsIHNlbGVjdGVkUHJpbWFyeSk7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0b3JzSW50ZXJuYWwoc2Vjb25kYXJ5U2VsZWN0b3IsIHNlbGVjdG9yc1swXS5jaGlsZHJlbiwgc2VsZWN0ZWRTZWNvbmRhcnkpO1xuXG4gICAgICAgIHRoaXMuX3NlbGVjdG9yc0hpZXJhcmNoeSA9IHNlbGVjdG9ycztcbiAgICB9XG5cbiAgICBzZXRPblNlbGVjdG9yc0NhbGxiYWNrKGNhbGxiYWNrOiAocHJpbWFyeTogSVNlbGVjdG9yLCBzZWNvbmRhcnk6IElTZWxlY3RvcikgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBzZXRTZWxlY3RvcnNJbnRlcm5hbChjYXRlZ29yeTogc3RyaW5nLCBzZWxlY3RvcnM6IEFycmF5PElTZWxlY3Rvcj4sIHNlbGVjdGVkPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkW2NhdGVnb3J5XSA9IHNlbGVjdGVkO1xuICAgICAgICBsZXQgY2F0ZWdvcnlDbGFzcyA9IGAuJHtjYXRlZ29yeX1gXG4gICAgICAgICQoY2F0ZWdvcnlDbGFzcykuZW1wdHkoKTtcblxuICAgICAgICBzZWxlY3RvcnMuZm9yRWFjaCgoc2VsZWN0b3IsIGkpID0+IHtcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZFN0cmluZyA9IHNlbGVjdGVkID09PSBzZWxlY3Rvci5xdWVyeSA/IFwiY2hlY2tlZFwiIDogXCJcIjtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBgXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCIke2NhdGVnb3J5fVwiIGlkPVwiJHtjYXRlZ29yeX0tJHtpfVwiIHZhbHVlPVwiJHtzZWxlY3Rvci5xdWVyeX1cIiAke3NlbGVjdGVkU3RyaW5nfSAvPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCIke2NhdGVnb3J5fS0ke2l9XCI+JHtzZWxlY3Rvci5sYWJlbH08L2xhYmVsPjxicj5cbiAgICAgICAgICAgIGBcbiAgICAgICAgICAgICQoY2F0ZWdvcnlDbGFzcykuYXBwZW5kKGh0bWwpXG4gICAgICAgIH0pO1xuXG4gICAgICAgdGhpcy5hZGRDaGFuZ2VMaXN0ZW5lcihjYXRlZ29yeSk7IFxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkQ2hhbmdlTGlzdGVuZXIoY2F0ZWdvcnk6IHN0cmluZykge1xuICAgICAgICAgbGV0IGNhdGVnb3J5Q2xhc3MgPSBgLiR7Y2F0ZWdvcnl9YFxuICAgICAgICAgJChjYXRlZ29yeUNsYXNzICsgJyBpbnB1dCcpLm9uKFwiY2hhbmdlXCIsIChldmVudDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkVmFsdWUgPSAkKGBpbnB1dFtuYW1lPVwiJHtjYXRlZ29yeX1cIl06Y2hlY2tlZGAsIGNhdGVnb3J5Q2xhc3MpLnZhbCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZFtjYXRlZ29yeV0gPSBzZWxlY3RlZFZhbHVlXG5cbiAgICAgICAgICAgIGlmIChjYXRlZ29yeSA9PT0gcHJpbWFyeVNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gdGhpcy5fc2VsZWN0b3JzSGllcmFyY2h5LmZpbmQoKHMpID0+IHMucXVlcnkgPT09IHNlbGVjdGVkVmFsdWUpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RvcnNJbnRlcm5hbChzZWNvbmRhcnlTZWxlY3Rvciwgc2VsZWN0ZWQuY2hpbGRyZW4sIHNlbGVjdGVkLmNoaWxkcmVuWzBdLnF1ZXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW52b2tlQ2FsbGJhY2soKTtcbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIHByaXZhdGUgaW52b2tlQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihcIkNhbGxiYWNrIGhhcyBub3QgYmVlbiBzZXRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsbGJhY2soeyBxdWVyeTogdGhpcy5fc2VsZWN0ZWRbcHJpbWFyeVNlbGVjdG9yXSB9LCB7IHF1ZXJ5OiB0aGlzLl9zZWxlY3RlZFtzZWNvbmRhcnlTZWxlY3Rvcl0gfSlcbiAgICB9XG5cbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9jb21wb25lbnRzL21lbnUvbWVudS50c1xuICoqLyIsImV4cG9ydCAqIGZyb20gJy4vYmFzZS1lbGVtZW50J1xuZXhwb3J0ICogZnJvbSAnLi9sb2FkZXInXG5leHBvcnQgKiBmcm9tICcuL25vZGUtaGllcmFyY2h5J1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NvbXBvbmVudHMvdmlzdWFsaXplci9lbGVtZW50cy9pbmRleC50c1xuICoqLyIsIlxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnXG5pbXBvcnQgeyBCYXNlRWxlbWVudCB9IGZyb20gJy4vYmFzZS1lbGVtZW50JyBcbmltcG9ydCAqIGFzIGxvZ01hbmFnZXIgZnJvbSAnbG9nbGV2ZWwnXG5sZXQgbG9nID0gbG9nTWFuYWdlci5nZXRMb2dnZXIoXCJsb2FkZXJcIik7XG5cblxuZXhwb3J0IGludGVyZmFjZSBJTG9hZGVyIHtcbiAgICBzdGFydExvYWRlcigpOiB2b2lkO1xuICAgIHN0b3BMb2FkZXIoKTogdm9pZDtcbn1cblxuXG5leHBvcnQgY2xhc3MgU3RhbmRhcmRMb2FkZXIgZXh0ZW5kcyBCYXNlRWxlbWVudCBpbXBsZW1lbnRzIElMb2FkZXIge1xuXG4gICAgLyoqXG4gICAgICogUmFkaXVzIG9mIHRoZSBsb2FkZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIHIgPSA1MDtcbiAgICBwcml2YXRlIGc6IGQzLlNlbGVjdGlvbjxhbnk+O1xuXG4gICAgY29uc3RydWN0b3IgKHN2ZzogZDMuU2VsZWN0aW9uPGFueT4pIHsgXG4gICAgICAgIHN1cGVyKHN2Zyk7XG4gICAgfVxuXG4gXG5cbiAgICBzdGFydExvYWRlcigpIHtcbiAgICAgICAgaWYodGhpcy5nKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoXCJDYWxsaW5nIGFscmVhZHkgc3RhcnRlZCBsb2FkZXJcIilcbiAgICAgICAgICAgIHJldHVybjsgLy8gV2UgaWdub3JlIGNhbGwgaWYgYWxyZWFkeSBsb2FkaW5nLlxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZyA9IHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKFwibG9hZGVyXCIsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuYWRkQ2lyY2xlKHRoaXMuZyk7XG4gICAgICAgIHRoaXMuYWRkUmVjdCh0aGlzLmcpO1xuXG4gICAgfVxuXG4gICAgc3RvcExvYWRlcigpIHtcbiAgICAgICAgaWYodGhpcy5nKSAge1xuICAgICAgICAgICAgdGhpcy5nLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vLyBBZGRzIGEgY2lyY2xlIHRvIHRoZSBzZWxlY3Rpb24uIFRoZSBjaXJjbGUgaXMgcGxhY2VkIGluIHRoZSBjZW50ZXIgb2YgdGhlIGJvYXJkLlxuICAgIHByaXZhdGUgYWRkQ2lyY2xlKHNlbGVjdGlvbjogZDMuU2VsZWN0aW9uPGFueT4pIHtcbiAgICAgICAgIHNlbGVjdGlvbi5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKCkgPT4gdGhpcy5jeClcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKCkgPT4gdGhpcy5jeSlcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCB0aGlzLnIpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRSZWN0KHNlbGVjdGlvbjogZDMuU2VsZWN0aW9uPGFueT4pIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5yICogMiArIDUgIC8vICoyID0gZGlhbWV0ZXIuICs1IHRvIGFjY291bnQgZm9yIHRoZSBjaXJjbGVzIGJvcmRlci5cbiAgICAgICAgY29uc3Qgd2lkdGggPSAyMDsgLy8gRGVmaW5lcyB0aGUgd2lkdGggb2YgdGhlIGdhcCBpbiB0aGUgY2lyY2xlXG4gICAgICAgIGNvbnN0IHJlY3QgPSBzZWxlY3Rpb24uYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsICgpID0+IHRoaXMuY3ggLSAyMCAvIDIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKCkgPT4gdGhpcy5jeSAtIGhlaWdodCAvIDIgKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCAyMClcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZFJvdGF0aW9uKHJlY3QpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkUm90YXRpb24oc2VsZWN0aW9uOiBkMy5TZWxlY3Rpb248YW55Pikge1xuICAgICAgICBjb25zdCB0cmFuc2lzdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5hdHRyVHdlZW4oXCJ0cmFuc2Zvcm1cIiwgXG4gICAgICAgICAgICAgICAgKCkgPT4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoYHJvdGF0ZSgwLCAgICR7dGhpcy5jeH0sICR7dGhpcy5jeX0pYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcm90YXRlKDM2MCwgJHt0aGlzLmN4fSwgJHt0aGlzLmN5fSlgKSlcbiAgICAgICAgICAgIC5kdXJhdGlvbigyMDAwKVxuICAgICAgICAgICAgLmVhY2goXCJlbmRcIiwgIHRyYW5zaXN0aW9uKTsgLy8gUmVwZWF0IHRyYW5zaXRpb25cbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zaXN0aW9uKCk7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL2VsZW1lbnRzL2xvYWRlci50c1xuICoqLyIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IEJhc2VFbGVtZW50IH0gZnJvbSAnLi9iYXNlLWVsZW1lbnQnO1xuaW1wb3J0IHsgSUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwnO1xuaW1wb3J0IHsgdHJhbnNsYXRlVG9Cb3JkZXJGYWN0b3J5LCBzaG9ydGVuVG9XaXRoaW5SYWRpdXMgfSBmcm9tICcuLi8uLi8uLi91dGlscyc7XG5pbXBvcnQgKiBhcyBsb2dNYW5hZ2VyIGZyb20gJ2xvZ2xldmVsJ1xuXG5sZXQgbG9nID0gbG9nTWFuYWdlci5nZXRMb2dnZXIoXCJub2RlLWhpZXJhcmNoeVwiKVxuXG5cbi8qKlxuICogQSBjb21iaW5lZCBpbnRlcmZhY2UgZm9yIElHcm91cCBhbmQgZDMubGF5b3V0LnBhY2suTm9kZVxuICogT25jZSB3ZSBhZGQgdGhlIElHcm91cCB0byBwYWNrIGxheW91dCBpdCB3aWxsIGV4dGVuZCB0aGUgb2JqZWN0cyBhbmQgYWRkIHRoZVxuICogZDMgcHJvcGVydGllcyAociwgeCwgeS4uLikgd2hpbGUga2VlcGluZyB0aGUgb3JpZ2luYWwgcHJvcGVydGllcyAobmFtZSwgdmFsdWUpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm9kZSBleHRlbmRzIElHcm91cCwgZDMubGF5b3V0LnBhY2suTm9kZSB7XG4gICAgcmFkaXVzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24ge1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgbWluaW11bVZhbHVlIHRvIGJlIGRyYXduXG4gICAgICovXG4gICAgbWluaW11bVZhbHVlPzogbnVtYmVyOyAgXG59XG5cbi8qKlxuICogVGhlIG5vZGUgSGllcmFyY2h5IHJlcHJlc2VudHMgYSBoaWVyYXJjaHkgb2Ygbm9kZXMuIFxuICogVGhlIGRlcHRoIG9mIHRoZSBoaWVyYXJjaHkgaXMgYWx3YXlzIG9uZS4gXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlSGllcmFyY2h5RWxlbWVudCBleHRlbmRzIEJhc2VFbGVtZW50IHtcblxuICAgIHByaXZhdGUgX2NvbG9yU2NoZW1lOiBkMy5zY2FsZS5PcmRpbmFsPHN0cmluZywgc3RyaW5nPjtcbiAgICBwcml2YXRlIF9kYXRhOiBBcnJheTxJR3JvdXA+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgICAgICBzdmc6IGQzLlNlbGVjdGlvbjxhbnk+LCBcbiAgICAgICAgICAgIHByaXZhdGUgX2NvbmZpZzogTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24pIHtcbiAgICAgICAgc3VwZXIgKHN2Zyk7XG5cbiAgICAgICAgaWYoIXRoaXMuX2NvbmZpZykge1xuICAgICAgICAgICAgbG9nLmVycm9yKFwiTm8gY29uZmlndXJhdGlvbiBpcyBzcGVjaWZpZWRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogXG4gICAgICogVGhlIGRlZmF1bHQgY29sb3JzY2hlbWUgY2FuIGJlIG92ZXJyaWRlblxuICAgICovXG4gICAgcHVibGljIHNldCBjb2xvclNjaGVtZSh2YWx1ZTogZDMuc2NhbGUuT3JkaW5hbDxzdHJpbmcsIHN0cmluZz4pIHtcbiAgICAgICAgdGhpcy5fY29sb3JTY2hlbWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IG1pbmltdW1WYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5taW5pbXVtVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG1pbmltdW1WYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5taW5pbXVtVmFsdWUgfHzCoDA7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjb2xvclNjaGVtZSgpOiBkMy5zY2FsZS5PcmRpbmFsPHN0cmluZywgc3RyaW5nPiB7XG4gICAgICAgIGlmKCF0aGlzLl9jb2xvclNjaGVtZSkge1xuICAgICAgICAgICAgdGhpcy5fY29sb3JTY2hlbWUgPSBkMy5zY2FsZS5jYXRlZ29yeTIwYygpO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yU2NoZW1lO1xuIFxuXG4gICAgfVxuXG4gICAgLyoqIFxuICAgICAqIFNldHMgZGF0YSBhbmQgc3RhcnRzIGRyYXdpbmcgbm9kZWRlc1xuICAgICAqICAqL1xuICAgIHB1YmxpYyBzZXQgZGF0YShkYXRhOiBBcnJheTxJR3JvdXA+KSB7XG4gICAgICAgIGlmKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYW4oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYW4oKSB7XG4gICAgICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIi5ub2RlXCIpIC5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVkcmF3KCkge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVOb2RlVG9Cb3JkZXIgPSB0cmFuc2xhdGVUb0JvcmRlckZhY3RvcnkodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgIFxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fZGF0YS5maWx0ZXIoKGQpID0+IGQudmFsdWUgPj0gdGhpcy5taW5pbXVtVmFsdWUgJiYgZC5uYW1lKVxuICAgICAgICBcblxuICAgICAgICAgY29uc3QgcGFjayA9IGQzLmxheW91dC5wYWNrPE5vZGU+KClcbiAgICAgICAgICAgICAgICAuc29ydCgoYSxiKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICAtIGEubmFtZS5sZW5ndGggLSBiLm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciB0aHJlc2hvbGQgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKChhLnZhbHVlID4gdGhyZXNob2xkKSAmJiAoYi52YWx1ZSA+IHRocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiAoYS52YWx1ZSAtIGIudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zaXplKFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoNSk7XG5cbiAgICAgICAgbGV0IGxheW91dE5vZGVzID0gcGFjay5ub2Rlcyh7Y2hpbGRyZW46IGRhdGF9KVxuICAgICAgICAgICAgLmZpbHRlcigoZCkgPT4gICFkLmNoaWxkcmVuICkgLy8gUmVtb3ZlIHRoZSByb290IG5vZGUgYXMgdGhlIGhpZXJhcmNoaWNhbCBuYXR1cmUgaXMgcmVtb3ZlZC4gXG4gICAgICAgIFxuICAgICAgICAgbGF5b3V0Tm9kZXMuZm9yRWFjaCgoZCkgPT4gZC5yYWRpdXMgPSBkLnIpO1xuICAgICAgICBcblxuICAgICAgICBjb25zdCBub2Rlc1NlbGVjdGlvbiA9IHRoaXMuc3ZnXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiLm5vZGVcIikgXG4gICAgICAgICAgICAuZGF0YShsYXlvdXROb2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJub2RlXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2xhdGVOb2RlVG9Cb3JkZXIpO1xuXG4gICAgICAgIHRoaXMuYWRkVGl0bGUobm9kZXNTZWxlY3Rpb24pO1xuICAgICAgXG4gICAgICAgIHRoaXMuYWRkQ2lyY2xlKG5vZGVzU2VsZWN0aW9uKTtcbiAgICAgICAgdGhpcy5hZGRMYWJlbChub2Rlc1NlbGVjdGlvbik7XG4gICAgICBcbiAgICAgICAgdGhpcy50cmFuc2xhdGVUb0NlbnRlcihub2Rlc1NlbGVjdGlvbik7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIHRyYW5zbGF0ZVRvQ2VudGVyKG5vZGVzU2VsZWN0aW9uOiBkMy5TZWxlY3Rpb248Tm9kZT4pIHtcblxuXG4gICAgICAgIG5vZGVzU2VsZWN0aW9uLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKDIwMDApXG4gICAgICAgICAgICAuZWFzZShcImN1YmljLWluLW91dFwiKVxuICAgICAgICAgICAgLmRlbGF5KChkLCBpKSA9PiBpICogMjAgKiBNYXRoLnJhbmRvbSgpKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHsgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHtkLnh9LCAke2QueX0pYDsgXG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIHByaXZhdGUgYWRkQ2lyY2xlKHNlbGVjdGlvbjogZDMuU2VsZWN0aW9uPE5vZGU+KSB7XG4gICAgICAgICBzZWxlY3Rpb24uYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgKGQpID0+IGQuciApXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkLGkgKSA9PiBcIm5vZGUtY29sb3ItXCIgKyAoKGkgJSA2ICkrIDEpKTtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRUaXRsZShzZWxlY3Rpb246IGQzLlNlbGVjdGlvbjxOb2RlPikge1xuICAgICAgICBzZWxlY3Rpb24uYXBwZW5kKFwidGl0bGVcIilcbiAgICAgICAgICAgIC50ZXh0KChkOiBJR3JvdXApID0+IHsgcmV0dXJuIGQubmFtZSArIFwiOiBcIiArIGQudmFsdWU7IH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkTGFiZWwoc2VsZWN0aW9uOiBkMy5TZWxlY3Rpb248Tm9kZT4pIHtcbiAgICAgICAgXG4gICAgICAgIC8vIEEgZm9yZWlnbk9qZWN0IGlzIGFkZGVkIGhlcmUgaW5zdGVhZCBvZiBqdXN0IHVzaW5nIFNWRyB0ZXh0LiBcbiAgICAgICAgLy8gU1ZHIHRleHQgZG9lcyBub3Qgc3VwcG9ydCB3b3JkIHdyYXAgaW4gYW55IGNsZWFuIHdheSBhdGxlYXN0LiBcbiAgICAgICAgLy8gVXNpbmcgZm9yZWlnbk9iamVjdCBkaXYgYW5kIHAncyBjYW4gYmUgaW5zZXJ0ZWQgXG4gICAgICAgIC8vIGFuZCBDU1MgY2FuIGVuc3VyZSB0aGUgYXJlIHBsYWNlZCBwcm9wZXJseS4gXG4gICAgICAgIHNlbGVjdGlvbi5hcHBlbmQoXCJmb3JlaWduT2JqZWN0XCIpXG4gICAgICAgIFx0LmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC5yICogMilcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIChkKSA9PiBkLnIgKiAyKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IGB0cmFuc2xhdGUoJHstZC5yfSwkey1kLnJ9KWApXG4gICAgICAgICAgICAuYXBwZW5kKFwieGh0bWw6ZGl2XCIpXG4gICAgICAgICAgICAuYXBwZW5kKFwieGh0bWw6cFwiKVxuICAgICAgICAgICAgLmh0bWwoKGQ6IGFueSkgPT4gc2hvcnRlblRvV2l0aGluUmFkaXVzKGQuciwgZC5uYW1lKSk7XG5cbiAgICB9XG5cbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9jb21wb25lbnRzL3Zpc3VhbGl6ZXIvZWxlbWVudHMvbm9kZS1oaWVyYXJjaHkudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMydcbmltcG9ydCAqIGFzICQgZnJvbSBcImpxdWVyeVwiO1xuaW1wb3J0IHsgSUxvYWRlciwgU3RhbmRhcmRMb2FkZXIsTm9kZUhpZXJhcmNoeUVsZW1lbnQsIE5vZGUsIE5vZGVIaWVyYXJjaHlFbGVtZW50T3B0aW9uIH0gZnJvbSAnLi9lbGVtZW50cyc7XG5pbXBvcnQgeyBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vcmVwb3NpdG9yaWVzJ1xuaW1wb3J0IHsgSUdyb3VwLCBJU2VsZWN0b3IsIElTZWxlY3Rvck1hbmFnZXIgfSBmcm9tICcuLi8uLi9tb2RlbCdcblxuXG5leHBvcnQgaW50ZXJmYWNlIElWaXN1YWxpemVyQ29uZmlnIHtcblxuICAgIHRhcmdldElkPzogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBWaXN1YWxpemVyIHtcblxuICAgIHByaXZhdGUgX3JlcG9zaXRvcnk6IFNvZGFGaWxtTG9jYXRpb1JlcG9zaXRvcnk7XG4gICAgcHJpdmF0ZSBfbG9hZGVyOiBJTG9hZGVyOyBcbiAgICBwcml2YXRlIF9zdmc6IGQzLlNlbGVjdGlvbjxhbnk+O1xuICAgIHByaXZhdGUgX25vZGVIaWVyYXJjaHk6IE5vZGVIaWVyYXJjaHlFbGVtZW50O1xuXG4gICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX21hbmFnZXI6IElTZWxlY3Rvck1hbmFnZXIsIHByaXZhdGUgY29uZmlnPzogSVZpc3VhbGl6ZXJDb25maWcpIHtcbiAgICAgICAgdGhpcy5fcmVwb3NpdG9yeSA9IG5ldyBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNlbGVjdG9yQ2hhbmdlZCA9IChwcmltYXJ5OiBJU2VsZWN0b3IsIHNlY29uZGFyeTogSVNlbGVjdG9yICkgPT4ge1xuICAgICAgICBpZih0aGlzLl9ub2RlSGllcmFyY2h5KSB7XG4gICAgICAgICAgICB0aGlzLl9ub2RlSGllcmFyY2h5LmNsZWFuKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHRoaXMuX3JlcG9zaXRvcnkuZ2V0R3JvdXBzKHByaW1hcnksIHNlY29uZGFyeSlcbiAgICAgICAgICAgIC50aGVuKChncm91cHMpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0YShncm91cHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gIFxuICAgIGdldCB0YXJnZXRJZCgpIHtcbiAgICAgICAgaWYodGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcudGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy50YXJnZXRJZDtcbiAgICAgICAgfSBcbiAgICAgICAgcmV0dXJuIFwiLnZpc3VhbGl6ZXJcIjtcbiAgICB9XG5cbiAgICBcbiAgICAvKiogXG4gICAgICogRHJhd3MgdGhlIGJvYXJkIGFuZCBpbml0aWFsaXNlZCByZWxhdGVkIGNvbXBvbmVudHMuXG4gICAgICogRHJhdyBpcyBkZWZpbmVkIGVsc2V3aGVyZSBhcyBpdCBlbnN1cmVzIHRoZSBjbGFzcyBjYW4gYmUgY29uc3RydWN0ZWQgcHJpb3IgdG8gYWN0dWFsbHkgYmUgc2hvd24uXG4gICAgICogZHJhdygpIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIHNldERhdGEgdG8gc2hvdyBsb2FkaW5nIHdoaWxlIGRhdGEgaXMgYmVpbmcgZmV0Y2hlZFxuICAgICAqICovXG4gICAgIGRyYXcoKSB7XG4gICAgICBcbiAgICAgICAgdGhpcy5fcmVwb3NpdG9yeS5nZXRTZWxlY3RvcnMoKS50aGVuKChzZWxlY3RvcnMpID0+IHtcbiAgICAgICAgICAgICBpZighc2VsZWN0b3JzIHx8wqBzZWxlY3RvcnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgbG9nLmVycm9yKFwiTm8gc2VsZWN0b3JzIGZvdW5kXCIpXG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHRoaXMub25TZWxlY3RvckNoYW5nZWQoeyBxdWVyeTogc2VsZWN0b3JzWzBdLnF1ZXJ5IH0sIHtxdWVyeTogIHNlbGVjdG9yc1swXS5jaGlsZHJlblswXS5xdWVyeX0pO1xuICAgICAgICAgICAgIHRoaXMuX21hbmFnZXIuc2V0U2VsZWN0b3JzKHNlbGVjdG9ycyk7XG4gICAgICAgIH0pXG4gICAgICAgXG4gICAgICAgIGxldCB0YXJnZXQgPSBkMy5zZWxlY3QodGhpcy50YXJnZXRJZCk7XG5cbiAgICAgICAgdGhpcy5fc3ZnID0gdGFyZ2V0LmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAgICAgICAuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAkeyQodGhpcy50YXJnZXRJZCkud2lkdGgoKX0gJHskKHRoaXMudGFyZ2V0SWQpLmhlaWdodCgpfWApXG5cbiAgICAgICAgdGhpcy5fbG9hZGVyID0gbmV3IFN0YW5kYXJkTG9hZGVyKHRoaXMuX3N2Zyk7XG4gICAgICAgIHRoaXMuc2V0SXNMb2FkaW5nKHRydWUpO1xuXG4gICAgXG4gICAgICAgIGNvbnN0IGNvbmZpZzogTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24gID0ge1xuICAgICAgICAgICAgbWluaW11bVZhbHVlOiAyICBcbiAgICAgICAgfVxuXG4gICAgICAgICAvLyBCb290c3RyYXAgd2l0aCBkZWZhdWx0IGRhdGFcbiAgICAgXG4gICAgICAgIHRoaXMuX21hbmFnZXIuc2V0T25TZWxlY3RvcnNDYWxsYmFjayh0aGlzLm9uU2VsZWN0b3JDaGFuZ2VkKTtcbiAgICAgICAgdGhpcy5fbm9kZUhpZXJhcmNoeSA9IG5ldyBOb2RlSGllcmFyY2h5RWxlbWVudCh0aGlzLl9zdmcsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBkYXRhIGFuZCBzaG93cyBpdCBvbiB0aGUgc2NyZWVuLlxuICAgICAqICBAcGFyYW0ge2Jvb2xlYW59IGlzTG9hZGluZ1xuICAgICAqL1xuICAgIHNldERhdGEoZGF0YTogQXJyYXk8SUdyb3VwPikge1xuICAgICAgIFxuICAgICAgICBpZighdGhpcy5fbm9kZUhpZXJhcmNoeSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIF9ub2RlSGllcmFyY2h5IGlzIG5vdCBjcmVhdGVkIGRyYXcgaGFzIG5vdCBiZWVuIGNhbGxlZFxuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICB0aGlzLl9ub2RlSGllcmFyY2h5LmRhdGEgPSBkYXRhO1xuXG4gICAgfVxuICBcbiAgICAvKipcbiAgICAgKiBTZXQgd2hldGhlciBvciBub3QgYSBsb2FkZXIgc2hvdWxkIGJlIHNob3duLlxuICAgICAqICBAcGFyYW0ge2Jvb2xlYW59IGlzTG9hZGluZ1xuICAgICAqL1xuICAgIHNldElzTG9hZGluZyhpc0xvYWRpbmc6IGJvb2xlYW4pe1xuICAgICAgICBpZihpc0xvYWRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlci5zdGFydExvYWRlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbG9hZGVyLnN0b3BMb2FkZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL3Zpc3VhbGl6ZXIudHNcbiAqKi8iLCJleHBvcnQgKiBmcm9tICcuL21vdmllLWxvY2F0aW9uLnJlcG9zaXRvcnknXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcmVwb3NpdG9yaWVzL2luZGV4LnRzXG4gKiovIiwiXG5pbXBvcnQgICd3aGF0d2ctZmV0Y2gnO1xuaW1wb3J0IHsgSUdyb3VwLCBJU2VsZWN0b3IsIElTZWxlY3RvckhpZXJhcmNoeSB9IGZyb20gJy4uL21vZGVsJ1xuaW1wb3J0ICogYXMgbG9nTWFuYWdlciBmcm9tICdsb2dsZXZlbCdcbmltcG9ydCB7IGdyb3VwTWFwcGVyRmFjdG9yeSB9IGZyb20gJy4uL3V0aWxzJyBcbmxldCBsb2cgPSBsb2dNYW5hZ2VyLmdldExvZ2dlcihcIm1vdmllLWxvY2F0aW9uLXJlcG9cIik7XG5pbXBvcnQgKiBhcyAkIGZyb20gJ2pxdWVyeSdcblxuLyoqXG4gKiBUaGUgSUZpbG1Mb2NhdGlvblJlcG9zaXRvcnkgaXMgdXNlZCB0byBmZXRjaCB0aGUgaW5mb3JtYXRpb24gXG4gKiBUaGUgaWRlYSBpcyB0byBjcmVhdGUgYW4gYWJzdHJhY3Rpb24gYmV0d2VlbiB0aGUgZGF0YSwgYXMgaXQgY2FuIGhhdmUgc2V2ZXJhbCBvcmlnaW5zXG4gKiAgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbG1Mb2NhdGlvblJlcG9zaXRvcnkge1xuXG4gICAgZ2V0R3JvdXBzKHByaW1hcnk6IElTZWxlY3Rvciwgc2Vjb25kYXJ5OiBJU2VsZWN0b3IpOiBQcm9taXNlPEFycmF5PElHcm91cD4+O1xuICAgIGdldFNlbGVjdG9ycygpOiBQcm9taXNlPEFycmF5PElTZWxlY3Rvcj4+O1xufVxuXG4vKiogIFxuICogVGhlIEluTWVtb3J5RmlsbUxvY2F0aW9uIHJlcG9zaXRvcnkgZmV0Y2hlcyB0aGUgZW50aXJlIGRhdGEgc2V0IHVwIGZyb250IGFuZCBzdG9yZXMgaXQgaW4gbWVtb3J5LiBcbiAqIEZvciBzbWFsbGVyIGRhdGEgc2V0cyB0aGlzIGlzIHN1ZmZpY2llbnQsIGJ1dCBmb3IgbGFyZ2VyIGl0IGlzIG5vdFxuICovXG5leHBvcnQgY2xhc3MgU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeSBpbXBsZW1lbnRzICBJRmlsbUxvY2F0aW9uUmVwb3NpdG9yeSB7XG5cbiAgICBwcml2YXRlIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgIHByaXZhdGUgdXJsID0gJ2h0dHBzOi8vZGF0YS5zZmdvdi5vcmcvcmVzb3VyY2Uvd3dtdS1nbXpjLmpzb24nXG4gICBcbiAgICBnZXRHcm91cHMocHJpbWFyeTogSVNlbGVjdG9yLCBzZWNvbmRhcnk6SVNlbGVjdG9yKTogUHJvbWlzZTxBcnJheTxJR3JvdXA+PiB7XG4gICAgICAgICBcblxuICAgICAgICAvLyBBIG1hcHBlciBpcyBjcmVhdGVkLiBJdCBjb252ZXJ0cyB0aGUgcmVzdWx0IGZyb20gdGhlIGFwaSB0byBhbiBhcnJheSBvZiBJR3JvdXBcbiAgICAgICAgY29uc3QgbWFwcGVyID0gZ3JvdXBNYXBwZXJGYWN0b3J5KHByaW1hcnkucXVlcnksIFwiQ09VTlRfXCIgKyBzZWNvbmRhcnkucXVlcnkpO1xuXG4gICAgICAgIC8vIElmIG5laXRoZXIgc2VsZWN0b3IgaXMgdGhlIGxvY2F0aW9uIHdlIG5lZWQgYSBtb3JlIGFkdmFuY2VkIHF1ZXJ5IGFzIHdlIHdvdWxkIG90aGVyIHdpc2UgZ2V0IFxuICAgICAgICAvLyB2ZXJ5IG1pc2xlYWRpbmcgcmVzdWx0cyAob3Igc2ltcGx5IHBsYWluIHdyb25nIHJlc3VsdHMpXG4gICAgICAgIC8vIGUuZy4gaWYgcHJpbWFyeSA9IHByb2R1Y3Rpb25fY29tcGFueSBhbmQgc2Vjb25kYXJ5ID0gd3JpdGVyIGl0IHdpbGwgc2hvdyB0aGUgbnVtYmVyIG9mIGxvY2F0aW9ucyBcbiAgICAgICAgLy8gdGhhdCBwcm9kdWN0aW9uIGNvbXBhbnkgaGFzIHVzZWQgdGhhdCB3cml0ZXIgbm90IGJhc2VkIG9uIG51bWJlciBvZiBmaWxtcyBcbiAgICAgICAgaWYocHJpbWFyeS5xdWVyeSAhPT0gXCJsb2NhdGlvbnNcIiAmJiBzZWNvbmRhcnkucXVlcnkgIT09IFwibG9jYXRpb25zXCIpIFxuICAgICAgICB7XG4gICAgICAgICAgIC8vIHJldHVybiB0aGlzLmdldEF2YW5jZWRHcm91cHMocHJpbWFyeSwgc2Vjb25kYXJ5LCBtYXBwZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYCR7dGhpcy51cmx9PyRncm91cD0ke3ByaW1hcnkucXVlcnl9JiRzZWxlY3Q9JHtwcmltYXJ5LnF1ZXJ5fSxDT1VOVCgke3NlY29uZGFyeS5xdWVyeX0pYCkgICAgICAgICAgIFxuICAgICAgICAgICAgLnRoZW4obWFwcGVyKVxuICAgIH1cblxuICAgIFxuICAgIHByaXZhdGUgZ2V0QXZhbmNlZEdyb3VwcyhwcmltYXJ5OiBJU2VsZWN0b3IsIHNlY29uZGFyeTpJU2VsZWN0b3IsIG1hcHBlcjogKGQ6IGFueSk9PiBBcnJheTxJR3JvdXA+KTogUHJvbWlzZTxBcnJheTxJR3JvdXA+PiAge1xuXG4gICAgICAgIGxldCBxdWVyeSA9IGBTRUxFQ1QgJHtwcmltYXJ5LnF1ZXJ5fSwgY291bnQoKikgXG4gICAgICAgICAgICAgICAgICAgICBHUk9VUCBCWSAke3NlY29uZGFyeS5xdWVyeX0sICR7cHJpbWFyeS5xdWVyeX0gfD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRUxFQ1QgJHtwcmltYXJ5LnF1ZXJ5fSwgQ09VTlQoKikgQVMgY291bnQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR1JPVVAgQlkgJHtwcmltYXJ5LnF1ZXJ5fWBcbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYCR7dGhpcy51cmx9PyRxdWVyeSR7cXVlcnl9YClcbiAgICAgICAgICAgIC50aGVuKG1hcHBlcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmZXRjaChxdWVyeTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZldGNoKHF1ZXJ5KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlOmFueSkgID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwb3NzaWJsZSBzZWxlY3RvcnMuIFxuICAgICAqIFRoZXNlIGFyZSBoYXJkY29kZWQgZm9yIG5vdywgYnV0IHNob3VsZCBwcmVmZXJhYmx5IGJlIGZldGNoZWQgZnJvbSB0aGUgQVBJXG4gICAgICovXG4gICAgZ2V0U2VsZWN0b3JzKCk6IFByb21pc2U8QXJyYXk8SVNlbGVjdG9ySGllcmFyY2h5Pj4ge1xuICAgICAgICBjb25zdCB0aXRsZVNlbGVjdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJNb3ZpZVwiLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogXCJ0aXRsZVwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbG9jYXRpb25zU2VsZWN0b3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkxvY2F0aW9uc1wiLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogXCJsb2NhdGlvbnNcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnN0IHdyaXRlclNlbGVjdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJXcml0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IFwid3JpdGVyXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICBjb25zdCBkaXJlY3RvclNlbGVjdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEaXJlY3RvclwiLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogXCJkaXJlY3RvclwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHJvZHVjdGlvbkNvbXBhbnkgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlByb2R1Y3Rpb24gQ29tcGFueVwiLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogXCJwcm9kdWN0aW9uX2NvbXBhbnlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEFycmF5PElTZWxlY3RvckhpZXJhcmNoeT4+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gW1xuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRpdGxlU2VsZWN0b3IsICAgICB7IGNoaWxkcmVuOiBbIGxvY2F0aW9uc1NlbGVjdG9yICBdfSksXG4gICAgICAgICAgICAgICAgJC5leHRlbmQobG9jYXRpb25zU2VsZWN0b3IsIHsgY2hpbGRyZW46IFsgdGl0bGVTZWxlY3RvciAgIF19KSxcbiAgICAgICAgICAgICAgICAkLmV4dGVuZCh3cml0ZXJTZWxlY3RvciwgICAgeyBjaGlsZHJlbjogWyB0aXRsZVNlbGVjdG9yLCBsb2NhdGlvbnNTZWxlY3RvciwgZGlyZWN0b3JTZWxlY3RvciwgcHJvZHVjdGlvbkNvbXBhbnkgIF19KSxcbiAgICAgICAgICAgICAgICAkLmV4dGVuZChkaXJlY3RvclNlbGVjdG9yLCAgeyBjaGlsZHJlbjogWyB0aXRsZVNlbGVjdG9yLCBsb2NhdGlvbnNTZWxlY3Rvciwgd3JpdGVyU2VsZWN0b3IsIHByb2R1Y3Rpb25Db21wYW55ICBdfSksXG4gICAgICAgICAgICAgICAgJC5leHRlbmQocHJvZHVjdGlvbkNvbXBhbnksIHsgY2hpbGRyZW46IFsgdGl0bGVTZWxlY3RvciwgbG9jYXRpb25zU2VsZWN0b3IsIHdyaXRlclNlbGVjdG9yLCBkaXJlY3RvclNlbGVjdG9yICBdfSksXG4gICAgICAgICAgICBdXG4gICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICB9KVxuICAgIH1cblxuXG4gIFxufVxuXG5cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcmVwb3NpdG9yaWVzL21vdmllLWxvY2F0aW9uLnJlcG9zaXRvcnkudHNcbiAqKi8iLCJcbmltcG9ydCB7IElHcm91cCB9IGZyb20gJy4uL21vZGVsJ1xuXG5leHBvcnQgY29uc3QgZ3JvdXBNYXBwZXJGYWN0b3J5ID0gPFQ+KG5hbWVMYWJlbDogc3RyaW5nLCB2YWx1ZUxhYmVsOnN0cmluZyk6IFxuICAgICAgICAoZWxlbWVudHM6IEFycmF5PFQ+KSA9PiBBcnJheTxJR3JvdXA+ID0+IHtcbiAgICBcbiAgICByZXR1cm4gKGVsZW1lbnRzICk6IEFycmF5PElHcm91cD4gPT4ge1xuICAgICAgICByZXR1cm4gZWxlbWVudHMubWFwKChlbGVtOmFueSkgPT4geyAgIFxuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgbmFtZTogZWxlbVtuYW1lTGFiZWxdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiArZWxlbVt2YWx1ZUxhYmVsXVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgICAgICAgICBcbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvZGF0YS1tYXBwZXIudHNcbiAqKi8iLCJcblxuLyoqIFxuICogVGhpcyBtZXRob2QgdGFrZXMgdGhlIHJhZGl1cyBvZiB0aGUgY2lyY2xlIGFuZCB0aGUgdGV4dCBhbmQgYXR0ZW1wdHMgdG8gXG4gKiBzaG9ydGVuIHRoZSB0ZXh0IHN1Y2ggdGhhdCBpdCBmaXRzIHdpdGhpbiB0aGUgY2lyY2xlLiBcbiAqIFRoZSBtZXRob2QgY291bGQgdXNlIGFuIG92ZXJoYXVsIGFuZCB0YWtlIHRoZSBmb250IHNpemUgYXMgaW5wdXQuIFxuICogT3IgYmV0dGVyIGl0IHNob3VsZCB0cnkgYW5kIGNhbGN1bGF0ZSB0aGUgc2l6ZSBhbmQgdGhlbiBmaXQgd29yZHMgaW50byB0byBlYWNoIGxpbmUgXG4gKiBzdWNoIHRoYXQgdGhleSBmb3JtIGEgY2lyY2xlLiBcbiAqL1xuZXhwb3J0IGNvbnN0IHNob3J0ZW5Ub1dpdGhpblJhZGl1cyA9IChyYWRpdXM6IG51bWJlciwgdGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgICAgdmFyIG1heFdpZHRoID0gcmFkaXVzIC8gMy4xO1xuICAgICAgICB2YXIgbGluZXMgPSByYWRpdXMgLyAxMDtcbiAgICAgICAgdGV4dCA9IHRleHQuc3BsaXQoL1xccysvZykubWFwKChzKSA9PiB7XG4gICAgICAgICAgICBpZihzLmxlbmd0aCA+PSBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpbiA9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMuc3Vic3RyKDAsIG1heFdpZHRoIC0gbWFyZ2luKSArIFxuICAgICAgICAgICAgICAgICAgICAgICAgXCItPGJyPlwiICsgXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnN1YnN0cihtYXhXaWR0aCAtIG1hcmdpbiArIDEsIHMubGVuZ3RoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH0pLmpvaW4oXCIgXCIpO1xuXG4gICAgICAgIFxuICAgICAgICBpZih0ZXh0ICYmIHRleHQubGVuZ3RoID4gbWF4V2lkdGggKiBsaW5lcykge1xuICAgICAgICAgICAgbGV0IHN1YnN0ciA9ICB0ZXh0LnN1YnN0cigwLCBtYXhXaWR0aCAtIDMpO1xuICAgICAgICAgICAgaWYoc3Vic3RyLmxlbmd0aCA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzdHIgKyBcIiZoZWxsaXA7XCJcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbn1cbiAgIFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL3RleHQtbWFuaXB1bGF0aW9uLnRzXG4gKiovIiwiXG5cbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlVG9Cb3JkZXJGYWN0b3J5ID0gKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogKGc6ZDMubGF5b3V0LnBhY2suTm9kZSkgPT4gc3RyaW5nID0+IHtcblxuXG4gICAgIHJldHVybiAoZCk6IHN0cmluZyA9PiB7XG5cbiAgICAgICAgIGxldCBjeCA9IHdpZHRoIC8gMjtcbiAgICAgICAgIGxldCBjeSA9IGhlaWdodCAvIDI7XG4gICAgICAgIFxuICAgICAgICAgbGV0IHhDZW50ZXJEaXN0YW5jZSA9IChkLnggLSBjeClcbiAgICAgICAgIGxldCB5Q2VudGVyRGlzdGFuY2UgPSAoZC55IC0gY3kpXG5cbiAgICAgICAgIGxldCBjbG9zZXRzWEJvcmRlciA9IHhDZW50ZXJEaXN0YW5jZSA8IDA/IDAgOiB3aWR0aDtcbiAgICAgICAgIGxldCBjbG9zZXRzWUJvcmRlciA9IHlDZW50ZXJEaXN0YW5jZSA8IDA/IDAgOiBoZWlnaHQ7XG4gICAgIFxuICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIChoZWlnaHQgKyBkLnIpICArIFwiKVwiO1xuXG4gICAgIH1cbn0gXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvdHJhbnNmb3Jtcy50c1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=