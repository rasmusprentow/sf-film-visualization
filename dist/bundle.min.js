!function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){n(9),t.exports=n(18)},function(t,e,n){var r,i;/*!
	 * jQuery JavaScript Library v3.1.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-09-22T22:30Z
	 */
!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,o){"use strict";function a(t,e){e=e||ot;var n=e.createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function u(t){var e=!!t&&"length"in t&&t.length,n=mt.type(t);return"function"!==n&&!mt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function s(t,e,n){return mt.isFunction(e)?mt.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?mt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?mt.grep(t,function(t){return lt.call(e,t)>-1!==n}):Ct.test(e)?mt.filter(e,t,n):(e=mt.filter(e,t),mt.grep(t,function(t){return lt.call(e,t)>-1!==n&&1===t.nodeType}))}function c(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function l(t){var e={};return mt.each(t.match(jt)||[],function(t,n){e[n]=!0}),e}function f(t){return t}function h(t){throw t}function p(t,e,n){var r;try{t&&mt.isFunction(r=t.promise)?r.call(t).done(e).fail(n):t&&mt.isFunction(r=t.then)?r.call(t,e,n):e.call(void 0,t)}catch(t){n.call(void 0,t)}}function d(){ot.removeEventListener("DOMContentLoaded",d),n.removeEventListener("load",d),mt.ready()}function g(){this.expando=mt.expando+g.uid++}function v(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:It.test(t)?JSON.parse(t):t)}function y(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(Ut,"-$&").toLowerCase(),n=t.getAttribute(r),"string"==typeof n){try{n=v(n)}catch(i){}Ht.set(t,e,n)}else n=void 0;return n}function m(t,e,n,r){var i,o=1,a=20,u=r?function(){return r.cur()}:function(){return mt.css(t,e,"")},s=u(),c=n&&n[3]||(mt.cssNumber[e]?"":"px"),l=(mt.cssNumber[e]||"px"!==c&&+s)&&$t.exec(mt.css(t,e));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+s||1;do o=o||".5",l/=o,mt.style(t,e,l+c);while(o!==(o=u()/s)&&1!==o&&--a)}return n&&(l=+l||+s||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function x(t){var e,n=t.ownerDocument,r=t.nodeName,i=Xt[r];return i?i:(e=n.body.appendChild(n.createElement(r)),i=mt.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),Xt[r]=i,i)}function b(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)r=t[o],r.style&&(n=r.style.display,e?("none"===n&&(i[o]=Ft.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Yt(r)&&(i[o]=x(r))):"none"!==n&&(i[o]="none",Ft.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}function w(t,e){var n;return n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&mt.nodeName(t,e)?mt.merge([t],n):n}function M(t,e){for(var n=0,r=t.length;n<r;n++)Ft.set(t[n],"globalEval",!e||Ft.get(e[n],"globalEval"))}function _(t,e,n,r,i){for(var o,a,u,s,c,l,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if(o=t[p],o||0===o)if("object"===mt.type(o))mt.merge(h,o.nodeType?[o]:o);else if(Kt.test(o)){for(a=a||f.appendChild(e.createElement("div")),u=(Zt.exec(o)||["",""])[1].toLowerCase(),s=Qt[u]||Qt._default,a.innerHTML=s[1]+mt.htmlPrefilter(o)+s[2],l=s[0];l--;)a=a.lastChild;mt.merge(h,a.childNodes),a=f.firstChild,a.textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&mt.inArray(o,r)>-1)i&&i.push(o);else if(c=mt.contains(o.ownerDocument,o),a=w(f.appendChild(o),"script"),c&&M(a),n)for(l=0;o=a[l++];)Jt.test(o.type||"")&&n.push(o);return f}function S(){return!0}function k(){return!1}function T(){try{return ot.activeElement}catch(t){}}function E(t,e,n,r,i,o){var a,u;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=void 0);for(u in e)E(t,u,n,r,e[u],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=k;else if(!i)return t;return 1===o&&(a=i,i=function(t){return mt().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=mt.guid++)),t.each(function(){mt.event.add(this,e,i,r,n)})}function C(t,e){return mt.nodeName(t,"table")&&mt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t:t}function N(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function A(t){var e=ue.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function L(t,e){var n,r,i,o,a,u,s,c;if(1===e.nodeType){if(Ft.hasData(t)&&(o=Ft.access(t),a=Ft.set(e,o),c=o.events)){delete a.handle,a.events={};for(i in c)for(n=0,r=c[i].length;n<r;n++)mt.event.add(e,i,c[i][n])}Ht.hasData(t)&&(u=Ht.access(t),s=mt.extend({},u),Ht.set(e,s))}}function q(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function D(t,e,n,r){e=st.apply([],e);var i,o,u,s,c,l,f=0,h=t.length,p=h-1,d=e[0],g=mt.isFunction(d);if(g||h>1&&"string"==typeof d&&!vt.checkClone&&ae.test(d))return t.each(function(i){var o=t.eq(i);g&&(e[0]=d.call(this,i,o.html())),D(o,e,n,r)});if(h&&(i=_(e,t[0].ownerDocument,!1,t,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=mt.map(w(i,"script"),N),s=u.length;f<h;f++)c=i,f!==p&&(c=mt.clone(c,!0,!0),s&&mt.merge(u,w(c,"script"))),n.call(t[f],c,f);if(s)for(l=u[u.length-1].ownerDocument,mt.map(u,A),f=0;f<s;f++)c=u[f],Jt.test(c.type||"")&&!Ft.access(c,"globalEval")&&mt.contains(l,c)&&(c.src?mt._evalUrl&&mt._evalUrl(c.src):a(c.textContent.replace(se,""),l))}return t}function j(t,e,n){for(var r,i=e?mt.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||mt.cleanData(w(r)),r.parentNode&&(n&&mt.contains(r.ownerDocument,r)&&M(w(r,"script")),r.parentNode.removeChild(r));return t}function R(t,e,n){var r,i,o,a,u=t.style;return n=n||fe(t),n&&(a=n.getPropertyValue(e)||n[e],""!==a||mt.contains(t.ownerDocument,t)||(a=mt.style(t,e)),!vt.pixelMarginRight()&&le.test(a)&&ce.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function P(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function O(t){if(t in ve)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ge.length;n--;)if(t=ge[n]+e,t in ve)return t}function z(t,e,n){var r=$t.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function F(t,e,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(a+=mt.css(t,n+Wt[o],!0,i)),r?("content"===n&&(a-=mt.css(t,"padding"+Wt[o],!0,i)),"margin"!==n&&(a-=mt.css(t,"border"+Wt[o]+"Width",!0,i))):(a+=mt.css(t,"padding"+Wt[o],!0,i),"padding"!==n&&(a+=mt.css(t,"border"+Wt[o]+"Width",!0,i)));return a}function H(t,e,n){var r,i=!0,o=fe(t),a="border-box"===mt.css(t,"boxSizing",!1,o);if(t.getClientRects().length&&(r=t.getBoundingClientRect()[e]),r<=0||null==r){if(r=R(t,e,o),(r<0||null==r)&&(r=t.style[e]),le.test(r))return r;i=a&&(vt.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+F(t,e,n||(a?"border":"content"),i,o)+"px"}function I(t,e,n,r,i){return new I.prototype.init(t,e,n,r,i)}function U(){me&&(n.requestAnimationFrame(U),mt.fx.tick())}function B(){return n.setTimeout(function(){ye=void 0}),ye=mt.now()}function $(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)n=Wt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function W(t,e,n){for(var r,i=(X.tweeners[e]||[]).concat(X.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function Y(t,e,n){var r,i,o,a,u,s,c,l,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&Yt(t),v=Ft.get(t,"fxshow");n.queue||(a=mt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,mt.queue(t,"fx").length||a.empty.fire()})}));for(r in e)if(i=e[r],xe.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}p[r]=v&&v[r]||mt.style(t,r)}if(s=!mt.isEmptyObject(e),s||!mt.isEmptyObject(p)){f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],c=v&&v.display,null==c&&(c=Ft.get(t,"display")),l=mt.css(t,"display"),"none"===l&&(c?l=c:(b([t],!0),c=t.style.display||c,l=mt.css(t,"display"),b([t]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===mt.css(t,"float")&&(s||(h.done(function(){d.display=c}),null==c&&(l=d.display,c="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),s=!1;for(r in p)s||(v?"hidden"in v&&(g=v.hidden):v=Ft.access(t,"fxshow",{display:c}),o&&(v.hidden=!g),g&&b([t],!0),h.done(function(){g||b([t]),Ft.remove(t,"fxshow");for(r in p)mt.style(t,r,p[r])})),s=W(g?v[r]:0,r,h),r in v||(v[r]=s.start,g&&(s.end=s.start,s.start=0))}}function V(t,e){var n,r,i,o,a;for(n in t)if(r=mt.camelCase(n),i=e[r],o=t[n],mt.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),a=mt.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function X(t,e,n){var r,i,o=0,a=X.prefilters.length,u=mt.Deferred().always(function(){delete s.elem}),s=function(){if(i)return!1;for(var e=ye||B(),n=Math.max(0,c.startTime+c.duration-e),r=n/c.duration||0,o=1-r,a=0,s=c.tweens.length;a<s;a++)c.tweens[a].run(o);return u.notifyWith(t,[c,o,n]),o<1&&s?n:(u.resolveWith(t,[c]),!1)},c=u.promise({elem:t,props:mt.extend({},e),opts:mt.extend(!0,{specialEasing:{},easing:mt.easing._default},n),originalProperties:e,originalOptions:n,startTime:ye||B(),duration:n.duration,tweens:[],createTween:function(e,n){var r=mt.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return e?(u.notifyWith(t,[c,1,0]),u.resolveWith(t,[c,e])):u.rejectWith(t,[c,e]),this}}),l=c.props;for(V(l,c.opts.specialEasing);o<a;o++)if(r=X.prefilters[o].call(c,t,l,c.opts))return mt.isFunction(r.stop)&&(mt._queueHooks(c.elem,c.opts.queue).stop=mt.proxy(r.stop,r)),r;return mt.map(l,W,c),mt.isFunction(c.opts.start)&&c.opts.start.call(t,c),mt.fx.timer(mt.extend(s,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function G(t){var e=t.match(jt)||[];return e.join(" ")}function Z(t){return t.getAttribute&&t.getAttribute("class")||""}function J(t,e,n,r){var i;if(mt.isArray(e))mt.each(e,function(e,i){n||Ae.test(t)?r(t,i):J(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==mt.type(e))r(t,e);else for(i in e)J(t+"["+i+"]",e[i],n,r)}function Q(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(jt)||[];if(mt.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function K(t,e,n,r){function i(u){var s;return o[u]=!0,mt.each(t[u]||[],function(t,u){var c=u(e,n,r);return"string"!=typeof c||a||o[c]?a?!(s=c):void 0:(e.dataTypes.unshift(c),i(c),!1)}),s}var o={},a=t===Ue;return i(e.dataTypes[0])||!o["*"]&&i("*")}function tt(t,e){var n,r,i=mt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&mt.extend(!0,t,r),t}function et(t,e,n){for(var r,i,o,a,u=t.contents,s=t.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in u)if(u[i]&&u[i].test(r)){s.unshift(i);break}if(s[0]in n)o=s[0];else{for(i in n){if(!s[0]||t.converters[i+" "+s[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==s[0]&&s.unshift(o),n[o]}function nt(t,e,n,r){var i,o,a,u,s,c={},l=t.dataTypes.slice();if(l[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!s&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),s=o,o=l.shift())if("*"===o)o=s;else if("*"!==s&&s!==o){if(a=c[s+" "+o]||c["* "+o],!a)for(i in c)if(u=i.split(" "),u[1]===o&&(a=c[s+" "+u[0]]||c["* "+u[0]])){a===!0?a=c[i]:c[i]!==!0&&(o=u[0],l.unshift(u[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+s+" to "+o}}}return{state:"success",data:e}}function rt(t){return mt.isWindow(t)?t:9===t.nodeType&&t.defaultView}var it=[],ot=n.document,at=Object.getPrototypeOf,ut=it.slice,st=it.concat,ct=it.push,lt=it.indexOf,ft={},ht=ft.toString,pt=ft.hasOwnProperty,dt=pt.toString,gt=dt.call(Object),vt={},yt="3.1.1",mt=function(t,e){return new mt.fn.init(t,e)},xt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,bt=/^-ms-/,wt=/-([a-z])/g,Mt=function(t,e){return e.toUpperCase()};mt.fn=mt.prototype={jquery:yt,constructor:mt,length:0,toArray:function(){return ut.call(this)},get:function(t){return null==t?ut.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=mt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return mt.each(this,t)},map:function(t){return this.pushStack(mt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(ut.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ct,sort:it.sort,splice:it.splice},mt.extend=mt.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},u=1,s=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[u]||{},u++),"object"==typeof a||mt.isFunction(a)||(a={}),u===s&&(a=this,u--);u<s;u++)if(null!=(t=arguments[u]))for(e in t)n=a[e],r=t[e],a!==r&&(c&&r&&(mt.isPlainObject(r)||(i=mt.isArray(r)))?(i?(i=!1,o=n&&mt.isArray(n)?n:[]):o=n&&mt.isPlainObject(n)?n:{},a[e]=mt.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},mt.extend({expando:"jQuery"+(yt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===mt.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=mt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==ht.call(t)||(e=at(t))&&(n=pt.call(e,"constructor")&&e.constructor,"function"!=typeof n||dt.call(n)!==gt))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?ft[ht.call(t)]||"object":typeof t},globalEval:function(t){a(t)},camelCase:function(t){return t.replace(bt,"ms-").replace(wt,Mt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,r=0;if(u(t))for(n=t.length;r<n&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(xt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(u(Object(t))?mt.merge(n,"string"==typeof t?[t]:t):ct.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:lt.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r,i=[],o=0,a=t.length,u=!n;o<a;o++)r=!e(t[o],o),r!==u&&i.push(t[o]);return i},map:function(t,e,n){var r,i,o=0,a=[];if(u(t))for(r=t.length;o<r;o++)i=e(t[o],o,n),null!=i&&a.push(i);else for(o in t)i=e(t[o],o,n),null!=i&&a.push(i);return st.apply([],a)},guid:1,proxy:function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),mt.isFunction(t))return r=ut.call(arguments,2),i=function(){return t.apply(e||this,r.concat(ut.call(arguments)))},i.guid=t.guid=t.guid||mt.guid++,i},now:Date.now,support:vt}),"function"==typeof Symbol&&(mt.fn[Symbol.iterator]=it[Symbol.iterator]),mt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){ft["[object "+e+"]"]=e.toLowerCase()});var _t=/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
function(t){function e(t,e,n,r){var i,o,a,u,s,c,l,h=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&((e?e.ownerDocument||e:I)!==D&&q(e),e=e||D,R)){if(11!==d&&(s=yt.exec(t)))if(i=s[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(h&&(a=h.getElementById(i))&&F(e,a)&&a.id===i)return n.push(a),n}else{if(s[2])return Q.apply(n,e.getElementsByTagName(t)),n;if((i=s[3])&&M.getElementsByClassName&&e.getElementsByClassName)return Q.apply(n,e.getElementsByClassName(i)),n}if(M.qsa&&!Y[t+" "]&&(!P||!P.test(t))){if(1!==d)h=e,l=t;else if("object"!==e.nodeName.toLowerCase()){for((u=e.getAttribute("id"))?u=u.replace(wt,Mt):e.setAttribute("id",u=H),c=T(t),o=c.length;o--;)c[o]="#"+u+" "+p(c[o]);l=c.join(","),h=mt.test(t)&&f(e.parentNode)||e}if(l)try{return Q.apply(n,h.querySelectorAll(l)),n}catch(g){}finally{u===H&&e.removeAttribute("id")}}}return C(t.replace(ut,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>_.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[H]=!0,t}function i(t){var e=D.createElement("fieldset");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=n.length;r--;)_.attrHandle[n[r]]=e}function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function u(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function s(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&St(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function l(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function f(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function d(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,u=B++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,s){var c,l,f,h=[U,u];if(s){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,s))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(f=e[H]||(e[H]={}),l=f[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((c=l[o])&&c[0]===U&&c[1]===u)return h[2]=c[2];if(l[o]=h,h[2]=t(e,n,s))return!0}return!1}}function g(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function v(t,n,r){for(var i=0,o=n.length;i<o;i++)e(t,n[i],r);return r}function y(t,e,n,r,i){for(var o,a=[],u=0,s=t.length,c=null!=e;u<s;u++)(o=t[u])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(u)));return a}function m(t,e,n,i,o,a){return i&&!i[H]&&(i=m(i)),o&&!o[H]&&(o=m(o,a)),r(function(r,a,u,s){var c,l,f,h=[],p=[],d=a.length,g=r||v(e||"*",u.nodeType?[u]:u,[]),m=!t||!r&&e?g:y(g,h,t,u,s),x=n?o||(r?t:d||i)?[]:a:m;if(n&&n(m,x,u,s),i)for(c=y(x,p),i(c,[],u,s),l=c.length;l--;)(f=c[l])&&(x[p[l]]=!(m[p[l]]=f));if(r){if(o||t){if(o){for(c=[],l=x.length;l--;)(f=x[l])&&c.push(m[l]=f);o(null,x=[],c,s)}for(l=x.length;l--;)(f=x[l])&&(c=o?tt(r,f):h[l])>-1&&(r[c]=!(a[c]=f))}}else x=y(x===a?x.splice(d,x.length):x),o?o(null,a,x,s):Q.apply(a,x)})}function x(t){for(var e,n,r,i=t.length,o=_.relative[t[0].type],a=o||_.relative[" "],u=o?1:0,s=d(function(t){return t===e},a,!0),c=d(function(t){return tt(e,t)>-1},a,!0),l=[function(t,n,r){var i=!o&&(r||n!==N)||((e=n).nodeType?s(t,n,r):c(t,n,r));return e=null,i}];u<i;u++)if(n=_.relative[t[u].type])l=[d(g(l),n)];else{if(n=_.filter[t[u].type].apply(null,t[u].matches),n[H]){for(r=++u;r<i&&!_.relative[t[r].type];r++);return m(u>1&&g(l),u>1&&p(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(ut,"$1"),n,u<r&&x(t.slice(u,r)),r<i&&x(t=t.slice(r)),r<i&&p(t))}l.push(n)}return g(l)}function b(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,u,s,c){var l,f,h,p=0,d="0",g=r&&[],v=[],m=N,x=r||o&&_.find.TAG("*",c),b=U+=null==m?1:Math.random()||.1,w=x.length;for(c&&(N=a===D||a||c);d!==w&&null!=(l=x[d]);d++){if(o&&l){for(f=0,a||l.ownerDocument===D||(q(l),u=!R);h=t[f++];)if(h(l,a||D,u)){s.push(l);break}c&&(U=b)}i&&((l=!h&&l)&&p--,r&&g.push(l))}if(p+=d,i&&d!==p){for(f=0;h=n[f++];)h(g,v,a,u);if(r){if(p>0)for(;d--;)g[d]||v[d]||(v[d]=Z.call(s));v=y(v)}Q.apply(s,v),c&&!r&&v.length>0&&p+n.length>1&&e.uniqueSort(s)}return c&&(U=b,N=m),g};return i?r(a):a}var w,M,_,S,k,T,E,C,N,A,L,q,D,j,R,P,O,z,F,H="sizzle"+1*new Date,I=t.document,U=0,B=0,$=n(),W=n(),Y=n(),V=function(t,e){return t===e&&(L=!0),0},X={}.hasOwnProperty,G=[],Z=G.pop,J=G.push,Q=G.push,K=G.slice,tt=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",it="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",ot=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),ut=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),st=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),lt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ft=new RegExp(ot),ht=new RegExp("^"+rt+"$"),pt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,mt=/[+~]/,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),bt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Mt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},_t=function(){q()},St=d(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Q.apply(G=K.call(I.childNodes),I.childNodes),G[I.childNodes.length].nodeType}catch(kt){Q={apply:G.length?function(t,e){J.apply(t,K.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}M=e.support={},k=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},q=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:I;return r!==D&&9===r.nodeType&&r.documentElement?(D=r,j=D.documentElement,R=!k(D),I!==D&&(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",_t,!1):n.attachEvent&&n.attachEvent("onunload",_t)),M.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),M.getElementsByTagName=i(function(t){return t.appendChild(D.createComment("")),!t.getElementsByTagName("*").length}),M.getElementsByClassName=vt.test(D.getElementsByClassName),M.getById=i(function(t){return j.appendChild(t).id=H,!D.getElementsByName||!D.getElementsByName(H).length}),M.getById?(_.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){return t.getAttribute("id")===e}},_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&R){var n=e.getElementById(t);return n?[n]:[]}}):(_.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&R){var n,r,i,o=e.getElementById(t);if(o){if(n=o.getAttributeNode("id"),n&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if(n=o.getAttributeNode("id"),n&&n.value===t)return[o]}return[]}}),_.find.TAG=M.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):M.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},_.find.CLASS=M.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&R)return e.getElementsByClassName(t)},O=[],P=[],(M.qsa=vt.test(D.querySelectorAll))&&(i(function(t){j.appendChild(t).innerHTML="<a id='"+H+"'></a><select id='"+H+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||P.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+H+"-]").length||P.push("~="),t.querySelectorAll(":checked").length||P.push(":checked"),t.querySelectorAll("a#"+H+"+*").length||P.push(".#.+[+~]")}),i(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=D.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&P.push("name"+nt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&P.push(":enabled",":disabled"),j.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&P.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),P.push(",.*:")})),(M.matchesSelector=vt.test(z=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&i(function(t){M.disconnectedMatch=z.call(t,"*"),z.call(t,"[s!='']:x"),O.push("!=",ot)}),P=P.length&&new RegExp(P.join("|")),O=O.length&&new RegExp(O.join("|")),e=vt.test(j.compareDocumentPosition),F=e||vt.test(j.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},V=e?function(t,e){if(t===e)return L=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!M.sortDetached&&e.compareDocumentPosition(t)===n?t===D||t.ownerDocument===I&&F(I,t)?-1:e===D||e.ownerDocument===I&&F(I,e)?1:A?tt(A,t)-tt(A,e):0:4&n?-1:1)}:function(t,e){if(t===e)return L=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,u=[t],s=[e];if(!i||!o)return t===D?-1:e===D?1:i?-1:o?1:A?tt(A,t)-tt(A,e):0;if(i===o)return a(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;u[r]===s[r];)r++;return r?a(u[r],s[r]):u[r]===I?-1:s[r]===I?1:0},D):D},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==D&&q(t),n=n.replace(lt,"='$1']"),M.matchesSelector&&R&&!Y[n+" "]&&(!O||!O.test(n))&&(!P||!P.test(n)))try{var r=z.call(t,n);if(r||M.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(i){}return e(n,D,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==D&&q(t),F(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==D&&q(t);var n=_.attrHandle[e.toLowerCase()],r=n&&X.call(_.attrHandle,e.toLowerCase())?n(t,e,!R):void 0;return void 0!==r?r:M.attributes||!R?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.escape=function(t){return(t+"").replace(wt,Mt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(L=!M.detectDuplicates,A=!M.sortStable&&t.slice(0),t.sort(V),L){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return A=null,t},S=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=S(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=S(e);return n},_=e.selectors={cacheLength:50,createPseudo:r,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,bt),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,bt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ft.test(n)&&(e=T(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,bt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=$[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&$(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(at," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),u="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,s){var c,l,f,h,p,d,g=o!==a?"nextSibling":"previousSibling",v=e.parentNode,y=u&&e.nodeName.toLowerCase(),m=!s&&!u,x=!1;if(v){if(o){for(;g;){for(h=e;h=h[g];)if(u?h.nodeName.toLowerCase()===y:1===h.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?v.firstChild:v.lastChild],a&&m){for(h=v,f=h[H]||(h[H]={}),l=f[h.uniqueID]||(f[h.uniqueID]={}),c=l[t]||[],p=c[0]===U&&c[1],x=p&&c[2],h=p&&v.childNodes[p];h=++p&&h&&h[g]||(x=p=0)||d.pop();)if(1===h.nodeType&&++x&&h===e){l[t]=[U,p,x];break}}else if(m&&(h=e,f=h[H]||(h[H]={}),l=f[h.uniqueID]||(f[h.uniqueID]={}),c=l[t]||[],p=c[0]===U&&c[1],x=p),x===!1)for(;(h=++p&&h&&h[g]||(x=p=0)||d.pop())&&((u?h.nodeName.toLowerCase()!==y:1!==h.nodeType)||!++x||(m&&(f=h[H]||(h[H]={}),l=f[h.uniqueID]||(f[h.uniqueID]={}),l[t]=[U,x]),h!==e)););return x-=i,x===r||x%r===0&&x/r>=0}}},PSEUDO:function(t,n){var i,o=_.pseudos[t]||_.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[H]?o(n):o.length>1?(i=[t,t,"",n],_.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)r=tt(t,i[a]),t[r]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=E(t.replace(ut,"$1"));return i[H]?r(function(t,e,n,r){for(var o,a=i(t,null,r,[]),u=t.length;u--;)(o=a[u])&&(t[u]=!(e[u]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(xt,bt),function(e){return(e.textContent||e.innerText||S(e)).indexOf(t)>-1}}),lang:r(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,bt).toLowerCase(),function(e){var n;do if(n=R?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===j},focus:function(t){return t===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!_.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:l(function(){return[0]}),last:l(function(t,e){return[e-1]}),eq:l(function(t,e,n){return[n<0?n+e:n]}),even:l(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:l(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:l(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:l(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}},_.pseudos.nth=_.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[w]=u(w);for(w in{submit:!0,reset:!0})_.pseudos[w]=s(w);return h.prototype=_.filters=_.pseudos,_.setFilters=new h,T=e.tokenize=function(t,n){var r,i,o,a,u,s,c,l=W[t+" "];if(l)return n?0:l.slice(0);for(u=t,s=[],c=_.preFilter;u;){r&&!(i=st.exec(u))||(i&&(u=u.slice(i[0].length)||u),s.push(o=[])),r=!1,(i=ct.exec(u))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ut," ")}),u=u.slice(r.length));for(a in _.filter)!(i=pt[a].exec(u))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),u=u.slice(r.length));if(!r)break}return n?u.length:u?e.error(t):W(t,s).slice(0)},E=e.compile=function(t,e){var n,r=[],i=[],o=Y[t+" "];if(!o){for(e||(e=T(t)),n=e.length;n--;)o=x(e[n]),o[H]?r.push(o):i.push(o);o=Y(t,b(i,r)),o.selector=t}return o},C=e.select=function(t,e,n,r){var i,o,a,u,s,c="function"==typeof t&&t,l=!r&&T(t=c.selector||t);if(n=n||[],1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===e.nodeType&&R&&_.relative[o[1].type]){if(e=(_.find.ID(a.matches[0].replace(xt,bt),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=pt.needsContext.test(t)?0:o.length;i--&&(a=o[i],!_.relative[u=a.type]);)if((s=_.find[u])&&(r=s(a.matches[0].replace(xt,bt),mt.test(o[0].type)&&f(e.parentNode)||e))){if(o.splice(i,1),t=r.length&&p(o),!t)return Q.apply(n,r),n;break}}return(c||E(t,l))(r,e,!R,n,!e||mt.test(t)&&f(e.parentNode)||e),n},M.sortStable=H.split("").sort(V).join("")===H,M.detectDuplicates=!!L,q(),M.sortDetached=i(function(t){return 1&t.compareDocumentPosition(D.createElement("fieldset"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),M.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var r;if(!n)return t[e]===!0?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(n);mt.find=_t,mt.expr=_t.selectors,mt.expr[":"]=mt.expr.pseudos,mt.uniqueSort=mt.unique=_t.uniqueSort,mt.text=_t.getText,mt.isXMLDoc=_t.isXML,mt.contains=_t.contains,mt.escapeSelector=_t.escape;var St=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&mt(t).is(n))break;r.push(t)}return r},kt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},Tt=mt.expr.match.needsContext,Et=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ct=/^.[^:#\[\.,]*$/;mt.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?mt.find.matchesSelector(r,t)?[r]:[]:mt.find.matches(t,mt.grep(e,function(t){return 1===t.nodeType}))},mt.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(mt(t).filter(function(){for(e=0;e<r;e++)if(mt.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)mt.find(t,i[e],n);return r>1?mt.uniqueSort(n):n},filter:function(t){return this.pushStack(s(this,t||[],!1))},not:function(t){return this.pushStack(s(this,t||[],!0))},is:function(t){return!!s(this,"string"==typeof t&&Tt.test(t)?mt(t):t||[],!1).length}});var Nt,At=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Lt=mt.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||Nt,"string"==typeof t){if(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:At.exec(t),!r||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof mt?e[0]:e,mt.merge(this,mt.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:ot,!0)),Et.test(r[1])&&mt.isPlainObject(e))for(r in e)mt.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return i=ot.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):mt.isFunction(t)?void 0!==n.ready?n.ready(t):t(mt):mt.makeArray(t,this)};Lt.prototype=mt.fn,Nt=mt(ot);var qt=/^(?:parents|prev(?:Until|All))/,Dt={children:!0,contents:!0,next:!0,prev:!0};mt.fn.extend({has:function(t){var e=mt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(mt.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&mt(t);if(!Tt.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&mt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?mt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?lt.call(mt(t),this[0]):lt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(mt.uniqueSort(mt.merge(this.get(),mt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),mt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return St(t,"parentNode")},parentsUntil:function(t,e,n){return St(t,"parentNode",n)},next:function(t){return c(t,"nextSibling")},prev:function(t){return c(t,"previousSibling")},nextAll:function(t){return St(t,"nextSibling")},prevAll:function(t){return St(t,"previousSibling")},nextUntil:function(t,e,n){return St(t,"nextSibling",n)},prevUntil:function(t,e,n){return St(t,"previousSibling",n)},siblings:function(t){return kt((t.parentNode||{}).firstChild,t)},children:function(t){return kt(t.firstChild)},contents:function(t){return t.contentDocument||mt.merge([],t.childNodes)}},function(t,e){mt.fn[t]=function(n,r){var i=mt.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=mt.filter(r,i)),this.length>1&&(Dt[t]||mt.uniqueSort(i),qt.test(t)&&i.reverse()),this.pushStack(i)}});var jt=/[^\x20\t\r\n\f]+/g;mt.Callbacks=function(t){t="string"==typeof t?l(t):mt.extend({},t);var e,n,r,i,o=[],a=[],u=-1,s=function(){for(i=t.once,r=e=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)o[u].apply(n[0],n[1])===!1&&t.stopOnFalse&&(u=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(u=o.length-1,a.push(n)),function r(e){mt.each(e,function(e,n){mt.isFunction(n)?t.unique&&c.has(n)||o.push(n):n&&n.length&&"string"!==mt.type(n)&&r(n)})}(arguments),n&&!e&&s()),this},remove:function(){return mt.each(arguments,function(t,e){for(var n;(n=mt.inArray(e,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(t){return t?mt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||s()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},mt.extend({Deferred:function(t){var e=[["notify","progress",mt.Callbacks("memory"),mt.Callbacks("memory"),2],["resolve","done",mt.Callbacks("once memory"),mt.Callbacks("once memory"),0,"resolved"],["reject","fail",mt.Callbacks("once memory"),mt.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(t){return i.then(null,t)},pipe:function(){var t=arguments;return mt.Deferred(function(n){mt.each(e,function(e,r){var i=mt.isFunction(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&mt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,r,i){function o(t,e,r,i){return function(){var u=this,s=arguments,c=function(){var n,c;if(!(t<a)){if(n=r.apply(u,s),n===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,mt.isFunction(c)?i?c.call(n,o(a,e,f,i),o(a,e,h,i)):(a++,c.call(n,o(a,e,f,i),o(a,e,h,i),o(a,e,f,e.notifyWith))):(r!==f&&(u=void 0,s=[n]),(i||e.resolveWith)(u,s))}},l=i?c:function(){try{c()}catch(n){mt.Deferred.exceptionHook&&mt.Deferred.exceptionHook(n,l.stackTrace),t+1>=a&&(r!==h&&(u=void 0,s=[n]),e.rejectWith(u,s))}};t?l():(mt.Deferred.getStackHook&&(l.stackTrace=mt.Deferred.getStackHook()),n.setTimeout(l))}}var a=0;return mt.Deferred(function(n){e[0][3].add(o(0,n,mt.isFunction(i)?i:f,n.notifyWith)),e[1][3].add(o(0,n,mt.isFunction(t)?t:f)),e[2][3].add(o(0,n,mt.isFunction(r)?r:h))}).promise()},promise:function(t){return null!=t?mt.extend(t,i):i}},o={};return mt.each(e,function(t,n){var a=n[2],u=n[5];i[n[1]]=a.add,u&&a.add(function(){r=u},e[3-t][2].disable,e[0][2].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=ut.call(arguments),o=mt.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?ut.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(p(t,o.done(a(n)).resolve,o.reject),"pending"===o.state()||mt.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)p(i[n],a(n),o.reject);return o.promise()}});var Rt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;mt.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&Rt.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},mt.readyException=function(t){n.setTimeout(function(){throw t})};var Pt=mt.Deferred();mt.fn.ready=function(t){return Pt.then(t)["catch"](function(t){mt.readyException(t)}),this},mt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?mt.readyWait++:mt.ready(!0)},ready:function(t){(t===!0?--mt.readyWait:mt.isReady)||(mt.isReady=!0,t!==!0&&--mt.readyWait>0||Pt.resolveWith(ot,[mt]))}}),mt.ready.then=Pt.then,"complete"===ot.readyState||"loading"!==ot.readyState&&!ot.documentElement.doScroll?n.setTimeout(mt.ready):(ot.addEventListener("DOMContentLoaded",d),n.addEventListener("load",d));var Ot=function(t,e,n,r,i,o,a){var u=0,s=t.length,c=null==n;if("object"===mt.type(n)){i=!0;for(u in n)Ot(t,e,u,n[u],!0,o,a)}else if(void 0!==r&&(i=!0,mt.isFunction(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(mt(t),n)})),e))for(;u<s;u++)e(t[u],n,a?r:r.call(t[u],u,e(t[u],n)));return i?t:c?e.call(t):s?e(t[0],n):o},zt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};g.uid=1,g.prototype={cache:function(t){var e=t[this.expando];return e||(e={},zt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[mt.camelCase(e)]=n;else for(r in e)i[mt.camelCase(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][mt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){mt.isArray(e)?e=e.map(mt.camelCase):(e=mt.camelCase(e),e=e in r?[e]:e.match(jt)||[]),n=e.length;for(;n--;)delete r[e[n]]}(void 0===e||mt.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!mt.isEmptyObject(e)}};var Ft=new g,Ht=new g,It=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ut=/[A-Z]/g;mt.extend({hasData:function(t){return Ht.hasData(t)||Ft.hasData(t)},data:function(t,e,n){return Ht.access(t,e,n)},removeData:function(t,e){Ht.remove(t,e)},_data:function(t,e,n){return Ft.access(t,e,n)},_removeData:function(t,e){Ft.remove(t,e)}}),mt.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=Ht.get(o),1===o.nodeType&&!Ft.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=mt.camelCase(r.slice(5)),y(o,r,i[r])));Ft.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Ht.set(this,t)}):Ot(this,function(e){var n;if(o&&void 0===e){if(n=Ht.get(o,t),void 0!==n)return n;if(n=y(o,t),void 0!==n)return n}else this.each(function(){Ht.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Ht.remove(this,t)})}}),mt.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Ft.get(t,e),n&&(!r||mt.isArray(n)?r=Ft.access(t,e,mt.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=mt.queue(t,e),r=n.length,i=n.shift(),o=mt._queueHooks(t,e),a=function(){mt.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Ft.get(t,n)||Ft.access(t,n,{empty:mt.Callbacks("once memory").add(function(){Ft.remove(t,[e+"queue",n])})})}}),mt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?mt.queue(this[0],t):void 0===e?this:this.each(function(){var n=mt.queue(this,t,e);mt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&mt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){mt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=mt.Deferred(),o=this,a=this.length,u=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)n=Ft.get(o[a],t+"queueHooks"),n&&n.empty&&(r++,n.empty.add(u));return u(),i.promise(e)}});var Bt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,$t=new RegExp("^(?:([+-])=|)("+Bt+")([a-z%]*)$","i"),Wt=["Top","Right","Bottom","Left"],Yt=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&mt.contains(t.ownerDocument,t)&&"none"===mt.css(t,"display")},Vt=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=a[o];return i},Xt={};mt.fn.extend({show:function(){return b(this,!0)},hide:function(){return b(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Yt(this)?mt(this).show():mt(this).hide()})}});var Gt=/^(?:checkbox|radio)$/i,Zt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Jt=/^$|\/(?:java|ecma)script/i,Qt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Qt.optgroup=Qt.option,Qt.tbody=Qt.tfoot=Qt.colgroup=Qt.caption=Qt.thead,
Qt.th=Qt.td;var Kt=/<|&#?\w+;/;!function(){var t=ot.createDocumentFragment(),e=t.appendChild(ot.createElement("div")),n=ot.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),vt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",vt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var te=ot.documentElement,ee=/^key/,ne=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,re=/^([^.]*)(?:\.(.+)|)/;mt.event={global:{},add:function(t,e,n,r,i){var o,a,u,s,c,l,f,h,p,d,g,v=Ft.get(t);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&mt.find.matchesSelector(te,i),n.guid||(n.guid=mt.guid++),(s=v.events)||(s=v.events={}),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof mt&&mt.event.triggered!==e.type?mt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(jt)||[""],c=e.length;c--;)u=re.exec(e[c])||[],p=g=u[1],d=(u[2]||"").split(".").sort(),p&&(f=mt.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=mt.event.special[p]||{},l=mt.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&mt.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=s[p])||(h=s[p]=[],h.delegateCount=0,f.setup&&f.setup.call(t,r,d,a)!==!1||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,l):h.push(l),mt.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,u,s,c,l,f,h,p,d,g,v=Ft.hasData(t)&&Ft.get(t);if(v&&(s=v.events)){for(e=(e||"").match(jt)||[""],c=e.length;c--;)if(u=re.exec(e[c])||[],p=g=u[1],d=(u[2]||"").split(".").sort(),p){for(f=mt.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,h=s[p]||[],u=u[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)l=h[o],!i&&g!==l.origType||n&&n.guid!==l.guid||u&&!u.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));a&&!h.length&&(f.teardown&&f.teardown.call(t,d,v.handle)!==!1||mt.removeEvent(t,p,v.handle),delete s[p])}else for(p in s)mt.event.remove(t,p+e[c],n,r,!0);mt.isEmptyObject(s)&&Ft.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,u=mt.event.fix(t),s=new Array(arguments.length),c=(Ft.get(this,"events")||{})[u.type]||[],l=mt.event.special[u.type]||{};for(s[0]=u,e=1;e<arguments.length;e++)s[e]=arguments[e];if(u.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,u)!==!1){for(a=mt.event.handlers.call(this,u,c),e=0;(i=a[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,r=((mt.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(u.result=r)===!1&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,a,u=[],s=e.delegateCount,c=t.target;if(s&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||c.disabled!==!0)){for(o=[],a={},n=0;n<s;n++)r=e[n],i=r.selector+" ",void 0===a[i]&&(a[i]=r.needsContext?mt(i,this).index(c)>-1:mt.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&u.push({elem:c,handlers:o})}return c=this,s<e.length&&u.push({elem:c,handlers:e.slice(s)}),u},addProp:function(t,e){Object.defineProperty(mt.Event.prototype,t,{enumerable:!0,configurable:!0,get:mt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[mt.expando]?t:new mt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&mt.nodeName(this,"input"))return this.click(),!1},_default:function(t){return mt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},mt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},mt.Event=function(t,e){return this instanceof mt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?S:k,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&mt.extend(this,e),this.timeStamp=t&&t.timeStamp||mt.now(),void(this[mt.expando]=!0)):new mt.Event(t,e)},mt.Event.prototype={constructor:mt.Event,isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=S,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=S,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=S,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},mt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&ee.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&ne.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},mt.event.addProp),mt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){mt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||mt.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),mt.fn.extend({on:function(t,e,n,r){return E(this,t,e,n,r)},one:function(t,e,n,r){return E(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,mt(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=k),this.each(function(){mt.event.remove(this,t,n,e)})}});var ie=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,oe=/<script|<style|<link/i,ae=/checked\s*(?:[^=]|=\s*.checked.)/i,ue=/^true\/(.*)/,se=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;mt.extend({htmlPrefilter:function(t){return t.replace(ie,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,u=t.cloneNode(!0),s=mt.contains(t.ownerDocument,t);if(!(vt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||mt.isXMLDoc(t)))for(a=w(u),o=w(t),r=0,i=o.length;r<i;r++)q(o[r],a[r]);if(e)if(n)for(o=o||w(t),a=a||w(u),r=0,i=o.length;r<i;r++)L(o[r],a[r]);else L(t,u);return a=w(u,"script"),a.length>0&&M(a,!s&&w(t,"script")),u},cleanData:function(t){for(var e,n,r,i=mt.event.special,o=0;void 0!==(n=t[o]);o++)if(zt(n)){if(e=n[Ft.expando]){if(e.events)for(r in e.events)i[r]?mt.event.remove(n,r):mt.removeEvent(n,r,e.handle);n[Ft.expando]=void 0}n[Ht.expando]&&(n[Ht.expando]=void 0)}}}),mt.fn.extend({detach:function(t){return j(this,t,!0)},remove:function(t){return j(this,t)},text:function(t){return Ot(this,function(t){return void 0===t?mt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return D(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=C(this,t);e.appendChild(t)}})},prepend:function(){return D(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=C(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return D(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return D(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(mt.cleanData(w(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return mt.clone(this,t,e)})},html:function(t){return Ot(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!oe.test(t)&&!Qt[(Zt.exec(t)||["",""])[1].toLowerCase()]){t=mt.htmlPrefilter(t);try{for(;n<r;n++)e=this[n]||{},1===e.nodeType&&(mt.cleanData(w(e,!1)),e.innerHTML=t);e=0}catch(i){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return D(this,arguments,function(e){var n=this.parentNode;mt.inArray(this,t)<0&&(mt.cleanData(w(this)),n&&n.replaceChild(e,this))},t)}}),mt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){mt.fn[t]=function(t){for(var n,r=[],i=mt(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),mt(i[a])[e](n),ct.apply(r,n.get());return this.pushStack(r)}});var ce=/^margin/,le=new RegExp("^("+Bt+")(?!px)[a-z%]+$","i"),fe=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)};!function(){function t(){if(u){u.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",u.innerHTML="",te.appendChild(a);var t=n.getComputedStyle(u);e="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,u.style.marginRight="50%",i="4px"===t.marginRight,te.removeChild(a),u=null}}var e,r,i,o,a=ot.createElement("div"),u=ot.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",vt.clearCloneStyle="content-box"===u.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(u),mt.extend(vt,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var he=/^(none|table(?!-c[ea]).+)/,pe={position:"absolute",visibility:"hidden",display:"block"},de={letterSpacing:"0",fontWeight:"400"},ge=["Webkit","Moz","ms"],ve=ot.createElement("div").style;mt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=R(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,u=mt.camelCase(e),s=t.style;return e=mt.cssProps[u]||(mt.cssProps[u]=O(u)||u),a=mt.cssHooks[e]||mt.cssHooks[u],void 0===n?a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:s[e]:(o=typeof n,"string"===o&&(i=$t.exec(n))&&i[1]&&(n=m(t,e,i),o="number"),void(null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(mt.cssNumber[u]?"":"px")),vt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(s[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(s[e]=n))))}},css:function(t,e,n,r){var i,o,a,u=mt.camelCase(e);return e=mt.cssProps[u]||(mt.cssProps[u]=O(u)||u),a=mt.cssHooks[e]||mt.cssHooks[u],a&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=R(t,e,r)),"normal"===i&&e in de&&(i=de[e]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),mt.each(["height","width"],function(t,e){mt.cssHooks[e]={get:function(t,n,r){if(n)return!he.test(mt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?H(t,e,r):Vt(t,pe,function(){return H(t,e,r)})},set:function(t,n,r){var i,o=r&&fe(t),a=r&&F(t,e,r,"border-box"===mt.css(t,"boxSizing",!1,o),o);return a&&(i=$t.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=mt.css(t,e)),z(t,n,a)}}}),mt.cssHooks.marginLeft=P(vt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(R(t,"marginLeft"))||t.getBoundingClientRect().left-Vt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),mt.each({margin:"",padding:"",border:"Width"},function(t,e){mt.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+Wt[r]+e]=o[r]||o[r-2]||o[0];return i}},ce.test(t)||(mt.cssHooks[t+e].set=z)}),mt.fn.extend({css:function(t,e){return Ot(this,function(t,e,n){var r,i,o={},a=0;if(mt.isArray(e)){for(r=fe(t),i=e.length;a<i;a++)o[e[a]]=mt.css(t,e[a],!1,r);return o}return void 0!==n?mt.style(t,e,n):mt.css(t,e)},t,e,arguments.length>1)}}),mt.Tween=I,I.prototype={constructor:I,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||mt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(mt.cssNumber[n]?"":"px")},cur:function(){var t=I.propHooks[this.prop];return t&&t.get?t.get(this):I.propHooks._default.get(this)},run:function(t){var e,n=I.propHooks[this.prop];return this.options.duration?this.pos=e=mt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=mt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){mt.fx.step[t.prop]?mt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[mt.cssProps[t.prop]]&&!mt.cssHooks[t.prop]?t.elem[t.prop]=t.now:mt.style(t.elem,t.prop,t.now+t.unit)}}},I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},mt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},mt.fx=I.prototype.init,mt.fx.step={};var ye,me,xe=/^(?:toggle|show|hide)$/,be=/queueHooks$/;mt.Animation=mt.extend(X,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return m(n.elem,t,$t.exec(e),n),n}]},tweener:function(t,e){mt.isFunction(t)?(e=t,t=["*"]):t=t.match(jt);for(var n,r=0,i=t.length;r<i;r++)n=t[r],X.tweeners[n]=X.tweeners[n]||[],X.tweeners[n].unshift(e)},prefilters:[Y],prefilter:function(t,e){e?X.prefilters.unshift(t):X.prefilters.push(t)}}),mt.speed=function(t,e,n){var r=t&&"object"==typeof t?mt.extend({},t):{complete:n||!n&&e||mt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!mt.isFunction(e)&&e};return mt.fx.off||ot.hidden?r.duration=0:"number"!=typeof r.duration&&(r.duration in mt.fx.speeds?r.duration=mt.fx.speeds[r.duration]:r.duration=mt.fx.speeds._default),null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){mt.isFunction(r.old)&&r.old.call(this),r.queue&&mt.dequeue(this,r.queue)},r},mt.fn.extend({fadeTo:function(t,e,n,r){return this.filter(Yt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=mt.isEmptyObject(t),o=mt.speed(e,n,r),a=function(){var e=X(this,mt.extend({},t),o);(i||Ft.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=mt.timers,a=Ft.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&be.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||mt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Ft.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=mt.timers,a=r?r.length:0;for(n.finish=!0,mt.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),mt.each(["toggle","show","hide"],function(t,e){var n=mt.fn[e];mt.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate($(e,!0),t,r,i)}}),mt.each({slideDown:$("show"),slideUp:$("hide"),slideToggle:$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){mt.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),mt.timers=[],mt.fx.tick=function(){var t,e=0,n=mt.timers;for(ye=mt.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||mt.fx.stop(),ye=void 0},mt.fx.timer=function(t){mt.timers.push(t),t()?mt.fx.start():mt.timers.pop()},mt.fx.interval=13,mt.fx.start=function(){me||(me=n.requestAnimationFrame?n.requestAnimationFrame(U):n.setInterval(mt.fx.tick,mt.fx.interval))},mt.fx.stop=function(){n.cancelAnimationFrame?n.cancelAnimationFrame(me):n.clearInterval(me),me=null},mt.fx.speeds={slow:600,fast:200,_default:400},mt.fn.delay=function(t,e){return t=mt.fx?mt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}})},function(){var t=ot.createElement("input"),e=ot.createElement("select"),n=e.appendChild(ot.createElement("option"));t.type="checkbox",vt.checkOn=""!==t.value,vt.optSelected=n.selected,t=ot.createElement("input"),t.value="t",t.type="radio",vt.radioValue="t"===t.value}();var we,Me=mt.expr.attrHandle;mt.fn.extend({attr:function(t,e){return Ot(this,mt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){mt.removeAttr(this,t)})}}),mt.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?mt.prop(t,e,n):(1===o&&mt.isXMLDoc(t)||(i=mt.attrHooks[e.toLowerCase()]||(mt.expr.match.bool.test(e)?we:void 0)),void 0!==n?null===n?void mt.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=mt.find.attr(t,e),null==r?void 0:r))},attrHooks:{type:{set:function(t,e){if(!vt.radioValue&&"radio"===e&&mt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(jt);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),we={set:function(t,e,n){return e===!1?mt.removeAttr(t,n):t.setAttribute(n,n),n}},mt.each(mt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=Me[e]||mt.find.attr;Me[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=Me[a],Me[a]=i,i=null!=n(t,e,r)?a:null,Me[a]=o),i}});var _e=/^(?:input|select|textarea|button)$/i,Se=/^(?:a|area)$/i;mt.fn.extend({prop:function(t,e){return Ot(this,mt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[mt.propFix[t]||t]})}}),mt.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&mt.isXMLDoc(t)||(e=mt.propFix[e]||e,i=mt.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=mt.find.attr(t,"tabindex");return e?parseInt(e,10):_e.test(t.nodeName)||Se.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),vt.optSelected||(mt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),mt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){mt.propFix[this.toLowerCase()]=this}),mt.fn.extend({addClass:function(t){var e,n,r,i,o,a,u,s=0;if(mt.isFunction(t))return this.each(function(e){mt(this).addClass(t.call(this,e,Z(this)))});if("string"==typeof t&&t)for(e=t.match(jt)||[];n=this[s++];)if(i=Z(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");u=G(r),i!==u&&n.setAttribute("class",u)}return this},removeClass:function(t){var e,n,r,i,o,a,u,s=0;if(mt.isFunction(t))return this.each(function(e){mt(this).removeClass(t.call(this,e,Z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(jt)||[];n=this[s++];)if(i=Z(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");u=G(r),i!==u&&n.setAttribute("class",u)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):mt.isFunction(t)?this.each(function(n){mt(this).toggleClass(t.call(this,n,Z(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(r=0,i=mt(this),o=t.match(jt)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||(e=Z(this),e&&Ft.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Ft.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+G(Z(n))+" ").indexOf(e)>-1)return!0;return!1}});var ke=/\r/g;mt.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=mt.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,mt(this).val()):t,null==i?i="":"number"==typeof i?i+="":mt.isArray(i)&&(i=mt.map(i,function(t){return null==t?"":t+""})),e=mt.valHooks[this.type]||mt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))})):i?(e=mt.valHooks[i.type]||mt.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(ke,""):null==n?"":n)):void 0}}),mt.extend({valHooks:{option:{get:function(t){var e=mt.find.attr(t,"value");return null!=e?e:G(mt.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,u=a?null:[],s=a?o+1:i.length;for(r=o<0?s:a?o:0;r<s;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!mt.nodeName(n.parentNode,"optgroup"))){if(e=mt(n).val(),a)return e;u.push(e)}return u},set:function(t,e){for(var n,r,i=t.options,o=mt.makeArray(e),a=i.length;a--;)r=i[a],(r.selected=mt.inArray(mt.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),mt.each(["radio","checkbox"],function(){mt.valHooks[this]={set:function(t,e){if(mt.isArray(e))return t.checked=mt.inArray(mt(t).val(),e)>-1}},vt.checkOn||(mt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Te=/^(?:focusinfocus|focusoutblur)$/;mt.extend(mt.event,{trigger:function(t,e,r,i){var o,a,u,s,c,l,f,h=[r||ot],p=pt.call(t,"type")?t.type:t,d=pt.call(t,"namespace")?t.namespace.split("."):[];if(a=u=r=r||ot,3!==r.nodeType&&8!==r.nodeType&&!Te.test(p+mt.event.triggered)&&(p.indexOf(".")>-1&&(d=p.split("."),p=d.shift(),d.sort()),c=p.indexOf(":")<0&&"on"+p,t=t[mt.expando]?t:new mt.Event(p,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:mt.makeArray(e,[t]),f=mt.event.special[p]||{},i||!f.trigger||f.trigger.apply(r,e)!==!1)){if(!i&&!f.noBubble&&!mt.isWindow(r)){for(s=f.delegateType||p,Te.test(s+p)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||ot)&&h.push(u.defaultView||u.parentWindow||n)}for(o=0;(a=h[o++])&&!t.isPropagationStopped();)t.type=o>1?s:f.bindType||p,l=(Ft.get(a,"events")||{})[t.type]&&Ft.get(a,"handle"),l&&l.apply(a,e),l=c&&a[c],l&&l.apply&&zt(a)&&(t.result=l.apply(a,e),t.result===!1&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),e)!==!1||!zt(r)||c&&mt.isFunction(r[p])&&!mt.isWindow(r)&&(u=r[c],u&&(r[c]=null),mt.event.triggered=p,r[p](),mt.event.triggered=void 0,u&&(r[c]=u)),t.result}},simulate:function(t,e,n){var r=mt.extend(new mt.Event,n,{type:t,isSimulated:!0});mt.event.trigger(r,null,e)}}),mt.fn.extend({trigger:function(t,e){return this.each(function(){mt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return mt.event.trigger(t,e,n,!0)}}),mt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){mt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),mt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),vt.focusin="onfocusin"in n,vt.focusin||mt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){mt.event.simulate(e,t.target,mt.event.fix(t))};mt.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Ft.access(r,e);i||r.addEventListener(t,n,!0),Ft.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ft.access(r,e)-1;i?Ft.access(r,e,i):(r.removeEventListener(t,n,!0),Ft.remove(r,e))}}});var Ee=n.location,Ce=mt.now(),Ne=/\?/;mt.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(r){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||mt.error("Invalid XML: "+t),e};var Ae=/\[\]$/,Le=/\r?\n/g,qe=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;mt.param=function(t,e){var n,r=[],i=function(t,e){var n=mt.isFunction(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(mt.isArray(t)||t.jquery&&!mt.isPlainObject(t))mt.each(t,function(){i(this.name,this.value)});else for(n in t)J(n,t[n],e,i);return r.join("&")},mt.fn.extend({serialize:function(){return mt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=mt.prop(this,"elements");return t?mt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!mt(this).is(":disabled")&&De.test(this.nodeName)&&!qe.test(t)&&(this.checked||!Gt.test(t))}).map(function(t,e){var n=mt(this).val();return null==n?null:mt.isArray(n)?mt.map(n,function(t){return{name:e.name,value:t.replace(Le,"\r\n")}}):{name:e.name,value:n.replace(Le,"\r\n")}}).get()}});var je=/%20/g,Re=/#.*$/,Pe=/([?&])_=[^&]*/,Oe=/^(.*?):[ \t]*([^\r\n]*)$/gm,ze=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Fe=/^(?:GET|HEAD)$/,He=/^\/\//,Ie={},Ue={},Be="*/".concat("*"),$e=ot.createElement("a");$e.href=Ee.href,mt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ee.href,type:"GET",isLocal:ze.test(Ee.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":mt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?tt(tt(t,mt.ajaxSettings),e):tt(mt.ajaxSettings,t)},ajaxPrefilter:Q(Ie),ajaxTransport:Q(Ue),ajax:function(t,e){function r(t,e,r,u){var c,h,p,b,w,M=e;l||(l=!0,s&&n.clearTimeout(s),i=void 0,a=u||"",_.readyState=t>0?4:0,c=t>=200&&t<300||304===t,r&&(b=et(d,_,r)),b=nt(d,b,_,c),c?(d.ifModified&&(w=_.getResponseHeader("Last-Modified"),w&&(mt.lastModified[o]=w),w=_.getResponseHeader("etag"),w&&(mt.etag[o]=w)),204===t||"HEAD"===d.type?M="nocontent":304===t?M="notmodified":(M=b.state,h=b.data,p=b.error,c=!p)):(p=M,!t&&M||(M="error",t<0&&(t=0))),_.status=t,_.statusText=(e||M)+"",c?y.resolveWith(g,[h,M,_]):y.rejectWith(g,[_,M,p]),_.statusCode(x),x=void 0,f&&v.trigger(c?"ajaxSuccess":"ajaxError",[_,d,c?h:p]),m.fireWith(g,[_,M]),f&&(v.trigger("ajaxComplete",[_,d]),--mt.active||mt.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,o,a,u,s,c,l,f,h,p,d=mt.ajaxSetup({},e),g=d.context||d,v=d.context&&(g.nodeType||g.jquery)?mt(g):mt.event,y=mt.Deferred(),m=mt.Callbacks("once memory"),x=d.statusCode||{},b={},w={},M="canceled",_={readyState:0,getResponseHeader:function(t){var e;if(l){if(!u)for(u={};e=Oe.exec(a);)u[e[1].toLowerCase()]=e[2];e=u[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return l?a:null},setRequestHeader:function(t,e){return null==l&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==l&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)_.always(t[_.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||M;return i&&i.abort(e),r(0,e),this}};if(y.promise(_),d.url=((t||d.url||Ee.href)+"").replace(He,Ee.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(jt)||[""],null==d.crossDomain){c=ot.createElement("a");try{c.href=d.url,c.href=c.href,d.crossDomain=$e.protocol+"//"+$e.host!=c.protocol+"//"+c.host}catch(S){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=mt.param(d.data,d.traditional)),K(Ie,d,e,_),l)return _;f=mt.event&&d.global,f&&0===mt.active++&&mt.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Fe.test(d.type),o=d.url.replace(Re,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(je,"+")):(p=d.url.slice(o.length),d.data&&(o+=(Ne.test(o)?"&":"?")+d.data,delete d.data),d.cache===!1&&(o=o.replace(Pe,"$1"),p=(Ne.test(o)?"&":"?")+"_="+Ce++ +p),d.url=o+p),d.ifModified&&(mt.lastModified[o]&&_.setRequestHeader("If-Modified-Since",mt.lastModified[o]),mt.etag[o]&&_.setRequestHeader("If-None-Match",mt.etag[o])),(d.data&&d.hasContent&&d.contentType!==!1||e.contentType)&&_.setRequestHeader("Content-Type",d.contentType),_.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]);for(h in d.headers)_.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(d.beforeSend.call(g,_,d)===!1||l))return _.abort();if(M="abort",m.add(d.complete),_.done(d.success),_.fail(d.error),i=K(Ue,d,e,_)){if(_.readyState=1,f&&v.trigger("ajaxSend",[_,d]),l)return _;d.async&&d.timeout>0&&(s=n.setTimeout(function(){_.abort("timeout")},d.timeout));try{l=!1,i.send(b,r)}catch(S){if(l)throw S;r(-1,S)}}else r(-1,"No Transport");return _},getJSON:function(t,e,n){return mt.get(t,e,n,"json")},getScript:function(t,e){return mt.get(t,void 0,e,"script")}}),mt.each(["get","post"],function(t,e){mt[e]=function(t,n,r,i){return mt.isFunction(n)&&(i=i||r,r=n,n=void 0),mt.ajax(mt.extend({url:t,type:e,dataType:i,data:n,success:r},mt.isPlainObject(t)&&t))}}),mt._evalUrl=function(t){return mt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},mt.fn.extend({wrapAll:function(t){var e;return this[0]&&(mt.isFunction(t)&&(t=t.call(this[0])),e=mt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return mt.isFunction(t)?this.each(function(e){mt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=mt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=mt.isFunction(t);return this.each(function(n){mt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){
return this.parent(t).not("body").each(function(){mt(this).replaceWith(this.childNodes)}),this}}),mt.expr.pseudos.hidden=function(t){return!mt.expr.pseudos.visible(t)},mt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},mt.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var We={0:200,1223:204},Ye=mt.ajaxSettings.xhr();vt.cors=!!Ye&&"withCredentials"in Ye,vt.ajax=Ye=!!Ye,mt.ajaxTransport(function(t){var e,r;if(vt.cors||Ye&&!t.crossDomain)return{send:function(i,o){var a,u=t.xhr();if(u.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)u[a]=t.xhrFields[a];t.mimeType&&u.overrideMimeType&&u.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)u.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=u.onload=u.onerror=u.onabort=u.onreadystatechange=null,"abort"===t?u.abort():"error"===t?"number"!=typeof u.status?o(0,"error"):o(u.status,u.statusText):o(We[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=e(),r=u.onerror=e("error"),void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){4===u.readyState&&n.setTimeout(function(){e&&r()})},e=e("abort");try{u.send(t.hasContent&&t.data||null)}catch(s){if(e)throw s}},abort:function(){e&&e()}}}),mt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),mt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return mt.globalEval(t),t}}}),mt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),mt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=mt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),ot.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ve=[],Xe=/(=)\?(?=&|$)|\?\?/;mt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||mt.expando+"_"+Ce++;return this[t]=!0,t}}),mt.ajaxPrefilter("json jsonp",function(t,e,r){var i,o,a,u=t.jsonp!==!1&&(Xe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xe.test(t.data)&&"data");if(u||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=mt.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,u?t[u]=t[u].replace(Xe,"$1"+i):t.jsonp!==!1&&(t.url+=(Ne.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||mt.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?mt(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(i)),a&&mt.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),vt.createHTMLDocument=function(){var t=ot.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),mt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var r,i,o;return e||(vt.createHTMLDocument?(e=ot.implementation.createHTMLDocument(""),r=e.createElement("base"),r.href=ot.location.href,e.head.appendChild(r)):e=ot),i=Et.exec(t),o=!n&&[],i?[e.createElement(i[1])]:(i=_([t],e,o),o&&o.length&&mt(o).remove(),mt.merge([],i.childNodes))},mt.fn.load=function(t,e,n){var r,i,o,a=this,u=t.indexOf(" ");return u>-1&&(r=G(t.slice(u)),t=t.slice(0,u)),mt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&mt.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?mt("<div>").append(mt.parseHTML(t)).find(r):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},mt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){mt.fn[e]=function(t){return this.on(e,t)}}),mt.expr.pseudos.animated=function(t){return mt.grep(mt.timers,function(e){return t===e.elem}).length},mt.offset={setOffset:function(t,e,n){var r,i,o,a,u,s,c,l=mt.css(t,"position"),f=mt(t),h={};"static"===l&&(t.style.position="relative"),u=f.offset(),o=mt.css(t,"top"),s=mt.css(t,"left"),c=("absolute"===l||"fixed"===l)&&(o+s).indexOf("auto")>-1,c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(s)||0),mt.isFunction(e)&&(e=e.call(t,n,mt.extend({},u))),null!=e.top&&(h.top=e.top-u.top+a),null!=e.left&&(h.left=e.left-u.left+i),"using"in e?e.using.call(t,h):f.css(h)}},mt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){mt.offset.setOffset(this,t,e)});var e,n,r,i,o=this[0];return o?o.getClientRects().length?(r=o.getBoundingClientRect(),r.width||r.height?(i=o.ownerDocument,n=rt(i),e=i.documentElement,{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===mt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),mt.nodeName(t[0],"html")||(r=t.offset()),r={top:r.top+mt.css(t[0],"borderTopWidth",!0),left:r.left+mt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-r.top-mt.css(n,"marginTop",!0),left:e.left-r.left-mt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===mt.css(t,"position");)t=t.offsetParent;return t||te})}}),mt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;mt.fn[t]=function(r){return Ot(this,function(t,r,i){var o=rt(t);return void 0===i?o?o[e]:t[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i)},t,r,arguments.length)}}),mt.each(["top","left"],function(t,e){mt.cssHooks[e]=P(vt.pixelPosition,function(t,n){if(n)return n=R(t,e),le.test(n)?mt(t).position()[e]+"px":n})}),mt.each({Height:"height",Width:"width"},function(t,e){mt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){mt.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),u=n||(i===!0||o===!0?"margin":"border");return Ot(this,function(e,n,i){var o;return mt.isWindow(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?mt.css(e,n,u):mt.style(e,n,i,u)},e,a?i:void 0,a)}})}),mt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),mt.parseJSON=JSON.parse,r=[],i=function(){return mt}.apply(e,r),!(void 0!==i&&(t.exports=i));var Ge=n.jQuery,Ze=n.$;return mt.noConflict=function(t){return n.$===mt&&(n.$=Ze),t&&n.jQuery===mt&&(n.jQuery=Ge),mt},o||(n.jQuery=n.$=mt),mt})},function(t,e,n){var r,i;!function(o,a){"use strict";r=a,i="function"==typeof r?r.call(e,n,e,t):r,!(void 0!==i&&(t.exports=i))}(this,function(){"use strict";function t(t){return typeof console!==u&&(void 0!==console[t]?e(console,t):void 0!==console.log?e(console,"log"):a)}function e(t,e){var n=t[e];if("function"==typeof n.bind)return n.bind(t);try{return Function.prototype.bind.call(n,t)}catch(r){return function(){return Function.prototype.apply.apply(n,[t,arguments])}}}function n(t,e,n){return function(){typeof console!==u&&(r.call(this,e,n),this[t].apply(this,arguments))}}function r(t,e){for(var n=0;n<s.length;n++){var r=s[n];this[r]=n<t?a:this.methodFactory(r,t,e)}}function i(e,r,i){return t(e)||n.apply(this,arguments)}function o(t,e,n){function o(t){var e=(s[t]||"silent").toUpperCase();try{return void(window.localStorage[f]=e)}catch(n){}try{window.document.cookie=encodeURIComponent(f)+"="+e+";"}catch(n){}}function a(){var t;try{t=window.localStorage[f]}catch(e){}if(typeof t===u)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(f)+"=");r&&(t=/^([^;]+)/.exec(n.slice(r))[1])}catch(e){}return void 0===l.levels[t]&&(t=void 0),t}var c,l=this,f="loglevel";t&&(f+=":"+t),l.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},l.methodFactory=n||i,l.getLevel=function(){return c},l.setLevel=function(e,n){if("string"==typeof e&&void 0!==l.levels[e.toUpperCase()]&&(e=l.levels[e.toUpperCase()]),!("number"==typeof e&&e>=0&&e<=l.levels.SILENT))throw"log.setLevel() called with invalid level: "+e;if(c=e,n!==!1&&o(e),r.call(l,e,t),typeof console===u&&e<l.levels.SILENT)return"No console available for logging"},l.setDefaultLevel=function(t){a()||l.setLevel(t,!1)},l.enableAll=function(t){l.setLevel(l.levels.TRACE,t)},l.disableAll=function(t){l.setLevel(l.levels.SILENT,t)};var h=a();null==h&&(h=null==e?"WARN":e),l.setLevel(h,!1)}var a=function(){},u="undefined",s=["trace","debug","info","warn","error"],c=new o,l={};c.getLogger=function(t){if("string"!=typeof t||""===t)throw new TypeError("You must supply a name when creating a logger.");var e=l[t];return e||(e=l[t]=new o(t,c.getLevel(),c.methodFactory)),e};var f=typeof window!==u?window.log:void 0;return c.noConflict=function(){return typeof window!==u&&window.log===c&&(window.log=f),c},c})},function(t,e,n){var r,i;!function(){function o(t){return t&&(t.ownerDocument||t.document||t).documentElement}function a(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}function u(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function s(t){return null===t?NaN:+t}function c(t){return!isNaN(t)}function l(t){return{left:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}}function f(t){return t.length}function h(t){for(var e=1;t*e%1;)e*=10;return e}function p(t,e){for(var n in e)Object.defineProperty(t.prototype,n,{value:e[n],enumerable:!1})}function d(){this._=Object.create(null)}function g(t){return(t+="")===Ta||t[0]===Ea?Ea+t:t}function v(t){return(t+="")[0]===Ea?t.slice(1):t}function y(t){return g(t)in this._}function m(t){return(t=g(t))in this._&&delete this._[t]}function x(){var t=[];for(var e in this._)t.push(v(e));return t}function b(){var t=0;for(var e in this._)++t;return t}function w(){for(var t in this._)return!1;return!0}function M(){this._=Object.create(null)}function _(t){return t}function S(t,e,n){return function(){var r=n.apply(e,arguments);return r===e?t:r}}function k(t,e){if(e in t)return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var n=0,r=Ca.length;n<r;++n){var i=Ca[n]+e;if(i in t)return i}}function T(){}function E(){}function C(t){function e(){for(var e,r=n,i=-1,o=r.length;++i<o;)(e=r[i].on)&&e.apply(this,arguments);return t}var n=[],r=new d;return e.on=function(e,i){var o,a=r.get(e);return arguments.length<2?a&&a.on:(a&&(a.on=null,n=n.slice(0,o=n.indexOf(a)).concat(n.slice(o+1)),r.remove(e)),i&&n.push(r.set(e,{on:i})),t)},e}function N(){pa.event.preventDefault()}function A(){for(var t,e=pa.event;t=e.sourceEvent;)e=t;return e}function L(t){for(var e=new E,n=0,r=arguments.length;++n<r;)e[arguments[n]]=C(e);return e.of=function(n,r){return function(i){try{var o=i.sourceEvent=pa.event;i.target=t,pa.event=i,e[i.type].apply(n,r)}finally{pa.event=o}}},e}function q(t){return Aa(t,ja),t}function D(t){return"function"==typeof t?t:function(){return La(t,this)}}function j(t){return"function"==typeof t?t:function(){return qa(t,this)}}function R(t,e){function n(){this.removeAttribute(t)}function r(){this.removeAttributeNS(t.space,t.local)}function i(){this.setAttribute(t,e)}function o(){this.setAttributeNS(t.space,t.local,e)}function a(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}function u(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}return t=pa.ns.qualify(t),null==e?t.local?r:n:"function"==typeof e?t.local?u:a:t.local?o:i}function P(t){return t.trim().replace(/\s+/g," ")}function O(t){return new RegExp("(?:^|\\s+)"+pa.requote(t)+"(?:\\s+|$)","g")}function z(t){return(t+"").trim().split(/^|\s+/)}function F(t,e){function n(){for(var n=-1;++n<i;)t[n](this,e)}function r(){for(var n=-1,r=e.apply(this,arguments);++n<i;)t[n](this,r)}t=z(t).map(H);var i=t.length;return"function"==typeof e?r:n}function H(t){var e=O(t);return function(n,r){if(i=n.classList)return r?i.add(t):i.remove(t);var i=n.getAttribute("class")||"";r?(e.lastIndex=0,e.test(i)||n.setAttribute("class",P(i+" "+t))):n.setAttribute("class",P(i.replace(e," ")))}}function I(t,e,n){function r(){this.style.removeProperty(t)}function i(){this.style.setProperty(t,e,n)}function o(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}return null==e?r:"function"==typeof e?o:i}function U(t,e){function n(){delete this[t]}function r(){this[t]=e}function i(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}return null==e?n:"function"==typeof e?i:r}function B(t){function e(){var e=this.ownerDocument,n=this.namespaceURI;return n===Ra&&e.documentElement.namespaceURI===Ra?e.createElement(t):e.createElementNS(n,t)}function n(){return this.ownerDocument.createElementNS(t.space,t.local)}return"function"==typeof t?t:(t=pa.ns.qualify(t)).local?n:e}function $(){var t=this.parentNode;t&&t.removeChild(this)}function W(t){return{__data__:t}}function Y(t){return function(){return Da(this,t)}}function V(t){return arguments.length||(t=u),function(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}}function X(t,e){for(var n=0,r=t.length;n<r;n++)for(var i,o=t[n],a=0,u=o.length;a<u;a++)(i=o[a])&&e(i,a,n);return t}function G(t){return Aa(t,Oa),t}function Z(t){var e,n;return function(r,i,o){var a,u=t[o].update,s=u.length;for(o!=n&&(n=o,e=0),i>=e&&(e=i+1);!(a=u[e])&&++e<s;);return a}}function J(t,e,n){function r(){var e=this[a];e&&(this.removeEventListener(t,e,e.$),delete this[a])}function i(){var i=s(e,ga(arguments));r.call(this),this.addEventListener(t,this[a]=i,i.$=n),i._=e}function o(){var e,n=new RegExp("^__on([^.]+)"+pa.requote(t)+"$");for(var r in this)if(e=r.match(n)){var i=this[r];this.removeEventListener(e[1],i,i.$),delete this[r]}}var a="__on"+t,u=t.indexOf("."),s=Q;u>0&&(t=t.slice(0,u));var c=za.get(t);return c&&(t=c,s=K),u?e?i:r:e?T:o}function Q(t,e){return function(n){var r=pa.event;pa.event=n,e[0]=this.__data__;try{t.apply(this,e)}finally{pa.event=r}}}function K(t,e){var n=Q(t,e);return function(t){var e=this,r=t.relatedTarget;r&&(r===e||8&r.compareDocumentPosition(e))||n.call(e,t)}}function tt(t){var e=".dragsuppress-"+ ++Ha,n="click"+e,r=pa.select(a(t)).on("touchmove"+e,N).on("dragstart"+e,N).on("selectstart"+e,N);if(null==Fa&&(Fa=!("onselectstart"in t)&&k(t.style,"userSelect")),Fa){var i=o(t).style,u=i[Fa];i[Fa]="none"}return function(t){if(r.on(e,null),Fa&&(i[Fa]=u),t){var o=function(){r.on(n,null)};r.on(n,function(){N(),o()},!0),setTimeout(o,0)}}}function et(t,e){e.changedTouches&&(e=e.changedTouches[0]);var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();if(Ia<0){var i=a(t);if(i.scrollX||i.scrollY){n=pa.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var o=n[0][0].getScreenCTM();Ia=!(o.f||o.e),n.remove()}}return Ia?(r.x=e.pageX,r.y=e.pageY):(r.x=e.clientX,r.y=e.clientY),r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var u=t.getBoundingClientRect();return[e.clientX-u.left-t.clientLeft,e.clientY-u.top-t.clientTop]}function nt(){return pa.event.changedTouches[0].identifier}function rt(t){return t>0?1:t<0?-1:0}function it(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function ot(t){return t>1?0:t<-1?$a:Math.acos(t)}function at(t){return t>1?Va:t<-1?-Va:Math.asin(t)}function ut(t){return((t=Math.exp(t))-1/t)/2}function st(t){return((t=Math.exp(t))+1/t)/2}function ct(t){return((t=Math.exp(2*t))-1)/(t+1)}function lt(t){return(t=Math.sin(t/2))*t}function ft(){}function ht(t,e,n){return this instanceof ht?(this.h=+t,this.s=+e,void(this.l=+n)):arguments.length<2?t instanceof ht?new ht(t.h,t.s,t.l):Tt(""+t,Et,ht):new ht(t,e,n)}function pt(t,e,n){function r(t){return t>360?t-=360:t<0&&(t+=360),t<60?o+(a-o)*t/60:t<180?a:t<240?o+(a-o)*(240-t)/60:o}function i(t){return Math.round(255*r(t))}var o,a;return t=isNaN(t)?0:(t%=360)<0?t+360:t,e=isNaN(e)?0:e<0?0:e>1?1:e,n=n<0?0:n>1?1:n,a=n<=.5?n*(1+e):n+e-n*e,o=2*n-a,new Mt(i(t+120),i(t),i(t-120))}function dt(t,e,n){return this instanceof dt?(this.h=+t,this.c=+e,void(this.l=+n)):arguments.length<2?t instanceof dt?new dt(t.h,t.c,t.l):t instanceof vt?mt(t.l,t.a,t.b):mt((t=Ct((t=pa.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new dt(t,e,n)}function gt(t,e,n){return isNaN(t)&&(t=0),isNaN(e)&&(e=0),new vt(n,Math.cos(t*=Xa)*e,Math.sin(t)*e)}function vt(t,e,n){return this instanceof vt?(this.l=+t,this.a=+e,void(this.b=+n)):arguments.length<2?t instanceof vt?new vt(t.l,t.a,t.b):t instanceof dt?gt(t.h,t.c,t.l):Ct((t=Mt(t)).r,t.g,t.b):new vt(t,e,n)}function yt(t,e,n){var r=(t+16)/116,i=r+e/500,o=r-n/200;return i=xt(i)*ou,r=xt(r)*au,o=xt(o)*uu,new Mt(wt(3.2404542*i-1.5371385*r-.4985314*o),wt(-.969266*i+1.8760108*r+.041556*o),wt(.0556434*i-.2040259*r+1.0572252*o))}function mt(t,e,n){return t>0?new dt(Math.atan2(n,e)*Ga,Math.sqrt(e*e+n*n),t):new dt(NaN,NaN,t)}function xt(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function bt(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function wt(t){return Math.round(255*(t<=.00304?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function Mt(t,e,n){return this instanceof Mt?(this.r=~~t,this.g=~~e,void(this.b=~~n)):arguments.length<2?t instanceof Mt?new Mt(t.r,t.g,t.b):Tt(""+t,Mt,pt):new Mt(t,e,n)}function _t(t){return new Mt(t>>16,t>>8&255,255&t)}function St(t){return _t(t)+""}function kt(t){return t<16?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function Tt(t,e,n){var r,i,o,a=0,u=0,s=0;if(r=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return n(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return e(At(i[0]),At(i[1]),At(i[2]))}return(o=lu.get(t))?e(o.r,o.g,o.b):(null==t||"#"!==t.charAt(0)||isNaN(o=parseInt(t.slice(1),16))||(4===t.length?(a=(3840&o)>>4,a=a>>4|a,u=240&o,u=u>>4|u,s=15&o,s=s<<4|s):7===t.length&&(a=(16711680&o)>>16,u=(65280&o)>>8,s=255&o)),e(a,u,s))}function Et(t,e,n){var r,i,o=Math.min(t/=255,e/=255,n/=255),a=Math.max(t,e,n),u=a-o,s=(a+o)/2;return u?(i=s<.5?u/(a+o):u/(2-a-o),r=t==a?(e-n)/u+(e<n?6:0):e==a?(n-t)/u+2:(t-e)/u+4,r*=60):(r=NaN,i=s>0&&s<1?0:r),new ht(r,i,s)}function Ct(t,e,n){t=Nt(t),e=Nt(e),n=Nt(n);var r=bt((.4124564*t+.3575761*e+.1804375*n)/ou),i=bt((.2126729*t+.7151522*e+.072175*n)/au),o=bt((.0193339*t+.119192*e+.9503041*n)/uu);return vt(116*i-16,500*(r-i),200*(i-o))}function Nt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function At(t){var e=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*e):e}function Lt(t){return"function"==typeof t?t:function(){return t}}function qt(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=null),Dt(e,n,t,r)}}function Dt(t,e,n,r){function i(){var t,e=s.status;if(!e&&Rt(s)||e>=200&&e<300||304===e){try{t=n.call(o,s)}catch(r){return void a.error.call(o,r)}a.load.call(o,t)}else a.error.call(o,s)}var o={},a=pa.dispatch("beforesend","progress","load","error"),u={},s=new XMLHttpRequest,c=null;return!this.XDomainRequest||"withCredentials"in s||!/^(http(s)?:)?\/\//.test(t)||(s=new XDomainRequest),"onload"in s?s.onload=s.onerror=i:s.onreadystatechange=function(){s.readyState>3&&i()},s.onprogress=function(t){var e=pa.event;pa.event=t;try{a.progress.call(o,s)}finally{pa.event=e}},o.header=function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?u[t]:(null==e?delete u[t]:u[t]=e+"",o)},o.mimeType=function(t){return arguments.length?(e=null==t?null:t+"",o):e},o.responseType=function(t){return arguments.length?(c=t,o):c},o.response=function(t){return n=t,o},["get","post"].forEach(function(t){o[t]=function(){return o.send.apply(o,[t].concat(ga(arguments)))}}),o.send=function(n,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),s.open(n,t,!0),null==e||"accept"in u||(u.accept=e+",*/*"),s.setRequestHeader)for(var l in u)s.setRequestHeader(l,u[l]);return null!=e&&s.overrideMimeType&&s.overrideMimeType(e),null!=c&&(s.responseType=c),null!=i&&o.on("error",i).on("load",function(t){i(null,t)}),a.beforesend.call(o,s),s.send(null==r?null:r),o},o.abort=function(){return s.abort(),o},pa.rebind(o,a,"on"),null==r?o:o.get(jt(r))}function jt(t){return 1===t.length?function(e,n){t(null==e?n:null)}:t}function Rt(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}function Pt(t,e,n){var r=arguments.length;r<2&&(e=0),r<3&&(n=Date.now());var i=n+e,o={c:t,t:i,n:null};return hu?hu.n=o:fu=o,hu=o,pu||(du=clearTimeout(du),pu=1,gu(Ot)),o}function Ot(){var t=zt(),e=Ft()-t;e>24?(isFinite(e)&&(clearTimeout(du),du=setTimeout(Ot,e)),pu=0):(pu=1,gu(Ot))}function zt(){for(var t=Date.now(),e=fu;e;)t>=e.t&&e.c(t-e.t)&&(e.c=null),e=e.n;return t}function Ft(){for(var t,e=fu,n=1/0;e;)e.c?(e.t<n&&(n=e.t),e=(t=e).n):e=t?t.n=e.n:fu=e.n;return hu=t,n}function Ht(t,e){return e-(t?Math.ceil(Math.log(t)/Math.LN10):1)}function It(t,e){var n=Math.pow(10,3*ka(8-e));return{scale:e>8?function(t){return t/n}:function(t){return t*n},symbol:t}}function Ut(t){var e=t.decimal,n=t.thousands,r=t.grouping,i=t.currency,o=r&&n?function(t,e){for(var i=t.length,o=[],a=0,u=r[0],s=0;i>0&&u>0&&(s+u+1>e&&(u=Math.max(1,e-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>e));)u=r[a=(a+1)%r.length];return o.reverse().join(n)}:_;return function(t){var n=yu.exec(t),r=n[1]||" ",a=n[2]||">",u=n[3]||"-",s=n[4]||"",c=n[5],l=+n[6],f=n[7],h=n[8],p=n[9],d=1,g="",v="",y=!1,m=!0;switch(h&&(h=+h.substring(1)),(c||"0"===r&&"="===a)&&(c=r="0",a="="),p){case"n":f=!0,p="g";break;case"%":d=100,v="%",p="f";break;case"p":d=100,v="%",p="r";break;case"b":case"o":case"x":case"X":"#"===s&&(g="0"+p.toLowerCase());case"c":m=!1;case"d":y=!0,h=0;break;case"s":d=-1,p="r"}"$"===s&&(g=i[0],v=i[1]),"r"!=p||h||(p="g"),null!=h&&("g"==p?h=Math.max(1,Math.min(21,h)):"e"!=p&&"f"!=p||(h=Math.max(0,Math.min(20,h)))),p=mu.get(p)||Bt;var x=c&&f;return function(t){var n=v;if(y&&t%1)return"";var i=t<0||0===t&&1/t<0?(t=-t,"-"):"-"===u?"":u;if(d<0){var s=pa.formatPrefix(t,h);t=s.scale(t),n=s.symbol+v}else t*=d;t=p(t,h);var b,w,M=t.lastIndexOf(".");if(M<0){var _=m?t.lastIndexOf("e"):-1;_<0?(b=t,w=""):(b=t.substring(0,_),w=t.substring(_))}else b=t.substring(0,M),w=e+t.substring(M+1);!c&&f&&(b=o(b,1/0));var S=g.length+b.length+w.length+(x?0:i.length),k=S<l?new Array(S=l-S+1).join(r):"";return x&&(b=o(k+b,k.length?l-w.length:1/0)),i+=g,t=b+w,("<"===a?i+t+k:">"===a?k+i+t:"^"===a?k.substring(0,S>>=1)+i+t+k.substring(S):i+(x?t:k+t))+n}}}function Bt(t){return t+""}function $t(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Wt(t,e,n){function r(e){var n=t(e),r=o(n,1);return e-n<r-e?n:r}function i(n){return e(n=t(new bu(n-1)),1),n}function o(t,n){return e(t=new bu((+t)),n),t}function a(t,r,o){var a=i(t),u=[];if(o>1)for(;a<r;)n(a)%o||u.push(new Date((+a))),e(a,1);else for(;a<r;)u.push(new Date((+a))),e(a,1);return u}function u(t,e,n){try{bu=$t;var r=new $t;return r._=t,a(r,e,n)}finally{bu=Date}}t.floor=t,t.round=r,t.ceil=i,t.offset=o,t.range=a;var s=t.utc=Yt(t);return s.floor=s,s.round=Yt(r),s.ceil=Yt(i),s.offset=Yt(o),s.range=u,t}function Yt(t){return function(e,n){try{bu=$t;var r=new $t;return r._=e,t(r,n)._}finally{bu=Date}}}function Vt(t){function e(t){function e(e){for(var n,i,o,a=[],u=-1,s=0;++u<r;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Mu[n=t.charAt(++u)])&&(n=t.charAt(++u)),(o=C[n])&&(n=o(e,null==i?"e"===n?" ":"0":i)),a.push(n),s=u+1);return a.push(t.slice(s,u)),a.join("")}var r=t.length;return e.parse=function(e){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},i=n(r,t,e,0);if(i!=e.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var o=null!=r.Z&&bu!==$t,a=new(o?$t:bu);return"j"in r?a.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),a.setFullYear(r.y,0,1),a.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(a.getDay()+5)%7:r.w+7*r.U-(a.getDay()+6)%7)):a.setFullYear(r.y,r.m,r.d),a.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),o?a._:a},e.toString=function(){return t},e}function n(t,e,n,r){for(var i,o,a,u=0,s=e.length,c=n.length;u<s;){if(r>=c)return-1;if(i=e.charCodeAt(u++),37===i){if(a=e.charAt(u++),o=N[a in Mu?e.charAt(u++):a],!o||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}function r(t,e,n){M.lastIndex=0;var r=M.exec(e.slice(n));return r?(t.w=_.get(r[0].toLowerCase()),n+r[0].length):-1}function i(t,e,n){b.lastIndex=0;var r=b.exec(e.slice(n));return r?(t.w=w.get(r[0].toLowerCase()),n+r[0].length):-1}function o(t,e,n){T.lastIndex=0;var r=T.exec(e.slice(n));return r?(t.m=E.get(r[0].toLowerCase()),n+r[0].length):-1}function a(t,e,n){S.lastIndex=0;var r=S.exec(e.slice(n));return r?(t.m=k.get(r[0].toLowerCase()),n+r[0].length):-1}function u(t,e,r){return n(t,C.c.toString(),e,r)}function s(t,e,r){return n(t,C.x.toString(),e,r)}function c(t,e,r){return n(t,C.X.toString(),e,r)}function l(t,e,n){var r=x.get(e.slice(n,n+=2).toLowerCase());return null==r?-1:(t.p=r,n)}var f=t.dateTime,h=t.date,p=t.time,d=t.periods,g=t.days,v=t.shortDays,y=t.months,m=t.shortMonths;e.utc=function(t){function n(t){try{bu=$t;var e=new bu;return e._=t,r(e)}finally{bu=Date}}var r=e(t);return n.parse=function(t){try{bu=$t;var e=r.parse(t);return e&&e._}finally{bu=Date}},n.toString=r.toString,n},e.multi=e.utc.multi=pe;var x=pa.map(),b=Gt(g),w=Zt(g),M=Gt(v),_=Zt(v),S=Gt(y),k=Zt(y),T=Gt(m),E=Zt(m);d.forEach(function(t,e){x.set(t.toLowerCase(),e)});var C={a:function(t){return v[t.getDay()]},A:function(t){return g[t.getDay()]},b:function(t){return m[t.getMonth()]},B:function(t){return y[t.getMonth()]},c:e(f),d:function(t,e){return Xt(t.getDate(),e,2)},e:function(t,e){return Xt(t.getDate(),e,2)},H:function(t,e){return Xt(t.getHours(),e,2)},I:function(t,e){return Xt(t.getHours()%12||12,e,2)},j:function(t,e){return Xt(1+xu.dayOfYear(t),e,3)},L:function(t,e){return Xt(t.getMilliseconds(),e,3)},m:function(t,e){return Xt(t.getMonth()+1,e,2)},M:function(t,e){return Xt(t.getMinutes(),e,2)},p:function(t){return d[+(t.getHours()>=12)]},S:function(t,e){return Xt(t.getSeconds(),e,2)},U:function(t,e){return Xt(xu.sundayOfYear(t),e,2)},w:function(t){return t.getDay()},W:function(t,e){return Xt(xu.mondayOfYear(t),e,2)},x:e(h),X:e(p),y:function(t,e){return Xt(t.getFullYear()%100,e,2)},Y:function(t,e){return Xt(t.getFullYear()%1e4,e,4)},Z:fe,"%":function(){return"%"}},N={a:r,A:i,b:o,B:a,c:u,d:oe,e:oe,H:ue,I:ue,j:ae,L:le,m:ie,M:se,p:l,S:ce,U:Qt,w:Jt,W:Kt,x:s,X:c,y:ee,Y:te,Z:ne,"%":he};return e}function Xt(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function Gt(t){return new RegExp("^(?:"+t.map(pa.requote).join("|")+")","i")}function Zt(t){for(var e=new d,n=-1,r=t.length;++n<r;)e.set(t[n].toLowerCase(),n);return e}function Jt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Qt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n));return r?(t.U=+r[0],n+r[0].length):-1}function Kt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n));return r?(t.W=+r[0],n+r[0].length):-1}function te(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ee(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.y=re(+r[0]),n+r[0].length):-1}function ne(t,e,n){return/^[+-]\d{4}$/.test(e=e.slice(n,n+5))?(t.Z=-e,n+5):-1}function re(t){return t+(t>68?1900:2e3)}function ie(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function oe(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function ae(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+3));return r?(t.j=+r[0],n+r[0].length):-1}function ue(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function se(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function ce(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function le(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function fe(t){var e=t.getTimezoneOffset(),n=e>0?"-":"+",r=ka(e)/60|0,i=ka(e)%60;return n+Xt(r,"0",2)+Xt(i,"0",2)}function he(t,e,n){Su.lastIndex=0;var r=Su.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function pe(t){for(var e=t.length,n=-1;++n<e;)t[n][0]=this(t[n][0]);return function(e){for(var n=0,r=t[n];!r[1](e);)r=t[++n];return r[0](e)}}function de(){}function ge(t,e,n){var r=n.s=t+e,i=r-t,o=r-i;n.t=t-o+(e-i)}function ve(t,e){t&&Cu.hasOwnProperty(t.type)&&Cu[t.type](t,e)}function ye(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function me(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)ye(t[n],e,1);e.polygonEnd()}function xe(){function t(t,e){t*=Xa,e=e*Xa/2+$a/4;var n=t-r,a=n>=0?1:-1,u=a*n,s=Math.cos(e),c=Math.sin(e),l=o*c,f=i*s+l*Math.cos(u),h=l*a*Math.sin(u);Au.add(Math.atan2(h,f)),r=t,i=s,o=c}var e,n,r,i,o;Lu.point=function(a,u){Lu.point=t,r=(e=a)*Xa,i=Math.cos(u=(n=u)*Xa/2+$a/4),o=Math.sin(u)},Lu.lineEnd=function(){t(e,n)}}function be(t){var e=t[0],n=t[1],r=Math.cos(n);return[r*Math.cos(e),r*Math.sin(e),Math.sin(n)]}function we(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Me(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function _e(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Se(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function ke(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function Te(t){return[Math.atan2(t[1],t[0]),at(t[2])]}function Ee(t,e){return ka(t[0]-e[0])<Ua&&ka(t[1]-e[1])<Ua}function Ce(t,e){t*=Xa;var n=Math.cos(e*=Xa);Ne(n*Math.cos(t),n*Math.sin(t),Math.sin(e))}function Ne(t,e,n){++qu,ju+=(t-ju)/qu,Ru+=(e-Ru)/qu,Pu+=(n-Pu)/qu}function Ae(){function t(t,i){t*=Xa;var o=Math.cos(i*=Xa),a=o*Math.cos(t),u=o*Math.sin(t),s=Math.sin(i),c=Math.atan2(Math.sqrt((c=n*s-r*u)*c+(c=r*a-e*s)*c+(c=e*u-n*a)*c),e*a+n*u+r*s);Du+=c,Ou+=c*(e+(e=a)),zu+=c*(n+(n=u)),Fu+=c*(r+(r=s)),Ne(e,n,r)}var e,n,r;Bu.point=function(i,o){i*=Xa;var a=Math.cos(o*=Xa);e=a*Math.cos(i),n=a*Math.sin(i),r=Math.sin(o),Bu.point=t,Ne(e,n,r)}}function Le(){Bu.point=Ce}function qe(){function t(t,e){t*=Xa;var n=Math.cos(e*=Xa),a=n*Math.cos(t),u=n*Math.sin(t),s=Math.sin(e),c=i*s-o*u,l=o*a-r*s,f=r*u-i*a,h=Math.sqrt(c*c+l*l+f*f),p=r*a+i*u+o*s,d=h&&-ot(p)/h,g=Math.atan2(h,p);Hu+=d*c,Iu+=d*l,Uu+=d*f,Du+=g,Ou+=g*(r+(r=a)),zu+=g*(i+(i=u)),Fu+=g*(o+(o=s)),Ne(r,i,o)}var e,n,r,i,o;Bu.point=function(a,u){e=a,n=u,Bu.point=t,a*=Xa;var s=Math.cos(u*=Xa);r=s*Math.cos(a),i=s*Math.sin(a),o=Math.sin(u),Ne(r,i,o)},Bu.lineEnd=function(){t(e,n),Bu.lineEnd=Le,Bu.point=Ce}}function De(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return n=e.invert(n,r),n&&t.invert(n[0],n[1])}),n}function je(){return!0}function Re(t,e,n,r,i){var o=[],a=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n=t[0],r=t[e];if(Ee(n,r)){i.lineStart();for(var u=0;u<e;++u)i.point((n=t[u])[0],n[1]);return void i.lineEnd()}var s=new Oe(n,t,null,(!0)),c=new Oe(n,null,s,(!1));s.o=c,o.push(s),a.push(c),s=new Oe(r,t,null,(!1)),c=new Oe(r,null,s,(!0)),s.o=c,o.push(s),a.push(c)}}),a.sort(e),Pe(o),Pe(a),o.length){for(var u=0,s=n,c=a.length;u<c;++u)a[u].e=s=!s;for(var l,f,h=o[0];;){for(var p=h,d=!0;p.v;)if((p=p.n)===h)return;l=p.z,i.lineStart();
do{if(p.v=p.o.v=!0,p.e){if(d)for(var u=0,c=l.length;u<c;++u)i.point((f=l[u])[0],f[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(d){l=p.p.z;for(var u=l.length-1;u>=0;--u)i.point((f=l[u])[0],f[1])}else r(p.x,p.p.x,-1,i);p=p.p}p=p.o,l=p.z,d=!d}while(!p.v);i.lineEnd()}}}function Pe(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function Oe(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function ze(t,e,n,r){return function(i,o){function a(e,n){var r=i(e,n);t(e=r[0],n=r[1])&&o.point(e,n)}function u(t,e){var n=i(t,e);v.point(n[0],n[1])}function s(){m.point=u,v.lineStart()}function c(){m.point=a,v.lineEnd()}function l(t,e){g.push([t,e]);var n=i(t,e);b.point(n[0],n[1])}function f(){b.lineStart(),g=[]}function h(){l(g[0][0],g[0][1]),b.lineEnd();var t,e=b.clean(),n=x.buffer(),r=n.length;if(g.pop(),d.push(g),g=null,r)if(1&e){t=n[0];var i,r=t.length-1,a=-1;if(r>0){for(w||(o.polygonStart(),w=!0),o.lineStart();++a<r;)o.point((i=t[a])[0],i[1]);o.lineEnd()}}else r>1&&2&e&&n.push(n.pop().concat(n.shift())),p.push(n.filter(Fe))}var p,d,g,v=e(o),y=i.invert(r[0],r[1]),m={point:a,lineStart:s,lineEnd:c,polygonStart:function(){m.point=l,m.lineStart=f,m.lineEnd=h,p=[],d=[]},polygonEnd:function(){m.point=a,m.lineStart=s,m.lineEnd=c,p=pa.merge(p);var t=We(y,d);p.length?(w||(o.polygonStart(),w=!0),Re(p,Ie,t,n,o)):t&&(w||(o.polygonStart(),w=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),w&&(o.polygonEnd(),w=!1),p=d=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}},x=He(),b=e(x),w=!1;return m}}function Fe(t){return t.length>1}function He(){var t,e=[];return{lineStart:function(){e.push(t=[])},point:function(e,n){t.push([e,n])},lineEnd:T,buffer:function(){var n=e;return e=[],t=null,n},rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))}}}function Ie(t,e){return((t=t.x)[0]<0?t[1]-Va-Ua:Va-t[1])-((e=e.x)[0]<0?e[1]-Va-Ua:Va-e[1])}function Ue(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var u=o>0?$a:-$a,s=ka(o-n);ka(s-$a)<Ua?(t.point(n,r=(r+a)/2>0?Va:-Va),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),e=0):i!==u&&s>=$a&&(ka(n-i)<Ua&&(n-=i*Ua),ka(o-u)<Ua&&(o-=u*Ua),r=Be(n,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=o,r=a),i=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}function Be(t,e,n,r){var i,o,a=Math.sin(t-n);return ka(a)>Ua?Math.atan((Math.sin(e)*(o=Math.cos(r))*Math.sin(n)-Math.sin(r)*(i=Math.cos(e))*Math.sin(t))/(i*o*a)):(e+r)/2}function $e(t,e,n,r){var i;if(null==t)i=n*Va,r.point(-$a,i),r.point(0,i),r.point($a,i),r.point($a,0),r.point($a,-i),r.point(0,-i),r.point(-$a,-i),r.point(-$a,0),r.point(-$a,i);else if(ka(t[0]-e[0])>Ua){var o=t[0]<e[0]?$a:-$a;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])}function We(t,e){var n=t[0],r=t[1],i=[Math.sin(n),-Math.cos(n),0],o=0,a=0;Au.reset();for(var u=0,s=e.length;u<s;++u){var c=e[u],l=c.length;if(l)for(var f=c[0],h=f[0],p=f[1]/2+$a/4,d=Math.sin(p),g=Math.cos(p),v=1;;){v===l&&(v=0),t=c[v];var y=t[0],m=t[1]/2+$a/4,x=Math.sin(m),b=Math.cos(m),w=y-h,M=w>=0?1:-1,_=M*w,S=_>$a,k=d*x;if(Au.add(Math.atan2(k*M*Math.sin(_),g*b+k*Math.cos(_))),o+=S?w+M*Wa:w,S^h>=n^y>=n){var T=Me(be(f),be(t));ke(T);var E=Me(i,T);ke(E);var C=(S^w>=0?-1:1)*at(E[2]);(r>C||r===C&&(T[0]||T[1]))&&(a+=S^w>=0?1:-1)}if(!v++)break;h=y,d=x,g=b,f=t}}return(o<-Ua||o<Ua&&Au<-Ua)^1&a}function Ye(t){function e(t,e){return Math.cos(t)*Math.cos(e)>o}function n(t){var n,o,s,c,l;return{lineStart:function(){c=s=!1,l=1},point:function(f,h){var p,d=[f,h],g=e(f,h),v=a?g?0:i(f,h):g?i(f+(f<0?$a:-$a),h):0;if(!n&&(c=s=g)&&t.lineStart(),g!==s&&(p=r(n,d),(Ee(n,p)||Ee(d,p))&&(d[0]+=Ua,d[1]+=Ua,g=e(d[0],d[1]))),g!==s)l=0,g?(t.lineStart(),p=r(d,n),t.point(p[0],p[1])):(p=r(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(u&&n&&a^g){var y;v&o||!(y=r(d,n,!0))||(l=0,a?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!g||n&&Ee(n,d)||t.point(d[0],d[1]),n=d,s=g,o=v},lineEnd:function(){s&&t.lineEnd(),n=null},clean:function(){return l|(c&&s)<<1}}}function r(t,e,n){var r=be(t),i=be(e),a=[1,0,0],u=Me(r,i),s=we(u,u),c=u[0],l=s-c*c;if(!l)return!n&&t;var f=o*s/l,h=-o*c/l,p=Me(a,u),d=Se(a,f),g=Se(u,h);_e(d,g);var v=p,y=we(d,v),m=we(v,v),x=y*y-m*(we(d,d)-1);if(!(x<0)){var b=Math.sqrt(x),w=Se(v,(-y-b)/m);if(_e(w,d),w=Te(w),!n)return w;var M,_=t[0],S=e[0],k=t[1],T=e[1];S<_&&(M=_,_=S,S=M);var E=S-_,C=ka(E-$a)<Ua,N=C||E<Ua;if(!C&&T<k&&(M=k,k=T,T=M),N?C?k+T>0^w[1]<(ka(w[0]-_)<Ua?k:T):k<=w[1]&&w[1]<=T:E>$a^(_<=w[0]&&w[0]<=S)){var A=Se(v,(-y+b)/m);return _e(A,d),[w,Te(A)]}}}function i(e,n){var r=a?t:$a-t,i=0;return e<-r?i|=1:e>r&&(i|=2),n<-r?i|=4:n>r&&(i|=8),i}var o=Math.cos(t),a=o>0,u=ka(o)>Ua,s=bn(t,6*Xa);return ze(e,n,s,a?[0,-t]:[-$a,t-$a])}function Ve(t,e,n,r){return function(i){var o,a=i.a,u=i.b,s=a.x,c=a.y,l=u.x,f=u.y,h=0,p=1,d=l-s,g=f-c;if(o=t-s,d||!(o>0)){if(o/=d,d<0){if(o<h)return;o<p&&(p=o)}else if(d>0){if(o>p)return;o>h&&(h=o)}if(o=n-s,d||!(o<0)){if(o/=d,d<0){if(o>p)return;o>h&&(h=o)}else if(d>0){if(o<h)return;o<p&&(p=o)}if(o=e-c,g||!(o>0)){if(o/=g,g<0){if(o<h)return;o<p&&(p=o)}else if(g>0){if(o>p)return;o>h&&(h=o)}if(o=r-c,g||!(o<0)){if(o/=g,g<0){if(o>p)return;o>h&&(h=o)}else if(g>0){if(o<h)return;o<p&&(p=o)}return h>0&&(i.a={x:s+h*d,y:c+h*g}),p<1&&(i.b={x:s+p*d,y:c+p*g}),i}}}}}}function Xe(t,e,n,r){function i(r,i){return ka(r[0]-t)<Ua?i>0?0:3:ka(r[0]-n)<Ua?i>0?2:1:ka(r[1]-e)<Ua?i>0?1:0:i>0?3:2}function o(t,e){return a(t.x,e.x)}function a(t,e){var n=i(t,1),r=i(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(u){function s(t){for(var e=0,n=v.length,r=t[1],i=0;i<n;++i)for(var o,a=1,u=v[i],s=u.length,c=u[0];a<s;++a)o=u[a],c[1]<=r?o[1]>r&&it(c,o,t)>0&&++e:o[1]<=r&&it(c,o,t)<0&&--e,c=o;return 0!==e}function c(o,u,s,c){var l=0,f=0;if(null==o||(l=i(o,s))!==(f=i(u,s))||a(o,u)<0^s>0){do c.point(0===l||3===l?t:n,l>1?r:e);while((l=(l+s+4)%4)!==f)}else c.point(u[0],u[1])}function l(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function f(t,e){l(t,e)&&u.point(t,e)}function h(){N.point=d,v&&v.push(y=[]),S=!0,_=!1,w=M=NaN}function p(){g&&(d(m,x),b&&_&&E.rejoin(),g.push(E.buffer())),N.point=f,_&&u.lineEnd()}function d(t,e){t=Math.max(-Wu,Math.min(Wu,t)),e=Math.max(-Wu,Math.min(Wu,e));var n=l(t,e);if(v&&y.push([t,e]),S)m=t,x=e,b=n,S=!1,n&&(u.lineStart(),u.point(t,e));else if(n&&_)u.point(t,e);else{var r={a:{x:w,y:M},b:{x:t,y:e}};C(r)?(_||(u.lineStart(),u.point(r.a.x,r.a.y)),u.point(r.b.x,r.b.y),n||u.lineEnd(),k=!1):n&&(u.lineStart(),u.point(t,e),k=!1)}w=t,M=e,_=n}var g,v,y,m,x,b,w,M,_,S,k,T=u,E=He(),C=Ve(t,e,n,r),N={point:f,lineStart:h,lineEnd:p,polygonStart:function(){u=E,g=[],v=[],k=!0},polygonEnd:function(){u=T,g=pa.merge(g);var e=s([t,r]),n=k&&e,i=g.length;(n||i)&&(u.polygonStart(),n&&(u.lineStart(),c(null,null,1,u),u.lineEnd()),i&&Re(g,o,e,c,u),u.polygonEnd()),g=v=y=null}};return N}}function Ge(t){var e=0,n=$a/3,r=hn(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*$a/180,n=t[1]*$a/180):[e/$a*180,n/$a*180]},i}function Ze(t,e){function n(t,e){var n=Math.sqrt(o-2*i*Math.sin(e))/i;return[n*Math.sin(t*=i),a-n*Math.cos(t)]}var r=Math.sin(t),i=(r+Math.sin(e))/2,o=1+r*(2*i-r),a=Math.sqrt(o)/i;return n.invert=function(t,e){var n=a-e;return[Math.atan2(t,n)/i,at((o-(t*t+n*n)*i*i)/(2*i))]},n}function Je(){function t(t,e){Vu+=i*t-r*e,r=t,i=e}var e,n,r,i;Qu.point=function(o,a){Qu.point=t,e=r=o,n=i=a},Qu.lineEnd=function(){t(e,n)}}function Qe(t,e){t<Xu&&(Xu=t),t>Zu&&(Zu=t),e<Gu&&(Gu=e),e>Ju&&(Ju=e)}function Ke(){function t(t,e){a.push("M",t,",",e,o)}function e(t,e){a.push("M",t,",",e),u.point=n}function n(t,e){a.push("L",t,",",e)}function r(){u.point=t}function i(){a.push("Z")}var o=tn(4.5),a=[],u={point:t,lineStart:function(){u.point=e},lineEnd:r,polygonStart:function(){u.lineEnd=i},polygonEnd:function(){u.lineEnd=r,u.point=t},pointRadius:function(t){return o=tn(t),u},result:function(){if(a.length){var t=a.join("");return a=[],t}}};return u}function tn(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function en(t,e){ju+=t,Ru+=e,++Pu}function nn(){function t(t,r){var i=t-e,o=r-n,a=Math.sqrt(i*i+o*o);Ou+=a*(e+t)/2,zu+=a*(n+r)/2,Fu+=a,en(e=t,n=r)}var e,n;ts.point=function(r,i){ts.point=t,en(e=r,n=i)}}function rn(){ts.point=en}function on(){function t(t,e){var n=t-r,o=e-i,a=Math.sqrt(n*n+o*o);Ou+=a*(r+t)/2,zu+=a*(i+e)/2,Fu+=a,a=i*t-r*e,Hu+=a*(r+t),Iu+=a*(i+e),Uu+=3*a,en(r=t,i=e)}var e,n,r,i;ts.point=function(o,a){ts.point=t,en(e=r=o,n=i=a)},ts.lineEnd=function(){t(e,n)}}function an(t){function e(e,n){t.moveTo(e+a,n),t.arc(e,n,a,0,Wa)}function n(e,n){t.moveTo(e,n),u.point=r}function r(e,n){t.lineTo(e,n)}function i(){u.point=e}function o(){t.closePath()}var a=4.5,u={point:e,lineStart:function(){u.point=n},lineEnd:i,polygonStart:function(){u.lineEnd=o},polygonEnd:function(){u.lineEnd=i,u.point=e},pointRadius:function(t){return a=t,u},result:T};return u}function un(t){function e(t){return(u?r:n)(t)}function n(e){return ln(e,function(n,r){n=t(n,r),e.point(n[0],n[1])})}function r(e){function n(n,r){n=t(n,r),e.point(n[0],n[1])}function r(){x=NaN,S.point=o,e.lineStart()}function o(n,r){var o=be([n,r]),a=t(n,r);i(x,b,m,w,M,_,x=a[0],b=a[1],m=n,w=o[0],M=o[1],_=o[2],u,e),e.point(x,b)}function a(){S.point=n,e.lineEnd()}function s(){r(),S.point=c,S.lineEnd=l}function c(t,e){o(f=t,h=e),p=x,d=b,g=w,v=M,y=_,S.point=o}function l(){i(x,b,m,w,M,_,p,d,f,g,v,y,u,e),S.lineEnd=a,a()}var f,h,p,d,g,v,y,m,x,b,w,M,_,S={point:n,lineStart:r,lineEnd:a,polygonStart:function(){e.polygonStart(),S.lineStart=s},polygonEnd:function(){e.polygonEnd(),S.lineStart=r}};return S}function i(e,n,r,u,s,c,l,f,h,p,d,g,v,y){var m=l-e,x=f-n,b=m*m+x*x;if(b>4*o&&v--){var w=u+p,M=s+d,_=c+g,S=Math.sqrt(w*w+M*M+_*_),k=Math.asin(_/=S),T=ka(ka(_)-1)<Ua||ka(r-h)<Ua?(r+h)/2:Math.atan2(M,w),E=t(T,k),C=E[0],N=E[1],A=C-e,L=N-n,q=x*A-m*L;(q*q/b>o||ka((m*A+x*L)/b-.5)>.3||u*p+s*d+c*g<a)&&(i(e,n,r,u,s,c,C,N,T,w/=S,M/=S,_,v,y),y.point(C,N),i(C,N,T,w,M,_,l,f,h,p,d,g,v,y))}}var o=.5,a=Math.cos(30*Xa),u=16;return e.precision=function(t){return arguments.length?(u=(o=t*t)>0&&16,e):Math.sqrt(o)},e}function sn(t){var e=un(function(e,n){return t([e*Ga,n*Ga])});return function(t){return pn(e(t))}}function cn(t){this.stream=t}function ln(t,e){return{point:e,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function fn(t){return hn(function(){return t})()}function hn(t){function e(t){return t=u(t[0]*Xa,t[1]*Xa),[t[0]*h+s,c-t[1]*h]}function n(t){return t=u.invert((t[0]-s)/h,(c-t[1])/h),t&&[t[0]*Ga,t[1]*Ga]}function r(){u=De(a=vn(y,m,x),o);var t=o(g,v);return s=p-t[0]*h,c=d+t[1]*h,i()}function i(){return l&&(l.valid=!1,l=null),e}var o,a,u,s,c,l,f=un(function(t,e){return t=o(t,e),[t[0]*h+s,c-t[1]*h]}),h=150,p=480,d=250,g=0,v=0,y=0,m=0,x=0,b=$u,w=_,M=null,S=null;return e.stream=function(t){return l&&(l.valid=!1),l=pn(b(a,f(w(t)))),l.valid=!0,l},e.clipAngle=function(t){return arguments.length?(b=null==t?(M=t,$u):Ye((M=+t)*Xa),i()):M},e.clipExtent=function(t){return arguments.length?(S=t,w=t?Xe(t[0][0],t[0][1],t[1][0],t[1][1]):_,i()):S},e.scale=function(t){return arguments.length?(h=+t,r()):h},e.translate=function(t){return arguments.length?(p=+t[0],d=+t[1],r()):[p,d]},e.center=function(t){return arguments.length?(g=t[0]%360*Xa,v=t[1]%360*Xa,r()):[g*Ga,v*Ga]},e.rotate=function(t){return arguments.length?(y=t[0]%360*Xa,m=t[1]%360*Xa,x=t.length>2?t[2]%360*Xa:0,r()):[y*Ga,m*Ga,x*Ga]},pa.rebind(e,f,"precision"),function(){return o=t.apply(this,arguments),e.invert=o.invert&&n,r()}}function pn(t){return ln(t,function(e,n){t.point(e*Xa,n*Xa)})}function dn(t,e){return[t,e]}function gn(t,e){return[t>$a?t-Wa:t<-$a?t+Wa:t,e]}function vn(t,e,n){return t?e||n?De(mn(t),xn(e,n)):mn(t):e||n?xn(e,n):gn}function yn(t){return function(e,n){return e+=t,[e>$a?e-Wa:e<-$a?e+Wa:e,n]}}function mn(t){var e=yn(t);return e.invert=yn(-t),e}function xn(t,e){function n(t,e){var n=Math.cos(e),u=Math.cos(t)*n,s=Math.sin(t)*n,c=Math.sin(e),l=c*r+u*i;return[Math.atan2(s*o-l*a,u*r-c*i),at(l*o+s*a)]}var r=Math.cos(t),i=Math.sin(t),o=Math.cos(e),a=Math.sin(e);return n.invert=function(t,e){var n=Math.cos(e),u=Math.cos(t)*n,s=Math.sin(t)*n,c=Math.sin(e),l=c*o-s*a;return[Math.atan2(s*o+c*a,u*r+l*i),at(l*r-u*i)]},n}function bn(t,e){var n=Math.cos(t),r=Math.sin(t);return function(i,o,a,u){var s=a*e;null!=i?(i=wn(n,i),o=wn(n,o),(a>0?i<o:i>o)&&(i+=a*Wa)):(i=t+a*Wa,o=t-.5*s);for(var c,l=i;a>0?l>o:l<o;l-=s)u.point((c=Te([n,-r*Math.cos(l),-r*Math.sin(l)]))[0],c[1])}}function wn(t,e){var n=be(e);n[0]-=t,ke(n);var r=ot(-n[1]);return((-n[2]<0?-r:r)+2*Math.PI-Ua)%(2*Math.PI)}function Mn(t,e,n){var r=pa.range(t,e-Ua,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function _n(t,e,n){var r=pa.range(t,e-Ua,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function Sn(t){return t.source}function kn(t){return t.target}function Tn(t,e,n,r){var i=Math.cos(e),o=Math.sin(e),a=Math.cos(r),u=Math.sin(r),s=i*Math.cos(t),c=i*Math.sin(t),l=a*Math.cos(n),f=a*Math.sin(n),h=2*Math.asin(Math.sqrt(lt(r-e)+i*a*lt(n-t))),p=1/Math.sin(h),d=h?function(t){var e=Math.sin(t*=h)*p,n=Math.sin(h-t)*p,r=n*s+e*l,i=n*c+e*f,a=n*o+e*u;return[Math.atan2(i,r)*Ga,Math.atan2(a,Math.sqrt(r*r+i*i))*Ga]}:function(){return[t*Ga,e*Ga]};return d.distance=h,d}function En(){function t(t,i){var o=Math.sin(i*=Xa),a=Math.cos(i),u=ka((t*=Xa)-e),s=Math.cos(u);es+=Math.atan2(Math.sqrt((u=a*Math.sin(u))*u+(u=r*o-n*a*s)*u),n*o+r*a*s),e=t,n=o,r=a}var e,n,r;ns.point=function(i,o){e=i*Xa,n=Math.sin(o*=Xa),r=Math.cos(o),ns.point=t},ns.lineEnd=function(){ns.point=ns.lineEnd=T}}function Cn(t,e){function n(e,n){var r=Math.cos(e),i=Math.cos(n),o=t(r*i);return[o*i*Math.sin(e),o*Math.sin(n)]}return n.invert=function(t,n){var r=Math.sqrt(t*t+n*n),i=e(r),o=Math.sin(i),a=Math.cos(i);return[Math.atan2(t*o,r*a),Math.asin(r&&n*o/r)]},n}function Nn(t,e){function n(t,e){a>0?e<-Va+Ua&&(e=-Va+Ua):e>Va-Ua&&(e=Va-Ua);var n=a/Math.pow(i(e),o);return[n*Math.sin(o*t),a-n*Math.cos(o*t)]}var r=Math.cos(t),i=function(t){return Math.tan($a/4+t/2)},o=t===e?Math.sin(t):Math.log(r/Math.cos(e))/Math.log(i(e)/i(t)),a=r*Math.pow(i(t),o)/o;return o?(n.invert=function(t,e){var n=a-e,r=rt(o)*Math.sqrt(t*t+n*n);return[Math.atan2(t,n)/o,2*Math.atan(Math.pow(a/r,1/o))-Va]},n):Ln}function An(t,e){function n(t,e){var n=o-e;return[n*Math.sin(i*t),o-n*Math.cos(i*t)]}var r=Math.cos(t),i=t===e?Math.sin(t):(r-Math.cos(e))/(e-t),o=r/i+t;return ka(i)<Ua?dn:(n.invert=function(t,e){var n=o-e;return[Math.atan2(t,n)/i,o-rt(i)*Math.sqrt(t*t+n*n)]},n)}function Ln(t,e){return[t,Math.log(Math.tan($a/4+e/2))]}function qn(t){var e,n=fn(t),r=n.scale,i=n.translate,o=n.clipExtent;return n.scale=function(){var t=r.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.translate=function(){var t=i.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.clipExtent=function(t){var a=o.apply(n,arguments);if(a===n){if(e=null==t){var u=$a*r(),s=i();o([[s[0]-u,s[1]-u],[s[0]+u,s[1]+u]])}}else e&&(a=null);return a},n.clipExtent(null)}function Dn(t,e){return[Math.log(Math.tan($a/4+e/2)),-t]}function jn(t){return t[0]}function Rn(t){return t[1]}function Pn(t){for(var e=t.length,n=[0,1],r=2,i=2;i<e;i++){for(;r>1&&it(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function On(t,e){return t[0]-e[0]||t[1]-e[1]}function zn(t,e,n){return(n[0]-e[0])*(t[1]-e[1])<(n[1]-e[1])*(t[0]-e[0])}function Fn(t,e,n,r){var i=t[0],o=n[0],a=e[0]-i,u=r[0]-o,s=t[1],c=n[1],l=e[1]-s,f=r[1]-c,h=(u*(s-c)-f*(i-o))/(f*a-u*l);return[i+h*a,s+h*l]}function Hn(t){var e=t[0],n=t[t.length-1];return!(e[0]-n[0]||e[1]-n[1])}function In(){sr(this),this.edge=this.site=this.circle=null}function Un(t){var e=ds.pop()||new In;return e.site=t,e}function Bn(t){Kn(t),fs.remove(t),ds.push(t),sr(t)}function $n(t){var e=t.circle,n=e.x,r=e.cy,i={x:n,y:r},o=t.P,a=t.N,u=[t];Bn(t);for(var s=o;s.circle&&ka(n-s.circle.x)<Ua&&ka(r-s.circle.cy)<Ua;)o=s.P,u.unshift(s),Bn(s),s=o;u.unshift(s),Kn(s);for(var c=a;c.circle&&ka(n-c.circle.x)<Ua&&ka(r-c.circle.cy)<Ua;)a=c.N,u.push(c),Bn(c),c=a;u.push(c),Kn(c);var l,f=u.length;for(l=1;l<f;++l)c=u[l],s=u[l-1],or(c.edge,s.site,c.site,i);s=u[0],c=u[f-1],c.edge=rr(s.site,c.site,null,i),Qn(s),Qn(c)}function Wn(t){for(var e,n,r,i,o=t.x,a=t.y,u=fs._;u;)if(r=Yn(u,a)-o,r>Ua)u=u.L;else{if(i=o-Vn(u,a),!(i>Ua)){r>-Ua?(e=u.P,n=u):i>-Ua?(e=u,n=u.N):e=n=u;break}if(!u.R){e=u;break}u=u.R}var s=Un(t);if(fs.insert(e,s),e||n){if(e===n)return Kn(e),n=Un(e.site),fs.insert(s,n),s.edge=n.edge=rr(e.site,s.site),Qn(e),void Qn(n);if(!n)return void(s.edge=rr(e.site,s.site));Kn(e),Kn(n);var c=e.site,l=c.x,f=c.y,h=t.x-l,p=t.y-f,d=n.site,g=d.x-l,v=d.y-f,y=2*(h*v-p*g),m=h*h+p*p,x=g*g+v*v,b={x:(v*m-p*x)/y+l,y:(h*x-g*m)/y+f};or(n.edge,c,d,b),s.edge=rr(c,t,null,b),n.edge=rr(t,d,null,b),Qn(e),Qn(n)}}function Yn(t,e){var n=t.site,r=n.x,i=n.y,o=i-e;if(!o)return r;var a=t.P;if(!a)return-(1/0);n=a.site;var u=n.x,s=n.y,c=s-e;if(!c)return u;var l=u-r,f=1/o-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-o/2)))/f+r:(r+u)/2}function Vn(t,e){var n=t.N;if(n)return Yn(n,e);var r=t.site;return r.y===e?r.x:1/0}function Xn(t){this.site=t,this.edges=[]}function Gn(t){for(var e,n,r,i,o,a,u,s,c,l,f=t[0][0],h=t[1][0],p=t[0][1],d=t[1][1],g=ls,v=g.length;v--;)if(o=g[v],o&&o.prepare())for(u=o.edges,s=u.length,a=0;a<s;)l=u[a].end(),r=l.x,i=l.y,c=u[++a%s].start(),e=c.x,n=c.y,(ka(r-e)>Ua||ka(i-n)>Ua)&&(u.splice(a,0,new ar(ir(o.site,l,ka(r-f)<Ua&&d-i>Ua?{x:f,y:ka(e-f)<Ua?n:d}:ka(i-d)<Ua&&h-r>Ua?{x:ka(n-d)<Ua?e:h,y:d}:ka(r-h)<Ua&&i-p>Ua?{x:h,y:ka(e-h)<Ua?n:p}:ka(i-p)<Ua&&r-f>Ua?{x:ka(n-p)<Ua?e:f,y:p}:null),o.site,null)),++s)}function Zn(t,e){return e.angle-t.angle}function Jn(){sr(this),this.x=this.y=this.arc=this.site=this.cy=null}function Qn(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i.x,u=i.y,s=r.x-a,c=r.y-u,l=o.x-a,f=o.y-u,h=2*(s*f-c*l);if(!(h>=-Ba)){var p=s*s+c*c,d=l*l+f*f,g=(f*p-c*d)/h,v=(s*d-l*p)/h,f=v+u,y=gs.pop()||new Jn;y.arc=t,y.site=i,y.x=g+a,y.y=f+Math.sqrt(g*g+v*v),y.cy=f,t.circle=y;for(var m=null,x=ps._;x;)if(y.y<x.y||y.y===x.y&&y.x<=x.x){if(!x.L){m=x.P;break}x=x.L}else{if(!x.R){m=x;break}x=x.R}ps.insert(m,y),m||(hs=y)}}}}function Kn(t){var e=t.circle;e&&(e.P||(hs=e.N),ps.remove(e),gs.push(e),sr(e),t.circle=null)}function tr(t){for(var e,n=cs,r=Ve(t[0][0],t[0][1],t[1][0],t[1][1]),i=n.length;i--;)e=n[i],(!er(e,t)||!r(e)||ka(e.a.x-e.b.x)<Ua&&ka(e.a.y-e.b.y)<Ua)&&(e.a=e.b=null,n.splice(i,1))}function er(t,e){var n=t.b;if(n)return!0;var r,i,o=t.a,a=e[0][0],u=e[1][0],s=e[0][1],c=e[1][1],l=t.l,f=t.r,h=l.x,p=l.y,d=f.x,g=f.y,v=(h+d)/2,y=(p+g)/2;if(g===p){if(v<a||v>=u)return;if(h>d){if(o){if(o.y>=c)return}else o={x:v,y:s};n={x:v,y:c}}else{if(o){if(o.y<s)return}else o={x:v,y:c};n={x:v,y:s}}}else if(r=(h-d)/(g-p),i=y-r*v,r<-1||r>1)if(h>d){if(o){if(o.y>=c)return}else o={x:(s-i)/r,y:s};n={x:(c-i)/r,y:c}}else{if(o){if(o.y<s)return}else o={x:(c-i)/r,y:c};n={x:(s-i)/r,y:s}}else if(p<g){if(o){if(o.x>=u)return}else o={x:a,y:r*a+i};n={x:u,y:r*u+i}}else{if(o){if(o.x<a)return}else o={x:u,y:r*u+i};n={x:a,y:r*a+i}}return t.a=o,t.b=n,!0}function nr(t,e){this.l=t,this.r=e,this.a=this.b=null}function rr(t,e,n,r){var i=new nr(t,e);return cs.push(i),n&&or(i,t,e,n),r&&or(i,e,t,r),ls[t.i].edges.push(new ar(i,t,e)),ls[e.i].edges.push(new ar(i,e,t)),i}function ir(t,e,n){var r=new nr(t,null);return r.a=e,r.b=n,cs.push(r),r}function or(t,e,n,r){t.a||t.b?t.l===n?t.b=r:t.a=r:(t.a=r,t.l=e,t.r=n)}function ar(t,e,n){var r=t.a,i=t.b;this.edge=t,this.site=e,this.angle=n?Math.atan2(n.y-e.y,n.x-e.x):t.l===e?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function ur(){this._=null}function sr(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function cr(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function lr(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function fr(t){for(;t.L;)t=t.L;return t}function hr(t,e){var n,r,i,o=t.sort(pr).pop();for(cs=[],ls=new Array(t.length),fs=new ur,ps=new ur;;)if(i=hs,o&&(!i||o.y<i.y||o.y===i.y&&o.x<i.x))o.x===n&&o.y===r||(ls[o.i]=new Xn(o),Wn(o),n=o.x,r=o.y),o=t.pop();else{if(!i)break;$n(i.arc)}e&&(tr(e),Gn(e));var a={cells:ls,edges:cs};return fs=ps=cs=ls=null,a}function pr(t,e){return e.y-t.y||e.x-t.x}function dr(t,e,n){return(t.x-n.x)*(e.y-t.y)-(t.x-e.x)*(n.y-t.y)}function gr(t){return t.x}function vr(t){return t.y}function yr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function mr(t,e,n,r,i,o){if(!t(e,n,r,i,o)){var a=.5*(n+i),u=.5*(r+o),s=e.nodes;s[0]&&mr(t,s[0],n,r,a,u),s[1]&&mr(t,s[1],a,r,i,u),s[2]&&mr(t,s[2],n,u,a,o),s[3]&&mr(t,s[3],a,u,i,o)}}function xr(t,e,n,r,i,o,a){var u,s=1/0;return function c(t,l,f,h,p){if(!(l>o||f>a||h<r||p<i)){if(d=t.point){var d,g=e-t.x,v=n-t.y,y=g*g+v*v;if(y<s){var m=Math.sqrt(s=y);r=e-m,i=n-m,o=e+m,a=n+m,u=d}}for(var x=t.nodes,b=.5*(l+h),w=.5*(f+p),M=e>=b,_=n>=w,S=_<<1|M,k=S+4;S<k;++S)if(t=x[3&S])switch(3&S){case 0:c(t,l,f,b,w);break;case 1:c(t,b,f,h,w);break;case 2:c(t,l,w,b,p);break;case 3:c(t,b,w,h,p)}}}(t,r,i,o,a),u}function br(t,e){t=pa.rgb(t),e=pa.rgb(e);var n=t.r,r=t.g,i=t.b,o=e.r-n,a=e.g-r,u=e.b-i;return function(t){return"#"+kt(Math.round(n+o*t))+kt(Math.round(r+a*t))+kt(Math.round(i+u*t))}}function wr(t,e){var n,r={},i={};for(n in t)n in e?r[n]=Sr(t[n],e[n]):i[n]=t[n];for(n in e)n in t||(i[n]=e[n]);return function(t){for(n in r)i[n]=r[n](t);return i}}function Mr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function _r(t,e){var n,r,i,o=ys.lastIndex=ms.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=ys.exec(t))&&(r=ms.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Mr(n,r)})),o=ms.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?(e=s[0].x,function(t){return e(t)+""}):function(){return e}:(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})}function Sr(t,e){for(var n,r=pa.interpolators.length;--r>=0&&!(n=pa.interpolators[r](t,e)););return n}function kr(t,e){var n,r=[],i=[],o=t.length,a=e.length,u=Math.min(t.length,e.length);for(n=0;n<u;++n)r.push(Sr(t[n],e[n]));for(;n<o;++n)i[n]=t[n];for(;n<a;++n)i[n]=e[n];return function(t){for(n=0;n<u;++n)i[n]=r[n](t);return i}}function Tr(t){return function(e){return e<=0?0:e>=1?1:t(e)}}function Er(t){return function(e){return 1-t(1-e)}}function Cr(t){return function(e){return.5*(e<.5?t(2*e):2-t(2-2*e))}}function Nr(t){return t*t}function Ar(t){return t*t*t}function Lr(t){if(t<=0)return 0;if(t>=1)return 1;var e=t*t,n=e*t;return 4*(t<.5?n:3*(t-e)+n-.75)}function qr(t){return function(e){return Math.pow(e,t)}}function Dr(t){return 1-Math.cos(t*Va)}function jr(t){return Math.pow(2,10*(t-1))}function Rr(t){return 1-Math.sqrt(1-t*t)}function Pr(t,e){var n;return arguments.length<2&&(e=.45),arguments.length?n=e/Wa*Math.asin(1/t):(t=1,n=e/4),function(r){return 1+t*Math.pow(2,-10*r)*Math.sin((r-n)*Wa/e)}}function Or(t){return t||(t=1.70158),function(e){return e*e*((t+1)*e-t)}}function zr(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function Fr(t,e){t=pa.hcl(t),e=pa.hcl(e);var n=t.h,r=t.c,i=t.l,o=e.h-n,a=e.c-r,u=e.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?e.c:r),isNaN(o)?(o=0,n=isNaN(n)?e.h:n):o>180?o-=360:o<-180&&(o+=360),function(t){return gt(n+o*t,r+a*t,i+u*t)+""}}function Hr(t,e){t=pa.hsl(t),e=pa.hsl(e);var n=t.h,r=t.s,i=t.l,o=e.h-n,a=e.s-r,u=e.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?e.s:r),isNaN(o)?(o=0,n=isNaN(n)?e.h:n):o>180?o-=360:o<-180&&(o+=360),function(t){return pt(n+o*t,r+a*t,i+u*t)+""}}function Ir(t,e){t=pa.lab(t),e=pa.lab(e);var n=t.l,r=t.a,i=t.b,o=e.l-n,a=e.a-r,u=e.b-i;return function(t){return yt(n+o*t,r+a*t,i+u*t)+""}}function Ur(t,e){return e-=t,function(n){return Math.round(t+e*n)}}function Br(t){var e=[t.a,t.b],n=[t.c,t.d],r=Wr(e),i=$r(e,n),o=Wr(Yr(n,e,-i))||0;e[0]*n[1]<n[0]*e[1]&&(e[0]*=-1,e[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(e[1],e[0]):Math.atan2(-n[0],n[1]))*Ga,this.translate=[t.e,t.f],this.scale=[r,o],this.skew=o?Math.atan2(i,o)*Ga:0}function $r(t,e){return t[0]*e[0]+t[1]*e[1]}function Wr(t){var e=Math.sqrt($r(t,t));return e&&(t[0]/=e,t[1]/=e),e}function Yr(t,e,n){return t[0]+=n*e[0],t[1]+=n*e[1],t}function Vr(t){return t.length?t.pop()+",":""}function Xr(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push("translate(",null,",",null,")");r.push({i:i-4,x:Mr(t[0],e[0])},{i:i-2,x:Mr(t[1],e[1])})}else(e[0]||e[1])&&n.push("translate("+e+")")}function Gr(t,e,n,r){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),r.push({i:n.push(Vr(n)+"rotate(",null,")")-2,x:Mr(t,e)})):e&&n.push(Vr(n)+"rotate("+e+")")}function Zr(t,e,n,r){t!==e?r.push({i:n.push(Vr(n)+"skewX(",null,")")-2,x:Mr(t,e)}):e&&n.push(Vr(n)+"skewX("+e+")")}function Jr(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push(Vr(n)+"scale(",null,",",null,")");r.push({i:i-4,x:Mr(t[0],e[0])},{i:i-2,x:Mr(t[1],e[1])})}else 1===e[0]&&1===e[1]||n.push(Vr(n)+"scale("+e+")")}function Qr(t,e){var n=[],r=[];return t=pa.transform(t),e=pa.transform(e),Xr(t.translate,e.translate,n,r),Gr(t.rotate,e.rotate,n,r),Zr(t.skew,e.skew,n,r),Jr(t.scale,e.scale,n,r),t=e=null,function(t){for(var e,i=-1,o=r.length;++i<o;)n[(e=r[i]).i]=e.x(t);return n.join("")}}function Kr(t,e){return e=(e-=t=+t)||1/e,function(n){return(n-t)/e}}function ti(t,e){return e=(e-=t=+t)||1/e,function(n){return Math.max(0,Math.min(1,(n-t)/e))}}function ei(t){for(var e=t.source,n=t.target,r=ri(e,n),i=[e];e!==r;)e=e.parent,i.push(e);for(var o=i.length;n!==r;)i.splice(o,0,n),n=n.parent;return i}function ni(t){for(var e=[],n=t.parent;null!=n;)e.push(t),t=n,n=n.parent;return e.push(t),e}function ri(t,e){if(t===e)return t;for(var n=ni(t),r=ni(e),i=n.pop(),o=r.pop(),a=null;i===o;)a=i,i=n.pop(),o=r.pop();return a}function ii(t){t.fixed|=2}function oi(t){t.fixed&=-7}function ai(t){t.fixed|=4,t.px=t.x,t.py=t.y}function ui(t){t.fixed&=-5}function si(t,e,n){var r=0,i=0;if(t.charge=0,!t.leaf)for(var o,a=t.nodes,u=a.length,s=-1;++s<u;)o=a[s],null!=o&&(si(o,e,n),t.charge+=o.charge,r+=o.charge*o.cx,i+=o.charge*o.cy);if(t.point){t.leaf||(t.point.x+=Math.random()-.5,t.point.y+=Math.random()-.5);var c=e*n[t.point.index];t.charge+=t.pointCharge=c,r+=c*t.point.x,i+=c*t.point.y}t.cx=r/t.charge,t.cy=i/t.charge}function ci(t,e){return pa.rebind(t,e,"sort","children","value"),t.nodes=t,t.links=gi,t}function li(t,e){for(var n=[t];null!=(t=n.pop());)if(e(t),(i=t.children)&&(r=i.length))for(var r,i;--r>=0;)n.push(i[r])}function fi(t,e){for(var n=[t],r=[];null!=(t=n.pop());)if(r.push(t),(o=t.children)&&(i=o.length))for(var i,o,a=-1;++a<i;)n.push(o[a]);for(;null!=(t=r.pop());)e(t)}function hi(t){return t.children}function pi(t){return t.value}function di(t,e){return e.value-t.value}function gi(t){return pa.merge(t.map(function(t){return(t.children||[]).map(function(e){return{source:t,target:e}})}))}function vi(t){return t.x}function yi(t){return t.y}function mi(t,e,n){t.y0=e,t.y=n}function xi(t){return pa.range(t.length)}function bi(t){for(var e=-1,n=t[0].length,r=[];++e<n;)r[e]=0;return r}function wi(t){for(var e,n=1,r=0,i=t[0][1],o=t.length;n<o;++n)(e=t[n][1])>i&&(r=n,i=e);return r}function Mi(t){return t.reduce(_i,0)}function _i(t,e){return t+e[1]}function Si(t,e){return ki(t,Math.ceil(Math.log(e.length)/Math.LN2+1))}function ki(t,e){for(var n=-1,r=+t[0],i=(t[1]-r)/e,o=[];++n<=e;)o[n]=i*n+r;return o}function Ti(t){return[pa.min(t),pa.max(t)]}function Ei(t,e){return t.value-e.value}function Ci(t,e){var n=t._pack_next;t._pack_next=e,e._pack_prev=t,e._pack_next=n,n._pack_prev=e}function Ni(t,e){t._pack_next=e,e._pack_prev=t}function Ai(t,e){var n=e.x-t.x,r=e.y-t.y,i=t.r+e.r;return.999*i*i>n*n+r*r}function Li(t){function e(t){l=Math.min(t.x-t.r,l),f=Math.max(t.x+t.r,f),h=Math.min(t.y-t.r,h),p=Math.max(t.y+t.r,p)}if((n=t.children)&&(c=n.length)){var n,r,i,o,a,u,s,c,l=1/0,f=-(1/0),h=1/0,p=-(1/0);if(n.forEach(qi),r=n[0],r.x=-r.r,r.y=0,e(r),c>1&&(i=n[1],i.x=i.r,i.y=0,e(i),c>2))for(o=n[2],Ri(r,i,o),e(o),Ci(r,o),r._pack_prev=o,Ci(o,i),i=r._pack_next,a=3;a<c;a++){Ri(r,i,o=n[a]);var d=0,g=1,v=1;for(u=i._pack_next;u!==i;u=u._pack_next,g++)if(Ai(u,o)){d=1;break}if(1==d)for(s=r._pack_prev;s!==u._pack_prev&&!Ai(s,o);s=s._pack_prev,v++);d?(g<v||g==v&&i.r<r.r?Ni(r,i=u):Ni(r=s,i),a--):(Ci(r,o),i=o,e(o))}var y=(l+f)/2,m=(h+p)/2,x=0;for(a=0;a<c;a++)o=n[a],o.x-=y,o.y-=m,x=Math.max(x,o.r+Math.sqrt(o.x*o.x+o.y*o.y));t.r=x,n.forEach(Di)}}function qi(t){t._pack_next=t._pack_prev=t}function Di(t){delete t._pack_next,delete t._pack_prev}function ji(t,e,n,r){var i=t.children;if(t.x=e+=r*t.x,t.y=n+=r*t.y,t.r*=r,i)for(var o=-1,a=i.length;++o<a;)ji(i[o],e,n,r)}function Ri(t,e,n){var r=t.r+n.r,i=e.x-t.x,o=e.y-t.y;if(r&&(i||o)){var a=e.r+n.r,u=i*i+o*o;a*=a,r*=r;var s=.5+(r-a)/(2*u),c=Math.sqrt(Math.max(0,2*a*(r+u)-(r-=u)*r-a*a))/(2*u);n.x=t.x+s*i+c*o,n.y=t.y+s*o-c*i}else n.x=t.x+r,n.y=t.y}function Pi(t,e){return t.parent==e.parent?1:2}function Oi(t){var e=t.children;return e.length?e[0]:t.t}function zi(t){var e,n=t.children;return(e=n.length)?n[e-1]:t.t}function Fi(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function Hi(t){for(var e,n=0,r=0,i=t.children,o=i.length;--o>=0;)e=i[o],e.z+=n,e.m+=n,n+=e.s+(r+=e.c)}function Ii(t,e,n){return t.a.parent===e.parent?t.a:n}function Ui(t){return 1+pa.max(t,function(t){return t.y})}function Bi(t){return t.reduce(function(t,e){return t+e.x},0)/t.length}function $i(t){var e=t.children;return e&&e.length?$i(e[0]):t}function Wi(t){var e,n=t.children;return n&&(e=n.length)?Wi(n[e-1]):t}function Yi(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function Vi(t,e){var n=t.x+e[3],r=t.y+e[0],i=t.dx-e[1]-e[3],o=t.dy-e[0]-e[2];return i<0&&(n+=i/2,i=0),o<0&&(r+=o/2,o=0),{x:n,y:r,dx:i,dy:o}}function Xi(t){var e=t[0],n=t[t.length-1];return e<n?[e,n]:[n,e]}function Gi(t){return t.rangeExtent?t.rangeExtent():Xi(t.range())}function Zi(t,e,n,r){var i=n(t[0],t[1]),o=r(e[0],e[1]);return function(t){return o(i(t))}}function Ji(t,e){var n,r=0,i=t.length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}function Qi(t){return t?{floor:function(e){return Math.floor(e/t)*t},ceil:function(e){return Math.ceil(e/t)*t}}:Ns}function Ki(t,e,n,r){var i=[],o=[],a=0,u=Math.min(t.length,e.length)-1;for(t[u]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<=u;)i.push(n(t[a-1],t[a])),o.push(r(e[a-1],e[a]));return function(e){var n=pa.bisect(t,e,1,u)-1;return o[n](i[n](e))}}function to(t,e,n,r){function i(){var i=Math.min(t.length,e.length)>2?Ki:Zi,s=r?ti:Kr;return a=i(t,e,s,n),u=i(e,t,s,Sr),o}function o(t){return a(t)}var a,u;return o.invert=function(t){return u(t)},o.domain=function(e){return arguments.length?(t=e.map(Number),i()):t},o.range=function(t){return arguments.length?(e=t,i()):e},o.rangeRound=function(t){return o.range(t).interpolate(Ur)},o.clamp=function(t){return arguments.length?(r=t,i()):r},o.interpolate=function(t){return arguments.length?(n=t,i()):n},o.ticks=function(e){return io(t,e)},o.tickFormat=function(e,n){return oo(t,e,n)},o.nice=function(e){return no(t,e),i()},o.copy=function(){return to(t,e,n,r)},i()}function eo(t,e){return pa.rebind(t,e,"range","rangeRound","interpolate","clamp")}function no(t,e){return Ji(t,Qi(ro(t,e)[2])),Ji(t,Qi(ro(t,e)[2])),t}function ro(t,e){null==e&&(e=10);var n=Xi(t),r=n[1]-n[0],i=Math.pow(10,Math.floor(Math.log(r/e)/Math.LN10)),o=e/r*i;return o<=.15?i*=10:o<=.35?i*=5:o<=.75&&(i*=2),n[0]=Math.ceil(n[0]/i)*i,n[1]=Math.floor(n[1]/i)*i+.5*i,n[2]=i,n}function io(t,e){return pa.range.apply(pa,ro(t,e))}function oo(t,e,n){var r=ro(t,e);if(n){var i=yu.exec(n);if(i.shift(),"s"===i[8]){var o=pa.formatPrefix(Math.max(ka(r[0]),ka(r[1])));return i[7]||(i[7]="."+ao(o.scale(r[2]))),
i[8]="f",n=pa.format(i.join("")),function(t){return n(o.scale(t))+o.symbol}}i[7]||(i[7]="."+uo(i[8],r)),n=i.join("")}else n=",."+ao(r[2])+"f";return pa.format(n)}function ao(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}function uo(t,e){var n=ao(e[2]);return t in As?Math.abs(n-ao(Math.max(ka(e[0]),ka(e[1]))))+ +("e"!==t):n-2*("%"===t)}function so(t,e,n,r){function i(t){return(n?Math.log(t<0?0:t):-Math.log(t>0?0:-t))/Math.log(e)}function o(t){return n?Math.pow(e,t):-Math.pow(e,-t)}function a(e){return t(i(e))}return a.invert=function(e){return o(t.invert(e))},a.domain=function(e){return arguments.length?(n=e[0]>=0,t.domain((r=e.map(Number)).map(i)),a):r},a.base=function(n){return arguments.length?(e=+n,t.domain(r.map(i)),a):e},a.nice=function(){var e=Ji(r.map(i),n?Math:qs);return t.domain(e),r=e.map(o),a},a.ticks=function(){var t=Xi(r),a=[],u=t[0],s=t[1],c=Math.floor(i(u)),l=Math.ceil(i(s)),f=e%1?2:e;if(isFinite(l-c)){if(n){for(;c<l;c++)for(var h=1;h<f;h++)a.push(o(c)*h);a.push(o(c))}else for(a.push(o(c));c++<l;)for(var h=f-1;h>0;h--)a.push(o(c)*h);for(c=0;a[c]<u;c++);for(l=a.length;a[l-1]>s;l--);a=a.slice(c,l)}return a},a.tickFormat=function(t,n){if(!arguments.length)return Ls;arguments.length<2?n=Ls:"function"!=typeof n&&(n=pa.format(n));var r=Math.max(1,e*t/a.ticks().length);return function(t){var a=t/o(Math.round(i(t)));return a*e<e-.5&&(a*=e),a<=r?n(t):""}},a.copy=function(){return so(t.copy(),e,n,r)},eo(a,t)}function co(t,e,n){function r(e){return t(i(e))}var i=lo(e),o=lo(1/e);return r.invert=function(e){return o(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain((n=e.map(Number)).map(i)),r):n},r.ticks=function(t){return io(n,t)},r.tickFormat=function(t,e){return oo(n,t,e)},r.nice=function(t){return r.domain(no(n,t))},r.exponent=function(a){return arguments.length?(i=lo(e=a),o=lo(1/e),t.domain(n.map(i)),r):e},r.copy=function(){return co(t.copy(),e,n)},eo(r,t)}function lo(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function fo(t,e){function n(n){return o[((i.get(n)||("range"===e.t?i.set(n,t.push(n)):NaN))-1)%o.length]}function r(e,n){return pa.range(t.length).map(function(t){return e+n*t})}var i,o,a;return n.domain=function(r){if(!arguments.length)return t;t=[],i=new d;for(var o,a=-1,u=r.length;++a<u;)i.has(o=r[a])||i.set(o,t.push(o));return n[e.t].apply(n,e.a)},n.range=function(t){return arguments.length?(o=t,a=0,e={t:"range",a:arguments},n):o},n.rangePoints=function(i,u){arguments.length<2&&(u=0);var s=i[0],c=i[1],l=t.length<2?(s=(s+c)/2,0):(c-s)/(t.length-1+u);return o=r(s+l*u/2,l),a=0,e={t:"rangePoints",a:arguments},n},n.rangeRoundPoints=function(i,u){arguments.length<2&&(u=0);var s=i[0],c=i[1],l=t.length<2?(s=c=Math.round((s+c)/2),0):(c-s)/(t.length-1+u)|0;return o=r(s+Math.round(l*u/2+(c-s-(t.length-1+u)*l)/2),l),a=0,e={t:"rangeRoundPoints",a:arguments},n},n.rangeBands=function(i,u,s){arguments.length<2&&(u=0),arguments.length<3&&(s=u);var c=i[1]<i[0],l=i[c-0],f=i[1-c],h=(f-l)/(t.length-u+2*s);return o=r(l+h*s,h),c&&o.reverse(),a=h*(1-u),e={t:"rangeBands",a:arguments},n},n.rangeRoundBands=function(i,u,s){arguments.length<2&&(u=0),arguments.length<3&&(s=u);var c=i[1]<i[0],l=i[c-0],f=i[1-c],h=Math.floor((f-l)/(t.length-u+2*s));return o=r(l+Math.round((f-l-(t.length-u)*h)/2),h),c&&o.reverse(),a=Math.round(h*(1-u)),e={t:"rangeRoundBands",a:arguments},n},n.rangeBand=function(){return a},n.rangeExtent=function(){return Xi(e.a[0])},n.copy=function(){return fo(t,e)},n.domain(t)}function ho(t,e){function n(){var n=0,o=e.length;for(i=[];++n<o;)i[n-1]=pa.quantile(t,n/o);return r}function r(t){if(!isNaN(t=+t))return e[pa.bisect(i,t)]}var i;return r.domain=function(e){return arguments.length?(t=e.map(s).filter(c).sort(u),n()):t},r.range=function(t){return arguments.length?(e=t,n()):e},r.quantiles=function(){return i},r.invertExtent=function(n){return n=e.indexOf(n),n<0?[NaN,NaN]:[n>0?i[n-1]:t[0],n<i.length?i[n]:t[t.length-1]]},r.copy=function(){return ho(t,e)},n()}function po(t,e,n){function r(e){return n[Math.max(0,Math.min(a,Math.floor(o*(e-t))))]}function i(){return o=n.length/(e-t),a=n.length-1,r}var o,a;return r.domain=function(n){return arguments.length?(t=+n[0],e=+n[n.length-1],i()):[t,e]},r.range=function(t){return arguments.length?(n=t,i()):n},r.invertExtent=function(e){return e=n.indexOf(e),e=e<0?NaN:e/o+t,[e,e+1/o]},r.copy=function(){return po(t,e,n)},i()}function go(t,e){function n(n){if(n<=n)return e[pa.bisect(t,n)]}return n.domain=function(e){return arguments.length?(t=e,n):t},n.range=function(t){return arguments.length?(e=t,n):e},n.invertExtent=function(n){return n=e.indexOf(n),[t[n-1],t[n]]},n.copy=function(){return go(t,e)},n}function vo(t){function e(t){return+t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=n.map(e),e):t},e.ticks=function(e){return io(t,e)},e.tickFormat=function(e,n){return oo(t,e,n)},e.copy=function(){return vo(t)},e}function yo(){return 0}function mo(t){return t.innerRadius}function xo(t){return t.outerRadius}function bo(t){return t.startAngle}function wo(t){return t.endAngle}function Mo(t){return t&&t.padAngle}function _o(t,e,n,r){return(t-n)*e-(e-r)*t>0?0:1}function So(t,e,n,r,i){var o=t[0]-e[0],a=t[1]-e[1],u=(i?r:-r)/Math.sqrt(o*o+a*a),s=u*a,c=-u*o,l=t[0]+s,f=t[1]+c,h=e[0]+s,p=e[1]+c,d=(l+h)/2,g=(f+p)/2,v=h-l,y=p-f,m=v*v+y*y,x=n-r,b=l*p-h*f,w=(y<0?-1:1)*Math.sqrt(Math.max(0,x*x*m-b*b)),M=(b*y-v*w)/m,_=(-b*v-y*w)/m,S=(b*y+v*w)/m,k=(-b*v+y*w)/m,T=M-d,E=_-g,C=S-d,N=k-g;return T*T+E*E>C*C+N*N&&(M=S,_=k),[[M-s,_-c],[M*n/x,_*n/x]]}function ko(t){function e(e){function a(){c.push("M",o(t(l),u))}for(var s,c=[],l=[],f=-1,h=e.length,p=Lt(n),d=Lt(r);++f<h;)i.call(this,s=e[f],f)?l.push([+p.call(this,s,f),+d.call(this,s,f)]):l.length&&(a(),l=[]);return l.length&&a(),c.length?c.join(""):null}var n=jn,r=Rn,i=je,o=To,a=o.key,u=.7;return e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(r=t,e):r},e.defined=function(t){return arguments.length?(i=t,e):i},e.interpolate=function(t){return arguments.length?(a="function"==typeof t?o=t:(o=zs.get(t)||To).key,e):a},e.tension=function(t){return arguments.length?(u=t,e):u},e}function To(t){return t.length>1?t.join("L"):t+"Z"}function Eo(t){return t.join("L")+"Z"}function Co(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r[0]+(r=t[e])[0])/2,"V",r[1]);return n>1&&i.push("H",r[0]),i.join("")}function No(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("V",(r=t[e])[1],"H",r[0]);return i.join("")}function Ao(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r=t[e])[0],"V",r[1]);return i.join("")}function Lo(t,e){return t.length<4?To(t):t[1]+jo(t.slice(1,-1),Ro(t,e))}function qo(t,e){return t.length<3?Eo(t):t[0]+jo((t.push(t[0]),t),Ro([t[t.length-2]].concat(t,[t[1]]),e))}function Do(t,e){return t.length<3?To(t):t[0]+jo(t,Ro(t,e))}function jo(t,e){if(e.length<1||t.length!=e.length&&t.length!=e.length+2)return To(t);var n=t.length!=e.length,r="",i=t[0],o=t[1],a=e[0],u=a,s=1;if(n&&(r+="Q"+(o[0]-2*a[0]/3)+","+(o[1]-2*a[1]/3)+","+o[0]+","+o[1],i=t[1],s=2),e.length>1){u=e[1],o=t[s],s++,r+="C"+(i[0]+a[0])+","+(i[1]+a[1])+","+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1];for(var c=2;c<e.length;c++,s++)o=t[s],u=e[c],r+="S"+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1]}if(n){var l=t[s];r+="Q"+(o[0]+2*u[0]/3)+","+(o[1]+2*u[1]/3)+","+l[0]+","+l[1]}return r}function Ro(t,e){for(var n,r=[],i=(1-e)/2,o=t[0],a=t[1],u=1,s=t.length;++u<s;)n=o,o=a,a=t[u],r.push([i*(a[0]-n[0]),i*(a[1]-n[1])]);return r}function Po(t){if(t.length<3)return To(t);var e=1,n=t.length,r=t[0],i=r[0],o=r[1],a=[i,i,i,(r=t[1])[0]],u=[o,o,o,r[1]],s=[i,",",o,"L",Ho(Is,a),",",Ho(Is,u)];for(t.push(t[n-1]);++e<=n;)r=t[e],a.shift(),a.push(r[0]),u.shift(),u.push(r[1]),Io(s,a,u);return t.pop(),s.push("L",r),s.join("")}function Oo(t){if(t.length<4)return To(t);for(var e,n=[],r=-1,i=t.length,o=[0],a=[0];++r<3;)e=t[r],o.push(e[0]),a.push(e[1]);for(n.push(Ho(Is,o)+","+Ho(Is,a)),--r;++r<i;)e=t[r],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),Io(n,o,a);return n.join("")}function zo(t){for(var e,n,r=-1,i=t.length,o=i+4,a=[],u=[];++r<4;)n=t[r%i],a.push(n[0]),u.push(n[1]);for(e=[Ho(Is,a),",",Ho(Is,u)],--r;++r<o;)n=t[r%i],a.shift(),a.push(n[0]),u.shift(),u.push(n[1]),Io(e,a,u);return e.join("")}function Fo(t,e){var n=t.length-1;if(n)for(var r,i,o=t[0][0],a=t[0][1],u=t[n][0]-o,s=t[n][1]-a,c=-1;++c<=n;)r=t[c],i=c/n,r[0]=e*r[0]+(1-e)*(o+i*u),r[1]=e*r[1]+(1-e)*(a+i*s);return Po(t)}function Ho(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function Io(t,e,n){t.push("C",Ho(Fs,e),",",Ho(Fs,n),",",Ho(Hs,e),",",Ho(Hs,n),",",Ho(Is,e),",",Ho(Is,n))}function Uo(t,e){return(e[1]-t[1])/(e[0]-t[0])}function Bo(t){for(var e=0,n=t.length-1,r=[],i=t[0],o=t[1],a=r[0]=Uo(i,o);++e<n;)r[e]=(a+(a=Uo(i=o,o=t[e+1])))/2;return r[e]=a,r}function $o(t){for(var e,n,r,i,o=[],a=Bo(t),u=-1,s=t.length-1;++u<s;)e=Uo(t[u],t[u+1]),ka(e)<Ua?a[u]=a[u+1]=0:(n=a[u]/e,r=a[u+1]/e,i=n*n+r*r,i>9&&(i=3*e/Math.sqrt(i),a[u]=i*n,a[u+1]=i*r));for(u=-1;++u<=s;)i=(t[Math.min(s,u+1)][0]-t[Math.max(0,u-1)][0])/(6*(1+a[u]*a[u])),o.push([i||0,a[u]*i||0]);return o}function Wo(t){return t.length<3?To(t):t[0]+jo(t,$o(t))}function Yo(t){for(var e,n,r,i=-1,o=t.length;++i<o;)e=t[i],n=e[0],r=e[1]-Va,e[0]=n*Math.cos(r),e[1]=n*Math.sin(r);return t}function Vo(t){function e(e){function s(){g.push("M",u(t(y),f),l,c(t(v.reverse()),f),"Z")}for(var h,p,d,g=[],v=[],y=[],m=-1,x=e.length,b=Lt(n),w=Lt(i),M=n===r?function(){return p}:Lt(r),_=i===o?function(){return d}:Lt(o);++m<x;)a.call(this,h=e[m],m)?(v.push([p=+b.call(this,h,m),d=+w.call(this,h,m)]),y.push([+M.call(this,h,m),+_.call(this,h,m)])):v.length&&(s(),v=[],y=[]);return v.length&&s(),g.length?g.join(""):null}var n=jn,r=jn,i=0,o=Rn,a=je,u=To,s=u.key,c=u,l="L",f=.7;return e.x=function(t){return arguments.length?(n=r=t,e):r},e.x0=function(t){return arguments.length?(n=t,e):n},e.x1=function(t){return arguments.length?(r=t,e):r},e.y=function(t){return arguments.length?(i=o=t,e):o},e.y0=function(t){return arguments.length?(i=t,e):i},e.y1=function(t){return arguments.length?(o=t,e):o},e.defined=function(t){return arguments.length?(a=t,e):a},e.interpolate=function(t){return arguments.length?(s="function"==typeof t?u=t:(u=zs.get(t)||To).key,c=u.reverse||u,l=u.closed?"M":"L",e):s},e.tension=function(t){return arguments.length?(f=t,e):f},e}function Xo(t){return t.radius}function Go(t){return[t.x,t.y]}function Zo(t){return function(){var e=t.apply(this,arguments),n=e[0],r=e[1]-Va;return[n*Math.cos(r),n*Math.sin(r)]}}function Jo(){return 64}function Qo(){return"circle"}function Ko(t){var e=Math.sqrt(t/$a);return"M0,"+e+"A"+e+","+e+" 0 1,1 0,"+-e+"A"+e+","+e+" 0 1,1 0,"+e+"Z"}function ta(t){return function(){var e,n,r;(e=this[t])&&(r=e[n=e.active])&&(r.timer.c=null,r.timer.t=NaN,--e.count?delete e[n]:delete this[t],e.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function ea(t,e,n){return Aa(t,Xs),t.namespace=e,t.id=n,t}function na(t,e,n,r){var i=t.id,o=t.namespace;return X(t,"function"==typeof n?function(t,a,u){t[o][i].tween.set(e,r(n.call(t,t.__data__,a,u)))}:(n=r(n),function(t){t[o][i].tween.set(e,n)}))}function ra(t){return null==t&&(t=""),function(){this.textContent=t}}function ia(t){return null==t?"__transition__":"__transition_"+t+"__"}function oa(t,e,n,r,i){function o(t){var e=g.delay;return c.t=e+s,e<=t?a(t-e):void(c.c=a)}function a(n){var i=p.active,o=p[i];o&&(o.timer.c=null,o.timer.t=NaN,--p.count,delete p[i],o.event&&o.event.interrupt.call(t,t.__data__,o.index));for(var a in p)if(+a<r){var d=p[a];d.timer.c=null,d.timer.t=NaN,--p.count,delete p[a]}c.c=u,Pt(function(){return c.c&&u(n||1)&&(c.c=null,c.t=NaN),1},0,s),p.active=r,g.event&&g.event.start.call(t,t.__data__,e),h=[],g.tween.forEach(function(n,r){(r=r.call(t,t.__data__,e))&&h.push(r)}),f=g.ease,l=g.duration}function u(i){for(var o=i/l,a=f(o),u=h.length;u>0;)h[--u].call(t,a);if(o>=1)return g.event&&g.event.end.call(t,t.__data__,e),--p.count?delete p[r]:delete t[n],1}var s,c,l,f,h,p=t[n]||(t[n]={active:0,count:0}),g=p[r];g||(s=i.time,c=Pt(o,0,s),g=p[r]={tween:new d,time:s,timer:c,delay:i.delay,duration:i.duration,ease:i.ease,index:e},i=null,++p.count)}function aa(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate("+(isFinite(r)?r:n(t))+",0)"})}function ua(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate(0,"+(isFinite(r)?r:n(t))+")"})}function sa(t){return t.toISOString()}function ca(t,e,n){function r(e){return t(e)}function i(t,n){var r=t[1]-t[0],i=r/n,o=pa.bisect(rc,i);return o==rc.length?[e.year,ro(t.map(function(t){return t/31536e6}),n)[2]]:o?e[i/rc[o-1]<rc[o]/i?o-1:o]:[ac,ro(t,n)[2]]}return r.invert=function(e){return la(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain(e),r):t.domain().map(la)},r.nice=function(t,e){function n(n){return!isNaN(n)&&!t.range(n,la(+n+1),e).length}var o=r.domain(),a=Xi(o),u=null==t?i(a,10):"number"==typeof t&&i(a,t);return u&&(t=u[0],e=u[1]),r.domain(Ji(o,e>1?{floor:function(e){for(;n(e=t.floor(e));)e=la(e-1);return e},ceil:function(e){for(;n(e=t.ceil(e));)e=la(+e+1);return e}}:t))},r.ticks=function(t,e){var n=Xi(r.domain()),o=null==t?i(n,10):"number"==typeof t?i(n,t):!t.range&&[{range:t},e];return o&&(t=o[0],e=o[1]),t.range(n[0],la(+n[1]+1),e<1?1:e)},r.tickFormat=function(){return n},r.copy=function(){return ca(t.copy(),e,n)},eo(r,t)}function la(t){return new Date(t)}function fa(t){return JSON.parse(t.responseText)}function ha(t){var e=va.createRange();return e.selectNode(va.body),e.createContextualFragment(t.responseText)}var pa={version:"3.5.17"},da=[].slice,ga=function(t){return da.call(t)},va=this.document;if(va)try{ga(va.documentElement.childNodes)[0].nodeType}catch(ya){ga=function(t){for(var e=t.length,n=new Array(e);e--;)n[e]=t[e];return n}}if(Date.now||(Date.now=function(){return+new Date}),va)try{va.createElement("DIV").style.setProperty("opacity",0,"")}catch(ma){var xa=this.Element.prototype,ba=xa.setAttribute,wa=xa.setAttributeNS,Ma=this.CSSStyleDeclaration.prototype,_a=Ma.setProperty;xa.setAttribute=function(t,e){ba.call(this,t,e+"")},xa.setAttributeNS=function(t,e,n){wa.call(this,t,e,n+"")},Ma.setProperty=function(t,e,n){_a.call(this,t,e+"",n)}}pa.ascending=u,pa.descending=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},pa.min=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&n>r&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&n>r&&(n=r)}return n},pa.max=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&r>n&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&r>n&&(n=r)}return n},pa.extent=function(t,e){var n,r,i,o=-1,a=t.length;if(1===arguments.length){for(;++o<a;)if(null!=(r=t[o])&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=t[o])&&(n>r&&(n=r),i<r&&(i=r))}else{for(;++o<a;)if(null!=(r=e.call(t,t[o],o))&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=e.call(t,t[o],o))&&(n>r&&(n=r),i<r&&(i=r))}return[n,i]},pa.sum=function(t,e){var n,r=0,i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)c(n=+t[o])&&(r+=n);else for(;++o<i;)c(n=+e.call(t,t[o],o))&&(r+=n);return r},pa.mean=function(t,e){var n,r=0,i=t.length,o=-1,a=i;if(1===arguments.length)for(;++o<i;)c(n=s(t[o]))?r+=n:--a;else for(;++o<i;)c(n=s(e.call(t,t[o],o)))?r+=n:--a;if(a)return r/a},pa.quantile=function(t,e){var n=(t.length-1)*e+1,r=Math.floor(n),i=+t[r-1],o=n-r;return o?i+o*(t[r]-i):i},pa.median=function(t,e){var n,r=[],i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)c(n=s(t[o]))&&r.push(n);else for(;++o<i;)c(n=s(e.call(t,t[o],o)))&&r.push(n);if(r.length)return pa.quantile(r.sort(u),.5)},pa.variance=function(t,e){var n,r,i=t.length,o=0,a=0,u=-1,l=0;if(1===arguments.length)for(;++u<i;)c(n=s(t[u]))&&(r=n-o,o+=r/++l,a+=r*(n-o));else for(;++u<i;)c(n=s(e.call(t,t[u],u)))&&(r=n-o,o+=r/++l,a+=r*(n-o));if(l>1)return a/(l-1)},pa.deviation=function(){var t=pa.variance.apply(this,arguments);return t?Math.sqrt(t):t};var Sa=l(u);pa.bisectLeft=Sa.left,pa.bisect=pa.bisectRight=Sa.right,pa.bisector=function(t){return l(1===t.length?function(e,n){return u(t(e),n)}:t)},pa.shuffle=function(t,e,n){(o=arguments.length)<3&&(n=t.length,o<2&&(e=0));for(var r,i,o=n-e;o;)i=Math.random()*o--|0,r=t[o+e],t[o+e]=t[i+e],t[i+e]=r;return t},pa.permute=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},pa.pairs=function(t){for(var e,n=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);n<r;)o[n]=[e=i,i=t[++n]];return o},pa.transpose=function(t){if(!(i=t.length))return[];for(var e=-1,n=pa.min(t,f),r=new Array(n);++e<n;)for(var i,o=-1,a=r[e]=new Array(i);++o<i;)a[o]=t[o][e];return r},pa.zip=function(){return pa.transpose(arguments)},pa.keys=function(t){var e=[];for(var n in t)e.push(n);return e},pa.values=function(t){var e=[];for(var n in t)e.push(t[n]);return e},pa.entries=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},pa.merge=function(t){for(var e,n,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(n=new Array(a);--i>=0;)for(r=t[i],e=r.length;--e>=0;)n[--a]=r[e];return n};var ka=Math.abs;pa.range=function(t,e,n){if(arguments.length<3&&(n=1,arguments.length<2&&(e=t,t=0)),(e-t)/n===1/0)throw new Error("infinite range");var r,i=[],o=h(ka(n)),a=-1;if(t*=o,e*=o,n*=o,n<0)for(;(r=t+n*++a)>e;)i.push(r/o);else for(;(r=t+n*++a)<e;)i.push(r/o);return i},pa.map=function(t,e){var n=new d;if(t instanceof d)t.forEach(function(t,e){n.set(t,e)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(1===arguments.length)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e.call(t,r=t[i],i),r)}else for(var a in t)n.set(a,t[a]);return n};var Ta="__proto__",Ea="\0";p(d,{has:y,get:function(t){return this._[g(t)]},set:function(t,e){return this._[g(t)]=e},remove:m,keys:x,values:function(){var t=[];for(var e in this._)t.push(this._[e]);return t},entries:function(){var t=[];for(var e in this._)t.push({key:v(e),value:this._[e]});return t},size:b,empty:w,forEach:function(t){for(var e in this._)t.call(this,v(e),this._[e])}}),pa.nest=function(){function t(e,a,u){if(u>=o.length)return r?r.call(i,a):n?a.sort(n):a;for(var s,c,l,f,h=-1,p=a.length,g=o[u++],v=new d;++h<p;)(f=v.get(s=g(c=a[h])))?f.push(c):v.set(s,[c]);return e?(c=e(),l=function(n,r){c.set(n,t(e,r,u))}):(c={},l=function(n,r){c[n]=t(e,r,u)}),v.forEach(l),c}function e(t,n){if(n>=o.length)return t;var r=[],i=a[n++];return t.forEach(function(t,i){r.push({key:t,values:e(i,n)})}),i?r.sort(function(t,e){return i(t.key,e.key)}):r}var n,r,i={},o=[],a=[];return i.map=function(e,n){return t(n,e,0)},i.entries=function(n){return e(t(pa.map,n,0),0)},i.key=function(t){return o.push(t),i},i.sortKeys=function(t){return a[o.length-1]=t,i},i.sortValues=function(t){return n=t,i},i.rollup=function(t){return r=t,i},i},pa.set=function(t){var e=new M;if(t)for(var n=0,r=t.length;n<r;++n)e.add(t[n]);return e},p(M,{has:y,add:function(t){return this._[g(t+="")]=!0,t},remove:m,values:x,size:b,empty:w,forEach:function(t){for(var e in this._)t.call(this,v(e))}}),pa.behavior={},pa.rebind=function(t,e){for(var n,r=1,i=arguments.length;++r<i;)t[n=arguments[r]]=S(t,e,e[n]);return t};var Ca=["webkit","ms","moz","Moz","o","O"];pa.dispatch=function(){for(var t=new E,e=-1,n=arguments.length;++e<n;)t[arguments[e]]=C(t);return t},E.prototype.on=function(t,e){var n=t.indexOf("."),r="";if(n>=0&&(r=t.slice(n+1),t=t.slice(0,n)),t)return arguments.length<2?this[t].on(r):this[t].on(r,e);if(2===arguments.length){if(null==e)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},pa.event=null,pa.requote=function(t){return t.replace(Na,"\\$&")};var Na=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,Aa={}.__proto__?function(t,e){t.__proto__=e}:function(t,e){for(var n in e)t[n]=e[n]},La=function(t,e){return e.querySelector(t)},qa=function(t,e){return e.querySelectorAll(t)},Da=function(t,e){var n=t.matches||t[k(t,"matchesSelector")];return(Da=function(t,e){return n.call(t,e)})(t,e)};"function"==typeof Sizzle&&(La=function(t,e){return Sizzle(t,e)[0]||null},qa=Sizzle,Da=Sizzle.matchesSelector),pa.selection=function(){return pa.select(va.documentElement)};var ja=pa.selection.prototype=[];ja.select=function(t){var e,n,r,i,o=[];t=D(t);for(var a=-1,u=this.length;++a<u;){o.push(e=[]),e.parentNode=(r=this[a]).parentNode;for(var s=-1,c=r.length;++s<c;)(i=r[s])?(e.push(n=t.call(i,i.__data__,s,a)),n&&"__data__"in i&&(n.__data__=i.__data__)):e.push(null)}return q(o)},ja.selectAll=function(t){var e,n,r=[];t=j(t);for(var i=-1,o=this.length;++i<o;)for(var a=this[i],u=-1,s=a.length;++u<s;)(n=a[u])&&(r.push(e=ga(t.call(n,n.__data__,u,i))),e.parentNode=n);return q(r)};var Ra="http://www.w3.org/1999/xhtml",Pa={svg:"http://www.w3.org/2000/svg",xhtml:Ra,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};pa.ns={prefix:Pa,qualify:function(t){var e=t.indexOf(":"),n=t;return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Pa.hasOwnProperty(n)?{space:Pa[n],local:t}:t}},ja.attr=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node();return t=pa.ns.qualify(t),t.local?n.getAttributeNS(t.space,t.local):n.getAttribute(t)}for(e in t)this.each(R(e,t[e]));return this}return this.each(R(t,e))},ja.classed=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node(),r=(t=z(t)).length,i=-1;if(e=n.classList){for(;++i<r;)if(!e.contains(t[i]))return!1}else for(e=n.getAttribute("class");++i<r;)if(!O(t[i]).test(e))return!1;return!0}for(e in t)this.each(F(e,t[e]));return this}return this.each(F(t,e))},ja.style=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){r<2&&(e="");for(n in t)this.each(I(n,t[n],e));return this}if(r<2){var i=this.node();return a(i).getComputedStyle(i,null).getPropertyValue(t)}n=""}return this.each(I(t,e,n))},ja.property=function(t,e){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(e in t)this.each(U(e,t[e]));return this}return this.each(U(t,e))},ja.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},ja.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},ja.append=function(t){return t=B(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},ja.insert=function(t,e){return t=B(t),e=D(e),this.select(function(){return this.insertBefore(t.apply(this,arguments),e.apply(this,arguments)||null)})},ja.remove=function(){return this.each($)},ja.data=function(t,e){function n(t,n){var r,i,o,a=t.length,l=n.length,f=Math.min(a,l),h=new Array(l),p=new Array(l),g=new Array(a);if(e){var v,y=new d,m=new Array(a);for(r=-1;++r<a;)(i=t[r])&&(y.has(v=e.call(i,i.__data__,r))?g[r]=i:y.set(v,i),m[r]=v);for(r=-1;++r<l;)(i=y.get(v=e.call(n,o=n[r],r)))?i!==!0&&(h[r]=i,i.__data__=o):p[r]=W(o),y.set(v,!0);for(r=-1;++r<a;)r in m&&y.get(m[r])!==!0&&(g[r]=t[r])}else{for(r=-1;++r<f;)i=t[r],o=n[r],i?(i.__data__=o,h[r]=i):p[r]=W(o);for(;r<l;++r)p[r]=W(n[r]);for(;r<a;++r)g[r]=t[r]}p.update=h,p.parentNode=h.parentNode=g.parentNode=t.parentNode,u.push(p),s.push(h),c.push(g)}var r,i,o=-1,a=this.length;if(!arguments.length){for(t=new Array(a=(r=this[0]).length);++o<a;)(i=r[o])&&(t[o]=i.__data__);return t}var u=G([]),s=q([]),c=q([]);if("function"==typeof t)for(;++o<a;)n(r=this[o],t.call(r,r.parentNode.__data__,o));else for(;++o<a;)n(r=this[o],t);return s.enter=function(){return u},s.exit=function(){return c},s},ja.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},ja.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=Y(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]),e.parentNode=(n=this[o]).parentNode;for(var u=0,s=n.length;u<s;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return q(i)},ja.order=function(){for(var t=-1,e=this.length;++t<e;)for(var n,r=this[t],i=r.length-1,o=r[i];--i>=0;)(n=r[i])&&(o&&o!==n.nextSibling&&o.parentNode.insertBefore(n,o),o=n);return this},ja.sort=function(t){t=V.apply(this,arguments);for(var e=-1,n=this.length;++e<n;)this[e].sort(t);return this.order()},ja.each=function(t){return X(this,function(e,n,r){t.call(e,e.__data__,n,r)})},ja.call=function(t){var e=ga(arguments);return t.apply(e[0]=this,e),this},ja.empty=function(){return!this.node()},ja.node=function(){for(var t=0,e=this.length;t<e;t++)for(var n=this[t],r=0,i=n.length;r<i;r++){var o=n[r];if(o)return o}return null},ja.size=function(){var t=0;return X(this,function(){++t}),t};var Oa=[];pa.selection.enter=G,pa.selection.enter.prototype=Oa,Oa.append=ja.append,Oa.empty=ja.empty,Oa.node=ja.node,Oa.call=ja.call,Oa.size=ja.size,Oa.select=function(t){for(var e,n,r,i,o,a=[],u=-1,s=this.length;++u<s;){r=(i=this[u]).update,a.push(e=[]),e.parentNode=i.parentNode;for(var c=-1,l=i.length;++c<l;)(o=i[c])?(e.push(r[c]=n=t.call(i.parentNode,o.__data__,c,u)),n.__data__=o.__data__):e.push(null)}return q(a)},Oa.insert=function(t,e){return arguments.length<2&&(e=Z(this)),ja.insert.call(this,t,e)},pa.select=function(t){var e;return"string"==typeof t?(e=[La(t,va)],e.parentNode=va.documentElement):(e=[t],e.parentNode=o(t)),q([e])},pa.selectAll=function(t){var e;return"string"==typeof t?(e=ga(qa(t,va)),e.parentNode=va.documentElement):(e=ga(t),e.parentNode=null),q([e])},ja.on=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){r<2&&(e=!1);for(n in t)this.each(J(n,t[n],e));return this}if(r<2)return(r=this.node()["__on"+t])&&r._;n=!1}return this.each(J(t,e,n))};var za=pa.map({mouseenter:"mouseover",mouseleave:"mouseout"});va&&za.forEach(function(t){"on"+t in va&&za.remove(t)});var Fa,Ha=0;pa.mouse=function(t){return et(t,A())};var Ia=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;pa.touch=function(t,e,n){if(arguments.length<3&&(n=e,e=A().changedTouches),e)for(var r,i=0,o=e.length;i<o;++i)if((r=e[i]).identifier===n)return et(t,r)},pa.behavior.drag=function(){function t(){this.on("mousedown.drag",i).on("touchstart.drag",o)}function e(t,e,i,o,a){return function(){function u(){var t,n,r=e(h,g);r&&(t=r[0]-x[0],n=r[1]-x[1],d|=t|n,x=r,p({type:"drag",x:r[0]+c[0],y:r[1]+c[1],dx:t,dy:n}))}function s(){e(h,g)&&(y.on(o+v,null).on(a+v,null),m(d),p({type:"dragend"}))}var c,l=this,f=pa.event.target.correspondingElement||pa.event.target,h=l.parentNode,p=n.of(l,arguments),d=0,g=t(),v=".drag"+(null==g?"":"-"+g),y=pa.select(i(f)).on(o+v,u).on(a+v,s),m=tt(f),x=e(h,g);r?(c=r.apply(l,arguments),c=[c.x-x[0],c.y-x[1]]):c=[0,0],p({type:"dragstart"})}}var n=L(t,"drag","dragstart","dragend"),r=null,i=e(T,pa.mouse,a,"mousemove","mouseup"),o=e(nt,pa.touch,_,"touchmove","touchend");return t.origin=function(e){return arguments.length?(r=e,t):r},pa.rebind(t,n,"on")},pa.touches=function(t,e){return arguments.length<2&&(e=A().touches),e?ga(e).map(function(e){var n=et(t,e);return n.identifier=e.identifier,n}):[]};var Ua=1e-6,Ba=Ua*Ua,$a=Math.PI,Wa=2*$a,Ya=Wa-Ua,Va=$a/2,Xa=$a/180,Ga=180/$a,Za=Math.SQRT2,Ja=2,Qa=4;pa.interpolateZoom=function(t,e){var n,r,i=t[0],o=t[1],a=t[2],u=e[0],s=e[1],c=e[2],l=u-i,f=s-o,h=l*l+f*f;if(h<Ba)r=Math.log(c/a)/Za,n=function(t){return[i+t*l,o+t*f,a*Math.exp(Za*t*r)]};else{var p=Math.sqrt(h),d=(c*c-a*a+Qa*h)/(2*a*Ja*p),g=(c*c-a*a-Qa*h)/(2*c*Ja*p),v=Math.log(Math.sqrt(d*d+1)-d),y=Math.log(Math.sqrt(g*g+1)-g);r=(y-v)/Za,n=function(t){var e=t*r,n=st(v),u=a/(Ja*p)*(n*ct(Za*e+v)-ut(v));return[i+u*l,o+u*f,a*n/st(Za*e+v)]}}return n.duration=1e3*r,n},pa.behavior.zoom=function(){function t(t){t.on(A,f).on(tu+".zoom",p).on("dblclick.zoom",d).on(j,h)}function e(t){return[(t[0]-S.x)/S.k,(t[1]-S.y)/S.k]}function n(t){return[t[0]*S.k+S.x,t[1]*S.k+S.y]}function r(t){S.k=Math.max(T[0],Math.min(T[1],t))}function i(t,e){e=n(e),S.x+=t[0]-e[0],S.y+=t[1]-e[1]}function o(e,n,o,a){e.__chart__={x:S.x,y:S.y,k:S.k},r(Math.pow(2,a)),i(v=n,o),e=pa.select(e),E>0&&(e=e.transition().duration(E)),e.call(t.event)}function u(){w&&w.domain(b.range().map(function(t){return(t-S.x)/S.k}).map(b.invert)),_&&_.domain(M.range().map(function(t){return(t-S.y)/S.k}).map(M.invert))}function s(t){C++||t({type:"zoomstart"})}function c(t){u(),t({type:"zoom",scale:S.k,translate:[S.x,S.y]})}function l(t){--C||(t({type:"zoomend"}),v=null)}function f(){function t(){u=1,i(pa.mouse(r),h),c(o)}function n(){f.on(q,null).on(D,null),p(u),l(o)}var r=this,o=R.of(r,arguments),u=0,f=pa.select(a(r)).on(q,t).on(D,n),h=e(pa.mouse(r)),p=tt(r);Vs.call(r),s(o)}function h(){function t(){var t=pa.touches(d);return p=S.k,t.forEach(function(t){t.identifier in v&&(v[t.identifier]=e(t))}),t}function n(){var e=pa.event.target;pa.select(e).on(b,a).on(w,u),M.push(e);for(var n=pa.event.changedTouches,r=0,i=n.length;r<i;++r)v[n[r].identifier]=null;var s=t(),c=Date.now();if(1===s.length){if(c-x<500){var l=s[0];o(d,l,v[l.identifier],Math.floor(Math.log(S.k)/Math.LN2)+1),N()}x=c}else if(s.length>1){var l=s[0],f=s[1],h=l[0]-f[0],p=l[1]-f[1];y=h*h+p*p}}function a(){var t,e,n,o,a=pa.touches(d);Vs.call(d);for(var u=0,s=a.length;u<s;++u,o=null)if(n=a[u],o=v[n.identifier]){if(e)break;t=n,e=o}if(o){var l=(l=n[0]-t[0])*l+(l=n[1]-t[1])*l,f=y&&Math.sqrt(l/y);t=[(t[0]+n[0])/2,(t[1]+n[1])/2],e=[(e[0]+o[0])/2,(e[1]+o[1])/2],r(f*p)}x=null,i(t,e),c(g)}function u(){if(pa.event.touches.length){for(var e=pa.event.changedTouches,n=0,r=e.length;n<r;++n)delete v[e[n].identifier];for(var i in v)return void t()}pa.selectAll(M).on(m,null),_.on(A,f).on(j,h),k(),l(g)}var p,d=this,g=R.of(d,arguments),v={},y=0,m=".zoom-"+pa.event.changedTouches[0].identifier,b="touchmove"+m,w="touchend"+m,M=[],_=pa.select(d),k=tt(d);n(),s(g),_.on(A,null).on(j,n)}function p(){var t=R.of(this,arguments);m?clearTimeout(m):(Vs.call(this),g=e(v=y||pa.mouse(this)),s(t)),m=setTimeout(function(){m=null,l(t)},50),N(),r(Math.pow(2,.002*Ka())*S.k),i(v,g),c(t)}function d(){var t=pa.mouse(this),n=Math.log(S.k)/Math.LN2;o(this,t,e(t),pa.event.shiftKey?Math.ceil(n)-1:Math.floor(n)+1)}var g,v,y,m,x,b,w,M,_,S={x:0,y:0,k:1},k=[960,500],T=eu,E=250,C=0,A="mousedown.zoom",q="mousemove.zoom",D="mouseup.zoom",j="touchstart.zoom",R=L(t,"zoomstart","zoom","zoomend");return tu||(tu="onwheel"in va?(Ka=function(){return-pa.event.deltaY*(pa.event.deltaMode?120:1)},"wheel"):"onmousewheel"in va?(Ka=function(){return pa.event.wheelDelta},"mousewheel"):(Ka=function(){return-pa.event.detail},"MozMousePixelScroll")),t.event=function(t){t.each(function(){var t=R.of(this,arguments),e=S;Ws?pa.select(this).transition().each("start.zoom",function(){S=this.__chart__||{x:0,y:0,k:1},s(t)}).tween("zoom:zoom",function(){var n=k[0],r=k[1],i=v?v[0]:n/2,o=v?v[1]:r/2,a=pa.interpolateZoom([(i-S.x)/S.k,(o-S.y)/S.k,n/S.k],[(i-e.x)/e.k,(o-e.y)/e.k,n/e.k]);return function(e){var r=a(e),u=n/r[2];this.__chart__=S={x:i-r[0]*u,y:o-r[1]*u,k:u},c(t)}}).each("interrupt.zoom",function(){l(t)}).each("end.zoom",function(){l(t)}):(this.__chart__=S,s(t),c(t),l(t))})},t.translate=function(e){return arguments.length?(S={x:+e[0],y:+e[1],k:S.k},u(),t):[S.x,S.y]},t.scale=function(e){return arguments.length?(S={x:S.x,y:S.y,k:null},r(+e),u(),t):S.k},t.scaleExtent=function(e){return arguments.length?(T=null==e?eu:[+e[0],+e[1]],t):T},t.center=function(e){return arguments.length?(y=e&&[+e[0],+e[1]],t):y},t.size=function(e){return arguments.length?(k=e&&[+e[0],+e[1]],t):k},t.duration=function(e){return arguments.length?(E=+e,t):E},t.x=function(e){return arguments.length?(w=e,b=e.copy(),S={x:0,y:0,k:1},t):w},t.y=function(e){return arguments.length?(_=e,M=e.copy(),S={x:0,y:0,k:1},t):_},pa.rebind(t,R,"on")};var Ka,tu,eu=[0,1/0];pa.color=ft,ft.prototype.toString=function(){return this.rgb()+""},pa.hsl=ht;var nu=ht.prototype=new ft;nu.brighter=function(t){
return t=Math.pow(.7,arguments.length?t:1),new ht(this.h,this.s,this.l/t)},nu.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new ht(this.h,this.s,t*this.l)},nu.rgb=function(){return pt(this.h,this.s,this.l)},pa.hcl=dt;var ru=dt.prototype=new ft;ru.brighter=function(t){return new dt(this.h,this.c,Math.min(100,this.l+iu*(arguments.length?t:1)))},ru.darker=function(t){return new dt(this.h,this.c,Math.max(0,this.l-iu*(arguments.length?t:1)))},ru.rgb=function(){return gt(this.h,this.c,this.l).rgb()},pa.lab=vt;var iu=18,ou=.95047,au=1,uu=1.08883,su=vt.prototype=new ft;su.brighter=function(t){return new vt(Math.min(100,this.l+iu*(arguments.length?t:1)),this.a,this.b)},su.darker=function(t){return new vt(Math.max(0,this.l-iu*(arguments.length?t:1)),this.a,this.b)},su.rgb=function(){return yt(this.l,this.a,this.b)},pa.rgb=Mt;var cu=Mt.prototype=new ft;cu.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var e=this.r,n=this.g,r=this.b,i=30;return e||n||r?(e&&e<i&&(e=i),n&&n<i&&(n=i),r&&r<i&&(r=i),new Mt(Math.min(255,e/t),Math.min(255,n/t),Math.min(255,r/t))):new Mt(i,i,i)},cu.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new Mt(t*this.r,t*this.g,t*this.b)},cu.hsl=function(){return Et(this.r,this.g,this.b)},cu.toString=function(){return"#"+kt(this.r)+kt(this.g)+kt(this.b)};var lu=pa.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});lu.forEach(function(t,e){lu.set(t,_t(e))}),pa.functor=Lt,pa.xhr=qt(_),pa.dsv=function(t,e){function n(t,n,o){arguments.length<3&&(o=n,n=null);var a=Dt(t,e,null==n?r:i(n),o);return a.row=function(t){return arguments.length?a.response(null==(n=t)?r:i(t)):n},a}function r(t){return n.parse(t.responseText)}function i(t){return function(e){return n.parse(e.responseText,t)}}function o(e){return e.map(a).join(t)}function a(t){return u.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}var u=new RegExp('["'+t+"\n]"),s=t.charCodeAt(0);return n.parse=function(t,e){var r;return n.parseRows(t,function(t,n){if(r)return r(t,n-1);var i=new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}");r=e?function(t,n){return e(i(t),n)}:i})},n.parseRows=function(t,e){function n(){if(l>=c)return a;if(i)return i=!1,o;var e=l;if(34===t.charCodeAt(e)){for(var n=e;n++<c;)if(34===t.charCodeAt(n)){if(34!==t.charCodeAt(n+1))break;++n}l=n+2;var r=t.charCodeAt(n+1);return 13===r?(i=!0,10===t.charCodeAt(n+2)&&++l):10===r&&(i=!0),t.slice(e+1,n).replace(/""/g,'"')}for(;l<c;){var r=t.charCodeAt(l++),u=1;if(10===r)i=!0;else if(13===r)i=!0,10===t.charCodeAt(l)&&(++l,++u);else if(r!==s)continue;return t.slice(e,l-u)}return t.slice(e)}for(var r,i,o={},a={},u=[],c=t.length,l=0,f=0;(r=n())!==a;){for(var h=[];r!==o&&r!==a;)h.push(r),r=n();e&&null==(h=e(h,f++))||u.push(h)}return u},n.format=function(e){if(Array.isArray(e[0]))return n.formatRows(e);var r=new M,i=[];return e.forEach(function(t){for(var e in t)r.has(e)||i.push(r.add(e))}),[i.map(a).join(t)].concat(e.map(function(e){return i.map(function(t){return a(e[t])}).join(t)})).join("\n")},n.formatRows=function(t){return t.map(o).join("\n")},n},pa.csv=pa.dsv(",","text/csv"),pa.tsv=pa.dsv("\t","text/tab-separated-values");var fu,hu,pu,du,gu=this[k(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};pa.timer=function(){Pt.apply(this,arguments)},pa.timer.flush=function(){zt(),Ft()},pa.round=function(t,e){return e?Math.round(t*(e=Math.pow(10,e)))/e:Math.round(t)};var vu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(It);pa.formatPrefix=function(t,e){var n=0;return(t=+t)&&(t<0&&(t*=-1),e&&(t=pa.round(t,Ht(t,e))),n=1+Math.floor(1e-12+Math.log(t)/Math.LN10),n=Math.max(-24,Math.min(24,3*Math.floor((n-1)/3)))),vu[8+n/3]};var yu=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,mu=pa.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,e){return t.toPrecision(e)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},r:function(t,e){return(t=pa.round(t,Ht(t,e))).toFixed(Math.max(0,Math.min(20,Ht(t*(1+1e-15),e))))}}),xu=pa.time={},bu=Date;$t.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){wu.setUTCDate.apply(this._,arguments)},setDay:function(){wu.setUTCDay.apply(this._,arguments)},setFullYear:function(){wu.setUTCFullYear.apply(this._,arguments)},setHours:function(){wu.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){wu.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){wu.setUTCMinutes.apply(this._,arguments)},setMonth:function(){wu.setUTCMonth.apply(this._,arguments)},setSeconds:function(){wu.setUTCSeconds.apply(this._,arguments)},setTime:function(){wu.setTime.apply(this._,arguments)}};var wu=Date.prototype;xu.year=Wt(function(t){return t=xu.day(t),t.setMonth(0,1),t},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t){return t.getFullYear()}),xu.years=xu.year.range,xu.years.utc=xu.year.utc.range,xu.day=Wt(function(t){var e=new bu(2e3,0);return e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),e},function(t,e){t.setDate(t.getDate()+e)},function(t){return t.getDate()-1}),xu.days=xu.day.range,xu.days.utc=xu.day.utc.range,xu.dayOfYear=function(t){var e=xu.year(t);return Math.floor((t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(t,e){e=7-e;var n=xu[t]=Wt(function(t){return(t=xu.day(t)).setDate(t.getDate()-(t.getDay()+e)%7),t},function(t,e){t.setDate(t.getDate()+7*Math.floor(e))},function(t){var n=xu.year(t).getDay();return Math.floor((xu.dayOfYear(t)+(n+e)%7)/7)-(n!==e)});xu[t+"s"]=n.range,xu[t+"s"].utc=n.utc.range,xu[t+"OfYear"]=function(t){var n=xu.year(t).getDay();return Math.floor((xu.dayOfYear(t)+(n+e)%7)/7)}}),xu.week=xu.sunday,xu.weeks=xu.sunday.range,xu.weeks.utc=xu.sunday.utc.range,xu.weekOfYear=xu.sundayOfYear;var Mu={"-":"",_:" ",0:"0"},_u=/^\s*\d+/,Su=/^%/;pa.locale=function(t){return{numberFormat:Ut(t),timeFormat:Vt(t)}};var ku=pa.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});pa.format=ku.numberFormat,pa.geo={},de.prototype={s:0,t:0,add:function(t){ge(t,this.t,Tu),ge(Tu.s,this.s,this),this.s?this.t+=Tu.t:this.s=Tu.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var Tu=new de;pa.geo.stream=function(t,e){t&&Eu.hasOwnProperty(t.type)?Eu[t.type](t,e):ve(t,e)};var Eu={Feature:function(t,e){ve(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)ve(n[r].geometry,e)}},Cu={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){ye(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)ye(n[r],e,0)},Polygon:function(t,e){me(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)me(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)ve(n[r],e)}};pa.geo.area=function(t){return Nu=0,pa.geo.stream(t,Lu),Nu};var Nu,Au=new de,Lu={sphere:function(){Nu+=4*$a},point:T,lineStart:T,lineEnd:T,polygonStart:function(){Au.reset(),Lu.lineStart=xe},polygonEnd:function(){var t=2*Au;Nu+=t<0?4*$a+t:t,Lu.lineStart=Lu.lineEnd=Lu.point=T}};pa.geo.bounds=function(){function t(t,e){x.push(b=[l=t,h=t]),e<f&&(f=e),e>p&&(p=e)}function e(e,n){var r=be([e*Xa,n*Xa]);if(y){var i=Me(y,r),o=[i[1],-i[0],0],a=Me(o,i);ke(a),a=Te(a);var s=e-d,c=s>0?1:-1,g=a[0]*Ga*c,v=ka(s)>180;if(v^(c*d<g&&g<c*e)){var m=a[1]*Ga;m>p&&(p=m)}else if(g=(g+360)%360-180,v^(c*d<g&&g<c*e)){var m=-a[1]*Ga;m<f&&(f=m)}else n<f&&(f=n),n>p&&(p=n);v?e<d?u(l,e)>u(l,h)&&(h=e):u(e,h)>u(l,h)&&(l=e):h>=l?(e<l&&(l=e),e>h&&(h=e)):e>d?u(l,e)>u(l,h)&&(h=e):u(e,h)>u(l,h)&&(l=e)}else t(e,n);y=r,d=e}function n(){w.point=e}function r(){b[0]=l,b[1]=h,w.point=t,y=null}function i(t,n){if(y){var r=t-d;m+=ka(r)>180?r+(r>0?360:-360):r}else g=t,v=n;Lu.point(t,n),e(t,n)}function o(){Lu.lineStart()}function a(){i(g,v),Lu.lineEnd(),ka(m)>Ua&&(l=-(h=180)),b[0]=l,b[1]=h,y=null}function u(t,e){return(e-=t)<0?e+360:e}function s(t,e){return t[0]-e[0]}function c(t,e){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var l,f,h,p,d,g,v,y,m,x,b,w={point:t,lineStart:n,lineEnd:r,polygonStart:function(){w.point=i,w.lineStart=o,w.lineEnd=a,m=0,Lu.polygonStart()},polygonEnd:function(){Lu.polygonEnd(),w.point=t,w.lineStart=n,w.lineEnd=r,Au<0?(l=-(h=180),f=-(p=90)):m>Ua?p=90:m<-Ua&&(f=-90),b[0]=l,b[1]=h}};return function(t){p=h=-(l=f=1/0),x=[],pa.geo.stream(t,w);var e=x.length;if(e){x.sort(s);for(var n,r=1,i=x[0],o=[i];r<e;++r)n=x[r],c(n[0],i)||c(n[1],i)?(u(i[0],n[1])>u(i[0],i[1])&&(i[1]=n[1]),u(n[0],i[1])>u(i[0],i[1])&&(i[0]=n[0])):o.push(i=n);for(var a,n,d=-(1/0),e=o.length-1,r=0,i=o[e];r<=e;i=n,++r)n=o[r],(a=u(i[1],n[0]))>d&&(d=a,l=n[0],h=i[1])}return x=b=null,l===1/0||f===1/0?[[NaN,NaN],[NaN,NaN]]:[[l,f],[h,p]]}}(),pa.geo.centroid=function(t){qu=Du=ju=Ru=Pu=Ou=zu=Fu=Hu=Iu=Uu=0,pa.geo.stream(t,Bu);var e=Hu,n=Iu,r=Uu,i=e*e+n*n+r*r;return i<Ba&&(e=Ou,n=zu,r=Fu,Du<Ua&&(e=ju,n=Ru,r=Pu),i=e*e+n*n+r*r,i<Ba)?[NaN,NaN]:[Math.atan2(n,e)*Ga,at(r/Math.sqrt(i))*Ga]};var qu,Du,ju,Ru,Pu,Ou,zu,Fu,Hu,Iu,Uu,Bu={sphere:T,point:Ce,lineStart:Ae,lineEnd:Le,polygonStart:function(){Bu.lineStart=qe},polygonEnd:function(){Bu.lineStart=Ae}},$u=ze(je,Ue,$e,[-$a,-$a/2]),Wu=1e9;pa.geo.clipExtent=function(){var t,e,n,r,i,o,a={stream:function(t){return i&&(i.valid=!1),i=o(t),i.valid=!0,i},extent:function(u){return arguments.length?(o=Xe(t=+u[0][0],e=+u[0][1],n=+u[1][0],r=+u[1][1]),i&&(i.valid=!1,i=null),a):[[t,e],[n,r]]}};return a.extent([[0,0],[960,500]])},(pa.geo.conicEqualArea=function(){return Ge(Ze)}).raw=Ze,pa.geo.albers=function(){return pa.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},pa.geo.albersUsa=function(){function t(t){var o=t[0],a=t[1];return e=null,n(o,a),e||(r(o,a),e)||i(o,a),e}var e,n,r,i,o=pa.geo.albers(),a=pa.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=pa.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){e=[t,n]}};return t.invert=function(t){var e=o.scale(),n=o.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?u:o).invert(t)},t.stream=function(t){var e=o.stream(t),n=a.stream(t),r=u.stream(t);return{point:function(t,i){e.point(t,i),n.point(t,i),r.point(t,i)},sphere:function(){e.sphere(),n.sphere(),r.sphere()},lineStart:function(){e.lineStart(),n.lineStart(),r.lineStart()},lineEnd:function(){e.lineEnd(),n.lineEnd(),r.lineEnd()},polygonStart:function(){e.polygonStart(),n.polygonStart(),r.polygonStart()},polygonEnd:function(){e.polygonEnd(),n.polygonEnd(),r.polygonEnd()}}},t.precision=function(e){return arguments.length?(o.precision(e),a.precision(e),u.precision(e),t):o.precision()},t.scale=function(e){return arguments.length?(o.scale(e),a.scale(.35*e),u.scale(e),t.translate(o.translate())):o.scale()},t.translate=function(e){if(!arguments.length)return o.translate();var c=o.scale(),l=+e[0],f=+e[1];return n=o.translate(e).clipExtent([[l-.455*c,f-.238*c],[l+.455*c,f+.238*c]]).stream(s).point,r=a.translate([l-.307*c,f+.201*c]).clipExtent([[l-.425*c+Ua,f+.12*c+Ua],[l-.214*c-Ua,f+.234*c-Ua]]).stream(s).point,i=u.translate([l-.205*c,f+.212*c]).clipExtent([[l-.214*c+Ua,f+.166*c+Ua],[l-.115*c-Ua,f+.234*c-Ua]]).stream(s).point,t},t.scale(1070)};var Yu,Vu,Xu,Gu,Zu,Ju,Qu={point:T,lineStart:T,lineEnd:T,polygonStart:function(){Vu=0,Qu.lineStart=Je},polygonEnd:function(){Qu.lineStart=Qu.lineEnd=Qu.point=T,Yu+=ka(Vu/2)}},Ku={point:Qe,lineStart:T,lineEnd:T,polygonStart:T,polygonEnd:T},ts={point:en,lineStart:nn,lineEnd:rn,polygonStart:function(){ts.lineStart=on},polygonEnd:function(){ts.point=en,ts.lineStart=nn,ts.lineEnd=rn}};pa.geo.path=function(){function t(t){return t&&("function"==typeof u&&o.pointRadius(+u.apply(this,arguments)),a&&a.valid||(a=i(o)),pa.geo.stream(t,a)),o.result()}function e(){return a=null,t}var n,r,i,o,a,u=4.5;return t.area=function(t){return Yu=0,pa.geo.stream(t,i(Qu)),Yu},t.centroid=function(t){return ju=Ru=Pu=Ou=zu=Fu=Hu=Iu=Uu=0,pa.geo.stream(t,i(ts)),Uu?[Hu/Uu,Iu/Uu]:Fu?[Ou/Fu,zu/Fu]:Pu?[ju/Pu,Ru/Pu]:[NaN,NaN]},t.bounds=function(t){return Zu=Ju=-(Xu=Gu=1/0),pa.geo.stream(t,i(Ku)),[[Xu,Gu],[Zu,Ju]]},t.projection=function(t){return arguments.length?(i=(n=t)?t.stream||sn(t):_,e()):n},t.context=function(t){return arguments.length?(o=null==(r=t)?new Ke:new an(t),"function"!=typeof u&&o.pointRadius(u),e()):r},t.pointRadius=function(e){return arguments.length?(u="function"==typeof e?e:(o.pointRadius(+e),+e),t):u},t.projection(pa.geo.albersUsa()).context(null)},pa.geo.transform=function(t){return{stream:function(e){var n=new cn(e);for(var r in t)n[r]=t[r];return n}}},cn.prototype={point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},pa.geo.projection=fn,pa.geo.projectionMutator=hn,(pa.geo.equirectangular=function(){return fn(dn)}).raw=dn.invert=dn,pa.geo.rotation=function(t){function e(e){return e=t(e[0]*Xa,e[1]*Xa),e[0]*=Ga,e[1]*=Ga,e}return t=vn(t[0]%360*Xa,t[1]*Xa,t.length>2?t[2]*Xa:0),e.invert=function(e){return e=t.invert(e[0]*Xa,e[1]*Xa),e[0]*=Ga,e[1]*=Ga,e},e},gn.invert=dn,pa.geo.circle=function(){function t(){var t="function"==typeof r?r.apply(this,arguments):r,e=vn(-t[0]*Xa,-t[1]*Xa,0).invert,i=[];return n(null,null,1,{point:function(t,n){i.push(t=e(t,n)),t[0]*=Ga,t[1]*=Ga}}),{type:"Polygon",coordinates:[i]}}var e,n,r=[0,0],i=6;return t.origin=function(e){return arguments.length?(r=e,t):r},t.angle=function(r){return arguments.length?(n=bn((e=+r)*Xa,i*Xa),t):e},t.precision=function(r){return arguments.length?(n=bn(e*Xa,(i=+r)*Xa),t):i},t.angle(90)},pa.geo.distance=function(t,e){var n,r=(e[0]-t[0])*Xa,i=t[1]*Xa,o=e[1]*Xa,a=Math.sin(r),u=Math.cos(r),s=Math.sin(i),c=Math.cos(i),l=Math.sin(o),f=Math.cos(o);return Math.atan2(Math.sqrt((n=f*a)*n+(n=c*l-s*f*u)*n),s*l+c*f*u)},pa.geo.graticule=function(){function t(){return{type:"MultiLineString",coordinates:e()}}function e(){return pa.range(Math.ceil(o/v)*v,i,v).map(h).concat(pa.range(Math.ceil(c/y)*y,s,y).map(p)).concat(pa.range(Math.ceil(r/d)*d,n,d).filter(function(t){return ka(t%v)>Ua}).map(l)).concat(pa.range(Math.ceil(u/g)*g,a,g).filter(function(t){return ka(t%y)>Ua}).map(f))}var n,r,i,o,a,u,s,c,l,f,h,p,d=10,g=d,v=90,y=360,m=2.5;return t.lines=function(){return e().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(p(s).slice(1),h(i).reverse().slice(1),p(c).reverse().slice(1))]}},t.extent=function(e){return arguments.length?t.majorExtent(e).minorExtent(e):t.minorExtent()},t.majorExtent=function(e){return arguments.length?(o=+e[0][0],i=+e[1][0],c=+e[0][1],s=+e[1][1],o>i&&(e=o,o=i,i=e),c>s&&(e=c,c=s,s=e),t.precision(m)):[[o,c],[i,s]]},t.minorExtent=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],u=+e[0][1],a=+e[1][1],r>n&&(e=r,r=n,n=e),u>a&&(e=u,u=a,a=e),t.precision(m)):[[r,u],[n,a]]},t.step=function(e){return arguments.length?t.majorStep(e).minorStep(e):t.minorStep()},t.majorStep=function(e){return arguments.length?(v=+e[0],y=+e[1],t):[v,y]},t.minorStep=function(e){return arguments.length?(d=+e[0],g=+e[1],t):[d,g]},t.precision=function(e){return arguments.length?(m=+e,l=Mn(u,a,90),f=_n(r,n,m),h=Mn(c,s,90),p=_n(o,i,m),t):m},t.majorExtent([[-180,-90+Ua],[180,90-Ua]]).minorExtent([[-180,-80-Ua],[180,80+Ua]])},pa.geo.greatArc=function(){function t(){return{type:"LineString",coordinates:[e||r.apply(this,arguments),n||i.apply(this,arguments)]}}var e,n,r=Sn,i=kn;return t.distance=function(){return pa.geo.distance(e||r.apply(this,arguments),n||i.apply(this,arguments))},t.source=function(n){return arguments.length?(r=n,e="function"==typeof n?null:n,t):r},t.target=function(e){return arguments.length?(i=e,n="function"==typeof e?null:e,t):i},t.precision=function(){return arguments.length?t:0},t},pa.geo.interpolate=function(t,e){return Tn(t[0]*Xa,t[1]*Xa,e[0]*Xa,e[1]*Xa)},pa.geo.length=function(t){return es=0,pa.geo.stream(t,ns),es};var es,ns={sphere:T,point:T,lineStart:En,lineEnd:T,polygonStart:T,polygonEnd:T},rs=Cn(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(pa.geo.azimuthalEqualArea=function(){return fn(rs)}).raw=rs;var is=Cn(function(t){var e=Math.acos(t);return e&&e/Math.sin(e)},_);(pa.geo.azimuthalEquidistant=function(){return fn(is)}).raw=is,(pa.geo.conicConformal=function(){return Ge(Nn)}).raw=Nn,(pa.geo.conicEquidistant=function(){return Ge(An)}).raw=An;var os=Cn(function(t){return 1/t},Math.atan);(pa.geo.gnomonic=function(){return fn(os)}).raw=os,Ln.invert=function(t,e){return[t,2*Math.atan(Math.exp(e))-Va]},(pa.geo.mercator=function(){return qn(Ln)}).raw=Ln;var as=Cn(function(){return 1},Math.asin);(pa.geo.orthographic=function(){return fn(as)}).raw=as;var us=Cn(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});(pa.geo.stereographic=function(){return fn(us)}).raw=us,Dn.invert=function(t,e){return[-e,2*Math.atan(Math.exp(t))-Va]},(pa.geo.transverseMercator=function(){var t=qn(Dn),e=t.center,n=t.rotate;return t.center=function(t){return t?e([-t[1],t[0]]):(t=e(),[t[1],-t[0]])},t.rotate=function(t){return t?n([t[0],t[1],t.length>2?t[2]+90:90]):(t=n(),[t[0],t[1],t[2]-90])},n([0,0,90])}).raw=Dn,pa.geom={},pa.geom.hull=function(t){function e(t){if(t.length<3)return[];var e,i=Lt(n),o=Lt(r),a=t.length,u=[],s=[];for(e=0;e<a;e++)u.push([+i.call(this,t[e],e),+o.call(this,t[e],e),e]);for(u.sort(On),e=0;e<a;e++)s.push([u[e][0],-u[e][1]]);var c=Pn(u),l=Pn(s),f=l[0]===c[0],h=l[l.length-1]===c[c.length-1],p=[];for(e=c.length-1;e>=0;--e)p.push(t[u[c[e]][2]]);for(e=+f;e<l.length-h;++e)p.push(t[u[l[e]][2]]);return p}var n=jn,r=Rn;return arguments.length?e(t):(e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(r=t,e):r},e)},pa.geom.polygon=function(t){return Aa(t,ss),t};var ss=pa.geom.polygon.prototype=[];ss.area=function(){for(var t,e=-1,n=this.length,r=this[n-1],i=0;++e<n;)t=r,r=this[e],i+=t[1]*r[0]-t[0]*r[1];return.5*i},ss.centroid=function(t){var e,n,r=-1,i=this.length,o=0,a=0,u=this[i-1];for(arguments.length||(t=-1/(6*this.area()));++r<i;)e=u,u=this[r],n=e[0]*u[1]-u[0]*e[1],o+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[o*t,a*t]},ss.clip=function(t){for(var e,n,r,i,o,a,u=Hn(t),s=-1,c=this.length-Hn(this),l=this[c-1];++s<c;){for(e=t.slice(),t.length=0,i=this[s],o=e[(r=e.length-u)-1],n=-1;++n<r;)a=e[n],zn(a,l,i)?(zn(o,l,i)||t.push(Fn(o,a,l,i)),t.push(a)):zn(o,l,i)&&t.push(Fn(o,a,l,i)),o=a;u&&t.push(t[0]),l=i}return t};var cs,ls,fs,hs,ps,ds=[],gs=[];Xn.prototype.prepare=function(){for(var t,e=this.edges,n=e.length;n--;)t=e[n].edge,t.b&&t.a||e.splice(n,1);return e.sort(Zn),e.length},ar.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},ur.prototype={insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=fr(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)r=n.U,n===r.L?(i=r.R,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(cr(this,n),t=n,n=t.U),n.C=!1,r.C=!0,lr(this,r))):(i=r.L,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(lr(this,n),t=n,n=t.U),n.C=!1,r.C=!0,cr(this,r))),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?fr(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(e=i.R,e.C&&(e.C=!1,i.C=!0,cr(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,lr(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,cr(this,i),t=this._;break}}else if(e=i.L,e.C&&(e.C=!1,i.C=!0,lr(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,cr(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,lr(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},pa.geom.voronoi=function(t){function e(t){var e=new Array(t.length),r=u[0][0],i=u[0][1],o=u[1][0],a=u[1][1];return hr(n(t),u).cells.forEach(function(n,u){var s=n.edges,c=n.site,l=e[u]=s.length?s.map(function(t){var e=t.start();return[e.x,e.y]}):c.x>=r&&c.x<=o&&c.y>=i&&c.y<=a?[[r,a],[o,a],[o,i],[r,i]]:[];l.point=t[u]}),e}function n(t){return t.map(function(t,e){return{x:Math.round(o(t,e)/Ua)*Ua,y:Math.round(a(t,e)/Ua)*Ua,i:e}})}var r=jn,i=Rn,o=r,a=i,u=vs;return t?e(t):(e.links=function(t){return hr(n(t)).edges.filter(function(t){return t.l&&t.r}).map(function(e){return{source:t[e.l.i],target:t[e.r.i]}})},e.triangles=function(t){var e=[];return hr(n(t)).cells.forEach(function(n,r){for(var i,o,a=n.site,u=n.edges.sort(Zn),s=-1,c=u.length,l=u[c-1].edge,f=l.l===a?l.r:l.l;++s<c;)i=l,o=f,l=u[s].edge,f=l.l===a?l.r:l.l,r<o.i&&r<f.i&&dr(a,o,f)<0&&e.push([t[r],t[o.i],t[f.i]])}),e},e.x=function(t){return arguments.length?(o=Lt(r=t),e):r},e.y=function(t){return arguments.length?(a=Lt(i=t),e):i},e.clipExtent=function(t){return arguments.length?(u=null==t?vs:t,e):u===vs?null:u},e.size=function(t){return arguments.length?e.clipExtent(t&&[[0,0],t]):u===vs?null:u&&u[1]},e)};var vs=[[-1e6,-1e6],[1e6,1e6]];pa.geom.delaunay=function(t){return pa.geom.voronoi().triangles(t)},pa.geom.quadtree=function(t,e,n,r,i){function o(t){function o(t,e,n,r,i,o,a,u){if(!isNaN(n)&&!isNaN(r))if(t.leaf){var s=t.x,l=t.y;if(null!=s)if(ka(s-n)+ka(l-r)<.01)c(t,e,n,r,i,o,a,u);else{var f=t.point;t.x=t.y=t.point=null,c(t,f,s,l,i,o,a,u),c(t,e,n,r,i,o,a,u)}else t.x=n,t.y=r,t.point=e}else c(t,e,n,r,i,o,a,u)}function c(t,e,n,r,i,a,u,s){var c=.5*(i+u),l=.5*(a+s),f=n>=c,h=r>=l,p=h<<1|f;t.leaf=!1,t=t.nodes[p]||(t.nodes[p]=yr()),f?i=c:u=c,h?a=l:s=l,o(t,e,n,r,i,a,u,s)}var l,f,h,p,d,g,v,y,m,x=Lt(u),b=Lt(s);if(null!=e)g=e,v=n,y=r,m=i;else if(y=m=-(g=v=1/0),f=[],h=[],d=t.length,a)for(p=0;p<d;++p)l=t[p],l.x<g&&(g=l.x),l.y<v&&(v=l.y),l.x>y&&(y=l.x),l.y>m&&(m=l.y),f.push(l.x),h.push(l.y);else for(p=0;p<d;++p){var w=+x(l=t[p],p),M=+b(l,p);w<g&&(g=w),M<v&&(v=M),w>y&&(y=w),M>m&&(m=M),f.push(w),h.push(M)}var _=y-g,S=m-v;_>S?m=v+_:y=g+S;var k=yr();if(k.add=function(t){o(k,t,+x(t,++p),+b(t,p),g,v,y,m)},k.visit=function(t){mr(t,k,g,v,y,m)},k.find=function(t){return xr(k,t[0],t[1],g,v,y,m)},p=-1,null==e){for(;++p<d;)o(k,t[p],f[p],h[p],g,v,y,m);--p}else t.forEach(k.add);return f=h=t=l=null,k}var a,u=jn,s=Rn;return(a=arguments.length)?(u=gr,s=vr,3===a&&(i=n,r=e,n=e=0),o(t)):(o.x=function(t){return arguments.length?(u=t,o):u},o.y=function(t){return arguments.length?(s=t,o):s},o.extent=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),o):null==e?null:[[e,n],[r,i]]},o.size=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=n=0,r=+t[0],i=+t[1]),o):null==e?null:[r-e,i-n]},o)},pa.interpolateRgb=br,pa.interpolateObject=wr,pa.interpolateNumber=Mr,pa.interpolateString=_r;var ys=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ms=new RegExp(ys.source,"g");pa.interpolate=Sr,pa.interpolators=[function(t,e){var n=typeof e;return("string"===n?lu.has(e.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(e)?br:_r:e instanceof ft?br:Array.isArray(e)?kr:"object"===n&&isNaN(e)?wr:Mr)(t,e)}],pa.interpolateArray=kr;var xs=function(){return _},bs=pa.map({linear:xs,poly:qr,quad:function(){return Nr},cubic:function(){return Ar},sin:function(){return Dr},exp:function(){return jr},circle:function(){return Rr},elastic:Pr,back:Or,bounce:function(){return zr}}),ws=pa.map({"in":_,out:Er,"in-out":Cr,"out-in":function(t){return Cr(Er(t))}});pa.ease=function(t){var e=t.indexOf("-"),n=e>=0?t.slice(0,e):t,r=e>=0?t.slice(e+1):"in";return n=bs.get(n)||xs,r=ws.get(r)||_,Tr(r(n.apply(null,da.call(arguments,1))))},pa.interpolateHcl=Fr,pa.interpolateHsl=Hr,pa.interpolateLab=Ir,pa.interpolateRound=Ur,pa.transform=function(t){var e=va.createElementNS(pa.ns.prefix.svg,"g");return(pa.transform=function(t){if(null!=t){e.setAttribute("transform",t);var n=e.transform.baseVal.consolidate()}return new Br(n?n.matrix:Ms)})(t)},Br.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var Ms={a:1,b:0,c:0,d:1,e:0,f:0};pa.interpolateTransform=Qr,pa.layout={},pa.layout.bundle=function(){return function(t){for(var e=[],n=-1,r=t.length;++n<r;)e.push(ei(t[n]));return e}},pa.layout.chord=function(){function t(){var t,c,f,h,p,d={},g=[],v=pa.range(o),y=[];for(n=[],r=[],t=0,h=-1;++h<o;){for(c=0,p=-1;++p<o;)c+=i[h][p];g.push(c),y.push(pa.range(o)),t+=c}for(a&&v.sort(function(t,e){return a(g[t],g[e])}),u&&y.forEach(function(t,e){t.sort(function(t,n){return u(i[e][t],i[e][n])})}),t=(Wa-l*o)/t,c=0,h=-1;++h<o;){for(f=c,p=-1;++p<o;){var m=v[h],x=y[m][p],b=i[m][x],w=c,M=c+=b*t;d[m+"-"+x]={index:m,subindex:x,startAngle:w,endAngle:M,value:b}}r[m]={index:m,startAngle:f,endAngle:c,value:g[m]},c+=l}for(h=-1;++h<o;)for(p=h-1;++p<o;){var _=d[h+"-"+p],S=d[p+"-"+h];(_.value||S.value)&&n.push(_.value<S.value?{source:S,target:_}:{source:_,target:S})}s&&e()}function e(){n.sort(function(t,e){return s((t.source.value+t.target.value)/2,(e.source.value+e.target.value)/2)})}var n,r,i,o,a,u,s,c={},l=0;return c.matrix=function(t){return arguments.length?(o=(i=t)&&i.length,n=r=null,c):i},c.padding=function(t){return arguments.length?(l=t,n=r=null,c):l},c.sortGroups=function(t){return arguments.length?(a=t,n=r=null,c):a},c.sortSubgroups=function(t){return arguments.length?(u=t,n=null,c):u},c.sortChords=function(t){return arguments.length?(s=t,n&&e(),c):s},c.chords=function(){return n||t(),n},c.groups=function(){return r||t(),r},c},pa.layout.force=function(){function t(t){return function(e,n,r,i){if(e.point!==t){var o=e.cx-t.x,a=e.cy-t.y,u=i-n,s=o*o+a*a;if(u*u/y<s){if(s<g){var c=e.charge/s;t.px-=o*c,t.py-=a*c}return!0}if(e.point&&s&&s<g){var c=e.pointCharge/s;t.px-=o*c,t.py-=a*c}}return!e.charge}}function e(t){t.px=pa.event.x,t.py=pa.event.y,s.resume()}var n,r,i,o,a,u,s={},c=pa.dispatch("start","tick","end"),l=[1,1],f=.9,h=_s,p=Ss,d=-30,g=ks,v=.1,y=.64,m=[],x=[];return s.tick=function(){if((i*=.99)<.005)return n=null,c.end({type:"end",alpha:i=0}),!0;var e,r,s,h,p,g,y,b,w,M=m.length,_=x.length;for(r=0;r<_;++r)s=x[r],h=s.source,p=s.target,b=p.x-h.x,w=p.y-h.y,(g=b*b+w*w)&&(g=i*a[r]*((g=Math.sqrt(g))-o[r])/g,b*=g,w*=g,p.x-=b*(y=h.weight+p.weight?h.weight/(h.weight+p.weight):.5),p.y-=w*y,h.x+=b*(y=1-y),h.y+=w*y);if((y=i*v)&&(b=l[0]/2,w=l[1]/2,r=-1,y))for(;++r<M;)s=m[r],s.x+=(b-s.x)*y,s.y+=(w-s.y)*y;if(d)for(si(e=pa.geom.quadtree(m),i,u),r=-1;++r<M;)(s=m[r]).fixed||e.visit(t(s));for(r=-1;++r<M;)s=m[r],s.fixed?(s.x=s.px,s.y=s.py):(s.x-=(s.px-(s.px=s.x))*f,s.y-=(s.py-(s.py=s.y))*f);c.tick({type:"tick",alpha:i})},s.nodes=function(t){return arguments.length?(m=t,s):m},s.links=function(t){return arguments.length?(x=t,s):x},s.size=function(t){return arguments.length?(l=t,s):l},s.linkDistance=function(t){return arguments.length?(h="function"==typeof t?t:+t,s):h},s.distance=s.linkDistance,s.linkStrength=function(t){return arguments.length?(p="function"==typeof t?t:+t,s):p},s.friction=function(t){return arguments.length?(f=+t,s):f},s.charge=function(t){return arguments.length?(d="function"==typeof t?t:+t,s):d},s.chargeDistance=function(t){return arguments.length?(g=t*t,s):Math.sqrt(g)},s.gravity=function(t){return arguments.length?(v=+t,s):v},s.theta=function(t){return arguments.length?(y=t*t,s):Math.sqrt(y)},s.alpha=function(t){return arguments.length?(t=+t,i?t>0?i=t:(n.c=null,n.t=NaN,n=null,c.end({type:"end",alpha:i=0})):t>0&&(c.start({type:"start",alpha:i=t}),n=Pt(s.tick)),s):i},s.start=function(){function t(t,r){if(!n){for(n=new Array(i),s=0;s<i;++s)n[s]=[];for(s=0;s<c;++s){var o=x[s];n[o.source.index].push(o.target),n[o.target.index].push(o.source)}}for(var a,u=n[e],s=-1,l=u.length;++s<l;)if(!isNaN(a=u[s][t]))return a;return Math.random()*r}var e,n,r,i=m.length,c=x.length,f=l[0],g=l[1];
for(e=0;e<i;++e)(r=m[e]).index=e,r.weight=0;for(e=0;e<c;++e)r=x[e],"number"==typeof r.source&&(r.source=m[r.source]),"number"==typeof r.target&&(r.target=m[r.target]),++r.source.weight,++r.target.weight;for(e=0;e<i;++e)r=m[e],isNaN(r.x)&&(r.x=t("x",f)),isNaN(r.y)&&(r.y=t("y",g)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(o=[],"function"==typeof h)for(e=0;e<c;++e)o[e]=+h.call(this,x[e],e);else for(e=0;e<c;++e)o[e]=h;if(a=[],"function"==typeof p)for(e=0;e<c;++e)a[e]=+p.call(this,x[e],e);else for(e=0;e<c;++e)a[e]=p;if(u=[],"function"==typeof d)for(e=0;e<i;++e)u[e]=+d.call(this,m[e],e);else for(e=0;e<i;++e)u[e]=d;return s.resume()},s.resume=function(){return s.alpha(.1)},s.stop=function(){return s.alpha(0)},s.drag=function(){return r||(r=pa.behavior.drag().origin(_).on("dragstart.force",ii).on("drag.force",e).on("dragend.force",oi)),arguments.length?void this.on("mouseover.force",ai).on("mouseout.force",ui).call(r):r},pa.rebind(s,c,"on")};var _s=20,Ss=1,ks=1/0;pa.layout.hierarchy=function(){function t(i){var o,a=[i],u=[];for(i.depth=0;null!=(o=a.pop());)if(u.push(o),(c=n.call(t,o,o.depth))&&(s=c.length)){for(var s,c,l;--s>=0;)a.push(l=c[s]),l.parent=o,l.depth=o.depth+1;r&&(o.value=0),o.children=c}else r&&(o.value=+r.call(t,o,o.depth)||0),delete o.children;return fi(i,function(t){var n,i;e&&(n=t.children)&&n.sort(e),r&&(i=t.parent)&&(i.value+=t.value)}),u}var e=di,n=hi,r=pi;return t.sort=function(n){return arguments.length?(e=n,t):e},t.children=function(e){return arguments.length?(n=e,t):n},t.value=function(e){return arguments.length?(r=e,t):r},t.revalue=function(e){return r&&(li(e,function(t){t.children&&(t.value=0)}),fi(e,function(e){var n;e.children||(e.value=+r.call(t,e,e.depth)||0),(n=e.parent)&&(n.value+=e.value)})),e},t},pa.layout.partition=function(){function t(e,n,r,i){var o=e.children;if(e.x=n,e.y=e.depth*i,e.dx=r,e.dy=i,o&&(a=o.length)){var a,u,s,c=-1;for(r=e.value?r/e.value:0;++c<a;)t(u=o[c],n,s=u.value*r,i),n+=s}}function e(t){var n=t.children,r=0;if(n&&(i=n.length))for(var i,o=-1;++o<i;)r=Math.max(r,e(n[o]));return 1+r}function n(n,o){var a=r.call(this,n,o);return t(a[0],0,i[0],i[1]/e(a[0])),a}var r=pa.layout.hierarchy(),i=[1,1];return n.size=function(t){return arguments.length?(i=t,n):i},ci(n,r)},pa.layout.pie=function(){function t(a){var u,s=a.length,c=a.map(function(n,r){return+e.call(t,n,r)}),l=+("function"==typeof r?r.apply(this,arguments):r),f=("function"==typeof i?i.apply(this,arguments):i)-l,h=Math.min(Math.abs(f)/s,+("function"==typeof o?o.apply(this,arguments):o)),p=h*(f<0?-1:1),d=pa.sum(c),g=d?(f-s*p)/d:0,v=pa.range(s),y=[];return null!=n&&v.sort(n===Ts?function(t,e){return c[e]-c[t]}:function(t,e){return n(a[t],a[e])}),v.forEach(function(t){y[t]={data:a[t],value:u=c[t],startAngle:l,endAngle:l+=u*g+p,padAngle:h}}),y}var e=Number,n=Ts,r=0,i=Wa,o=0;return t.value=function(n){return arguments.length?(e=n,t):e},t.sort=function(e){return arguments.length?(n=e,t):n},t.startAngle=function(e){return arguments.length?(r=e,t):r},t.endAngle=function(e){return arguments.length?(i=e,t):i},t.padAngle=function(e){return arguments.length?(o=e,t):o},t};var Ts={};pa.layout.stack=function(){function t(u,s){if(!(h=u.length))return u;var c=u.map(function(n,r){return e.call(t,n,r)}),l=c.map(function(e){return e.map(function(e,n){return[o.call(t,e,n),a.call(t,e,n)]})}),f=n.call(t,l,s);c=pa.permute(c,f),l=pa.permute(l,f);var h,p,d,g,v=r.call(t,l,s),y=c[0].length;for(d=0;d<y;++d)for(i.call(t,c[0][d],g=v[d],l[0][d][1]),p=1;p<h;++p)i.call(t,c[p][d],g+=l[p-1][d][1],l[p][d][1]);return u}var e=_,n=xi,r=bi,i=mi,o=vi,a=yi;return t.values=function(n){return arguments.length?(e=n,t):e},t.order=function(e){return arguments.length?(n="function"==typeof e?e:Es.get(e)||xi,t):n},t.offset=function(e){return arguments.length?(r="function"==typeof e?e:Cs.get(e)||bi,t):r},t.x=function(e){return arguments.length?(o=e,t):o},t.y=function(e){return arguments.length?(a=e,t):a},t.out=function(e){return arguments.length?(i=e,t):i},t};var Es=pa.map({"inside-out":function(t){var e,n,r=t.length,i=t.map(wi),o=t.map(Mi),a=pa.range(r).sort(function(t,e){return i[t]-i[e]}),u=0,s=0,c=[],l=[];for(e=0;e<r;++e)n=a[e],u<s?(u+=o[n],c.push(n)):(s+=o[n],l.push(n));return l.reverse().concat(c)},reverse:function(t){return pa.range(t.length).reverse()},"default":xi}),Cs=pa.map({silhouette:function(t){var e,n,r,i=t.length,o=t[0].length,a=[],u=0,s=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];r>u&&(u=r),a.push(r)}for(n=0;n<o;++n)s[n]=(u-a[n])/2;return s},wiggle:function(t){var e,n,r,i,o,a,u,s,c,l=t.length,f=t[0],h=f.length,p=[];for(p[0]=s=c=0,n=1;n<h;++n){for(e=0,i=0;e<l;++e)i+=t[e][n][1];for(e=0,o=0,u=f[n][0]-f[n-1][0];e<l;++e){for(r=0,a=(t[e][n][1]-t[e][n-1][1])/(2*u);r<e;++r)a+=(t[r][n][1]-t[r][n-1][1])/u;o+=a*t[e][n][1]}p[n]=s-=i?o/i*u:0,s<c&&(c=s)}for(n=0;n<h;++n)p[n]-=c;return p},expand:function(t){var e,n,r,i=t.length,o=t[0].length,a=1/i,u=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];if(r)for(e=0;e<i;e++)t[e][n][1]/=r;else for(e=0;e<i;e++)t[e][n][1]=a}for(n=0;n<o;++n)u[n]=0;return u},zero:bi});pa.layout.histogram=function(){function t(t,o){for(var a,u,s=[],c=t.map(n,this),l=r.call(this,c,o),f=i.call(this,l,c,o),o=-1,h=c.length,p=f.length-1,d=e?1:1/h;++o<p;)a=s[o]=[],a.dx=f[o+1]-(a.x=f[o]),a.y=0;if(p>0)for(o=-1;++o<h;)u=c[o],u>=l[0]&&u<=l[1]&&(a=s[pa.bisect(f,u,1,p)-1],a.y+=d,a.push(t[o]));return s}var e=!0,n=Number,r=Ti,i=Si;return t.value=function(e){return arguments.length?(n=e,t):n},t.range=function(e){return arguments.length?(r=Lt(e),t):r},t.bins=function(e){return arguments.length?(i="number"==typeof e?function(t){return ki(t,e)}:Lt(e),t):i},t.frequency=function(n){return arguments.length?(e=!!n,t):e},t},pa.layout.pack=function(){function t(t,o){var a=n.call(this,t,o),u=a[0],s=i[0],c=i[1],l=null==e?Math.sqrt:"function"==typeof e?e:function(){return e};if(u.x=u.y=0,fi(u,function(t){t.r=+l(t.value)}),fi(u,Li),r){var f=r*(e?1:Math.max(2*u.r/s,2*u.r/c))/2;fi(u,function(t){t.r+=f}),fi(u,Li),fi(u,function(t){t.r-=f})}return ji(u,s/2,c/2,e?1:1/Math.max(2*u.r/s,2*u.r/c)),a}var e,n=pa.layout.hierarchy().sort(Ei),r=0,i=[1,1];return t.size=function(e){return arguments.length?(i=e,t):i},t.radius=function(n){return arguments.length?(e=null==n||"function"==typeof n?n:+n,t):e},t.padding=function(e){return arguments.length?(r=+e,t):r},ci(t,n)},pa.layout.tree=function(){function t(t,i){var l=a.call(this,t,i),f=l[0],h=e(f);if(fi(h,n),h.parent.m=-h.z,li(h,r),c)li(f,o);else{var p=f,d=f,g=f;li(f,function(t){t.x<p.x&&(p=t),t.x>d.x&&(d=t),t.depth>g.depth&&(g=t)});var v=u(p,d)/2-p.x,y=s[0]/(d.x+u(d,p)/2+v),m=s[1]/(g.depth||1);li(f,function(t){t.x=(t.x+v)*y,t.y=t.depth*m})}return l}function e(t){for(var e,n={A:null,children:[t]},r=[n];null!=(e=r.pop());)for(var i,o=e.children,a=0,u=o.length;a<u;++a)r.push((o[a]=i={_:o[a],parent:e,children:(i=o[a].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=i);return n.children[0]}function n(t){var e=t.children,n=t.parent.children,r=t.i?n[t.i-1]:null;if(e.length){Hi(t);var o=(e[0].z+e[e.length-1].z)/2;r?(t.z=r.z+u(t._,r._),t.m=t.z-o):t.z=o}else r&&(t.z=r.z+u(t._,r._));t.parent.A=i(t,r,t.parent.A||n[0])}function r(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function i(t,e,n){if(e){for(var r,i=t,o=t,a=e,s=i.parent.children[0],c=i.m,l=o.m,f=a.m,h=s.m;a=zi(a),i=Oi(i),a&&i;)s=Oi(s),o=zi(o),o.a=t,r=a.z+f-i.z-c+u(a._,i._),r>0&&(Fi(Ii(a,t,n),t,r),c+=r,l+=r),f+=a.m,c+=i.m,h+=s.m,l+=o.m;a&&!zi(o)&&(o.t=a,o.m+=f-l),i&&!Oi(s)&&(s.t=i,s.m+=c-h,n=t)}return n}function o(t){t.x*=s[0],t.y=t.depth*s[1]}var a=pa.layout.hierarchy().sort(null).value(null),u=Pi,s=[1,1],c=null;return t.separation=function(e){return arguments.length?(u=e,t):u},t.size=function(e){return arguments.length?(c=null==(s=e)?o:null,t):c?null:s},t.nodeSize=function(e){return arguments.length?(c=null==(s=e)?null:o,t):c?s:null},ci(t,a)},pa.layout.cluster=function(){function t(t,o){var a,u=e.call(this,t,o),s=u[0],c=0;fi(s,function(t){var e=t.children;e&&e.length?(t.x=Bi(e),t.y=Ui(e)):(t.x=a?c+=n(t,a):0,t.y=0,a=t)});var l=$i(s),f=Wi(s),h=l.x-n(l,f)/2,p=f.x+n(f,l)/2;return fi(s,i?function(t){t.x=(t.x-s.x)*r[0],t.y=(s.y-t.y)*r[1]}:function(t){t.x=(t.x-h)/(p-h)*r[0],t.y=(1-(s.y?t.y/s.y:1))*r[1]}),u}var e=pa.layout.hierarchy().sort(null).value(null),n=Pi,r=[1,1],i=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(e){return arguments.length?(i=null==(r=e),t):i?null:r},t.nodeSize=function(e){return arguments.length?(i=null!=(r=e),t):i?r:null},ci(t,e)},pa.layout.treemap=function(){function t(t,e){for(var n,r,i=-1,o=t.length;++i<o;)r=(n=t[i]).value*(e<0?0:e),n.area=isNaN(r)||r<=0?0:r}function e(n){var o=n.children;if(o&&o.length){var a,u,s,c=f(n),l=[],h=o.slice(),d=1/0,g="slice"===p?c.dx:"dice"===p?c.dy:"slice-dice"===p?1&n.depth?c.dy:c.dx:Math.min(c.dx,c.dy);for(t(h,c.dx*c.dy/n.value),l.area=0;(s=h.length)>0;)l.push(a=h[s-1]),l.area+=a.area,"squarify"!==p||(u=r(l,g))<=d?(h.pop(),d=u):(l.area-=l.pop().area,i(l,g,c,!1),g=Math.min(c.dx,c.dy),l.length=l.area=0,d=1/0);l.length&&(i(l,g,c,!0),l.length=l.area=0),o.forEach(e)}}function n(e){var r=e.children;if(r&&r.length){var o,a=f(e),u=r.slice(),s=[];for(t(u,a.dx*a.dy/e.value),s.area=0;o=u.pop();)s.push(o),s.area+=o.area,null!=o.z&&(i(s,o.z?a.dx:a.dy,a,!u.length),s.length=s.area=0);r.forEach(n)}}function r(t,e){for(var n,r=t.area,i=0,o=1/0,a=-1,u=t.length;++a<u;)(n=t[a].area)&&(n<o&&(o=n),n>i&&(i=n));return r*=r,e*=e,r?Math.max(e*i*d/r,r/(e*o*d)):1/0}function i(t,e,n,r){var i,o=-1,a=t.length,u=n.x,c=n.y,l=e?s(t.area/e):0;if(e==n.dx){for((r||l>n.dy)&&(l=n.dy);++o<a;)i=t[o],i.x=u,i.y=c,i.dy=l,u+=i.dx=Math.min(n.x+n.dx-u,l?s(i.area/l):0);i.z=!0,i.dx+=n.x+n.dx-u,n.y+=l,n.dy-=l}else{for((r||l>n.dx)&&(l=n.dx);++o<a;)i=t[o],i.x=u,i.y=c,i.dx=l,c+=i.dy=Math.min(n.y+n.dy-c,l?s(i.area/l):0);i.z=!1,i.dy+=n.y+n.dy-c,n.x+=l,n.dx-=l}}function o(r){var i=a||u(r),o=i[0];return o.x=o.y=0,o.value?(o.dx=c[0],o.dy=c[1]):o.dx=o.dy=0,a&&u.revalue(o),t([o],o.dx*o.dy/o.value),(a?n:e)(o),h&&(a=i),i}var a,u=pa.layout.hierarchy(),s=Math.round,c=[1,1],l=null,f=Yi,h=!1,p="squarify",d=.5*(1+Math.sqrt(5));return o.size=function(t){return arguments.length?(c=t,o):c},o.padding=function(t){function e(e){var n=t.call(o,e,e.depth);return null==n?Yi(e):Vi(e,"number"==typeof n?[n,n,n,n]:n)}function n(e){return Vi(e,t)}if(!arguments.length)return l;var r;return f=null==(l=t)?Yi:"function"==(r=typeof t)?e:"number"===r?(t=[t,t,t,t],n):n,o},o.round=function(t){return arguments.length?(s=t?Math.round:Number,o):s!=Number},o.sticky=function(t){return arguments.length?(h=t,a=null,o):h},o.ratio=function(t){return arguments.length?(d=t,o):d},o.mode=function(t){return arguments.length?(p=t+"",o):p},ci(o,u)},pa.random={normal:function(t,e){var n=arguments.length;return n<2&&(e=1),n<1&&(t=0),function(){var n,r,i;do n=2*Math.random()-1,r=2*Math.random()-1,i=n*n+r*r;while(!i||i>1);return t+e*n*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var t=pa.random.normal.apply(pa,arguments);return function(){return Math.exp(t())}},bates:function(t){var e=pa.random.irwinHall(t);return function(){return e()/t}},irwinHall:function(t){return function(){for(var e=0,n=0;n<t;n++)e+=Math.random();return e}}},pa.scale={};var Ns={floor:_,ceil:_};pa.scale.linear=function(){return to([0,1],[0,1],Sr,!1)};var As={s:1,g:1,p:1,r:1,e:1};pa.scale.log=function(){return so(pa.scale.linear().domain([0,1]),10,!0,[1,10])};var Ls=pa.format(".0e"),qs={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};pa.scale.pow=function(){return co(pa.scale.linear(),1,[0,1])},pa.scale.sqrt=function(){return pa.scale.pow().exponent(.5)},pa.scale.ordinal=function(){return fo([],{t:"range",a:[[]]})},pa.scale.category10=function(){return pa.scale.ordinal().range(Ds)},pa.scale.category20=function(){return pa.scale.ordinal().range(js)},pa.scale.category20b=function(){return pa.scale.ordinal().range(Rs)},pa.scale.category20c=function(){return pa.scale.ordinal().range(Ps)};var Ds=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(St),js=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(St),Rs=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(St),Ps=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(St);pa.scale.quantile=function(){return ho([],[])},pa.scale.quantize=function(){return po(0,1,[0,1])},pa.scale.threshold=function(){return go([.5],[0,1])},pa.scale.identity=function(){return vo([0,1])},pa.svg={},pa.svg.arc=function(){function t(){var t=Math.max(0,+n.apply(this,arguments)),c=Math.max(0,+r.apply(this,arguments)),l=a.apply(this,arguments)-Va,f=u.apply(this,arguments)-Va,h=Math.abs(f-l),p=l>f?0:1;if(c<t&&(d=c,c=t,t=d),h>=Ya)return e(c,p)+(t?e(t,1-p):"")+"Z";var d,g,v,y,m,x,b,w,M,_,S,k,T=0,E=0,C=[];if((y=(+s.apply(this,arguments)||0)/2)&&(v=o===Os?Math.sqrt(t*t+c*c):+o.apply(this,arguments),p||(E*=-1),c&&(E=at(v/c*Math.sin(y))),t&&(T=at(v/t*Math.sin(y)))),c){m=c*Math.cos(l+E),x=c*Math.sin(l+E),b=c*Math.cos(f-E),w=c*Math.sin(f-E);var N=Math.abs(f-l-2*E)<=$a?0:1;if(E&&_o(m,x,b,w)===p^N){var A=(l+f)/2;m=c*Math.cos(A),x=c*Math.sin(A),b=w=null}}else m=x=0;if(t){M=t*Math.cos(f-T),_=t*Math.sin(f-T),S=t*Math.cos(l+T),k=t*Math.sin(l+T);var L=Math.abs(l-f+2*T)<=$a?0:1;if(T&&_o(M,_,S,k)===1-p^L){var q=(l+f)/2;M=t*Math.cos(q),_=t*Math.sin(q),S=k=null}}else M=_=0;if(h>Ua&&(d=Math.min(Math.abs(c-t)/2,+i.apply(this,arguments)))>.001){g=t<c^p?0:1;var D=d,j=d;if(h<$a){var R=null==S?[M,_]:null==b?[m,x]:Fn([m,x],[S,k],[b,w],[M,_]),P=m-R[0],O=x-R[1],z=b-R[0],F=w-R[1],H=1/Math.sin(Math.acos((P*z+O*F)/(Math.sqrt(P*P+O*O)*Math.sqrt(z*z+F*F)))/2),I=Math.sqrt(R[0]*R[0]+R[1]*R[1]);j=Math.min(d,(t-I)/(H-1)),D=Math.min(d,(c-I)/(H+1))}if(null!=b){var U=So(null==S?[M,_]:[S,k],[m,x],c,D,p),B=So([b,w],[M,_],c,D,p);d===D?C.push("M",U[0],"A",D,",",D," 0 0,",g," ",U[1],"A",c,",",c," 0 ",1-p^_o(U[1][0],U[1][1],B[1][0],B[1][1]),",",p," ",B[1],"A",D,",",D," 0 0,",g," ",B[0]):C.push("M",U[0],"A",D,",",D," 0 1,",g," ",B[0])}else C.push("M",m,",",x);if(null!=S){var $=So([m,x],[S,k],t,-j,p),W=So([M,_],null==b?[m,x]:[b,w],t,-j,p);d===j?C.push("L",W[0],"A",j,",",j," 0 0,",g," ",W[1],"A",t,",",t," 0 ",p^_o(W[1][0],W[1][1],$[1][0],$[1][1]),",",1-p," ",$[1],"A",j,",",j," 0 0,",g," ",$[0]):C.push("L",W[0],"A",j,",",j," 0 0,",g," ",$[0])}else C.push("L",M,",",_)}else C.push("M",m,",",x),null!=b&&C.push("A",c,",",c," 0 ",N,",",p," ",b,",",w),C.push("L",M,",",_),null!=S&&C.push("A",t,",",t," 0 ",L,",",1-p," ",S,",",k);return C.push("Z"),C.join("")}function e(t,e){return"M0,"+t+"A"+t+","+t+" 0 1,"+e+" 0,"+-t+"A"+t+","+t+" 0 1,"+e+" 0,"+t}var n=mo,r=xo,i=yo,o=Os,a=bo,u=wo,s=Mo;return t.innerRadius=function(e){return arguments.length?(n=Lt(e),t):n},t.outerRadius=function(e){return arguments.length?(r=Lt(e),t):r},t.cornerRadius=function(e){return arguments.length?(i=Lt(e),t):i},t.padRadius=function(e){return arguments.length?(o=e==Os?Os:Lt(e),t):o},t.startAngle=function(e){return arguments.length?(a=Lt(e),t):a},t.endAngle=function(e){return arguments.length?(u=Lt(e),t):u},t.padAngle=function(e){return arguments.length?(s=Lt(e),t):s},t.centroid=function(){var t=(+n.apply(this,arguments)+ +r.apply(this,arguments))/2,e=(+a.apply(this,arguments)+ +u.apply(this,arguments))/2-Va;return[Math.cos(e)*t,Math.sin(e)*t]},t};var Os="auto";pa.svg.line=function(){return ko(_)};var zs=pa.map({linear:To,"linear-closed":Eo,step:Co,"step-before":No,"step-after":Ao,basis:Po,"basis-open":Oo,"basis-closed":zo,bundle:Fo,cardinal:Do,"cardinal-open":Lo,"cardinal-closed":qo,monotone:Wo});zs.forEach(function(t,e){e.key=t,e.closed=/-closed$/.test(t)});var Fs=[0,2/3,1/3,0],Hs=[0,1/3,2/3,0],Is=[0,1/6,2/3,1/6];pa.svg.line.radial=function(){var t=ko(Yo);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},No.reverse=Ao,Ao.reverse=No,pa.svg.area=function(){return Vo(_)},pa.svg.area.radial=function(){var t=Vo(Yo);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},pa.svg.chord=function(){function t(t,u){var s=e(this,o,t,u),c=e(this,a,t,u);return"M"+s.p0+r(s.r,s.p1,s.a1-s.a0)+(n(s,c)?i(s.r,s.p1,s.r,s.p0):i(s.r,s.p1,c.r,c.p0)+r(c.r,c.p1,c.a1-c.a0)+i(c.r,c.p1,s.r,s.p0))+"Z"}function e(t,e,n,r){var i=e.call(t,n,r),o=u.call(t,i,r),a=s.call(t,i,r)-Va,l=c.call(t,i,r)-Va;return{r:o,a0:a,a1:l,p0:[o*Math.cos(a),o*Math.sin(a)],p1:[o*Math.cos(l),o*Math.sin(l)]}}function n(t,e){return t.a0==e.a0&&t.a1==e.a1}function r(t,e,n){return"A"+t+","+t+" 0 "+ +(n>$a)+",1 "+e}function i(t,e,n,r){return"Q 0,0 "+r}var o=Sn,a=kn,u=Xo,s=bo,c=wo;return t.radius=function(e){return arguments.length?(u=Lt(e),t):u},t.source=function(e){return arguments.length?(o=Lt(e),t):o},t.target=function(e){return arguments.length?(a=Lt(e),t):a},t.startAngle=function(e){return arguments.length?(s=Lt(e),t):s},t.endAngle=function(e){return arguments.length?(c=Lt(e),t):c},t},pa.svg.diagonal=function(){function t(t,i){var o=e.call(this,t,i),a=n.call(this,t,i),u=(o.y+a.y)/2,s=[o,{x:o.x,y:u},{x:a.x,y:u},a];return s=s.map(r),"M"+s[0]+"C"+s[1]+" "+s[2]+" "+s[3]}var e=Sn,n=kn,r=Go;return t.source=function(n){return arguments.length?(e=Lt(n),t):e},t.target=function(e){return arguments.length?(n=Lt(e),t):n},t.projection=function(e){return arguments.length?(r=e,t):r},t},pa.svg.diagonal.radial=function(){var t=pa.svg.diagonal(),e=Go,n=t.projection;return t.projection=function(t){return arguments.length?n(Zo(e=t)):e},t},pa.svg.symbol=function(){function t(t,r){return(Us.get(e.call(this,t,r))||Ko)(n.call(this,t,r))}var e=Qo,n=Jo;return t.type=function(n){return arguments.length?(e=Lt(n),t):e},t.size=function(e){return arguments.length?(n=Lt(e),t):n},t};var Us=pa.map({circle:Ko,cross:function(t){var e=Math.sqrt(t/5)/2;return"M"+-3*e+","+-e+"H"+-e+"V"+-3*e+"H"+e+"V"+-e+"H"+3*e+"V"+e+"H"+e+"V"+3*e+"H"+-e+"V"+e+"H"+-3*e+"Z"},diamond:function(t){var e=Math.sqrt(t/(2*$s)),n=e*$s;return"M0,"+-e+"L"+n+",0 0,"+e+" "+-n+",0Z"},square:function(t){var e=Math.sqrt(t)/2;return"M"+-e+","+-e+"L"+e+","+-e+" "+e+","+e+" "+-e+","+e+"Z"},"triangle-down":function(t){var e=Math.sqrt(t/Bs),n=e*Bs/2;return"M0,"+n+"L"+e+","+-n+" "+-e+","+-n+"Z"},"triangle-up":function(t){var e=Math.sqrt(t/Bs),n=e*Bs/2;return"M0,"+-n+"L"+e+","+n+" "+-e+","+n+"Z"}});pa.svg.symbolTypes=Us.keys();var Bs=Math.sqrt(3),$s=Math.tan(30*Xa);ja.transition=function(t){for(var e,n,r=Ws||++Gs,i=ia(t),o=[],a=Ys||{time:Date.now(),ease:Lr,delay:0,duration:250},u=-1,s=this.length;++u<s;){o.push(e=[]);for(var c=this[u],l=-1,f=c.length;++l<f;)(n=c[l])&&oa(n,l,i,r,a),e.push(n)}return ea(o,i,r)},ja.interrupt=function(t){return this.each(null==t?Vs:ta(ia(t)))};var Ws,Ys,Vs=ta(ia()),Xs=[],Gs=0;Xs.call=ja.call,Xs.empty=ja.empty,Xs.node=ja.node,Xs.size=ja.size,pa.transition=function(t,e){return t&&t.transition?Ws?t.transition(e):t:pa.selection().transition(t)},pa.transition.prototype=Xs,Xs.select=function(t){var e,n,r,i=this.id,o=this.namespace,a=[];t=D(t);for(var u=-1,s=this.length;++u<s;){a.push(e=[]);for(var c=this[u],l=-1,f=c.length;++l<f;)(r=c[l])&&(n=t.call(r,r.__data__,l,u))?("__data__"in r&&(n.__data__=r.__data__),oa(n,l,o,i,r[o][i]),e.push(n)):e.push(null)}return ea(a,o,i)},Xs.selectAll=function(t){var e,n,r,i,o,a=this.id,u=this.namespace,s=[];t=j(t);for(var c=-1,l=this.length;++c<l;)for(var f=this[c],h=-1,p=f.length;++h<p;)if(r=f[h]){o=r[u][a],n=t.call(r,r.__data__,h,c),s.push(e=[]);for(var d=-1,g=n.length;++d<g;)(i=n[d])&&oa(i,d,u,a,o),e.push(i)}return ea(s,u,a)},Xs.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=Y(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]);for(var n=this[o],u=0,s=n.length;u<s;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return ea(i,this.namespace,this.id)},Xs.tween=function(t,e){var n=this.id,r=this.namespace;return arguments.length<2?this.node()[r][n].tween.get(t):X(this,null==e?function(e){e[r][n].tween.remove(t)}:function(i){i[r][n].tween.set(t,e)})},Xs.attr=function(t,e){function n(){this.removeAttribute(u)}function r(){this.removeAttributeNS(u.space,u.local)}function i(t){return null==t?n:(t+="",function(){var e,n=this.getAttribute(u);return n!==t&&(e=a(n,t),function(t){this.setAttribute(u,e(t))})})}function o(t){return null==t?r:(t+="",function(){var e,n=this.getAttributeNS(u.space,u.local);return n!==t&&(e=a(n,t),function(t){this.setAttributeNS(u.space,u.local,e(t))})})}if(arguments.length<2){for(e in t)this.attr(e,t[e]);return this}var a="transform"==t?Qr:Sr,u=pa.ns.qualify(t);return na(this,"attr."+t,e,u.local?o:i)},Xs.attrTween=function(t,e){function n(t,n){var r=e.call(this,t,n,this.getAttribute(i));return r&&function(t){this.setAttribute(i,r(t))}}function r(t,n){var r=e.call(this,t,n,this.getAttributeNS(i.space,i.local));return r&&function(t){this.setAttributeNS(i.space,i.local,r(t))}}var i=pa.ns.qualify(t);return this.tween("attr."+t,i.local?r:n)},Xs.style=function(t,e,n){function r(){this.style.removeProperty(t)}function i(e){return null==e?r:(e+="",function(){var r,i=a(this).getComputedStyle(this,null).getPropertyValue(t);return i!==e&&(r=Sr(i,e),function(e){this.style.setProperty(t,r(e),n)})})}var o=arguments.length;if(o<3){if("string"!=typeof t){o<2&&(e="");for(n in t)this.style(n,t[n],e);return this}n=""}return na(this,"style."+t,e,i)},Xs.styleTween=function(t,e,n){function r(r,i){var o=e.call(this,r,i,a(this).getComputedStyle(this,null).getPropertyValue(t));return o&&function(e){this.style.setProperty(t,o(e),n)}}return arguments.length<3&&(n=""),this.tween("style."+t,r)},Xs.text=function(t){return na(this,"text",t,ra)},Xs.remove=function(){var t=this.namespace;return this.each("end.transition",function(){var e;this[t].count<2&&(e=this.parentNode)&&e.removeChild(this)})},Xs.ease=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].ease:("function"!=typeof t&&(t=pa.ease.apply(pa,arguments)),X(this,function(r){r[n][e].ease=t}))},Xs.delay=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].delay:X(this,"function"==typeof t?function(r,i,o){r[n][e].delay=+t.call(r,r.__data__,i,o)}:(t=+t,function(r){r[n][e].delay=t}))},Xs.duration=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].duration:X(this,"function"==typeof t?function(r,i,o){r[n][e].duration=Math.max(1,t.call(r,r.__data__,i,o))}:(t=Math.max(1,t),function(r){r[n][e].duration=t}))},Xs.each=function(t,e){var n=this.id,r=this.namespace;if(arguments.length<2){var i=Ys,o=Ws;try{Ws=n,X(this,function(e,i,o){Ys=e[r][n],t.call(e,e.__data__,i,o)})}finally{Ys=i,Ws=o}}else X(this,function(i){var o=i[r][n];(o.event||(o.event=pa.dispatch("start","end","interrupt"))).on(t,e)});return this},Xs.transition=function(){for(var t,e,n,r,i=this.id,o=++Gs,a=this.namespace,u=[],s=0,c=this.length;s<c;s++){u.push(t=[]);for(var e=this[s],l=0,f=e.length;l<f;l++)(n=e[l])&&(r=n[a][i],oa(n,l,a,o,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),t.push(n)}return ea(u,a,o)},pa.svg.axis=function(){function t(t){t.each(function(){var t,c=pa.select(this),l=this.__chart__||n,f=this.__chart__=n.copy(),h=null==s?f.ticks?f.ticks.apply(f,u):f.domain():s,p=null==e?f.tickFormat?f.tickFormat.apply(f,u):_:e,d=c.selectAll(".tick").data(h,f),g=d.enter().insert("g",".domain").attr("class","tick").style("opacity",Ua),v=pa.transition(d.exit()).style("opacity",Ua).remove(),y=pa.transition(d.order()).style("opacity",1),m=Math.max(i,0)+a,x=Gi(f),b=c.selectAll(".domain").data([0]),w=(b.enter().append("path").attr("class","domain"),pa.transition(b));g.append("line"),g.append("text");var M,S,k,T,E=g.select("line"),C=y.select("line"),N=d.select("text").text(p),A=g.select("text"),L=y.select("text"),q="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(t=aa,M="x",k="y",S="x2",T="y2",N.attr("dy",q<0?"0em":".71em").style("text-anchor","middle"),w.attr("d","M"+x[0]+","+q*o+"V0H"+x[1]+"V"+q*o)):(t=ua,M="y",k="x",S="y2",T="x2",N.attr("dy",".32em").style("text-anchor",q<0?"end":"start"),w.attr("d","M"+q*o+","+x[0]+"H0V"+x[1]+"H"+q*o)),E.attr(T,q*i),A.attr(k,q*m),C.attr(S,0).attr(T,q*i),L.attr(M,0).attr(k,q*m),f.rangeBand){var D=f,j=D.rangeBand()/2;l=f=function(t){return D(t)+j}}else l.rangeBand?l=f:v.call(t,f,l);g.call(t,l,f),y.call(t,f,f)})}var e,n=pa.scale.linear(),r=Zs,i=6,o=6,a=3,u=[10],s=null;return t.scale=function(e){return arguments.length?(n=e,t):n},t.orient=function(e){return arguments.length?(r=e in Js?e+"":Zs,t):r},t.ticks=function(){return arguments.length?(u=ga(arguments),t):u},t.tickValues=function(e){return arguments.length?(s=e,t):s},t.tickFormat=function(n){return arguments.length?(e=n,t):e},t.tickSize=function(e){var n=arguments.length;return n?(i=+e,o=+arguments[n-1],t):i},t.innerTickSize=function(e){return arguments.length?(i=+e,t):i},t.outerTickSize=function(e){return arguments.length?(o=+e,t):o},t.tickPadding=function(e){return arguments.length?(a=+e,t):a},t.tickSubdivide=function(){return arguments.length&&t},t};var Zs="bottom",Js={top:1,right:1,bottom:1,left:1};pa.svg.brush=function(){function t(o){o.each(function(){var o=pa.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",i).on("touchstart.brush",i),a=o.selectAll(".background").data([0]);a.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),o.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var u=o.selectAll(".resize").data(g,_);u.exit().remove(),u.enter().append("g").attr("class",function(t){return"resize "+t}).style("cursor",function(t){return Qs[t]}).append("rect").attr("x",function(t){return/[ew]$/.test(t)?-3:null}).attr("y",function(t){return/^[ns]/.test(t)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),u.style("display",t.empty()?"none":null);var s,f=pa.transition(o),h=pa.transition(a);c&&(s=Gi(c),h.attr("x",s[0]).attr("width",s[1]-s[0]),n(f)),l&&(s=Gi(l),h.attr("y",s[0]).attr("height",s[1]-s[0]),r(f)),e(f)})}function e(t){t.selectAll(".resize").attr("transform",function(t){return"translate("+f[+/e$/.test(t)]+","+h[+/^s/.test(t)]+")"})}function n(t){t.select(".extent").attr("x",f[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",f[1]-f[0])}function r(t){t.select(".extent").attr("y",h[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function i(){function i(){32==pa.event.keyCode&&(C||(x=null,L[0]-=f[1],L[1]-=h[1],C=2),N())}function g(){32==pa.event.keyCode&&2==C&&(L[0]+=f[1],L[1]+=h[1],C=0,N())}function v(){var t=pa.mouse(w),i=!1;b&&(t[0]+=b[0],t[1]+=b[1]),C||(pa.event.altKey?(x||(x=[(f[0]+f[1])/2,(h[0]+h[1])/2]),L[0]=f[+(t[0]<x[0])],L[1]=h[+(t[1]<x[1])]):x=null),T&&y(t,c,0)&&(n(S),i=!0),E&&y(t,l,1)&&(r(S),i=!0),i&&(e(S),_({type:"brush",mode:C?"move":"resize"}))}function y(t,e,n){var r,i,a=Gi(e),s=a[0],c=a[1],l=L[n],g=n?h:f,v=g[1]-g[0];if(C&&(s-=l,c-=v+l),r=(n?d:p)?Math.max(s,Math.min(c,t[n])):t[n],C?i=(r+=l)+v:(x&&(l=Math.max(s,Math.min(c,2*x[n]-r))),l<r?(i=r,r=l):i=l),g[0]!=r||g[1]!=i)return n?u=null:o=null,g[0]=r,g[1]=i,!0}function m(){v(),S.style("pointer-events","all").selectAll(".resize").style("display",t.empty()?"none":null),pa.select("body").style("cursor",null),q.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),A(),_({type:"brushend"})}var x,b,w=this,M=pa.select(pa.event.target),_=s.of(w,arguments),S=pa.select(w),k=M.datum(),T=!/^(n|s)$/.test(k)&&c,E=!/^(e|w)$/.test(k)&&l,C=M.classed("extent"),A=tt(w),L=pa.mouse(w),q=pa.select(a(w)).on("keydown.brush",i).on("keyup.brush",g);if(pa.event.changedTouches?q.on("touchmove.brush",v).on("touchend.brush",m):q.on("mousemove.brush",v).on("mouseup.brush",m),S.interrupt().selectAll("*").interrupt(),C)L[0]=f[0]-L[0],L[1]=h[0]-L[1];else if(k){var D=+/w$/.test(k),j=+/^n/.test(k);b=[f[1-D]-L[0],h[1-j]-L[1]],L[0]=f[D],L[1]=h[j]}else pa.event.altKey&&(x=L.slice());S.style("pointer-events","none").selectAll(".resize").style("display",null),pa.select("body").style("cursor",M.style("cursor")),_({type:"brushstart"}),v()}var o,u,s=L(t,"brushstart","brush","brushend"),c=null,l=null,f=[0,0],h=[0,0],p=!0,d=!0,g=Ks[0];return t.event=function(t){t.each(function(){var t=s.of(this,arguments),e={x:f,y:h,i:o,j:u},n=this.__chart__||e;this.__chart__=e,Ws?pa.select(this).transition().each("start.brush",function(){o=n.i,u=n.j,f=n.x,h=n.y,t({type:"brushstart"})}).tween("brush:brush",function(){var n=kr(f,e.x),r=kr(h,e.y);return o=u=null,function(i){f=e.x=n(i),h=e.y=r(i),t({type:"brush",mode:"resize"})}}).each("end.brush",function(){o=e.i,u=e.j,t({type:"brush",mode:"resize"}),t({type:"brushend"})}):(t({type:"brushstart"}),t({type:"brush",mode:"resize"}),t({type:"brushend"}))})},t.x=function(e){return arguments.length?(c=e,g=Ks[!c<<1|!l],t):c},t.y=function(e){return arguments.length?(l=e,g=Ks[!c<<1|!l],t):l},t.clamp=function(e){return arguments.length?(c&&l?(p=!!e[0],d=!!e[1]):c?p=!!e:l&&(d=!!e),t):c&&l?[p,d]:c?p:l?d:null},t.extent=function(e){var n,r,i,a,s;return arguments.length?(c&&(n=e[0],r=e[1],l&&(n=n[0],r=r[0]),o=[n,r],c.invert&&(n=c(n),r=c(r)),r<n&&(s=n,n=r,r=s),n==f[0]&&r==f[1]||(f=[n,r])),l&&(i=e[0],a=e[1],c&&(i=i[1],a=a[1]),u=[i,a],l.invert&&(i=l(i),a=l(a)),a<i&&(s=i,i=a,a=s),i==h[0]&&a==h[1]||(h=[i,a])),t):(c&&(o?(n=o[0],r=o[1]):(n=f[0],r=f[1],c.invert&&(n=c.invert(n),r=c.invert(r)),r<n&&(s=n,n=r,r=s))),l&&(u?(i=u[0],a=u[1]):(i=h[0],a=h[1],l.invert&&(i=l.invert(i),a=l.invert(a)),a<i&&(s=i,i=a,a=s))),c&&l?[[n,i],[r,a]]:c?[n,r]:l&&[i,a])},t.clear=function(){return t.empty()||(f=[0,0],h=[0,0],o=u=null),t},t.empty=function(){return!!c&&f[0]==f[1]||!!l&&h[0]==h[1]},pa.rebind(t,s,"on")};var Qs={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ks=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],tc=xu.format=ku.timeFormat,ec=tc.utc,nc=ec("%Y-%m-%dT%H:%M:%S.%LZ");tc.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?sa:nc,sa.parse=function(t){var e=new Date(t);return isNaN(e)?null:e},sa.toString=nc.toString,xu.second=Wt(function(t){return new bu(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(t.getTime()+1e3*Math.floor(e))},function(t){return t.getSeconds()}),xu.seconds=xu.second.range,xu.seconds.utc=xu.second.utc.range,xu.minute=Wt(function(t){return new bu(6e4*Math.floor(t/6e4))},function(t,e){t.setTime(t.getTime()+6e4*Math.floor(e))},function(t){return t.getMinutes()}),xu.minutes=xu.minute.range,xu.minutes.utc=xu.minute.utc.range,xu.hour=Wt(function(t){var e=t.getTimezoneOffset()/60;return new bu(36e5*(Math.floor(t/36e5-e)+e))},function(t,e){t.setTime(t.getTime()+36e5*Math.floor(e))},function(t){return t.getHours()}),xu.hours=xu.hour.range,xu.hours.utc=xu.hour.utc.range,xu.month=Wt(function(t){return t=xu.day(t),t.setDate(1),t},function(t,e){t.setMonth(t.getMonth()+e)},function(t){return t.getMonth()}),xu.months=xu.month.range,xu.months.utc=xu.month.utc.range;var rc=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],ic=[[xu.second,1],[xu.second,5],[xu.second,15],[xu.second,30],[xu.minute,1],[xu.minute,5],[xu.minute,15],[xu.minute,30],[xu.hour,1],[xu.hour,3],[xu.hour,6],[xu.hour,12],[xu.day,1],[xu.day,2],[xu.week,1],[xu.month,1],[xu.month,3],[xu.year,1]],oc=tc.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){
return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",je]]),ac={range:function(t,e,n){return pa.range(Math.ceil(t/n)*n,+e,n).map(la)},floor:_,ceil:_};ic.year=xu.year,xu.scale=function(){return ca(pa.scale.linear(),ic,oc)};var uc=ic.map(function(t){return[t[0].utc,t[1]]}),sc=ec.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",je]]);uc.year=xu.year.utc,xu.scale.utc=function(){return ca(pa.scale.linear(),uc,sc)},pa.text=qt(function(t){return t.responseText}),pa.json=function(t,e){return Dt(t,"application/json",fa,e)},pa.html=function(t,e){return Dt(t,"text/html",ha,e)},pa.xml=qt(function(t){return t.responseXML}),this.d3=pa,r=pa,i="function"==typeof r?r.call(e,n,e,t):r,!(void 0!==i&&(t.exports=i))}()},function(t,e,n){"use strict";var r=n(1),i=function(){function t(t){this.svg=t}return Object.defineProperty(t.prototype,"cx",{get:function(){return this.width/2},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cy",{get:function(){return this.height/2},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return+r(".visualizer").width()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return+r(".visualizer").height()},enumerable:!0,configurable:!0}),t}();e.BaseElement=i},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.eot"},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=p[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(c(r.parts[o],e))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(c(r.parts[o],e));p[r.id]={id:r.id,refs:1,parts:a}}}}function i(t){for(var e=[],n={},r=0;r<t.length;r++){var i=t[r],o=i[0],a=i[1],u=i[2],s=i[3],c={css:a,media:u,sourceMap:s};n[o]?n[o].parts.push(c):e.push(n[o]={id:o,parts:[c]})}return e}function o(t,e){var n=v(),r=x[x.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),x.push(e);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(e)}}function a(t){t.parentNode.removeChild(t);var e=x.indexOf(t);e>=0&&x.splice(e,1)}function u(t){var e=document.createElement("style");return e.type="text/css",o(t,e),e}function s(t){var e=document.createElement("link");return e.rel="stylesheet",o(t,e),e}function c(t,e){var n,r,i;if(e.singleton){var o=m++;n=y||(y=u(e)),r=l.bind(null,n,o,!1),i=l.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=s(e),r=h.bind(null,n),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=u(e),r=f.bind(null,n),i=function(){a(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}function l(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function f(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function h(t,e){var n=e.css,r=e.sourceMap;r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var i=new Blob([n],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(i),o&&URL.revokeObjectURL(o)}var p={},d=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},g=d(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),v=d(function(){return document.head||document.getElementsByTagName("head")[0]}),y=null,m=0,x=[];t.exports=function(t,e){if("object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");e=e||{},"undefined"==typeof e.singleton&&(e.singleton=g()),"undefined"==typeof e.insertAt&&(e.insertAt="bottom");var n=i(t);return r(n,e),function(t){for(var o=[],a=0;a<n.length;a++){var u=n[a],s=p[u.id];s.refs--,o.push(s)}if(t){var c=i(t);r(c,e)}for(var a=0;a<o.length;a++){var s=o[a];if(0===s.refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete p[s.id]}}}};var b=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(29)),r(n(28)),r(n(27))},function(t,e){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function n(t){return"string"!=typeof t&&(t=String(t)),t}function r(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return g.iterable&&(e[Symbol.iterator]=function(){return e}),e}function i(t){this.map={},t instanceof i?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function o(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function a(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function u(t){var e=new FileReader;return e.readAsArrayBuffer(t),a(e)}function s(t){var e=new FileReader;return e.readAsText(t),a(e)}function c(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(g.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(g.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(g.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(t){if(!g.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):g.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},g.blob?(this.blob=function(){var t=o(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(u)},this.text=function(){var t=o(this);if(t)return t;if(this._bodyBlob)return s(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=o(this);return t?t:Promise.resolve(this._bodyText)},g.formData&&(this.formData=function(){return this.text().then(h)}),this.json=function(){return this.text().then(JSON.parse)},this}function l(t){var e=t.toUpperCase();return v.indexOf(e)>-1?e:t}function f(t,e){e=e||{};var n=e.body;if(f.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new i(t.headers)),this.method=t.method,this.mode=t.mode,n||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new i(e.headers)),this.method=l(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function h(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function p(t){var e=new i,n=(t.getAllResponseHeaders()||"").trim().split("\n");return n.forEach(function(t){var n=t.trim().split(":"),r=n.shift().trim(),i=n.join(":").trim();e.append(r,i)}),e}function d(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof i?e.headers:new i(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var g={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};i.prototype.append=function(t,r){t=e(t),r=n(r);var i=this.map[t];i||(i=[],this.map[t]=i),i.push(r)},i.prototype["delete"]=function(t){delete this.map[e(t)]},i.prototype.get=function(t){var n=this.map[e(t)];return n?n[0]:null},i.prototype.getAll=function(t){return this.map[e(t)]||[]},i.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},i.prototype.set=function(t,r){this.map[e(t)]=[n(r)]},i.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(n){this.map[n].forEach(function(r){t.call(e,r,n,this)},this)},this)},i.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),r(t)},i.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),r(t)},i.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),r(t)},g.iterable&&(i.prototype[Symbol.iterator]=i.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];f.prototype.clone=function(){return new f(this)},c.call(f.prototype),c.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new i(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var y=[301,302,303,307,308];d.redirect=function(t,e){if(y.indexOf(e)===-1)throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=i,t.Request=f,t.Response=d,t.fetch=function(t,e){return new Promise(function(n,r){function i(){return"responseURL"in a?a.responseURL:/^X-Request-URL:/m.test(a.getAllResponseHeaders())?a.getResponseHeader("X-Request-URL"):void 0}var o;o=f.prototype.isPrototypeOf(t)&&!e?t:new f(t,e);var a=new XMLHttpRequest;a.onload=function(){var t={status:a.status,statusText:a.statusText,headers:p(a),url:i()},e="response"in a?a.response:a.responseText;n(new d(e,t))},a.onerror=function(){r(new TypeError("Network request failed"))},a.ontimeout=function(){r(new TypeError("Network request failed"))},a.open(o.method,o.url,!0),"include"===o.credentials&&(a.withCredentials=!0),"responseType"in a&&g.blob&&(a.responseType="blob"),o.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send("undefined"==typeof o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(t,e,n){e=t.exports=n(5)(),e.push([t.id,"@font-face{font-family:Sansumi-Regular;src:url("+n(6)+");src:url("+n(15)+') format("woff2"),url('+n(14)+') format("woff"),url('+n(13)+') format("truetype"),url('+n(12)+'#Sansumi-Regular) format("svg"),url('+n(6)+'?#iefix) format("embedded-opentype");font-weight:400;font-style:normal}',""])},function(t,e,n){e=t.exports=n(5)(),e.push([t.id,"/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}dfn{font-style:italic}h1{font-size:2em;margin:.75em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}figure{margin:1.5em 40px}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}input{overflow:visible}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;display:table;max-width:100%;white-space:normal;color:inherit;padding:0}optgroup{font-weight:700}textarea{overflow:auto}h1,h2,label,p{font-family:Sansumi-Regular}body,html{height:100%;flex-direction:column;min-height:100vh}label{font-size:12px}h1{font-size:18px}h2{font-size:16px}.content{width:100%;height:calc(100% - 80px);display:flex;flex:1}.node circle{stroke:#1fbad7;stroke-width:2px}.node .node-color-1{fill:#6e868d}.node .node-color-2{fill:#56717a}.node .node-color-3{fill:#3e5d67}.node .node-color-4{fill:#264954}.node .node-color-5{fill:#0e3541}.node div{display:table;height:100%;width:100%;overflow:hidden}.node p{font-size:8px;color:#f2f2f2;text-shadow:1px 1px 4px #0e3541;display:table-cell;text-align:center;vertical-align:middle}.loader circle{fill-opacity:0;stroke:#1f77b4;stroke-width:3px}.loader rect{fill:#fff}.visualizer{width:100%;flex:1}.top-bar{background-color:#09091a;height:80px;color:#f2f2f2;display:flex;align-items:center;padding-left:48px}.top-bar p{padding-left:16px;margin:0}.menu{background-color:#fff;color:#09091a;flex:0 0 16em;border-right:1px solid #09091a;padding-top:50px}.menu div,.menu h2,.menu img,.menu input{padding-left:48px}.menu h1,.menu img{display:inline}.menu h1{line-height:0}.menu hr{color:#09091a;width:80%;margin-bottom:20px}.menu input{margin:5px 0}",""])},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.svg"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.ttf"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.woff"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.woff2"},function(t,e,n){var r=n(10);"string"==typeof r&&(r=[[t.id,r,""]]),n(7)(r,{}),r.locals&&(t.exports=r.locals)},function(t,e,n){var r=n(11);"string"==typeof r&&(r=[[t.id,r,""]]),n(7)(r,{}),r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";n(17),n(16);var r=n(19),i=n(2),o=n(1);i.setLevel("debug");var a=function(){function t(){this._visualizer=new r.Visualizer(new r.MenuComponent,{})}return t.prototype.init=function(){o("body").fadeIn("fast"),this._visualizer.draw()},t}();e.App=a;var u=new a;u.init()},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(20)),r(n(24))},function(t,e,n){"use strict";var r=n(1),i="primary-selectors",o="secondary-selectors",a=n(2),u=a.getLogger("menu"),s=function(){function t(){this._selected={}}return t.prototype.setSelectors=function(t){var e=t[0].query,n=t[0].children[0].query;this.setSelectorsInternal(i,t,e),this.setSelectorsInternal(o,t[0].children,n),this._selectorsHierarchy=t},t.prototype.setOnSelectorsCallback=function(t){this._callback=t},t.prototype.setSelectorsInternal=function(t,e,n){this._selected[t]=n;var i="."+t;r(i).empty(),e.forEach(function(e,o){var a=n===e.query?"checked":"",u='\n                <input type="radio" name="'+t+'" id="'+t+"-"+o+'" value="'+e.query+'" '+a+' />\n                <label for="'+t+"-"+o+'">'+e.label+"</label><br>\n            ";r(i).append(u)}),this.addChangeListener(t)},t.prototype.addChangeListener=function(t){var e=this,n="."+t;r(n+" input").on("change",function(a){var u=r('input[name="'+t+'"]:checked',n).val();if(e._selected[t]=u,t===i){var s=e._selectorsHierarchy.find(function(t){return t.query===u});e.setSelectorsInternal(o,s.children,s.children[0].query)}e.invokeCallback()})},t.prototype.invokeCallback=function(){return this._callback?void this._callback({query:this._selected[i]},{query:this._selected[o]}):void u.error("Callback has not been set")},t}();e.MenuComponent=s},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(4)),r(n(22)),r(n(23))},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=n(3),o=n(4),a=n(2),u=a.getLogger("loader"),s=function(t){function e(e){t.call(this,e),this.r=50}return r(e,t),e.prototype.startLoader=function(){return this.g?void u.debug("Calling already started loader"):(this.g=this.svg.append("g").classed("loader",!0),this.addCircle(this.g),void this.addRect(this.g))},e.prototype.stopLoader=function(){this.g&&(this.g.remove(),this.g=null)},e.prototype.addCircle=function(t){var e=this;t.append("circle").attr("cx",function(){return e.cx}).attr("cy",function(){return e.cy}).attr("r",this.r)},e.prototype.addRect=function(t){var e=this,n=2*this.r+5,r=t.append("rect").attr("x",function(){return e.cx-10}).attr("y",function(){return e.cy-n/2}).attr("width",20).attr("height",n);this.addRotation(r)},e.prototype.addRotation=function(t){var e=this,n=function(){t.transition().attrTween("transform",function(){return i.interpolateString("rotate(0,   "+e.cx+", "+e.cy+")","rotate(360, "+e.cx+", "+e.cy+")")}).duration(2e3).each("end",n)};n()},e}(o.BaseElement);e.StandardLoader=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=n(3),o=n(4),a=n(8),u=n(2),s=u.getLogger("node-hierarchy"),c=function(){function t(){}return t}();e.NodeHierarchyElementOption=c;var l=function(t){function e(e,n){if(t.call(this,e),this._config=n,!this._config)return void s.error("No configuration is specified")}return r(e,t),Object.defineProperty(e.prototype,"colorScheme",{get:function(){return this._colorScheme||(this._colorScheme=i.scale.category20c()),this._colorScheme},set:function(t){this._colorScheme=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"minimumValue",{get:function(){return this._config.minimumValue||0},set:function(t){this._config.minimumValue=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"data",{set:function(t){this._data&&this.clean(),this._data=t,this.redraw()},enumerable:!0,configurable:!0}),e.prototype.clean=function(){this.svg.selectAll(".node").remove()},e.prototype.redraw=function(){var t=this,e=a.translateToBorderFactory(this.width,this.height),n=this._data.filter(function(e){return e.value>=t.minimumValue&&e.name}),r=i.layout.pack().sort(function(t,e){return-t.name.length-e.name.length}).size([this.width,this.height]).padding(5),o=r.nodes({children:n}).filter(function(t){return!t.children});o.forEach(function(t){return t.radius=t.r});var u=this.svg.selectAll(".node").data(o).enter().append("g").attr("class","node").attr("transform",e);this.addTitle(u),this.addCircle(u),this.addLabel(u),this.translateToCenter(u)},e.prototype.translateToCenter=function(t){t.transition().duration(2e3).ease("cubic-in-out").delay(function(t,e){return 20*e*Math.random()}).attr("transform",function(t){return"translate("+t.x+", "+t.y+")"})},e.prototype.addCircle=function(t){t.append("circle").attr("r",function(t){return t.r}).attr("class",function(t,e){return"node-color-"+(e%6+1)})},e.prototype.addTitle=function(t){t.append("title").text(function(t){return t.name+": "+t.value})},e.prototype.addLabel=function(t){t.append("foreignObject").attr("width",function(t){return 2*t.r}).attr("height",function(t){return 2*t.r}).attr("transform",function(t){return"translate("+-t.r+","+-t.r+")"}).append("xhtml:div").append("xhtml:p").html(function(t){return a.shortenToWithinRadius(t.r,t.name)})},e}(o.BaseElement);e.NodeHierarchyElement=l},function(t,e,n){"use strict";var r=n(3),i=n(1),o=n(21),a=n(25),u=function(){function t(t,e){var n=this;this._manager=t,this.config=e,this.onSelectorChanged=function(t,e){n._nodeHierarchy&&n._nodeHierarchy.clean(),n.setIsLoading(!0),n._repository.getGroups(t,e).then(function(t){n.setData(t)})},this._repository=new a.SodaFilmLocatioRepository}return Object.defineProperty(t.prototype,"targetId",{get:function(){return this.config&&this.config.targetId?this.config.targetId:".visualizer"},enumerable:!0,configurable:!0}),t.prototype.draw=function(){var t=this;this._repository.getSelectors().then(function(e){e&&0!=e.length||log.error("No selectors found"),t.onSelectorChanged({query:e[0].query},{query:e[0].children[0].query}),t._manager.setSelectors(e)});var e=r.select(this.targetId);this._svg=e.append("svg").attr("viewBox","0 0 "+i(this.targetId).width()+" "+i(this.targetId).height()),this._loader=new o.StandardLoader(this._svg),this.setIsLoading(!0);var n={minimumValue:2};this._manager.setOnSelectorsCallback(this.onSelectorChanged),this._nodeHierarchy=new o.NodeHierarchyElement(this._svg,n)},t.prototype.setData=function(t){this._nodeHierarchy||this.draw(),this.setIsLoading(!1),this._nodeHierarchy.data=t},t.prototype.setIsLoading=function(t){t?this._loader.startLoader():this._loader.stopLoader()},t}();e.Visualizer=u},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(26))},function(t,e,n){"use strict";n(9);var r=n(2),i=n(8),o=(r.getLogger("movie-location-repo"),n(1)),a=function(){function t(){this.headers=new Headers,this.url="https://data.sfgov.org/resource/wwmu-gmzc.json"}return t.prototype.getGroups=function(t,e){var n=i.groupMapperFactory(t.query,"COUNT_"+e.query);return"locations"!==t.query&&"locations"!==e.query,this.fetch(this.url+"?$group="+t.query+"&$select="+t.query+",COUNT("+e.query+")").then(n)},t.prototype.getAvancedGroups=function(t,e,n){var r="SELECT "+t.query+", count(*) \n                     GROUP BY "+e.query+", "+t.query+" |>\n                            SELECT "+t.query+", COUNT(*) AS count \n                            GROUP BY "+t.query;return this.fetch(this.url+"?$query"+r).then(n)},t.prototype.fetch=function(t){return fetch(t).then(function(t){return t.json()})},t.prototype.getSelectors=function(){var t={label:"Movie",query:"title"},e={label:"Locations",query:"locations"},n={label:"Writer",query:"writer"},r={label:"Director",query:"director"},i={label:"Production Company",query:"production_company"};return new Promise(function(a,u){var s=[o.extend(t,{children:[e]}),o.extend(e,{children:[t]}),o.extend(n,{children:[t,e,r,i]}),o.extend(r,{children:[t,e,n,i]}),o.extend(i,{children:[t,e,n,r]})];a(s)})},t}();e.SodaFilmLocatioRepository=a},function(t,e){"use strict";e.groupMapperFactory=function(t,e){return function(n){return n.map(function(n){return{name:n[t],value:+n[e]}})}}},function(t,e){"use strict";e.shortenToWithinRadius=function(t,e){var n=t/3.1,r=t/10;if(e=e.split(/\s+/g).map(function(t){if(t.length>=n){var e=2;return t.substr(0,n-e)+"-<br>"+t.substr(n-e+1,t.length)}return t}).join(" "),e&&e.length>n*r){var i=e.substr(0,n-3);return i.length<5?"":i+"&hellip;"}return e}},function(t,e){"use strict";e.translateToBorderFactory=function(t,e){return function(n){var r=t/2,i=e/2;return n.x-r,n.y-i,"translate("+n.x+","+(e+n.r)+")"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVuZGxlLm1pbi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZGEyODcwYjc3YWUxMDU4ZDlmNGEiLCJ3ZWJwYWNrOi8vLy4vfi9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2dsZXZlbC9saWIvbG9nbGV2ZWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kMy9kMy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL2VsZW1lbnRzL2Jhc2UtZWxlbWVudC50cyIsIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvZm9udHMvU2Fuc3VtaS1SZWd1bGFyLmVvdCIsIndlYnBhY2s6Ly8vLi9+L3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2luZGV4LnRzIiwid2VicGFjazovLy8uL34vd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIud29mZiIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci53b2ZmMiIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci5zY3NzP2M4N2UiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy5zY3NzPzIyMjAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tZW51L21lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdmlzdWFsaXplci9lbGVtZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL2VsZW1lbnRzL2xvYWRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL2VsZW1lbnRzL25vZGUtaGllcmFyY2h5LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Zpc3VhbGl6ZXIvdmlzdWFsaXplci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVwb3NpdG9yaWVzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9yZXBvc2l0b3JpZXMvbW92aWUtbG9jYXRpb24ucmVwb3NpdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZGF0YS1tYXBwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3RleHQtbWFuaXB1bGF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy90cmFuc2Zvcm1zLnRzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsIkRPTUV2YWwiLCJjb2RlIiwiZG9jIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpc0FycmF5TGlrZSIsIm9iaiIsImxlbmd0aCIsInR5cGUiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJlbGVtIiwiaSIsIm5vZGVUeXBlIiwiaW5kZXhPZiIsInJpc1NpbXBsZSIsInRlc3QiLCJmaWx0ZXIiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3QiLCJlYWNoIiwibWF0Y2giLCJybm90aHRtbHdoaXRlIiwiXyIsImZsYWciLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwidmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0IiwibWV0aG9kIiwicHJvbWlzZSIsImRvbmUiLCJmYWlsIiwidGhlbiIsInVuZGVmaW5lZCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeSIsIkRhdGEiLCJleHBhbmRvIiwidWlkIiwiZ2V0RGF0YSIsImRhdGEiLCJyYnJhY2UiLCJKU09OIiwicGFyc2UiLCJkYXRhQXR0ciIsImtleSIsIm5hbWUiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsInRvTG93ZXJDYXNlIiwiZ2V0QXR0cmlidXRlIiwiZSIsImRhdGFVc2VyIiwic2V0IiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiY3NzIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsImV4ZWMiLCJzdHlsZSIsInN0YXJ0IiwiZW5kIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJ0ZW1wIiwib3duZXJEb2N1bWVudCIsIm5vZGVOYW1lIiwiZGlzcGxheSIsImRlZmF1bHREaXNwbGF5TWFwIiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImluZGV4IiwiZGF0YVByaXYiLCJnZXQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJnZXRBbGwiLCJjb250ZXh0IiwidGFnIiwicmV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWVyZ2UiLCJzZXRHbG9iYWxFdmFsIiwiZWxlbXMiLCJyZWZFbGVtZW50cyIsImwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ0bXAiLCJ3cmFwIiwiY29udGFpbnMiLCJqIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJyaHRtbCIsInJ0YWdOYW1lIiwid3JhcE1hcCIsIl9kZWZhdWx0IiwiaW5uZXJIVE1MIiwiaHRtbFByZWZpbHRlciIsImxhc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwidGV4dENvbnRlbnQiLCJwdXNoIiwiY3JlYXRlVGV4dE5vZGUiLCJpbkFycmF5IiwicnNjcmlwdFR5cGUiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJvbiIsInR5cGVzIiwic2VsZWN0b3IiLCJmbiIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJndWlkIiwiYWRkIiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiY29udGVudCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjbG9uZUNvcHlFdmVudCIsInNyYyIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImV2ZW50cyIsImhhc0RhdGEiLCJhY2Nlc3MiLCJoYW5kbGUiLCJleHRlbmQiLCJmaXhJbnB1dCIsInJjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImFyZ3MiLCJjYWxsYmFjayIsImNvbmNhdCIsImZpcnN0IiwiaGFzU2NyaXB0cyIsIm5vZGUiLCJpTm9DbG9uZSIsInN1cHBvcnQiLCJjaGVja0Nsb25lIiwicmNoZWNrZWQiLCJzZWxmIiwiZXEiLCJodG1sIiwibWFwIiwiY2xvbmUiLCJfZXZhbFVybCIsInJjbGVhblNjcmlwdCIsInJlbW92ZSIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRTdHlsZXMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsInJudW1ub25weCIsInJtYXJnaW4iLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsInZlbmRvclByb3BOYW1lIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiY3NzUHJlZml4ZXMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsIk1hdGgiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJ2YWwiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0IiwiVHdlZW4iLCJlYXNpbmciLCJwcm90b3R5cGUiLCJpbml0IiwicmFmIiwidGltZXJJZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZ4IiwidGljayIsImNyZWF0ZUZ4Tm93Iiwic2V0VGltZW91dCIsImZ4Tm93Iiwibm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJ3aGljaCIsImF0dHJzIiwiaGVpZ2h0Iiwib3BhY2l0eSIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwicHJvcHMiLCJvcHRzIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJvcmlnIiwiaGlkZGVuIiwiZGF0YVNob3ciLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJyZnh0eXBlcyIsImlzRW1wdHlPYmplY3QiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY2FtZWxDYXNlIiwiaXNBcnJheSIsImNzc0hvb2tzIiwiZXhwYW5kIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwicHJveHkiLCJ0aW1lciIsInByb2dyZXNzIiwiY29tcGxldGUiLCJzdHJpcEFuZENvbGxhcHNlIiwidG9rZW5zIiwiam9pbiIsImdldENsYXNzIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInJicmFja2V0IiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwidW5zaGlmdCIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0Iiwic2VsZWN0ZWQiLCJpbnNwZWN0ZWQiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0Iiwic2Vla2luZ1RyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJhamF4RXh0ZW5kIiwidGFyZ2V0IiwiZGVlcCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiY29udGVudHMiLCJzaGlmdCIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjb252ZXJ0ZXJzIiwiYWpheENvbnZlcnQiLCJyZXNwb25zZSIsImlzU3VjY2VzcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJwcmV2IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwic3BsaXQiLCJzdGF0ZSIsImVycm9yIiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJ2ZXJzaW9uIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJsYXN0IiwibGVuIiwic29ydCIsInNwbGljZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImlzUGxhaW5PYmplY3QiLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwcm90byIsIkN0b3IiLCJnbG9iYWxFdmFsIiwic3RyaW5nIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsIkRhdGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsIlNpenpsZSIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJwcmVmZXJyZWREb2MiLCJzZXREb2N1bWVudCIsImRvY3VtZW50SXNIVE1MIiwicnF1aWNrRXhwciIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsImNvbXBpbGVyQ2FjaGUiLCJyYnVnZ3lRU0EiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsInNldEF0dHJpYnV0ZSIsInRva2VuaXplIiwidG9TZWxlY3RvciIsInJzaWJsaW5nIiwidGVzdENvbnRleHQiLCJxc2FFcnJvciIsInNlbGVjdCIsImNyZWF0ZUNhY2hlIiwiY2FjaGUiLCJrZXlzIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImEiLCJiIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWRBbmNlc3RvciIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInNldEZpbHRlcnMiLCJhZGRDb21iaW5hdG9yIiwibWF0Y2hlciIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsIm5leHQiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImZpbmQiLCJUQUciLCJkaXJydW5zVW5pcXVlIiwicG9wIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsImZpcmluZ0luZGV4Iiwib25jZSIsInN0b3BPbkZhbHNlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsInR1cGxlcyIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm1heERlcHRoIiwiVHlwZUVycm9yIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInN3YXAiLCJvbGQiLCJoaWRlIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJtYXJnaW5SaWdodCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZGlzcGxheXN3YXAiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImNzc1Byb3BzIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzRmluaXRlIiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwiZWFzZWQiLCJwb3MiLCJzdGVwIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJzdGF0dXMiLCJuYXRpdmVTdGF0dXNUZXh0IiwiaGVhZGVycyIsInN1Y2Nlc3MiLCJtb2RpZmllZCIsInN0YXR1c1RleHQiLCJ0aW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJpZk1vZGlmaWVkIiwiY2FjaGVVUkwiLCJjYWxsYmFja0NvbnRleHQiLCJzdGF0dXNDb2RlIiwiZmlyZUdsb2JhbHMiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwicmVzcG9uc2VIZWFkZXJzIiwidXJsQW5jaG9yIiwidW5jYWNoZWQiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwiYWJvcnQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJ3aW4iLCJyZWN0IiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicGFyc2VKU09OIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJkZWZpbml0aW9uIiwicmVhbE1ldGhvZCIsIm1ldGhvZE5hbWUiLCJ1bmRlZmluZWRUeXBlIiwiYmluZE1ldGhvZCIsImxvZyIsIkZ1bmN0aW9uIiwiZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcyIsImxldmVsIiwibG9nZ2VyTmFtZSIsInJlcGxhY2VMb2dnaW5nTWV0aG9kcyIsImxvZ01ldGhvZHMiLCJtZXRob2RGYWN0b3J5IiwiZGVmYXVsdE1ldGhvZEZhY3RvcnkiLCJMb2dnZXIiLCJkZWZhdWx0TGV2ZWwiLCJwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlIiwibGV2ZWxOdW0iLCJsZXZlbE5hbWUiLCJsb2NhbFN0b3JhZ2UiLCJzdG9yYWdlS2V5IiwiaWdub3JlIiwiY29va2llIiwiZ2V0UGVyc2lzdGVkTGV2ZWwiLCJzdG9yZWRMZXZlbCIsImxldmVscyIsImN1cnJlbnRMZXZlbCIsIlRSQUNFIiwiREVCVUciLCJJTkZPIiwiV0FSTiIsIkVSUk9SIiwiU0lMRU5UIiwiZ2V0TGV2ZWwiLCJzZXRMZXZlbCIsInBlcnNpc3QiLCJzZXREZWZhdWx0TGV2ZWwiLCJlbmFibGVBbGwiLCJkaXNhYmxlQWxsIiwiaW5pdGlhbExldmVsIiwiZGVmYXVsdExvZ2dlciIsIl9sb2dnZXJzQnlOYW1lIiwiZ2V0TG9nZ2VyIiwibG9nZ2VyIiwiX2xvZyIsImQzX2RvY3VtZW50RWxlbWVudCIsImQzX3dpbmRvdyIsImQzX2FzY2VuZGluZyIsIk5hTiIsImQzX251bWJlciIsIngiLCJkM19udW1lcmljIiwiZDNfYmlzZWN0b3IiLCJsbyIsImhpIiwibWlkIiwicmlnaHQiLCJkM190cmFuc3Bvc2VMZW5ndGgiLCJkIiwiZDNfcmFuZ2VfaW50ZWdlclNjYWxlIiwiayIsImQzX2NsYXNzIiwiY3RvciIsImQzX01hcCIsImNyZWF0ZSIsImQzX21hcF9lc2NhcGUiLCJkM19tYXBfcHJvdG8iLCJkM19tYXBfemVybyIsImQzX21hcF91bmVzY2FwZSIsImQzX21hcF9oYXMiLCJkM19tYXBfcmVtb3ZlIiwiZDNfbWFwX2tleXMiLCJkM19tYXBfc2l6ZSIsInNpemUiLCJkM19tYXBfZW1wdHkiLCJkM19TZXQiLCJkM19pZGVudGl0eSIsImQzX3JlYmluZCIsImQzX3ZlbmRvclN5bWJvbCIsImNoYXJBdCIsImQzX3ZlbmRvclByZWZpeGVzIiwicHJlZml4TmFtZSIsImQzX25vb3AiLCJkM19kaXNwYXRjaCIsImQzX2Rpc3BhdGNoX2V2ZW50IiwieiIsImxpc3RlbmVycyIsImxpc3RlbmVyQnlOYW1lIiwibGlzdGVuZXIiLCJkM19ldmVudFByZXZlbnREZWZhdWx0IiwiZDMiLCJkM19ldmVudFNvdXJjZSIsInNvdXJjZUV2ZW50IiwiZDNfZXZlbnREaXNwYXRjaCIsIm9mIiwidGhpeiIsImFyZ3VtZW50eiIsImUxIiwiZTAiLCJkM19zZWxlY3Rpb24iLCJkM19zdWJjbGFzcyIsImQzX3NlbGVjdGlvblByb3RvdHlwZSIsImQzX3NlbGVjdGlvbl9zZWxlY3RvciIsImQzX3NlbGVjdCIsImQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbCIsImQzX3NlbGVjdEFsbCIsImQzX3NlbGVjdGlvbl9hdHRyIiwiYXR0ck51bGwiLCJhdHRyTnVsbE5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzcGFjZSIsImxvY2FsIiwiYXR0ckNvbnN0YW50IiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsImF0dHJGdW5jdGlvbk5TIiwibnMiLCJxdWFsaWZ5IiwiZDNfY29sbGFwc2UiLCJkM19zZWxlY3Rpb25fY2xhc3NlZFJlIiwicmVxdW90ZSIsImQzX3NlbGVjdGlvbl9jbGFzc2VzIiwiZDNfc2VsZWN0aW9uX2NsYXNzZWQiLCJjbGFzc2VkQ29uc3RhbnQiLCJjbGFzc2VkRnVuY3Rpb24iLCJkM19zZWxlY3Rpb25fY2xhc3NlZE5hbWUiLCJyZSIsImNsYXNzTGlzdCIsImxhc3RJbmRleCIsImQzX3NlbGVjdGlvbl9zdHlsZSIsInByaW9yaXR5Iiwic3R5bGVOdWxsIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50Iiwic2V0UHJvcGVydHkiLCJzdHlsZUZ1bmN0aW9uIiwiZDNfc2VsZWN0aW9uX3Byb3BlcnR5IiwicHJvcGVydHlOdWxsIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJkM19zZWxlY3Rpb25fY3JlYXRvciIsIm5hbWVzcGFjZVVSSSIsImQzX25zWGh0bWwiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVOUyIsImQzX3NlbGVjdGlvblJlbW92ZSIsImQzX3NlbGVjdGlvbl9kYXRhTm9kZSIsIl9fZGF0YV9fIiwiZDNfc2VsZWN0aW9uX2ZpbHRlciIsImQzX3NlbGVjdE1hdGNoZXMiLCJkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IiLCJjb21wYXJhdG9yIiwiZDNfc2VsZWN0aW9uX2VhY2giLCJncm91cCIsImQzX3NlbGVjdGlvbl9lbnRlciIsImQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZSIsImQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZSIsImVudGVyIiwiaTAiLCJqMCIsInVwZGF0ZSIsImQzX3NlbGVjdGlvbl9vbiIsImNhcHR1cmUiLCJvblJlbW92ZSIsIm9uQWRkIiwiZDNfYXJyYXkiLCJyZW1vdmVBbGwiLCJkM19zZWxlY3Rpb25fb25MaXN0ZW5lciIsImQzX3NlbGVjdGlvbl9vbkZpbHRlcnMiLCJkM19zZWxlY3Rpb25fb25GaWx0ZXIiLCJvIiwiZDNfZXZlbnRfZHJhZ1N1cHByZXNzIiwiZDNfZXZlbnRfZHJhZ0lkIiwiZDNfZXZlbnRfZHJhZ1NlbGVjdCIsInN1cHByZXNzQ2xpY2siLCJkM19tb3VzZVBvaW50Iiwic3ZnIiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsImQzX21vdXNlX2J1ZzQ0MDgzIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJjdG0iLCJnZXRTY3JlZW5DVE0iLCJmIiwieSIsIm1hdHJpeFRyYW5zZm9ybSIsImludmVyc2UiLCJkM19iZWhhdmlvcl9kcmFnVG91Y2hJZCIsImQzX3NnbiIsImQzX2Nyb3NzMmQiLCJkM19hY29zIiwiz4AiLCJhY29zIiwiZDNfYXNpbiIsImhhbGbPgCIsImFzaW4iLCJkM19zaW5oIiwiZXhwIiwiZDNfY29zaCIsImQzX3RhbmgiLCJkM19oYXZlcnNpbiIsInNpbiIsImQzX2NvbG9yIiwiZDNfaHNsIiwiaCIsImQzX3JnYl9wYXJzZSIsImQzX3JnYl9oc2wiLCJkM19oc2xfcmdiIiwibTEiLCJtMiIsInZ2Iiwicm91bmQiLCJkM19yZ2IiLCJkM19oY2wiLCJkM19sYWIiLCJkM19sYWJfaGNsIiwiZDNfcmdiX2xhYiIsInJnYiIsInIiLCJnIiwiZDNfaGNsX2xhYiIsImQzX3JhZGlhbnMiLCJkM19sYWJfcmdiIiwiZDNfbGFiX3h5eiIsImQzX2xhYl9YIiwiZDNfbGFiX1kiLCJkM19sYWJfWiIsImQzX3h5el9yZ2IiLCJhdGFuMiIsImQzX2RlZ3JlZXMiLCJzcXJ0IiwiZDNfeHl6X2xhYiIsInBvdyIsImQzX3JnYk51bWJlciIsImQzX3JnYlN0cmluZyIsImQzX3JnYl9oZXgiLCJtaW4iLCJmb3JtYXQiLCJoc2wiLCJjb2xvciIsImQzX3JnYl9wYXJzZU51bWJlciIsImQzX3JnYl9uYW1lcyIsImQzX3JnYl94eXoiLCJkM19mdW5jdG9yIiwiZDNfeGhyVHlwZSIsImQzX3hociIsInJlc3BvbmQiLCJyZXF1ZXN0IiwiZDNfeGhySGFzUmVzcG9uc2UiLCJYRG9tYWluUmVxdWVzdCIsIm9ucHJvZ3Jlc3MiLCJmb3JFYWNoIiwiYWNjZXB0IiwiYmVmb3Jlc2VuZCIsInJlYmluZCIsImQzX3hocl9maXhDYWxsYmFjayIsImQzX3RpbWVyIiwiZDNfdGltZXJfcXVldWVUYWlsIiwiZDNfdGltZXJfcXVldWVIZWFkIiwiZDNfdGltZXJfaW50ZXJ2YWwiLCJkM190aW1lcl90aW1lb3V0IiwiZDNfdGltZXJfZnJhbWUiLCJkM190aW1lcl9zdGVwIiwiZDNfdGltZXJfbWFyayIsImQzX3RpbWVyX3N3ZWVwIiwidDAiLCJ0MSIsIkluZmluaXR5IiwiZDNfZm9ybWF0X3ByZWNpc2lvbiIsImNlaWwiLCJMTjEwIiwiZDNfZm9ybWF0UHJlZml4IiwiYWJzIiwic3ltYm9sIiwiZDNfbG9jYWxlX251bWJlckZvcm1hdCIsImxvY2FsZSIsImxvY2FsZV9kZWNpbWFsIiwiZGVjaW1hbCIsImxvY2FsZV90aG91c2FuZHMiLCJ0aG91c2FuZHMiLCJsb2NhbGVfZ3JvdXBpbmciLCJncm91cGluZyIsImxvY2FsZV9jdXJyZW5jeSIsImN1cnJlbmN5IiwiZm9ybWF0R3JvdXAiLCJzdWJzdHJpbmciLCJzcGVjaWZpZXIiLCJkM19mb3JtYXRfcmUiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwiemZpbGwiLCJjb21tYSIsInByZWNpc2lvbiIsImludGVnZXIiLCJleHBvbmVudCIsImQzX2Zvcm1hdF90eXBlcyIsImQzX2Zvcm1hdF90eXBlRGVmYXVsdCIsInpjb21tYSIsImZ1bGxTdWZmaXgiLCJuZWdhdGl2ZSIsImZvcm1hdFByZWZpeCIsImxhc3RJbmRleE9mIiwiZDNfZGF0ZV91dGMiLCJVVEMiLCJkM190aW1lX2ludGVydmFsIiwibnVtYmVyIiwiZGF0ZSIsImQwIiwiZDEiLCJkM19kYXRlIiwicmFuZ2UiLCJkdCIsInRpbWVzIiwicmFuZ2VfdXRjIiwidXRjIiwiZmxvb3IiLCJkM190aW1lX2ludGVydmFsX3V0YyIsImQzX2xvY2FsZV90aW1lRm9ybWF0IiwiZDNfdGltZV9mb3JtYXQiLCJ0ZW1wbGF0ZSIsImQzX3RpbWVfZm9ybWF0UGFkcyIsImQzX3RpbWVfZm9ybWF0cyIsIkgiLCJNIiwiUyIsIkwiLCJaIiwiZDNfdGltZV9wYXJzZSIsImxvY2FsWiIsInNldEZ1bGxZZWFyIiwiVyIsImdldERheSIsIlUiLCJzZXRIb3VycyIsImQzX3RpbWVfcGFyc2VycyIsImQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2IiwiZDNfdGltZV9kYXlBYmJyZXZSZSIsImQzX3RpbWVfZGF5QWJicmV2TG9va3VwIiwiZDNfdGltZV9wYXJzZVdlZWtkYXkiLCJkM190aW1lX2RheVJlIiwiZDNfdGltZV9kYXlMb29rdXAiLCJkM190aW1lX3BhcnNlTW9udGhBYmJyZXYiLCJkM190aW1lX21vbnRoQWJicmV2UmUiLCJkM190aW1lX21vbnRoQWJicmV2TG9va3VwIiwiZDNfdGltZV9wYXJzZU1vbnRoIiwiZDNfdGltZV9tb250aFJlIiwiZDNfdGltZV9tb250aExvb2t1cCIsImQzX3RpbWVfcGFyc2VMb2NhbGVGdWxsIiwiZDNfdGltZV9wYXJzZUxvY2FsZURhdGUiLCJkM190aW1lX3BhcnNlTG9jYWxlVGltZSIsIlgiLCJkM190aW1lX3BhcnNlQW1QbSIsImQzX3RpbWVfcGVyaW9kTG9va3VwIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX2RheXMiLCJkYXlzIiwibG9jYWxlX3Nob3J0RGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsIm11bHRpIiwiZDNfdGltZV9mb3JtYXRNdWx0aSIsImQzX3RpbWVfZm9ybWF0UmUiLCJkM190aW1lX2Zvcm1hdExvb2t1cCIsIkEiLCJnZXRNb250aCIsIkIiLCJkM190aW1lX2Zvcm1hdFBhZCIsImdldERhdGUiLCJnZXRIb3VycyIsIkkiLCJkM190aW1lIiwiZGF5T2ZZZWFyIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJzdW5kYXlPZlllYXIiLCJtb25kYXlPZlllYXIiLCJnZXRGdWxsWWVhciIsIlkiLCJkM190aW1lX3pvbmUiLCIlIiwiZDNfdGltZV9wYXJzZURheSIsImQzX3RpbWVfcGFyc2VIb3VyMjQiLCJkM190aW1lX3BhcnNlRGF5T2ZZZWFyIiwiZDNfdGltZV9wYXJzZU1pbGxpc2Vjb25kcyIsImQzX3RpbWVfcGFyc2VNb250aE51bWJlciIsImQzX3RpbWVfcGFyc2VNaW51dGVzIiwiZDNfdGltZV9wYXJzZVNlY29uZHMiLCJkM190aW1lX3BhcnNlV2Vla051bWJlclN1bmRheSIsImQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyIiwiZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJkM190aW1lX3BhcnNlWWVhciIsImQzX3RpbWVfcGFyc2VGdWxsWWVhciIsImQzX3RpbWVfcGFyc2Vab25lIiwiZDNfdGltZV9wYXJzZUxpdGVyYWxQZXJjZW50IiwibmFtZXMiLCJkM190aW1lX251bWJlclJlIiwiZDNfdGltZV9leHBhbmRZZWFyIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ6cyIsInpoIiwiem0iLCJkM190aW1lX3BlcmNlbnRSZSIsImZvcm1hdHMiLCJkM19hZGRlciIsImQzX2FkZGVyU3VtIiwiYnYiLCJhdiIsImQzX2dlb19zdHJlYW1HZW9tZXRyeSIsImdlb21ldHJ5IiwiZDNfZ2VvX3N0cmVhbUdlb21ldHJ5VHlwZSIsImQzX2dlb19zdHJlYW1MaW5lIiwiY29vcmRpbmF0ZXMiLCJjbG9zZWQiLCJjb29yZGluYXRlIiwibGluZVN0YXJ0IiwibGluZUVuZCIsImQzX2dlb19zdHJlYW1Qb2x5Z29uIiwicG9seWdvblN0YXJ0IiwicG9seWdvbkVuZCIsImQzX2dlb19hcmVhUmluZ1N0YXJ0IiwibmV4dFBvaW50IiwizrsiLCLPhiIsImTOuyIsIs67MCIsInNkzrsiLCJhZM67IiwiY29zz4YiLCJzaW7PhiIsInNpbs+GMCIsInUiLCJjb3PPhjAiLCJkM19nZW9fYXJlYVJpbmdTdW0iLCLOuzAwIiwiz4YwMCIsImQzX2dlb19hcmVhIiwiZDNfZ2VvX2NhcnRlc2lhbiIsInNwaGVyaWNhbCIsImQzX2dlb19jYXJ0ZXNpYW5Eb3QiLCJkM19nZW9fY2FydGVzaWFuQ3Jvc3MiLCJkM19nZW9fY2FydGVzaWFuQWRkIiwiZDNfZ2VvX2NhcnRlc2lhblNjYWxlIiwidmVjdG9yIiwiZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZSIsImQzX2dlb19zcGhlcmljYWwiLCJjYXJ0ZXNpYW4iLCJkM19nZW9fc3BoZXJpY2FsRXF1YWwiLCLOtSIsImQzX2dlb19jZW50cm9pZFBvaW50IiwiZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVoiLCJkM19nZW9fY2VudHJvaWRXMCIsImQzX2dlb19jZW50cm9pZFgwIiwiZDNfZ2VvX2NlbnRyb2lkWTAiLCJkM19nZW9fY2VudHJvaWRaMCIsImQzX2dlb19jZW50cm9pZExpbmVTdGFydCIsInkwIiwiejAiLCJ4MCIsImQzX2dlb19jZW50cm9pZFcxIiwiZDNfZ2VvX2NlbnRyb2lkWDEiLCJkM19nZW9fY2VudHJvaWRZMSIsImQzX2dlb19jZW50cm9pZFoxIiwiZDNfZ2VvX2NlbnRyb2lkIiwiZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCIsImQzX2dlb19jZW50cm9pZFJpbmdTdGFydCIsImN4IiwiY3kiLCJjeiIsImQzX2dlb19jZW50cm9pZFgyIiwiZDNfZ2VvX2NlbnRyb2lkWTIiLCJkM19nZW9fY2VudHJvaWRaMiIsImQzX2dlb19jb21wb3NlIiwiY29tcG9zZSIsImQzX3RydWUiLCJkM19nZW9fY2xpcFBvbHlnb24iLCJzZWdtZW50cyIsImNsaXBTdGFydEluc2lkZSIsImludGVycG9sYXRlIiwic3ViamVjdCIsImNsaXAiLCJzZWdtZW50IiwicDAiLCJwMSIsImQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbiIsImQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhciIsImVudHJ5IiwicG9pbnRzIiwiaXNTdWJqZWN0IiwiYXJyYXkiLCJvdGhlciIsImQzX2dlb19jbGlwIiwicG9pbnRWaXNpYmxlIiwiY2xpcExpbmUiLCJjbGlwU3RhcnQiLCJyb3RhdGUiLCJwb2ludExpbmUiLCJsaW5lIiwicG9pbnRSaW5nIiwicmluZyIsInJpbmdMaXN0ZW5lciIsInJpbmdTdGFydCIsInJpbmdFbmQiLCJjbGVhbiIsInJpbmdTZWdtZW50cyIsImJ1ZmZlciIsInBvbHlnb24iLCJwb2x5Z29uU3RhcnRlZCIsImQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEiLCJyb3RhdGVkQ2xpcFN0YXJ0IiwiZDNfZ2VvX3BvaW50SW5Qb2x5Z29uIiwiZDNfZ2VvX2NsaXBTb3J0Iiwic3BoZXJlIiwiZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lciIsImxpbmVzIiwicmVqb2luIiwiZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5MaW5lIiwiz4YwIiwic867MCIsIs67MSIsIs+GMSIsInPOuzEiLCJkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVyc2VjdCIsImNvc8+GMSIsInNpbs67MF/OuzEiLCJhdGFuIiwiZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSIsImZyb20iLCJkaXJlY3Rpb24iLCJtZXJpZGlhbiIsInBhcmFsbGVsIiwibWVyaWRpYW5Ob3JtYWwiLCJwb2xhckFuZ2xlIiwid2luZGluZyIsInBvaW50MCIsImFudGltZXJpZGlhbiIsIs+EIiwiYXJjIiwiaW50ZXJzZWN0aW9uIiwiz4ZhcmMiLCJkM19nZW9fY2xpcENpcmNsZSIsInJhZGl1cyIsImNyIiwiYzAiLCJ2MCIsInYwMCIsInBvaW50MiIsInBvaW50MSIsInNtYWxsUmFkaXVzIiwiaW50ZXJzZWN0Iiwibm90SGVtaXNwaGVyZSIsInR3byIsInBhIiwicGIiLCJuMSIsIm4yIiwibjJuMiIsIm4xbjIiLCJkZXRlcm1pbmFudCIsImMxIiwiYzIiLCJuMXhuMiIsInV1IiwidDIiLCJxIiwizrTOuyIsInBvbGFyIiwicTEiLCJkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUiLCJkM19nZW9tX2NsaXBMaW5lIiwieDEiLCJ5MSIsImF4IiwiYXkiLCJieCIsImJ5IiwiZHgiLCJkeSIsImQzX2dlb19jbGlwRXh0ZW50IiwiY29ybmVyIiwiY29tcGFyZVBvaW50cyIsImNhIiwiY2IiLCJpbnNpZGVQb2x5Z29uIiwid24iLCJhMSIsImxpbmVQb2ludCIsInZfIiwieF8iLCJ5XyIsInhfXyIsInlfXyIsInZfXyIsImJ1ZmZlckxpc3RlbmVyIiwiZDNfZ2VvX2NsaXBFeHRlbnRNQVgiLCJsaXN0ZW5lcl8iLCJpbnNpZGUiLCJkM19nZW9fY29uaWMiLCJwcm9qZWN0QXQiLCJkM19nZW9fcHJvamVjdGlvbk11dGF0b3IiLCJwYXJhbGxlbHMiLCJkM19nZW9fY29uaWNFcXVhbEFyZWEiLCLPgSIsIkMiLCLPgTAiLCLPgTBfeSIsImQzX2dlb19wYXRoQXJlYVJpbmdTdGFydCIsImQzX2dlb19wYXRoQXJlYVBvbHlnb24iLCJ4MDAiLCJ5MDAiLCJkM19nZW9fcGF0aEFyZWEiLCJkM19nZW9fcGF0aEJvdW5kc1BvaW50IiwiZDNfZ2VvX3BhdGhCb3VuZHNYMCIsImQzX2dlb19wYXRoQm91bmRzWDEiLCJkM19nZW9fcGF0aEJvdW5kc1kwIiwiZDNfZ2VvX3BhdGhCb3VuZHNZMSIsImQzX2dlb19wYXRoQnVmZmVyIiwicG9pbnRDaXJjbGUiLCJwb2ludExpbmVTdGFydCIsInN0cmVhbSIsImxpbmVFbmRQb2x5Z29uIiwiZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUiLCJwb2ludFJhZGl1cyIsImQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCIsImQzX2dlb19wYXRoQ2VudHJvaWRMaW5lU3RhcnQiLCJkM19nZW9fcGF0aENlbnRyb2lkIiwiZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVFbmQiLCJkM19nZW9fcGF0aENlbnRyb2lkUmluZ1N0YXJ0IiwiZDNfZ2VvX3BhdGhDb250ZXh0IiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2VQYXRoIiwiZDNfZ2VvX3Jlc2FtcGxlIiwicHJvamVjdCIsInJlc2FtcGxlIiwicmVzYW1wbGVSZWN1cnNpdmUiLCJyZXNhbXBsZU5vbmUiLCJkM19nZW9fdHJhbnNmb3JtUG9pbnQiLCJyZXNhbXBsZUxpbmVUbyIsImEwIiwiYjAiLCJyaW5nUG9pbnQiLCJhMDAiLCJiMDAiLCJjMDAiLCJiMSIsImQyIiwizrQyIiwiz4YyIiwizrsyIiwieDIiLCJ5MiIsImR4MiIsImR5MiIsImR6IiwiY29zTWluRGlzdGFuY2UiLCJkM19nZW9fcGF0aFByb2plY3RTdHJlYW0iLCJkM19nZW9fcHJvamVjdGlvblJhZGlhbnMiLCJkM19nZW9fdHJhbnNmb3JtIiwiZDNfZ2VvX3Byb2plY3Rpb24iLCJwcm9qZWN0aW9uIiwicHJvamVjdFJvdGF0ZSIsIs60eCIsIs60eSIsImQzX2dlb19yb3RhdGlvbiIsIs60z4YiLCLOtM6zIiwiY2VudGVyIiwiaW52YWxpZGF0ZSIsInZhbGlkIiwicHJvamVjdFJlc2FtcGxlIiwicHJlY2xpcCIsImQzX2dlb19jbGlwQW50aW1lcmlkaWFuIiwicG9zdGNsaXAiLCJjbGlwQW5nbGUiLCJjbGlwRXh0ZW50Iiwib3V0cHV0IiwidHJhbnNsYXRlIiwiZDNfZ2VvX2VxdWlyZWN0YW5ndWxhciIsImQzX2dlb19pZGVudGl0eVJvdGF0aW9uIiwiZDNfZ2VvX3JvdGF0aW9uzrsiLCJkM19nZW9fcm90YXRpb27Phs6zIiwiZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67Iiwicm90YXRpb24iLCJjb3POtM+GIiwic2luzrTPhiIsImNvc860zrMiLCJzaW7OtM6zIiwic3IiLCJkM19nZW9fY2lyY2xlQW5nbGUiLCJhbmdsZSIsImQzX2dlb19ncmF0aWN1bGVYIiwiZDNfZ2VvX2dyYXRpY3VsZVkiLCJkM19zb3VyY2UiLCJkM190YXJnZXQiLCJkM19nZW9faW50ZXJwb2xhdGUiLCJjeTAiLCJzeTAiLCJjeTEiLCJzeTEiLCJreDAiLCJreTAiLCJreDEiLCJreTEiLCJkaXN0YW5jZSIsImQzX2dlb19sZW5ndGhMaW5lU3RhcnQiLCJjb3POlM67IiwiZDNfZ2VvX2xlbmd0aFN1bSIsImQzX2dlb19sZW5ndGgiLCJkM19nZW9fYXppbXV0aGFsIiwiYXppbXV0aGFsIiwiY29zzrsiLCJzaW5jIiwiY29zYyIsImQzX2dlb19jb25pY0NvbmZvcm1hbCIsIkYiLCJ0YW4iLCJkM19nZW9fbWVyY2F0b3IiLCJkM19nZW9fY29uaWNFcXVpZGlzdGFudCIsIkciLCJkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uIiwiY2xpcEF1dG8iLCJkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yIiwiZDNfZ2VvbV9wb2ludFgiLCJkM19nZW9tX3BvaW50WSIsImQzX2dlb21faHVsbFVwcGVyIiwiaHVsbCIsImhzIiwiZDNfZ2VvbV9odWxsT3JkZXIiLCJkM19nZW9tX3BvbHlnb25JbnNpZGUiLCJkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QiLCJ4MyIsIngyMSIsIng0MyIsInkzIiwieTIxIiwieTQzIiwidWEiLCJkM19nZW9tX3BvbHlnb25DbG9zZWQiLCJkM19nZW9tX3Zvcm9ub2lCZWFjaCIsImQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZSIsImVkZ2UiLCJzaXRlIiwiY2lyY2xlIiwiZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2giLCJiZWFjaCIsImQzX2dlb21fdm9yb25vaUJlYWNoUG9vbCIsImQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoIiwiZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlIiwiZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyIsImQzX2dlb21fdm9yb25vaVJlbW92ZUJlYWNoIiwidmVydGV4IiwicHJldmlvdXMiLCJQIiwiTiIsImRpc2FwcGVhcmluZyIsImxBcmMiLCJyQXJjIiwiaUFyYyIsIm5BcmNzIiwiZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZCIsImQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UiLCJkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUiLCJkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaCIsImR4bCIsImR4ciIsImRpcmVjdHJpeCIsImQzX2dlb21fdm9yb25vaUxlZnRCcmVha1BvaW50IiwiZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50IiwiUiIsIm5ld0FyYyIsImxTaXRlIiwiclNpdGUiLCJoYiIsImhjIiwicmZvY3giLCJyZm9jeSIsInBieTIiLCJsZm9jeCIsImxmb2N5IiwicGxieTIiLCJobCIsImFieTIiLCJkM19nZW9tX3Zvcm9ub2lDZWxsIiwiZWRnZXMiLCJkM19nZW9tX3Zvcm9ub2lDbG9zZUNlbGxzIiwiZXh0ZW50IiwiY2VsbCIsImlIYWxmRWRnZSIsImhhbGZFZGdlcyIsIm5IYWxmRWRnZXMiLCJjZWxscyIsImQzX2dlb21fdm9yb25vaUNlbGxzIiwiaUNlbGwiLCJwcmVwYXJlIiwiZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UiLCJkM19nZW9tX3Zvcm9ub2lDcmVhdGVCb3JkZXJFZGdlIiwiZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlciIsImQzX2dlb21fdm9yb25vaUNpcmNsZSIsImNTaXRlIiwizrUyIiwiaGEiLCJkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sIiwiZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcyIsImQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlIiwiZDNfZ2VvbV92b3Jvbm9pQ2xpcEVkZ2VzIiwiZDNfZ2VvbV92b3Jvbm9pRWRnZXMiLCJkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZSIsInZiIiwiZm0iLCJmYiIsInZhIiwibHgiLCJseSIsInJ4IiwicnkiLCJmeSIsImQzX2dlb21fdm9yb25vaUVkZ2UiLCJkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUiLCJkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQiLCJ0cmVlIiwiZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCIsImQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QiLCJkM19nZW9tX3Zvcm9ub2kiLCJzaXRlcyIsImJib3giLCJkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlciIsImRpYWdyYW0iLCJkM19nZW9tX3Zvcm9ub2lUcmlhbmdsZUFyZWEiLCJkM19nZW9tX3F1YWR0cmVlQ29tcGF0WCIsImQzX2dlb21fcXVhZHRyZWVDb21wYXRZIiwiZDNfZ2VvbV9xdWFkdHJlZU5vZGUiLCJsZWFmIiwiZDNfZ2VvbV9xdWFkdHJlZVZpc2l0Iiwic3giLCJzeSIsImQzX2dlb21fcXVhZHRyZWVGaW5kIiwiY2xvc2VzdFBvaW50IiwibWluRGlzdGFuY2UyIiwiZGlzdGFuY2UyIiwieG0iLCJ5bSIsImJlbG93IiwiZDNfaW50ZXJwb2xhdGVSZ2IiLCJhciIsImFnIiwiYWIiLCJiciIsImJnIiwiYmIiLCJkM19pbnRlcnBvbGF0ZU9iamVjdCIsImQzX2ludGVycG9sYXRlIiwiZDNfaW50ZXJwb2xhdGVOdW1iZXIiLCJkM19pbnRlcnBvbGF0ZVN0cmluZyIsImFtIiwiYm0iLCJicyIsImJpIiwiZDNfaW50ZXJwb2xhdGVfbnVtYmVyQSIsImQzX2ludGVycG9sYXRlX251bWJlckIiLCJpbnRlcnBvbGF0b3JzIiwiZDNfaW50ZXJwb2xhdGVBcnJheSIsIm5hIiwibmIiLCJuMCIsImQzX2Vhc2VfY2xhbXAiLCJkM19lYXNlX3JldmVyc2UiLCJkM19lYXNlX3JlZmxlY3QiLCJkM19lYXNlX3F1YWQiLCJkM19lYXNlX2N1YmljIiwiZDNfZWFzZV9jdWJpY0luT3V0IiwidDMiLCJkM19lYXNlX3BvbHkiLCJkM19lYXNlX3NpbiIsImQzX2Vhc2VfZXhwIiwiZDNfZWFzZV9jaXJjbGUiLCJkM19lYXNlX2VsYXN0aWMiLCJkM19lYXNlX2JhY2siLCJkM19lYXNlX2JvdW5jZSIsImQzX2ludGVycG9sYXRlSGNsIiwiaGNsIiwiYWgiLCJhYyIsImFsIiwiYmgiLCJiYyIsImJsIiwiZDNfaW50ZXJwb2xhdGVIc2wiLCJhcyIsImQzX2ludGVycG9sYXRlTGFiIiwibGFiIiwiYWEiLCJiYSIsImQzX2ludGVycG9sYXRlUm91bmQiLCJkM190cmFuc2Zvcm0iLCJyMCIsInIxIiwia3giLCJkM190cmFuc2Zvcm1Ob3JtYWxpemUiLCJreiIsImQzX3RyYW5zZm9ybURvdCIsImt5IiwiZDNfdHJhbnNmb3JtQ29tYmluZSIsInNrZXciLCJkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcCIsImQzX2ludGVycG9sYXRlVHJhbnNsYXRlIiwidGEiLCJ0YiIsImQzX2ludGVycG9sYXRlUm90YXRlIiwicmEiLCJyYiIsImQzX2ludGVycG9sYXRlU2tldyIsIndhIiwid2IiLCJkM19pbnRlcnBvbGF0ZVNjYWxlIiwia2EiLCJrYiIsImQzX2ludGVycG9sYXRlVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiZDNfdW5pbnRlcnBvbGF0ZU51bWJlciIsImQzX3VuaW50ZXJwb2xhdGVDbGFtcCIsImQzX2xheW91dF9idW5kbGVQYXRoIiwibGluayIsImxjYSIsImQzX2xheW91dF9idW5kbGVMZWFzdENvbW1vbkFuY2VzdG9yIiwiZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyIsImFuY2VzdG9ycyIsImFOb2RlcyIsImJOb2RlcyIsImFOb2RlIiwiYk5vZGUiLCJzaGFyZWROb2RlIiwiZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0IiwiZml4ZWQiLCJkM19sYXlvdXRfZm9yY2VEcmFnZW5kIiwiZDNfbGF5b3V0X2ZvcmNlTW91c2VvdmVyIiwicHgiLCJweSIsImQzX2xheW91dF9mb3JjZU1vdXNlb3V0IiwiZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZSIsInF1YWQiLCJhbHBoYSIsImNoYXJnZXMiLCJjaGFyZ2UiLCJwb2ludENoYXJnZSIsImQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQiLCJoaWVyYXJjaHkiLCJsaW5rcyIsImQzX2xheW91dF9oaWVyYXJjaHlMaW5rcyIsImQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZSIsImQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyIiwibm9kZXMyIiwiZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuIiwiZDNfbGF5b3V0X2hpZXJhcmNoeVZhbHVlIiwiZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQiLCJjaGlsZCIsImQzX2xheW91dF9zdGFja1giLCJkM19sYXlvdXRfc3RhY2tZIiwiZDNfbGF5b3V0X3N0YWNrT3V0IiwiZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0IiwiZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVybyIsImQzX2xheW91dF9zdGFja01heEluZGV4IiwiZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtIiwicmVkdWNlIiwiZDNfbGF5b3V0X3N0YWNrU3VtIiwiZDNfbGF5b3V0X2hpc3RvZ3JhbUJpblN0dXJnZXMiLCJkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQiLCJMTjIiLCJkM19sYXlvdXRfaGlzdG9ncmFtUmFuZ2UiLCJkM19sYXlvdXRfcGFja1NvcnQiLCJkM19sYXlvdXRfcGFja0luc2VydCIsIl9wYWNrX25leHQiLCJfcGFja19wcmV2IiwiZDNfbGF5b3V0X3BhY2tTcGxpY2UiLCJkM19sYXlvdXRfcGFja0ludGVyc2VjdHMiLCJkciIsImQzX2xheW91dF9wYWNrU2libGluZ3MiLCJib3VuZCIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJkM19sYXlvdXRfcGFja0xpbmsiLCJkM19sYXlvdXRfcGFja1BsYWNlIiwiaXNlY3QiLCJzMSIsInMyIiwiZDNfbGF5b3V0X3BhY2tVbmxpbmsiLCJkM19sYXlvdXRfcGFja1RyYW5zZm9ybSIsImRiIiwiZGEiLCJkYyIsImQzX2xheW91dF90cmVlU2VwYXJhdGlvbiIsImQzX2xheW91dF90cmVlTGVmdCIsImQzX2xheW91dF90cmVlUmlnaHQiLCJkM19sYXlvdXRfdHJlZU1vdmUiLCJ3bSIsIndwIiwiY2hhbmdlIiwiZDNfbGF5b3V0X3RyZWVTaGlmdCIsImQzX2xheW91dF90cmVlQW5jZXN0b3IiLCJ2aW0iLCJhbmNlc3RvciIsImQzX2xheW91dF9jbHVzdGVyWSIsImQzX2xheW91dF9jbHVzdGVyWCIsImQzX2xheW91dF9jbHVzdGVyTGVmdCIsImQzX2xheW91dF9jbHVzdGVyUmlnaHQiLCJkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwiLCJkM19sYXlvdXRfdHJlZW1hcFBhZCIsImQzX3NjYWxlRXh0ZW50IiwiZG9tYWluIiwiZDNfc2NhbGVSYW5nZSIsInJhbmdlRXh0ZW50IiwiZDNfc2NhbGVfYmlsaW5lYXIiLCJ1bmludGVycG9sYXRlIiwiZDNfc2NhbGVfbmljZSIsIm5pY2UiLCJpMSIsImQzX3NjYWxlX25pY2VTdGVwIiwiZDNfc2NhbGVfbmljZUlkZW50aXR5IiwiZDNfc2NhbGVfcG9seWxpbmVhciIsImJpc2VjdCIsImQzX3NjYWxlX2xpbmVhciIsImNsYW1wIiwicmVzY2FsZSIsIk51bWJlciIsInJhbmdlUm91bmQiLCJ0aWNrcyIsImQzX3NjYWxlX2xpbmVhclRpY2tzIiwidGlja0Zvcm1hdCIsImQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQiLCJkM19zY2FsZV9saW5lYXJOaWNlIiwiZDNfc2NhbGVfbGluZWFyUmViaW5kIiwiZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlIiwic3BhbiIsImQzX3NjYWxlX2xpbmVhclByZWNpc2lvbiIsImQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbiIsImQzX3NjYWxlX2xpbmVhckZvcm1hdFNpZ25pZmljYW50IiwiZDNfc2NhbGVfbG9nIiwicG9zaXRpdmUiLCJuaWNlZCIsImQzX3NjYWxlX2xvZ05pY2VOZWdhdGl2ZSIsImQzX3NjYWxlX2xvZ0Zvcm1hdCIsImQzX3NjYWxlX3BvdyIsInBvd3AiLCJkM19zY2FsZV9wb3dQb3ciLCJwb3diIiwiZDNfc2NhbGVfb3JkaW5hbCIsInJhbmdlciIsInN0ZXBzIiwicmFuZ2VCYW5kIiwieGkiLCJyYW5nZVBvaW50cyIsInJhbmdlUm91bmRQb2ludHMiLCJyYW5nZUJhbmRzIiwib3V0ZXJQYWRkaW5nIiwicmFuZ2VSb3VuZEJhbmRzIiwiZDNfc2NhbGVfcXVhbnRpbGUiLCJ0aHJlc2hvbGRzIiwicXVhbnRpbGUiLCJxdWFudGlsZXMiLCJpbnZlcnRFeHRlbnQiLCJkM19zY2FsZV9xdWFudGl6ZSIsImQzX3NjYWxlX3RocmVzaG9sZCIsImQzX3NjYWxlX2lkZW50aXR5IiwiaWRlbnRpdHkiLCJkM196ZXJvIiwiZDNfc3ZnX2FyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJkM19zdmdfYXJjT3V0ZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImQzX3N2Z19hcmNTdGFydEFuZ2xlIiwic3RhcnRBbmdsZSIsImQzX3N2Z19hcmNFbmRBbmdsZSIsImVuZEFuZ2xlIiwiZDNfc3ZnX2FyY1BhZEFuZ2xlIiwicGFkQW5nbGUiLCJkM19zdmdfYXJjU3dlZXAiLCJkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMiLCJyYyIsImN3IiwieDAxIiwieTAxIiwib3giLCJveSIsIkQiLCJjeDAiLCJjeDEiLCJkeDAiLCJkeTAiLCJkeDEiLCJkeTEiLCJkM19zdmdfbGluZSIsInRlbnNpb24iLCJkZWZpbmVkIiwiZDNfc3ZnX2xpbmVMaW5lYXIiLCJpbnRlcnBvbGF0ZUtleSIsImQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycyIsImQzX3N2Z19saW5lTGluZWFyQ2xvc2VkIiwiZDNfc3ZnX2xpbmVTdGVwIiwicGF0aCIsImQzX3N2Z19saW5lU3RlcEJlZm9yZSIsImQzX3N2Z19saW5lU3RlcEFmdGVyIiwiZDNfc3ZnX2xpbmVDYXJkaW5hbE9wZW4iLCJkM19zdmdfbGluZUhlcm1pdGUiLCJkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMiLCJkM19zdmdfbGluZUNhcmRpbmFsQ2xvc2VkIiwiZDNfc3ZnX2xpbmVDYXJkaW5hbCIsInRhbmdlbnRzIiwicGkiLCJscCIsInAyIiwiZDNfc3ZnX2xpbmVCYXNpcyIsImQzX3N2Z19saW5lRG90NCIsImQzX3N2Z19saW5lQmFzaXNCZXppZXIzIiwiZDNfc3ZnX2xpbmVCYXNpc0JlemllciIsImQzX3N2Z19saW5lQmFzaXNPcGVuIiwiZDNfc3ZnX2xpbmVCYXNpc0Nsb3NlZCIsImQzX3N2Z19saW5lQnVuZGxlIiwiZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEiLCJkM19zdmdfbGluZUJhc2lzQmV6aWVyMiIsImQzX3N2Z19saW5lU2xvcGUiLCJkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzIiwiZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzIiwiZDNfc3ZnX2xpbmVNb25vdG9uZSIsImQzX3N2Z19saW5lUmFkaWFsIiwiZDNfc3ZnX2FyZWEiLCJhcmVhIiwicG9pbnRzMSIsImludGVycG9sYXRlUmV2ZXJzZSIsInBvaW50czAiLCJmeDAiLCJmeTAiLCJmeDEiLCJmeTEiLCJkM19zdmdfY2hvcmRSYWRpdXMiLCJkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uIiwiZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbiIsImQzX3N2Z19zeW1ib2xTaXplIiwiZDNfc3ZnX3N5bWJvbFR5cGUiLCJkM19zdmdfc3ltYm9sQ2lyY2xlIiwiZDNfc2VsZWN0aW9uX2ludGVycnVwdE5TIiwiYWN0aXZlSWQiLCJpbnRlcnJ1cHQiLCJkM190cmFuc2l0aW9uIiwiZDNfdHJhbnNpdGlvblByb3RvdHlwZSIsImQzX3RyYW5zaXRpb25fdHdlZW4iLCJkM190cmFuc2l0aW9uX3RleHQiLCJkM190cmFuc2l0aW9uTmFtZXNwYWNlIiwiZDNfdHJhbnNpdGlvbk5vZGUiLCJpbmhlcml0Iiwic2NoZWR1bGUiLCJlbGFwc2VkIiwidHJhbnNpdGlvbiIsImNhbmNlbElkIiwiY2FuY2VsIiwiZWFzZSIsImQzX3N2Z19heGlzWCIsImQzX3N2Z19heGlzWSIsImQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlIiwidG9JU09TdHJpbmciLCJkM190aW1lX3NjYWxlIiwibWV0aG9kcyIsInRpY2tNZXRob2QiLCJkM190aW1lX3NjYWxlU3RlcHMiLCJ5ZWFyIiwiZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcyIsImQzX3RpbWVfc2NhbGVEYXRlIiwic2tpcHBlZCIsImQzX2pzb24iLCJkM19odG1sIiwiZDNfZG9jdW1lbnQiLCJjcmVhdGVSYW5nZSIsInNlbGVjdE5vZGUiLCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiLCJkM19hcnJheVNsaWNlIiwiZDNfZWxlbWVudF9wcm90b3R5cGUiLCJFbGVtZW50IiwiZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGUiLCJkM19lbGVtZW50X3NldEF0dHJpYnV0ZU5TIiwiZDNfc3R5bGVfcHJvdG90eXBlIiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsImQzX3N0eWxlX3NldFByb3BlcnR5IiwiYXNjZW5kaW5nIiwiZGVzY2VuZGluZyIsInN1bSIsIm1lYW4iLCJtZWRpYW4iLCJudW1iZXJzIiwidmFyaWFuY2UiLCJkZXZpYXRpb24iLCJkM19iaXNlY3QiLCJiaXNlY3RMZWZ0IiwiYmlzZWN0UmlnaHQiLCJiaXNlY3RvciIsInNodWZmbGUiLCJwZXJtdXRlIiwiaW5kZXhlcyIsInBlcm11dGVzIiwicGFpcnMiLCJ0cmFuc3Bvc2UiLCJtYXRyaXgiLCJyb3ciLCJ6aXAiLCJlbnRyaWVzIiwiYXJyYXlzIiwibWVyZ2VkIiwibmVzdCIsIm1hcFR5cGUiLCJyb2xsdXAiLCJzb3J0VmFsdWVzIiwia2V5VmFsdWUiLCJ2YWx1ZXNCeUtleSIsInNvcnRLZXkiLCJzb3J0S2V5cyIsImtleU1hcCIsImJlaGF2aW9yIiwiZDNfcmVxdW90ZV9yZSIsIl9fcHJvdG9fXyIsInByb3BlcnR5IiwicXVlcnlTZWxlY3RvciIsImQzX3NlbGVjdE1hdGNoZXIiLCJzdWJncm91cCIsInN1Ym5vZGUiLCJzdWJncm91cHMiLCJzZWxlY3RBbGwiLCJkM19uc1ByZWZpeCIsInhodG1sIiwieGxpbmsiLCJ4bWxucyIsImdldEF0dHJpYnV0ZU5TIiwiY2xhc3NlZCIsImdyb3VwRGF0YSIsIm5vZGVEYXRhIiwidXBkYXRlTm9kZXMiLCJlbnRlck5vZGVzIiwiZXhpdE5vZGVzIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJleGl0IiwiZGF0dW0iLCJ1cGdyb3VwIiwibW91c2UiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b3VjaCIsImRyYWciLCJtb3VzZWRvd24iLCJ0b3VjaHN0YXJ0IiwiZHJhZ3N0YXJ0IiwibW92ZSIsIm1vdmVkIiwicG9zaXRpb24xIiwiZHJhZ0lkIiwicG9zaXRpb24wIiwiZHJhZ2dlZCIsImRyYWdPZmZzZXQiLCJlbmRlZCIsImRyYWdTdWJqZWN0IiwiZHJhZ05hbWUiLCJkcmFnUmVzdG9yZSIsImNvcnJlc3BvbmRpbmdFbGVtZW50Iiwib3JpZ2luIiwiz4TOtSIsIlNRUlQyIiwiz4EyIiwiz4E0IiwiaW50ZXJwb2xhdGVab29tIiwidXgwIiwidXkwIiwidzAiLCJ1eDEiLCJ1eTEiLCJ3MSIsImNvc2hyMCIsIm1vdXNlZG93bmVkIiwiZDNfYmVoYXZpb3Jfem9vbVdoZWVsIiwibW91c2V3aGVlbGVkIiwiZGJsY2xpY2tlZCIsInRvdWNoc3RhcnRlZCIsInNjYWxlVG8iLCJzY2FsZUV4dGVudCIsInRyYW5zbGF0ZVRvIiwiem9vbVRvIiwiX19jaGFydF9fIiwiY2VudGVyMCIsInpvb21zdGFydGVkIiwiem9vbWluZyIsInpvb21lZCIsInpvb21lbmRlZCIsImxvY2F0aW9uMCIsIm1vdXNlbW92ZSIsIm1vdXNldXAiLCJkM19zZWxlY3Rpb25faW50ZXJydXB0IiwicmVsb2NhdGUiLCJzY2FsZTAiLCJsb2NhdGlvbnMwIiwic3RhcnRlZCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwiY2hhbmdlZCIsInRvdWNodGltZSIsImRpc3RhbmNlMCIsImwwIiwibDEiLCJkaXN0YW5jZTEiLCJzY2FsZTEiLCJ6b29tTmFtZSIsIm1vdXNld2hlZWxUaW1lciIsInRyYW5zbGF0ZTAiLCJkM19iZWhhdmlvcl96b29tRGVsdGEiLCJkM19iZWhhdmlvcl96b29tSW5maW5pdHkiLCJkZWx0YVkiLCJkZWx0YU1vZGUiLCJ3aGVlbERlbHRhIiwidmlldzEiLCJkM190cmFuc2l0aW9uSW5oZXJpdElkIiwiZDNfaHNsUHJvdG90eXBlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJkM19oY2xQcm90b3R5cGUiLCJkM19sYWJfSyIsImQzX2xhYlByb3RvdHlwZSIsImQzX3JnYlByb3RvdHlwZSIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiZnVuY3RvciIsImRzdiIsImRlbGltaXRlciIsInR5cGVkUmVzcG9uc2UiLCJmb3JtYXRSb3ciLCJmb3JtYXRWYWx1ZSIsInJlRm9ybWF0IiwiZGVsaW1pdGVyQ29kZSIsInBhcnNlUm93cyIsInN0cmluZ2lmeSIsIkVPRiIsImVvbCIsIkVPTCIsInJvd3MiLCJmb3JtYXRSb3dzIiwiZmllbGRTZXQiLCJmaWVsZHMiLCJmaWVsZCIsImNzdiIsInRzdiIsImZsdXNoIiwiZDNfZm9ybWF0UHJlZml4ZXMiLCJ0b1ByZWNpc2lvbiIsInRvRXhwb25lbnRpYWwiLCJ0b0ZpeGVkIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0RheSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VGltZSIsInZhbHVlT2YiLCJzZXREYXRlIiwiZDNfdGltZV9wcm90b3R5cGUiLCJzZXRVVENEYXRlIiwic2V0RGF5Iiwic2V0VVRDRGF5Iiwic2V0VVRDRnVsbFllYXIiLCJzZXRVVENIb3VycyIsInNldE1pbGxpc2Vjb25kcyIsInNldFVUQ01pbGxpc2Vjb25kcyIsInNldE1pbnV0ZXMiLCJzZXRVVENNaW51dGVzIiwic2V0TW9udGgiLCJzZXRVVENNb250aCIsInNldFNlY29uZHMiLCJzZXRVVENTZWNvbmRzIiwic2V0VGltZSIsImRheSIsInllYXJzIiwid2VlayIsInN1bmRheSIsIndlZWtzIiwid2Vla09mWWVhciIsIi0iLCJudW1iZXJGb3JtYXQiLCJ0aW1lRm9ybWF0IiwiZDNfbG9jYWxlX2VuVVMiLCJnZW8iLCJkM19hZGRlclRlbXAiLCJkM19nZW9fc3RyZWFtT2JqZWN0VHlwZSIsIkZlYXR1cmUiLCJmZWF0dXJlIiwiRmVhdHVyZUNvbGxlY3Rpb24iLCJmZWF0dXJlcyIsIlNwaGVyZSIsIlBvaW50IiwiTXVsdGlQb2ludCIsIkxpbmVTdHJpbmciLCJNdWx0aUxpbmVTdHJpbmciLCJQb2x5Z29uIiwiTXVsdGlQb2x5Z29uIiwiR2VvbWV0cnlDb2xsZWN0aW9uIiwiZ2VvbWV0cmllcyIsImQzX2dlb19hcmVhU3VtIiwiYm91bmRzIiwicmFuZ2VzIiwibm9ybWFsIiwiZXF1YXRvcmlhbCIsImluZmxlY3Rpb24iLCLOu18iLCLOu2kiLCLPhmkiLCJkzrtTdW0iLCLOu19fIiwiz4ZfXyIsImNvbXBhcmVSYW5nZXMiLCJ3aXRoaW5SYW5nZSIsImJlc3QiLCJjZW50cm9pZCIsImNvbmljRXF1YWxBcmVhIiwiYWxiZXJzIiwiYWxiZXJzVXNhIiwibG93ZXI0OFBvaW50IiwiYWxhc2thUG9pbnQiLCJoYXdhaWlQb2ludCIsImxvd2VyNDgiLCJhbGFza2EiLCJoYXdhaWkiLCJwb2ludFN0cmVhbSIsImxvd2VyNDhTdHJlYW0iLCJhbGFza2FTdHJlYW0iLCJoYXdhaWlTdHJlYW0iLCJkM19nZW9fcGF0aEFyZWFTdW0iLCJkM19nZW9fcGF0aEJvdW5kcyIsImNvbnRleHRTdHJlYW0iLCJjYWNoZVN0cmVhbSIsInByb2plY3RTdHJlYW0iLCJwcm9qZWN0aW9uTXV0YXRvciIsImVxdWlyZWN0YW5ndWxhciIsIs6UzrsiLCJzaW7OlM67Iiwic2luz4YxIiwiZ3JhdGljdWxlIiwiWDAiLCJEWCIsIlgxIiwiWTAiLCJEWSIsIlkxIiwib3V0bGluZSIsIm1ham9yRXh0ZW50IiwibWlub3JFeHRlbnQiLCJtYWpvclN0ZXAiLCJtaW5vclN0ZXAiLCJncmVhdEFyYyIsInNvdXJjZV8iLCJ0YXJnZXRfIiwiZDNfZ2VvX2F6aW11dGhhbEVxdWFsQXJlYSIsImNvc867Y29zz4YiLCJhemltdXRoYWxFcXVhbEFyZWEiLCJkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQiLCJhemltdXRoYWxFcXVpZGlzdGFudCIsImNvbmljQ29uZm9ybWFsIiwiY29uaWNFcXVpZGlzdGFudCIsImQzX2dlb19nbm9tb25pYyIsImdub21vbmljIiwibWVyY2F0b3IiLCJkM19nZW9fb3J0aG9ncmFwaGljIiwib3J0aG9ncmFwaGljIiwiZDNfZ2VvX3N0ZXJlb2dyYXBoaWMiLCJzdGVyZW9ncmFwaGljIiwidHJhbnN2ZXJzZU1lcmNhdG9yIiwiZ2VvbSIsInZlcnRpY2VzIiwiZmxpcHBlZFBvaW50cyIsInVwcGVyIiwibG93ZXIiLCJza2lwTGVmdCIsInNraXBSaWdodCIsImQzX2dlb21fcG9seWdvblByb3RvdHlwZSIsImdyYW5kcGEiLCJ1bmNsZSIsInZvcm9ub2kiLCJwb2x5Z29ucyIsImQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQiLCJ0cmlhbmdsZXMiLCJzMCIsImRlbGF1bmF5IiwicXVhZHRyZWUiLCJueCIsIm55IiwiaW5zZXJ0Q2hpbGQiLCJuUG9pbnQiLCJ4cyIsInlzIiwieDFfIiwieTFfIiwieDJfIiwieTJfIiwiY29tcGF0IiwidmlzaXQiLCJpbnRlcnBvbGF0ZVJnYiIsImludGVycG9sYXRlT2JqZWN0IiwiaW50ZXJwb2xhdGVOdW1iZXIiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImludGVycG9sYXRlQXJyYXkiLCJkM19lYXNlX2RlZmF1bHQiLCJkM19lYXNlIiwicG9seSIsImN1YmljIiwiZWxhc3RpYyIsImJhY2siLCJib3VuY2UiLCJkM19lYXNlX21vZGUiLCJpbiIsIm91dCIsImluLW91dCIsIm91dC1pbiIsImludGVycG9sYXRlSGNsIiwiaW50ZXJwb2xhdGVIc2wiLCJpbnRlcnBvbGF0ZUxhYiIsImludGVycG9sYXRlUm91bmQiLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJkM190cmFuc2Zvcm1JZGVudGl0eSIsImludGVycG9sYXRlVHJhbnNmb3JtIiwibGF5b3V0IiwiYnVuZGxlIiwicGF0aHMiLCJjaG9yZCIsInJlbGF5b3V0IiwiZ3JvdXBTdW1zIiwiZ3JvdXBJbmRleCIsInN1Ymdyb3VwSW5kZXgiLCJjaG9yZHMiLCJzb3J0R3JvdXBzIiwic29ydFN1Ymdyb3VwcyIsImRpIiwiZGoiLCJzdWJpbmRleCIsInNvcnRDaG9yZHMiLCJyZXNvcnQiLCJmb3JjZSIsInJlcHVsc2UiLCJkdyIsImRuIiwidGhldGEyIiwiY2hhcmdlRGlzdGFuY2UyIiwiZHJhZ21vdmUiLCJyZXN1bWUiLCJkaXN0YW5jZXMiLCJzdHJlbmd0aHMiLCJmcmljdGlvbiIsImxpbmtEaXN0YW5jZSIsImQzX2xheW91dF9mb3JjZUxpbmtEaXN0YW5jZSIsImxpbmtTdHJlbmd0aCIsImQzX2xheW91dF9mb3JjZUxpbmtTdHJlbmd0aCIsImQzX2xheW91dF9mb3JjZUNoYXJnZURpc3RhbmNlMiIsImdyYXZpdHkiLCJ3ZWlnaHQiLCJjaGFyZ2VEaXN0YW5jZSIsInRoZXRhIiwiZGltZW5zaW9uIiwibmVpZ2hib3JzIiwiY2FuZGlkYXRlcyIsImNoaWxkcyIsInJldmFsdWUiLCJwYXJ0aXRpb24iLCJwaWUiLCJhcmNzIiwiZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlIiwic2VyaWVzIiwib3JkZXJzIiwib2Zmc2V0cyIsImQzX2xheW91dF9zdGFja09yZGVycyIsImQzX2xheW91dF9zdGFja09mZnNldHMiLCJpbnNpZGUtb3V0Iiwic3VtcyIsImJvdHRvbSIsInRvcHMiLCJib3R0b21zIiwiZGVmYXVsdCIsInNpbGhvdWV0dGUiLCJ3aWdnbGUiLCJzMyIsIm8wIiwiemVybyIsImhpc3RvZ3JhbSIsImJpbiIsImJpbnMiLCJ2YWx1ZXIiLCJiaW5uZXIiLCJmcmVxdWVuY3kiLCJwYWNrIiwicm9vdDAiLCJyb290MSIsIndyYXBUcmVlIiwiZmlyc3RXYWxrIiwic2Vjb25kV2FsayIsIm5vZGVTaXplIiwic2l6ZU5vZGUiLCJ0eCIsInNlcGFyYXRpb24iLCJub2RlMSIsIm1pZHBvaW50IiwiYXBwb3J0aW9uIiwidmlwIiwidm9wIiwidm9tIiwic2lwIiwic29wIiwic2ltIiwic29tIiwiY2x1c3RlciIsInByZXZpb3VzTm9kZSIsInRyZWVtYXAiLCJzcXVhcmlmeSIsInNjb3JlIiwicGFkIiwibW9kZSIsIndvcnN0Iiwic3RpY2tpZnkiLCJybWF4Iiwicm1pbiIsInJhdGlvIiwic3RpY2tpZXMiLCJzdGlja3kiLCJwYWRGdW5jdGlvbiIsInBhZENvbnN0YW50IiwiwrUiLCLPgyIsImxvZ05vcm1hbCIsImJhdGVzIiwiaXJ3aW5IYWxsIiwib3JkaW5hbCIsImNhdGVnb3J5MTAiLCJkM19jYXRlZ29yeTEwIiwiY2F0ZWdvcnkyMCIsImQzX2NhdGVnb3J5MjAiLCJjYXRlZ29yeTIwYiIsImQzX2NhdGVnb3J5MjBiIiwiY2F0ZWdvcnkyMGMiLCJkM19jYXRlZ29yeTIwYyIsInF1YW50aXplIiwidGhyZXNob2xkIiwiY2lyY2xlU2VnbWVudCIsInJwIiwicGFkUmFkaXVzIiwiZDNfc3ZnX2FyY0F1dG8iLCJoMSIsImgwIiwiY29ybmVyUmFkaXVzIiwicmMxIiwicmMwIiwib2MiLCJrYyIsImxjIiwidDMwIiwidDEyIiwidDAzIiwidDIxIiwibGluZWFyLWNsb3NlZCIsInN0ZXAtYmVmb3JlIiwic3RlcC1hZnRlciIsImJhc2lzIiwiYmFzaXMtb3BlbiIsImJhc2lzLWNsb3NlZCIsImNhcmRpbmFsIiwiY2FyZGluYWwtb3BlbiIsImNhcmRpbmFsLWNsb3NlZCIsIm1vbm90b25lIiwicmFkaWFsIiwiZXF1YWxzIiwiY3VydmUiLCJkaWFnb25hbCIsInAzIiwicHJvamVjdGlvbl8iLCJkM19zdmdfc3ltYm9scyIsImNyb3NzIiwiZGlhbW9uZCIsImQzX3N2Z19zeW1ib2xUYW4zMCIsInNxdWFyZSIsInRyaWFuZ2xlLWRvd24iLCJkM19zdmdfc3ltYm9sU3FydDMiLCJ0cmlhbmdsZS11cCIsInN5bWJvbFR5cGVzIiwiZDNfdHJhbnNpdGlvbklkIiwiZDNfdHJhbnNpdGlvbkluaGVyaXQiLCJzdWJub2RlcyIsIm5hbWVOUyIsImF0dHJUd2VlbiIsImF0dHJUd2Vlbk5TIiwic3R5bGVTdHJpbmciLCJzdHlsZVR3ZWVuIiwiaW5oZXJpdElkIiwiaWQwIiwiaWQxIiwiYXhpcyIsInRpY2tUcmFuc2Zvcm0iLCJ0aWNrVmFsdWVzIiwidGlja0FyZ3VtZW50c18iLCJ0aWNrRm9ybWF0XyIsInRpY2tFbnRlciIsInRpY2tFeGl0IiwidGlja1VwZGF0ZSIsInRpY2tTcGFjaW5nIiwiaW5uZXJUaWNrU2l6ZSIsInRpY2tQYWRkaW5nIiwicGF0aFVwZGF0ZSIsImxpbmVFbnRlciIsImxpbmVVcGRhdGUiLCJ0ZXh0RW50ZXIiLCJ0ZXh0VXBkYXRlIiwib3JpZW50Iiwib3V0ZXJUaWNrU2l6ZSIsImQzX3N2Z19heGlzRGVmYXVsdE9yaWVudCIsImQzX3N2Z19heGlzT3JpZW50cyIsInRpY2tTaXplIiwidGlja1N1YmRpdmlkZSIsImJydXNoIiwiYnJ1c2hzdGFydCIsImJhY2tncm91bmQiLCJyZXNpemUiLCJyZXNpemVzIiwiZDNfc3ZnX2JydXNoQ3Vyc29yIiwiZ1VwZGF0ZSIsImJhY2tncm91bmRVcGRhdGUiLCJyZWRyYXdYIiwicmVkcmF3WSIsInJlZHJhdyIsInhFeHRlbnQiLCJ5RXh0ZW50Iiwia2V5ZG93biIsImRyYWdnaW5nIiwia2V5dXAiLCJicnVzaG1vdmUiLCJyZXNpemluZ1giLCJtb3ZlMSIsInJlc2l6aW5nWSIsImV2ZW50XyIsInlDbGFtcCIsInhDbGFtcCIsInlFeHRlbnREb21haW4iLCJ4RXh0ZW50RG9tYWluIiwiYnJ1c2hlbmQiLCJldmVudFRhcmdldCIsInJlc2l6aW5nIiwiZXkiLCJkM19zdmdfYnJ1c2hSZXNpemVzIiwiZXh0ZW50MSIsImV4dGVudDAiLCJ5aSIsImNsZWFyIiwibnciLCJuZSIsInNlIiwic3ciLCJkM190aW1lX2Zvcm1hdFV0YyIsImQzX3RpbWVfZm9ybWF0SXNvIiwiaXNvIiwic2Vjb25kcyIsIm1pbnV0ZSIsIm1pbnV0ZXMiLCJob3VyIiwidGltZXpvbmUiLCJob3VycyIsIm1vbnRoIiwiZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcyIsImQzX3RpbWVfc2NhbGVMb2NhbEZvcm1hdCIsImQzX3RpbWVfc2NhbGVVdGNNZXRob2RzIiwiZDNfdGltZV9zY2FsZVV0Y0Zvcm1hdCIsInJlc3BvbnNlWE1MIiwiQmFzZUVsZW1lbnQiLCJpdGVtIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwic3R5bGVzSW5Eb20iLCJyZWZzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJtZWRpYSIsInNvdXJjZU1hcCIsInBhcnQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJnZXRIZWFkRWxlbWVudCIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwic3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUxpbmtFbGVtZW50IiwibGlua0VsZW1lbnQiLCJyZWwiLCJzaW5nbGV0b24iLCJzdHlsZUluZGV4Iiwic2luZ2xldG9uQ291bnRlciIsInNpbmdsZXRvbkVsZW1lbnQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImJ0b2EiLCJ1cGRhdGVMaW5rIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsInN0eWxlU2hlZXQiLCJyZXBsYWNlVGV4dCIsImNzc05vZGUiLCJ1bmVzY2FwZSIsImJsb2IiLCJvbGRTcmMiLCJtZW1vaXplIiwibWVtbyIsImlzT2xkSUUiLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiX19leHBvcnQiLCJub3JtYWxpemVOYW1lIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwiaXRlcmFibGUiLCJIZWFkZXJzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJQcm9taXNlIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEJsb2JBc1RleHQiLCJyZWFkQXNUZXh0IiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsImlzUHJvdG90eXBlT2YiLCJfYm9keUJsb2IiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsInNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJyZWplY3RlZCIsImRlY29kZSIsIm5vcm1hbGl6ZU1ldGhvZCIsInVwY2FzZWQiLCJSZXF1ZXN0IiwiY3JlZGVudGlhbHMiLCJyZWZlcnJlciIsImZvcm0iLCJieXRlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJvayIsImZldGNoIiwidGhpc0FyZyIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJyZXNwb25zZVVSTCIsIm9udGltZW91dCIsIndpdGhDcmVkZW50aWFscyIsInBvbHlmaWxsIiwibG9jYWxzIiwiY29tcG9uZW50c18xIiwiQXBwIiwiX3Zpc3VhbGl6ZXIiLCJWaXN1YWxpemVyIiwiTWVudUNvbXBvbmVudCIsImRyYXciLCJhcHAiLCJwcmltYXJ5U2VsZWN0b3IiLCJzZWNvbmRhcnlTZWxlY3RvciIsImxvZ01hbmFnZXIiLCJfc2VsZWN0ZWQiLCJzZXRTZWxlY3RvcnMiLCJzZWxlY3RlZFByaW1hcnkiLCJxdWVyeSIsInNlbGVjdGVkU2Vjb25kYXJ5Iiwic2V0U2VsZWN0b3JzSW50ZXJuYWwiLCJfc2VsZWN0b3JzSGllcmFyY2h5Iiwic2V0T25TZWxlY3RvcnNDYWxsYmFjayIsIl9jYWxsYmFjayIsImNhdGVnb3J5IiwiY2F0ZWdvcnlDbGFzcyIsInNlbGVjdGVkU3RyaW5nIiwibGFiZWwiLCJhZGRDaGFuZ2VMaXN0ZW5lciIsIl90aGlzIiwic2VsZWN0ZWRWYWx1ZSIsImludm9rZUNhbGxiYWNrIiwiX19leHRlbmRzIiwiX18iLCJiYXNlX2VsZW1lbnRfMSIsIlN0YW5kYXJkTG9hZGVyIiwiX3N1cGVyIiwic3RhcnRMb2FkZXIiLCJkZWJ1ZyIsImFkZENpcmNsZSIsImFkZFJlY3QiLCJzdG9wTG9hZGVyIiwiYWRkUm90YXRpb24iLCJ0cmFuc2lzdGlvbiIsInV0aWxzXzEiLCJOb2RlSGllcmFyY2h5RWxlbWVudE9wdGlvbiIsIk5vZGVIaWVyYXJjaHlFbGVtZW50IiwiX2NvbmZpZyIsIl9jb2xvclNjaGVtZSIsIm1pbmltdW1WYWx1ZSIsInRyYW5zbGF0ZU5vZGVUb0JvcmRlciIsInRyYW5zbGF0ZVRvQm9yZGVyRmFjdG9yeSIsImxheW91dE5vZGVzIiwibm9kZXNTZWxlY3Rpb24iLCJhZGRUaXRsZSIsImFkZExhYmVsIiwidHJhbnNsYXRlVG9DZW50ZXIiLCJzaG9ydGVuVG9XaXRoaW5SYWRpdXMiLCJlbGVtZW50c18xIiwicmVwb3NpdG9yaWVzXzEiLCJfbWFuYWdlciIsImNvbmZpZyIsIm9uU2VsZWN0b3JDaGFuZ2VkIiwicHJpbWFyeSIsInNlY29uZGFyeSIsIl9ub2RlSGllcmFyY2h5Iiwic2V0SXNMb2FkaW5nIiwiX3JlcG9zaXRvcnkiLCJnZXRHcm91cHMiLCJzZXREYXRhIiwiU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeSIsInRhcmdldElkIiwiZ2V0U2VsZWN0b3JzIiwiX3N2ZyIsIl9sb2FkZXIiLCJpc0xvYWRpbmciLCJtYXBwZXIiLCJncm91cE1hcHBlckZhY3RvcnkiLCJnZXRBdmFuY2VkR3JvdXBzIiwidGl0bGVTZWxlY3RvciIsImxvY2F0aW9uc1NlbGVjdG9yIiwid3JpdGVyU2VsZWN0b3IiLCJkaXJlY3RvclNlbGVjdG9yIiwicHJvZHVjdGlvbkNvbXBhbnkiLCJuYW1lTGFiZWwiLCJ2YWx1ZUxhYmVsIiwic3Vic3RyIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBRSxXQUNBRSxHQUFBSixFQUNBSyxVQVVBLE9BTkFQLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLFVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBcUNBLE9BVEFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsR0FHQVYsRUFBQSxLRE1NLFNBQVNJLEVBQVFELEVBQVNILEdBRS9CQSxFQUFvQixHQUNwQkksRUFBT0QsUUFBVUgsRUFBb0IsS0FLaEMsU0FBU0ksRUFBUUQsRUFBU0gsR0VwRGhDLEdBQUFXLEdBQUFDOzs7Ozs7Ozs7Ozs7O0NBYUEsU0FBQUMsRUFBQUMsR0FFQSxZQUVBLGlCQUFBVixJQUFBLGdCQUFBQSxHQUFBRCxRQVNBQyxFQUFBRCxRQUFBVSxFQUFBRSxTQUNBRCxFQUFBRCxNQUNBLFNBQUFHLEdBQ0EsSUFBQUEsRUFBQUQsU0FDQSxTQUFBRSxPQUFBLDJDQUVB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RyxPQUFRdkIsRUFBS3dzRyxTNUJ5L3BCdkIsU0FBUy91RyxFQUFRRCxHQUV0QixZNkI1L3BCWUEsR0FBQW90RyxzQkFBd0IsU0FBQzkvQyxFQUFnQi9yRCxHQUM5QyxHQUFJMk0sR0FBV28vQyxFQUFTLElBQ3BCM0IsRUFBUTJCLEVBQVMsRUFZckIsSUFYQS9yRCxFQUFPQSxFQUFLeVcsTUFBTSxRQUFRekssSUFBSSxTQUFDc0osR0FDM0IsR0FBR0EsRUFBRS9VLFFBQVVvTSxFQUFVLENBQ3JCLEdBQU1rdEIsR0FBUyxDQUNmLE9BQU92a0IsR0FBRW80RixPQUFPLEVBQUcvZ0csRUFBV2t0QixHQUN0QixRQUNBdmtCLEVBQUVvNEYsT0FBTy9nRyxFQUFXa3RCLEVBQVMsRUFBR3ZrQixFQUFFL1UsUUFFOUMsTUFBTytVLEtBQ1I1QixLQUFLLEtBR0wxVCxHQUFRQSxFQUFLTyxPQUFTb00sRUFBV3k5QyxFQUFPLENBQ3ZDLEdBQUlzakQsR0FBVTF0RyxFQUFLMHRHLE9BQU8sRUFBRy9nRyxFQUFXLEVBQ3hDLE9BQUcrZ0csR0FBT250RyxPQUFTLEVBQ1IsR0FFSm10RyxFQUFTLFdBRXBCLE1BQU8xdEcsSzdCd2dxQlQsU0FBU3RCLEVBQVFELEdBRXRCLFk4Qm5pcUJZQSxHQUFBOHNHLHlCQUEyQixTQUFDOStGLEVBQWVtRCxHQUduRCxNQUFPLFVBQUNvOUIsR0FFSixHQUFJb2EsR0FBSzM2QyxFQUFRLEVBQ2I0NkMsRUFBS3ozQyxFQUFTLENBUW5CLE9BTndCbzlCLEdBQUVSLEVBQUk0YSxFQUNOcGEsRUFBRWlJLEVBQUlvUyxFQUt2QixhQUFlcmEsRUFBRVIsRUFBSSxLQUFPNThCLEVBQVNvOUIsRUFBRW1LLEdBQU0iLCJmaWxlIjoiLi9idW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyohXG5cdCAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMS4xXG5cdCAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cblx0ICpcblx0ICogSW5jbHVkZXMgU2l6emxlLmpzXG5cdCAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuXHQgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2Vcblx0ICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2Vcblx0ICpcblx0ICogRGF0ZTogMjAxNi0wOS0yMlQyMjozMFpcblx0ICovXG5cdCggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblx0XG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRcdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFxuXHRcdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHRcdH1cblx0XG5cdC8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG5cdH0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXHRcblx0Ly8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG5cdC8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuXHQvLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuXHQvLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgYXJyID0gW107XG5cdFxuXHR2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cdFxuXHR2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cdFxuXHR2YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cdFxuXHR2YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblx0XG5cdHZhciBwdXNoID0gYXJyLnB1c2g7XG5cdFxuXHR2YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXHRcblx0dmFyIGNsYXNzMnR5cGUgPSB7fTtcblx0XG5cdHZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cdFxuXHR2YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblx0XG5cdHZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXHRcblx0dmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblx0XG5cdHZhciBzdXBwb3J0ID0ge307XG5cdFxuXHRcblx0XG5cdFx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jICkge1xuXHRcdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXHRcblx0XHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXHRcblx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0XHR9XG5cdC8qIGdsb2JhbCBTeW1ib2wgKi9cblx0Ly8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcblx0Ly8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblx0XG5cdFxuXHRcblx0dmFyXG5cdFx0dmVyc2lvbiA9IFwiMy4xLjFcIixcblx0XG5cdFx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0XHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFxuXHRcdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0XHR9LFxuXHRcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0XHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0XHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblx0XG5cdFx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdFx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0XHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cdFxuXHRcdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0XHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHRcdH07XG5cdFxuXHRqUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXHRcblx0XHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdFx0anF1ZXJ5OiB2ZXJzaW9uLFxuXHRcblx0XHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXHRcblx0XHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0XHRsZW5ndGg6IDAsXG5cdFxuXHRcdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9LFxuXHRcblx0XHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdFx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0XHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0XHR9LFxuXHRcblx0XHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdFx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdFx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFxuXHRcdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblx0XG5cdFx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcblx0XHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0sXG5cdFxuXHRcdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdFx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHRcdH0sXG5cdFxuXHRcdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHRcdH0gKSApO1xuXHRcdH0sXG5cdFxuXHRcdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdFx0fSxcblx0XG5cdFx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0XHR9LFxuXHRcblx0XHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHRcdH0sXG5cdFxuXHRcdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0XHR9LFxuXHRcblx0XHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdFx0fSxcblx0XG5cdFx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHRcdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRcdHB1c2g6IHB1c2gsXG5cdFx0c29ydDogYXJyLnNvcnQsXG5cdFx0c3BsaWNlOiBhcnIuc3BsaWNlXG5cdH07XG5cdFxuXHRqUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdFx0aSA9IDEsXG5cdFx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdFx0ZGVlcCA9IGZhbHNlO1xuXHRcblx0XHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdFx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFxuXHRcdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0XHRpKys7XG5cdFx0fVxuXHRcblx0XHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0XHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHRcdHRhcmdldCA9IHt9O1xuXHRcdH1cblx0XG5cdFx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdFx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdFx0aS0tO1xuXHRcdH1cblx0XG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFxuXHRcdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cdFxuXHRcdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXHRcblx0XHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcblx0XHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXHRcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXHRcblx0XHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9O1xuXHRcblx0alF1ZXJ5LmV4dGVuZCgge1xuXHRcblx0XHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0XHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXHRcblx0XHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRcdGlzUmVhZHk6IHRydWUsXG5cdFxuXHRcdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0XHR9LFxuXHRcblx0XHRub29wOiBmdW5jdGlvbigpIHt9LFxuXHRcblx0XHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHRcdH0sXG5cdFxuXHRcdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cdFxuXHRcdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0XHR9LFxuXHRcblx0XHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFxuXHRcdFx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0XHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHRcdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdFx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0XHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cdFxuXHRcdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHRcdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xuXHRcdH0sXG5cdFxuXHRcdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cdFxuXHRcdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcblx0XHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXHRcblx0XHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdFx0fSxcblx0XG5cdFx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0XHR2YXIgbmFtZTtcblx0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblx0XG5cdFx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdFx0dHlwZW9mIG9iajtcblx0XHR9LFxuXHRcblx0XHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRcdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdFx0RE9NRXZhbCggY29kZSApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRcdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHRcdH0sXG5cdFxuXHRcdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdH0sXG5cdFxuXHRcdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cdFxuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fSxcblx0XG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdFx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0XHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblx0XG5cdFx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSxcblx0XG5cdFx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0XHR9LFxuXHRcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0XHRqID0gMCxcblx0XHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblx0XG5cdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0XHR9XG5cdFxuXHRcdFx0Zmlyc3QubGVuZ3RoID0gaTtcblx0XG5cdFx0XHRyZXR1cm4gZmlyc3Q7XG5cdFx0fSxcblx0XG5cdFx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cdFxuXHRcdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIG1hdGNoZXM7XG5cdFx0fSxcblx0XG5cdFx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdFx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdHJldCA9IFtdO1xuXHRcblx0XHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXHRcblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblx0XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHRcdH0sXG5cdFxuXHRcdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRcdGd1aWQ6IDEsXG5cdFxuXHRcdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHRcdC8vIGFyZ3VtZW50cy5cblx0XHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cdFxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0XHRmbiA9IHRtcDtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHRcdH07XG5cdFxuXHRcdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblx0XG5cdFx0XHRyZXR1cm4gcHJveHk7XG5cdFx0fSxcblx0XG5cdFx0bm93OiBEYXRlLm5vdyxcblx0XG5cdFx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdFx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0XHRzdXBwb3J0OiBzdXBwb3J0XG5cdH0gKTtcblx0XG5cdGlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xuXHR9XG5cdFxuXHQvLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcblx0alF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0gKTtcblx0XG5cdGZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0XHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdFx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdFx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHRcdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0XG5cdFx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xuXHR9XG5cdHZhciBTaXp6bGUgPVxuXHQvKiFcblx0ICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG5cdCAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuXHQgKlxuXHQgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuXHQgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2Vcblx0ICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuXHQgKlxuXHQgKiBEYXRlOiAyMDE2LTA4LTA4XG5cdCAqL1xuXHQoZnVuY3Rpb24oIHdpbmRvdyApIHtcblx0XG5cdHZhciBpLFxuXHRcdHN1cHBvcnQsXG5cdFx0RXhwcixcblx0XHRnZXRUZXh0LFxuXHRcdGlzWE1MLFxuXHRcdHRva2VuaXplLFxuXHRcdGNvbXBpbGUsXG5cdFx0c2VsZWN0LFxuXHRcdG91dGVybW9zdENvbnRleHQsXG5cdFx0c29ydElucHV0LFxuXHRcdGhhc0R1cGxpY2F0ZSxcblx0XG5cdFx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRcdHNldERvY3VtZW50LFxuXHRcdGRvY3VtZW50LFxuXHRcdGRvY0VsZW0sXG5cdFx0ZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmJ1Z2d5UVNBLFxuXHRcdHJidWdneU1hdGNoZXMsXG5cdFx0bWF0Y2hlcyxcblx0XHRjb250YWlucyxcblx0XG5cdFx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRcdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdFx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRcdGRpcnJ1bnMgPSAwLFxuXHRcdGRvbmUgPSAwLFxuXHRcdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRcdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRcdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRcdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSxcblx0XG5cdFx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRcdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdFx0YXJyID0gW10sXG5cdFx0cG9wID0gYXJyLnBvcCxcblx0XHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRcdHB1c2ggPSBhcnIucHVzaCxcblx0XHRzbGljZSA9IGFyci5zbGljZSxcblx0XHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0XHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdFx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiAtMTtcblx0XHR9LFxuXHRcblx0XHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblx0XG5cdFx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXHRcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHRcdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cdFxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRcdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cdFxuXHRcdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRcdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipcXFxcXVwiLFxuXHRcblx0XHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XHRcIi4qXCIgK1xuXHRcdFx0XCIpXFxcXCl8KVwiLFxuXHRcblx0XHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdFx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdFx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXHRcblx0XHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0XHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0XG5cdFx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblx0XG5cdFx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0XHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cdFxuXHRcdG1hdGNoRXhwciA9IHtcblx0XHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0XHR9LFxuXHRcblx0XHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0XHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXHRcblx0XHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3Lyxcblx0XG5cdFx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdFx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXHRcblx0XHRyc2libGluZyA9IC9bK35dLyxcblx0XG5cdFx0Ly8gQ1NTIGVzY2FwZXNcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdFx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0XHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0XHRlc2NhcGVkIDpcblx0XHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0XHR9LFxuXHRcblx0XHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRcdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0XHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cdFxuXHRcdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdFx0fSxcblx0XG5cdFx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHRcdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdFx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdFx0Ly8gZXJyb3IgaW4gSUVcblx0XHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRzZXREb2N1bWVudCgpO1xuXHRcdH0sXG5cdFxuXHRcdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHRcdH0sXG5cdFx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHRcdCk7XG5cdFxuXHQvLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxuXHR0cnkge1xuXHRcdHB1c2guYXBwbHkoXG5cdFx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHRcdCk7XG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdFx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXHRcblx0XHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdFx0fSA6XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHRcdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXHRcblx0XHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXHRcblx0XHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblx0XG5cdFx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblx0XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9XG5cdFxuXHRcdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0XHRpZiAoICFzZWVkICkge1xuXHRcblx0XHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0XHR9XG5cdFx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblx0XG5cdFx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXHRcblx0XHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXHRcblx0XHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFxuXHRcdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFxuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cdFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFxuXHRcdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XG5cdFx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyBBbGwgb3RoZXJzXG5cdFx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcblx0ICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuXHQgKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcblx0ICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHRcdHZhciBrZXlzID0gW107XG5cdFxuXHRcdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuXHQgKi9cblx0ZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0XHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gZm47XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG5cdCAqL1xuXHRmdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblx0XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0XHR9XG5cdFx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdFx0ZWwgPSBudWxsO1xuXHRcdH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcblx0ICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcblx0ICovXG5cdGZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdFx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRcdGkgPSBhcnIubGVuZ3RoO1xuXHRcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHRcdH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3Ncblx0ICogQHBhcmFtIHtFbGVtZW50fSBhXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gYlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcblx0ICovXG5cdGZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0XHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cdFxuXHRcdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRcdGlmICggZGlmZiApIHtcblx0XHRcdHJldHVybiBkaWZmO1xuXHRcdH1cblx0XG5cdFx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0XHRpZiAoIGN1ciApIHtcblx0XHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGEgPyAxIDogLTE7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG5cdCAqL1xuXHRmdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHRcdH07XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0XHR9O1xuXHR9XG5cdFxuXHQvKipcblx0ICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcblx0ICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXHRcblx0XHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFxuXHRcdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cdFxuXHRcdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblx0XG5cdFx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFxuXHRcdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXHR9XG5cdFxuXHQvKipcblx0ICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdHZhciBqLFxuXHRcdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cdFxuXHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuXHQgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuXHQgKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcblx0ICovXG5cdGZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRcdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG5cdH1cblx0XG5cdC8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5cdHN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXHRcblx0LyoqXG5cdCAqIERldGVjdHMgWE1MIG5vZGVzXG5cdCAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcblx0ICovXG5cdGlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHRcdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHRcdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRcdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG5cdH07XG5cdFxuXHQvKipcblx0ICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG5cdCAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcblx0ICovXG5cdHNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdFx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblx0XG5cdFx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0XHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50O1xuXHRcdH1cblx0XG5cdFx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0XHRkb2N1bWVudCA9IGRvYztcblx0XHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRcdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXHRcblx0XHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdFx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRcdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXHRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvKiBBdHRyaWJ1dGVzXG5cdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRcblx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdFx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdFx0fSk7XG5cdFxuXHRcdC8qIGdldEVsZW1lbnQocylCeSpcblx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdFxuXHRcdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0XHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdFx0fSk7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblx0XG5cdFx0Ly8gU3VwcG9ydDogSUU8MTBcblx0XHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0XHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0XHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0XHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0XHR9KTtcblx0XG5cdFx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdFx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XG5cdFx0Ly8gVGFnXG5cdFx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblx0XG5cdFx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSA6XG5cdFxuXHRcdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblx0XG5cdFx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdH07XG5cdFxuXHRcdC8vIENsYXNzXG5cdFx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XG5cdFx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0XG5cdFx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXHRcblx0XHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRcdHJidWdneU1hdGNoZXMgPSBbXTtcblx0XG5cdFx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0XHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0XHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdFx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdFx0cmJ1Z2d5UVNBID0gW107XG5cdFxuXHRcdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcblx0XHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cdFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFxuXHRcdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXHRcblx0XHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblx0XG5cdFx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFxuXHRcdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdFx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblx0XG5cdFx0LyogQ29udGFpbnNcblx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdFx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXHRcblx0XHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0XHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0XHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRcdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0XHQpKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFxuXHRcdC8qIFNvcnRpbmdcblx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdFxuXHRcdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0XHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XG5cdFx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cdFxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdFx0MTtcblx0XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXHRcblx0XHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdFx0MDtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXHRcblx0XHRcdHZhciBjdXIsXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdFx0YnAgPSBbIGIgXTtcblx0XG5cdFx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0XHQwO1xuXHRcblx0XHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0XHRjdXIgPSBhO1xuXHRcdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHRcdH1cblx0XHRcdGN1ciA9IGI7XG5cdFx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdFx0aSsrO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBpID9cblx0XHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXHRcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdFx0MDtcblx0XHR9O1xuXHRcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH07XG5cdFxuXHRTaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0XHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xuXHR9O1xuXHRcblx0U2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRcdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRcdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0fVxuXHRcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0XHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cdFxuXHRcdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXHRcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblx0XG5cdFx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cdFxuXHRcdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG5cdH07XG5cdFxuXHRTaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0XHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0XHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcblx0fTtcblx0XG5cdFNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdFx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHR9XG5cdFxuXHRcdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcblx0XHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0dmFsIDpcblx0XHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHR9O1xuXHRcblx0U2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdFx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdH07XG5cdFxuXHRTaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcblx0ICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcblx0ICovXG5cdFNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSAwO1xuXHRcblx0XHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdFx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0XHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0XHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXHRcblx0XHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRcdHNvcnRJbnB1dCA9IG51bGw7XG5cdFxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG5cdCAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuXHQgKi9cblx0Z2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5vZGUsXG5cdFx0XHRyZXQgPSBcIlwiLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cdFxuXHRcdGlmICggIW5vZGVUeXBlICkge1xuXHRcdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdFx0fVxuXHRcdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXHRcblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xuXHRcblx0RXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cdFxuXHRcdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRcdGNhY2hlTGVuZ3RoOiA1MCxcblx0XG5cdFx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cdFxuXHRcdG1hdGNoOiBtYXRjaEV4cHIsXG5cdFxuXHRcdGF0dHJIYW5kbGU6IHt9LFxuXHRcblx0XHRmaW5kOiB7fSxcblx0XG5cdFx0cmVsYXRpdmU6IHtcblx0XHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHRcdH0sXG5cdFxuXHRcdHByZUZpbHRlcjoge1xuXHRcdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcblx0XHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcblx0XHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHRcdCovXG5cdFx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblx0XG5cdFx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXHRcblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cdFxuXHRcdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXHRcblx0XHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHRmaWx0ZXI6IHtcblx0XG5cdFx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cdFxuXHRcdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XG5cdFx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cdFxuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXHRcblx0XHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cdFxuXHRcdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cdFxuXHRcdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHR9IDpcblx0XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cdFxuXHRcdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblx0XG5cdFx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gZm47XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0cHNldWRvczoge1xuXHRcdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblx0XG5cdFx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXHRcblx0XHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH0pLFxuXHRcblx0XHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHRcdH07XG5cdFx0XHR9KSxcblx0XG5cdFx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHRcdH07XG5cdFx0XHR9KSxcblx0XG5cdFx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fTtcblx0XHRcdH0pLFxuXHRcblx0XHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdFx0fSxcblx0XG5cdFx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblx0XG5cdFx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0XHR9LFxuXHRcblx0XHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0XHR9LFxuXHRcblx0XHRcdC8vIENvbnRlbnRzXG5cdFx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXHRcblx0XHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0XHR9LFxuXHRcblx0XHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0XHR9LFxuXHRcblx0XHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHRcdH0sXG5cdFxuXHRcdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdFx0fSxcblx0XG5cdFx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBhdHRyO1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdFx0fSxcblx0XG5cdFx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBbIDAgXTtcblx0XHRcdH0pLFxuXHRcblx0XHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdFx0fSksXG5cdFxuXHRcdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHRcdH0pLFxuXHRcblx0XHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0XHR9KSxcblx0XG5cdFx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0XHR9KSxcblx0XG5cdFx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0XHR9KSxcblx0XG5cdFx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdFx0fSlcblx0XHR9XG5cdH07XG5cdFxuXHRFeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblx0XG5cdC8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5cdGZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRcdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcblx0fVxuXHRmb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRcdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG5cdH1cblx0XG5cdC8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuXHRmdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cblx0c2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5cdEV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cdFxuXHR0b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHRcdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblx0XG5cdFx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHRcdH1cblx0XG5cdFx0c29GYXIgPSBzZWxlY3Rvcjtcblx0XHRncm91cHMgPSBbXTtcblx0XHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cdFxuXHRcdHdoaWxlICggc29GYXIgKSB7XG5cdFxuXHRcdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdG1hdGNoZWQgPSBmYWxzZTtcblx0XG5cdFx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gRmlsdGVyc1xuXHRcdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdFx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdFx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdFx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdFx0c29GYXIgP1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdFx0fVxuXHRcdHJldHVybiBzZWxlY3Rvcjtcblx0fVxuXHRcblx0ZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0XHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cdFxuXHRcdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSA6XG5cdFxuXHRcdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXHRcblx0XHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cdFxuXHRcdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRcdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSA6XG5cdFx0XHRtYXRjaGVyc1swXTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblx0XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdFx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHRcdH1cblx0XHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cdFxuXHRcdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cdFxuXHRcdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdGVsZW1zLFxuXHRcblx0XHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXHRcblx0XHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0W10gOlxuXHRcblx0XHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdFx0bWF0Y2hlckluO1xuXHRcblx0XHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXHRcblx0XHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXHRcblx0XHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHRcdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cdFxuXHRcdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9IF07XG5cdFxuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblx0XG5cdFx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdFx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblx0XG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXHRcblx0XHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXHRcblx0XHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXHRcblx0XHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0XHR9O1xuXHRcblx0XHRyZXR1cm4gYnlTZXQgP1xuXHRcdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0XHRzdXBlck1hdGNoZXI7XG5cdH1cblx0XG5cdGNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cdFxuXHRcdGlmICggIWNhY2hlZCApIHtcblx0XHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cdFx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cdFxuXHRcdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlZDtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG5cdCAqICBzZWxlY3RvciBmdW5jdGlvbnNcblx0ICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcblx0ICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcblx0ICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG5cdCAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuXHQgKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuXHQgKi9cblx0c2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0XHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblx0XG5cdFx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cdFxuXHRcdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdFx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRcdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXHRcblx0XHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXHRcblx0XHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcblx0XHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblx0XG5cdFx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0XHQpKSApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHRcdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0XHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0XHRzZWVkLFxuXHRcdFx0Y29udGV4dCxcblx0XHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRcdHJlc3VsdHMsXG5cdFx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0KTtcblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fTtcblx0XG5cdC8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cdFxuXHQvLyBTb3J0IHN0YWJpbGl0eVxuXHRzdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cdFxuXHQvLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG5cdC8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cblx0c3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cdFxuXHQvLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcblx0c2V0RG9jdW1lbnQoKTtcblx0XG5cdC8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG5cdC8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuXHRzdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdFx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG5cdH0pO1xuXHRcblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuXHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuXHRpZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRcdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcblx0fSkgKSB7XG5cdFx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0Ly8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuXHRpZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRcdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0XHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xuXHR9KSApIHtcblx0XHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly8gU3VwcG9ydDogSUU8OVxuXHQvLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5cdGlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG5cdH0pICkge1xuXHRcdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRcdHZhciB2YWw7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRyZXR1cm4gU2l6emxlO1xuXHRcblx0fSkoIHdpbmRvdyApO1xuXHRcblx0XG5cdFxuXHRqUXVlcnkuZmluZCA9IFNpenpsZTtcblx0alF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXHRcblx0Ly8gRGVwcmVjYXRlZFxuXHRqUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5cdGpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xuXHRqUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xuXHRqUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5cdGpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblx0alF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblx0XG5cdFxuXHRcblx0XG5cdHZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXHRcblx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1hdGNoZWQ7XG5cdH07XG5cdFxuXHRcblx0dmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBbXTtcblx0XG5cdFx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9O1xuXHRcblx0XG5cdHZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXHRcblx0dmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cdFxuXHRcblx0XG5cdHZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cdFxuXHQvLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuXHRmdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcblx0XHQvLyBTaW5nbGUgZWxlbWVudFxuXHRcdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcblx0XHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0XHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFxuXHRcdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdFx0fVxuXHRcblx0XHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0gKTtcblx0fVxuXHRcblx0alF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHRcdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblx0XG5cdFx0aWYgKCBub3QgKSB7XG5cdFx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHRcdH1cblx0XG5cdFx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0gKSApO1xuXHR9O1xuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHZhciBpLCByZXQsXG5cdFx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0XHRzZWxmID0gdGhpcztcblx0XG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXHRcblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0XHR9LFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdFx0fSxcblx0XHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdFx0fSxcblx0XHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0XHR0aGlzLFxuXHRcblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRcdGZhbHNlXG5cdFx0XHQpLmxlbmd0aDtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHQvLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXHRcblx0XG5cdC8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxuXHR2YXIgcm9vdGpRdWVyeSxcblx0XG5cdFx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0XHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdFx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdFx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRcdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblx0XG5cdFx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdFx0dmFyIG1hdGNoLCBlbGVtO1xuXHRcblx0XHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblx0XG5cdFx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblx0XG5cdFx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHRcdCkgKTtcblx0XG5cdFx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcblx0XHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcblx0XHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXHRcblx0XHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHRcdH07XG5cdFxuXHQvLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5cdGluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXHRcblx0Ly8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxuXHRyb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXHRcblx0XG5cdHZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblx0XG5cdFx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0XHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRcdG5leHQ6IHRydWUsXG5cdFx0XHRwcmV2OiB0cnVlXG5cdFx0fTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9LFxuXHRcblx0XHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGN1cixcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXHRcblx0XHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcblx0XHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0XHR9LFxuXHRcblx0XHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0XHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFxuXHRcdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblx0XG5cdFx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHRcdCk7XG5cdFx0fSxcblx0XG5cdFx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdFx0KVxuXHRcdFx0KTtcblx0XHR9LFxuXHRcblx0XHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0XHQpO1xuXHRcdH1cblx0fSApO1xuXHRcblx0ZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRcdHJldHVybiBjdXI7XG5cdH1cblx0XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHRcdH0sXG5cdFx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHRcdH0sXG5cdFx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0XHR9LFxuXHRcdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHRcdH0sXG5cdFx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHRcdH0sXG5cdFx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0XHR9LFxuXHRcdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHRcdH0sXG5cdFx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdFx0fSxcblx0XHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdFx0fSxcblx0XHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0XHR9LFxuXHRcdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0XHR9XG5cdH0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXHRcblx0XHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblx0XG5cdFx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0XHR9O1xuXHR9ICk7XG5cdHZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblx0XG5cdFxuXHRcblx0Ly8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcblx0ZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdFx0fSApO1xuXHRcdHJldHVybiBvYmplY3Q7XG5cdH1cblx0XG5cdC8qXG5cdCAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuXHQgKlxuXHQgKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuXHQgKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3Rcblx0ICpcblx0ICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcblx0ICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuXHQgKlxuXHQgKiBQb3NzaWJsZSBvcHRpb25zOlxuXHQgKlxuXHQgKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG5cdCAqXG5cdCAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuXHQgKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG5cdCAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuXHQgKlxuXHQgKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuXHQgKlxuXHQgKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2Vcblx0ICpcblx0ICovXG5cdGpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XG5cdFx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHRcdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0XHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cdFxuXHRcdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0XHRmaXJpbmcsXG5cdFxuXHRcdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRcdG1lbW9yeSxcblx0XG5cdFx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdFx0ZmlyZWQsXG5cdFxuXHRcdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdFx0bG9ja2VkLFxuXHRcblx0XHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0XHRsaXN0ID0gW10sXG5cdFxuXHRcdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRcdHF1ZXVlID0gW10sXG5cdFxuXHRcdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXHRcblx0XHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdFx0bG9ja2VkID0gb3B0aW9ucy5vbmNlO1xuXHRcblx0XHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXHRcblx0XHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXHRcblx0XHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFxuXHRcdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRcdHNlbGYgPSB7XG5cdFxuXHRcdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcblx0XHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cdFxuXHRcdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFxuXHRcdHJldHVybiBzZWxmO1xuXHR9O1xuXHRcblx0XG5cdGZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRcdHJldHVybiB2O1xuXHR9XG5cdGZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHRcdHRocm93IGV4O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICkge1xuXHRcdHZhciBtZXRob2Q7XG5cdFxuXHRcdHRyeSB7XG5cdFxuXHRcdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdFx0aWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXHRcblx0XHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cdFxuXHRcdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHRcdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdFx0XHRyZXNvbHZlLmNhbGwoIHVuZGVmaW5lZCwgdmFsdWUgKTtcblx0XHRcdH1cblx0XG5cdFx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdFx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHRcdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdFx0fSBjYXRjaCAoIHZhbHVlICkge1xuXHRcblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRcdHJlamVjdC5jYWxsKCB1bmRlZmluZWQsIHZhbHVlICk7XG5cdFx0fVxuXHR9XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFxuXHRcdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHRcdHZhciB0dXBsZXMgPSBbXG5cdFxuXHRcdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdFx0XSxcblx0XHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XG5cdFx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhlbiApICkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH07XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkZWZlcnJlZCA9IHt9O1xuXHRcblx0XHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblx0XG5cdFx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblx0XG5cdFx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXHRcblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2tcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXHRcblx0XHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9O1xuXHRcblx0XHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0XHR9ICk7XG5cdFxuXHRcdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cdFxuXHRcdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEFsbCBkb25lIVxuXHRcdFx0cmV0dXJuIGRlZmVycmVkO1xuXHRcdH0sXG5cdFxuXHRcdC8vIERlZmVycmVkIGhlbHBlclxuXHRcdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHRcdHZhclxuXHRcblx0XHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFxuXHRcdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdFx0aSA9IHJlbWFpbmluZyxcblx0XG5cdFx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcblx0XHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XG5cdFx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblx0XG5cdFx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCApO1xuXHRcblx0XHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblx0XG5cdFx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0Ly8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG5cdC8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxuXHR2YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblx0XG5cdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHRcdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdFx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0XHR9XG5cdH07XG5cdFxuXHRcblx0XG5cdFxuXHRqUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fSApO1xuXHR9O1xuXHRcblx0XG5cdFxuXHRcblx0Ly8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG5cdHZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblx0XG5cdGpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XG5cdFx0cmVhZHlMaXN0XG5cdFx0XHQudGhlbiggZm4gKVxuXHRcblx0XHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0XHR9ICk7XG5cdFxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0alF1ZXJ5LmV4dGVuZCgge1xuXHRcblx0XHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRcdGlzUmVhZHk6IGZhbHNlLFxuXHRcblx0XHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdFx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0XHRyZWFkeVdhaXQ6IDEsXG5cdFxuXHRcdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxuXHRcdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0XHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cdFxuXHRcdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblx0XG5cdFx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRqUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXHRcblx0Ly8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2Rcblx0ZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRcdGpRdWVyeS5yZWFkeSgpO1xuXHR9XG5cdFxuXHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuXHQvLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuXHQvLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cblx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0XHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblx0XG5cdFx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdFx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXHRcblx0fSBlbHNlIHtcblx0XG5cdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0XG5cdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHR9XG5cdFxuXHRcblx0XG5cdFxuXHQvLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cblx0Ly8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG5cdHZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXHRcblx0XHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdFx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdFx0fVxuXHRcblx0XHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcblx0XHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0XHRyYXcgPSB0cnVlO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggYnVsayApIHtcblx0XG5cdFx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0XHRmbiA9IG51bGw7XG5cdFxuXHRcdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBmbiApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdGlmICggY2hhaW5hYmxlICkge1xuXHRcdFx0cmV0dXJuIGVsZW1zO1xuXHRcdH1cblx0XG5cdFx0Ly8gR2V0c1xuXHRcdGlmICggYnVsayApIHtcblx0XHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xuXHR9O1xuXHR2YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XG5cdFx0Ly8gQWNjZXB0cyBvbmx5OlxuXHRcdC8vICAtIE5vZGVcblx0XHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdFx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0XHQvLyAgLSBPYmplY3Rcblx0XHQvLyAgICAtIEFueVxuXHRcdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcblx0fTtcblx0XG5cdFxuXHRcblx0XG5cdGZ1bmN0aW9uIERhdGEoKSB7XG5cdFx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xuXHR9XG5cdFxuXHREYXRhLnVpZCA9IDE7XG5cdFxuXHREYXRhLnByb3RvdHlwZSA9IHtcblx0XG5cdFx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XG5cdFx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0XHR2YWx1ZSA9IHt9O1xuXHRcblx0XHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblx0XG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHRcdHZhciBwcm9wLFxuXHRcdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cdFxuXHRcdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cdFxuXHRcdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY2FjaGU7XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cdFxuXHRcdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdFx0fSxcblx0XHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblx0XG5cdFx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0XHQvL1xuXHRcdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0XHQvL1xuXHRcdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0XHQvL1xuXHRcdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdFx0Ly9cblx0XHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cdFxuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0XHQvL1xuXHRcdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHRcdC8vXG5cdFx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblx0XG5cdFx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0XHR9LFxuXHRcdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0XHR2YXIgaSxcblx0XHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFxuXHRcdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXHRcblx0XHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRcdGtleSA9IGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRrZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblx0XG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRpID0ga2V5Lmxlbmd0aDtcblx0XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdFx0fVxuXHR9O1xuXHR2YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXHRcblx0dmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblx0XG5cdFxuXHRcblx0Ly9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcblx0Ly9cblx0Ly9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcblx0Ly9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuXHQvL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG5cdC8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuXHQvL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuXHQvL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG5cdC8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblx0XG5cdHZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdFx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXHRcblx0ZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0XHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcblx0XHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFxuXHRcdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFxuXHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0XHRyZXR1cm4gK2RhdGE7XG5cdFx0fVxuXHRcblx0XHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFxuXHRcdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0XHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXHRcblx0XHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXHRcblx0alF1ZXJ5LmV4dGVuZCgge1xuXHRcdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdFx0fSxcblx0XG5cdFx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdFx0fSxcblx0XG5cdFx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0XHR9LFxuXHRcblx0XHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHRcdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRcdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0XHR9LFxuXHRcblx0XHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXHRcblx0XHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cdFxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkYXRhO1xuXHRcblx0XHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblx0XG5cdFx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcblx0XHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHRcdH0sXG5cdFxuXHRcdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdFx0dmFyIHF1ZXVlO1xuXHRcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblx0XG5cdFx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcblx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdFx0fTtcblx0XG5cdFx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggZm4gKSB7XG5cdFxuXHRcdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdFx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0XHR9IClcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0XHR2YXIgc2V0dGVyID0gMjtcblx0XG5cdFx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdFx0c2V0dGVyLS07XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cdFxuXHRcdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cdFxuXHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXHRcdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9LFxuXHRcblx0XHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdFx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdFx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHRcdHZhciB0bXAsXG5cdFx0XHRcdGNvdW50ID0gMSxcblx0XHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcblx0XHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHRcdH1cblx0fSApO1xuXHR2YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cdFxuXHR2YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cdFxuXHRcblx0dmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXHRcblx0dmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblx0XG5cdFx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFxuXHRcdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXHRcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cdFxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0XHR9O1xuXHRcblx0dmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHJldCwgbmFtZSxcblx0XHRcdG9sZCA9IHt9O1xuXHRcblx0XHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0XHR9XG5cdFxuXHRcdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cdFxuXHRcdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcblx0XG5cdFxuXHRcblx0XG5cdGZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdFx0dmFyIGFkanVzdGVkLFxuXHRcdFx0c2NhbGUgPSAxLFxuXHRcdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0XHR9LFxuXHRcdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXHRcblx0XHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblx0XG5cdFx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblx0XG5cdFx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cdFxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdFxuXHRcdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXHRcblx0XHRcdGRvIHtcblx0XG5cdFx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblx0XG5cdFx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcblx0XHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdFx0fSB3aGlsZSAoXG5cdFx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0XHQpO1xuXHRcdH1cblx0XG5cdFx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cdFxuXHRcdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGFkanVzdGVkO1xuXHR9XG5cdFxuXHRcblx0dmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cdFxuXHRmdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0XHR2YXIgdGVtcCxcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblx0XG5cdFx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdFx0cmV0dXJuIGRpc3BsYXk7XG5cdFx0fVxuXHRcblx0XHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cdFxuXHRcdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXHRcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0XHR9XG5cdFx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXHRcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHRcdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdFx0dmFsdWVzID0gW10sXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cdFxuXHRcdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XG5cdFx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdFx0aWYgKCBzaG93ICkge1xuXHRcblx0XHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cdFxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBlbGVtZW50cztcblx0fVxuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdFx0fSxcblx0XHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHRcdH0sXG5cdFx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblx0fSApO1xuXHR2YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cdFxuXHR2YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXHRcblx0dmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cdFxuXHRcblx0XG5cdC8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG5cdHZhciB3cmFwTWFwID0ge1xuXHRcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXHRcblx0XHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHRcdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0XHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdFx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRcdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdFx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHRcdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0XG5cdFx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG5cdH07XG5cdFxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cdFxuXHR3cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xuXHR3cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblx0XG5cdFxuXHRmdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0XHR2YXIgcmV0O1xuXHRcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cdFxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXHRcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ID0gW107XG5cdFx0fVxuXHRcblx0XHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXHRcblx0XG5cdC8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuXHRmdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bCA9IGVsZW1zLmxlbmd0aDtcblx0XG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHR2YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cdFxuXHRmdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHRcdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdFx0bm9kZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IGVsZW1zLmxlbmd0aDtcblx0XG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cdFxuXHRcdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cdFxuXHRcdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXHRcblx0XHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cdFxuXHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFxuXHRcdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblx0XG5cdFx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblx0XG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXHRcblx0XHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblx0XG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblx0XG5cdFx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFxuXHRcdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblx0XG5cdFx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBmcmFnbWVudDtcblx0fVxuXHRcblx0XG5cdCggZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdFx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHRcdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblx0XG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0XHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0XHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRcdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXHR9ICkoKTtcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0XG5cdFxuXHRcblx0dmFyXG5cdFx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRcdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRcdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblx0XG5cdGZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5cdGZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0XHR9IGNhdGNoICggZXJyICkgeyB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdFx0dmFyIG9yaWdGbiwgdHlwZTtcblx0XG5cdFx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcblx0XHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0fVxuXHRcblx0XHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXHRcblx0XHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0fVxuXHRcblx0XHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRcdG9yaWdGbiA9IGZuO1xuXHRcdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFxuXHRcdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdH07XG5cdFxuXHRcdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cblx0XG5cdC8qXG5cdCAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cblx0ICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cblx0ICovXG5cdGpRdWVyeS5ldmVudCA9IHtcblx0XG5cdFx0Z2xvYmFsOiB7fSxcblx0XG5cdFx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXHRcblx0XHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblx0XG5cdFx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblx0XG5cdFx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFxuXHRcdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcblx0XHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XG5cdFx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cdFxuXHRcdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cdFxuXHRcdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFxuXHRcdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHRcdH1cblx0XG5cdFx0fSxcblx0XG5cdFx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdFx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblx0XG5cdFx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXHRcblx0XHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXHRcblx0XHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cdFxuXHRcdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cdFxuXHRcdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXHRcblx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXHRcblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblx0XG5cdFx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblx0XG5cdFx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cdFxuXHRcdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdFx0fVxuXHRcblx0XHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblx0XG5cdFx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXHRcblx0XHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0XHRpID0gMDtcblx0XHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXHRcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXHRcblx0XHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblx0XG5cdFx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXHRcblx0XHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0XHR9LFxuXHRcblx0XHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblx0XG5cdFx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblx0XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cdFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblx0XG5cdFx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXHRcblx0XHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cdFxuXHRcdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRcdGN1ciA9IHRoaXM7XG5cdFx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdFx0fSxcblx0XG5cdFx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcblx0XHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IDpcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9LFxuXHRcblx0XHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHRcdH0sXG5cdFxuXHRcdHNwZWNpYWw6IHtcblx0XHRcdGxvYWQ6IHtcblx0XG5cdFx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRmb2N1czoge1xuXHRcblx0XHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdFx0fSxcblx0XHRcdGJsdXI6IHtcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHRcdH0sXG5cdFx0XHRjbGljazoge1xuXHRcblx0XHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcblx0XHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdFxuXHRqUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXHRcblx0XHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0XHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdFx0fVxuXHR9O1xuXHRcblx0alF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cdFxuXHRcdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRcdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0XHR9XG5cdFxuXHRcdC8vIEV2ZW50IG9iamVjdFxuXHRcdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cdFxuXHRcdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0XHRyZXR1cm5GYWxzZTtcblx0XG5cdFx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0XHRzcmMudGFyZ2V0O1xuXHRcblx0XHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cdFxuXHRcdC8vIEV2ZW50IHR5cGVcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50eXBlID0gc3JjO1xuXHRcdH1cblx0XG5cdFx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0XHRpZiAoIHByb3BzICkge1xuXHRcdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0XHR9XG5cdFxuXHRcdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdFx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cdFxuXHRcdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0XHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcblx0fTtcblx0XG5cdC8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5cdGpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdFx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0XHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRcdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0XHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdFx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXHRcblx0XHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblx0XG5cdFx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cdFxuXHRcdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cdFxuXHRcdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cdFxuXHRcdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXHRcblx0XHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXHRcblx0XHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XG5cdFx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fTtcblx0XG5cdC8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0YWx0S2V5OiB0cnVlLFxuXHRcdGJ1YmJsZXM6IHRydWUsXG5cdFx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0XHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0XHRjdHJsS2V5OiB0cnVlLFxuXHRcdGRldGFpbDogdHJ1ZSxcblx0XHRldmVudFBoYXNlOiB0cnVlLFxuXHRcdG1ldGFLZXk6IHRydWUsXG5cdFx0cGFnZVg6IHRydWUsXG5cdFx0cGFnZVk6IHRydWUsXG5cdFx0c2hpZnRLZXk6IHRydWUsXG5cdFx0dmlldzogdHJ1ZSxcblx0XHRcImNoYXJcIjogdHJ1ZSxcblx0XHRjaGFyQ29kZTogdHJ1ZSxcblx0XHRrZXk6IHRydWUsXG5cdFx0a2V5Q29kZTogdHJ1ZSxcblx0XHRidXR0b246IHRydWUsXG5cdFx0YnV0dG9uczogdHJ1ZSxcblx0XHRjbGllbnRYOiB0cnVlLFxuXHRcdGNsaWVudFk6IHRydWUsXG5cdFx0b2Zmc2V0WDogdHJ1ZSxcblx0XHRvZmZzZXRZOiB0cnVlLFxuXHRcdHBvaW50ZXJJZDogdHJ1ZSxcblx0XHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0XHRzY3JlZW5YOiB0cnVlLFxuXHRcdHNjcmVlblk6IHRydWUsXG5cdFx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0XHR0b0VsZW1lbnQ6IHRydWUsXG5cdFx0dG91Y2hlczogdHJ1ZSxcblx0XG5cdFx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cdFxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdFx0fVxuXHR9LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXHRcblx0Ly8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG5cdC8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG5cdC8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG5cdC8vXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcblx0Ly8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG5cdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuXHQvLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxuXHRqUXVlcnkuZWFjaCgge1xuXHRcdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdFx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRcdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRcdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcblx0fSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0XHRiaW5kVHlwZTogZml4LFxuXHRcblx0XHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXHRcblx0XHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFxuXHRcdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHRcdH0sXG5cdFx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHRcdH0sXG5cdFx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblx0XG5cdFx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XG5cdFx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XG5cdFx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0dmFyXG5cdFxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblx0XG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdFx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cdFxuXHRcdC8qIGVzbGludC1lbmFibGUgKi9cblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHRcdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdFx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cdFxuXHRcdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRcdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0XHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRcdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblx0XG5cdGZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblx0XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblx0XG5cdC8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cblx0ZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0XHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXHRmdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRcdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXHRcblx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0XHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblx0XG5cdFx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0XHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cdFxuXHRcdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXHRcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRcdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXHRcblx0XHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuXHRmdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHRcdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XG5cdFx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdFx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblx0XG5cdFx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0XHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cdFxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXHRcblx0XHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblx0XG5cdFx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdFx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0XG5cdFx0aWYgKCBsICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblx0XG5cdFx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblx0XG5cdFx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cdFxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXHRcblx0XHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXHRcblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gY29sbGVjdGlvbjtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdFx0dmFyIG5vZGUsXG5cdFx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0XHRpID0gMDtcblx0XG5cdFx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXHRcblx0alF1ZXJ5LmV4dGVuZCgge1xuXHRcdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdFx0fSxcblx0XG5cdFx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFxuXHRcdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcblx0XHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblx0XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblx0XG5cdFx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRcdHJldHVybiBjbG9uZTtcblx0XHR9LFxuXHRcblx0XHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRcdGkgPSAwO1xuXHRcblx0XHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0XHR9LFxuXHRcblx0XHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdFx0fSxcblx0XG5cdFx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cdFx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHRcdH0sXG5cdFxuXHRcdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XG5cdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdGkgPSAwO1xuXHRcblx0XHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFxuXHRcdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcblx0XHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXHRcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblx0XG5cdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblx0XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdGVsZW0gPSAwO1xuXHRcblx0XHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHRcdH0sXG5cdFxuXHRcdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpZ25vcmVkID0gW107XG5cdFxuXHRcdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cdFxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdFx0fSwgaWdub3JlZCApO1xuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0XHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRcdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0XHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRcdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxuXHR9LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgZWxlbXMsXG5cdFx0XHRcdHJldCA9IFtdLFxuXHRcdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdFx0aSA9IDA7XG5cdFxuXHRcdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdFx0fTtcblx0fSApO1xuXHR2YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cdFxuXHR2YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cdFxuXHR2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcblx0XHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0XHR9O1xuXHRcblx0XG5cdFxuXHQoIGZ1bmN0aW9uKCkge1xuXHRcblx0XHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0XHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRcdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXHRcblx0XHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRcdGlmICggIWRpdiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblx0XG5cdFx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXHRcblx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdFxuXHRcdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdFx0ZGl2ID0gbnVsbDtcblx0XHR9XG5cdFxuXHRcdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRcblx0XHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRcdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdFx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRcdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdFx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblx0XG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXHRcblx0XHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0XHR9LFxuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0XHR9LFxuXHRcdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdFx0fSxcblx0XHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICkoKTtcblx0XG5cdFxuXHRmdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHRcdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cdFxuXHRcdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cdFxuXHRcdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cdFxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cdFxuXHRcdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cdFxuXHRcdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXHRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0XHRyZXQgKyBcIlwiIDpcblx0XHRcdHJldDtcblx0fVxuXHRcblx0XG5cdGZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblx0XG5cdFx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXHRcblx0XHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblx0XG5cdFxuXHR2YXJcblx0XG5cdFx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHRcdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHRcdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRcdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0XHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0XHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0XHR9LFxuXHRcblx0XHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdFx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblx0XG5cdC8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcblx0ZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cdFxuXHRcdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdFxuXHRcdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0XHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblx0XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXHRcblx0XHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdFx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdFx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdFx0cmV0dXJuIG1hdGNoZXMgP1xuXHRcblx0XHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHRcdHZhbHVlO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHR2YWwgPSAwO1xuXHRcblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHRpZiAoIGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0XHRpID0gNDtcblx0XG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDA7XG5cdFx0fVxuXHRcblx0XHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cdFxuXHRcdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cdFxuXHRcdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcblx0XHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cdFxuXHRcdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdFx0dmFyIHZhbCxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0aWYgKCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0dmFsID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVsgbmFtZSBdO1xuXHRcdH1cblx0XG5cdFx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdFx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdFx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XG5cdFx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XG5cdFx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdFx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiB2YWw7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXHRcblx0XHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdFx0fVxuXHRcblx0XHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRcdHJldHVybiAoIHZhbCArXG5cdFx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0bmFtZSxcblx0XHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0XHRzdHlsZXNcblx0XHRcdClcblx0XHQpICsgXCJweFwiO1xuXHR9XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFxuXHRcdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHRcdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRcdGNzc0hvb2tzOiB7XG5cdFx0XHRvcGFjaXR5OiB7XG5cdFx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0XHRjc3NOdW1iZXI6IHtcblx0XHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcdFwiem9vbVwiOiB0cnVlXG5cdFx0fSxcblx0XG5cdFx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHRcdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0XHRjc3NQcm9wczoge1xuXHRcdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0XHR9LFxuXHRcblx0XHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRcdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXHRcblx0XHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXHRcblx0XHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXHRcblx0XHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblx0XG5cdFx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblx0XG5cdFx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXHRcblx0XHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHR9IGVsc2Uge1xuXHRcblx0XHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFxuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblx0XG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXHRcblx0XHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXHRcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0fSApO1xuXHRcblx0alF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcblx0XHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cdFxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpO1xuXHRcblx0XHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cdFxuXHRcdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0XHR9IClcblx0XHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcblx0XG5cdC8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRtYXJnaW46IFwiXCIsXG5cdFx0cGFkZGluZzogXCJcIixcblx0XHRib3JkZXI6IFwiV2lkdGhcIlxuXHR9LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblx0XG5cdFx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblx0XG5cdFx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHRcdH1cblx0XHR9O1xuXHRcblx0XHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRcdGkgPSAwO1xuXHRcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXHRcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdGZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0XHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xuXHR9XG5cdGpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXHRcblx0VHdlZW4ucHJvdG90eXBlID0ge1xuXHRcdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0XHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHR9LFxuXHRcdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXHRcblx0XHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0XHR9LFxuXHRcdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0XHR2YXIgZWFzZWQsXG5cdFx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblx0XG5cdFx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHRcdH1cblx0XHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblx0XG5cdFx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9O1xuXHRcblx0VHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXHRcblx0VHdlZW4ucHJvcEhvb2tzID0ge1xuXHRcdF9kZWZhdWx0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdFx0dmFyIHJlc3VsdDtcblx0XG5cdFx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXHRcblx0XHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcblx0XHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdFxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0VHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0XG5cdGpRdWVyeS5lYXNpbmcgPSB7XG5cdFx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRcdHJldHVybiBwO1xuXHRcdH0sXG5cdFx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0XHR9LFxuXHRcdF9kZWZhdWx0OiBcInN3aW5nXCJcblx0fTtcblx0XG5cdGpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXHRcblx0Ly8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcblx0alF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblx0XG5cdFxuXHRcblx0XG5cdHZhclxuXHRcdGZ4Tm93LCB0aW1lcklkLFxuXHRcdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRcdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXHRcblx0ZnVuY3Rpb24gcmFmKCkge1xuXHRcdGlmICggdGltZXJJZCApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJhZiApO1xuXHRcdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcblx0ZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXHRcdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG5cdH1cblx0XG5cdC8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5cdGZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0dmFyIHdoaWNoLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cdFxuXHRcdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0XHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRcdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRcdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0XHR9XG5cdFxuXHRcdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBhdHRycztcblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdFx0dmFyIHR3ZWVuLFxuXHRcdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cdFxuXHRcdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0XHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdFx0YW5pbSA9IHRoaXMsXG5cdFx0XHRvcmlnID0ge30sXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XG5cdFx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdFx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGhvb2tzLnVucXVldWVkKys7XG5cdFxuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcblx0XHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblx0XG5cdFx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdFx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRcdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdFx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1lcblx0XHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXHRcblx0XHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdH1cblx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcblx0XHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFxuXHRcdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblx0XG5cdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXHRcblx0XHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdFx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblx0XG5cdFx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdFx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdH1cblx0XG5cdFx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cdFxuXHRcdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdFx0dmFyIHJlc3VsdCxcblx0XHRcdHN0b3BwZWQsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHRcdH0gKSxcblx0XHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblx0XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cdFxuXHRcdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXHRcblx0XHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fSApLFxuXHRcdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cdFxuXHRcdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cdFxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXHRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdFx0fVxuXHRcblx0XHRqUXVlcnkuZngudGltZXIoXG5cdFx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0XHR9IClcblx0XHQpO1xuXHRcblx0XHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRcdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblx0fVxuXHRcblx0alF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXHRcblx0XHR0d2VlbmVyczoge1xuXHRcdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSBdXG5cdFx0fSxcblx0XG5cdFx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHZhciBwcm9wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblx0XG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cdFxuXHRcdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0XHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHRcdH07XG5cdFxuXHRcdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZiBvciBpZiBkb2N1bWVudCBpcyBoaWRkZW5cblx0XHRpZiAoIGpRdWVyeS5meC5vZmYgfHwgZG9jdW1lbnQuaGlkZGVuICkge1xuXHRcdFx0b3B0LmR1cmF0aW9uID0gMDtcblx0XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblx0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdFx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdFx0fVxuXHRcblx0XHQvLyBRdWV1ZWluZ1xuXHRcdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cdFxuXHRcdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdFx0fVxuXHRcdH07XG5cdFxuXHRcdHJldHVybiBvcHQ7XG5cdH07XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcblx0XHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cdFxuXHRcdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0XHR9LFxuXHRcdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblx0XG5cdFx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cdFxuXHRcdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXHRcblx0XHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHRcdH0sXG5cdFx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0XHR9O1xuXHRcblx0XHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cdFxuXHRcdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cdFxuXHRcdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cdFxuXHRcdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblx0XG5cdFx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cdFxuXHRcdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHRcdH07XG5cdH0gKTtcblx0XG5cdC8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRcdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRcdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRcdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRcdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0XHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxuXHR9LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0XHR9O1xuXHR9ICk7XG5cdFxuXHRqUXVlcnkudGltZXJzID0gW107XG5cdGpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRpbWVyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXHRcblx0XHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblx0XG5cdFx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblx0XG5cdFx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHRcdH1cblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fTtcblx0XG5cdGpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0XHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdFx0aWYgKCB0aW1lcigpICkge1xuXHRcdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XG5cdFx0fVxuXHR9O1xuXHRcblx0alF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5cdGpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRpbWVySWQgKSB7XG5cdFx0XHR0aW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/XG5cdFx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJhZiApIDpcblx0XHRcdFx0d2luZG93LnNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXHR9O1xuXHRcblx0alF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSggdGltZXJJZCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXHRcdH1cblx0XG5cdFx0dGltZXJJZCA9IG51bGw7XG5cdH07XG5cdFxuXHRqUXVlcnkuZnguc3BlZWRzID0ge1xuXHRcdHNsb3c6IDYwMCxcblx0XHRmYXN0OiAyMDAsXG5cdFxuXHRcdC8vIERlZmF1bHQgc3BlZWRcblx0XHRfZGVmYXVsdDogNDAwXG5cdH07XG5cdFxuXHRcblx0Ly8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuXHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xuXHRqUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0XHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdFx0fTtcblx0XHR9ICk7XG5cdH07XG5cdFxuXHRcblx0KCBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cdFxuXHRcdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHRcdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRcdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXHRcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRcdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cdFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRcdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdFx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xuXHR9ICkoKTtcblx0XG5cdFxuXHR2YXIgYm9vbEhvb2ssXG5cdFx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHRcdH0sXG5cdFxuXHRcdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblx0XG5cdFx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHRcdH0sXG5cdFxuXHRcdGF0dHJIb29rczoge1xuXHRcdFx0dHlwZToge1xuXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0dmFyIG5hbWUsXG5cdFx0XHRcdGkgPSAwLFxuXHRcblx0XHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XG5cdFx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHQvLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5cdGJvb2xIb29rID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFxuXHRcdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9O1xuXHRcblx0alF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRcdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblx0XG5cdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcblx0XHRcdGlmICggIWlzWE1MICkge1xuXHRcblx0XHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fTtcblx0fSApO1xuXHRcblx0XG5cdFxuXHRcblx0dmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRcdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHRcdH0sXG5cdFxuXHRcdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5leHRlbmQoIHtcblx0XHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXHRcblx0XHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XG5cdFx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdFx0fSxcblx0XG5cdFx0cHJvcEhvb2tzOiB7XG5cdFx0XHR0YWJJbmRleDoge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblx0XG5cdFx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHRwcm9wRml4OiB7XG5cdFx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHRcdH1cblx0fSApO1xuXHRcblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuXHQvLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG5cdC8vIG9uIHRoZSBvcHRpb25cblx0Ly8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcblx0Ly8gd2hlbiBpbiBhbiBvcHRncm91cFxuXHQvLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcblx0Ly8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5cdGlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdFx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFxuXHRcdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cdFxuXHRcdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFxuXHRcdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cdFxuXHRcdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblx0XG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRcblx0alF1ZXJ5LmVhY2goIFtcblx0XHRcInRhYkluZGV4XCIsXG5cdFx0XCJyZWFkT25seVwiLFxuXHRcdFwibWF4TGVuZ3RoXCIsXG5cdFx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcdFwiY2VsbFBhZGRpbmdcIixcblx0XHRcInJvd1NwYW5cIixcblx0XHRcImNvbFNwYW5cIixcblx0XHRcInVzZU1hcFwiLFxuXHRcdFwiZnJhbWVCb3JkZXJcIixcblx0XHRcImNvbnRlbnRFZGl0YWJsZVwiXG5cdF0sIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG5cdH0gKTtcblx0XG5cdFxuXHRcblx0XG5cdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHRcdH1cblx0XG5cdFxuXHRmdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG5cdH1cblx0XG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcblx0XHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0XHRpID0gMDtcblx0XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFxuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXHRcblx0XHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcblx0XHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0XHRpID0gMDtcblx0XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFxuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcblx0XHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXHRcblx0XHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XG5cdFx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcblx0XHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXHRcblx0XHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblx0XG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XG5cdFx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFxuXHRcdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXHRcblx0XHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XG5cdFx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRcdGkgPSAwO1xuXHRcblx0XHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdFxuXHRcblx0dmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblx0XG5cdFx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXHRcblx0XHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblx0XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0dmFyIHZhbDtcblx0XG5cdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdFx0dmFsID0gXCJcIjtcblx0XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0dmFsICs9IFwiXCI7XG5cdFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblx0XG5cdFx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0dmFsSG9va3M6IHtcblx0XHRcdG9wdGlvbjoge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcblx0XHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHRcdHZhbCA6XG5cdFxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0c2VsZWN0OiB7XG5cdFx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cdFxuXHRcdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdFx0aSA9IG1heDtcblx0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cdFxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHRcdCFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdFx0fSxcblx0XG5cdFx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXHRcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblx0XG5cdFx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcblx0XHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xuXHRcblx0Ly8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcblx0alF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdFxuXHRcblx0Ly8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXHRcblx0XG5cdHZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblx0XG5cdGpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXHRcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblx0XG5cdFx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cdFxuXHRcdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cdFxuXHRcdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXHRcblx0XHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cdFxuXHRcdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdFx0ZXZlbnQgOlxuXHRcdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblx0XG5cdFx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRcdG51bGw7XG5cdFxuXHRcdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXHRcblx0XHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcblx0XHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0XHRpID0gMDtcblx0XHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFxuXHRcdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblx0XG5cdFx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXHRcblx0XHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFxuXHRcdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblx0XG5cdFx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0XHR9LFxuXHRcblx0XHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0XHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRcdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdFx0ZXZlbnQsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0XHR9XG5cdFxuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblx0XHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0alF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0XHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0XG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9ICk7XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHRzdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblx0XG5cdFxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcblx0Ly8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcblx0Ly8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG5cdC8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuXHRpZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdFx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0XG5cdFx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHRcdH07XG5cdFxuXHRcdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cdFxuXHRcdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cdFxuXHRcdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblx0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0gKTtcblx0fVxuXHR2YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cdFxuXHR2YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cdFxuXHR2YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXHRcblx0XG5cdFxuXHQvLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5cdGpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdHZhciB4bWw7XG5cdFx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0XHR0cnkge1xuXHRcdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFxuXHRcdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdFx0fVxuXHRcdHJldHVybiB4bWw7XG5cdH07XG5cdFxuXHRcblx0dmFyXG5cdFx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdFx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRcdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0XHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cdFxuXHRmdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFxuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xuXHRcblx0XHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXHRcblx0XHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdFx0dixcblx0XHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdFx0YWRkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcblx0XHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXHRcblx0XHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0XHR9XG5cdFxuXHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcblx0Ly8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5cdGpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0XHR2YXIgcHJlZml4LFxuXHRcdFx0cyA9IFtdLFxuXHRcdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXHRcblx0XHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cdFxuXHRcdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHRcdH07XG5cdFxuXHRcdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblx0XG5cdFx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XG5cdFx0fSBlbHNlIHtcblx0XG5cdFx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0XHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xuXHR9O1xuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0XHR9LFxuXHRcdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0XHR9IClcblx0XHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblx0XG5cdFx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHRcdH0gKVxuXHRcdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblx0XG5cdFx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdH0gKS5nZXQoKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHR2YXJcblx0XHRyMjAgPSAvJTIwL2csXG5cdFx0cmhhc2ggPSAvIy4qJC8sXG5cdFx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0XHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cdFxuXHRcdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRcdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdFx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdFx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXHRcblx0XHQvKiBQcmVmaWx0ZXJzXG5cdFx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0XHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHRcdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0XHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdFx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHRcdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0XHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHRcdCAqL1xuXHRcdHByZWZpbHRlcnMgPSB7fSxcblx0XG5cdFx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHRcdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0XHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdFx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdFx0ICovXG5cdFx0dHJhbnNwb3J0cyA9IHt9LFxuXHRcblx0XHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0XHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cdFxuXHRcdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRcdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdFx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXHRcblx0Ly8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuXHRmdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblx0XG5cdFx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRcdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXHRcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0XHR9XG5cdFxuXHRcdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cdFxuXHRcdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cdFxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRcblx0Ly8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5cdGZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cdFxuXHRcdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXHRcblx0XHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHRcdHZhciBzZWxlY3RlZDtcblx0XHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXHRcblx0XHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHRcdHJldHVybiBzZWxlY3RlZDtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xuXHR9XG5cdFxuXHQvLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcblx0Ly8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcblx0Ly8gRml4ZXMgIzk4ODdcblx0ZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdFx0dmFyIGtleSwgZGVlcCxcblx0XHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblx0XG5cdFx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIGRlZXAgKSB7XG5cdFx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH1cblx0XG5cdC8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcblx0ICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcblx0ICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdCAqL1xuXHRmdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXHRcblx0XHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblx0XG5cdFx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0XHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRcdGlmICggY3QgKSB7XG5cdFx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRcdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHRcdH1cblx0XG5cdFx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHRcdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdFx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRcdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdFx0fVxuXHR9XG5cdFxuXHQvKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG5cdCAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHRcdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdFx0Y29udmVydGVycyA9IHt9LFxuXHRcblx0XHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cdFxuXHRcdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRcdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblx0XG5cdFx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0XHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cdFxuXHRcdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcblx0XHRcdGlmICggY3VycmVudCApIHtcblx0XG5cdFx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblx0XG5cdFx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cdFxuXHRcdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cdFxuXHRcdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXHRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblx0XG5cdFx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcblx0fVxuXHRcblx0alF1ZXJ5LmV4dGVuZCgge1xuXHRcblx0XHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0XHRhY3RpdmU6IDAsXG5cdFxuXHRcdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0XHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRcdGV0YWc6IHt9LFxuXHRcblx0XHRhamF4U2V0dGluZ3M6IHtcblx0XHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0XHRhc3luYzogdHJ1ZSxcblx0XHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXHRcblx0XHRcdC8qXG5cdFx0XHR0aW1lb3V0OiAwLFxuXHRcdFx0ZGF0YTogbnVsbCxcblx0XHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRcdGNhY2hlOiBudWxsLFxuXHRcdFx0dGhyb3dzOiBmYWxzZSxcblx0XHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRcdGhlYWRlcnM6IHt9LFxuXHRcdFx0Ki9cblx0XG5cdFx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHRcdH0sXG5cdFxuXHRcdFx0Y29udGVudHM6IHtcblx0XHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHRcdH0sXG5cdFxuXHRcdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHRcdH0sXG5cdFxuXHRcdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0XHRjb252ZXJ0ZXJzOiB7XG5cdFxuXHRcdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXHRcblx0XHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cdFxuXHRcdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cdFxuXHRcdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdFx0fSxcblx0XG5cdFx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0XHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdFx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0XHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdFx0cmV0dXJuIHNldHRpbmdzID9cblx0XG5cdFx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblx0XG5cdFx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdFx0fSxcblx0XG5cdFx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdFx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cdFxuXHRcdC8vIE1haW4gbWV0aG9kXG5cdFx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblx0XG5cdFx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcblx0XHRcdHZhciB0cmFuc3BvcnQsXG5cdFxuXHRcdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRcdGNhY2hlVVJMLFxuXHRcblx0XHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblx0XG5cdFx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHRcdHRpbWVvdXRUaW1lcixcblx0XG5cdFx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0XHR1cmxBbmNob3IsXG5cdFxuXHRcdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRcdGNvbXBsZXRlZCxcblx0XG5cdFx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0XHRmaXJlR2xvYmFscyxcblx0XG5cdFx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdFx0aSxcblx0XG5cdFx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0XHR1bmNhY2hlZCxcblx0XG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cdFxuXHRcdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblx0XG5cdFx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXHRcblx0XHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cdFxuXHRcdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cdFxuXHRcdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cdFxuXHRcdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXHRcblx0XHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHRcdH0sXG5cdFxuXHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XG5cdFx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXHRcblx0XHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXHRcblx0XHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblx0XG5cdFx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XG5cdFx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXHRcblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cdFxuXHRcdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblx0XG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cdFxuXHRcdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblx0XG5cdFx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXHRcblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXHRcblx0XHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXHRcblx0XHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cdFxuXHRcdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0XHQpO1xuXHRcblx0XHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblx0XG5cdFx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXHRcblx0XHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXHRcblx0XHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXHRcblx0XHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cdFxuXHRcdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcblx0XHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cdFxuXHRcdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblx0XG5cdFx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cdFxuXHRcdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblx0XG5cdFx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cdFxuXHRcdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblx0XG5cdFx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cdFxuXHRcdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XG5cdFx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblx0XG5cdFx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXHRcblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblx0XG5cdFx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblx0XG5cdFx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXHRcblx0XHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFxuXHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH0sXG5cdFxuXHRcdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdFx0fSxcblx0XG5cdFx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdGpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdFx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXHRcblx0XHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0XHR9O1xuXHR9ICk7XG5cdFxuXHRcblx0alF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcblx0XHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdFx0dHlwZTogXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdFx0Y2FjaGU6IHRydWUsXG5cdFx0XHRhc3luYzogZmFsc2UsXG5cdFx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHRcdH0gKTtcblx0fTtcblx0XG5cdFxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdFx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0XHR2YXIgd3JhcDtcblx0XG5cdFx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblx0XG5cdFx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXHRcblx0XHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblx0XG5cdFx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cdFxuXHRcdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9LFxuXHRcblx0XHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblx0XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdFx0fSApO1xuXHRcdH0sXG5cdFxuXHRcdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9ICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHRqUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG5cdH07XG5cdGpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG5cdH07XG5cdFxuXHRcblx0XG5cdFxuXHRqUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHRcdH0gY2F0Y2ggKCBlICkge31cblx0fTtcblx0XG5cdHZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXHRcblx0XHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0XHQwOiAyMDAsXG5cdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdFx0MTIyMzogMjA0XG5cdFx0fSxcblx0XHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXHRcblx0c3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuXHRzdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblx0XG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cdFxuXHRcdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0XHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXHRcblx0XHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdFx0KTtcblx0XG5cdFx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblx0XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH07XG5cdFxuXHRcdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXHRcblx0XHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cdFxuXHRcdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblx0XG5cdFx0XHRcdFx0dHJ5IHtcblx0XG5cdFx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdFxuXHRcblx0XG5cdC8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5cdGpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHRcdH1cblx0fSApO1xuXHRcblx0Ly8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcblx0alF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRcdGFjY2VwdHM6IHtcblx0XHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHRcdH0sXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdFx0fSxcblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0XHRyZXR1cm4gdGV4dDtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcblx0XG5cdC8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cblx0alF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRcdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHRcdH1cblx0fSApO1xuXHRcblx0Ly8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0XG5cdFx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRcdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpO1xuXHRcblx0XHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0fSApO1xuXHRcblx0XG5cdFxuXHRcblx0dmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRcdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cdFxuXHQvLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5cdGpRdWVyeS5hamF4U2V0dXAoIHtcblx0XHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRcdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRcdHJldHVybiBjYWxsYmFjaztcblx0XHR9XG5cdH0gKTtcblx0XG5cdC8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xuXHRqUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblx0XG5cdFx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0XHQpO1xuXHRcblx0XHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdFx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cdFxuXHRcdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cdFxuXHRcdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0XHR9O1xuXHRcblx0XHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblx0XG5cdFx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdFx0fTtcblx0XG5cdFx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFxuXHRcdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cdFxuXHRcdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblx0XG5cdFx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXHRcblx0XHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdFx0fSApO1xuXHRcblx0XHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRcblx0XG5cdFxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG5cdC8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcblx0Ly8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG5cdC8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cblx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuXHRzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRcdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRcdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xuXHR9ICkoKTtcblx0XG5cdFxuXHQvLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcblx0Ly8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuXHQvLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHQvLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5cdGpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdFx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdFx0fVxuXHRcblx0XHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXHRcblx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcblx0XHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblx0XG5cdFx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cdFxuXHRcdC8vIFNpbmdsZSB0YWdcblx0XHRpZiAoIHBhcnNlZCApIHtcblx0XHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHRcdH1cblx0XG5cdFx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblx0XG5cdFx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcblx0fTtcblx0XG5cdFxuXHQvKipcblx0ICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuXHQgKi9cblx0alF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHRcdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0XHRzZWxmID0gdGhpcyxcblx0XHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXHRcblx0XHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHRcdH1cblx0XG5cdFx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cdFxuXHRcdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXHRcblx0XHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdFx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdFx0fVxuXHRcblx0XHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRcdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdFx0dXJsOiB1cmwsXG5cdFxuXHRcdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0XHRkYXRhOiBwYXJhbXNcblx0XHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXHRcblx0XHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXHRcblx0XHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cdFxuXHRcdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXHRcblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXHRcblx0XHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHRcblx0XG5cdFxuXHQvLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xuXHRqUXVlcnkuZWFjaCggW1xuXHRcdFwiYWpheFN0YXJ0XCIsXG5cdFx0XCJhamF4U3RvcFwiLFxuXHRcdFwiYWpheENvbXBsZXRlXCIsXG5cdFx0XCJhamF4RXJyb3JcIixcblx0XHRcImFqYXhTdWNjZXNzXCIsXG5cdFx0XCJhamF4U2VuZFwiXG5cdF0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRcdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdFx0fTtcblx0fSApO1xuXHRcblx0XG5cdFxuXHRcblx0alF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdFx0fSApLmxlbmd0aDtcblx0fTtcblx0XG5cdFxuXHRcblx0XG5cdC8qKlxuXHQgKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XG5cdH1cblx0XG5cdGpRdWVyeS5vZmZzZXQgPSB7XG5cdFx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdFx0cHJvcHMgPSB7fTtcblx0XG5cdFx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdFx0fVxuXHRcblx0XHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cdFxuXHRcdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XG5cdFx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFxuXHRcdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0dmFyIGRvY0VsZW0sIHdpbiwgcmVjdCwgZG9jLFxuXHRcdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXHRcblx0XHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFxuXHRcdFx0Ly8gTWFrZSBzdXJlIGVsZW1lbnQgaXMgbm90IGhpZGRlbiAoZGlzcGxheTogbm9uZSlcblx0XHRcdGlmICggcmVjdC53aWR0aCB8fCByZWN0LmhlaWdodCApIHtcblx0XHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdFx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0XHRyZXR1cm4gcmVjdDtcblx0XHR9LFxuXHRcblx0XHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFxuXHRcdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXHRcblx0XHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFxuXHRcdFx0fSBlbHNlIHtcblx0XG5cdFx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cdFxuXHRcdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlIClcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9LFxuXHRcblx0XHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0XHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdFx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdFx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHRcdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0XHQvL1xuXHRcdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHRcdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHRcdC8vXG5cdFx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0XHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXHRcblx0XHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0gKTtcblx0XG5cdC8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xuXHRqUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdFx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblx0XG5cdFx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblx0XG5cdFx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0XHQpO1xuXHRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdFx0fVxuXHRcdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0XHR9O1xuXHR9ICk7XG5cdFxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG5cdC8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG5cdC8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuXHQvLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuXHQvLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuXHQvLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxuXHRqUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cdFxuXHRcdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHR9ICk7XG5cdFxuXHRcblx0Ly8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5cdGpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0XHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblx0XG5cdFx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblx0XG5cdFx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0XHR2YXIgZG9jO1xuXHRcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcblx0XHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblx0XG5cdFx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFxuXHRcdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cdFxuXHRcdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHRcdH07XG5cdFx0fSApO1xuXHR9ICk7XG5cdFxuXHRcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRcblx0XHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHRcdH0sXG5cdFx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0XHR9LFxuXHRcblx0XHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHRcdH0sXG5cdFx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cdFxuXHRcdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdFx0fVxuXHR9ICk7XG5cdFxuXHRqUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcblx0XG5cdFxuXHRcblx0XG5cdC8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuXHQvLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG5cdC8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuXHQvLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG5cdC8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuXHQvLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcblx0Ly8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXHRcblx0Ly8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcblx0Ly8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuXHQvLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cdFxuXHRpZiAoIHRydWUgKSB7XG5cdFx0IShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW10sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5O1xuXHRcdH0uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcblx0fVxuXHRcblx0XG5cdFxuXHRcblx0dmFyXG5cdFxuXHRcdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRcdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXHRcblx0XHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRcdF8kID0gd2luZG93LiQ7XG5cdFxuXHRqUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRcdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHRcdHdpbmRvdy4kID0gXyQ7XG5cdFx0fVxuXHRcblx0XHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9O1xuXHRcblx0Ly8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcblx0Ly8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuXHQvLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5cdGlmICggIW5vR2xvYmFsICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcblx0fVxuXHRcblx0XG5cdFxuXHRcblx0XG5cdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcblxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187Lypcblx0KiBsb2dsZXZlbCAtIGh0dHBzOi8vZ2l0aHViLmNvbS9waW10ZXJyeS9sb2dsZXZlbFxuXHQqXG5cdCogQ29weXJpZ2h0IChjKSAyMDEzIFRpbSBQZXJyeVxuXHQqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblx0Ki9cblx0KGZ1bmN0aW9uIChyb290LCBkZWZpbml0aW9uKSB7XG5cdCAgICBcInVzZSBzdHJpY3RcIjtcblx0ICAgIGlmICh0cnVlKSB7XG5cdCAgICAgICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZGVmaW5pdGlvbiksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgPyAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXywgZXhwb3J0cywgbW9kdWxlKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdCAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJvb3QubG9nID0gZGVmaW5pdGlvbigpO1xuXHQgICAgfVxuXHR9KHRoaXMsIGZ1bmN0aW9uICgpIHtcblx0ICAgIFwidXNlIHN0cmljdFwiO1xuXHQgICAgdmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuXHQgICAgdmFyIHVuZGVmaW5lZFR5cGUgPSBcInVuZGVmaW5lZFwiO1xuXHRcblx0ICAgIGZ1bmN0aW9uIHJlYWxNZXRob2QobWV0aG9kTmFtZSkge1xuXHQgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFdlIGNhbid0IGJ1aWxkIGEgcmVhbCBtZXRob2Qgd2l0aG91dCBhIGNvbnNvbGUgdG8gbG9nIHRvXG5cdCAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlW21ldGhvZE5hbWVdICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgbWV0aG9kTmFtZSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlLmxvZyAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsICdsb2cnKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gbm9vcDtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgZnVuY3Rpb24gYmluZE1ldGhvZChvYmosIG1ldGhvZE5hbWUpIHtcblx0ICAgICAgICB2YXIgbWV0aG9kID0gb2JqW21ldGhvZE5hbWVdO1xuXHQgICAgICAgIGlmICh0eXBlb2YgbWV0aG9kLmJpbmQgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5iaW5kKG9iaik7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKG1ldGhvZCwgb2JqKTtcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAgICAgLy8gTWlzc2luZyBiaW5kIHNoaW0gb3IgSUU4ICsgTW9kZXJuaXpyLCBmYWxsYmFjayB0byB3cmFwcGluZ1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkobWV0aG9kLCBbb2JqLCBhcmd1bWVudHNdKTtcblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gdGhlc2UgcHJpdmF0ZSBmdW5jdGlvbnMgYWx3YXlzIG5lZWQgYHRoaXNgIHRvIGJlIHNldCBwcm9wZXJseVxuXHRcblx0ICAgIGZ1bmN0aW9uIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IHVuZGVmaW5lZFR5cGUpIHtcblx0ICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMsIGxldmVsLCBsb2dnZXJOYW1lKTtcblx0ICAgICAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9XG5cdFxuXHQgICAgZnVuY3Rpb24gcmVwbGFjZUxvZ2dpbmdNZXRob2RzKGxldmVsLCBsb2dnZXJOYW1lKSB7XG5cdCAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvZ01ldGhvZHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSBsb2dNZXRob2RzW2ldO1xuXHQgICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdID0gKGkgPCBsZXZlbCkgP1xuXHQgICAgICAgICAgICAgICAgbm9vcCA6XG5cdCAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBmdW5jdGlvbiBkZWZhdWx0TWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSkge1xuXHQgICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG5cdCAgICAgICAgcmV0dXJuIHJlYWxNZXRob2QobWV0aG9kTmFtZSkgfHxcblx0ICAgICAgICAgICAgICAgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBsb2dNZXRob2RzID0gW1xuXHQgICAgICAgIFwidHJhY2VcIixcblx0ICAgICAgICBcImRlYnVnXCIsXG5cdCAgICAgICAgXCJpbmZvXCIsXG5cdCAgICAgICAgXCJ3YXJuXCIsXG5cdCAgICAgICAgXCJlcnJvclwiXG5cdCAgICBdO1xuXHRcblx0ICAgIGZ1bmN0aW9uIExvZ2dlcihuYW1lLCBkZWZhdWx0TGV2ZWwsIGZhY3RvcnkpIHtcblx0ICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgICAgICB2YXIgY3VycmVudExldmVsO1xuXHQgICAgICB2YXIgc3RvcmFnZUtleSA9IFwibG9nbGV2ZWxcIjtcblx0ICAgICAgaWYgKG5hbWUpIHtcblx0ICAgICAgICBzdG9yYWdlS2V5ICs9IFwiOlwiICsgbmFtZTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgZnVuY3Rpb24gcGVyc2lzdExldmVsSWZQb3NzaWJsZShsZXZlbE51bSkge1xuXHQgICAgICAgICAgdmFyIGxldmVsTmFtZSA9IChsb2dNZXRob2RzW2xldmVsTnVtXSB8fCAnc2lsZW50JykudG9VcHBlckNhc2UoKTtcblx0XG5cdCAgICAgICAgICAvLyBVc2UgbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZVxuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldID0gbGV2ZWxOYW1lO1xuXHQgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblx0XG5cdCAgICAgICAgICAvLyBVc2Ugc2Vzc2lvbiBjb29raWUgYXMgZmFsbGJhY2tcblx0ICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmNvb2tpZSA9XG5cdCAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIiArIGxldmVsTmFtZSArIFwiO1wiO1xuXHQgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRMZXZlbCgpIHtcblx0ICAgICAgICAgIHZhciBzdG9yZWRMZXZlbDtcblx0XG5cdCAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XTtcblx0ICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblx0XG5cdCAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlZExldmVsID09PSB1bmRlZmluZWRUeXBlKSB7XG5cdCAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IHdpbmRvdy5kb2N1bWVudC5jb29raWU7XG5cdCAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNvb2tpZS5pbmRleE9mKFxuXHQgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0b3JhZ2VLZXkpICsgXCI9XCIpO1xuXHQgICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gL14oW147XSspLy5leGVjKGNvb2tpZS5zbGljZShsb2NhdGlvbikpWzFdO1xuXHQgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIC8vIElmIHRoZSBzdG9yZWQgbGV2ZWwgaXMgbm90IHZhbGlkLCB0cmVhdCBpdCBhcyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdCAgICAgICAgICBpZiAoc2VsZi5sZXZlbHNbc3RvcmVkTGV2ZWxdID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICByZXR1cm4gc3RvcmVkTGV2ZWw7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8qXG5cdCAgICAgICAqXG5cdCAgICAgICAqIFB1YmxpYyBBUElcblx0ICAgICAgICpcblx0ICAgICAgICovXG5cdFxuXHQgICAgICBzZWxmLmxldmVscyA9IHsgXCJUUkFDRVwiOiAwLCBcIkRFQlVHXCI6IDEsIFwiSU5GT1wiOiAyLCBcIldBUk5cIjogMyxcblx0ICAgICAgICAgIFwiRVJST1JcIjogNCwgXCJTSUxFTlRcIjogNX07XG5cdFxuXHQgICAgICBzZWxmLm1ldGhvZEZhY3RvcnkgPSBmYWN0b3J5IHx8IGRlZmF1bHRNZXRob2RGYWN0b3J5O1xuXHRcblx0ICAgICAgc2VsZi5nZXRMZXZlbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHJldHVybiBjdXJyZW50TGV2ZWw7XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICBzZWxmLnNldExldmVsID0gZnVuY3Rpb24gKGxldmVsLCBwZXJzaXN0KSB7XG5cdCAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcInN0cmluZ1wiICYmIHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICBsZXZlbCA9IHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJudW1iZXJcIiAmJiBsZXZlbCA+PSAwICYmIGxldmVsIDw9IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuXHQgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IGxldmVsO1xuXHQgICAgICAgICAgICAgIGlmIChwZXJzaXN0ICE9PSBmYWxzZSkgeyAgLy8gZGVmYXVsdHMgdG8gdHJ1ZVxuXHQgICAgICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsKTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgcmVwbGFjZUxvZ2dpbmdNZXRob2RzLmNhbGwoc2VsZiwgbGV2ZWwsIG5hbWUpO1xuXHQgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSAmJiBsZXZlbCA8IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuXHQgICAgICAgICAgICAgICAgICByZXR1cm4gXCJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZ1wiO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgdGhyb3cgXCJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiBcIiArIGxldmVsO1xuXHQgICAgICAgICAgfVxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgc2VsZi5zZXREZWZhdWx0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwpIHtcblx0ICAgICAgICAgIGlmICghZ2V0UGVyc2lzdGVkTGV2ZWwoKSkge1xuXHQgICAgICAgICAgICAgIHNlbGYuc2V0TGV2ZWwobGV2ZWwsIGZhbHNlKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHNlbGYuZW5hYmxlQWxsID0gZnVuY3Rpb24ocGVyc2lzdCkge1xuXHQgICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5UUkFDRSwgcGVyc2lzdCk7XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG5cdCAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlNJTEVOVCwgcGVyc2lzdCk7XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICAvLyBJbml0aWFsaXplIHdpdGggdGhlIHJpZ2h0IGxldmVsXG5cdCAgICAgIHZhciBpbml0aWFsTGV2ZWwgPSBnZXRQZXJzaXN0ZWRMZXZlbCgpO1xuXHQgICAgICBpZiAoaW5pdGlhbExldmVsID09IG51bGwpIHtcblx0ICAgICAgICAgIGluaXRpYWxMZXZlbCA9IGRlZmF1bHRMZXZlbCA9PSBudWxsID8gXCJXQVJOXCIgOiBkZWZhdWx0TGV2ZWw7XG5cdCAgICAgIH1cblx0ICAgICAgc2VsZi5zZXRMZXZlbChpbml0aWFsTGV2ZWwsIGZhbHNlKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKlxuXHQgICAgICpcblx0ICAgICAqIFBhY2thZ2UtbGV2ZWwgQVBJXG5cdCAgICAgKlxuXHQgICAgICovXG5cdFxuXHQgICAgdmFyIGRlZmF1bHRMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cdFxuXHQgICAgdmFyIF9sb2dnZXJzQnlOYW1lID0ge307XG5cdCAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlciA9IGZ1bmN0aW9uIGdldExvZ2dlcihuYW1lKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUgPT09IFwiXCIpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBzdXBwbHkgYSBuYW1lIHdoZW4gY3JlYXRpbmcgYSBsb2dnZXIuXCIpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdO1xuXHQgICAgICAgIGlmICghbG9nZ2VyKSB7XG5cdCAgICAgICAgICBsb2dnZXIgPSBfbG9nZ2Vyc0J5TmFtZVtuYW1lXSA9IG5ldyBMb2dnZXIoXG5cdCAgICAgICAgICAgIG5hbWUsIGRlZmF1bHRMb2dnZXIuZ2V0TGV2ZWwoKSwgZGVmYXVsdExvZ2dlci5tZXRob2RGYWN0b3J5KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGxvZ2dlcjtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gR3JhYiB0aGUgY3VycmVudCBnbG9iYWwgbG9nIHZhcmlhYmxlIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdCAgICB2YXIgX2xvZyA9ICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlKSA/IHdpbmRvdy5sb2cgOiB1bmRlZmluZWQ7XG5cdCAgICBkZWZhdWx0TG9nZ2VyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSAmJlxuXHQgICAgICAgICAgICAgICB3aW5kb3cubG9nID09PSBkZWZhdWx0TG9nZ2VyKSB7XG5cdCAgICAgICAgICAgIHdpbmRvdy5sb2cgPSBfbG9nO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xuXHR9KSk7XG5cblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyFmdW5jdGlvbigpIHtcblx0ICB2YXIgZDMgPSB7XG5cdCAgICB2ZXJzaW9uOiBcIjMuNS4xN1wiXG5cdCAgfTtcblx0ICB2YXIgZDNfYXJyYXlTbGljZSA9IFtdLnNsaWNlLCBkM19hcnJheSA9IGZ1bmN0aW9uKGxpc3QpIHtcblx0ICAgIHJldHVybiBkM19hcnJheVNsaWNlLmNhbGwobGlzdCk7XG5cdCAgfTtcblx0ICB2YXIgZDNfZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50O1xuXHQgIGZ1bmN0aW9uIGQzX2RvY3VtZW50RWxlbWVudChub2RlKSB7XG5cdCAgICByZXR1cm4gbm9kZSAmJiAobm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUuZG9jdW1lbnQgfHwgbm9kZSkuZG9jdW1lbnRFbGVtZW50O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM193aW5kb3cobm9kZSkge1xuXHQgICAgcmV0dXJuIG5vZGUgJiYgKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgbm9kZS5kb2N1bWVudCAmJiBub2RlIHx8IG5vZGUuZGVmYXVsdFZpZXcpO1xuXHQgIH1cblx0ICBpZiAoZDNfZG9jdW1lbnQpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIGQzX2FycmF5KGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jaGlsZE5vZGVzKVswXS5ub2RlVHlwZTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgZDNfYXJyYXkgPSBmdW5jdGlvbihsaXN0KSB7XG5cdCAgICAgICAgdmFyIGkgPSBsaXN0Lmxlbmd0aCwgYXJyYXkgPSBuZXcgQXJyYXkoaSk7XG5cdCAgICAgICAgd2hpbGUgKGktLSkgYXJyYXlbaV0gPSBsaXN0W2ldO1xuXHQgICAgICAgIHJldHVybiBhcnJheTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICB9XG5cdCAgaWYgKCFEYXRlLm5vdykgRGF0ZS5ub3cgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiArbmV3IERhdGUoKTtcblx0ICB9O1xuXHQgIGlmIChkM19kb2N1bWVudCkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgZDNfZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKS5zdHlsZS5zZXRQcm9wZXJ0eShcIm9wYWNpdHlcIiwgMCwgXCJcIik7XG5cdCAgICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgICB2YXIgZDNfZWxlbWVudF9wcm90b3R5cGUgPSB0aGlzLkVsZW1lbnQucHJvdG90eXBlLCBkM19lbGVtZW50X3NldEF0dHJpYnV0ZSA9IGQzX2VsZW1lbnRfcHJvdG90eXBlLnNldEF0dHJpYnV0ZSwgZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGVOUyA9IGQzX2VsZW1lbnRfcHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TLCBkM19zdHlsZV9wcm90b3R5cGUgPSB0aGlzLkNTU1N0eWxlRGVjbGFyYXRpb24ucHJvdG90eXBlLCBkM19zdHlsZV9zZXRQcm9wZXJ0eSA9IGQzX3N0eWxlX3Byb3RvdHlwZS5zZXRQcm9wZXJ0eTtcblx0ICAgICAgZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcblx0ICAgICAgICBkM19lbGVtZW50X3NldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlICsgXCJcIik7XG5cdCAgICAgIH07XG5cdCAgICAgIGQzX2VsZW1lbnRfcHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TID0gZnVuY3Rpb24oc3BhY2UsIGxvY2FsLCB2YWx1ZSkge1xuXHQgICAgICAgIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlTlMuY2FsbCh0aGlzLCBzcGFjZSwgbG9jYWwsIHZhbHVlICsgXCJcIik7XG5cdCAgICAgIH07XG5cdCAgICAgIGQzX3N0eWxlX3Byb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuXHQgICAgICAgIGQzX3N0eWxlX3NldFByb3BlcnR5LmNhbGwodGhpcywgbmFtZSwgdmFsdWUgKyBcIlwiLCBwcmlvcml0eSk7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfVxuXHQgIGQzLmFzY2VuZGluZyA9IGQzX2FzY2VuZGluZztcblx0ICBmdW5jdGlvbiBkM19hc2NlbmRpbmcoYSwgYikge1xuXHQgICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xuXHQgIH1cblx0ICBkMy5kZXNjZW5kaW5nID0gZnVuY3Rpb24oYSwgYikge1xuXHQgICAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xuXHQgIH07XG5cdCAgZDMubWluID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcblx0ICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGEsIGI7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+PSBiKSB7XG5cdCAgICAgICAgYSA9IGI7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGEgPiBiKSBhID0gYjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcblx0ICAgICAgICBhID0gYjtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYSA+IGIpIGEgPSBiO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGE7XG5cdCAgfTtcblx0ICBkMy5tYXggPSBmdW5jdGlvbihhcnJheSwgZikge1xuXHQgICAgdmFyIGkgPSAtMSwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgYjtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcblx0ICAgICAgICBhID0gYjtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+IGEpIGEgPSBiO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPj0gYikge1xuXHQgICAgICAgIGEgPSBiO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID4gYSkgYSA9IGI7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gYTtcblx0ICB9O1xuXHQgIGQzLmV4dGVudCA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG5cdCAgICB2YXIgaSA9IC0xLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBiLCBjO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikge1xuXHQgICAgICAgIGEgPSBjID0gYjtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwpIHtcblx0ICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuXHQgICAgICAgIGlmIChjIDwgYikgYyA9IGI7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcblx0ICAgICAgICBhID0gYyA9IGI7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsKSB7XG5cdCAgICAgICAgaWYgKGEgPiBiKSBhID0gYjtcblx0ICAgICAgICBpZiAoYyA8IGIpIGMgPSBiO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gWyBhLCBjIF07XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19udW1iZXIoeCkge1xuXHQgICAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbnVtZXJpYyh4KSB7XG5cdCAgICByZXR1cm4gIWlzTmFOKHgpO1xuXHQgIH1cblx0ICBkMy5zdW0gPSBmdW5jdGlvbihhcnJheSwgZikge1xuXHQgICAgdmFyIHMgPSAwLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBpID0gLTE7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9ICthcnJheVtpXSkpIHMgKz0gYTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gK2YuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSkgcyArPSBhO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHM7XG5cdCAgfTtcblx0ICBkMy5tZWFuID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcblx0ICAgIHZhciBzID0gMCwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgaSA9IC0xLCBqID0gbjtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGFycmF5W2ldKSkpIHMgKz0gYTsgZWxzZSAtLWo7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSBzICs9IGE7IGVsc2UgLS1qO1xuXHQgICAgfVxuXHQgICAgaWYgKGopIHJldHVybiBzIC8gajtcblx0ICB9O1xuXHQgIGQzLnF1YW50aWxlID0gZnVuY3Rpb24odmFsdWVzLCBwKSB7XG5cdCAgICB2YXIgSCA9ICh2YWx1ZXMubGVuZ3RoIC0gMSkgKiBwICsgMSwgaCA9IE1hdGguZmxvb3IoSCksIHYgPSArdmFsdWVzW2ggLSAxXSwgZSA9IEggLSBoO1xuXHQgICAgcmV0dXJuIGUgPyB2ICsgZSAqICh2YWx1ZXNbaF0gLSB2KSA6IHY7XG5cdCAgfTtcblx0ICBkMy5tZWRpYW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuXHQgICAgdmFyIG51bWJlcnMgPSBbXSwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgaSA9IC0xO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkgbnVtYmVycy5wdXNoKGEpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSkgbnVtYmVycy5wdXNoKGEpO1xuXHQgICAgfVxuXHQgICAgaWYgKG51bWJlcnMubGVuZ3RoKSByZXR1cm4gZDMucXVhbnRpbGUobnVtYmVycy5zb3J0KGQzX2FzY2VuZGluZyksIC41KTtcblx0ICB9O1xuXHQgIGQzLnZhcmlhbmNlID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcblx0ICAgIHZhciBuID0gYXJyYXkubGVuZ3RoLCBtID0gMCwgYSwgZCwgcyA9IDAsIGkgPSAtMSwgaiA9IDA7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkge1xuXHQgICAgICAgICAgZCA9IGEgLSBtO1xuXHQgICAgICAgICAgbSArPSBkIC8gKytqO1xuXHQgICAgICAgICAgcyArPSBkICogKGEgLSBtKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSB7XG5cdCAgICAgICAgICBkID0gYSAtIG07XG5cdCAgICAgICAgICBtICs9IGQgLyArK2o7XG5cdCAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKGogPiAxKSByZXR1cm4gcyAvIChqIC0gMSk7XG5cdCAgfTtcblx0ICBkMy5kZXZpYXRpb24gPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciB2ID0gZDMudmFyaWFuY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2Jpc2VjdG9yKGNvbXBhcmUpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuXHQgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgbG8gPSAwO1xuXHQgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkgaGkgPSBhLmxlbmd0aDtcblx0ICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuXHQgICAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG5cdCAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxOyBlbHNlIGhpID0gbWlkO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbG87XG5cdCAgICAgIH0sXG5cdCAgICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcblx0ICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGxvID0gMDtcblx0ICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIGhpID0gYS5sZW5ndGg7XG5cdCAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcblx0ICAgICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuXHQgICAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkOyBlbHNlIGxvID0gbWlkICsgMTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGxvO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICB2YXIgZDNfYmlzZWN0ID0gZDNfYmlzZWN0b3IoZDNfYXNjZW5kaW5nKTtcblx0ICBkMy5iaXNlY3RMZWZ0ID0gZDNfYmlzZWN0LmxlZnQ7XG5cdCAgZDMuYmlzZWN0ID0gZDMuYmlzZWN0UmlnaHQgPSBkM19iaXNlY3QucmlnaHQ7XG5cdCAgZDMuYmlzZWN0b3IgPSBmdW5jdGlvbihmKSB7XG5cdCAgICByZXR1cm4gZDNfYmlzZWN0b3IoZi5sZW5ndGggPT09IDEgPyBmdW5jdGlvbihkLCB4KSB7XG5cdCAgICAgIHJldHVybiBkM19hc2NlbmRpbmcoZihkKSwgeCk7XG5cdCAgICB9IDogZik7XG5cdCAgfTtcblx0ICBkMy5zaHVmZmxlID0gZnVuY3Rpb24oYXJyYXksIGkwLCBpMSkge1xuXHQgICAgaWYgKChtID0gYXJndW1lbnRzLmxlbmd0aCkgPCAzKSB7XG5cdCAgICAgIGkxID0gYXJyYXkubGVuZ3RoO1xuXHQgICAgICBpZiAobSA8IDIpIGkwID0gMDtcblx0ICAgIH1cblx0ICAgIHZhciBtID0gaTEgLSBpMCwgdCwgaTtcblx0ICAgIHdoaWxlIChtKSB7XG5cdCAgICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcblx0ICAgICAgdCA9IGFycmF5W20gKyBpMF0sIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdLCBhcnJheVtpICsgaTBdID0gdDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBhcnJheTtcblx0ICB9O1xuXHQgIGQzLnBlcm11dGUgPSBmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuXHQgICAgdmFyIGkgPSBpbmRleGVzLmxlbmd0aCwgcGVybXV0ZXMgPSBuZXcgQXJyYXkoaSk7XG5cdCAgICB3aGlsZSAoaS0tKSBwZXJtdXRlc1tpXSA9IGFycmF5W2luZGV4ZXNbaV1dO1xuXHQgICAgcmV0dXJuIHBlcm11dGVzO1xuXHQgIH07XG5cdCAgZDMucGFpcnMgPSBmdW5jdGlvbihhcnJheSkge1xuXHQgICAgdmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoIC0gMSwgcDAsIHAxID0gYXJyYXlbMF0sIHBhaXJzID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuXHQgICAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IFsgcDAgPSBwMSwgcDEgPSBhcnJheVsrK2ldIF07XG5cdCAgICByZXR1cm4gcGFpcnM7XG5cdCAgfTtcblx0ICBkMy50cmFuc3Bvc2UgPSBmdW5jdGlvbihtYXRyaXgpIHtcblx0ICAgIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuXHQgICAgZm9yICh2YXIgaSA9IC0xLCBtID0gZDMubWluKG1hdHJpeCwgZDNfdHJhbnNwb3NlTGVuZ3RoKSwgdHJhbnNwb3NlID0gbmV3IEFycmF5KG0pOyArK2kgPCBtOyApIHtcblx0ICAgICAgZm9yICh2YXIgaiA9IC0xLCBuLCByb3cgPSB0cmFuc3Bvc2VbaV0gPSBuZXcgQXJyYXkobik7ICsraiA8IG47ICkge1xuXHQgICAgICAgIHJvd1tqXSA9IG1hdHJpeFtqXVtpXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRyYW5zcG9zZTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3RyYW5zcG9zZUxlbmd0aChkKSB7XG5cdCAgICByZXR1cm4gZC5sZW5ndGg7XG5cdCAgfVxuXHQgIGQzLnppcCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzLnRyYW5zcG9zZShhcmd1bWVudHMpO1xuXHQgIH07XG5cdCAgZDMua2V5cyA9IGZ1bmN0aW9uKG1hcCkge1xuXHQgICAgdmFyIGtleXMgPSBbXTtcblx0ICAgIGZvciAodmFyIGtleSBpbiBtYXApIGtleXMucHVzaChrZXkpO1xuXHQgICAgcmV0dXJuIGtleXM7XG5cdCAgfTtcblx0ICBkMy52YWx1ZXMgPSBmdW5jdGlvbihtYXApIHtcblx0ICAgIHZhciB2YWx1ZXMgPSBbXTtcblx0ICAgIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcblx0ICAgIHJldHVybiB2YWx1ZXM7XG5cdCAgfTtcblx0ICBkMy5lbnRyaWVzID0gZnVuY3Rpb24obWFwKSB7XG5cdCAgICB2YXIgZW50cmllcyA9IFtdO1xuXHQgICAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtcblx0ICAgICAga2V5OiBrZXksXG5cdCAgICAgIHZhbHVlOiBtYXBba2V5XVxuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gZW50cmllcztcblx0ICB9O1xuXHQgIGQzLm1lcmdlID0gZnVuY3Rpb24oYXJyYXlzKSB7XG5cdCAgICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsIG0sIGkgPSAtMSwgaiA9IDAsIG1lcmdlZCwgYXJyYXk7XG5cdCAgICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuXHQgICAgbWVyZ2VkID0gbmV3IEFycmF5KGopO1xuXHQgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG5cdCAgICAgIGFycmF5ID0gYXJyYXlzW25dO1xuXHQgICAgICBtID0gYXJyYXkubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAoLS1tID49IDApIHtcblx0ICAgICAgICBtZXJnZWRbLS1qXSA9IGFycmF5W21dO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbWVyZ2VkO1xuXHQgIH07XG5cdCAgdmFyIGFicyA9IE1hdGguYWJzO1xuXHQgIGQzLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuXHQgICAgICBzdGVwID0gMTtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdCAgICAgICAgc3RvcCA9IHN0YXJ0O1xuXHQgICAgICAgIHN0YXJ0ID0gMDtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKChzdG9wIC0gc3RhcnQpIC8gc3RlcCA9PT0gSW5maW5pdHkpIHRocm93IG5ldyBFcnJvcihcImluZmluaXRlIHJhbmdlXCIpO1xuXHQgICAgdmFyIHJhbmdlID0gW10sIGsgPSBkM19yYW5nZV9pbnRlZ2VyU2NhbGUoYWJzKHN0ZXApKSwgaSA9IC0xLCBqO1xuXHQgICAgc3RhcnQgKj0gaywgc3RvcCAqPSBrLCBzdGVwICo9IGs7XG5cdCAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgoaiA9IHN0YXJ0ICsgc3RlcCAqICsraSkgPiBzdG9wKSByYW5nZS5wdXNoKGogLyBrKTsgZWxzZSB3aGlsZSAoKGogPSBzdGFydCArIHN0ZXAgKiArK2kpIDwgc3RvcCkgcmFuZ2UucHVzaChqIC8gayk7XG5cdCAgICByZXR1cm4gcmFuZ2U7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19yYW5nZV9pbnRlZ2VyU2NhbGUoeCkge1xuXHQgICAgdmFyIGsgPSAxO1xuXHQgICAgd2hpbGUgKHggKiBrICUgMSkgayAqPSAxMDtcblx0ICAgIHJldHVybiBrO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19jbGFzcyhjdG9yLCBwcm9wZXJ0aWVzKSB7XG5cdCAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuXHQgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3Rvci5wcm90b3R5cGUsIGtleSwge1xuXHQgICAgICAgIHZhbHVlOiBwcm9wZXJ0aWVzW2tleV0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogZmFsc2Vcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGQzLm1hcCA9IGZ1bmN0aW9uKG9iamVjdCwgZikge1xuXHQgICAgdmFyIG1hcCA9IG5ldyBkM19NYXAoKTtcblx0ICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBkM19NYXApIHtcblx0ICAgICAgb2JqZWN0LmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHQgICAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcblx0ICAgICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGgsIG87XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pOyBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYuY2FsbChvYmplY3QsIG8gPSBvYmplY3RbaV0sIGkpLCBvKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbWFwO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfTWFwKCkge1xuXHQgICAgdGhpcy5fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0ICB9XG5cdCAgdmFyIGQzX21hcF9wcm90byA9IFwiX19wcm90b19fXCIsIGQzX21hcF96ZXJvID0gXCJcXHgwMFwiO1xuXHQgIGQzX2NsYXNzKGQzX01hcCwge1xuXHQgICAgaGFzOiBkM19tYXBfaGFzLFxuXHQgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX1tkM19tYXBfZXNjYXBlKGtleSldO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fW2QzX21hcF9lc2NhcGUoa2V5KV0gPSB2YWx1ZTtcblx0ICAgIH0sXG5cdCAgICByZW1vdmU6IGQzX21hcF9yZW1vdmUsXG5cdCAgICBrZXlzOiBkM19tYXBfa2V5cyxcblx0ICAgIHZhbHVlczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblx0ICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgdmFsdWVzLnB1c2godGhpcy5fW2tleV0pO1xuXHQgICAgICByZXR1cm4gdmFsdWVzO1xuXHQgICAgfSxcblx0ICAgIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgZW50cmllcyA9IFtdO1xuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBlbnRyaWVzLnB1c2goe1xuXHQgICAgICAgIGtleTogZDNfbWFwX3VuZXNjYXBlKGtleSksXG5cdCAgICAgICAgdmFsdWU6IHRoaXMuX1trZXldXG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gZW50cmllcztcblx0ICAgIH0sXG5cdCAgICBzaXplOiBkM19tYXBfc2l6ZSxcblx0ICAgIGVtcHR5OiBkM19tYXBfZW1wdHksXG5cdCAgICBmb3JFYWNoOiBmdW5jdGlvbihmKSB7XG5cdCAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIGYuY2FsbCh0aGlzLCBkM19tYXBfdW5lc2NhcGUoa2V5KSwgdGhpcy5fW2tleV0pO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIGZ1bmN0aW9uIGQzX21hcF9lc2NhcGUoa2V5KSB7XG5cdCAgICByZXR1cm4gKGtleSArPSBcIlwiKSA9PT0gZDNfbWFwX3Byb3RvIHx8IGtleVswXSA9PT0gZDNfbWFwX3plcm8gPyBkM19tYXBfemVybyArIGtleSA6IGtleTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbWFwX3VuZXNjYXBlKGtleSkge1xuXHQgICAgcmV0dXJuIChrZXkgKz0gXCJcIilbMF0gPT09IGQzX21hcF96ZXJvID8ga2V5LnNsaWNlKDEpIDoga2V5O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19tYXBfaGFzKGtleSkge1xuXHQgICAgcmV0dXJuIGQzX21hcF9lc2NhcGUoa2V5KSBpbiB0aGlzLl87XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX21hcF9yZW1vdmUoa2V5KSB7XG5cdCAgICByZXR1cm4gKGtleSA9IGQzX21hcF9lc2NhcGUoa2V5KSkgaW4gdGhpcy5fICYmIGRlbGV0ZSB0aGlzLl9ba2V5XTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbWFwX2tleXMoKSB7XG5cdCAgICB2YXIga2V5cyA9IFtdO1xuXHQgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykga2V5cy5wdXNoKGQzX21hcF91bmVzY2FwZShrZXkpKTtcblx0ICAgIHJldHVybiBrZXlzO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19tYXBfc2l6ZSgpIHtcblx0ICAgIHZhciBzaXplID0gMDtcblx0ICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pICsrc2l6ZTtcblx0ICAgIHJldHVybiBzaXplO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19tYXBfZW1wdHkoKSB7XG5cdCAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSByZXR1cm4gZmFsc2U7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdCAgZDMubmVzdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIG5lc3QgPSB7fSwga2V5cyA9IFtdLCBzb3J0S2V5cyA9IFtdLCBzb3J0VmFsdWVzLCByb2xsdXA7XG5cdCAgICBmdW5jdGlvbiBtYXAobWFwVHlwZSwgYXJyYXksIGRlcHRoKSB7XG5cdCAgICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHJvbGx1cCA/IHJvbGx1cC5jYWxsKG5lc3QsIGFycmF5KSA6IHNvcnRWYWx1ZXMgPyBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpIDogYXJyYXk7XG5cdCAgICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGtleSA9IGtleXNbZGVwdGgrK10sIGtleVZhbHVlLCBvYmplY3QsIHNldHRlciwgdmFsdWVzQnlLZXkgPSBuZXcgZDNfTWFwKCksIHZhbHVlcztcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KG9iamVjdCA9IGFycmF5W2ldKSkpIHtcblx0ICAgICAgICAgIHZhbHVlcy5wdXNoKG9iamVjdCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgWyBvYmplY3QgXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChtYXBUeXBlKSB7XG5cdCAgICAgICAgb2JqZWN0ID0gbWFwVHlwZSgpO1xuXHQgICAgICAgIHNldHRlciA9IGZ1bmN0aW9uKGtleVZhbHVlLCB2YWx1ZXMpIHtcblx0ICAgICAgICAgIG9iamVjdC5zZXQoa2V5VmFsdWUsIG1hcChtYXBUeXBlLCB2YWx1ZXMsIGRlcHRoKSk7XG5cdCAgICAgICAgfTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBvYmplY3QgPSB7fTtcblx0ICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihrZXlWYWx1ZSwgdmFsdWVzKSB7XG5cdCAgICAgICAgICBvYmplY3Rba2V5VmFsdWVdID0gbWFwKG1hcFR5cGUsIHZhbHVlcywgZGVwdGgpO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgICAgdmFsdWVzQnlLZXkuZm9yRWFjaChzZXR0ZXIpO1xuXHQgICAgICByZXR1cm4gb2JqZWN0O1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG5cdCAgICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcblx0ICAgICAgdmFyIGFycmF5ID0gW10sIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCsrXTtcblx0ICAgICAgbWFwLmZvckVhY2goZnVuY3Rpb24oa2V5LCBrZXlNYXApIHtcblx0ICAgICAgICBhcnJheS5wdXNoKHtcblx0ICAgICAgICAgIGtleToga2V5LFxuXHQgICAgICAgICAgdmFsdWVzOiBlbnRyaWVzKGtleU1hcCwgZGVwdGgpXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gc29ydEtleSA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHQgICAgICAgIHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7XG5cdCAgICAgIH0pIDogYXJyYXk7XG5cdCAgICB9XG5cdCAgICBuZXN0Lm1hcCA9IGZ1bmN0aW9uKGFycmF5LCBtYXBUeXBlKSB7XG5cdCAgICAgIHJldHVybiBtYXAobWFwVHlwZSwgYXJyYXksIDApO1xuXHQgICAgfTtcblx0ICAgIG5lc3QuZW50cmllcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG5cdCAgICAgIHJldHVybiBlbnRyaWVzKG1hcChkMy5tYXAsIGFycmF5LCAwKSwgMCk7XG5cdCAgICB9O1xuXHQgICAgbmVzdC5rZXkgPSBmdW5jdGlvbihkKSB7XG5cdCAgICAgIGtleXMucHVzaChkKTtcblx0ICAgICAgcmV0dXJuIG5lc3Q7XG5cdCAgICB9O1xuXHQgICAgbmVzdC5zb3J0S2V5cyA9IGZ1bmN0aW9uKG9yZGVyKSB7XG5cdCAgICAgIHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjtcblx0ICAgICAgcmV0dXJuIG5lc3Q7XG5cdCAgICB9O1xuXHQgICAgbmVzdC5zb3J0VmFsdWVzID0gZnVuY3Rpb24ob3JkZXIpIHtcblx0ICAgICAgc29ydFZhbHVlcyA9IG9yZGVyO1xuXHQgICAgICByZXR1cm4gbmVzdDtcblx0ICAgIH07XG5cdCAgICBuZXN0LnJvbGx1cCA9IGZ1bmN0aW9uKGYpIHtcblx0ICAgICAgcm9sbHVwID0gZjtcblx0ICAgICAgcmV0dXJuIG5lc3Q7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIG5lc3Q7XG5cdCAgfTtcblx0ICBkMy5zZXQgPSBmdW5jdGlvbihhcnJheSkge1xuXHQgICAgdmFyIHNldCA9IG5ldyBkM19TZXQoKTtcblx0ICAgIGlmIChhcnJheSkgZm9yICh2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGg7IGkgPCBuOyArK2kpIHNldC5hZGQoYXJyYXlbaV0pO1xuXHQgICAgcmV0dXJuIHNldDtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX1NldCgpIHtcblx0ICAgIHRoaXMuXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdCAgfVxuXHQgIGQzX2NsYXNzKGQzX1NldCwge1xuXHQgICAgaGFzOiBkM19tYXBfaGFzLFxuXHQgICAgYWRkOiBmdW5jdGlvbihrZXkpIHtcblx0ICAgICAgdGhpcy5fW2QzX21hcF9lc2NhcGUoa2V5ICs9IFwiXCIpXSA9IHRydWU7XG5cdCAgICAgIHJldHVybiBrZXk7XG5cdCAgICB9LFxuXHQgICAgcmVtb3ZlOiBkM19tYXBfcmVtb3ZlLFxuXHQgICAgdmFsdWVzOiBkM19tYXBfa2V5cyxcblx0ICAgIHNpemU6IGQzX21hcF9zaXplLFxuXHQgICAgZW1wdHk6IGQzX21hcF9lbXB0eSxcblx0ICAgIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHtcblx0ICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgZi5jYWxsKHRoaXMsIGQzX21hcF91bmVzY2FwZShrZXkpKTtcblx0ICAgIH1cblx0ICB9KTtcblx0ICBkMy5iZWhhdmlvciA9IHt9O1xuXHQgIGZ1bmN0aW9uIGQzX2lkZW50aXR5KGQpIHtcblx0ICAgIHJldHVybiBkO1xuXHQgIH1cblx0ICBkMy5yZWJpbmQgPSBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuXHQgICAgdmFyIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgbWV0aG9kO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIHRhcmdldFttZXRob2QgPSBhcmd1bWVudHNbaV1dID0gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBzb3VyY2VbbWV0aG9kXSk7XG5cdCAgICByZXR1cm4gdGFyZ2V0O1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBtZXRob2QpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHZhbHVlID0gbWV0aG9kLmFwcGx5KHNvdXJjZSwgYXJndW1lbnRzKTtcblx0ICAgICAgcmV0dXJuIHZhbHVlID09PSBzb3VyY2UgPyB0YXJnZXQgOiB2YWx1ZTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3ZlbmRvclN5bWJvbChvYmplY3QsIG5hbWUpIHtcblx0ICAgIGlmIChuYW1lIGluIG9iamVjdCkgcmV0dXJuIG5hbWU7XG5cdCAgICBuYW1lID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbiA9IGQzX3ZlbmRvclByZWZpeGVzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuXHQgICAgICB2YXIgcHJlZml4TmFtZSA9IGQzX3ZlbmRvclByZWZpeGVzW2ldICsgbmFtZTtcblx0ICAgICAgaWYgKHByZWZpeE5hbWUgaW4gb2JqZWN0KSByZXR1cm4gcHJlZml4TmFtZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgdmFyIGQzX3ZlbmRvclByZWZpeGVzID0gWyBcIndlYmtpdFwiLCBcIm1zXCIsIFwibW96XCIsIFwiTW96XCIsIFwib1wiLCBcIk9cIiBdO1xuXHQgIGZ1bmN0aW9uIGQzX25vb3AoKSB7fVxuXHQgIGQzLmRpc3BhdGNoID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgZGlzcGF0Y2ggPSBuZXcgZDNfZGlzcGF0Y2goKSwgaSA9IC0xLCBuID0gYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpO1xuXHQgICAgcmV0dXJuIGRpc3BhdGNoO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZGlzcGF0Y2goKSB7fVxuXHQgIGQzX2Rpc3BhdGNoLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG5cdCAgICB2YXIgaSA9IHR5cGUuaW5kZXhPZihcIi5cIiksIG5hbWUgPSBcIlwiO1xuXHQgICAgaWYgKGkgPj0gMCkge1xuXHQgICAgICBuYW1lID0gdHlwZS5zbGljZShpICsgMSk7XG5cdCAgICAgIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpO1xuXHQgICAgfVxuXHQgICAgaWYgKHR5cGUpIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHRoaXNbdHlwZV0ub24obmFtZSkgOiB0aGlzW3R5cGVdLm9uKG5hbWUsIGxpc3RlbmVyKTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG5cdCAgICAgIGlmIChsaXN0ZW5lciA9PSBudWxsKSBmb3IgKHR5cGUgaW4gdGhpcykge1xuXHQgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KHR5cGUpKSB0aGlzW3R5cGVdLm9uKG5hbWUsIG51bGwpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpIHtcblx0ICAgIHZhciBsaXN0ZW5lcnMgPSBbXSwgbGlzdGVuZXJCeU5hbWUgPSBuZXcgZDNfTWFwKCk7XG5cdCAgICBmdW5jdGlvbiBldmVudCgpIHtcblx0ICAgICAgdmFyIHogPSBsaXN0ZW5lcnMsIGkgPSAtMSwgbiA9IHoubGVuZ3RoLCBsO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGwgPSB6W2ldLm9uKSBsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIHJldHVybiBkaXNwYXRjaDtcblx0ICAgIH1cblx0ICAgIGV2ZW50Lm9uID0gZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcblx0ICAgICAgdmFyIGwgPSBsaXN0ZW5lckJ5TmFtZS5nZXQobmFtZSksIGk7XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGwgJiYgbC5vbjtcblx0ICAgICAgaWYgKGwpIHtcblx0ICAgICAgICBsLm9uID0gbnVsbDtcblx0ICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoMCwgaSA9IGxpc3RlbmVycy5pbmRleE9mKGwpKS5jb25jYXQobGlzdGVuZXJzLnNsaWNlKGkgKyAxKSk7XG5cdCAgICAgICAgbGlzdGVuZXJCeU5hbWUucmVtb3ZlKG5hbWUpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChsaXN0ZW5lcikgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXJCeU5hbWUuc2V0KG5hbWUsIHtcblx0ICAgICAgICBvbjogbGlzdGVuZXJcblx0ICAgICAgfSkpO1xuXHQgICAgICByZXR1cm4gZGlzcGF0Y2g7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGV2ZW50O1xuXHQgIH1cblx0ICBkMy5ldmVudCA9IG51bGw7XG5cdCAgZnVuY3Rpb24gZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpIHtcblx0ICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2V2ZW50U291cmNlKCkge1xuXHQgICAgdmFyIGUgPSBkMy5ldmVudCwgcztcblx0ICAgIHdoaWxlIChzID0gZS5zb3VyY2VFdmVudCkgZSA9IHM7XG5cdCAgICByZXR1cm4gZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZXZlbnREaXNwYXRjaCh0YXJnZXQpIHtcblx0ICAgIHZhciBkaXNwYXRjaCA9IG5ldyBkM19kaXNwYXRjaCgpLCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoKytpIDwgbikgZGlzcGF0Y2hbYXJndW1lbnRzW2ldXSA9IGQzX2Rpc3BhdGNoX2V2ZW50KGRpc3BhdGNoKTtcblx0ICAgIGRpc3BhdGNoLm9mID0gZnVuY3Rpb24odGhpeiwgYXJndW1lbnR6KSB7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbihlMSkge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICB2YXIgZTAgPSBlMS5zb3VyY2VFdmVudCA9IGQzLmV2ZW50O1xuXHQgICAgICAgICAgZTEudGFyZ2V0ID0gdGFyZ2V0O1xuXHQgICAgICAgICAgZDMuZXZlbnQgPSBlMTtcblx0ICAgICAgICAgIGRpc3BhdGNoW2UxLnR5cGVdLmFwcGx5KHRoaXosIGFyZ3VtZW50eik7XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgIGQzLmV2ZW50ID0gZTA7XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkaXNwYXRjaDtcblx0ICB9XG5cdCAgZDMucmVxdW90ZSA9IGZ1bmN0aW9uKHMpIHtcblx0ICAgIHJldHVybiBzLnJlcGxhY2UoZDNfcmVxdW90ZV9yZSwgXCJcXFxcJCZcIik7XG5cdCAgfTtcblx0ICB2YXIgZDNfcmVxdW90ZV9yZSA9IC9bXFxcXFxcXlxcJFxcKlxcK1xcP1xcfFxcW1xcXVxcKFxcKVxcLlxce1xcfV0vZztcblx0ICB2YXIgZDNfc3ViY2xhc3MgPSB7fS5fX3Byb3RvX18gPyBmdW5jdGlvbihvYmplY3QsIHByb3RvdHlwZSkge1xuXHQgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcblx0ICB9IDogZnVuY3Rpb24ob2JqZWN0LCBwcm90b3R5cGUpIHtcblx0ICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3RvdHlwZSkgb2JqZWN0W3Byb3BlcnR5XSA9IHByb3RvdHlwZVtwcm9wZXJ0eV07XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb24oZ3JvdXBzKSB7XG5cdCAgICBkM19zdWJjbGFzcyhncm91cHMsIGQzX3NlbGVjdGlvblByb3RvdHlwZSk7XG5cdCAgICByZXR1cm4gZ3JvdXBzO1xuXHQgIH1cblx0ICB2YXIgZDNfc2VsZWN0ID0gZnVuY3Rpb24ocywgbikge1xuXHQgICAgcmV0dXJuIG4ucXVlcnlTZWxlY3RvcihzKTtcblx0ICB9LCBkM19zZWxlY3RBbGwgPSBmdW5jdGlvbihzLCBuKSB7XG5cdCAgICByZXR1cm4gbi5xdWVyeVNlbGVjdG9yQWxsKHMpO1xuXHQgIH0sIGQzX3NlbGVjdE1hdGNoZXMgPSBmdW5jdGlvbihuLCBzKSB7XG5cdCAgICB2YXIgZDNfc2VsZWN0TWF0Y2hlciA9IG4ubWF0Y2hlcyB8fCBuW2QzX3ZlbmRvclN5bWJvbChuLCBcIm1hdGNoZXNTZWxlY3RvclwiKV07XG5cdCAgICBkM19zZWxlY3RNYXRjaGVzID0gZnVuY3Rpb24obiwgcykge1xuXHQgICAgICByZXR1cm4gZDNfc2VsZWN0TWF0Y2hlci5jYWxsKG4sIHMpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVzKG4sIHMpO1xuXHQgIH07XG5cdCAgaWYgKHR5cGVvZiBTaXp6bGUgPT09IFwiZnVuY3Rpb25cIikge1xuXHQgICAgZDNfc2VsZWN0ID0gZnVuY3Rpb24ocywgbikge1xuXHQgICAgICByZXR1cm4gU2l6emxlKHMsIG4pWzBdIHx8IG51bGw7XG5cdCAgICB9O1xuXHQgICAgZDNfc2VsZWN0QWxsID0gU2l6emxlO1xuXHQgICAgZDNfc2VsZWN0TWF0Y2hlcyA9IFNpenpsZS5tYXRjaGVzU2VsZWN0b3I7XG5cdCAgfVxuXHQgIGQzLnNlbGVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzLnNlbGVjdChkM19kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuXHQgIH07XG5cdCAgdmFyIGQzX3NlbGVjdGlvblByb3RvdHlwZSA9IGQzLnNlbGVjdGlvbi5wcm90b3R5cGUgPSBbXTtcblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0ICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIGdyb3VwLCBub2RlO1xuXHQgICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpO1xuXHQgICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuXHQgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcblx0ICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IChncm91cCA9IHRoaXNbal0pLnBhcmVudE5vZGU7XG5cdCAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG5cdCAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuXHQgICAgICAgICAgc3ViZ3JvdXAucHVzaChzdWJub2RlID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSk7XG5cdCAgICAgICAgICBpZiAoc3Vibm9kZSAmJiBcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobnVsbCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpIHtcblx0ICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdG9yIDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zZWxlY3Qoc2VsZWN0b3IsIHRoaXMpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG5cdCAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBub2RlO1xuXHQgICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHQgICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuXHQgICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG5cdCAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuXHQgICAgICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBkM19hcnJheShzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSk7XG5cdCAgICAgICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gbm9kZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcikge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0b3IgOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NlbGVjdEFsbChzZWxlY3RvciwgdGhpcyk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICB2YXIgZDNfbnNYaHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXHQgIHZhciBkM19uc1ByZWZpeCA9IHtcblx0ICAgIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuXHQgICAgeGh0bWw6IGQzX25zWGh0bWwsXG5cdCAgICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG5cdCAgICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG5cdCAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG5cdCAgfTtcblx0ICBkMy5ucyA9IHtcblx0ICAgIHByZWZpeDogZDNfbnNQcmVmaXgsXG5cdCAgICBxdWFsaWZ5OiBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgIHZhciBpID0gbmFtZS5pbmRleE9mKFwiOlwiKSwgcHJlZml4ID0gbmFtZTtcblx0ICAgICAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuXHQgICAgICByZXR1cm4gZDNfbnNQcmVmaXguaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtcblx0ICAgICAgICBzcGFjZTogZDNfbnNQcmVmaXhbcHJlZml4XSxcblx0ICAgICAgICBsb2NhbDogbmFtZVxuXHQgICAgICB9IDogbmFtZTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5hdHRyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuXHQgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuXHQgICAgICAgIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpO1xuXHQgICAgICAgIHJldHVybiBuYW1lLmxvY2FsID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSA6IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXHQgICAgICB9XG5cdCAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9hdHRyKHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2F0dHIobmFtZSwgdmFsdWUpKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9hdHRyKG5hbWUsIHZhbHVlKSB7XG5cdCAgICBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lKTtcblx0ICAgIGZ1bmN0aW9uIGF0dHJOdWxsKCkge1xuXHQgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGF0dHJOdWxsTlMoKSB7XG5cdCAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQoKSB7XG5cdCAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKCkge1xuXHQgICAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIHZhbHVlKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB4KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKCkge1xuXHQgICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7IGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB4KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gbmFtZS5sb2NhbCA/IGF0dHJOdWxsTlMgOiBhdHRyTnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uIDogbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19jb2xsYXBzZShzKSB7XG5cdCAgICByZXR1cm4gcy50cmltKCkucmVwbGFjZSgvXFxzKy9nLCBcIiBcIik7XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5jbGFzc2VkID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuXHQgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpLCBuID0gKG5hbWUgPSBkM19zZWxlY3Rpb25fY2xhc3NlcyhuYW1lKSkubGVuZ3RoLCBpID0gLTE7XG5cdCAgICAgICAgaWYgKHZhbHVlID0gbm9kZS5jbGFzc0xpc3QpIHtcblx0ICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIXZhbHVlLmNvbnRhaW5zKG5hbWVbaV0pKSByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcblx0ICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWQzX3NlbGVjdGlvbl9jbGFzc2VkUmUobmFtZVtpXSkudGVzdCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2NsYXNzZWQodmFsdWUsIG5hbWVbdmFsdWVdKSk7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fY2xhc3NlZChuYW1lLCB2YWx1ZSkpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lKSB7XG5cdCAgICByZXR1cm4gbmV3IFJlZ0V4cChcIig/Ol58XFxcXHMrKVwiICsgZDMucmVxdW90ZShuYW1lKSArIFwiKD86XFxcXHMrfCQpXCIsIFwiZ1wiKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkge1xuXHQgICAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcblx0ICAgIG5hbWUgPSBkM19zZWxlY3Rpb25fY2xhc3NlcyhuYW1lKS5tYXAoZDNfc2VsZWN0aW9uX2NsYXNzZWROYW1lKTtcblx0ICAgIHZhciBuID0gbmFtZS5sZW5ndGg7XG5cdCAgICBmdW5jdGlvbiBjbGFzc2VkQ29uc3RhbnQoKSB7XG5cdCAgICAgIHZhciBpID0gLTE7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBuYW1lW2ldKHRoaXMsIHZhbHVlKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGkgPSAtMSwgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBuYW1lW2ldKHRoaXMsIHgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gY2xhc3NlZEZ1bmN0aW9uIDogY2xhc3NlZENvbnN0YW50O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fY2xhc3NlZE5hbWUobmFtZSkge1xuXHQgICAgdmFyIHJlID0gZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lKTtcblx0ICAgIHJldHVybiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuXHQgICAgICBpZiAoYyA9IG5vZGUuY2xhc3NMaXN0KSByZXR1cm4gdmFsdWUgPyBjLmFkZChuYW1lKSA6IGMucmVtb3ZlKG5hbWUpO1xuXHQgICAgICB2YXIgYyA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIjtcblx0ICAgICAgaWYgKHZhbHVlKSB7XG5cdCAgICAgICAgcmUubGFzdEluZGV4ID0gMDtcblx0ICAgICAgICBpZiAoIXJlLnRlc3QoYykpIG5vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZDNfY29sbGFwc2UoYyArIFwiIFwiICsgbmFtZSkpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZDNfY29sbGFwc2UoYy5yZXBsYWNlKHJlLCBcIiBcIikpKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnN0eWxlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG5cdCAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICBpZiAobiA8IDMpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgICAgaWYgKG4gPCAyKSB2YWx1ZSA9IFwiXCI7XG5cdCAgICAgICAgZm9yIChwcmlvcml0eSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3N0eWxlKHByaW9yaXR5LCBuYW1lW3ByaW9yaXR5XSwgdmFsdWUpKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpZiAobiA8IDIpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuXHQgICAgICAgIHJldHVybiBkM193aW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuXHQgICAgICB9XG5cdCAgICAgIHByaW9yaXR5ID0gXCJcIjtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuXHQgICAgZnVuY3Rpb24gc3R5bGVOdWxsKCkge1xuXHQgICAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc3R5bGVDb25zdGFudCgpIHtcblx0ICAgICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc3R5bGVGdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpOyBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgeCwgcHJpb3JpdHkpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBzdHlsZU51bGwgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlRnVuY3Rpb24gOiBzdHlsZUNvbnN0YW50O1xuXHQgIH1cblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUucHJvcGVydHkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHRoaXMubm9kZSgpW25hbWVdO1xuXHQgICAgICBmb3IgKHZhbHVlIGluIG5hbWUpIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fcHJvcGVydHkodmFsdWUsIG5hbWVbdmFsdWVdKSk7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fcHJvcGVydHkobmFtZSwgdmFsdWUpKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9wcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuXHQgICAgZnVuY3Rpb24gcHJvcGVydHlOdWxsKCkge1xuXHQgICAgICBkZWxldGUgdGhpc1tuYW1lXTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQoKSB7XG5cdCAgICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgaWYgKHggPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07IGVsc2UgdGhpc1tuYW1lXSA9IHg7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHByb3BlcnR5TnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gcHJvcGVydHlGdW5jdGlvbiA6IHByb3BlcnR5Q29uc3RhbnQ7XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5lYWNoKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuXHQgICAgfSA6IHZhbHVlID09IG51bGwgPyBmdW5jdGlvbigpIHtcblx0ICAgICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG5cdCAgICB9IDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0ICAgIH0pIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG5cdCAgfTtcblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaHRtbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuZWFjaCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG5cdCAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG5cdCAgICB9IDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG5cdCAgICB9KSA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcblx0ICB9O1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICBuYW1lID0gZDNfc2VsZWN0aW9uX2NyZWF0b3IobmFtZSk7XG5cdCAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKG5hbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpIHtcblx0ICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcblx0ICAgICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LCBuYW1lc3BhY2UgPSB0aGlzLm5hbWVzcGFjZVVSSTtcblx0ICAgICAgcmV0dXJuIG5hbWVzcGFjZSA9PT0gZDNfbnNYaHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSBkM19uc1hodG1sID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIG5hbWUpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY3JlYXRlTlMoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogKG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpKS5sb2NhbCA/IGNyZWF0ZU5TIDogY3JlYXRlO1xuXHQgIH1cblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG5cdCAgICBuYW1lID0gZDNfc2VsZWN0aW9uX2NyZWF0b3IobmFtZSk7XG5cdCAgICBiZWZvcmUgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3IoYmVmb3JlKTtcblx0ICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKG5hbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgYmVmb3JlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uUmVtb3ZlKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvblJlbW92ZSgpIHtcblx0ICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cdCAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuXHQgICAgdmFyIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoLCBncm91cCwgbm9kZTtcblx0ICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHQgICAgICB2YWx1ZSA9IG5ldyBBcnJheShuID0gKGdyb3VwID0gdGhpc1swXSkubGVuZ3RoKTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG5cdCAgICAgICAgICB2YWx1ZVtpXSA9IG5vZGUuX19kYXRhX187XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB2YWx1ZTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGJpbmQoZ3JvdXAsIGdyb3VwRGF0YSkge1xuXHQgICAgICB2YXIgaSwgbiA9IGdyb3VwLmxlbmd0aCwgbSA9IGdyb3VwRGF0YS5sZW5ndGgsIG4wID0gTWF0aC5taW4obiwgbSksIHVwZGF0ZU5vZGVzID0gbmV3IEFycmF5KG0pLCBlbnRlck5vZGVzID0gbmV3IEFycmF5KG0pLCBleGl0Tm9kZXMgPSBuZXcgQXJyYXkobiksIG5vZGUsIG5vZGVEYXRhO1xuXHQgICAgICBpZiAoa2V5KSB7XG5cdCAgICAgICAgdmFyIG5vZGVCeUtleVZhbHVlID0gbmV3IGQzX01hcCgpLCBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkobiksIGtleVZhbHVlO1xuXHQgICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBuOyApIHtcblx0ICAgICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcblx0ICAgICAgICAgICAgaWYgKG5vZGVCeUtleVZhbHVlLmhhcyhrZXlWYWx1ZSA9IGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGkpKSkge1xuXHQgICAgICAgICAgICAgIGV4aXROb2Rlc1tpXSA9IG5vZGU7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgbm9kZUJ5S2V5VmFsdWUuc2V0KGtleVZhbHVlLCBub2RlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG07ICkge1xuXHQgICAgICAgICAgaWYgKCEobm9kZSA9IG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZSA9IGtleS5jYWxsKGdyb3VwRGF0YSwgbm9kZURhdGEgPSBncm91cERhdGFbaV0sIGkpKSkpIHtcblx0ICAgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShub2RlRGF0YSk7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUgIT09IHRydWUpIHtcblx0ICAgICAgICAgICAgdXBkYXRlTm9kZXNbaV0gPSBub2RlO1xuXHQgICAgICAgICAgICBub2RlLl9fZGF0YV9fID0gbm9kZURhdGE7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIHRydWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKGkgPSAtMTsgKytpIDwgbjsgKSB7XG5cdCAgICAgICAgICBpZiAoaSBpbiBrZXlWYWx1ZXMgJiYgbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlc1tpXSkgIT09IHRydWUpIHtcblx0ICAgICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBuMDsgKSB7XG5cdCAgICAgICAgICBub2RlID0gZ3JvdXBbaV07XG5cdCAgICAgICAgICBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXTtcblx0ICAgICAgICAgIGlmIChub2RlKSB7XG5cdCAgICAgICAgICAgIG5vZGUuX19kYXRhX18gPSBub2RlRGF0YTtcblx0ICAgICAgICAgICAgdXBkYXRlTm9kZXNbaV0gPSBub2RlO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShub2RlRGF0YSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZvciAoO2kgPCBtOyArK2kpIHtcblx0ICAgICAgICAgIGVudGVyTm9kZXNbaV0gPSBkM19zZWxlY3Rpb25fZGF0YU5vZGUoZ3JvdXBEYXRhW2ldKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZm9yICg7aSA8IG47ICsraSkge1xuXHQgICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGVudGVyTm9kZXMudXBkYXRlID0gdXBkYXRlTm9kZXM7XG5cdCAgICAgIGVudGVyTm9kZXMucGFyZW50Tm9kZSA9IHVwZGF0ZU5vZGVzLnBhcmVudE5vZGUgPSBleGl0Tm9kZXMucGFyZW50Tm9kZSA9IGdyb3VwLnBhcmVudE5vZGU7XG5cdCAgICAgIGVudGVyLnB1c2goZW50ZXJOb2Rlcyk7XG5cdCAgICAgIHVwZGF0ZS5wdXNoKHVwZGF0ZU5vZGVzKTtcblx0ICAgICAgZXhpdC5wdXNoKGV4aXROb2Rlcyk7XG5cdCAgICB9XG5cdCAgICB2YXIgZW50ZXIgPSBkM19zZWxlY3Rpb25fZW50ZXIoW10pLCB1cGRhdGUgPSBkM19zZWxlY3Rpb24oW10pLCBleGl0ID0gZDNfc2VsZWN0aW9uKFtdKTtcblx0ICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgIGJpbmQoZ3JvdXAgPSB0aGlzW2ldLCB2YWx1ZS5jYWxsKGdyb3VwLCBncm91cC5wYXJlbnROb2RlLl9fZGF0YV9fLCBpKSk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgYmluZChncm91cCA9IHRoaXNbaV0sIHZhbHVlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgdXBkYXRlLmVudGVyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBlbnRlcjtcblx0ICAgIH07XG5cdCAgICB1cGRhdGUuZXhpdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZXhpdDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gdXBkYXRlO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKGRhdGEpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIF9fZGF0YV9fOiBkYXRhXG5cdCAgICB9O1xuXHQgIH1cblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZGF0dW0gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpIDogdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIpO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuXHQgICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgZ3JvdXAsIG5vZGU7XG5cdCAgICBpZiAodHlwZW9mIGZpbHRlciAhPT0gXCJmdW5jdGlvblwiKSBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fZmlsdGVyKGZpbHRlcik7XG5cdCAgICBmb3IgKHZhciBqID0gMCwgbSA9IHRoaXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG5cdCAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuXHQgICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gKGdyb3VwID0gdGhpc1tqXSkucGFyZW50Tm9kZTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0ICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgZmlsdGVyLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpIHtcblx0ICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZmlsdGVyKHNlbGVjdG9yKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVzKHRoaXMsIHNlbGVjdG9yKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5vcmRlciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuXHQgICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOyApIHtcblx0ICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG5cdCAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBub2RlLm5leHRTaWJsaW5nKSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuXHQgICAgICAgICAgbmV4dCA9IG5vZGU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcztcblx0ICB9O1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oY29tcGFyYXRvcikge1xuXHQgICAgY29tcGFyYXRvciA9IGQzX3NlbGVjdGlvbl9zb3J0Q29tcGFyYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkgdGhpc1tqXS5zb3J0KGNvbXBhcmF0b3IpO1xuXHQgICAgcmV0dXJuIHRoaXMub3JkZXIoKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9zb3J0Q29tcGFyYXRvcihjb21wYXJhdG9yKSB7XG5cdCAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGNvbXBhcmF0b3IgPSBkM19hc2NlbmRpbmc7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuXHQgICAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyYXRvcihhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgZnVuY3Rpb24obm9kZSwgaSwgaikge1xuXHQgICAgICBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIGNhbGxiYWNrKSB7XG5cdCAgICBmb3IgKHZhciBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcblx0ICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgaSsrKSB7XG5cdCAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2sobm9kZSwgaSwgaik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBncm91cHM7XG5cdCAgfVxuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0ICAgIHZhciBhcmdzID0gZDNfYXJyYXkoYXJndW1lbnRzKTtcblx0ICAgIGNhbGxiYWNrLmFwcGx5KGFyZ3NbMF0gPSB0aGlzLCBhcmdzKTtcblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gIXRoaXMubm9kZSgpO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLm5vZGUgPSBmdW5jdGlvbigpIHtcblx0ICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcblx0ICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHQgICAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG5cdCAgICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9O1xuXHQgIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgbiA9IDA7XG5cdCAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbigpIHtcblx0ICAgICAgKytuO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gbjtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9lbnRlcihzZWxlY3Rpb24pIHtcblx0ICAgIGQzX3N1YmNsYXNzKHNlbGVjdGlvbiwgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlKTtcblx0ICAgIHJldHVybiBzZWxlY3Rpb247XG5cdCAgfVxuXHQgIHZhciBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUgPSBbXTtcblx0ICBkMy5zZWxlY3Rpb24uZW50ZXIgPSBkM19zZWxlY3Rpb25fZW50ZXI7XG5cdCAgZDMuc2VsZWN0aW9uLmVudGVyLnByb3RvdHlwZSA9IGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZTtcblx0ICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuYXBwZW5kID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmFwcGVuZDtcblx0ICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuZW1wdHkgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZW1wdHk7XG5cdCAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLm5vZGUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZTtcblx0ICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuY2FsbCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsO1xuXHQgIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5zaXplID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNpemU7XG5cdCAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG5cdCAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2RlLCB1cGdyb3VwLCBncm91cCwgbm9kZTtcblx0ICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcblx0ICAgICAgdXBncm91cCA9IChncm91cCA9IHRoaXNbal0pLnVwZGF0ZTtcblx0ICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG5cdCAgICAgIHN1Ymdyb3VwLnBhcmVudE5vZGUgPSBncm91cC5wYXJlbnROb2RlO1xuXHQgICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuXHQgICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcblx0ICAgICAgICAgIHN1Ymdyb3VwLnB1c2godXBncm91cFtpXSA9IHN1Ym5vZGUgPSBzZWxlY3Rvci5jYWxsKGdyb3VwLnBhcmVudE5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKTtcblx0ICAgICAgICAgIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBzdWJncm91cC5wdXNoKG51bGwpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBiZWZvcmUgPSBkM19zZWxlY3Rpb25fZW50ZXJJbnNlcnRCZWZvcmUodGhpcyk7XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydC5jYWxsKHRoaXMsIG5hbWUsIGJlZm9yZSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZW50ZXJJbnNlcnRCZWZvcmUoZW50ZXIpIHtcblx0ICAgIHZhciBpMCwgajA7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgaikge1xuXHQgICAgICB2YXIgZ3JvdXAgPSBlbnRlcltqXS51cGRhdGUsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7XG5cdCAgICAgIGlmIChqICE9IGowKSBqMCA9IGosIGkwID0gMDtcblx0ICAgICAgaWYgKGkgPj0gaTApIGkwID0gaSArIDE7XG5cdCAgICAgIHdoaWxlICghKG5vZGUgPSBncm91cFtpMF0pICYmICsraTAgPCBuKSA7XG5cdCAgICAgIHJldHVybiBub2RlO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMuc2VsZWN0ID0gZnVuY3Rpb24obm9kZSkge1xuXHQgICAgdmFyIGdyb3VwO1xuXHQgICAgaWYgKHR5cGVvZiBub2RlID09PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgIGdyb3VwID0gWyBkM19zZWxlY3Qobm9kZSwgZDNfZG9jdW1lbnQpIF07XG5cdCAgICAgIGdyb3VwLnBhcmVudE5vZGUgPSBkM19kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBncm91cCA9IFsgbm9kZSBdO1xuXHQgICAgICBncm91cC5wYXJlbnROb2RlID0gZDNfZG9jdW1lbnRFbGVtZW50KG5vZGUpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3NlbGVjdGlvbihbIGdyb3VwIF0pO1xuXHQgIH07XG5cdCAgZDMuc2VsZWN0QWxsID0gZnVuY3Rpb24obm9kZXMpIHtcblx0ICAgIHZhciBncm91cDtcblx0ICAgIGlmICh0eXBlb2Ygbm9kZXMgPT09IFwic3RyaW5nXCIpIHtcblx0ICAgICAgZ3JvdXAgPSBkM19hcnJheShkM19zZWxlY3RBbGwobm9kZXMsIGQzX2RvY3VtZW50KSk7XG5cdCAgICAgIGdyb3VwLnBhcmVudE5vZGUgPSBkM19kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBncm91cCA9IGQzX2FycmF5KG5vZGVzKTtcblx0ICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IG51bGw7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uKFsgZ3JvdXAgXSk7XG5cdCAgfTtcblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUub24gPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuXHQgICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgICAgaWYgKG4gPCAzKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikge1xuXHQgICAgICAgIGlmIChuIDwgMikgbGlzdGVuZXIgPSBmYWxzZTtcblx0ICAgICAgICBmb3IgKGNhcHR1cmUgaW4gdHlwZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9vbihjYXB0dXJlLCB0eXBlW2NhcHR1cmVdLCBsaXN0ZW5lcikpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChuIDwgMikgcmV0dXJuIChuID0gdGhpcy5ub2RlKClbXCJfX29uXCIgKyB0eXBlXSkgJiYgbi5fO1xuXHQgICAgICBjYXB0dXJlID0gZmFsc2U7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9vbih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX29uKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG5cdCAgICB2YXIgbmFtZSA9IFwiX19vblwiICsgdHlwZSwgaSA9IHR5cGUuaW5kZXhPZihcIi5cIiksIHdyYXAgPSBkM19zZWxlY3Rpb25fb25MaXN0ZW5lcjtcblx0ICAgIGlmIChpID4gMCkgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSk7XG5cdCAgICB2YXIgZmlsdGVyID0gZDNfc2VsZWN0aW9uX29uRmlsdGVycy5nZXQodHlwZSk7XG5cdCAgICBpZiAoZmlsdGVyKSB0eXBlID0gZmlsdGVyLCB3cmFwID0gZDNfc2VsZWN0aW9uX29uRmlsdGVyO1xuXHQgICAgZnVuY3Rpb24gb25SZW1vdmUoKSB7XG5cdCAgICAgIHZhciBsID0gdGhpc1tuYW1lXTtcblx0ICAgICAgaWYgKGwpIHtcblx0ICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbCwgbC4kKTtcblx0ICAgICAgICBkZWxldGUgdGhpc1tuYW1lXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gb25BZGQoKSB7XG5cdCAgICAgIHZhciBsID0gd3JhcChsaXN0ZW5lciwgZDNfYXJyYXkoYXJndW1lbnRzKSk7XG5cdCAgICAgIG9uUmVtb3ZlLmNhbGwodGhpcyk7XG5cdCAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCB0aGlzW25hbWVdID0gbCwgbC4kID0gY2FwdHVyZSk7XG5cdCAgICAgIGwuXyA9IGxpc3RlbmVyO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVtb3ZlQWxsKCkge1xuXHQgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiXl9fb24oW14uXSspXCIgKyBkMy5yZXF1b3RlKHR5cGUpICsgXCIkXCIpLCBtYXRjaDtcblx0ICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG5cdCAgICAgICAgaWYgKG1hdGNoID0gbmFtZS5tYXRjaChyZSkpIHtcblx0ICAgICAgICAgIHZhciBsID0gdGhpc1tuYW1lXTtcblx0ICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihtYXRjaFsxXSwgbCwgbC4kKTtcblx0ICAgICAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGkgPyBsaXN0ZW5lciA/IG9uQWRkIDogb25SZW1vdmUgOiBsaXN0ZW5lciA/IGQzX25vb3AgOiByZW1vdmVBbGw7XG5cdCAgfVxuXHQgIHZhciBkM19zZWxlY3Rpb25fb25GaWx0ZXJzID0gZDMubWFwKHtcblx0ICAgIG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdCAgICBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJcblx0ICB9KTtcblx0ICBpZiAoZDNfZG9jdW1lbnQpIHtcblx0ICAgIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMuZm9yRWFjaChmdW5jdGlvbihrKSB7XG5cdCAgICAgIGlmIChcIm9uXCIgKyBrIGluIGQzX2RvY3VtZW50KSBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLnJlbW92ZShrKTtcblx0ICAgIH0pO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fb25MaXN0ZW5lcihsaXN0ZW5lciwgYXJndW1lbnR6KSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuXHQgICAgICB2YXIgbyA9IGQzLmV2ZW50O1xuXHQgICAgICBkMy5ldmVudCA9IGU7XG5cdCAgICAgIGFyZ3VtZW50elswXSA9IHRoaXMuX19kYXRhX187XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnR6KTtcblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICBkMy5ldmVudCA9IG87XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9vbkZpbHRlcihsaXN0ZW5lciwgYXJndW1lbnR6KSB7XG5cdCAgICB2YXIgbCA9IGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgdmFyIHRhcmdldCA9IHRoaXMsIHJlbGF0ZWQgPSBlLnJlbGF0ZWRUYXJnZXQ7XG5cdCAgICAgIGlmICghcmVsYXRlZCB8fCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRhcmdldCkgJiA4KSkge1xuXHQgICAgICAgIGwuY2FsbCh0YXJnZXQsIGUpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICB2YXIgZDNfZXZlbnRfZHJhZ1NlbGVjdCwgZDNfZXZlbnRfZHJhZ0lkID0gMDtcblx0ICBmdW5jdGlvbiBkM19ldmVudF9kcmFnU3VwcHJlc3Mobm9kZSkge1xuXHQgICAgdmFyIG5hbWUgPSBcIi5kcmFnc3VwcHJlc3MtXCIgKyArK2QzX2V2ZW50X2RyYWdJZCwgY2xpY2sgPSBcImNsaWNrXCIgKyBuYW1lLCB3ID0gZDMuc2VsZWN0KGQzX3dpbmRvdyhub2RlKSkub24oXCJ0b3VjaG1vdmVcIiArIG5hbWUsIGQzX2V2ZW50UHJldmVudERlZmF1bHQpLm9uKFwiZHJhZ3N0YXJ0XCIgKyBuYW1lLCBkM19ldmVudFByZXZlbnREZWZhdWx0KS5vbihcInNlbGVjdHN0YXJ0XCIgKyBuYW1lLCBkM19ldmVudFByZXZlbnREZWZhdWx0KTtcblx0ICAgIGlmIChkM19ldmVudF9kcmFnU2VsZWN0ID09IG51bGwpIHtcblx0ICAgICAgZDNfZXZlbnRfZHJhZ1NlbGVjdCA9IFwib25zZWxlY3RzdGFydFwiIGluIG5vZGUgPyBmYWxzZSA6IGQzX3ZlbmRvclN5bWJvbChub2RlLnN0eWxlLCBcInVzZXJTZWxlY3RcIik7XG5cdCAgICB9XG5cdCAgICBpZiAoZDNfZXZlbnRfZHJhZ1NlbGVjdCkge1xuXHQgICAgICB2YXIgc3R5bGUgPSBkM19kb2N1bWVudEVsZW1lbnQobm9kZSkuc3R5bGUsIHNlbGVjdCA9IHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdO1xuXHQgICAgICBzdHlsZVtkM19ldmVudF9kcmFnU2VsZWN0XSA9IFwibm9uZVwiO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHN1cHByZXNzQ2xpY2spIHtcblx0ICAgICAgdy5vbihuYW1lLCBudWxsKTtcblx0ICAgICAgaWYgKGQzX2V2ZW50X2RyYWdTZWxlY3QpIHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdID0gc2VsZWN0O1xuXHQgICAgICBpZiAoc3VwcHJlc3NDbGljaykge1xuXHQgICAgICAgIHZhciBvZmYgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIHcub24oY2xpY2ssIG51bGwpO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdy5vbihjbGljaywgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBkM19ldmVudFByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgICAgICBvZmYoKTtcblx0ICAgICAgICB9LCB0cnVlKTtcblx0ICAgICAgICBzZXRUaW1lb3V0KG9mZiwgMCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLm1vdXNlID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG5cdCAgICByZXR1cm4gZDNfbW91c2VQb2ludChjb250YWluZXIsIGQzX2V2ZW50U291cmNlKCkpO1xuXHQgIH07XG5cdCAgdmFyIGQzX21vdXNlX2J1ZzQ0MDgzID0gdGhpcy5uYXZpZ2F0b3IgJiYgL1dlYktpdC8udGVzdCh0aGlzLm5hdmlnYXRvci51c2VyQWdlbnQpID8gLTEgOiAwO1xuXHQgIGZ1bmN0aW9uIGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCBlKSB7XG5cdCAgICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykgZSA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG5cdCAgICB2YXIgc3ZnID0gY29udGFpbmVyLm93bmVyU1ZHRWxlbWVudCB8fCBjb250YWluZXI7XG5cdCAgICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG5cdCAgICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuXHQgICAgICBpZiAoZDNfbW91c2VfYnVnNDQwODMgPCAwKSB7XG5cdCAgICAgICAgdmFyIHdpbmRvdyA9IGQzX3dpbmRvdyhjb250YWluZXIpO1xuXHQgICAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWCB8fCB3aW5kb3cuc2Nyb2xsWSkge1xuXHQgICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJzdmdcIikuc3R5bGUoe1xuXHQgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHQgICAgICAgICAgICB0b3A6IDAsXG5cdCAgICAgICAgICAgIGxlZnQ6IDAsXG5cdCAgICAgICAgICAgIG1hcmdpbjogMCxcblx0ICAgICAgICAgICAgcGFkZGluZzogMCxcblx0ICAgICAgICAgICAgYm9yZGVyOiBcIm5vbmVcIlxuXHQgICAgICAgICAgfSwgXCJpbXBvcnRhbnRcIik7XG5cdCAgICAgICAgICB2YXIgY3RtID0gc3ZnWzBdWzBdLmdldFNjcmVlbkNUTSgpO1xuXHQgICAgICAgICAgZDNfbW91c2VfYnVnNDQwODMgPSAhKGN0bS5mIHx8IGN0bS5lKTtcblx0ICAgICAgICAgIHN2Zy5yZW1vdmUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGQzX21vdXNlX2J1ZzQ0MDgzKSBwb2ludC54ID0gZS5wYWdlWCwgcG9pbnQueSA9IGUucGFnZVk7IGVsc2UgcG9pbnQueCA9IGUuY2xpZW50WCwgXG5cdCAgICAgIHBvaW50LnkgPSBlLmNsaWVudFk7XG5cdCAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKGNvbnRhaW5lci5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuXHQgICAgICByZXR1cm4gWyBwb2ludC54LCBwb2ludC55IF07XG5cdCAgICB9XG5cdCAgICB2YXIgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0ICAgIHJldHVybiBbIGUuY2xpZW50WCAtIHJlY3QubGVmdCAtIGNvbnRhaW5lci5jbGllbnRMZWZ0LCBlLmNsaWVudFkgLSByZWN0LnRvcCAtIGNvbnRhaW5lci5jbGllbnRUb3AgXTtcblx0ICB9XG5cdCAgZDMudG91Y2ggPSBmdW5jdGlvbihjb250YWluZXIsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgaWRlbnRpZmllciA9IHRvdWNoZXMsIHRvdWNoZXMgPSBkM19ldmVudFNvdXJjZSgpLmNoYW5nZWRUb3VjaGVzO1xuXHQgICAgaWYgKHRvdWNoZXMpIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcy5sZW5ndGgsIHRvdWNoOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCB0b3VjaCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXHQgIGQzLmJlaGF2aW9yLmRyYWcgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goZHJhZywgXCJkcmFnXCIsIFwiZHJhZ3N0YXJ0XCIsIFwiZHJhZ2VuZFwiKSwgb3JpZ2luID0gbnVsbCwgbW91c2Vkb3duID0gZHJhZ3N0YXJ0KGQzX25vb3AsIGQzLm1vdXNlLCBkM193aW5kb3csIFwibW91c2Vtb3ZlXCIsIFwibW91c2V1cFwiKSwgdG91Y2hzdGFydCA9IGRyYWdzdGFydChkM19iZWhhdmlvcl9kcmFnVG91Y2hJZCwgZDMudG91Y2gsIGQzX2lkZW50aXR5LCBcInRvdWNobW92ZVwiLCBcInRvdWNoZW5kXCIpO1xuXHQgICAgZnVuY3Rpb24gZHJhZygpIHtcblx0ICAgICAgdGhpcy5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bikub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydCk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBkcmFnc3RhcnQoaWQsIHBvc2l0aW9uLCBzdWJqZWN0LCBtb3ZlLCBlbmQpIHtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciB0aGF0ID0gdGhpcywgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0LmNvcnJlc3BvbmRpbmdFbGVtZW50IHx8IGQzLmV2ZW50LnRhcmdldCwgcGFyZW50ID0gdGhhdC5wYXJlbnROb2RlLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBkcmFnSWQgPSBpZCgpLCBkcmFnTmFtZSA9IFwiLmRyYWdcIiArIChkcmFnSWQgPT0gbnVsbCA/IFwiXCIgOiBcIi1cIiArIGRyYWdJZCksIGRyYWdPZmZzZXQsIGRyYWdTdWJqZWN0ID0gZDMuc2VsZWN0KHN1YmplY3QodGFyZ2V0KSkub24obW92ZSArIGRyYWdOYW1lLCBtb3ZlZCkub24oZW5kICsgZHJhZ05hbWUsIGVuZGVkKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgcG9zaXRpb24wID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpO1xuXHQgICAgICAgIGlmIChvcmlnaW4pIHtcblx0ICAgICAgICAgIGRyYWdPZmZzZXQgPSBvcmlnaW4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcblx0ICAgICAgICAgIGRyYWdPZmZzZXQgPSBbIGRyYWdPZmZzZXQueCAtIHBvc2l0aW9uMFswXSwgZHJhZ09mZnNldC55IC0gcG9zaXRpb24wWzFdIF07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGRyYWdPZmZzZXQgPSBbIDAsIDAgXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZGlzcGF0Y2goe1xuXHQgICAgICAgICAgdHlwZTogXCJkcmFnc3RhcnRcIlxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuXHQgICAgICAgICAgdmFyIHBvc2l0aW9uMSA9IHBvc2l0aW9uKHBhcmVudCwgZHJhZ0lkKSwgZHgsIGR5O1xuXHQgICAgICAgICAgaWYgKCFwb3NpdGlvbjEpIHJldHVybjtcblx0ICAgICAgICAgIGR4ID0gcG9zaXRpb24xWzBdIC0gcG9zaXRpb24wWzBdO1xuXHQgICAgICAgICAgZHkgPSBwb3NpdGlvbjFbMV0gLSBwb3NpdGlvbjBbMV07XG5cdCAgICAgICAgICBkcmFnZ2VkIHw9IGR4IHwgZHk7XG5cdCAgICAgICAgICBwb3NpdGlvbjAgPSBwb3NpdGlvbjE7XG5cdCAgICAgICAgICBkaXNwYXRjaCh7XG5cdCAgICAgICAgICAgIHR5cGU6IFwiZHJhZ1wiLFxuXHQgICAgICAgICAgICB4OiBwb3NpdGlvbjFbMF0gKyBkcmFnT2Zmc2V0WzBdLFxuXHQgICAgICAgICAgICB5OiBwb3NpdGlvbjFbMV0gKyBkcmFnT2Zmc2V0WzFdLFxuXHQgICAgICAgICAgICBkeDogZHgsXG5cdCAgICAgICAgICAgIGR5OiBkeVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuXHQgICAgICAgICAgaWYgKCFwb3NpdGlvbihwYXJlbnQsIGRyYWdJZCkpIHJldHVybjtcblx0ICAgICAgICAgIGRyYWdTdWJqZWN0Lm9uKG1vdmUgKyBkcmFnTmFtZSwgbnVsbCkub24oZW5kICsgZHJhZ05hbWUsIG51bGwpO1xuXHQgICAgICAgICAgZHJhZ1Jlc3RvcmUoZHJhZ2dlZCk7XG5cdCAgICAgICAgICBkaXNwYXRjaCh7XG5cdCAgICAgICAgICAgIHR5cGU6IFwiZHJhZ2VuZFwiXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBkcmFnLm9yaWdpbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JpZ2luO1xuXHQgICAgICBvcmlnaW4gPSB4O1xuXHQgICAgICByZXR1cm4gZHJhZztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZDMucmViaW5kKGRyYWcsIGV2ZW50LCBcIm9uXCIpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfYmVoYXZpb3JfZHJhZ1RvdWNoSWQoKSB7XG5cdCAgICByZXR1cm4gZDMuZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uaWRlbnRpZmllcjtcblx0ICB9XG5cdCAgZDMudG91Y2hlcyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgdG91Y2hlcykge1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB0b3VjaGVzID0gZDNfZXZlbnRTb3VyY2UoKS50b3VjaGVzO1xuXHQgICAgcmV0dXJuIHRvdWNoZXMgPyBkM19hcnJheSh0b3VjaGVzKS5tYXAoZnVuY3Rpb24odG91Y2gpIHtcblx0ICAgICAgdmFyIHBvaW50ID0gZDNfbW91c2VQb2ludChjb250YWluZXIsIHRvdWNoKTtcblx0ICAgICAgcG9pbnQuaWRlbnRpZmllciA9IHRvdWNoLmlkZW50aWZpZXI7XG5cdCAgICAgIHJldHVybiBwb2ludDtcblx0ICAgIH0pIDogW107XG5cdCAgfTtcblx0ICB2YXIgzrUgPSAxZS02LCDOtTIgPSDOtSAqIM61LCDPgCA9IE1hdGguUEksIM+EID0gMiAqIM+ALCDPhM61ID0gz4QgLSDOtSwgaGFsZs+AID0gz4AgLyAyLCBkM19yYWRpYW5zID0gz4AgLyAxODAsIGQzX2RlZ3JlZXMgPSAxODAgLyDPgDtcblx0ICBmdW5jdGlvbiBkM19zZ24oeCkge1xuXHQgICAgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19jcm9zczJkKGEsIGIsIGMpIHtcblx0ICAgIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSAtIChiWzFdIC0gYVsxXSkgKiAoY1swXSAtIGFbMF0pO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19hY29zKHgpIHtcblx0ICAgIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyDPgCA6IE1hdGguYWNvcyh4KTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfYXNpbih4KSB7XG5cdCAgICByZXR1cm4geCA+IDEgPyBoYWxmz4AgOiB4IDwgLTEgPyAtaGFsZs+AIDogTWF0aC5hc2luKHgpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zaW5oKHgpIHtcblx0ICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19jb3NoKHgpIHtcblx0ICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190YW5oKHgpIHtcblx0ICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19oYXZlcnNpbih4KSB7XG5cdCAgICByZXR1cm4gKHggPSBNYXRoLnNpbih4IC8gMikpICogeDtcblx0ICB9XG5cdCAgdmFyIM+BID0gTWF0aC5TUVJUMiwgz4EyID0gMiwgz4E0ID0gNDtcblx0ICBkMy5pbnRlcnBvbGF0ZVpvb20gPSBmdW5jdGlvbihwMCwgcDEpIHtcblx0ICAgIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSwgZHggPSB1eDEgLSB1eDAsIGR5ID0gdXkxIC0gdXkwLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5LCBpLCBTO1xuXHQgICAgaWYgKGQyIDwgzrUyKSB7XG5cdCAgICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIM+BO1xuXHQgICAgICBpID0gZnVuY3Rpb24odCkge1xuXHQgICAgICAgIHJldHVybiBbIHV4MCArIHQgKiBkeCwgdXkwICsgdCAqIGR5LCB3MCAqIE1hdGguZXhwKM+BICogdCAqIFMpIF07XG5cdCAgICAgIH07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLCBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIM+BNCAqIGQyKSAvICgyICogdzAgKiDPgTIgKiBkMSksIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gz4E0ICogZDIpIC8gKDIgKiB3MSAqIM+BMiAqIGQxKSwgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLCByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG5cdCAgICAgIFMgPSAocjEgLSByMCkgLyDPgTtcblx0ICAgICAgaSA9IGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgICB2YXIgcyA9IHQgKiBTLCBjb3NocjAgPSBkM19jb3NoKHIwKSwgdSA9IHcwIC8gKM+BMiAqIGQxKSAqIChjb3NocjAgKiBkM190YW5oKM+BICogcyArIHIwKSAtIGQzX3NpbmgocjApKTtcblx0ICAgICAgICByZXR1cm4gWyB1eDAgKyB1ICogZHgsIHV5MCArIHUgKiBkeSwgdzAgKiBjb3NocjAgLyBkM19jb3NoKM+BICogcyArIHIwKSBdO1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgaS5kdXJhdGlvbiA9IFMgKiAxZTM7XG5cdCAgICByZXR1cm4gaTtcblx0ICB9O1xuXHQgIGQzLmJlaGF2aW9yLnpvb20gPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciB2aWV3ID0ge1xuXHQgICAgICB4OiAwLFxuXHQgICAgICB5OiAwLFxuXHQgICAgICBrOiAxXG5cdCAgICB9LCB0cmFuc2xhdGUwLCBjZW50ZXIwLCBjZW50ZXIsIHNpemUgPSBbIDk2MCwgNTAwIF0sIHNjYWxlRXh0ZW50ID0gZDNfYmVoYXZpb3Jfem9vbUluZmluaXR5LCBkdXJhdGlvbiA9IDI1MCwgem9vbWluZyA9IDAsIG1vdXNlZG93biA9IFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vtb3ZlID0gXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZXVwID0gXCJtb3VzZXVwLnpvb21cIiwgbW91c2V3aGVlbFRpbWVyLCB0b3VjaHN0YXJ0ID0gXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2h0aW1lLCBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goem9vbSwgXCJ6b29tc3RhcnRcIiwgXCJ6b29tXCIsIFwiem9vbWVuZFwiKSwgeDAsIHgxLCB5MCwgeTE7XG5cdCAgICBpZiAoIWQzX2JlaGF2aW9yX3pvb21XaGVlbCkge1xuXHQgICAgICBkM19iZWhhdmlvcl96b29tV2hlZWwgPSBcIm9ud2hlZWxcIiBpbiBkM19kb2N1bWVudCA/IChkM19iZWhhdmlvcl96b29tRGVsdGEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gLWQzLmV2ZW50LmRlbHRhWSAqIChkMy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKTtcblx0ICAgICAgfSwgXCJ3aGVlbFwiKSA6IFwib25tb3VzZXdoZWVsXCIgaW4gZDNfZG9jdW1lbnQgPyAoZDNfYmVoYXZpb3Jfem9vbURlbHRhID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzLmV2ZW50LndoZWVsRGVsdGE7XG5cdCAgICAgIH0sIFwibW91c2V3aGVlbFwiKSA6IChkM19iZWhhdmlvcl96b29tRGVsdGEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gLWQzLmV2ZW50LmRldGFpbDtcblx0ICAgICAgfSwgXCJNb3pNb3VzZVBpeGVsU2Nyb2xsXCIpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gem9vbShnKSB7XG5cdCAgICAgIGcub24obW91c2Vkb3duLCBtb3VzZWRvd25lZCkub24oZDNfYmVoYXZpb3Jfem9vbVdoZWVsICsgXCIuem9vbVwiLCBtb3VzZXdoZWVsZWQpLm9uKFwiZGJsY2xpY2suem9vbVwiLCBkYmxjbGlja2VkKS5vbih0b3VjaHN0YXJ0LCB0b3VjaHN0YXJ0ZWQpO1xuXHQgICAgfVxuXHQgICAgem9vbS5ldmVudCA9IGZ1bmN0aW9uKGcpIHtcblx0ICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoaXMsIGFyZ3VtZW50cyksIHZpZXcxID0gdmlldztcblx0ICAgICAgICBpZiAoZDNfdHJhbnNpdGlvbkluaGVyaXRJZCkge1xuXHQgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5lYWNoKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgdmlldyA9IHRoaXMuX19jaGFydF9fIHx8IHtcblx0ICAgICAgICAgICAgICB4OiAwLFxuXHQgICAgICAgICAgICAgIHk6IDAsXG5cdCAgICAgICAgICAgICAgazogMVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB6b29tc3RhcnRlZChkaXNwYXRjaCk7XG5cdCAgICAgICAgICB9KS50d2VlbihcInpvb206em9vbVwiLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgdmFyIGR4ID0gc2l6ZVswXSwgZHkgPSBzaXplWzFdLCBjeCA9IGNlbnRlcjAgPyBjZW50ZXIwWzBdIDogZHggLyAyLCBjeSA9IGNlbnRlcjAgPyBjZW50ZXIwWzFdIDogZHkgLyAyLCBpID0gZDMuaW50ZXJwb2xhdGVab29tKFsgKGN4IC0gdmlldy54KSAvIHZpZXcuaywgKGN5IC0gdmlldy55KSAvIHZpZXcuaywgZHggLyB2aWV3LmsgXSwgWyAoY3ggLSB2aWV3MS54KSAvIHZpZXcxLmssIChjeSAtIHZpZXcxLnkpIC8gdmlldzEuaywgZHggLyB2aWV3MS5rIF0pO1xuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICAgICAgICAgIHZhciBsID0gaSh0KSwgayA9IGR4IC8gbFsyXTtcblx0ICAgICAgICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IHZpZXcgPSB7XG5cdCAgICAgICAgICAgICAgICB4OiBjeCAtIGxbMF0gKiBrLFxuXHQgICAgICAgICAgICAgICAgeTogY3kgLSBsWzFdICogayxcblx0ICAgICAgICAgICAgICAgIGs6IGtcblx0ICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICB9KS5lYWNoKFwiaW50ZXJydXB0Lnpvb21cIiwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG5cdCAgICAgICAgICB9KS5lYWNoKFwiZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGhpcy5fX2NoYXJ0X18gPSB2aWV3O1xuXHQgICAgICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuXHQgICAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcblx0ICAgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICB6b29tLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyB2aWV3LngsIHZpZXcueSBdO1xuXHQgICAgICB2aWV3ID0ge1xuXHQgICAgICAgIHg6ICtfWzBdLFxuXHQgICAgICAgIHk6ICtfWzFdLFxuXHQgICAgICAgIGs6IHZpZXcua1xuXHQgICAgICB9O1xuXHQgICAgICByZXNjYWxlKCk7XG5cdCAgICAgIHJldHVybiB6b29tO1xuXHQgICAgfTtcblx0ICAgIHpvb20uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZpZXcuaztcblx0ICAgICAgdmlldyA9IHtcblx0ICAgICAgICB4OiB2aWV3LngsXG5cdCAgICAgICAgeTogdmlldy55LFxuXHQgICAgICAgIGs6IG51bGxcblx0ICAgICAgfTtcblx0ICAgICAgc2NhbGVUbygrXyk7XG5cdCAgICAgIHJlc2NhbGUoKTtcblx0ICAgICAgcmV0dXJuIHpvb207XG5cdCAgICB9O1xuXHQgICAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2NhbGVFeHRlbnQ7XG5cdCAgICAgIHNjYWxlRXh0ZW50ID0gXyA9PSBudWxsID8gZDNfYmVoYXZpb3Jfem9vbUluZmluaXR5IDogWyArX1swXSwgK19bMV0gXTtcblx0ICAgICAgcmV0dXJuIHpvb207XG5cdCAgICB9O1xuXHQgICAgem9vbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNlbnRlcjtcblx0ICAgICAgY2VudGVyID0gXyAmJiBbICtfWzBdLCArX1sxXSBdO1xuXHQgICAgICByZXR1cm4gem9vbTtcblx0ICAgIH07XG5cdCAgICB6b29tLnNpemUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG5cdCAgICAgIHNpemUgPSBfICYmIFsgK19bMF0sICtfWzFdIF07XG5cdCAgICAgIHJldHVybiB6b29tO1xuXHQgICAgfTtcblx0ICAgIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGR1cmF0aW9uO1xuXHQgICAgICBkdXJhdGlvbiA9ICtfO1xuXHQgICAgICByZXR1cm4gem9vbTtcblx0ICAgIH07XG5cdCAgICB6b29tLnggPSBmdW5jdGlvbih6KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxO1xuXHQgICAgICB4MSA9IHo7XG5cdCAgICAgIHgwID0gei5jb3B5KCk7XG5cdCAgICAgIHZpZXcgPSB7XG5cdCAgICAgICAgeDogMCxcblx0ICAgICAgICB5OiAwLFxuXHQgICAgICAgIGs6IDFcblx0ICAgICAgfTtcblx0ICAgICAgcmV0dXJuIHpvb207XG5cdCAgICB9O1xuXHQgICAgem9vbS55ID0gZnVuY3Rpb24oeikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5MTtcblx0ICAgICAgeTEgPSB6O1xuXHQgICAgICB5MCA9IHouY29weSgpO1xuXHQgICAgICB2aWV3ID0ge1xuXHQgICAgICAgIHg6IDAsXG5cdCAgICAgICAgeTogMCxcblx0ICAgICAgICBrOiAxXG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiB6b29tO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIGxvY2F0aW9uKHApIHtcblx0ICAgICAgcmV0dXJuIFsgKHBbMF0gLSB2aWV3LngpIC8gdmlldy5rLCAocFsxXSAtIHZpZXcueSkgLyB2aWV3LmsgXTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHBvaW50KGwpIHtcblx0ICAgICAgcmV0dXJuIFsgbFswXSAqIHZpZXcuayArIHZpZXcueCwgbFsxXSAqIHZpZXcuayArIHZpZXcueSBdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc2NhbGVUbyhzKSB7XG5cdCAgICAgIHZpZXcuayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgcykpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8ocCwgbCkge1xuXHQgICAgICBsID0gcG9pbnQobCk7XG5cdCAgICAgIHZpZXcueCArPSBwWzBdIC0gbFswXTtcblx0ICAgICAgdmlldy55ICs9IHBbMV0gLSBsWzFdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gem9vbVRvKHRoYXQsIHAsIGwsIGspIHtcblx0ICAgICAgdGhhdC5fX2NoYXJ0X18gPSB7XG5cdCAgICAgICAgeDogdmlldy54LFxuXHQgICAgICAgIHk6IHZpZXcueSxcblx0ICAgICAgICBrOiB2aWV3Lmtcblx0ICAgICAgfTtcblx0ICAgICAgc2NhbGVUbyhNYXRoLnBvdygyLCBrKSk7XG5cdCAgICAgIHRyYW5zbGF0ZVRvKGNlbnRlcjAgPSBwLCBsKTtcblx0ICAgICAgdGhhdCA9IGQzLnNlbGVjdCh0aGF0KTtcblx0ICAgICAgaWYgKGR1cmF0aW9uID4gMCkgdGhhdCA9IHRoYXQudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKTtcblx0ICAgICAgdGhhdC5jYWxsKHpvb20uZXZlbnQpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcblx0ICAgICAgaWYgKHgxKSB4MS5kb21haW4oeDAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeCkge1xuXHQgICAgICAgIHJldHVybiAoeCAtIHZpZXcueCkgLyB2aWV3Lms7XG5cdCAgICAgIH0pLm1hcCh4MC5pbnZlcnQpKTtcblx0ICAgICAgaWYgKHkxKSB5MS5kb21haW4oeTAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeSkge1xuXHQgICAgICAgIHJldHVybiAoeSAtIHZpZXcueSkgLyB2aWV3Lms7XG5cdCAgICAgIH0pLm1hcCh5MC5pbnZlcnQpKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHpvb21zdGFydGVkKGRpc3BhdGNoKSB7XG5cdCAgICAgIGlmICghem9vbWluZysrKSBkaXNwYXRjaCh7XG5cdCAgICAgICAgdHlwZTogXCJ6b29tc3RhcnRcIlxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHpvb21lZChkaXNwYXRjaCkge1xuXHQgICAgICByZXNjYWxlKCk7XG5cdCAgICAgIGRpc3BhdGNoKHtcblx0ICAgICAgICB0eXBlOiBcInpvb21cIixcblx0ICAgICAgICBzY2FsZTogdmlldy5rLFxuXHQgICAgICAgIHRyYW5zbGF0ZTogWyB2aWV3LngsIHZpZXcueSBdXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gem9vbWVuZGVkKGRpc3BhdGNoKSB7XG5cdCAgICAgIGlmICghLS16b29taW5nKSBkaXNwYXRjaCh7XG5cdCAgICAgICAgdHlwZTogXCJ6b29tZW5kXCJcblx0ICAgICAgfSksIGNlbnRlcjAgPSBudWxsO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG5cdCAgICAgIHZhciB0aGF0ID0gdGhpcywgZGlzcGF0Y2ggPSBldmVudC5vZih0aGF0LCBhcmd1bWVudHMpLCBkcmFnZ2VkID0gMCwgc3ViamVjdCA9IGQzLnNlbGVjdChkM193aW5kb3codGhhdCkpLm9uKG1vdXNlbW92ZSwgbW92ZWQpLm9uKG1vdXNldXAsIGVuZGVkKSwgbG9jYXRpb24wID0gbG9jYXRpb24oZDMubW91c2UodGhhdCkpLCBkcmFnUmVzdG9yZSA9IGQzX2V2ZW50X2RyYWdTdXBwcmVzcyh0aGF0KTtcblx0ICAgICAgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoYXQpO1xuXHQgICAgICB6b29tc3RhcnRlZChkaXNwYXRjaCk7XG5cdCAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuXHQgICAgICAgIGRyYWdnZWQgPSAxO1xuXHQgICAgICAgIHRyYW5zbGF0ZVRvKGQzLm1vdXNlKHRoYXQpLCBsb2NhdGlvbjApO1xuXHQgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gZW5kZWQoKSB7XG5cdCAgICAgICAgc3ViamVjdC5vbihtb3VzZW1vdmUsIG51bGwpLm9uKG1vdXNldXAsIG51bGwpO1xuXHQgICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuXHQgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcblx0ICAgICAgdmFyIHRoYXQgPSB0aGlzLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGxvY2F0aW9uczAgPSB7fSwgZGlzdGFuY2UwID0gMCwgc2NhbGUwLCB6b29tTmFtZSA9IFwiLnpvb20tXCIgKyBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5pZGVudGlmaWVyLCB0b3VjaG1vdmUgPSBcInRvdWNobW92ZVwiICsgem9vbU5hbWUsIHRvdWNoZW5kID0gXCJ0b3VjaGVuZFwiICsgem9vbU5hbWUsIHRhcmdldHMgPSBbXSwgc3ViamVjdCA9IGQzLnNlbGVjdCh0aGF0KSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGhhdCk7XG5cdCAgICAgIHN0YXJ0ZWQoKTtcblx0ICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuXHQgICAgICBzdWJqZWN0Lm9uKG1vdXNlZG93biwgbnVsbCkub24odG91Y2hzdGFydCwgc3RhcnRlZCk7XG5cdCAgICAgIGZ1bmN0aW9uIHJlbG9jYXRlKCkge1xuXHQgICAgICAgIHZhciB0b3VjaGVzID0gZDMudG91Y2hlcyh0aGF0KTtcblx0ICAgICAgICBzY2FsZTAgPSB2aWV3Lms7XG5cdCAgICAgICAgdG91Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgICAgIGlmICh0LmlkZW50aWZpZXIgaW4gbG9jYXRpb25zMCkgbG9jYXRpb25zMFt0LmlkZW50aWZpZXJdID0gbG9jYXRpb24odCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuIHRvdWNoZXM7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gc3RhcnRlZCgpIHtcblx0ICAgICAgICB2YXIgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0O1xuXHQgICAgICAgIGQzLnNlbGVjdCh0YXJnZXQpLm9uKHRvdWNobW92ZSwgbW92ZWQpLm9uKHRvdWNoZW5kLCBlbmRlZCk7XG5cdCAgICAgICAgdGFyZ2V0cy5wdXNoKHRhcmdldCk7XG5cdCAgICAgICAgdmFyIGNoYW5nZWQgPSBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcztcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGNoYW5nZWQubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgICAgICBsb2NhdGlvbnMwW2NoYW5nZWRbaV0uaWRlbnRpZmllcl0gPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgdG91Y2hlcyA9IHJlbG9jYXRlKCksIG5vdyA9IERhdGUubm93KCk7XG5cdCAgICAgICAgaWYgKHRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgICBpZiAobm93IC0gdG91Y2h0aW1lIDwgNTAwKSB7XG5cdCAgICAgICAgICAgIHZhciBwID0gdG91Y2hlc1swXTtcblx0ICAgICAgICAgICAgem9vbVRvKHRoYXQsIHAsIGxvY2F0aW9uczBbcC5pZGVudGlmaWVyXSwgTWF0aC5mbG9vcihNYXRoLmxvZyh2aWV3LmspIC8gTWF0aC5MTjIpICsgMSk7XG5cdCAgICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHRvdWNodGltZSA9IG5vdztcblx0ICAgICAgICB9IGVsc2UgaWYgKHRvdWNoZXMubGVuZ3RoID4gMSkge1xuXHQgICAgICAgICAgdmFyIHAgPSB0b3VjaGVzWzBdLCBxID0gdG91Y2hlc1sxXSwgZHggPSBwWzBdIC0gcVswXSwgZHkgPSBwWzFdIC0gcVsxXTtcblx0ICAgICAgICAgIGRpc3RhbmNlMCA9IGR4ICogZHggKyBkeSAqIGR5O1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcblx0ICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCksIHAwLCBsMCwgcDEsIGwxO1xuXHQgICAgICAgIGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHQuY2FsbCh0aGF0KTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMubGVuZ3RoOyBpIDwgbjsgKytpLCBsMSA9IG51bGwpIHtcblx0ICAgICAgICAgIHAxID0gdG91Y2hlc1tpXTtcblx0ICAgICAgICAgIGlmIChsMSA9IGxvY2F0aW9uczBbcDEuaWRlbnRpZmllcl0pIHtcblx0ICAgICAgICAgICAgaWYgKGwwKSBicmVhaztcblx0ICAgICAgICAgICAgcDAgPSBwMSwgbDAgPSBsMTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGwxKSB7XG5cdCAgICAgICAgICB2YXIgZGlzdGFuY2UxID0gKGRpc3RhbmNlMSA9IHAxWzBdIC0gcDBbMF0pICogZGlzdGFuY2UxICsgKGRpc3RhbmNlMSA9IHAxWzFdIC0gcDBbMV0pICogZGlzdGFuY2UxLCBzY2FsZTEgPSBkaXN0YW5jZTAgJiYgTWF0aC5zcXJ0KGRpc3RhbmNlMSAvIGRpc3RhbmNlMCk7XG5cdCAgICAgICAgICBwMCA9IFsgKHAwWzBdICsgcDFbMF0pIC8gMiwgKHAwWzFdICsgcDFbMV0pIC8gMiBdO1xuXHQgICAgICAgICAgbDAgPSBbIChsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDIgXTtcblx0ICAgICAgICAgIHNjYWxlVG8oc2NhbGUxICogc2NhbGUwKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdG91Y2h0aW1lID0gbnVsbDtcblx0ICAgICAgICB0cmFuc2xhdGVUbyhwMCwgbDApO1xuXHQgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gZW5kZWQoKSB7XG5cdCAgICAgICAgaWYgKGQzLmV2ZW50LnRvdWNoZXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICB2YXIgY2hhbmdlZCA9IGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuXHQgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGFuZ2VkLmxlbmd0aDsgaSA8IG47ICsraSkge1xuXHQgICAgICAgICAgICBkZWxldGUgbG9jYXRpb25zMFtjaGFuZ2VkW2ldLmlkZW50aWZpZXJdO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZm9yICh2YXIgaWRlbnRpZmllciBpbiBsb2NhdGlvbnMwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB2b2lkIHJlbG9jYXRlKCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGQzLnNlbGVjdEFsbCh0YXJnZXRzKS5vbih6b29tTmFtZSwgbnVsbCk7XG5cdCAgICAgICAgc3ViamVjdC5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbih0b3VjaHN0YXJ0LCB0b3VjaHN0YXJ0ZWQpO1xuXHQgICAgICAgIGRyYWdSZXN0b3JlKCk7XG5cdCAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gbW91c2V3aGVlbGVkKCkge1xuXHQgICAgICB2YXIgZGlzcGF0Y2ggPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICBpZiAobW91c2V3aGVlbFRpbWVyKSBjbGVhclRpbWVvdXQobW91c2V3aGVlbFRpbWVyKTsgZWxzZSBkM19zZWxlY3Rpb25faW50ZXJydXB0LmNhbGwodGhpcyksIFxuXHQgICAgICB0cmFuc2xhdGUwID0gbG9jYXRpb24oY2VudGVyMCA9IGNlbnRlciB8fCBkMy5tb3VzZSh0aGlzKSksIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcblx0ICAgICAgbW91c2V3aGVlbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0ICAgICAgICBtb3VzZXdoZWVsVGltZXIgPSBudWxsO1xuXHQgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG5cdCAgICAgIH0sIDUwKTtcblx0ICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICBzY2FsZVRvKE1hdGgucG93KDIsIGQzX2JlaGF2aW9yX3pvb21EZWx0YSgpICogLjAwMikgKiB2aWV3LmspO1xuXHQgICAgICB0cmFuc2xhdGVUbyhjZW50ZXIwLCB0cmFuc2xhdGUwKTtcblx0ICAgICAgem9vbWVkKGRpc3BhdGNoKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGRibGNsaWNrZWQoKSB7XG5cdCAgICAgIHZhciBwID0gZDMubW91c2UodGhpcyksIGsgPSBNYXRoLmxvZyh2aWV3LmspIC8gTWF0aC5MTjI7XG5cdCAgICAgIHpvb21Ubyh0aGlzLCBwLCBsb2NhdGlvbihwKSwgZDMuZXZlbnQuc2hpZnRLZXkgPyBNYXRoLmNlaWwoaykgLSAxIDogTWF0aC5mbG9vcihrKSArIDEpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzLnJlYmluZCh6b29tLCBldmVudCwgXCJvblwiKTtcblx0ICB9O1xuXHQgIHZhciBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgPSBbIDAsIEluZmluaXR5IF0sIGQzX2JlaGF2aW9yX3pvb21EZWx0YSwgZDNfYmVoYXZpb3Jfem9vbVdoZWVsO1xuXHQgIGQzLmNvbG9yID0gZDNfY29sb3I7XG5cdCAgZnVuY3Rpb24gZDNfY29sb3IoKSB7fVxuXHQgIGQzX2NvbG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xuXHQgIH07XG5cdCAgZDMuaHNsID0gZDNfaHNsO1xuXHQgIGZ1bmN0aW9uIGQzX2hzbChoLCBzLCBsKSB7XG5cdCAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2hzbCA/IHZvaWQgKHRoaXMuaCA9ICtoLCB0aGlzLnMgPSArcywgdGhpcy5sID0gK2wpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBoIGluc3RhbmNlb2YgZDNfaHNsID8gbmV3IGQzX2hzbChoLmgsIGgucywgaC5sKSA6IGQzX3JnYl9wYXJzZShcIlwiICsgaCwgZDNfcmdiX2hzbCwgZDNfaHNsKSA6IG5ldyBkM19oc2woaCwgcywgbCk7XG5cdCAgfVxuXHQgIHZhciBkM19oc2xQcm90b3R5cGUgPSBkM19oc2wucHJvdG90eXBlID0gbmV3IGQzX2NvbG9yKCk7XG5cdCAgZDNfaHNsUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuXHQgICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpO1xuXHQgICAgcmV0dXJuIG5ldyBkM19oc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAvIGspO1xuXHQgIH07XG5cdCAgZDNfaHNsUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcblx0ICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKTtcblx0ICAgIHJldHVybiBuZXcgZDNfaHNsKHRoaXMuaCwgdGhpcy5zLCBrICogdGhpcy5sKTtcblx0ICB9O1xuXHQgIGQzX2hzbFByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19oc2xfcmdiKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfaHNsX3JnYihoLCBzLCBsKSB7XG5cdCAgICB2YXIgbTEsIG0yO1xuXHQgICAgaCA9IGlzTmFOKGgpID8gMCA6IChoICU9IDM2MCkgPCAwID8gaCArIDM2MCA6IGg7XG5cdCAgICBzID0gaXNOYU4ocykgPyAwIDogcyA8IDAgPyAwIDogcyA+IDEgPyAxIDogcztcblx0ICAgIGwgPSBsIDwgMCA/IDAgOiBsID4gMSA/IDEgOiBsO1xuXHQgICAgbTIgPSBsIDw9IC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuXHQgICAgbTEgPSAyICogbCAtIG0yO1xuXHQgICAgZnVuY3Rpb24gdihoKSB7XG5cdCAgICAgIGlmIChoID4gMzYwKSBoIC09IDM2MDsgZWxzZSBpZiAoaCA8IDApIGggKz0gMzYwO1xuXHQgICAgICBpZiAoaCA8IDYwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjA7XG5cdCAgICAgIGlmIChoIDwgMTgwKSByZXR1cm4gbTI7XG5cdCAgICAgIGlmIChoIDwgMjQwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MDtcblx0ICAgICAgcmV0dXJuIG0xO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gdnYoaCkge1xuXHQgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2KGgpICogMjU1KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXcgZDNfcmdiKHZ2KGggKyAxMjApLCB2dihoKSwgdnYoaCAtIDEyMCkpO1xuXHQgIH1cblx0ICBkMy5oY2wgPSBkM19oY2w7XG5cdCAgZnVuY3Rpb24gZDNfaGNsKGgsIGMsIGwpIHtcblx0ICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfaGNsID8gdm9pZCAodGhpcy5oID0gK2gsIHRoaXMuYyA9ICtjLCB0aGlzLmwgPSArbCkgOiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGggaW5zdGFuY2VvZiBkM19oY2wgPyBuZXcgZDNfaGNsKGguaCwgaC5jLCBoLmwpIDogaCBpbnN0YW5jZW9mIGQzX2xhYiA/IGQzX2xhYl9oY2woaC5sLCBoLmEsIGguYikgOiBkM19sYWJfaGNsKChoID0gZDNfcmdiX2xhYigoaCA9IGQzLnJnYihoKSkuciwgaC5nLCBoLmIpKS5sLCBoLmEsIGguYikgOiBuZXcgZDNfaGNsKGgsIGMsIGwpO1xuXHQgIH1cblx0ICB2YXIgZDNfaGNsUHJvdG90eXBlID0gZDNfaGNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuXHQgIGQzX2hjbFByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHtcblx0ICAgIHJldHVybiBuZXcgZDNfaGNsKHRoaXMuaCwgdGhpcy5jLCBNYXRoLm1pbigxMDAsIHRoaXMubCArIGQzX2xhYl9LICogKGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSkpKTtcblx0ICB9O1xuXHQgIGQzX2hjbFByb3RvdHlwZS5kYXJrZXIgPSBmdW5jdGlvbihrKSB7XG5cdCAgICByZXR1cm4gbmV3IGQzX2hjbCh0aGlzLmgsIHRoaXMuYywgTWF0aC5tYXgoMCwgdGhpcy5sIC0gZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSkpO1xuXHQgIH07XG5cdCAgZDNfaGNsUHJvdG90eXBlLnJnYiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2hjbF9sYWIodGhpcy5oLCB0aGlzLmMsIHRoaXMubCkucmdiKCk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19oY2xfbGFiKGgsIGMsIGwpIHtcblx0ICAgIGlmIChpc05hTihoKSkgaCA9IDA7XG5cdCAgICBpZiAoaXNOYU4oYykpIGMgPSAwO1xuXHQgICAgcmV0dXJuIG5ldyBkM19sYWIobCwgTWF0aC5jb3MoaCAqPSBkM19yYWRpYW5zKSAqIGMsIE1hdGguc2luKGgpICogYyk7XG5cdCAgfVxuXHQgIGQzLmxhYiA9IGQzX2xhYjtcblx0ICBmdW5jdGlvbiBkM19sYWIobCwgYSwgYikge1xuXHQgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBkM19sYWIgPyB2b2lkICh0aGlzLmwgPSArbCwgdGhpcy5hID0gK2EsIHRoaXMuYiA9ICtiKSA6IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gbCBpbnN0YW5jZW9mIGQzX2xhYiA/IG5ldyBkM19sYWIobC5sLCBsLmEsIGwuYikgOiBsIGluc3RhbmNlb2YgZDNfaGNsID8gZDNfaGNsX2xhYihsLmgsIGwuYywgbC5sKSA6IGQzX3JnYl9sYWIoKGwgPSBkM19yZ2IobCkpLnIsIGwuZywgbC5iKSA6IG5ldyBkM19sYWIobCwgYSwgYik7XG5cdCAgfVxuXHQgIHZhciBkM19sYWJfSyA9IDE4O1xuXHQgIHZhciBkM19sYWJfWCA9IC45NTA0NywgZDNfbGFiX1kgPSAxLCBkM19sYWJfWiA9IDEuMDg4ODM7XG5cdCAgdmFyIGQzX2xhYlByb3RvdHlwZSA9IGQzX2xhYi5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcblx0ICBkM19sYWJQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG5cdCAgICByZXR1cm4gbmV3IGQzX2xhYihNYXRoLm1pbigxMDAsIHRoaXMubCArIGQzX2xhYl9LICogKGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSkpLCB0aGlzLmEsIHRoaXMuYik7XG5cdCAgfTtcblx0ICBkM19sYWJQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuXHQgICAgcmV0dXJuIG5ldyBkM19sYWIoTWF0aC5tYXgoMCwgdGhpcy5sIC0gZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSksIHRoaXMuYSwgdGhpcy5iKTtcblx0ICB9O1xuXHQgIGQzX2xhYlByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19sYWJfcmdiKHRoaXMubCwgdGhpcy5hLCB0aGlzLmIpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfbGFiX3JnYihsLCBhLCBiKSB7XG5cdCAgICB2YXIgeSA9IChsICsgMTYpIC8gMTE2LCB4ID0geSArIGEgLyA1MDAsIHogPSB5IC0gYiAvIDIwMDtcblx0ICAgIHggPSBkM19sYWJfeHl6KHgpICogZDNfbGFiX1g7XG5cdCAgICB5ID0gZDNfbGFiX3h5eih5KSAqIGQzX2xhYl9ZO1xuXHQgICAgeiA9IGQzX2xhYl94eXooeikgKiBkM19sYWJfWjtcblx0ICAgIHJldHVybiBuZXcgZDNfcmdiKGQzX3h5el9yZ2IoMy4yNDA0NTQyICogeCAtIDEuNTM3MTM4NSAqIHkgLSAuNDk4NTMxNCAqIHopLCBkM194eXpfcmdiKC0uOTY5MjY2ICogeCArIDEuODc2MDEwOCAqIHkgKyAuMDQxNTU2ICogeiksIGQzX3h5el9yZ2IoLjA1NTY0MzQgKiB4IC0gLjIwNDAyNTkgKiB5ICsgMS4wNTcyMjUyICogeikpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYWJfaGNsKGwsIGEsIGIpIHtcblx0ICAgIHJldHVybiBsID4gMCA/IG5ldyBkM19oY2woTWF0aC5hdGFuMihiLCBhKSAqIGQzX2RlZ3JlZXMsIE1hdGguc3FydChhICogYSArIGIgKiBiKSwgbCkgOiBuZXcgZDNfaGNsKE5hTiwgTmFOLCBsKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGFiX3h5eih4KSB7XG5cdCAgICByZXR1cm4geCA+IC4yMDY4OTMwMzQgPyB4ICogeCAqIHggOiAoeCAtIDQgLyAyOSkgLyA3Ljc4NzAzNztcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfeHl6X2xhYih4KSB7XG5cdCAgICByZXR1cm4geCA+IC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiA3Ljc4NzAzNyAqIHggKyA0IC8gMjk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3h5el9yZ2Iocikge1xuXHQgICAgcmV0dXJuIE1hdGgucm91bmQoMjU1ICogKHIgPD0gLjAwMzA0ID8gMTIuOTIgKiByIDogMS4wNTUgKiBNYXRoLnBvdyhyLCAxIC8gMi40KSAtIC4wNTUpKTtcblx0ICB9XG5cdCAgZDMucmdiID0gZDNfcmdiO1xuXHQgIGZ1bmN0aW9uIGQzX3JnYihyLCBnLCBiKSB7XG5cdCAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX3JnYiA/IHZvaWQgKHRoaXMuciA9IH5+ciwgdGhpcy5nID0gfn5nLCB0aGlzLmIgPSB+fmIpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyByIGluc3RhbmNlb2YgZDNfcmdiID8gbmV3IGQzX3JnYihyLnIsIHIuZywgci5iKSA6IGQzX3JnYl9wYXJzZShcIlwiICsgciwgZDNfcmdiLCBkM19oc2xfcmdiKSA6IG5ldyBkM19yZ2IociwgZywgYik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3JnYk51bWJlcih2YWx1ZSkge1xuXHQgICAgcmV0dXJuIG5ldyBkM19yZ2IodmFsdWUgPj4gMTYsIHZhbHVlID4+IDggJiAyNTUsIHZhbHVlICYgMjU1KTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfcmdiU3RyaW5nKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gZDNfcmdiTnVtYmVyKHZhbHVlKSArIFwiXCI7XG5cdCAgfVxuXHQgIHZhciBkM19yZ2JQcm90b3R5cGUgPSBkM19yZ2IucHJvdG90eXBlID0gbmV3IGQzX2NvbG9yKCk7XG5cdCAgZDNfcmdiUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuXHQgICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpO1xuXHQgICAgdmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmIsIGkgPSAzMDtcblx0ICAgIGlmICghciAmJiAhZyAmJiAhYikgcmV0dXJuIG5ldyBkM19yZ2IoaSwgaSwgaSk7XG5cdCAgICBpZiAociAmJiByIDwgaSkgciA9IGk7XG5cdCAgICBpZiAoZyAmJiBnIDwgaSkgZyA9IGk7XG5cdCAgICBpZiAoYiAmJiBiIDwgaSkgYiA9IGk7XG5cdCAgICByZXR1cm4gbmV3IGQzX3JnYihNYXRoLm1pbigyNTUsIHIgLyBrKSwgTWF0aC5taW4oMjU1LCBnIC8gayksIE1hdGgubWluKDI1NSwgYiAvIGspKTtcblx0ICB9O1xuXHQgIGQzX3JnYlByb3RvdHlwZS5kYXJrZXIgPSBmdW5jdGlvbihrKSB7XG5cdCAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG5cdCAgICByZXR1cm4gbmV3IGQzX3JnYihrICogdGhpcy5yLCBrICogdGhpcy5nLCBrICogdGhpcy5iKTtcblx0ICB9O1xuXHQgIGQzX3JnYlByb3RvdHlwZS5oc2wgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19yZ2JfaHNsKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuXHQgIH07XG5cdCAgZDNfcmdiUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KHRoaXMucikgKyBkM19yZ2JfaGV4KHRoaXMuZykgKyBkM19yZ2JfaGV4KHRoaXMuYik7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19yZ2JfaGV4KHYpIHtcblx0ICAgIHJldHVybiB2IDwgMTYgPyBcIjBcIiArIE1hdGgubWF4KDAsIHYpLnRvU3RyaW5nKDE2KSA6IE1hdGgubWluKDI1NSwgdikudG9TdHJpbmcoMTYpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19yZ2JfcGFyc2UoZm9ybWF0LCByZ2IsIGhzbCkge1xuXHQgICAgdmFyIHIgPSAwLCBnID0gMCwgYiA9IDAsIG0xLCBtMiwgY29sb3I7XG5cdCAgICBtMSA9IC8oW2Etel0rKVxcKCguKilcXCkvLmV4ZWMoZm9ybWF0ID0gZm9ybWF0LnRvTG93ZXJDYXNlKCkpO1xuXHQgICAgaWYgKG0xKSB7XG5cdCAgICAgIG0yID0gbTFbMl0uc3BsaXQoXCIsXCIpO1xuXHQgICAgICBzd2l0Y2ggKG0xWzFdKSB7XG5cdCAgICAgICBjYXNlIFwiaHNsXCI6XG5cdCAgICAgICAge1xuXHQgICAgICAgICAgcmV0dXJuIGhzbChwYXJzZUZsb2F0KG0yWzBdKSwgcGFyc2VGbG9hdChtMlsxXSkgLyAxMDAsIHBhcnNlRmxvYXQobTJbMl0pIC8gMTAwKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgY2FzZSBcInJnYlwiOlxuXHQgICAgICAgIHtcblx0ICAgICAgICAgIHJldHVybiByZ2IoZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzBdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzFdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzJdKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoY29sb3IgPSBkM19yZ2JfbmFtZXMuZ2V0KGZvcm1hdCkpIHtcblx0ICAgICAgcmV0dXJuIHJnYihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcblx0ICAgIH1cblx0ICAgIGlmIChmb3JtYXQgIT0gbnVsbCAmJiBmb3JtYXQuY2hhckF0KDApID09PSBcIiNcIiAmJiAhaXNOYU4oY29sb3IgPSBwYXJzZUludChmb3JtYXQuc2xpY2UoMSksIDE2KSkpIHtcblx0ICAgICAgaWYgKGZvcm1hdC5sZW5ndGggPT09IDQpIHtcblx0ICAgICAgICByID0gKGNvbG9yICYgMzg0MCkgPj4gNDtcblx0ICAgICAgICByID0gciA+PiA0IHwgcjtcblx0ICAgICAgICBnID0gY29sb3IgJiAyNDA7XG5cdCAgICAgICAgZyA9IGcgPj4gNCB8IGc7XG5cdCAgICAgICAgYiA9IGNvbG9yICYgMTU7XG5cdCAgICAgICAgYiA9IGIgPDwgNCB8IGI7XG5cdCAgICAgIH0gZWxzZSBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNykge1xuXHQgICAgICAgIHIgPSAoY29sb3IgJiAxNjcxMTY4MCkgPj4gMTY7XG5cdCAgICAgICAgZyA9IChjb2xvciAmIDY1MjgwKSA+PiA4O1xuXHQgICAgICAgIGIgPSBjb2xvciAmIDI1NTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJnYihyLCBnLCBiKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfcmdiX2hzbChyLCBnLCBiKSB7XG5cdCAgICB2YXIgbWluID0gTWF0aC5taW4ociAvPSAyNTUsIGcgLz0gMjU1LCBiIC89IDI1NSksIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLCBkID0gbWF4IC0gbWluLCBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuXHQgICAgaWYgKGQpIHtcblx0ICAgICAgcyA9IGwgPCAuNSA/IGQgLyAobWF4ICsgbWluKSA6IGQgLyAoMiAtIG1heCAtIG1pbik7XG5cdCAgICAgIGlmIChyID09IG1heCkgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBlbHNlIGlmIChnID09IG1heCkgaCA9IChiIC0gcikgLyBkICsgMjsgZWxzZSBoID0gKHIgLSBnKSAvIGQgKyA0O1xuXHQgICAgICBoICo9IDYwO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaCA9IE5hTjtcblx0ICAgICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmV3IGQzX2hzbChoLCBzLCBsKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfcmdiX2xhYihyLCBnLCBiKSB7XG5cdCAgICByID0gZDNfcmdiX3h5eihyKTtcblx0ICAgIGcgPSBkM19yZ2JfeHl6KGcpO1xuXHQgICAgYiA9IGQzX3JnYl94eXooYik7XG5cdCAgICB2YXIgeCA9IGQzX3h5el9sYWIoKC40MTI0NTY0ICogciArIC4zNTc1NzYxICogZyArIC4xODA0Mzc1ICogYikgLyBkM19sYWJfWCksIHkgPSBkM194eXpfbGFiKCguMjEyNjcyOSAqIHIgKyAuNzE1MTUyMiAqIGcgKyAuMDcyMTc1ICogYikgLyBkM19sYWJfWSksIHogPSBkM194eXpfbGFiKCguMDE5MzMzOSAqIHIgKyAuMTE5MTkyICogZyArIC45NTAzMDQxICogYikgLyBkM19sYWJfWik7XG5cdCAgICByZXR1cm4gZDNfbGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3JnYl94eXoocikge1xuXHQgICAgcmV0dXJuIChyIC89IDI1NSkgPD0gLjA0MDQ1ID8gciAvIDEyLjkyIDogTWF0aC5wb3coKHIgKyAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19yZ2JfcGFyc2VOdW1iZXIoYykge1xuXHQgICAgdmFyIGYgPSBwYXJzZUZsb2F0KGMpO1xuXHQgICAgcmV0dXJuIGMuY2hhckF0KGMubGVuZ3RoIC0gMSkgPT09IFwiJVwiID8gTWF0aC5yb3VuZChmICogMi41NSkgOiBmO1xuXHQgIH1cblx0ICB2YXIgZDNfcmdiX25hbWVzID0gZDMubWFwKHtcblx0ICAgIGFsaWNlYmx1ZTogMTU3OTIzODMsXG5cdCAgICBhbnRpcXVld2hpdGU6IDE2NDQ0Mzc1LFxuXHQgICAgYXF1YTogNjU1MzUsXG5cdCAgICBhcXVhbWFyaW5lOiA4Mzg4NTY0LFxuXHQgICAgYXp1cmU6IDE1Nzk0MTc1LFxuXHQgICAgYmVpZ2U6IDE2MTE5MjYwLFxuXHQgICAgYmlzcXVlOiAxNjc3MDI0NCxcblx0ICAgIGJsYWNrOiAwLFxuXHQgICAgYmxhbmNoZWRhbG1vbmQ6IDE2NzcyMDQ1LFxuXHQgICAgYmx1ZTogMjU1LFxuXHQgICAgYmx1ZXZpb2xldDogOTA1NTIwMixcblx0ICAgIGJyb3duOiAxMDgyNDIzNCxcblx0ICAgIGJ1cmx5d29vZDogMTQ1OTYyMzEsXG5cdCAgICBjYWRldGJsdWU6IDYyNjY1MjgsXG5cdCAgICBjaGFydHJldXNlOiA4Mzg4MzUyLFxuXHQgICAgY2hvY29sYXRlOiAxMzc4OTQ3MCxcblx0ICAgIGNvcmFsOiAxNjc0NDI3Mixcblx0ICAgIGNvcm5mbG93ZXJibHVlOiA2NTkxOTgxLFxuXHQgICAgY29ybnNpbGs6IDE2Nzc1Mzg4LFxuXHQgICAgY3JpbXNvbjogMTQ0MjMxMDAsXG5cdCAgICBjeWFuOiA2NTUzNSxcblx0ICAgIGRhcmtibHVlOiAxMzksXG5cdCAgICBkYXJrY3lhbjogMzU3MjMsXG5cdCAgICBkYXJrZ29sZGVucm9kOiAxMjA5MjkzOSxcblx0ICAgIGRhcmtncmF5OiAxMTExOTAxNyxcblx0ICAgIGRhcmtncmVlbjogMjU2MDAsXG5cdCAgICBkYXJrZ3JleTogMTExMTkwMTcsXG5cdCAgICBkYXJra2hha2k6IDEyNDMzMjU5LFxuXHQgICAgZGFya21hZ2VudGE6IDkxMDk2NDMsXG5cdCAgICBkYXJrb2xpdmVncmVlbjogNTU5Nzk5OSxcblx0ICAgIGRhcmtvcmFuZ2U6IDE2NzQ3NTIwLFxuXHQgICAgZGFya29yY2hpZDogMTAwNDAwMTIsXG5cdCAgICBkYXJrcmVkOiA5MTA5NTA0LFxuXHQgICAgZGFya3NhbG1vbjogMTUzMDg0MTAsXG5cdCAgICBkYXJrc2VhZ3JlZW46IDk0MTk5MTksXG5cdCAgICBkYXJrc2xhdGVibHVlOiA0NzM0MzQ3LFxuXHQgICAgZGFya3NsYXRlZ3JheTogMzEwMDQ5NSxcblx0ICAgIGRhcmtzbGF0ZWdyZXk6IDMxMDA0OTUsXG5cdCAgICBkYXJrdHVycXVvaXNlOiA1Mjk0NSxcblx0ICAgIGRhcmt2aW9sZXQ6IDk2OTk1MzksXG5cdCAgICBkZWVwcGluazogMTY3MTY5NDcsXG5cdCAgICBkZWVwc2t5Ymx1ZTogNDkxNTEsXG5cdCAgICBkaW1ncmF5OiA2OTA4MjY1LFxuXHQgICAgZGltZ3JleTogNjkwODI2NSxcblx0ICAgIGRvZGdlcmJsdWU6IDIwMDMxOTksXG5cdCAgICBmaXJlYnJpY2s6IDExNjc0MTQ2LFxuXHQgICAgZmxvcmFsd2hpdGU6IDE2Nzc1OTIwLFxuXHQgICAgZm9yZXN0Z3JlZW46IDIyNjM4NDIsXG5cdCAgICBmdWNoc2lhOiAxNjcxMTkzNSxcblx0ICAgIGdhaW5zYm9ybzogMTQ0NzQ0NjAsXG5cdCAgICBnaG9zdHdoaXRlOiAxNjMxNjY3MSxcblx0ICAgIGdvbGQ6IDE2NzY2NzIwLFxuXHQgICAgZ29sZGVucm9kOiAxNDMyOTEyMCxcblx0ICAgIGdyYXk6IDg0MjE1MDQsXG5cdCAgICBncmVlbjogMzI3NjgsXG5cdCAgICBncmVlbnllbGxvdzogMTE0MDMwNTUsXG5cdCAgICBncmV5OiA4NDIxNTA0LFxuXHQgICAgaG9uZXlkZXc6IDE1Nzk0MTYwLFxuXHQgICAgaG90cGluazogMTY3Mzg3NDAsXG5cdCAgICBpbmRpYW5yZWQ6IDEzNDU4NTI0LFxuXHQgICAgaW5kaWdvOiA0OTE1MzMwLFxuXHQgICAgaXZvcnk6IDE2Nzc3MjAwLFxuXHQgICAga2hha2k6IDE1Nzg3NjYwLFxuXHQgICAgbGF2ZW5kZXI6IDE1MTMyNDEwLFxuXHQgICAgbGF2ZW5kZXJibHVzaDogMTY3NzMzNjUsXG5cdCAgICBsYXduZ3JlZW46IDgxOTA5NzYsXG5cdCAgICBsZW1vbmNoaWZmb246IDE2Nzc1ODg1LFxuXHQgICAgbGlnaHRibHVlOiAxMTM5MzI1NCxcblx0ICAgIGxpZ2h0Y29yYWw6IDE1NzYxNTM2LFxuXHQgICAgbGlnaHRjeWFuOiAxNDc0NTU5OSxcblx0ICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAxNjQ0ODIxMCxcblx0ICAgIGxpZ2h0Z3JheTogMTM4ODIzMjMsXG5cdCAgICBsaWdodGdyZWVuOiA5NDk4MjU2LFxuXHQgICAgbGlnaHRncmV5OiAxMzg4MjMyMyxcblx0ICAgIGxpZ2h0cGluazogMTY3NTg0NjUsXG5cdCAgICBsaWdodHNhbG1vbjogMTY3NTI3NjIsXG5cdCAgICBsaWdodHNlYWdyZWVuOiAyMTQyODkwLFxuXHQgICAgbGlnaHRza3libHVlOiA4OTAwMzQ2LFxuXHQgICAgbGlnaHRzbGF0ZWdyYXk6IDc4MzM3NTMsXG5cdCAgICBsaWdodHNsYXRlZ3JleTogNzgzMzc1Myxcblx0ICAgIGxpZ2h0c3RlZWxibHVlOiAxMTU4NDczNCxcblx0ICAgIGxpZ2h0eWVsbG93OiAxNjc3NzE4NCxcblx0ICAgIGxpbWU6IDY1MjgwLFxuXHQgICAgbGltZWdyZWVuOiAzMzI5MzMwLFxuXHQgICAgbGluZW46IDE2NDQ1NjcwLFxuXHQgICAgbWFnZW50YTogMTY3MTE5MzUsXG5cdCAgICBtYXJvb246IDgzODg2MDgsXG5cdCAgICBtZWRpdW1hcXVhbWFyaW5lOiA2NzM3MzIyLFxuXHQgICAgbWVkaXVtYmx1ZTogMjA1LFxuXHQgICAgbWVkaXVtb3JjaGlkOiAxMjIxMTY2Nyxcblx0ICAgIG1lZGl1bXB1cnBsZTogOTY2MjY4Myxcblx0ICAgIG1lZGl1bXNlYWdyZWVuOiAzOTc4MDk3LFxuXHQgICAgbWVkaXVtc2xhdGVibHVlOiA4MDg3NzkwLFxuXHQgICAgbWVkaXVtc3ByaW5nZ3JlZW46IDY0MTU0LFxuXHQgICAgbWVkaXVtdHVycXVvaXNlOiA0NzcyMzAwLFxuXHQgICAgbWVkaXVtdmlvbGV0cmVkOiAxMzA0NzE3Myxcblx0ICAgIG1pZG5pZ2h0Ymx1ZTogMTY0NDkxMixcblx0ICAgIG1pbnRjcmVhbTogMTYxMjE4NTAsXG5cdCAgICBtaXN0eXJvc2U6IDE2NzcwMjczLFxuXHQgICAgbW9jY2FzaW46IDE2NzcwMjI5LFxuXHQgICAgbmF2YWpvd2hpdGU6IDE2NzY4Njg1LFxuXHQgICAgbmF2eTogMTI4LFxuXHQgICAgb2xkbGFjZTogMTY2NDM1NTgsXG5cdCAgICBvbGl2ZTogODQyMTM3Nixcblx0ICAgIG9saXZlZHJhYjogNzA0ODczOSxcblx0ICAgIG9yYW5nZTogMTY3NTM5MjAsXG5cdCAgICBvcmFuZ2VyZWQ6IDE2NzI5MzQ0LFxuXHQgICAgb3JjaGlkOiAxNDMxNTczNCxcblx0ICAgIHBhbGVnb2xkZW5yb2Q6IDE1NjU3MTMwLFxuXHQgICAgcGFsZWdyZWVuOiAxMDAyNTg4MCxcblx0ICAgIHBhbGV0dXJxdW9pc2U6IDExNTI5OTY2LFxuXHQgICAgcGFsZXZpb2xldHJlZDogMTQzODEyMDMsXG5cdCAgICBwYXBheWF3aGlwOiAxNjc3MzA3Nyxcblx0ICAgIHBlYWNocHVmZjogMTY3Njc2NzMsXG5cdCAgICBwZXJ1OiAxMzQ2ODk5MSxcblx0ICAgIHBpbms6IDE2NzYxMDM1LFxuXHQgICAgcGx1bTogMTQ1MjQ2MzcsXG5cdCAgICBwb3dkZXJibHVlOiAxMTU5MTkxMCxcblx0ICAgIHB1cnBsZTogODM4ODczNixcblx0ICAgIHJlYmVjY2FwdXJwbGU6IDY2OTc4ODEsXG5cdCAgICByZWQ6IDE2NzExNjgwLFxuXHQgICAgcm9zeWJyb3duOiAxMjM1NzUxOSxcblx0ICAgIHJveWFsYmx1ZTogNDI4Njk0NSxcblx0ICAgIHNhZGRsZWJyb3duOiA5MTI3MTg3LFxuXHQgICAgc2FsbW9uOiAxNjQxNjg4Mixcblx0ICAgIHNhbmR5YnJvd246IDE2MDMyODY0LFxuXHQgICAgc2VhZ3JlZW46IDMwNTAzMjcsXG5cdCAgICBzZWFzaGVsbDogMTY3NzQ2MzgsXG5cdCAgICBzaWVubmE6IDEwNTA2Nzk3LFxuXHQgICAgc2lsdmVyOiAxMjYzMjI1Nixcblx0ICAgIHNreWJsdWU6IDg5MDAzMzEsXG5cdCAgICBzbGF0ZWJsdWU6IDY5NzAwNjEsXG5cdCAgICBzbGF0ZWdyYXk6IDczNzI5NDQsXG5cdCAgICBzbGF0ZWdyZXk6IDczNzI5NDQsXG5cdCAgICBzbm93OiAxNjc3NTkzMCxcblx0ICAgIHNwcmluZ2dyZWVuOiA2NTQwNyxcblx0ICAgIHN0ZWVsYmx1ZTogNDYyMDk4MCxcblx0ICAgIHRhbjogMTM4MDg3ODAsXG5cdCAgICB0ZWFsOiAzMjg5Nixcblx0ICAgIHRoaXN0bGU6IDE0MjA0ODg4LFxuXHQgICAgdG9tYXRvOiAxNjczNzA5NSxcblx0ICAgIHR1cnF1b2lzZTogNDI1MTg1Nixcblx0ICAgIHZpb2xldDogMTU2MzEwODYsXG5cdCAgICB3aGVhdDogMTYxMTMzMzEsXG5cdCAgICB3aGl0ZTogMTY3NzcyMTUsXG5cdCAgICB3aGl0ZXNtb2tlOiAxNjExOTI4NSxcblx0ICAgIHllbGxvdzogMTY3NzY5NjAsXG5cdCAgICB5ZWxsb3dncmVlbjogMTAxNDUwNzRcblx0ICB9KTtcblx0ICBkM19yZ2JfbmFtZXMuZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdCAgICBkM19yZ2JfbmFtZXMuc2V0KGtleSwgZDNfcmdiTnVtYmVyKHZhbHVlKSk7XG5cdCAgfSk7XG5cdCAgZnVuY3Rpb24gZDNfZnVuY3Rvcih2KSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiA/IHYgOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHY7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5mdW5jdG9yID0gZDNfZnVuY3Rvcjtcblx0ICBkMy54aHIgPSBkM194aHJUeXBlKGQzX2lkZW50aXR5KTtcblx0ICBmdW5jdGlvbiBkM194aHJUeXBlKHJlc3BvbnNlKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odXJsLCBtaW1lVHlwZSwgY2FsbGJhY2spIHtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIG1pbWVUeXBlID09PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrID0gbWltZVR5cGUsIFxuXHQgICAgICBtaW1lVHlwZSA9IG51bGw7XG5cdCAgICAgIHJldHVybiBkM194aHIodXJsLCBtaW1lVHlwZSwgcmVzcG9uc2UsIGNhbGxiYWNrKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3hocih1cmwsIG1pbWVUeXBlLCByZXNwb25zZSwgY2FsbGJhY2spIHtcblx0ICAgIHZhciB4aHIgPSB7fSwgZGlzcGF0Y2ggPSBkMy5kaXNwYXRjaChcImJlZm9yZXNlbmRcIiwgXCJwcm9ncmVzc1wiLCBcImxvYWRcIiwgXCJlcnJvclwiKSwgaGVhZGVycyA9IHt9LCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksIHJlc3BvbnNlVHlwZSA9IG51bGw7XG5cdCAgICBpZiAodGhpcy5YRG9tYWluUmVxdWVzdCAmJiAhKFwid2l0aENyZWRlbnRpYWxzXCIgaW4gcmVxdWVzdCkgJiYgL14oaHR0cChzKT86KT9cXC9cXC8vLnRlc3QodXJsKSkgcmVxdWVzdCA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuXHQgICAgXCJvbmxvYWRcIiBpbiByZXF1ZXN0ID8gcmVxdWVzdC5vbmxvYWQgPSByZXF1ZXN0Lm9uZXJyb3IgPSByZXNwb25kIDogcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmVxdWVzdC5yZWFkeVN0YXRlID4gMyAmJiByZXNwb25kKCk7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gcmVzcG9uZCgpIHtcblx0ICAgICAgdmFyIHN0YXR1cyA9IHJlcXVlc3Quc3RhdHVzLCByZXN1bHQ7XG5cdCAgICAgIGlmICghc3RhdHVzICYmIGQzX3hockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHx8IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0KSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlLmNhbGwoeGhyLCByZXF1ZXN0KTtcblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgZSk7XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGRpc3BhdGNoLmxvYWQuY2FsbCh4aHIsIHJlc3VsdCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZGlzcGF0Y2guZXJyb3IuY2FsbCh4aHIsIHJlcXVlc3QpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbihldmVudCkge1xuXHQgICAgICB2YXIgbyA9IGQzLmV2ZW50O1xuXHQgICAgICBkMy5ldmVudCA9IGV2ZW50O1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIGRpc3BhdGNoLnByb2dyZXNzLmNhbGwoeGhyLCByZXF1ZXN0KTtcblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICBkMy5ldmVudCA9IG87XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgICB4aHIuaGVhZGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcblx0ICAgICAgbmFtZSA9IChuYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gaGVhZGVyc1tuYW1lXTtcblx0ICAgICAgaWYgKHZhbHVlID09IG51bGwpIGRlbGV0ZSBoZWFkZXJzW25hbWVdOyBlbHNlIGhlYWRlcnNbbmFtZV0gPSB2YWx1ZSArIFwiXCI7XG5cdCAgICAgIHJldHVybiB4aHI7XG5cdCAgICB9O1xuXHQgICAgeGhyLm1pbWVUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWltZVR5cGU7XG5cdCAgICAgIG1pbWVUeXBlID0gdmFsdWUgPT0gbnVsbCA/IG51bGwgOiB2YWx1ZSArIFwiXCI7XG5cdCAgICAgIHJldHVybiB4aHI7XG5cdCAgICB9O1xuXHQgICAgeGhyLnJlc3BvbnNlVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJlc3BvbnNlVHlwZTtcblx0ICAgICAgcmVzcG9uc2VUeXBlID0gdmFsdWU7XG5cdCAgICAgIHJldHVybiB4aHI7XG5cdCAgICB9O1xuXHQgICAgeGhyLnJlc3BvbnNlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgcmVzcG9uc2UgPSB2YWx1ZTtcblx0ICAgICAgcmV0dXJuIHhocjtcblx0ICAgIH07XG5cdCAgICBbIFwiZ2V0XCIsIFwicG9zdFwiIF0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcblx0ICAgICAgeGhyW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4geGhyLnNlbmQuYXBwbHkoeGhyLCBbIG1ldGhvZCBdLmNvbmNhdChkM19hcnJheShhcmd1bWVudHMpKSk7XG5cdCAgICAgIH07XG5cdCAgICB9KTtcblx0ICAgIHhoci5zZW5kID0gZnVuY3Rpb24obWV0aG9kLCBkYXRhLCBjYWxsYmFjaykge1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgZGF0YSA9PT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjayA9IGRhdGEsIGRhdGEgPSBudWxsO1xuXHQgICAgICByZXF1ZXN0Lm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuXHQgICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiAhKFwiYWNjZXB0XCIgaW4gaGVhZGVycykpIGhlYWRlcnNbXCJhY2NlcHRcIl0gPSBtaW1lVHlwZSArIFwiLCovKlwiO1xuXHQgICAgICBpZiAocmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKSBmb3IgKHZhciBuYW1lIGluIGhlYWRlcnMpIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBoZWFkZXJzW25hbWVdKTtcblx0ICAgICAgaWYgKG1pbWVUeXBlICE9IG51bGwgJiYgcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKSByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUobWltZVR5cGUpO1xuXHQgICAgICBpZiAocmVzcG9uc2VUeXBlICE9IG51bGwpIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuXHQgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgeGhyLm9uKFwiZXJyb3JcIiwgY2FsbGJhY2spLm9uKFwibG9hZFwiLCBmdW5jdGlvbihyZXF1ZXN0KSB7XG5cdCAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVxdWVzdCk7XG5cdCAgICAgIH0pO1xuXHQgICAgICBkaXNwYXRjaC5iZWZvcmVzZW5kLmNhbGwoeGhyLCByZXF1ZXN0KTtcblx0ICAgICAgcmVxdWVzdC5zZW5kKGRhdGEgPT0gbnVsbCA/IG51bGwgOiBkYXRhKTtcblx0ICAgICAgcmV0dXJuIHhocjtcblx0ICAgIH07XG5cdCAgICB4aHIuYWJvcnQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuXHQgICAgICByZXR1cm4geGhyO1xuXHQgICAgfTtcblx0ICAgIGQzLnJlYmluZCh4aHIsIGRpc3BhdGNoLCBcIm9uXCIpO1xuXHQgICAgcmV0dXJuIGNhbGxiYWNrID09IG51bGwgPyB4aHIgOiB4aHIuZ2V0KGQzX3hocl9maXhDYWxsYmFjayhjYWxsYmFjaykpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spIHtcblx0ICAgIHJldHVybiBjYWxsYmFjay5sZW5ndGggPT09IDEgPyBmdW5jdGlvbihlcnJvciwgcmVxdWVzdCkge1xuXHQgICAgICBjYWxsYmFjayhlcnJvciA9PSBudWxsID8gcmVxdWVzdCA6IG51bGwpO1xuXHQgICAgfSA6IGNhbGxiYWNrO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM194aHJIYXNSZXNwb25zZShyZXF1ZXN0KSB7XG5cdCAgICB2YXIgdHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xuXHQgICAgcmV0dXJuIHR5cGUgJiYgdHlwZSAhPT0gXCJ0ZXh0XCIgPyByZXF1ZXN0LnJlc3BvbnNlIDogcmVxdWVzdC5yZXNwb25zZVRleHQ7XG5cdCAgfVxuXHQgIGQzLmRzdiA9IGZ1bmN0aW9uKGRlbGltaXRlciwgbWltZVR5cGUpIHtcblx0ICAgIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoJ1tcIicgKyBkZWxpbWl0ZXIgKyBcIlxcbl1cIiksIGRlbGltaXRlckNvZGUgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcblx0ICAgIGZ1bmN0aW9uIGRzdih1cmwsIHJvdywgY2FsbGJhY2spIHtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcblx0ICAgICAgdmFyIHhociA9IGQzX3hocih1cmwsIG1pbWVUeXBlLCByb3cgPT0gbnVsbCA/IHJlc3BvbnNlIDogdHlwZWRSZXNwb25zZShyb3cpLCBjYWxsYmFjayk7XG5cdCAgICAgIHhoci5yb3cgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB4aHIucmVzcG9uc2UoKHJvdyA9IF8pID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2UoXykpIDogcm93O1xuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4geGhyO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVzcG9uc2UocmVxdWVzdCkge1xuXHQgICAgICByZXR1cm4gZHN2LnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHR5cGVkUmVzcG9uc2UoZikge1xuXHQgICAgICByZXR1cm4gZnVuY3Rpb24ocmVxdWVzdCkge1xuXHQgICAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQsIGYpO1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgZHN2LnBhcnNlID0gZnVuY3Rpb24odGV4dCwgZikge1xuXHQgICAgICB2YXIgbztcblx0ICAgICAgcmV0dXJuIGRzdi5wYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG5cdCAgICAgICAgaWYgKG8pIHJldHVybiBvKHJvdywgaSAtIDEpO1xuXHQgICAgICAgIHZhciBhID0gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyByb3cubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcblx0ICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuXHQgICAgICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuXHQgICAgICAgIG8gPSBmID8gZnVuY3Rpb24ocm93LCBpKSB7XG5cdCAgICAgICAgICByZXR1cm4gZihhKHJvdyksIGkpO1xuXHQgICAgICAgIH0gOiBhO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICBkc3YucGFyc2VSb3dzID0gZnVuY3Rpb24odGV4dCwgZikge1xuXHQgICAgICB2YXIgRU9MID0ge30sIEVPRiA9IHt9LCByb3dzID0gW10sIE4gPSB0ZXh0Lmxlbmd0aCwgSSA9IDAsIG4gPSAwLCB0LCBlb2w7XG5cdCAgICAgIGZ1bmN0aW9uIHRva2VuKCkge1xuXHQgICAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7XG5cdCAgICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7XG5cdCAgICAgICAgdmFyIGogPSBJO1xuXHQgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IDM0KSB7XG5cdCAgICAgICAgICB2YXIgaSA9IGo7XG5cdCAgICAgICAgICB3aGlsZSAoaSsrIDwgTikge1xuXHQgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAzNCkge1xuXHQgICAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSArIDEpICE9PSAzNCkgYnJlYWs7XG5cdCAgICAgICAgICAgICAgKytpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBJID0gaSArIDI7XG5cdCAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7XG5cdCAgICAgICAgICBpZiAoYyA9PT0gMTMpIHtcblx0ICAgICAgICAgICAgZW9sID0gdHJ1ZTtcblx0ICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpICsgMikgPT09IDEwKSArK0k7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDEwKSB7XG5cdCAgICAgICAgICAgIGVvbCA9IHRydWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSkucmVwbGFjZSgvXCJcIi9nLCAnXCInKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgd2hpbGUgKEkgPCBOKSB7XG5cdCAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChJKyspLCBrID0gMTtcblx0ICAgICAgICAgIGlmIChjID09PSAxMCkgZW9sID0gdHJ1ZTsgZWxzZSBpZiAoYyA9PT0gMTMpIHtcblx0ICAgICAgICAgICAgZW9sID0gdHJ1ZTtcblx0ICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gMTApICsrSSwgKytrO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChjICE9PSBkZWxpbWl0ZXJDb2RlKSBjb250aW51ZTtcblx0ICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIEkgLSBrKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRleHQuc2xpY2Uoaik7XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuXHQgICAgICAgIHZhciBhID0gW107XG5cdCAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcblx0ICAgICAgICAgIGEucHVzaCh0KTtcblx0ICAgICAgICAgIHQgPSB0b2tlbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoZiAmJiAoYSA9IGYoYSwgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG5cdCAgICAgICAgcm93cy5wdXNoKGEpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiByb3dzO1xuXHQgICAgfTtcblx0ICAgIGRzdi5mb3JtYXQgPSBmdW5jdGlvbihyb3dzKSB7XG5cdCAgICAgIGlmIChBcnJheS5pc0FycmF5KHJvd3NbMF0pKSByZXR1cm4gZHN2LmZvcm1hdFJvd3Mocm93cyk7XG5cdCAgICAgIHZhciBmaWVsZFNldCA9IG5ldyBkM19TZXQoKSwgZmllbGRzID0gW107XG5cdCAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcblx0ICAgICAgICBmb3IgKHZhciBmaWVsZCBpbiByb3cpIHtcblx0ICAgICAgICAgIGlmICghZmllbGRTZXQuaGFzKGZpZWxkKSkge1xuXHQgICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZFNldC5hZGQoZmllbGQpKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gWyBmaWVsZHMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcikgXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG5cdCAgICAgICAgcmV0dXJuIGZpZWxkcy5tYXAoZnVuY3Rpb24oZmllbGQpIHtcblx0ICAgICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbZmllbGRdKTtcblx0ICAgICAgICB9KS5qb2luKGRlbGltaXRlcik7XG5cdCAgICAgIH0pKS5qb2luKFwiXFxuXCIpO1xuXHQgICAgfTtcblx0ICAgIGRzdi5mb3JtYXRSb3dzID0gZnVuY3Rpb24ocm93cykge1xuXHQgICAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIGZvcm1hdFJvdyhyb3cpIHtcblx0ICAgICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHRleHQpIHtcblx0ICAgICAgcmV0dXJuIHJlRm9ybWF0LnRlc3QodGV4dCkgPyAnXCInICsgdGV4dC5yZXBsYWNlKC9cXFwiL2csICdcIlwiJykgKyAnXCInIDogdGV4dDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBkc3Y7XG5cdCAgfTtcblx0ICBkMy5jc3YgPSBkMy5kc3YoXCIsXCIsIFwidGV4dC9jc3ZcIik7XG5cdCAgZDMudHN2ID0gZDMuZHN2KFwiXHRcIiwgXCJ0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzXCIpO1xuXHQgIHZhciBkM190aW1lcl9xdWV1ZUhlYWQsIGQzX3RpbWVyX3F1ZXVlVGFpbCwgZDNfdGltZXJfaW50ZXJ2YWwsIGQzX3RpbWVyX3RpbWVvdXQsIGQzX3RpbWVyX2ZyYW1lID0gdGhpc1tkM192ZW5kb3JTeW1ib2wodGhpcywgXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIildIHx8IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdCAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNyk7XG5cdCAgfTtcblx0ICBkMy50aW1lciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgZDNfdGltZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3RpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGhlbikge1xuXHQgICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgICAgaWYgKG4gPCAyKSBkZWxheSA9IDA7XG5cdCAgICBpZiAobiA8IDMpIHRoZW4gPSBEYXRlLm5vdygpO1xuXHQgICAgdmFyIHRpbWUgPSB0aGVuICsgZGVsYXksIHRpbWVyID0ge1xuXHQgICAgICBjOiBjYWxsYmFjayxcblx0ICAgICAgdDogdGltZSxcblx0ICAgICAgbjogbnVsbFxuXHQgICAgfTtcblx0ICAgIGlmIChkM190aW1lcl9xdWV1ZVRhaWwpIGQzX3RpbWVyX3F1ZXVlVGFpbC5uID0gdGltZXI7IGVsc2UgZDNfdGltZXJfcXVldWVIZWFkID0gdGltZXI7XG5cdCAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0aW1lcjtcblx0ICAgIGlmICghZDNfdGltZXJfaW50ZXJ2YWwpIHtcblx0ICAgICAgZDNfdGltZXJfdGltZW91dCA9IGNsZWFyVGltZW91dChkM190aW1lcl90aW1lb3V0KTtcblx0ICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuXHQgICAgICBkM190aW1lcl9mcmFtZShkM190aW1lcl9zdGVwKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aW1lcjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZXJfc3RlcCgpIHtcblx0ICAgIHZhciBub3cgPSBkM190aW1lcl9tYXJrKCksIGRlbGF5ID0gZDNfdGltZXJfc3dlZXAoKSAtIG5vdztcblx0ICAgIGlmIChkZWxheSA+IDI0KSB7XG5cdCAgICAgIGlmIChpc0Zpbml0ZShkZWxheSkpIHtcblx0ICAgICAgICBjbGVhclRpbWVvdXQoZDNfdGltZXJfdGltZW91dCk7XG5cdCAgICAgICAgZDNfdGltZXJfdGltZW91dCA9IHNldFRpbWVvdXQoZDNfdGltZXJfc3RlcCwgZGVsYXkpO1xuXHQgICAgICB9XG5cdCAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMTtcblx0ICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGQzLnRpbWVyLmZsdXNoID0gZnVuY3Rpb24oKSB7XG5cdCAgICBkM190aW1lcl9tYXJrKCk7XG5cdCAgICBkM190aW1lcl9zd2VlcCgpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfdGltZXJfbWFyaygpIHtcblx0ICAgIHZhciBub3cgPSBEYXRlLm5vdygpLCB0aW1lciA9IGQzX3RpbWVyX3F1ZXVlSGVhZDtcblx0ICAgIHdoaWxlICh0aW1lcikge1xuXHQgICAgICBpZiAobm93ID49IHRpbWVyLnQgJiYgdGltZXIuYyhub3cgLSB0aW1lci50KSkgdGltZXIuYyA9IG51bGw7XG5cdCAgICAgIHRpbWVyID0gdGltZXIubjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBub3c7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVyX3N3ZWVwKCkge1xuXHQgICAgdmFyIHQwLCB0MSA9IGQzX3RpbWVyX3F1ZXVlSGVhZCwgdGltZSA9IEluZmluaXR5O1xuXHQgICAgd2hpbGUgKHQxKSB7XG5cdCAgICAgIGlmICh0MS5jKSB7XG5cdCAgICAgICAgaWYgKHQxLnQgPCB0aW1lKSB0aW1lID0gdDEudDtcblx0ICAgICAgICB0MSA9ICh0MCA9IHQxKS5uO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHQxID0gdDAgPyB0MC5uID0gdDEubiA6IGQzX3RpbWVyX3F1ZXVlSGVhZCA9IHQxLm47XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGQzX3RpbWVyX3F1ZXVlVGFpbCA9IHQwO1xuXHQgICAgcmV0dXJuIHRpbWU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Zvcm1hdF9wcmVjaXNpb24oeCwgcCkge1xuXHQgICAgcmV0dXJuIHAgLSAoeCA/IE1hdGguY2VpbChNYXRoLmxvZyh4KSAvIE1hdGguTE4xMCkgOiAxKTtcblx0ICB9XG5cdCAgZDMucm91bmQgPSBmdW5jdGlvbih4LCBuKSB7XG5cdCAgICByZXR1cm4gbiA/IE1hdGgucm91bmQoeCAqIChuID0gTWF0aC5wb3coMTAsIG4pKSkgLyBuIDogTWF0aC5yb3VuZCh4KTtcblx0ICB9O1xuXHQgIHZhciBkM19mb3JtYXRQcmVmaXhlcyA9IFsgXCJ5XCIsIFwielwiLCBcImFcIiwgXCJmXCIsIFwicFwiLCBcIm5cIiwgXCLCtVwiLCBcIm1cIiwgXCJcIiwgXCJrXCIsIFwiTVwiLCBcIkdcIiwgXCJUXCIsIFwiUFwiLCBcIkVcIiwgXCJaXCIsIFwiWVwiIF0ubWFwKGQzX2Zvcm1hdFByZWZpeCk7XG5cdCAgZDMuZm9ybWF0UHJlZml4ID0gZnVuY3Rpb24odmFsdWUsIHByZWNpc2lvbikge1xuXHQgICAgdmFyIGkgPSAwO1xuXHQgICAgaWYgKHZhbHVlID0gK3ZhbHVlKSB7XG5cdCAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlICo9IC0xO1xuXHQgICAgICBpZiAocHJlY2lzaW9uKSB2YWx1ZSA9IGQzLnJvdW5kKHZhbHVlLCBkM19mb3JtYXRfcHJlY2lzaW9uKHZhbHVlLCBwcmVjaXNpb24pKTtcblx0ICAgICAgaSA9IDEgKyBNYXRoLmZsb29yKDFlLTEyICsgTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjEwKTtcblx0ICAgICAgaSA9IE1hdGgubWF4KC0yNCwgTWF0aC5taW4oMjQsIE1hdGguZmxvb3IoKGkgLSAxKSAvIDMpICogMykpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX2Zvcm1hdFByZWZpeGVzWzggKyBpIC8gM107XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19mb3JtYXRQcmVmaXgoZCwgaSkge1xuXHQgICAgdmFyIGsgPSBNYXRoLnBvdygxMCwgYWJzKDggLSBpKSAqIDMpO1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgc2NhbGU6IGkgPiA4ID8gZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIHJldHVybiBkIC8gaztcblx0ICAgICAgfSA6IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICByZXR1cm4gZCAqIGs7XG5cdCAgICAgIH0sXG5cdCAgICAgIHN5bWJvbDogZFxuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbG9jYWxlX251bWJlckZvcm1hdChsb2NhbGUpIHtcblx0ICAgIHZhciBsb2NhbGVfZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLCBsb2NhbGVfdGhvdXNhbmRzID0gbG9jYWxlLnRob3VzYW5kcywgbG9jYWxlX2dyb3VwaW5nID0gbG9jYWxlLmdyb3VwaW5nLCBsb2NhbGVfY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksIGZvcm1hdEdyb3VwID0gbG9jYWxlX2dyb3VwaW5nICYmIGxvY2FsZV90aG91c2FuZHMgPyBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcblx0ICAgICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsIHQgPSBbXSwgaiA9IDAsIGcgPSBsb2NhbGVfZ3JvdXBpbmdbMF0sIGxlbmd0aCA9IDA7XG5cdCAgICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuXHQgICAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuXHQgICAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuXHQgICAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcblx0ICAgICAgICBnID0gbG9jYWxlX2dyb3VwaW5nW2ogPSAoaiArIDEpICUgbG9jYWxlX2dyb3VwaW5nLmxlbmd0aF07XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4obG9jYWxlX3Rob3VzYW5kcyk7XG5cdCAgICB9IDogZDNfaWRlbnRpdHk7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG5cdCAgICAgIHZhciBtYXRjaCA9IGQzX2Zvcm1hdF9yZS5leGVjKHNwZWNpZmllciksIGZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIiwgYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIiwgc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiLCBzeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiLCB6ZmlsbCA9IG1hdGNoWzVdLCB3aWR0aCA9ICttYXRjaFs2XSwgY29tbWEgPSBtYXRjaFs3XSwgcHJlY2lzaW9uID0gbWF0Y2hbOF0sIHR5cGUgPSBtYXRjaFs5XSwgc2NhbGUgPSAxLCBwcmVmaXggPSBcIlwiLCBzdWZmaXggPSBcIlwiLCBpbnRlZ2VyID0gZmFsc2UsIGV4cG9uZW50ID0gdHJ1ZTtcblx0ICAgICAgaWYgKHByZWNpc2lvbikgcHJlY2lzaW9uID0gK3ByZWNpc2lvbi5zdWJzdHJpbmcoMSk7XG5cdCAgICAgIGlmICh6ZmlsbCB8fCBmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpIHtcblx0ICAgICAgICB6ZmlsbCA9IGZpbGwgPSBcIjBcIjtcblx0ICAgICAgICBhbGlnbiA9IFwiPVwiO1xuXHQgICAgICB9XG5cdCAgICAgIHN3aXRjaCAodHlwZSkge1xuXHQgICAgICAgY2FzZSBcIm5cIjpcblx0ICAgICAgICBjb21tYSA9IHRydWU7XG5cdCAgICAgICAgdHlwZSA9IFwiZ1wiO1xuXHQgICAgICAgIGJyZWFrO1xuXHRcblx0ICAgICAgIGNhc2UgXCIlXCI6XG5cdCAgICAgICAgc2NhbGUgPSAxMDA7XG5cdCAgICAgICAgc3VmZml4ID0gXCIlXCI7XG5cdCAgICAgICAgdHlwZSA9IFwiZlwiO1xuXHQgICAgICAgIGJyZWFrO1xuXHRcblx0ICAgICAgIGNhc2UgXCJwXCI6XG5cdCAgICAgICAgc2NhbGUgPSAxMDA7XG5cdCAgICAgICAgc3VmZml4ID0gXCIlXCI7XG5cdCAgICAgICAgdHlwZSA9IFwiclwiO1xuXHQgICAgICAgIGJyZWFrO1xuXHRcblx0ICAgICAgIGNhc2UgXCJiXCI6XG5cdCAgICAgICBjYXNlIFwib1wiOlxuXHQgICAgICAgY2FzZSBcInhcIjpcblx0ICAgICAgIGNhc2UgXCJYXCI6XG5cdCAgICAgICAgaWYgKHN5bWJvbCA9PT0gXCIjXCIpIHByZWZpeCA9IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpO1xuXHRcblx0ICAgICAgIGNhc2UgXCJjXCI6XG5cdCAgICAgICAgZXhwb25lbnQgPSBmYWxzZTtcblx0XG5cdCAgICAgICBjYXNlIFwiZFwiOlxuXHQgICAgICAgIGludGVnZXIgPSB0cnVlO1xuXHQgICAgICAgIHByZWNpc2lvbiA9IDA7XG5cdCAgICAgICAgYnJlYWs7XG5cdFxuXHQgICAgICAgY2FzZSBcInNcIjpcblx0ICAgICAgICBzY2FsZSA9IC0xO1xuXHQgICAgICAgIHR5cGUgPSBcInJcIjtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICBpZiAoc3ltYm9sID09PSBcIiRcIikgcHJlZml4ID0gbG9jYWxlX2N1cnJlbmN5WzBdLCBzdWZmaXggPSBsb2NhbGVfY3VycmVuY3lbMV07XG5cdCAgICAgIGlmICh0eXBlID09IFwiclwiICYmICFwcmVjaXNpb24pIHR5cGUgPSBcImdcIjtcblx0ICAgICAgaWYgKHByZWNpc2lvbiAhPSBudWxsKSB7XG5cdCAgICAgICAgaWYgKHR5cGUgPT0gXCJnXCIpIHByZWNpc2lvbiA9IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKTsgZWxzZSBpZiAodHlwZSA9PSBcImVcIiB8fCB0eXBlID09IFwiZlwiKSBwcmVjaXNpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cdCAgICAgIH1cblx0ICAgICAgdHlwZSA9IGQzX2Zvcm1hdF90eXBlcy5nZXQodHlwZSkgfHwgZDNfZm9ybWF0X3R5cGVEZWZhdWx0O1xuXHQgICAgICB2YXIgemNvbW1hID0gemZpbGwgJiYgY29tbWE7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICAgIHZhciBmdWxsU3VmZml4ID0gc3VmZml4O1xuXHQgICAgICAgIGlmIChpbnRlZ2VyICYmIHZhbHVlICUgMSkgcmV0dXJuIFwiXCI7XG5cdCAgICAgICAgdmFyIG5lZ2F0aXZlID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAodmFsdWUgPSAtdmFsdWUsIFwiLVwiKSA6IHNpZ24gPT09IFwiLVwiID8gXCJcIiA6IHNpZ247XG5cdCAgICAgICAgaWYgKHNjYWxlIDwgMCkge1xuXHQgICAgICAgICAgdmFyIHVuaXQgPSBkMy5mb3JtYXRQcmVmaXgodmFsdWUsIHByZWNpc2lvbik7XG5cdCAgICAgICAgICB2YWx1ZSA9IHVuaXQuc2NhbGUodmFsdWUpO1xuXHQgICAgICAgICAgZnVsbFN1ZmZpeCA9IHVuaXQuc3ltYm9sICsgc3VmZml4O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YWx1ZSAqPSBzY2FsZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFsdWUgPSB0eXBlKHZhbHVlLCBwcmVjaXNpb24pO1xuXHQgICAgICAgIHZhciBpID0gdmFsdWUubGFzdEluZGV4T2YoXCIuXCIpLCBiZWZvcmUsIGFmdGVyO1xuXHQgICAgICAgIGlmIChpIDwgMCkge1xuXHQgICAgICAgICAgdmFyIGogPSBleHBvbmVudCA/IHZhbHVlLmxhc3RJbmRleE9mKFwiZVwiKSA6IC0xO1xuXHQgICAgICAgICAgaWYgKGogPCAwKSBiZWZvcmUgPSB2YWx1ZSwgYWZ0ZXIgPSBcIlwiOyBlbHNlIGJlZm9yZSA9IHZhbHVlLnN1YnN0cmluZygwLCBqKSwgYWZ0ZXIgPSB2YWx1ZS5zdWJzdHJpbmcoaik7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGJlZm9yZSA9IHZhbHVlLnN1YnN0cmluZygwLCBpKTtcblx0ICAgICAgICAgIGFmdGVyID0gbG9jYWxlX2RlY2ltYWwgKyB2YWx1ZS5zdWJzdHJpbmcoaSArIDEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXpmaWxsICYmIGNvbW1hKSBiZWZvcmUgPSBmb3JtYXRHcm91cChiZWZvcmUsIEluZmluaXR5KTtcblx0ICAgICAgICB2YXIgbGVuZ3RoID0gcHJlZml4Lmxlbmd0aCArIGJlZm9yZS5sZW5ndGggKyBhZnRlci5sZW5ndGggKyAoemNvbW1hID8gMCA6IG5lZ2F0aXZlLmxlbmd0aCksIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheShsZW5ndGggPSB3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXHQgICAgICAgIGlmICh6Y29tbWEpIGJlZm9yZSA9IGZvcm1hdEdyb3VwKHBhZGRpbmcgKyBiZWZvcmUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSBhZnRlci5sZW5ndGggOiBJbmZpbml0eSk7XG5cdCAgICAgICAgbmVnYXRpdmUgKz0gcHJlZml4O1xuXHQgICAgICAgIHZhbHVlID0gYmVmb3JlICsgYWZ0ZXI7XG5cdCAgICAgICAgcmV0dXJuIChhbGlnbiA9PT0gXCI8XCIgPyBuZWdhdGl2ZSArIHZhbHVlICsgcGFkZGluZyA6IGFsaWduID09PSBcIj5cIiA/IHBhZGRpbmcgKyBuZWdhdGl2ZSArIHZhbHVlIDogYWxpZ24gPT09IFwiXlwiID8gcGFkZGluZy5zdWJzdHJpbmcoMCwgbGVuZ3RoID4+PSAxKSArIG5lZ2F0aXZlICsgdmFsdWUgKyBwYWRkaW5nLnN1YnN0cmluZyhsZW5ndGgpIDogbmVnYXRpdmUgKyAoemNvbW1hID8gdmFsdWUgOiBwYWRkaW5nICsgdmFsdWUpKSArIGZ1bGxTdWZmaXg7XG5cdCAgICAgIH07XG5cdCAgICB9O1xuXHQgIH1cblx0ICB2YXIgZDNfZm9ybWF0X3JlID0gLyg/OihbXntdKT8oWzw+PV5dKSk/KFsrXFwtIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuLT9cXGQrKT8oW2EteiVdKT8vaTtcblx0ICB2YXIgZDNfZm9ybWF0X3R5cGVzID0gZDMubWFwKHtcblx0ICAgIGI6IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMik7XG5cdCAgICB9LFxuXHQgICAgYzogZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcblx0ICAgIH0sXG5cdCAgICBvOiBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiB4LnRvU3RyaW5nKDgpO1xuXHQgICAgfSxcblx0ICAgIHg6IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpO1xuXHQgICAgfSxcblx0ICAgIFg6IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdCAgICB9LFxuXHQgICAgZzogZnVuY3Rpb24oeCwgcCkge1xuXHQgICAgICByZXR1cm4geC50b1ByZWNpc2lvbihwKTtcblx0ICAgIH0sXG5cdCAgICBlOiBmdW5jdGlvbih4LCBwKSB7XG5cdCAgICAgIHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7XG5cdCAgICB9LFxuXHQgICAgZjogZnVuY3Rpb24oeCwgcCkge1xuXHQgICAgICByZXR1cm4geC50b0ZpeGVkKHApO1xuXHQgICAgfSxcblx0ICAgIHI6IGZ1bmN0aW9uKHgsIHApIHtcblx0ICAgICAgcmV0dXJuICh4ID0gZDMucm91bmQoeCwgZDNfZm9ybWF0X3ByZWNpc2lvbih4LCBwKSkpLnRvRml4ZWQoTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIGQzX2Zvcm1hdF9wcmVjaXNpb24oeCAqICgxICsgMWUtMTUpLCBwKSkpKTtcblx0ICAgIH1cblx0ICB9KTtcblx0ICBmdW5jdGlvbiBkM19mb3JtYXRfdHlwZURlZmF1bHQoeCkge1xuXHQgICAgcmV0dXJuIHggKyBcIlwiO1xuXHQgIH1cblx0ICB2YXIgZDNfdGltZSA9IGQzLnRpbWUgPSB7fSwgZDNfZGF0ZSA9IERhdGU7XG5cdCAgZnVuY3Rpb24gZDNfZGF0ZV91dGMoKSB7XG5cdCAgICB0aGlzLl8gPSBuZXcgRGF0ZShhcmd1bWVudHMubGVuZ3RoID4gMSA/IERhdGUuVVRDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBhcmd1bWVudHNbMF0pO1xuXHQgIH1cblx0ICBkM19kYXRlX3V0Yy5wcm90b3R5cGUgPSB7XG5cdCAgICBnZXREYXRlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXRlKCk7XG5cdCAgICB9LFxuXHQgICAgZ2V0RGF5OiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXkoKTtcblx0ICAgIH0sXG5cdCAgICBnZXRGdWxsWWVhcjogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDRnVsbFllYXIoKTtcblx0ICAgIH0sXG5cdCAgICBnZXRIb3VyczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDSG91cnMoKTtcblx0ICAgIH0sXG5cdCAgICBnZXRNaWxsaXNlY29uZHM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuXHQgICAgfSxcblx0ICAgIGdldE1pbnV0ZXM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbnV0ZXMoKTtcblx0ICAgIH0sXG5cdCAgICBnZXRNb250aDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDTW9udGgoKTtcblx0ICAgIH0sXG5cdCAgICBnZXRTZWNvbmRzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENTZWNvbmRzKCk7XG5cdCAgICB9LFxuXHQgICAgZ2V0VGltZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl8uZ2V0VGltZSgpO1xuXHQgICAgfSxcblx0ICAgIGdldFRpbWV6b25lT2Zmc2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIDA7XG5cdCAgICB9LFxuXHQgICAgdmFsdWVPZjogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl8udmFsdWVPZigpO1xuXHQgICAgfSxcblx0ICAgIHNldERhdGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXRlLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcblx0ICAgIH0sXG5cdCAgICBzZXREYXk6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXkuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuXHQgICAgfSxcblx0ICAgIHNldEZ1bGxZZWFyOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDRnVsbFllYXIuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuXHQgICAgfSxcblx0ICAgIHNldEhvdXJzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDSG91cnMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuXHQgICAgfSxcblx0ICAgIHNldE1pbGxpc2Vjb25kczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbGxpc2Vjb25kcy5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG5cdCAgICB9LFxuXHQgICAgc2V0TWludXRlczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbnV0ZXMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuXHQgICAgfSxcblx0ICAgIHNldE1vbnRoOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDTW9udGguYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuXHQgICAgfSxcblx0ICAgIHNldFNlY29uZHM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENTZWNvbmRzLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcblx0ICAgIH0sXG5cdCAgICBzZXRUaW1lOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VGltZS5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdCAgfTtcblx0ICB2YXIgZDNfdGltZV9wcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcblx0ICBmdW5jdGlvbiBkM190aW1lX2ludGVydmFsKGxvY2FsLCBzdGVwLCBudW1iZXIpIHtcblx0ICAgIGZ1bmN0aW9uIHJvdW5kKGRhdGUpIHtcblx0ICAgICAgdmFyIGQwID0gbG9jYWwoZGF0ZSksIGQxID0gb2Zmc2V0KGQwLCAxKTtcblx0ICAgICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBjZWlsKGRhdGUpIHtcblx0ICAgICAgc3RlcChkYXRlID0gbG9jYWwobmV3IGQzX2RhdGUoZGF0ZSAtIDEpKSwgMSk7XG5cdCAgICAgIHJldHVybiBkYXRlO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gb2Zmc2V0KGRhdGUsIGspIHtcblx0ICAgICAgc3RlcChkYXRlID0gbmV3IGQzX2RhdGUoK2RhdGUpLCBrKTtcblx0ICAgICAgcmV0dXJuIGRhdGU7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByYW5nZSh0MCwgdDEsIGR0KSB7XG5cdCAgICAgIHZhciB0aW1lID0gY2VpbCh0MCksIHRpbWVzID0gW107XG5cdCAgICAgIGlmIChkdCA+IDEpIHtcblx0ICAgICAgICB3aGlsZSAodGltZSA8IHQxKSB7XG5cdCAgICAgICAgICBpZiAoIShudW1iZXIodGltZSkgJSBkdCkpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKTtcblx0ICAgICAgICAgIHN0ZXAodGltZSwgMSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHdoaWxlICh0aW1lIDwgdDEpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKSwgc3RlcCh0aW1lLCAxKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdGltZXM7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByYW5nZV91dGModDAsIHQxLCBkdCkge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIGQzX2RhdGUgPSBkM19kYXRlX3V0Yztcblx0ICAgICAgICB2YXIgdXRjID0gbmV3IGQzX2RhdGVfdXRjKCk7XG5cdCAgICAgICAgdXRjLl8gPSB0MDtcblx0ICAgICAgICByZXR1cm4gcmFuZ2UodXRjLCB0MSwgZHQpO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBsb2NhbC5mbG9vciA9IGxvY2FsO1xuXHQgICAgbG9jYWwucm91bmQgPSByb3VuZDtcblx0ICAgIGxvY2FsLmNlaWwgPSBjZWlsO1xuXHQgICAgbG9jYWwub2Zmc2V0ID0gb2Zmc2V0O1xuXHQgICAgbG9jYWwucmFuZ2UgPSByYW5nZTtcblx0ICAgIHZhciB1dGMgPSBsb2NhbC51dGMgPSBkM190aW1lX2ludGVydmFsX3V0Yyhsb2NhbCk7XG5cdCAgICB1dGMuZmxvb3IgPSB1dGM7XG5cdCAgICB1dGMucm91bmQgPSBkM190aW1lX2ludGVydmFsX3V0Yyhyb3VuZCk7XG5cdCAgICB1dGMuY2VpbCA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKGNlaWwpO1xuXHQgICAgdXRjLm9mZnNldCA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKG9mZnNldCk7XG5cdCAgICB1dGMucmFuZ2UgPSByYW5nZV91dGM7XG5cdCAgICByZXR1cm4gbG9jYWw7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfaW50ZXJ2YWxfdXRjKG1ldGhvZCkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGspIHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBkM19kYXRlID0gZDNfZGF0ZV91dGM7XG5cdCAgICAgICAgdmFyIHV0YyA9IG5ldyBkM19kYXRlX3V0YygpO1xuXHQgICAgICAgIHV0Yy5fID0gZGF0ZTtcblx0ICAgICAgICByZXR1cm4gbWV0aG9kKHV0YywgaykuXztcblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICBkM19kYXRlID0gRGF0ZTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cdCAgZDNfdGltZS55ZWFyID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG5cdCAgICBkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSk7XG5cdCAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuXHQgICAgcmV0dXJuIGRhdGU7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG5cdCAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIG9mZnNldCk7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcblx0ICB9KTtcblx0ICBkM190aW1lLnllYXJzID0gZDNfdGltZS55ZWFyLnJhbmdlO1xuXHQgIGQzX3RpbWUueWVhcnMudXRjID0gZDNfdGltZS55ZWFyLnV0Yy5yYW5nZTtcblx0ICBkM190aW1lLmRheSA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgdmFyIGRheSA9IG5ldyBkM19kYXRlKDJlMywgMCk7XG5cdCAgICBkYXkuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpKTtcblx0ICAgIHJldHVybiBkYXk7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG5cdCAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBvZmZzZXQpO1xuXHQgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG5cdCAgfSk7XG5cdCAgZDNfdGltZS5kYXlzID0gZDNfdGltZS5kYXkucmFuZ2U7XG5cdCAgZDNfdGltZS5kYXlzLnV0YyA9IGQzX3RpbWUuZGF5LnV0Yy5yYW5nZTtcblx0ICBkM190aW1lLmRheU9mWWVhciA9IGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIHZhciB5ZWFyID0gZDNfdGltZS55ZWFyKGRhdGUpO1xuXHQgICAgcmV0dXJuIE1hdGguZmxvb3IoKGRhdGUgLSB5ZWFyIC0gKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHllYXIuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiA2ZTQpIC8gODY0ZTUpO1xuXHQgIH07XG5cdCAgWyBcInN1bmRheVwiLCBcIm1vbmRheVwiLCBcInR1ZXNkYXlcIiwgXCJ3ZWRuZXNkYXlcIiwgXCJ0aHVyc2RheVwiLCBcImZyaWRheVwiLCBcInNhdHVyZGF5XCIgXS5mb3JFYWNoKGZ1bmN0aW9uKGRheSwgaSkge1xuXHQgICAgaSA9IDcgLSBpO1xuXHQgICAgdmFyIGludGVydmFsID0gZDNfdGltZVtkYXldID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG5cdCAgICAgIChkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSkpLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIGkpICUgNyk7XG5cdCAgICAgIHJldHVybiBkYXRlO1xuXHQgICAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG5cdCAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDcpO1xuXHQgICAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgICB2YXIgZGF5ID0gZDNfdGltZS55ZWFyKGRhdGUpLmdldERheSgpO1xuXHQgICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpIC0gKGRheSAhPT0gaSk7XG5cdCAgICB9KTtcblx0ICAgIGQzX3RpbWVbZGF5ICsgXCJzXCJdID0gaW50ZXJ2YWwucmFuZ2U7XG5cdCAgICBkM190aW1lW2RheSArIFwic1wiXS51dGMgPSBpbnRlcnZhbC51dGMucmFuZ2U7XG5cdCAgICBkM190aW1lW2RheSArIFwiT2ZZZWFyXCJdID0gZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgICB2YXIgZGF5ID0gZDNfdGltZS55ZWFyKGRhdGUpLmdldERheSgpO1xuXHQgICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpO1xuXHQgICAgfTtcblx0ICB9KTtcblx0ICBkM190aW1lLndlZWsgPSBkM190aW1lLnN1bmRheTtcblx0ICBkM190aW1lLndlZWtzID0gZDNfdGltZS5zdW5kYXkucmFuZ2U7XG5cdCAgZDNfdGltZS53ZWVrcy51dGMgPSBkM190aW1lLnN1bmRheS51dGMucmFuZ2U7XG5cdCAgZDNfdGltZS53ZWVrT2ZZZWFyID0gZDNfdGltZS5zdW5kYXlPZlllYXI7XG5cdCAgZnVuY3Rpb24gZDNfbG9jYWxlX3RpbWVGb3JtYXQobG9jYWxlKSB7XG5cdCAgICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLCBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLCBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLCBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLCBsb2NhbGVfZGF5cyA9IGxvY2FsZS5kYXlzLCBsb2NhbGVfc2hvcnREYXlzID0gbG9jYWxlLnNob3J0RGF5cywgbG9jYWxlX21vbnRocyA9IGxvY2FsZS5tb250aHMsIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblx0ICAgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKSB7XG5cdCAgICAgIHZhciBuID0gdGVtcGxhdGUubGVuZ3RoO1xuXHQgICAgICBmdW5jdGlvbiBmb3JtYXQoZGF0ZSkge1xuXHQgICAgICAgIHZhciBzdHJpbmcgPSBbXSwgaSA9IC0xLCBqID0gMCwgYywgcCwgZjtcblx0ICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgICAgaWYgKHRlbXBsYXRlLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG5cdCAgICAgICAgICAgIHN0cmluZy5wdXNoKHRlbXBsYXRlLnNsaWNlKGosIGkpKTtcblx0ICAgICAgICAgICAgaWYgKChwID0gZDNfdGltZV9mb3JtYXRQYWRzW2MgPSB0ZW1wbGF0ZS5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSB0ZW1wbGF0ZS5jaGFyQXQoKytpKTtcblx0ICAgICAgICAgICAgaWYgKGYgPSBkM190aW1lX2Zvcm1hdHNbY10pIGMgPSBmKGRhdGUsIHAgPT0gbnVsbCA/IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIiA6IHApO1xuXHQgICAgICAgICAgICBzdHJpbmcucHVzaChjKTtcblx0ICAgICAgICAgICAgaiA9IGkgKyAxO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBzdHJpbmcucHVzaCh0ZW1wbGF0ZS5zbGljZShqLCBpKSk7XG5cdCAgICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuXHQgICAgICB9XG5cdCAgICAgIGZvcm1hdC5wYXJzZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuXHQgICAgICAgIHZhciBkID0ge1xuXHQgICAgICAgICAgeTogMTkwMCxcblx0ICAgICAgICAgIG06IDAsXG5cdCAgICAgICAgICBkOiAxLFxuXHQgICAgICAgICAgSDogMCxcblx0ICAgICAgICAgIE06IDAsXG5cdCAgICAgICAgICBTOiAwLFxuXHQgICAgICAgICAgTDogMCxcblx0ICAgICAgICAgIFo6IG51bGxcblx0ICAgICAgICB9LCBpID0gZDNfdGltZV9wYXJzZShkLCB0ZW1wbGF0ZSwgc3RyaW5nLCAwKTtcblx0ICAgICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblx0ICAgICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblx0ICAgICAgICB2YXIgbG9jYWxaID0gZC5aICE9IG51bGwgJiYgZDNfZGF0ZSAhPT0gZDNfZGF0ZV91dGMsIGRhdGUgPSBuZXcgKGxvY2FsWiA/IGQzX2RhdGVfdXRjIDogZDNfZGF0ZSkoKTtcblx0ICAgICAgICBpZiAoXCJqXCIgaW4gZCkgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIGQuaik7IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuXHQgICAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwiV1wiIGluIGQgPyAxIDogMDtcblx0ICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55LCAwLCAxKTtcblx0ICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55LCAwLCBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDYpICUgNyk7XG5cdCAgICAgICAgfSBlbHNlIGRhdGUuc2V0RnVsbFllYXIoZC55LCBkLm0sIGQuZCk7XG5cdCAgICAgICAgZGF0ZS5zZXRIb3VycyhkLkggKyAoZC5aIC8gMTAwIHwgMCksIGQuTSArIGQuWiAlIDEwMCwgZC5TLCBkLkwpO1xuXHQgICAgICAgIHJldHVybiBsb2NhbFogPyBkYXRlLl8gOiBkYXRlO1xuXHQgICAgICB9O1xuXHQgICAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiBmb3JtYXQ7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlKGRhdGUsIHRlbXBsYXRlLCBzdHJpbmcsIGopIHtcblx0ICAgICAgdmFyIGMsIHAsIHQsIGkgPSAwLCBuID0gdGVtcGxhdGUubGVuZ3RoLCBtID0gc3RyaW5nLmxlbmd0aDtcblx0ICAgICAgd2hpbGUgKGkgPCBuKSB7XG5cdCAgICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuXHQgICAgICAgIGMgPSB0ZW1wbGF0ZS5jaGFyQ29kZUF0KGkrKyk7XG5cdCAgICAgICAgaWYgKGMgPT09IDM3KSB7XG5cdCAgICAgICAgICB0ID0gdGVtcGxhdGUuY2hhckF0KGkrKyk7XG5cdCAgICAgICAgICBwID0gZDNfdGltZV9wYXJzZXJzW3QgaW4gZDNfdGltZV9mb3JtYXRQYWRzID8gdGVtcGxhdGUuY2hhckF0KGkrKykgOiB0XTtcblx0ICAgICAgICAgIGlmICghcCB8fCAoaiA9IHAoZGF0ZSwgc3RyaW5nLCBqKSkgPCAwKSByZXR1cm4gLTE7XG5cdCAgICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcblx0ICAgICAgICAgIHJldHVybiAtMTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGo7XG5cdCAgICB9XG5cdCAgICBkM190aW1lX2Zvcm1hdC51dGMgPSBmdW5jdGlvbih0ZW1wbGF0ZSkge1xuXHQgICAgICB2YXIgbG9jYWwgPSBkM190aW1lX2Zvcm1hdCh0ZW1wbGF0ZSk7XG5cdCAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIGQzX2RhdGUgPSBkM19kYXRlX3V0Yztcblx0ICAgICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZSgpO1xuXHQgICAgICAgICAgdXRjLl8gPSBkYXRlO1xuXHQgICAgICAgICAgcmV0dXJuIGxvY2FsKHV0Yyk7XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBmb3JtYXQucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuXHQgICAgICAgICAgdmFyIGRhdGUgPSBsb2NhbC5wYXJzZShzdHJpbmcpO1xuXHQgICAgICAgICAgcmV0dXJuIGRhdGUgJiYgZGF0ZS5fO1xuXHQgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICBkM19kYXRlID0gRGF0ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICAgIGZvcm1hdC50b1N0cmluZyA9IGxvY2FsLnRvU3RyaW5nO1xuXHQgICAgICByZXR1cm4gZm9ybWF0O1xuXHQgICAgfTtcblx0ICAgIGQzX3RpbWVfZm9ybWF0Lm11bHRpID0gZDNfdGltZV9mb3JtYXQudXRjLm11bHRpID0gZDNfdGltZV9mb3JtYXRNdWx0aTtcblx0ICAgIHZhciBkM190aW1lX3BlcmlvZExvb2t1cCA9IGQzLm1hcCgpLCBkM190aW1lX2RheVJlID0gZDNfdGltZV9mb3JtYXRSZShsb2NhbGVfZGF5cyksIGQzX3RpbWVfZGF5TG9va3VwID0gZDNfdGltZV9mb3JtYXRMb29rdXAobG9jYWxlX2RheXMpLCBkM190aW1lX2RheUFiYnJldlJlID0gZDNfdGltZV9mb3JtYXRSZShsb2NhbGVfc2hvcnREYXlzKSwgZDNfdGltZV9kYXlBYmJyZXZMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfc2hvcnREYXlzKSwgZDNfdGltZV9tb250aFJlID0gZDNfdGltZV9mb3JtYXRSZShsb2NhbGVfbW9udGhzKSwgZDNfdGltZV9tb250aExvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLCBkM190aW1lX21vbnRoQWJicmV2UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksIGQzX3RpbWVfbW9udGhBYmJyZXZMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXHQgICAgbG9jYWxlX3BlcmlvZHMuZm9yRWFjaChmdW5jdGlvbihwLCBpKSB7XG5cdCAgICAgIGQzX3RpbWVfcGVyaW9kTG9va3VwLnNldChwLnRvTG93ZXJDYXNlKCksIGkpO1xuXHQgICAgfSk7XG5cdCAgICB2YXIgZDNfdGltZV9mb3JtYXRzID0ge1xuXHQgICAgICBhOiBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgcmV0dXJuIGxvY2FsZV9zaG9ydERheXNbZC5nZXREYXkoKV07XG5cdCAgICAgIH0sXG5cdCAgICAgIEE6IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICByZXR1cm4gbG9jYWxlX2RheXNbZC5nZXREYXkoKV07XG5cdCAgICAgIH0sXG5cdCAgICAgIGI6IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG5cdCAgICAgIH0sXG5cdCAgICAgIEI6IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuXHQgICAgICB9LFxuXHQgICAgICBjOiBkM190aW1lX2Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUpLFxuXHQgICAgICBkOiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcblx0ICAgICAgfSxcblx0ICAgICAgZTogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldERhdGUoKSwgcCwgMik7XG5cdCAgICAgIH0sXG5cdCAgICAgIEg6IGZ1bmN0aW9uKGQsIHApIHtcblx0ICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcblx0ICAgICAgfSxcblx0ICAgICAgSTogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG5cdCAgICAgIH0sXG5cdCAgICAgIGo6IGZ1bmN0aW9uKGQsIHApIHtcblx0ICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoMSArIGQzX3RpbWUuZGF5T2ZZZWFyKGQpLCBwLCAzKTtcblx0ICAgICAgfSxcblx0ICAgICAgTDogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcblx0ICAgICAgfSxcblx0ICAgICAgbTogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcblx0ICAgICAgfSxcblx0ICAgICAgTTogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG5cdCAgICAgIH0sXG5cdCAgICAgIHA6IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcblx0ICAgICAgfSxcblx0ICAgICAgUzogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG5cdCAgICAgIH0sXG5cdCAgICAgIFU6IGZ1bmN0aW9uKGQsIHApIHtcblx0ICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5zdW5kYXlPZlllYXIoZCksIHAsIDIpO1xuXHQgICAgICB9LFxuXHQgICAgICB3OiBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgcmV0dXJuIGQuZ2V0RGF5KCk7XG5cdCAgICAgIH0sXG5cdCAgICAgIFc6IGZ1bmN0aW9uKGQsIHApIHtcblx0ICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5tb25kYXlPZlllYXIoZCksIHAsIDIpO1xuXHQgICAgICB9LFxuXHQgICAgICB4OiBkM190aW1lX2Zvcm1hdChsb2NhbGVfZGF0ZSksXG5cdCAgICAgIFg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV90aW1lKSxcblx0ICAgICAgeTogZnVuY3Rpb24oZCwgcCkge1xuXHQgICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xuXHQgICAgICB9LFxuXHQgICAgICBZOiBmdW5jdGlvbihkLCBwKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RnVsbFllYXIoKSAlIDFlNCwgcCwgNCk7XG5cdCAgICAgIH0sXG5cdCAgICAgIFo6IGQzX3RpbWVfem9uZSxcblx0ICAgICAgXCIlXCI6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBcIiVcIjtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHZhciBkM190aW1lX3BhcnNlcnMgPSB7XG5cdCAgICAgIGE6IGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2LFxuXHQgICAgICBBOiBkM190aW1lX3BhcnNlV2Vla2RheSxcblx0ICAgICAgYjogZDNfdGltZV9wYXJzZU1vbnRoQWJicmV2LFxuXHQgICAgICBCOiBkM190aW1lX3BhcnNlTW9udGgsXG5cdCAgICAgIGM6IGQzX3RpbWVfcGFyc2VMb2NhbGVGdWxsLFxuXHQgICAgICBkOiBkM190aW1lX3BhcnNlRGF5LFxuXHQgICAgICBlOiBkM190aW1lX3BhcnNlRGF5LFxuXHQgICAgICBIOiBkM190aW1lX3BhcnNlSG91cjI0LFxuXHQgICAgICBJOiBkM190aW1lX3BhcnNlSG91cjI0LFxuXHQgICAgICBqOiBkM190aW1lX3BhcnNlRGF5T2ZZZWFyLFxuXHQgICAgICBMOiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzLFxuXHQgICAgICBtOiBkM190aW1lX3BhcnNlTW9udGhOdW1iZXIsXG5cdCAgICAgIE06IGQzX3RpbWVfcGFyc2VNaW51dGVzLFxuXHQgICAgICBwOiBkM190aW1lX3BhcnNlQW1QbSxcblx0ICAgICAgUzogZDNfdGltZV9wYXJzZVNlY29uZHMsXG5cdCAgICAgIFU6IGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuXHQgICAgICB3OiBkM190aW1lX3BhcnNlV2Vla2RheU51bWJlcixcblx0ICAgICAgVzogZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXksXG5cdCAgICAgIHg6IGQzX3RpbWVfcGFyc2VMb2NhbGVEYXRlLFxuXHQgICAgICBYOiBkM190aW1lX3BhcnNlTG9jYWxlVGltZSxcblx0ICAgICAgeTogZDNfdGltZV9wYXJzZVllYXIsXG5cdCAgICAgIFk6IGQzX3RpbWVfcGFyc2VGdWxsWWVhcixcblx0ICAgICAgWjogZDNfdGltZV9wYXJzZVpvbmUsXG5cdCAgICAgIFwiJVwiOiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnRcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlV2Vla2RheUFiYnJldihkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgICAgZDNfdGltZV9kYXlBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgICB2YXIgbiA9IGQzX3RpbWVfZGF5QWJicmV2UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuXHQgICAgICByZXR1cm4gbiA/IChkYXRlLncgPSBkM190aW1lX2RheUFiYnJldkxvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVdlZWtkYXkoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICAgIGQzX3RpbWVfZGF5UmUubGFzdEluZGV4ID0gMDtcblx0ICAgICAgdmFyIG4gPSBkM190aW1lX2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcblx0ICAgICAgcmV0dXJuIG4gPyAoZGF0ZS53ID0gZDNfdGltZV9kYXlMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aEFiYnJldihkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgICAgZDNfdGltZV9tb250aEFiYnJldlJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICAgIHZhciBuID0gZDNfdGltZV9tb250aEFiYnJldlJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcblx0ICAgICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gZDNfdGltZV9tb250aEFiYnJldkxvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZU1vbnRoKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgICBkM190aW1lX21vbnRoUmUubGFzdEluZGV4ID0gMDtcblx0ICAgICAgdmFyIG4gPSBkM190aW1lX21vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuXHQgICAgICByZXR1cm4gbiA/IChkYXRlLm0gPSBkM190aW1lX21vbnRoTG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTG9jYWxlRnVsbChkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgICAgcmV0dXJuIGQzX3RpbWVfcGFyc2UoZGF0ZSwgZDNfdGltZV9mb3JtYXRzLmMudG9TdHJpbmcoKSwgc3RyaW5nLCBpKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMb2NhbGVEYXRlKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgICByZXR1cm4gZDNfdGltZV9wYXJzZShkYXRlLCBkM190aW1lX2Zvcm1hdHMueC50b1N0cmluZygpLCBzdHJpbmcsIGkpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxvY2FsZVRpbWUoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICAgIHJldHVybiBkM190aW1lX3BhcnNlKGRhdGUsIGQzX3RpbWVfZm9ybWF0cy5YLnRvU3RyaW5nKCksIHN0cmluZywgaSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlQW1QbShkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgICAgdmFyIG4gPSBkM190aW1lX3BlcmlvZExvb2t1cC5nZXQoc3RyaW5nLnNsaWNlKGksIGkgKz0gMikudG9Mb3dlckNhc2UoKSk7XG5cdCAgICAgIHJldHVybiBuID09IG51bGwgPyAtMSA6IChkYXRlLnAgPSBuLCBpKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBkM190aW1lX2Zvcm1hdDtcblx0ICB9XG5cdCAgdmFyIGQzX3RpbWVfZm9ybWF0UGFkcyA9IHtcblx0ICAgIFwiLVwiOiBcIlwiLFxuXHQgICAgXzogXCIgXCIsXG5cdCAgICBcIjBcIjogXCIwXCJcblx0ICB9LCBkM190aW1lX251bWJlclJlID0gL15cXHMqXFxkKy8sIGQzX3RpbWVfcGVyY2VudFJlID0gL14lLztcblx0ICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdFBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcblx0ICAgIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLCBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdCAgICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdFJlKG5hbWVzKSB7XG5cdCAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChkMy5yZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0TG9va3VwKG5hbWVzKSB7XG5cdCAgICB2YXIgbWFwID0gbmV3IGQzX01hcCgpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoKytpIDwgbikgbWFwLnNldChuYW1lc1tpXS50b0xvd2VyQ2FzZSgpLCBpKTtcblx0ICAgIHJldHVybiBtYXA7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG5cdCAgICByZXR1cm4gbiA/IChkYXRlLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3BhcnNlV2Vla051bWJlclN1bmRheShkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG5cdCAgICByZXR1cm4gbiA/IChkYXRlLlUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3BhcnNlV2Vla051bWJlck1vbmRheShkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG5cdCAgICByZXR1cm4gbiA/IChkYXRlLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRnVsbFllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VZZWFyKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG5cdCAgICByZXR1cm4gbiA/IChkYXRlLnkgPSBkM190aW1lX2V4cGFuZFllYXIoK25bMF0pLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2Vab25lKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgcmV0dXJuIC9eWystXVxcZHs0fSQvLnRlc3Qoc3RyaW5nID0gc3RyaW5nLnNsaWNlKGksIGkgKyA1KSkgPyAoZGF0ZS5aID0gLXN0cmluZywgXG5cdCAgICBpICsgNSkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9leHBhbmRZZWFyKGQpIHtcblx0ICAgIHJldHVybiBkICsgKGQgPiA2OCA/IDE5MDAgOiAyZTMpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTW9udGhOdW1iZXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VEYXkoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VEYXlPZlllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUuaiA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VIb3VyMjQoZGF0ZSwgc3RyaW5nLCBpKSB7XG5cdCAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG5cdCAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcblx0ICAgIHJldHVybiBuID8gKGRhdGUuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNaW51dGVzKGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuXHQgICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG5cdCAgICByZXR1cm4gbiA/IChkYXRlLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190aW1lX3BhcnNlU2Vjb25kcyhkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuXHQgICAgcmV0dXJuIG4gPyAoZGF0ZS5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZU1pbGxpc2Vjb25kcyhkYXRlLCBzdHJpbmcsIGkpIHtcblx0ICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuXHQgICAgcmV0dXJuIG4gPyAoZGF0ZS5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV96b25lKGQpIHtcblx0ICAgIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpLCB6cyA9IHogPiAwID8gXCItXCIgOiBcIitcIiwgemggPSBhYnMoeikgLyA2MCB8IDAsIHptID0gYWJzKHopICUgNjA7XG5cdCAgICByZXR1cm4genMgKyBkM190aW1lX2Zvcm1hdFBhZCh6aCwgXCIwXCIsIDIpICsgZDNfdGltZV9mb3JtYXRQYWQoem0sIFwiMFwiLCAyKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxpdGVyYWxQZXJjZW50KGRhdGUsIHN0cmluZywgaSkge1xuXHQgICAgZDNfdGltZV9wZXJjZW50UmUubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciBuID0gZDNfdGltZV9wZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcblx0ICAgIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0TXVsdGkoZm9ybWF0cykge1xuXHQgICAgdmFyIG4gPSBmb3JtYXRzLmxlbmd0aCwgaSA9IC0xO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIGZvcm1hdHNbaV1bMF0gPSB0aGlzKGZvcm1hdHNbaV1bMF0pO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgICAgdmFyIGkgPSAwLCBmID0gZm9ybWF0c1tpXTtcblx0ICAgICAgd2hpbGUgKCFmWzFdKGRhdGUpKSBmID0gZm9ybWF0c1srK2ldO1xuXHQgICAgICByZXR1cm4gZlswXShkYXRlKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmxvY2FsZSA9IGZ1bmN0aW9uKGxvY2FsZSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgbnVtYmVyRm9ybWF0OiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSksXG5cdCAgICAgIHRpbWVGb3JtYXQ6IGQzX2xvY2FsZV90aW1lRm9ybWF0KGxvY2FsZSlcblx0ICAgIH07XG5cdCAgfTtcblx0ICB2YXIgZDNfbG9jYWxlX2VuVVMgPSBkMy5sb2NhbGUoe1xuXHQgICAgZGVjaW1hbDogXCIuXCIsXG5cdCAgICB0aG91c2FuZHM6IFwiLFwiLFxuXHQgICAgZ3JvdXBpbmc6IFsgMyBdLFxuXHQgICAgY3VycmVuY3k6IFsgXCIkXCIsIFwiXCIgXSxcblx0ICAgIGRhdGVUaW1lOiBcIiVhICViICVlICVYICVZXCIsXG5cdCAgICBkYXRlOiBcIiVtLyVkLyVZXCIsXG5cdCAgICB0aW1lOiBcIiVIOiVNOiVTXCIsXG5cdCAgICBwZXJpb2RzOiBbIFwiQU1cIiwgXCJQTVwiIF0sXG5cdCAgICBkYXlzOiBbIFwiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIiBdLFxuXHQgICAgc2hvcnREYXlzOiBbIFwiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCIgXSxcblx0ICAgIG1vbnRoczogWyBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCIgXSxcblx0ICAgIHNob3J0TW9udGhzOiBbIFwiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCIgXVxuXHQgIH0pO1xuXHQgIGQzLmZvcm1hdCA9IGQzX2xvY2FsZV9lblVTLm51bWJlckZvcm1hdDtcblx0ICBkMy5nZW8gPSB7fTtcblx0ICBmdW5jdGlvbiBkM19hZGRlcigpIHt9XG5cdCAgZDNfYWRkZXIucHJvdG90eXBlID0ge1xuXHQgICAgczogMCxcblx0ICAgIHQ6IDAsXG5cdCAgICBhZGQ6IGZ1bmN0aW9uKHkpIHtcblx0ICAgICAgZDNfYWRkZXJTdW0oeSwgdGhpcy50LCBkM19hZGRlclRlbXApO1xuXHQgICAgICBkM19hZGRlclN1bShkM19hZGRlclRlbXAucywgdGhpcy5zLCB0aGlzKTtcblx0ICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IGQzX2FkZGVyVGVtcC50OyBlbHNlIHRoaXMucyA9IGQzX2FkZGVyVGVtcC50O1xuXHQgICAgfSxcblx0ICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgdGhpcy5zID0gdGhpcy50ID0gMDtcblx0ICAgIH0sXG5cdCAgICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMucztcblx0ICAgIH1cblx0ICB9O1xuXHQgIHZhciBkM19hZGRlclRlbXAgPSBuZXcgZDNfYWRkZXIoKTtcblx0ICBmdW5jdGlvbiBkM19hZGRlclN1bShhLCBiLCBvKSB7XG5cdCAgICB2YXIgeCA9IG8ucyA9IGEgKyBiLCBidiA9IHggLSBhLCBhdiA9IHggLSBidjtcblx0ICAgIG8udCA9IGEgLSBhdiArIChiIC0gYnYpO1xuXHQgIH1cblx0ICBkMy5nZW8uc3RyZWFtID0gZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuXHQgICAgaWYgKG9iamVjdCAmJiBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcblx0ICAgICAgZDNfZ2VvX3N0cmVhbU9iamVjdFR5cGVbb2JqZWN0LnR5cGVdKG9iamVjdCwgbGlzdGVuZXIpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KG9iamVjdCwgbGlzdGVuZXIpO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBsaXN0ZW5lcikge1xuXHQgICAgaWYgKGdlb21ldHJ5ICYmIGQzX2dlb19zdHJlYW1HZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSkpIHtcblx0ICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgbGlzdGVuZXIpO1xuXHQgICAgfVxuXHQgIH1cblx0ICB2YXIgZDNfZ2VvX3N0cmVhbU9iamVjdFR5cGUgPSB7XG5cdCAgICBGZWF0dXJlOiBmdW5jdGlvbihmZWF0dXJlLCBsaXN0ZW5lcikge1xuXHQgICAgICBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZmVhdHVyZS5nZW9tZXRyeSwgbGlzdGVuZXIpO1xuXHQgICAgfSxcblx0ICAgIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG5cdCAgICAgIHZhciBmZWF0dXJlcyA9IG9iamVjdC5mZWF0dXJlcywgaSA9IC0xLCBuID0gZmVhdHVyZXMubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGZlYXR1cmVzW2ldLmdlb21ldHJ5LCBsaXN0ZW5lcik7XG5cdCAgICB9XG5cdCAgfTtcblx0ICB2YXIgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5VHlwZSA9IHtcblx0ICAgIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuXHQgICAgICBsaXN0ZW5lci5zcGhlcmUoKTtcblx0ICAgIH0sXG5cdCAgICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuXHQgICAgICBvYmplY3QgPSBvYmplY3QuY29vcmRpbmF0ZXM7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuXHQgICAgfSxcblx0ICAgIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcblx0ICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG5cdCAgICB9LFxuXHQgICAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuXHQgICAgICBkM19nZW9fc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCAwKTtcblx0ICAgIH0sXG5cdCAgICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcblx0ICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIsIDApO1xuXHQgICAgfSxcblx0ICAgIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcblx0ICAgICAgZDNfZ2VvX3N0cmVhbVBvbHlnb24ob2JqZWN0LmNvb3JkaW5hdGVzLCBsaXN0ZW5lcik7XG5cdCAgICB9LFxuXHQgICAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG5cdCAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyKTtcblx0ICAgIH0sXG5cdCAgICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcblx0ICAgICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgbGlzdGVuZXIpO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCBjbG9zZWQpIHtcblx0ICAgIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGggLSBjbG9zZWQsIGNvb3JkaW5hdGU7XG5cdCAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuXHQgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgbGlzdGVuZXIpIHtcblx0ICAgIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG5cdCAgICBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKTtcblx0ICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIsIDEpO1xuXHQgICAgbGlzdGVuZXIucG9seWdvbkVuZCgpO1xuXHQgIH1cblx0ICBkMy5nZW8uYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHQgICAgZDNfZ2VvX2FyZWFTdW0gPSAwO1xuXHQgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGQzX2dlb19hcmVhKTtcblx0ICAgIHJldHVybiBkM19nZW9fYXJlYVN1bTtcblx0ICB9O1xuXHQgIHZhciBkM19nZW9fYXJlYVN1bSwgZDNfZ2VvX2FyZWFSaW5nU3VtID0gbmV3IGQzX2FkZGVyKCk7XG5cdCAgdmFyIGQzX2dlb19hcmVhID0ge1xuXHQgICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfZ2VvX2FyZWFTdW0gKz0gNCAqIM+AO1xuXHQgICAgfSxcblx0ICAgIHBvaW50OiBkM19ub29wLFxuXHQgICAgbGluZVN0YXJ0OiBkM19ub29wLFxuXHQgICAgbGluZUVuZDogZDNfbm9vcCxcblx0ICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX2dlb19hcmVhUmluZ1N1bS5yZXNldCgpO1xuXHQgICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQgPSBkM19nZW9fYXJlYVJpbmdTdGFydDtcblx0ICAgIH0sXG5cdCAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGFyZWEgPSAyICogZDNfZ2VvX2FyZWFSaW5nU3VtO1xuXHQgICAgICBkM19nZW9fYXJlYVN1bSArPSBhcmVhIDwgMCA/IDQgKiDPgCArIGFyZWEgOiBhcmVhO1xuXHQgICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQgPSBkM19nZW9fYXJlYS5saW5lRW5kID0gZDNfZ2VvX2FyZWEucG9pbnQgPSBkM19ub29wO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2FyZWFSaW5nU3RhcnQoKSB7XG5cdCAgICB2YXIgzrswMCwgz4YwMCwgzrswLCBjb3PPhjAsIHNpbs+GMDtcblx0ICAgIGQzX2dlb19hcmVhLnBvaW50ID0gZnVuY3Rpb24ozrssIM+GKSB7XG5cdCAgICAgIGQzX2dlb19hcmVhLnBvaW50ID0gbmV4dFBvaW50O1xuXHQgICAgICDOuzAgPSAozrswMCA9IM67KSAqIGQzX3JhZGlhbnMsIGNvc8+GMCA9IE1hdGguY29zKM+GID0gKM+GMDAgPSDPhikgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNCksIFxuXHQgICAgICBzaW7PhjAgPSBNYXRoLnNpbijPhik7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuXHQgICAgICDOuyAqPSBkM19yYWRpYW5zO1xuXHQgICAgICDPhiA9IM+GICogZDNfcmFkaWFucyAvIDIgKyDPgCAvIDQ7XG5cdCAgICAgIHZhciBkzrsgPSDOuyAtIM67MCwgc2TOuyA9IGTOuyA+PSAwID8gMSA6IC0xLCBhZM67ID0gc2TOuyAqIGTOuywgY29zz4YgPSBNYXRoLmNvcyjPhiksIHNpbs+GID0gTWF0aC5zaW4oz4YpLCBrID0gc2luz4YwICogc2luz4YsIHUgPSBjb3PPhjAgKiBjb3PPhiArIGsgKiBNYXRoLmNvcyhhZM67KSwgdiA9IGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyk7XG5cdCAgICAgIGQzX2dlb19hcmVhUmluZ1N1bS5hZGQoTWF0aC5hdGFuMih2LCB1KSk7XG5cdCAgICAgIM67MCA9IM67LCBjb3PPhjAgPSBjb3PPhiwgc2luz4YwID0gc2luz4Y7XG5cdCAgICB9XG5cdCAgICBkM19nZW9fYXJlYS5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIG5leHRQb2ludCjOuzAwLCDPhjAwKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG5cdCAgICB2YXIgzrsgPSBzcGhlcmljYWxbMF0sIM+GID0gc3BoZXJpY2FsWzFdLCBjb3PPhiA9IE1hdGguY29zKM+GKTtcblx0ICAgIHJldHVybiBbIGNvc8+GICogTWF0aC5jb3MozrspLCBjb3PPhiAqIE1hdGguc2luKM67KSwgTWF0aC5zaW4oz4YpIF07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW5Eb3QoYSwgYikge1xuXHQgICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGEsIGIpIHtcblx0ICAgIHJldHVybiBbIGFbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF0gXTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkFkZChhLCBiKSB7XG5cdCAgICBhWzBdICs9IGJbMF07XG5cdCAgICBhWzFdICs9IGJbMV07XG5cdCAgICBhWzJdICs9IGJbMl07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW5TY2FsZSh2ZWN0b3IsIGspIHtcblx0ICAgIHJldHVybiBbIHZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGsgXTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShkKSB7XG5cdCAgICB2YXIgbCA9IE1hdGguc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuXHQgICAgZFswXSAvPSBsO1xuXHQgICAgZFsxXSAvPSBsO1xuXHQgICAgZFsyXSAvPSBsO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fc3BoZXJpY2FsKGNhcnRlc2lhbikge1xuXHQgICAgcmV0dXJuIFsgTWF0aC5hdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGQzX2FzaW4oY2FydGVzaWFuWzJdKSBdO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fc3BoZXJpY2FsRXF1YWwoYSwgYikge1xuXHQgICAgcmV0dXJuIGFicyhhWzBdIC0gYlswXSkgPCDOtSAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgzrU7XG5cdCAgfVxuXHQgIGQzLmdlby5ib3VuZHMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciDOuzAsIM+GMCwgzrsxLCDPhjEsIM67XywgzrtfXywgz4ZfXywgcDAsIGTOu1N1bSwgcmFuZ2VzLCByYW5nZTtcblx0ICAgIHZhciBib3VuZCA9IHtcblx0ICAgICAgcG9pbnQ6IHBvaW50LFxuXHQgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcblx0ICAgICAgbGluZUVuZDogbGluZUVuZCxcblx0ICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBib3VuZC5wb2ludCA9IHJpbmdQb2ludDtcblx0ICAgICAgICBib3VuZC5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG5cdCAgICAgICAgYm91bmQubGluZUVuZCA9IHJpbmdFbmQ7XG5cdCAgICAgICAgZM67U3VtID0gMDtcblx0ICAgICAgICBkM19nZW9fYXJlYS5wb2x5Z29uU3RhcnQoKTtcblx0ICAgICAgfSxcblx0ICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgZDNfZ2VvX2FyZWEucG9seWdvbkVuZCgpO1xuXHQgICAgICAgIGJvdW5kLnBvaW50ID0gcG9pbnQ7XG5cdCAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuXHQgICAgICAgIGJvdW5kLmxpbmVFbmQgPSBsaW5lRW5kO1xuXHQgICAgICAgIGlmIChkM19nZW9fYXJlYVJpbmdTdW0gPCAwKSDOuzAgPSAtKM67MSA9IDE4MCksIM+GMCA9IC0oz4YxID0gOTApOyBlbHNlIGlmIChkzrtTdW0gPiDOtSkgz4YxID0gOTA7IGVsc2UgaWYgKGTOu1N1bSA8IC3OtSkgz4YwID0gLTkwO1xuXHQgICAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIHBvaW50KM67LCDPhikge1xuXHQgICAgICByYW5nZXMucHVzaChyYW5nZSA9IFsgzrswID0gzrssIM67MSA9IM67IF0pO1xuXHQgICAgICBpZiAoz4YgPCDPhjApIM+GMCA9IM+GO1xuXHQgICAgICBpZiAoz4YgPiDPhjEpIM+GMSA9IM+GO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gbGluZVBvaW50KM67LCDPhikge1xuXHQgICAgICB2YXIgcCA9IGQzX2dlb19jYXJ0ZXNpYW4oWyDOuyAqIGQzX3JhZGlhbnMsIM+GICogZDNfcmFkaWFucyBdKTtcblx0ICAgICAgaWYgKHAwKSB7XG5cdCAgICAgICAgdmFyIG5vcm1hbCA9IGQzX2dlb19jYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksIGVxdWF0b3JpYWwgPSBbIG5vcm1hbFsxXSwgLW5vcm1hbFswXSwgMCBdLCBpbmZsZWN0aW9uID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG5cdCAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShpbmZsZWN0aW9uKTtcblx0ICAgICAgICBpbmZsZWN0aW9uID0gZDNfZ2VvX3NwaGVyaWNhbChpbmZsZWN0aW9uKTtcblx0ICAgICAgICB2YXIgZM67ID0gzrsgLSDOu18sIHMgPSBkzrsgPiAwID8gMSA6IC0xLCDOu2kgPSBpbmZsZWN0aW9uWzBdICogZDNfZGVncmVlcyAqIHMsIGFudGltZXJpZGlhbiA9IGFicyhkzrspID4gMTgwO1xuXHQgICAgICAgIGlmIChhbnRpbWVyaWRpYW4gXiAocyAqIM67XyA8IM67aSAmJiDOu2kgPCBzICogzrspKSB7XG5cdCAgICAgICAgICB2YXIgz4ZpID0gaW5mbGVjdGlvblsxXSAqIGQzX2RlZ3JlZXM7XG5cdCAgICAgICAgICBpZiAoz4ZpID4gz4YxKSDPhjEgPSDPhmk7XG5cdCAgICAgICAgfSBlbHNlIGlmICjOu2kgPSAozrtpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHMgKiDOu18gPCDOu2kgJiYgzrtpIDwgcyAqIM67KSkge1xuXHQgICAgICAgICAgdmFyIM+GaSA9IC1pbmZsZWN0aW9uWzFdICogZDNfZGVncmVlcztcblx0ICAgICAgICAgIGlmICjPhmkgPCDPhjApIM+GMCA9IM+GaTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKM+GIDwgz4YwKSDPhjAgPSDPhjtcblx0ICAgICAgICAgIGlmICjPhiA+IM+GMSkgz4YxID0gz4Y7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChhbnRpbWVyaWRpYW4pIHtcblx0ICAgICAgICAgIGlmICjOuyA8IM67Xykge1xuXHQgICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKGFuZ2xlKM67LCDOuzEpID4gYW5nbGUozrswLCDOuzEpKSDOuzAgPSDOuztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKM67MSA+PSDOuzApIHtcblx0ICAgICAgICAgICAgaWYgKM67IDwgzrswKSDOuzAgPSDOuztcblx0ICAgICAgICAgICAgaWYgKM67ID4gzrsxKSDOuzEgPSDOuztcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmICjOuyA+IM67Xykge1xuXHQgICAgICAgICAgICAgIGlmIChhbmdsZSjOuzAsIM67KSA+IGFuZ2xlKM67MCwgzrsxKSkgzrsxID0gzrs7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgaWYgKGFuZ2xlKM67LCDOuzEpID4gYW5nbGUozrswLCDOuzEpKSDOuzAgPSDOuztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBwb2ludCjOuywgz4YpO1xuXHQgICAgICB9XG5cdCAgICAgIHAwID0gcCwgzrtfID0gzrs7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG5cdCAgICAgIGJvdW5kLnBvaW50ID0gbGluZVBvaW50O1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcblx0ICAgICAgcmFuZ2VbMF0gPSDOuzAsIHJhbmdlWzFdID0gzrsxO1xuXHQgICAgICBib3VuZC5wb2ludCA9IHBvaW50O1xuXHQgICAgICBwMCA9IG51bGw7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByaW5nUG9pbnQozrssIM+GKSB7XG5cdCAgICAgIGlmIChwMCkge1xuXHQgICAgICAgIHZhciBkzrsgPSDOuyAtIM67Xztcblx0ICAgICAgICBkzrtTdW0gKz0gYWJzKGTOuykgPiAxODAgPyBkzrsgKyAoZM67ID4gMCA/IDM2MCA6IC0zNjApIDogZM67O1xuXHQgICAgICB9IGVsc2UgzrtfXyA9IM67LCDPhl9fID0gz4Y7XG5cdCAgICAgIGQzX2dlb19hcmVhLnBvaW50KM67LCDPhik7XG5cdCAgICAgIGxpbmVQb2ludCjOuywgz4YpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuXHQgICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQoKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG5cdCAgICAgIHJpbmdQb2ludCjOu19fLCDPhl9fKTtcblx0ICAgICAgZDNfZ2VvX2FyZWEubGluZUVuZCgpO1xuXHQgICAgICBpZiAoYWJzKGTOu1N1bSkgPiDOtSkgzrswID0gLSjOuzEgPSAxODApO1xuXHQgICAgICByYW5nZVswXSA9IM67MCwgcmFuZ2VbMV0gPSDOuzE7XG5cdCAgICAgIHAwID0gbnVsbDtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGFuZ2xlKM67MCwgzrsxKSB7XG5cdCAgICAgIHJldHVybiAozrsxIC09IM67MCkgPCAwID8gzrsxICsgMzYwIDogzrsxO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY29tcGFyZVJhbmdlcyhhLCBiKSB7XG5cdCAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHdpdGhpblJhbmdlKHgsIHJhbmdlKSB7XG5cdCAgICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oZmVhdHVyZSkge1xuXHQgICAgICDPhjEgPSDOuzEgPSAtKM67MCA9IM+GMCA9IEluZmluaXR5KTtcblx0ICAgICAgcmFuZ2VzID0gW107XG5cdCAgICAgIGQzLmdlby5zdHJlYW0oZmVhdHVyZSwgYm91bmQpO1xuXHQgICAgICB2YXIgbiA9IHJhbmdlcy5sZW5ndGg7XG5cdCAgICAgIGlmIChuKSB7XG5cdCAgICAgICAgcmFuZ2VzLnNvcnQoY29tcGFyZVJhbmdlcyk7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDEsIGEgPSByYW5nZXNbMF0sIGIsIG1lcmdlZCA9IFsgYSBdOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgICAgICBiID0gcmFuZ2VzW2ldO1xuXHQgICAgICAgICAgaWYgKHdpdGhpblJhbmdlKGJbMF0sIGEpIHx8IHdpdGhpblJhbmdlKGJbMV0sIGEpKSB7XG5cdCAgICAgICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcblx0ICAgICAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgYmVzdCA9IC1JbmZpbml0eSwgZM67O1xuXHQgICAgICAgIGZvciAodmFyIG4gPSBtZXJnZWQubGVuZ3RoIC0gMSwgaSA9IDAsIGEgPSBtZXJnZWRbbl0sIGI7IGkgPD0gbjsgYSA9IGIsICsraSkge1xuXHQgICAgICAgICAgYiA9IG1lcmdlZFtpXTtcblx0ICAgICAgICAgIGlmICgoZM67ID0gYW5nbGUoYVsxXSwgYlswXSkpID4gYmVzdCkgYmVzdCA9IGTOuywgzrswID0gYlswXSwgzrsxID0gYVsxXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmFuZ2VzID0gcmFuZ2UgPSBudWxsO1xuXHQgICAgICByZXR1cm4gzrswID09PSBJbmZpbml0eSB8fCDPhjAgPT09IEluZmluaXR5ID8gWyBbIE5hTiwgTmFOIF0sIFsgTmFOLCBOYU4gXSBdIDogWyBbIM67MCwgz4YwIF0sIFsgzrsxLCDPhjEgXSBdO1xuXHQgICAgfTtcblx0ICB9KCk7XG5cdCAgZDMuZ2VvLmNlbnRyb2lkID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdCAgICBkM19nZW9fY2VudHJvaWRXMCA9IGQzX2dlb19jZW50cm9pZFcxID0gZDNfZ2VvX2NlbnRyb2lkWDAgPSBkM19nZW9fY2VudHJvaWRZMCA9IGQzX2dlb19jZW50cm9pZFowID0gZDNfZ2VvX2NlbnRyb2lkWDEgPSBkM19nZW9fY2VudHJvaWRZMSA9IGQzX2dlb19jZW50cm9pZFoxID0gZDNfZ2VvX2NlbnRyb2lkWDIgPSBkM19nZW9fY2VudHJvaWRZMiA9IGQzX2dlb19jZW50cm9pZFoyID0gMDtcblx0ICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBkM19nZW9fY2VudHJvaWQpO1xuXHQgICAgdmFyIHggPSBkM19nZW9fY2VudHJvaWRYMiwgeSA9IGQzX2dlb19jZW50cm9pZFkyLCB6ID0gZDNfZ2VvX2NlbnRyb2lkWjIsIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cdCAgICBpZiAobSA8IM61Mikge1xuXHQgICAgICB4ID0gZDNfZ2VvX2NlbnRyb2lkWDEsIHkgPSBkM19nZW9fY2VudHJvaWRZMSwgeiA9IGQzX2dlb19jZW50cm9pZFoxO1xuXHQgICAgICBpZiAoZDNfZ2VvX2NlbnRyb2lkVzEgPCDOtSkgeCA9IGQzX2dlb19jZW50cm9pZFgwLCB5ID0gZDNfZ2VvX2NlbnRyb2lkWTAsIHogPSBkM19nZW9fY2VudHJvaWRaMDtcblx0ICAgICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblx0ICAgICAgaWYgKG0gPCDOtTIpIHJldHVybiBbIE5hTiwgTmFOIF07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHksIHgpICogZDNfZGVncmVlcywgZDNfYXNpbih6IC8gTWF0aC5zcXJ0KG0pKSAqIGQzX2RlZ3JlZXMgXTtcblx0ICB9O1xuXHQgIHZhciBkM19nZW9fY2VudHJvaWRXMCwgZDNfZ2VvX2NlbnRyb2lkVzEsIGQzX2dlb19jZW50cm9pZFgwLCBkM19nZW9fY2VudHJvaWRZMCwgZDNfZ2VvX2NlbnRyb2lkWjAsIGQzX2dlb19jZW50cm9pZFgxLCBkM19nZW9fY2VudHJvaWRZMSwgZDNfZ2VvX2NlbnRyb2lkWjEsIGQzX2dlb19jZW50cm9pZFgyLCBkM19nZW9fY2VudHJvaWRZMiwgZDNfZ2VvX2NlbnRyb2lkWjI7XG5cdCAgdmFyIGQzX2dlb19jZW50cm9pZCA9IHtcblx0ICAgIHNwaGVyZTogZDNfbm9vcCxcblx0ICAgIHBvaW50OiBkM19nZW9fY2VudHJvaWRQb2ludCxcblx0ICAgIGxpbmVTdGFydDogZDNfZ2VvX2NlbnRyb2lkTGluZVN0YXJ0LFxuXHQgICAgbGluZUVuZDogZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCxcblx0ICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZC5saW5lU3RhcnQgPSBkM19nZW9fY2VudHJvaWRSaW5nU3RhcnQ7XG5cdCAgICB9LFxuXHQgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZC5saW5lU3RhcnQgPSBkM19nZW9fY2VudHJvaWRMaW5lU3RhcnQ7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRQb2ludCjOuywgz4YpIHtcblx0ICAgIM67ICo9IGQzX3JhZGlhbnM7XG5cdCAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKTtcblx0ICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKGNvc8+GICogTWF0aC5jb3MozrspLCBjb3PPhiAqIE1hdGguc2luKM67KSwgTWF0aC5zaW4oz4YpKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooeCwgeSwgeikge1xuXHQgICAgKytkM19nZW9fY2VudHJvaWRXMDtcblx0ICAgIGQzX2dlb19jZW50cm9pZFgwICs9ICh4IC0gZDNfZ2VvX2NlbnRyb2lkWDApIC8gZDNfZ2VvX2NlbnRyb2lkVzA7XG5cdCAgICBkM19nZW9fY2VudHJvaWRZMCArPSAoeSAtIGQzX2dlb19jZW50cm9pZFkwKSAvIGQzX2dlb19jZW50cm9pZFcwO1xuXHQgICAgZDNfZ2VvX2NlbnRyb2lkWjAgKz0gKHogLSBkM19nZW9fY2VudHJvaWRaMCkgLyBkM19nZW9fY2VudHJvaWRXMDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NlbnRyb2lkTGluZVN0YXJ0KCkge1xuXHQgICAgdmFyIHgwLCB5MCwgejA7XG5cdCAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcblx0ICAgICAgzrsgKj0gZDNfcmFkaWFucztcblx0ICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyk7XG5cdCAgICAgIHgwID0gY29zz4YgKiBNYXRoLmNvcyjOuyk7XG5cdCAgICAgIHkwID0gY29zz4YgKiBNYXRoLnNpbijOuyk7XG5cdCAgICAgIHowID0gTWF0aC5zaW4oz4YpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcblx0ICAgICAgzrsgKj0gZDNfcmFkaWFucztcblx0ICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyksIHggPSBjb3PPhiAqIE1hdGguY29zKM67KSwgeSA9IGNvc8+GICogTWF0aC5zaW4ozrspLCB6ID0gTWF0aC5zaW4oz4YpLCB3ID0gTWF0aC5hdGFuMihNYXRoLnNxcnQoKHcgPSB5MCAqIHogLSB6MCAqIHkpICogdyArICh3ID0gejAgKiB4IC0geDAgKiB6KSAqIHcgKyAodyA9IHgwICogeSAtIHkwICogeCkgKiB3KSwgeDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6KTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooeDAsIHkwLCB6MCk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZExpbmVFbmQoKSB7XG5cdCAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBkM19nZW9fY2VudHJvaWRQb2ludDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NlbnRyb2lkUmluZ1N0YXJ0KCkge1xuXHQgICAgdmFyIM67MDAsIM+GMDAsIHgwLCB5MCwgejA7XG5cdCAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcblx0ICAgICAgzrswMCA9IM67LCDPhjAwID0gz4Y7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcblx0ICAgICAgzrsgKj0gZDNfcmFkaWFucztcblx0ICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyk7XG5cdCAgICAgIHgwID0gY29zz4YgKiBNYXRoLmNvcyjOuyk7XG5cdCAgICAgIHkwID0gY29zz4YgKiBNYXRoLnNpbijOuyk7XG5cdCAgICAgIHowID0gTWF0aC5zaW4oz4YpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcblx0ICAgIH07XG5cdCAgICBkM19nZW9fY2VudHJvaWQubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBuZXh0UG9pbnQozrswMCwgz4YwMCk7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZC5saW5lRW5kID0gZDNfZ2VvX2NlbnRyb2lkTGluZUVuZDtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkLnBvaW50ID0gZDNfZ2VvX2NlbnRyb2lkUG9pbnQ7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuXHQgICAgICDOuyAqPSBkM19yYWRpYW5zO1xuXHQgICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKSwgeCA9IGNvc8+GICogTWF0aC5jb3MozrspLCB5ID0gY29zz4YgKiBNYXRoLnNpbijOuyksIHogPSBNYXRoLnNpbijPhiksIGN4ID0geTAgKiB6IC0gejAgKiB5LCBjeSA9IHowICogeCAtIHgwICogeiwgY3ogPSB4MCAqIHkgLSB5MCAqIHgsIG0gPSBNYXRoLnNxcnQoY3ggKiBjeCArIGN5ICogY3kgKyBjeiAqIGN6KSwgdSA9IHgwICogeCArIHkwICogeSArIHowICogeiwgdiA9IG0gJiYgLWQzX2Fjb3ModSkgLyBtLCB3ID0gTWF0aC5hdGFuMihtLCB1KTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0gdiAqIGN4O1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRZMiArPSB2ICogY3k7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFoyICs9IHYgKiBjejtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooeDAsIHkwLCB6MCk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jb21wb3NlKGEsIGIpIHtcblx0ICAgIGZ1bmN0aW9uIGNvbXBvc2UoeCwgeSkge1xuXHQgICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG5cdCAgICB9XG5cdCAgICBpZiAoYS5pbnZlcnQgJiYgYi5pbnZlcnQpIGNvbXBvc2UuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBjb21wb3NlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190cnVlKCkge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jbGlwUG9seWdvbihzZWdtZW50cywgY29tcGFyZSwgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpIHtcblx0ICAgIHZhciBzdWJqZWN0ID0gW10sIGNsaXAgPSBbXTtcblx0ICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuXHQgICAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcblx0ICAgICAgdmFyIG4sIHAwID0gc2VnbWVudFswXSwgcDEgPSBzZWdtZW50W25dO1xuXHQgICAgICBpZiAoZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHAwLCBwMSkpIHtcblx0ICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgbGlzdGVuZXIucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcblx0ICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBhID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSksIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAwLCBudWxsLCBhLCBmYWxzZSk7XG5cdCAgICAgIGEubyA9IGI7XG5cdCAgICAgIHN1YmplY3QucHVzaChhKTtcblx0ICAgICAgY2xpcC5wdXNoKGIpO1xuXHQgICAgICBhID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMSwgc2VnbWVudCwgbnVsbCwgZmFsc2UpO1xuXHQgICAgICBiID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMSwgbnVsbCwgYSwgdHJ1ZSk7XG5cdCAgICAgIGEubyA9IGI7XG5cdCAgICAgIHN1YmplY3QucHVzaChhKTtcblx0ICAgICAgY2xpcC5wdXNoKGIpO1xuXHQgICAgfSk7XG5cdCAgICBjbGlwLnNvcnQoY29tcGFyZSk7XG5cdCAgICBkM19nZW9fY2xpcFBvbHlnb25MaW5rQ2lyY3VsYXIoc3ViamVjdCk7XG5cdCAgICBkM19nZW9fY2xpcFBvbHlnb25MaW5rQ2lyY3VsYXIoY2xpcCk7XG5cdCAgICBpZiAoIXN1YmplY3QubGVuZ3RoKSByZXR1cm47XG5cdCAgICBmb3IgKHZhciBpID0gMCwgZW50cnkgPSBjbGlwU3RhcnRJbnNpZGUsIG4gPSBjbGlwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuXHQgICAgICBjbGlwW2ldLmUgPSBlbnRyeSA9ICFlbnRyeTtcblx0ICAgIH1cblx0ICAgIHZhciBzdGFydCA9IHN1YmplY3RbMF0sIHBvaW50cywgcG9pbnQ7XG5cdCAgICB3aGlsZSAoMSkge1xuXHQgICAgICB2YXIgY3VycmVudCA9IHN0YXJ0LCBpc1N1YmplY3QgPSB0cnVlO1xuXHQgICAgICB3aGlsZSAoY3VycmVudC52KSBpZiAoKGN1cnJlbnQgPSBjdXJyZW50Lm4pID09PSBzdGFydCkgcmV0dXJuO1xuXHQgICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG5cdCAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICBkbyB7XG5cdCAgICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuXHQgICAgICAgIGlmIChjdXJyZW50LmUpIHtcblx0ICAgICAgICAgIGlmIChpc1N1YmplY3QpIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQubi54LCAxLCBsaXN0ZW5lcik7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG5cdCAgICAgICAgICAgIHBvaW50cyA9IGN1cnJlbnQucC56O1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQucC54LCAtMSwgbGlzdGVuZXIpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubztcblx0ICAgICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG5cdCAgICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcblx0ICAgICAgfSB3aGlsZSAoIWN1cnJlbnQudik7XG5cdCAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBQb2x5Z29uTGlua0NpcmN1bGFyKGFycmF5KSB7XG5cdCAgICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xuXHQgICAgdmFyIG4sIGkgPSAwLCBhID0gYXJyYXlbMF0sIGI7XG5cdCAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICBhLm4gPSBiID0gYXJyYXlbaV07XG5cdCAgICAgIGIucCA9IGE7XG5cdCAgICAgIGEgPSBiO1xuXHQgICAgfVxuXHQgICAgYS5uID0gYiA9IGFycmF5WzBdO1xuXHQgICAgYi5wID0gYTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHBvaW50LCBwb2ludHMsIG90aGVyLCBlbnRyeSkge1xuXHQgICAgdGhpcy54ID0gcG9pbnQ7XG5cdCAgICB0aGlzLnogPSBwb2ludHM7XG5cdCAgICB0aGlzLm8gPSBvdGhlcjtcblx0ICAgIHRoaXMuZSA9IGVudHJ5O1xuXHQgICAgdGhpcy52ID0gZmFsc2U7XG5cdCAgICB0aGlzLm4gPSB0aGlzLnAgPSBudWxsO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2xpcChwb2ludFZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgY2xpcFN0YXJ0KSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24ocm90YXRlLCBsaXN0ZW5lcikge1xuXHQgICAgICB2YXIgbGluZSA9IGNsaXBMaW5lKGxpc3RlbmVyKSwgcm90YXRlZENsaXBTdGFydCA9IHJvdGF0ZS5pbnZlcnQoY2xpcFN0YXJ0WzBdLCBjbGlwU3RhcnRbMV0pO1xuXHQgICAgICB2YXIgY2xpcCA9IHtcblx0ICAgICAgICBwb2ludDogcG9pbnQsXG5cdCAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG5cdCAgICAgICAgbGluZUVuZDogbGluZUVuZCxcblx0ICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50UmluZztcblx0ICAgICAgICAgIGNsaXAubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuXHQgICAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcblx0ICAgICAgICAgIHNlZ21lbnRzID0gW107XG5cdCAgICAgICAgICBwb2x5Z29uID0gW107XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcblx0ICAgICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuXHQgICAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcblx0ICAgICAgICAgIHNlZ21lbnRzID0gZDMubWVyZ2Uoc2VnbWVudHMpO1xuXHQgICAgICAgICAgdmFyIGNsaXBTdGFydEluc2lkZSA9IGQzX2dlb19wb2ludEluUG9seWdvbihyb3RhdGVkQ2xpcFN0YXJ0LCBwb2x5Z29uKTtcblx0ICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgZDNfZ2VvX2NsaXBQb2x5Z29uKHNlZ21lbnRzLCBkM19nZW9fY2xpcFNvcnQsIGNsaXBTdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIGxpc3RlbmVyKTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoY2xpcFN0YXJ0SW5zaWRlKSB7XG5cdCAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG5cdCAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBsaXN0ZW5lcik7XG5cdCAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuXHQgICAgICAgICAgc2VnbWVudHMgPSBwb2x5Z29uID0gbnVsbDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKTtcblx0ICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgbGlzdGVuZXIpO1xuXHQgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICAgICAgbGlzdGVuZXIucG9seWdvbkVuZCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgICAgZnVuY3Rpb24gcG9pbnQozrssIM+GKSB7XG5cdCAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG5cdCAgICAgICAgaWYgKHBvaW50VmlzaWJsZSjOuyA9IHBvaW50WzBdLCDPhiA9IHBvaW50WzFdKSkgbGlzdGVuZXIucG9pbnQozrssIM+GKTtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBwb2ludExpbmUozrssIM+GKSB7XG5cdCAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG5cdCAgICAgICAgbGluZS5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcblx0ICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRMaW5lO1xuXHQgICAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcblx0ICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG5cdCAgICAgICAgbGluZS5saW5lRW5kKCk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHNlZ21lbnRzO1xuXHQgICAgICB2YXIgYnVmZmVyID0gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpLCByaW5nTGlzdGVuZXIgPSBjbGlwTGluZShidWZmZXIpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlLCBwb2x5Z29uLCByaW5nO1xuXHQgICAgICBmdW5jdGlvbiBwb2ludFJpbmcozrssIM+GKSB7XG5cdCAgICAgICAgcmluZy5wdXNoKFsgzrssIM+GIF0pO1xuXHQgICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZSjOuywgz4YpO1xuXHQgICAgICAgIHJpbmdMaXN0ZW5lci5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcblx0ICAgICAgICByaW5nTGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgcmluZyA9IFtdO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG5cdCAgICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xuXHQgICAgICAgIHJpbmdMaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgdmFyIGNsZWFuID0gcmluZ0xpc3RlbmVyLmNsZWFuKCksIHJpbmdTZWdtZW50cyA9IGJ1ZmZlci5idWZmZXIoKSwgc2VnbWVudCwgbiA9IHJpbmdTZWdtZW50cy5sZW5ndGg7XG5cdCAgICAgICAgcmluZy5wb3AoKTtcblx0ICAgICAgICBwb2x5Z29uLnB1c2gocmluZyk7XG5cdCAgICAgICAgcmluZyA9IG51bGw7XG5cdCAgICAgICAgaWYgKCFuKSByZXR1cm47XG5cdCAgICAgICAgaWYgKGNsZWFuICYgMSkge1xuXHQgICAgICAgICAgc2VnbWVudCA9IHJpbmdTZWdtZW50c1swXTtcblx0ICAgICAgICAgIHZhciBuID0gc2VnbWVudC5sZW5ndGggLSAxLCBpID0gLTEsIHBvaW50O1xuXHQgICAgICAgICAgaWYgKG4gPiAwKSB7XG5cdCAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG5cdCAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgICB3aGlsZSAoKytpIDwgbikgbGlzdGVuZXIucG9pbnQoKHBvaW50ID0gc2VnbWVudFtpXSlbMF0sIHBvaW50WzFdKTtcblx0ICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG5cdCAgICAgICAgc2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMuZmlsdGVyKGQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEpKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gY2xpcDtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEoc2VnbWVudCkge1xuXHQgICAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpIHtcblx0ICAgIHZhciBsaW5lcyA9IFtdLCBsaW5lO1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG5cdCAgICAgIH0sXG5cdCAgICAgIHBvaW50OiBmdW5jdGlvbijOuywgz4YpIHtcblx0ICAgICAgICBsaW5lLnB1c2goWyDOuywgz4YgXSk7XG5cdCAgICAgIH0sXG5cdCAgICAgIGxpbmVFbmQ6IGQzX25vb3AsXG5cdCAgICAgIGJ1ZmZlcjogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIGJ1ZmZlciA9IGxpbmVzO1xuXHQgICAgICAgIGxpbmVzID0gW107XG5cdCAgICAgICAgbGluZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcblx0ICAgICAgfSxcblx0ICAgICAgcmVqb2luOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkgbGluZXMucHVzaChsaW5lcy5wb3AoKS5jb25jYXQobGluZXMuc2hpZnQoKSkpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2xpcFNvcnQoYSwgYikge1xuXHQgICAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGbPgCAtIM61IDogaGFsZs+AIC0gYVsxXSkgLSAoKGIgPSBiLngpWzBdIDwgMCA/IGJbMV0gLSBoYWxmz4AgLSDOtSA6IGhhbGbPgCAtIGJbMV0pO1xuXHQgIH1cblx0ICB2YXIgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4gPSBkM19nZW9fY2xpcChkM190cnVlLCBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUsIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsIFsgLc+ALCAtz4AgLyAyIF0pO1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuTGluZShsaXN0ZW5lcikge1xuXHQgICAgdmFyIM67MCA9IE5hTiwgz4YwID0gTmFOLCBzzrswID0gTmFOLCBjbGVhbjtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgY2xlYW4gPSAxO1xuXHQgICAgICB9LFxuXHQgICAgICBwb2ludDogZnVuY3Rpb24ozrsxLCDPhjEpIHtcblx0ICAgICAgICB2YXIgc867MSA9IM67MSA+IDAgPyDPgCA6IC3PgCwgZM67ID0gYWJzKM67MSAtIM67MCk7XG5cdCAgICAgICAgaWYgKGFicyhkzrsgLSDPgCkgPCDOtSkge1xuXHQgICAgICAgICAgbGlzdGVuZXIucG9pbnQozrswLCDPhjAgPSAoz4YwICsgz4YxKSAvIDIgPiAwID8gaGFsZs+AIDogLWhhbGbPgCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrswLCDPhjApO1xuXHQgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrsxLCDPhjApO1xuXHQgICAgICAgICAgbGlzdGVuZXIucG9pbnQozrsxLCDPhjApO1xuXHQgICAgICAgICAgY2xlYW4gPSAwO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoc867MCAhPT0gc867MSAmJiBkzrsgPj0gz4ApIHtcblx0ICAgICAgICAgIGlmIChhYnMozrswIC0gc867MCkgPCDOtSkgzrswIC09IHPOuzAgKiDOtTtcblx0ICAgICAgICAgIGlmIChhYnMozrsxIC0gc867MSkgPCDOtSkgzrsxIC09IHPOuzEgKiDOtTtcblx0ICAgICAgICAgIM+GMCA9IGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KM67MCwgz4YwLCDOuzEsIM+GMSk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrswLCDPhjApO1xuXHQgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrsxLCDPhjApO1xuXHQgICAgICAgICAgY2xlYW4gPSAwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBsaXN0ZW5lci5wb2ludCjOuzAgPSDOuzEsIM+GMCA9IM+GMSk7XG5cdCAgICAgICAgc867MCA9IHPOuzE7XG5cdCAgICAgIH0sXG5cdCAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICDOuzAgPSDPhjAgPSBOYU47XG5cdCAgICAgIH0sXG5cdCAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gMiAtIGNsZWFuO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVyc2VjdCjOuzAsIM+GMCwgzrsxLCDPhjEpIHtcblx0ICAgIHZhciBjb3PPhjAsIGNvc8+GMSwgc2luzrswX867MSA9IE1hdGguc2luKM67MCAtIM67MSk7XG5cdCAgICByZXR1cm4gYWJzKHNpbs67MF/OuzEpID4gzrUgPyBNYXRoLmF0YW4oKE1hdGguc2luKM+GMCkgKiAoY29zz4YxID0gTWF0aC5jb3Moz4YxKSkgKiBNYXRoLnNpbijOuzEpIC0gTWF0aC5zaW4oz4YxKSAqIChjb3PPhjAgPSBNYXRoLmNvcyjPhjApKSAqIE1hdGguc2luKM67MCkpIC8gKGNvc8+GMCAqIGNvc8+GMSAqIHNpbs67MF/OuzEpKSA6ICjPhjAgKyDPhjEpIC8gMjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBsaXN0ZW5lcikge1xuXHQgICAgdmFyIM+GO1xuXHQgICAgaWYgKGZyb20gPT0gbnVsbCkge1xuXHQgICAgICDPhiA9IGRpcmVjdGlvbiAqIGhhbGbPgDtcblx0ICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCDPhik7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KDAsIM+GKTtcblx0ICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIM+GKTtcblx0ICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIDApO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCjPgCwgLc+GKTtcblx0ICAgICAgbGlzdGVuZXIucG9pbnQoMCwgLc+GKTtcblx0ICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAtz4YpO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCgtz4AsIDApO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCgtz4AsIM+GKTtcblx0ICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiDOtSkge1xuXHQgICAgICB2YXIgcyA9IGZyb21bMF0gPCB0b1swXSA/IM+AIDogLc+AO1xuXHQgICAgICDPhiA9IGRpcmVjdGlvbiAqIHMgLyAyO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCgtcywgz4YpO1xuXHQgICAgICBsaXN0ZW5lci5wb2ludCgwLCDPhik7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KHMsIM+GKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGxpc3RlbmVyLnBvaW50KHRvWzBdLCB0b1sxXSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19wb2ludEluUG9seWdvbihwb2ludCwgcG9seWdvbikge1xuXHQgICAgdmFyIG1lcmlkaWFuID0gcG9pbnRbMF0sIHBhcmFsbGVsID0gcG9pbnRbMV0sIG1lcmlkaWFuTm9ybWFsID0gWyBNYXRoLnNpbihtZXJpZGlhbiksIC1NYXRoLmNvcyhtZXJpZGlhbiksIDAgXSwgcG9sYXJBbmdsZSA9IDAsIHdpbmRpbmcgPSAwO1xuXHQgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG5cdCAgICAgIHZhciByaW5nID0gcG9seWdvbltpXSwgbSA9IHJpbmcubGVuZ3RoO1xuXHQgICAgICBpZiAoIW0pIGNvbnRpbnVlO1xuXHQgICAgICB2YXIgcG9pbnQwID0gcmluZ1swXSwgzrswID0gcG9pbnQwWzBdLCDPhjAgPSBwb2ludDBbMV0gLyAyICsgz4AgLyA0LCBzaW7PhjAgPSBNYXRoLnNpbijPhjApLCBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLCBqID0gMTtcblx0ICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICBpZiAoaiA9PT0gbSkgaiA9IDA7XG5cdCAgICAgICAgcG9pbnQgPSByaW5nW2pdO1xuXHQgICAgICAgIHZhciDOuyA9IHBvaW50WzBdLCDPhiA9IHBvaW50WzFdIC8gMiArIM+AIC8gNCwgc2luz4YgPSBNYXRoLnNpbijPhiksIGNvc8+GID0gTWF0aC5jb3Moz4YpLCBkzrsgPSDOuyAtIM67MCwgc2TOuyA9IGTOuyA+PSAwID8gMSA6IC0xLCBhZM67ID0gc2TOuyAqIGTOuywgYW50aW1lcmlkaWFuID0gYWTOuyA+IM+ALCBrID0gc2luz4YwICogc2luz4Y7XG5cdCAgICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLmFkZChNYXRoLmF0YW4yKGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyksIGNvc8+GMCAqIGNvc8+GICsgayAqIE1hdGguY29zKGFkzrspKSk7XG5cdCAgICAgICAgcG9sYXJBbmdsZSArPSBhbnRpbWVyaWRpYW4gPyBkzrsgKyBzZM67ICogz4QgOiBkzrs7XG5cdCAgICAgICAgaWYgKGFudGltZXJpZGlhbiBeIM67MCA+PSBtZXJpZGlhbiBeIM67ID49IG1lcmlkaWFuKSB7XG5cdCAgICAgICAgICB2YXIgYXJjID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGQzX2dlb19jYXJ0ZXNpYW4ocG9pbnQwKSwgZDNfZ2VvX2NhcnRlc2lhbihwb2ludCkpO1xuXHQgICAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShhcmMpO1xuXHQgICAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGQzX2dlb19jYXJ0ZXNpYW5Dcm9zcyhtZXJpZGlhbk5vcm1hbCwgYXJjKTtcblx0ICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoaW50ZXJzZWN0aW9uKTtcblx0ICAgICAgICAgIHZhciDPhmFyYyA9IChhbnRpbWVyaWRpYW4gXiBkzrsgPj0gMCA/IC0xIDogMSkgKiBkM19hc2luKGludGVyc2VjdGlvblsyXSk7XG5cdCAgICAgICAgICBpZiAocGFyYWxsZWwgPiDPhmFyYyB8fCBwYXJhbGxlbCA9PT0gz4ZhcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG5cdCAgICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAxIDogLTE7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghaisrKSBicmVhaztcblx0ICAgICAgICDOuzAgPSDOuywgc2luz4YwID0gc2luz4YsIGNvc8+GMCA9IGNvc8+GLCBwb2ludDAgPSBwb2ludDtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIChwb2xhckFuZ2xlIDwgLc61IHx8IHBvbGFyQW5nbGUgPCDOtSAmJiBkM19nZW9fYXJlYVJpbmdTdW0gPCAtzrUpIF4gd2luZGluZyAmIDE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19jbGlwQ2lyY2xlKHJhZGl1cykge1xuXHQgICAgdmFyIGNyID0gTWF0aC5jb3MocmFkaXVzKSwgc21hbGxSYWRpdXMgPSBjciA+IDAsIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gzrUsIGludGVycG9sYXRlID0gZDNfZ2VvX2NpcmNsZUludGVycG9sYXRlKHJhZGl1cywgNiAqIGQzX3JhZGlhbnMpO1xuXHQgICAgcmV0dXJuIGQzX2dlb19jbGlwKHZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc21hbGxSYWRpdXMgPyBbIDAsIC1yYWRpdXMgXSA6IFsgLc+ALCByYWRpdXMgLSDPgCBdKTtcblx0ICAgIGZ1bmN0aW9uIHZpc2libGUozrssIM+GKSB7XG5cdCAgICAgIHJldHVybiBNYXRoLmNvcyjOuykgKiBNYXRoLmNvcyjPhikgPiBjcjtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNsaXBMaW5lKGxpc3RlbmVyKSB7XG5cdCAgICAgIHZhciBwb2ludDAsIGMwLCB2MCwgdjAwLCBjbGVhbjtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgdjAwID0gdjAgPSBmYWxzZTtcblx0ICAgICAgICAgIGNsZWFuID0gMTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHBvaW50OiBmdW5jdGlvbijOuywgz4YpIHtcblx0ICAgICAgICAgIHZhciBwb2ludDEgPSBbIM67LCDPhiBdLCBwb2ludDIsIHYgPSB2aXNpYmxlKM67LCDPhiksIGMgPSBzbWFsbFJhZGl1cyA/IHYgPyAwIDogY29kZSjOuywgz4YpIDogdiA/IGNvZGUozrsgKyAozrsgPCAwID8gz4AgOiAtz4ApLCDPhikgOiAwO1xuXHQgICAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgaWYgKHYgIT09IHYwKSB7XG5cdCAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG5cdCAgICAgICAgICAgIGlmIChkM19nZW9fc3BoZXJpY2FsRXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IGQzX2dlb19zcGhlcmljYWxFcXVhbChwb2ludDEsIHBvaW50MikpIHtcblx0ICAgICAgICAgICAgICBwb2ludDFbMF0gKz0gzrU7XG5cdCAgICAgICAgICAgICAgcG9pbnQxWzFdICs9IM61O1xuXHQgICAgICAgICAgICAgIHYgPSB2aXNpYmxlKHBvaW50MVswXSwgcG9pbnQxWzFdKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKHYgIT09IHYwKSB7XG5cdCAgICAgICAgICAgIGNsZWFuID0gMDtcblx0ICAgICAgICAgICAgaWYgKHYpIHtcblx0ICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDApO1xuXHQgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuXHQgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcblx0ICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcblx0ICAgICAgICAgICAgdmFyIHQ7XG5cdCAgICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuXHQgICAgICAgICAgICAgIGNsZWFuID0gMDtcblx0ICAgICAgICAgICAgICBpZiAoc21hbGxSYWRpdXMpIHtcblx0ICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG5cdCAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcblx0ICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcblx0ICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG5cdCAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKHYgJiYgKCFwb2ludDAgfHwgIWQzX2dlb19zcGhlcmljYWxFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XG5cdCAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGlmICh2MCkgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICAgICAgcG9pbnQwID0gbnVsbDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIHJldHVybiBjbGVhbiB8ICh2MDAgJiYgdjApIDw8IDE7XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIsIHR3bykge1xuXHQgICAgICB2YXIgcGEgPSBkM19nZW9fY2FydGVzaWFuKGEpLCBwYiA9IGQzX2dlb19jYXJ0ZXNpYW4oYik7XG5cdCAgICAgIHZhciBuMSA9IFsgMSwgMCwgMCBdLCBuMiA9IGQzX2dlb19jYXJ0ZXNpYW5Dcm9zcyhwYSwgcGIpLCBuMm4yID0gZDNfZ2VvX2NhcnRlc2lhbkRvdChuMiwgbjIpLCBuMW4yID0gbjJbMF0sIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuXHQgICAgICBpZiAoIWRldGVybWluYW50KSByZXR1cm4gIXR3byAmJiBhO1xuXHQgICAgICB2YXIgYzEgPSBjciAqIG4ybjIgLyBkZXRlcm1pbmFudCwgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsIG4xeG4yID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKG4xLCBuMiksIEEgPSBkM19nZW9fY2FydGVzaWFuU2NhbGUobjEsIGMxKSwgQiA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuXHQgICAgICBkM19nZW9fY2FydGVzaWFuQWRkKEEsIEIpO1xuXHQgICAgICB2YXIgdSA9IG4xeG4yLCB3ID0gZDNfZ2VvX2NhcnRlc2lhbkRvdChBLCB1KSwgdXUgPSBkM19nZW9fY2FydGVzaWFuRG90KHUsIHUpLCB0MiA9IHcgKiB3IC0gdXUgKiAoZDNfZ2VvX2NhcnRlc2lhbkRvdChBLCBBKSAtIDEpO1xuXHQgICAgICBpZiAodDIgPCAwKSByZXR1cm47XG5cdCAgICAgIHZhciB0ID0gTWF0aC5zcXJ0KHQyKSwgcSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcblx0ICAgICAgZDNfZ2VvX2NhcnRlc2lhbkFkZChxLCBBKTtcblx0ICAgICAgcSA9IGQzX2dlb19zcGhlcmljYWwocSk7XG5cdCAgICAgIGlmICghdHdvKSByZXR1cm4gcTtcblx0ICAgICAgdmFyIM67MCA9IGFbMF0sIM67MSA9IGJbMF0sIM+GMCA9IGFbMV0sIM+GMSA9IGJbMV0sIHo7XG5cdCAgICAgIGlmICjOuzEgPCDOuzApIHogPSDOuzAsIM67MCA9IM67MSwgzrsxID0gejtcblx0ICAgICAgdmFyIM60zrsgPSDOuzEgLSDOuzAsIHBvbGFyID0gYWJzKM60zrsgLSDPgCkgPCDOtSwgbWVyaWRpYW4gPSBwb2xhciB8fCDOtM67IDwgzrU7XG5cdCAgICAgIGlmICghcG9sYXIgJiYgz4YxIDwgz4YwKSB6ID0gz4YwLCDPhjAgPSDPhjEsIM+GMSA9IHo7XG5cdCAgICAgIGlmIChtZXJpZGlhbiA/IHBvbGFyID8gz4YwICsgz4YxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSDOuzApIDwgzrUgPyDPhjAgOiDPhjEpIDogz4YwIDw9IHFbMV0gJiYgcVsxXSA8PSDPhjEgOiDOtM67ID4gz4AgXiAozrswIDw9IHFbMF0gJiYgcVswXSA8PSDOuzEpKSB7XG5cdCAgICAgICAgdmFyIHExID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHUsICgtdyArIHQpIC8gdXUpO1xuXHQgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5BZGQocTEsIEEpO1xuXHQgICAgICAgIHJldHVybiBbIHEsIGQzX2dlb19zcGhlcmljYWwocTEpIF07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNvZGUozrssIM+GKSB7XG5cdCAgICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiDPgCAtIHJhZGl1cywgY29kZSA9IDA7XG5cdCAgICAgIGlmICjOuyA8IC1yKSBjb2RlIHw9IDE7IGVsc2UgaWYgKM67ID4gcikgY29kZSB8PSAyO1xuXHQgICAgICBpZiAoz4YgPCAtcikgY29kZSB8PSA0OyBlbHNlIGlmICjPhiA+IHIpIGNvZGUgfD0gODtcblx0ICAgICAgcmV0dXJuIGNvZGU7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fY2xpcExpbmUoeDAsIHkwLCB4MSwgeTEpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbihsaW5lKSB7XG5cdCAgICAgIHZhciBhID0gbGluZS5hLCBiID0gbGluZS5iLCBheCA9IGEueCwgYXkgPSBhLnksIGJ4ID0gYi54LCBieSA9IGIueSwgdDAgPSAwLCB0MSA9IDEsIGR4ID0gYnggLSBheCwgZHkgPSBieSAtIGF5LCByO1xuXHQgICAgICByID0geDAgLSBheDtcblx0ICAgICAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuXHQgICAgICByIC89IGR4O1xuXHQgICAgICBpZiAoZHggPCAwKSB7XG5cdCAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuXHQgICAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcblx0ICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcblx0ICAgICAgICBpZiAociA+IHQxKSByZXR1cm47XG5cdCAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuXHQgICAgICB9XG5cdCAgICAgIHIgPSB4MSAtIGF4O1xuXHQgICAgICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG5cdCAgICAgIHIgLz0gZHg7XG5cdCAgICAgIGlmIChkeCA8IDApIHtcblx0ICAgICAgICBpZiAociA+IHQxKSByZXR1cm47XG5cdCAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuXHQgICAgICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuXHQgICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcblx0ICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG5cdCAgICAgIH1cblx0ICAgICAgciA9IHkwIC0gYXk7XG5cdCAgICAgIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcblx0ICAgICAgciAvPSBkeTtcblx0ICAgICAgaWYgKGR5IDwgMCkge1xuXHQgICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcblx0ICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG5cdCAgICAgIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG5cdCAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuXHQgICAgICAgIGlmIChyID4gdDApIHQwID0gcjtcblx0ICAgICAgfVxuXHQgICAgICByID0geTEgLSBheTtcblx0ICAgICAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuXHQgICAgICByIC89IGR5O1xuXHQgICAgICBpZiAoZHkgPCAwKSB7XG5cdCAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuXHQgICAgICAgIGlmIChyID4gdDApIHQwID0gcjtcblx0ICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcblx0ICAgICAgICBpZiAociA8IHQwKSByZXR1cm47XG5cdCAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0MCA+IDApIGxpbmUuYSA9IHtcblx0ICAgICAgICB4OiBheCArIHQwICogZHgsXG5cdCAgICAgICAgeTogYXkgKyB0MCAqIGR5XG5cdCAgICAgIH07XG5cdCAgICAgIGlmICh0MSA8IDEpIGxpbmUuYiA9IHtcblx0ICAgICAgICB4OiBheCArIHQxICogZHgsXG5cdCAgICAgICAgeTogYXkgKyB0MSAqIGR5XG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiBsaW5lO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgdmFyIGQzX2dlb19jbGlwRXh0ZW50TUFYID0gMWU5O1xuXHQgIGQzLmdlby5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgeDAsIHkwLCB4MSwgeTEsIHN0cmVhbSwgY2xpcCwgY2xpcEV4dGVudCA9IHtcblx0ICAgICAgc3RyZWFtOiBmdW5jdGlvbihvdXRwdXQpIHtcblx0ICAgICAgICBpZiAoc3RyZWFtKSBzdHJlYW0udmFsaWQgPSBmYWxzZTtcblx0ICAgICAgICBzdHJlYW0gPSBjbGlwKG91dHB1dCk7XG5cdCAgICAgICAgc3RyZWFtLnZhbGlkID0gdHJ1ZTtcblx0ICAgICAgICByZXR1cm4gc3RyZWFtO1xuXHQgICAgICB9LFxuXHQgICAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIFsgeDAsIHkwIF0sIFsgeDEsIHkxIF0gXTtcblx0ICAgICAgICBjbGlwID0gZDNfZ2VvX2NsaXBFeHRlbnQoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSk7XG5cdCAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2UsIHN0cmVhbSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIGNsaXBFeHRlbnQ7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gY2xpcEV4dGVudC5leHRlbnQoWyBbIDAsIDAgXSwgWyA5NjAsIDUwMCBdIF0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbihsaXN0ZW5lcikge1xuXHQgICAgICB2YXIgbGlzdGVuZXJfID0gbGlzdGVuZXIsIGJ1ZmZlckxpc3RlbmVyID0gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpLCBjbGlwTGluZSA9IGQzX2dlb21fY2xpcExpbmUoeDAsIHkwLCB4MSwgeTEpLCBzZWdtZW50cywgcG9seWdvbiwgcmluZztcblx0ICAgICAgdmFyIGNsaXAgPSB7XG5cdCAgICAgICAgcG9pbnQ6IHBvaW50LFxuXHQgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuXHQgICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG5cdCAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGxpc3RlbmVyID0gYnVmZmVyTGlzdGVuZXI7XG5cdCAgICAgICAgICBzZWdtZW50cyA9IFtdO1xuXHQgICAgICAgICAgcG9seWdvbiA9IFtdO1xuXHQgICAgICAgICAgY2xlYW4gPSB0cnVlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyXztcblx0ICAgICAgICAgIHNlZ21lbnRzID0gZDMubWVyZ2Uoc2VnbWVudHMpO1xuXHQgICAgICAgICAgdmFyIGNsaXBTdGFydEluc2lkZSA9IGluc2lkZVBvbHlnb24oWyB4MCwgeTEgXSksIGluc2lkZSA9IGNsZWFuICYmIGNsaXBTdGFydEluc2lkZSwgdmlzaWJsZSA9IHNlZ21lbnRzLmxlbmd0aDtcblx0ICAgICAgICAgIGlmIChpbnNpZGUgfHwgdmlzaWJsZSkge1xuXHQgICAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKTtcblx0ICAgICAgICAgICAgaWYgKGluc2lkZSkge1xuXHQgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuXHQgICAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIGxpc3RlbmVyKTtcblx0ICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHZpc2libGUpIHtcblx0ICAgICAgICAgICAgICBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmUsIGNsaXBTdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIGxpc3RlbmVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICAgIGZ1bmN0aW9uIGluc2lkZVBvbHlnb24ocCkge1xuXHQgICAgICAgIHZhciB3biA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aCwgeSA9IHBbMV07XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICAgIGZvciAodmFyIGogPSAxLCB2ID0gcG9seWdvbltpXSwgbSA9IHYubGVuZ3RoLCBhID0gdlswXSwgYjsgaiA8IG07ICsraikge1xuXHQgICAgICAgICAgICBiID0gdltqXTtcblx0ICAgICAgICAgICAgaWYgKGFbMV0gPD0geSkge1xuXHQgICAgICAgICAgICAgIGlmIChiWzFdID4geSAmJiBkM19jcm9zczJkKGEsIGIsIHApID4gMCkgKyt3bjtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBpZiAoYlsxXSA8PSB5ICYmIGQzX2Nyb3NzMmQoYSwgYiwgcCkgPCAwKSAtLXduO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGEgPSBiO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gd24gIT09IDA7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgbGlzdGVuZXIpIHtcblx0ICAgICAgICB2YXIgYSA9IDAsIGExID0gMDtcblx0ICAgICAgICBpZiAoZnJvbSA9PSBudWxsIHx8IChhID0gY29ybmVyKGZyb20sIGRpcmVjdGlvbikpICE9PSAoYTEgPSBjb3JuZXIodG8sIGRpcmVjdGlvbikpIHx8IGNvbXBhcmVQb2ludHMoZnJvbSwgdG8pIDwgMCBeIGRpcmVjdGlvbiA+IDApIHtcblx0ICAgICAgICAgIGRvIHtcblx0ICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcblx0ICAgICAgICAgIH0gd2hpbGUgKChhID0gKGEgKyBkaXJlY3Rpb24gKyA0KSAlIDQpICE9PSBhMSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRvWzBdLCB0b1sxXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIHBvaW50VmlzaWJsZSh4LCB5KSB7XG5cdCAgICAgICAgcmV0dXJuIHgwIDw9IHggJiYgeCA8PSB4MSAmJiB5MCA8PSB5ICYmIHkgPD0geTE7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuXHQgICAgICAgIGlmIChwb2ludFZpc2libGUoeCwgeSkpIGxpc3RlbmVyLnBvaW50KHgsIHkpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciB4X18sIHlfXywgdl9fLCB4XywgeV8sIHZfLCBmaXJzdCwgY2xlYW47XG5cdCAgICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcblx0ICAgICAgICBjbGlwLnBvaW50ID0gbGluZVBvaW50O1xuXHQgICAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcblx0ICAgICAgICBmaXJzdCA9IHRydWU7XG5cdCAgICAgICAgdl8gPSBmYWxzZTtcblx0ICAgICAgICB4XyA9IHlfID0gTmFOO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG5cdCAgICAgICAgaWYgKHNlZ21lbnRzKSB7XG5cdCAgICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuXHQgICAgICAgICAgaWYgKHZfXyAmJiB2XykgYnVmZmVyTGlzdGVuZXIucmVqb2luKCk7XG5cdCAgICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlckxpc3RlbmVyLmJ1ZmZlcigpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuXHQgICAgICAgIGlmICh2XykgbGlzdGVuZXIubGluZUVuZCgpO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG5cdCAgICAgICAgeCA9IE1hdGgubWF4KC1kM19nZW9fY2xpcEV4dGVudE1BWCwgTWF0aC5taW4oZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIHgpKTtcblx0ICAgICAgICB5ID0gTWF0aC5tYXgoLWQzX2dlb19jbGlwRXh0ZW50TUFYLCBNYXRoLm1pbihkM19nZW9fY2xpcEV4dGVudE1BWCwgeSkpO1xuXHQgICAgICAgIHZhciB2ID0gcG9pbnRWaXNpYmxlKHgsIHkpO1xuXHQgICAgICAgIGlmIChwb2x5Z29uKSByaW5nLnB1c2goWyB4LCB5IF0pO1xuXHQgICAgICAgIGlmIChmaXJzdCkge1xuXHQgICAgICAgICAgeF9fID0geCwgeV9fID0geSwgdl9fID0gdjtcblx0ICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG5cdCAgICAgICAgICBpZiAodikge1xuXHQgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGlmICh2ICYmIHZfKSBsaXN0ZW5lci5wb2ludCh4LCB5KTsgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBsID0ge1xuXHQgICAgICAgICAgICAgIGE6IHtcblx0ICAgICAgICAgICAgICAgIHg6IHhfLFxuXHQgICAgICAgICAgICAgICAgeTogeV9cblx0ICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgIGI6IHtcblx0ICAgICAgICAgICAgICAgIHg6IHgsXG5cdCAgICAgICAgICAgICAgICB5OiB5XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICBpZiAoY2xpcExpbmUobCkpIHtcblx0ICAgICAgICAgICAgICBpZiAoIXZfKSB7XG5cdCAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KGwuYS54LCBsLmEueSk7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KGwuYi54LCBsLmIueSk7XG5cdCAgICAgICAgICAgICAgaWYgKCF2KSBsaXN0ZW5lci5saW5lRW5kKCk7XG5cdCAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh2KSB7XG5cdCAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG5cdCAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG5cdCAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB4XyA9IHgsIHlfID0geSwgdl8gPSB2O1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBjbGlwO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIGNvcm5lcihwLCBkaXJlY3Rpb24pIHtcblx0ICAgICAgcmV0dXJuIGFicyhwWzBdIC0geDApIDwgzrUgPyBkaXJlY3Rpb24gPiAwID8gMCA6IDMgOiBhYnMocFswXSAtIHgxKSA8IM61ID8gZGlyZWN0aW9uID4gMCA/IDIgOiAxIDogYWJzKHBbMV0gLSB5MCkgPCDOtSA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMCA6IGRpcmVjdGlvbiA+IDAgPyAzIDogMjtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuXHQgICAgICByZXR1cm4gY29tcGFyZVBvaW50cyhhLngsIGIueCk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKGEsIGIpIHtcblx0ICAgICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLCBjYiA9IGNvcm5lcihiLCAxKTtcblx0ICAgICAgcmV0dXJuIGNhICE9PSBjYiA/IGNhIC0gY2IgOiBjYSA9PT0gMCA/IGJbMV0gLSBhWzFdIDogY2EgPT09IDEgPyBhWzBdIC0gYlswXSA6IGNhID09PSAyID8gYVsxXSAtIGJbMV0gOiBiWzBdIC0gYVswXTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NvbmljKHByb2plY3RBdCkge1xuXHQgICAgdmFyIM+GMCA9IDAsIM+GMSA9IM+AIC8gMywgbSA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLCBwID0gbSjPhjAsIM+GMSk7XG5cdCAgICBwLnBhcmFsbGVscyA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyDPhjAgLyDPgCAqIDE4MCwgz4YxIC8gz4AgKiAxODAgXTtcblx0ICAgICAgcmV0dXJuIG0oz4YwID0gX1swXSAqIM+AIC8gMTgwLCDPhjEgPSBfWzFdICogz4AgLyAxODApO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBwO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fY29uaWNFcXVhbEFyZWEoz4YwLCDPhjEpIHtcblx0ICAgIHZhciBzaW7PhjAgPSBNYXRoLnNpbijPhjApLCBuID0gKHNpbs+GMCArIE1hdGguc2luKM+GMSkpIC8gMiwgQyA9IDEgKyBzaW7PhjAgKiAoMiAqIG4gLSBzaW7PhjApLCDPgTAgPSBNYXRoLnNxcnQoQykgLyBuO1xuXHQgICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcblx0ICAgICAgdmFyIM+BID0gTWF0aC5zcXJ0KEMgLSAyICogbiAqIE1hdGguc2luKM+GKSkgLyBuO1xuXHQgICAgICByZXR1cm4gWyDPgSAqIE1hdGguc2luKM67ICo9IG4pLCDPgTAgLSDPgSAqIE1hdGguY29zKM67KSBdO1xuXHQgICAgfVxuXHQgICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIHZhciDPgTBfeSA9IM+BMCAtIHk7XG5cdCAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeCwgz4EwX3kpIC8gbiwgZDNfYXNpbigoQyAtICh4ICogeCArIM+BMF95ICogz4EwX3kpICogbiAqIG4pIC8gKDIgKiBuKSkgXTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZm9yd2FyZDtcblx0ICB9XG5cdCAgKGQzLmdlby5jb25pY0VxdWFsQXJlYSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNFcXVhbEFyZWEpO1xuXHQgIH0pLnJhdyA9IGQzX2dlb19jb25pY0VxdWFsQXJlYTtcblx0ICBkMy5nZW8uYWxiZXJzID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDMuZ2VvLmNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsgOTYsIDAgXSkuY2VudGVyKFsgLS42LCAzOC43IF0pLnBhcmFsbGVscyhbIDI5LjUsIDQ1LjUgXSkuc2NhbGUoMTA3MCk7XG5cdCAgfTtcblx0ICBkMy5nZW8uYWxiZXJzVXNhID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgbG93ZXI0OCA9IGQzLmdlby5hbGJlcnMoKTtcblx0ICAgIHZhciBhbGFza2EgPSBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyAxNTQsIDAgXSkuY2VudGVyKFsgLTIsIDU4LjUgXSkucGFyYWxsZWxzKFsgNTUsIDY1IF0pO1xuXHQgICAgdmFyIGhhd2FpaSA9IGQzLmdlby5jb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbIDE1NywgMCBdKS5jZW50ZXIoWyAtMywgMTkuOSBdKS5wYXJhbGxlbHMoWyA4LCAxOCBdKTtcblx0ICAgIHZhciBwb2ludCwgcG9pbnRTdHJlYW0gPSB7XG5cdCAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgICAgcG9pbnQgPSBbIHgsIHkgXTtcblx0ICAgICAgfVxuXHQgICAgfSwgbG93ZXI0OFBvaW50LCBhbGFza2FQb2ludCwgaGF3YWlpUG9pbnQ7XG5cdCAgICBmdW5jdGlvbiBhbGJlcnNVc2EoY29vcmRpbmF0ZXMpIHtcblx0ICAgICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xuXHQgICAgICBwb2ludCA9IG51bGw7XG5cdCAgICAgIChsb3dlcjQ4UG9pbnQoeCwgeSksIHBvaW50KSB8fCAoYWxhc2thUG9pbnQoeCwgeSksIHBvaW50KSB8fCBoYXdhaWlQb2ludCh4LCB5KTtcblx0ICAgICAgcmV0dXJuIHBvaW50O1xuXHQgICAgfVxuXHQgICAgYWxiZXJzVXNhLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XG5cdCAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLCB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSwgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gaywgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcblx0ICAgICAgcmV0dXJuICh5ID49IC4xMiAmJiB5IDwgLjIzNCAmJiB4ID49IC0uNDI1ICYmIHggPCAtLjIxNCA/IGFsYXNrYSA6IHkgPj0gLjE2NiAmJiB5IDwgLjIzNCAmJiB4ID49IC0uMjE0ICYmIHggPCAtLjExNSA/IGhhd2FpaSA6IGxvd2VyNDgpLmludmVydChjb29yZGluYXRlcyk7XG5cdCAgICB9O1xuXHQgICAgYWxiZXJzVXNhLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuXHQgICAgICB2YXIgbG93ZXI0OFN0cmVhbSA9IGxvd2VyNDguc3RyZWFtKHN0cmVhbSksIGFsYXNrYVN0cmVhbSA9IGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpU3RyZWFtID0gaGF3YWlpLnN0cmVhbShzdHJlYW0pO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgICAgICBsb3dlcjQ4U3RyZWFtLnBvaW50KHgsIHkpO1xuXHQgICAgICAgICAgYWxhc2thU3RyZWFtLnBvaW50KHgsIHkpO1xuXHQgICAgICAgICAgaGF3YWlpU3RyZWFtLnBvaW50KHgsIHkpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGxvd2VyNDhTdHJlYW0uc3BoZXJlKCk7XG5cdCAgICAgICAgICBhbGFza2FTdHJlYW0uc3BoZXJlKCk7XG5cdCAgICAgICAgICBoYXdhaWlTdHJlYW0uc3BoZXJlKCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgbG93ZXI0OFN0cmVhbS5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgIGFsYXNrYVN0cmVhbS5saW5lU3RhcnQoKTtcblx0ICAgICAgICAgIGhhd2FpaVN0cmVhbS5saW5lU3RhcnQoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgbG93ZXI0OFN0cmVhbS5saW5lRW5kKCk7XG5cdCAgICAgICAgICBhbGFza2FTdHJlYW0ubGluZUVuZCgpO1xuXHQgICAgICAgICAgaGF3YWlpU3RyZWFtLmxpbmVFbmQoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBsb3dlcjQ4U3RyZWFtLnBvbHlnb25TdGFydCgpO1xuXHQgICAgICAgICAgYWxhc2thU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuXHQgICAgICAgICAgaGF3YWlpU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICBsb3dlcjQ4U3RyZWFtLnBvbHlnb25FbmQoKTtcblx0ICAgICAgICAgIGFsYXNrYVN0cmVhbS5wb2x5Z29uRW5kKCk7XG5cdCAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9seWdvbkVuZCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBhbGJlcnNVc2EucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuXHQgICAgICBsb3dlcjQ4LnByZWNpc2lvbihfKTtcblx0ICAgICAgYWxhc2thLnByZWNpc2lvbihfKTtcblx0ICAgICAgaGF3YWlpLnByZWNpc2lvbihfKTtcblx0ICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcblx0ICAgIH07XG5cdCAgICBhbGJlcnNVc2Euc2NhbGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDguc2NhbGUoKTtcblx0ICAgICAgbG93ZXI0OC5zY2FsZShfKTtcblx0ICAgICAgYWxhc2thLnNjYWxlKF8gKiAuMzUpO1xuXHQgICAgICBoYXdhaWkuc2NhbGUoXyk7XG5cdCAgICAgIHJldHVybiBhbGJlcnNVc2EudHJhbnNsYXRlKGxvd2VyNDgudHJhbnNsYXRlKCkpO1xuXHQgICAgfTtcblx0ICAgIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgudHJhbnNsYXRlKCk7XG5cdCAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLCB4ID0gK19bMF0sIHkgPSArX1sxXTtcblx0ICAgICAgbG93ZXI0OFBvaW50ID0gbG93ZXI0OC50cmFuc2xhdGUoXykuY2xpcEV4dGVudChbIFsgeCAtIC40NTUgKiBrLCB5IC0gLjIzOCAqIGsgXSwgWyB4ICsgLjQ1NSAqIGssIHkgKyAuMjM4ICogayBdIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG5cdCAgICAgIGFsYXNrYVBvaW50ID0gYWxhc2thLnRyYW5zbGF0ZShbIHggLSAuMzA3ICogaywgeSArIC4yMDEgKiBrIF0pLmNsaXBFeHRlbnQoWyBbIHggLSAuNDI1ICogayArIM61LCB5ICsgLjEyICogayArIM61IF0sIFsgeCAtIC4yMTQgKiBrIC0gzrUsIHkgKyAuMjM0ICogayAtIM61IF0gXSkuc3RyZWFtKHBvaW50U3RyZWFtKS5wb2ludDtcblx0ICAgICAgaGF3YWlpUG9pbnQgPSBoYXdhaWkudHJhbnNsYXRlKFsgeCAtIC4yMDUgKiBrLCB5ICsgLjIxMiAqIGsgXSkuY2xpcEV4dGVudChbIFsgeCAtIC4yMTQgKiBrICsgzrUsIHkgKyAuMTY2ICogayArIM61IF0sIFsgeCAtIC4xMTUgKiBrIC0gzrUsIHkgKyAuMjM0ICogayAtIM61IF0gXSkuc3RyZWFtKHBvaW50U3RyZWFtKS5wb2ludDtcblx0ICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gYWxiZXJzVXNhLnNjYWxlKDEwNzApO1xuXHQgIH07XG5cdCAgdmFyIGQzX2dlb19wYXRoQXJlYVN1bSwgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiwgZDNfZ2VvX3BhdGhBcmVhID0ge1xuXHQgICAgcG9pbnQ6IGQzX25vb3AsXG5cdCAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG5cdCAgICBsaW5lRW5kOiBkM19ub29wLFxuXHQgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiA9IDA7XG5cdCAgICAgIGQzX2dlb19wYXRoQXJlYS5saW5lU3RhcnQgPSBkM19nZW9fcGF0aEFyZWFSaW5nU3RhcnQ7XG5cdCAgICB9LFxuXHQgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGQzX2dlb19wYXRoQXJlYS5saW5lU3RhcnQgPSBkM19nZW9fcGF0aEFyZWEubGluZUVuZCA9IGQzX2dlb19wYXRoQXJlYS5wb2ludCA9IGQzX25vb3A7XG5cdCAgICAgIGQzX2dlb19wYXRoQXJlYVN1bSArPSBhYnMoZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiAvIDIpO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhBcmVhUmluZ1N0YXJ0KCkge1xuXHQgICAgdmFyIHgwMCwgeTAwLCB4MCwgeTA7XG5cdCAgICBkM19nZW9fcGF0aEFyZWEucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIGQzX2dlb19wYXRoQXJlYS5wb2ludCA9IG5leHRQb2ludDtcblx0ICAgICAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gbmV4dFBvaW50KHgsIHkpIHtcblx0ICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiArPSB5MCAqIHggLSB4MCAqIHk7XG5cdCAgICAgIHgwID0geCwgeTAgPSB5O1xuXHQgICAgfVxuXHQgICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgbmV4dFBvaW50KHgwMCwgeTAwKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIHZhciBkM19nZW9fcGF0aEJvdW5kc1gwLCBkM19nZW9fcGF0aEJvdW5kc1kwLCBkM19nZW9fcGF0aEJvdW5kc1gxLCBkM19nZW9fcGF0aEJvdW5kc1kxO1xuXHQgIHZhciBkM19nZW9fcGF0aEJvdW5kcyA9IHtcblx0ICAgIHBvaW50OiBkM19nZW9fcGF0aEJvdW5kc1BvaW50LFxuXHQgICAgbGluZVN0YXJ0OiBkM19ub29wLFxuXHQgICAgbGluZUVuZDogZDNfbm9vcCxcblx0ICAgIHBvbHlnb25TdGFydDogZDNfbm9vcCxcblx0ICAgIHBvbHlnb25FbmQ6IGQzX25vb3Bcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19wYXRoQm91bmRzUG9pbnQoeCwgeSkge1xuXHQgICAgaWYgKHggPCBkM19nZW9fcGF0aEJvdW5kc1gwKSBkM19nZW9fcGF0aEJvdW5kc1gwID0geDtcblx0ICAgIGlmICh4ID4gZDNfZ2VvX3BhdGhCb3VuZHNYMSkgZDNfZ2VvX3BhdGhCb3VuZHNYMSA9IHg7XG5cdCAgICBpZiAoeSA8IGQzX2dlb19wYXRoQm91bmRzWTApIGQzX2dlb19wYXRoQm91bmRzWTAgPSB5O1xuXHQgICAgaWYgKHkgPiBkM19nZW9fcGF0aEJvdW5kc1kxKSBkM19nZW9fcGF0aEJvdW5kc1kxID0geTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhCdWZmZXIoKSB7XG5cdCAgICB2YXIgcG9pbnRDaXJjbGUgPSBkM19nZW9fcGF0aEJ1ZmZlckNpcmNsZSg0LjUpLCBidWZmZXIgPSBbXTtcblx0ICAgIHZhciBzdHJlYW0gPSB7XG5cdCAgICAgIHBvaW50OiBwb2ludCxcblx0ICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmVTdGFydDtcblx0ICAgICAgfSxcblx0ICAgICAgbGluZUVuZDogbGluZUVuZCxcblx0ICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuXHQgICAgICB9LFxuXHQgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG5cdCAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG5cdCAgICAgIH0sXG5cdCAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG5cdCAgICAgICAgcG9pbnRDaXJjbGUgPSBkM19nZW9fcGF0aEJ1ZmZlckNpcmNsZShfKTtcblx0ICAgICAgICByZXR1cm4gc3RyZWFtO1xuXHQgICAgICB9LFxuXHQgICAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmIChidWZmZXIubGVuZ3RoKSB7XG5cdCAgICAgICAgICB2YXIgcmVzdWx0ID0gYnVmZmVyLmpvaW4oXCJcIik7XG5cdCAgICAgICAgICBidWZmZXIgPSBbXTtcblx0ICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuXHQgICAgICBidWZmZXIucHVzaChcIk1cIiwgeCwgXCIsXCIsIHksIHBvaW50Q2lyY2xlKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcblx0ICAgICAgYnVmZmVyLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5KTtcblx0ICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcG9pbnRMaW5lKHgsIHkpIHtcblx0ICAgICAgYnVmZmVyLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG5cdCAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gbGluZUVuZFBvbHlnb24oKSB7XG5cdCAgICAgIGJ1ZmZlci5wdXNoKFwiWlwiKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBzdHJlYW07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKHJhZGl1cykge1xuXHQgICAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXMgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIC0yICogcmFkaXVzICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAyICogcmFkaXVzICsgXCJ6XCI7XG5cdCAgfVxuXHQgIHZhciBkM19nZW9fcGF0aENlbnRyb2lkID0ge1xuXHQgICAgcG9pbnQ6IGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCxcblx0ICAgIGxpbmVTdGFydDogZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydCxcblx0ICAgIGxpbmVFbmQ6IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kLFxuXHQgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5saW5lU3RhcnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUmluZ1N0YXJ0O1xuXHQgICAgfSxcblx0ICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50O1xuXHQgICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lU3RhcnQ7XG5cdCAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQubGluZUVuZCA9IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgsIHkpIHtcblx0ICAgIGQzX2dlb19jZW50cm9pZFgwICs9IHg7XG5cdCAgICBkM19nZW9fY2VudHJvaWRZMCArPSB5O1xuXHQgICAgKytkM19nZW9fY2VudHJvaWRaMDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydCgpIHtcblx0ICAgIHZhciB4MCwgeTA7XG5cdCAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuXHQgICAgICBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIG5leHRQb2ludCh4LCB5KSB7XG5cdCAgICAgIHZhciBkeCA9IHggLSB4MCwgZHkgPSB5IC0geTAsIHogPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRaMSArPSB6O1xuXHQgICAgICBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fcGF0aENlbnRyb2lkTGluZUVuZCgpIHtcblx0ICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQ7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRSaW5nU3RhcnQoKSB7XG5cdCAgICB2YXIgeDAwLCB5MDAsIHgwLCB5MDtcblx0ICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG5cdCAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geSk7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gbmV4dFBvaW50KHgsIHkpIHtcblx0ICAgICAgdmFyIGR4ID0geCAtIHgwLCBkeSA9IHkgLSB5MCwgeiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFoxICs9IHo7XG5cdCAgICAgIHogPSB5MCAqIHggLSB4MCAqIHk7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFgyICs9IHogKiAoeDAgKyB4KTtcblx0ICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgKz0geiAqICh5MCArIHkpO1xuXHQgICAgICBkM19nZW9fY2VudHJvaWRaMiArPSB6ICogMztcblx0ICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcblx0ICAgIH1cblx0ICAgIGQzX2dlb19wYXRoQ2VudHJvaWQubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBuZXh0UG9pbnQoeDAwLCB5MDApO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDb250ZXh0KGNvbnRleHQpIHtcblx0ICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNTtcblx0ICAgIHZhciBzdHJlYW0gPSB7XG5cdCAgICAgIHBvaW50OiBwb2ludCxcblx0ICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmVTdGFydDtcblx0ICAgICAgfSxcblx0ICAgICAgbGluZUVuZDogbGluZUVuZCxcblx0ICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuXHQgICAgICB9LFxuXHQgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG5cdCAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG5cdCAgICAgIH0sXG5cdCAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG5cdCAgICAgICAgcG9pbnRSYWRpdXMgPSBfO1xuXHQgICAgICAgIHJldHVybiBzdHJlYW07XG5cdCAgICAgIH0sXG5cdCAgICAgIHJlc3VsdDogZDNfbm9vcFxuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcblx0ICAgICAgY29udGV4dC5tb3ZlVG8oeCArIHBvaW50UmFkaXVzLCB5KTtcblx0ICAgICAgY29udGV4dC5hcmMoeCwgeSwgcG9pbnRSYWRpdXMsIDAsIM+EKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcblx0ICAgICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XG5cdCAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHBvaW50TGluZSh4LCB5KSB7XG5cdCAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcblx0ICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBsaW5lRW5kUG9seWdvbigpIHtcblx0ICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBzdHJlYW07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19yZXNhbXBsZShwcm9qZWN0KSB7XG5cdCAgICB2YXIgzrQyID0gLjUsIGNvc01pbkRpc3RhbmNlID0gTWF0aC5jb3MoMzAgKiBkM19yYWRpYW5zKSwgbWF4RGVwdGggPSAxNjtcblx0ICAgIGZ1bmN0aW9uIHJlc2FtcGxlKHN0cmVhbSkge1xuXHQgICAgICByZXR1cm4gKG1heERlcHRoID8gcmVzYW1wbGVSZWN1cnNpdmUgOiByZXNhbXBsZU5vbmUpKHN0cmVhbSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByZXNhbXBsZU5vbmUoc3RyZWFtKSB7XG5cdCAgICAgIHJldHVybiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG5cdCAgICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJlc2FtcGxlUmVjdXJzaXZlKHN0cmVhbSkge1xuXHQgICAgICB2YXIgzrswMCwgz4YwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIM67MCwgeDAsIHkwLCBhMCwgYjAsIGMwO1xuXHQgICAgICB2YXIgcmVzYW1wbGUgPSB7XG5cdCAgICAgICAgcG9pbnQ6IHBvaW50LFxuXHQgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuXHQgICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG5cdCAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcblx0ICAgICAgICAgIHJlc2FtcGxlLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcblx0ICAgICAgICAgIHJlc2FtcGxlLmxpbmVTdGFydCA9IGxpbmVTdGFydDtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcblx0ICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcblx0ICAgICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuXHQgICAgICAgIHgwID0gTmFOO1xuXHQgICAgICAgIHJlc2FtcGxlLnBvaW50ID0gbGluZVBvaW50O1xuXHQgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBsaW5lUG9pbnQozrssIM+GKSB7XG5cdCAgICAgICAgdmFyIGMgPSBkM19nZW9fY2FydGVzaWFuKFsgzrssIM+GIF0pLCBwID0gcHJvamVjdCjOuywgz4YpO1xuXHQgICAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgzrswLCBhMCwgYjAsIGMwLCB4MCA9IHBbMF0sIHkwID0gcFsxXSwgzrswID0gzrssIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuXHQgICAgICAgIHN0cmVhbS5wb2ludCh4MCwgeTApO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG5cdCAgICAgICAgcmVzYW1wbGUucG9pbnQgPSBwb2ludDtcblx0ICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcblx0ICAgICAgICBsaW5lU3RhcnQoKTtcblx0ICAgICAgICByZXNhbXBsZS5wb2ludCA9IHJpbmdQb2ludDtcblx0ICAgICAgICByZXNhbXBsZS5saW5lRW5kID0gcmluZ0VuZDtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiByaW5nUG9pbnQozrssIM+GKSB7XG5cdCAgICAgICAgbGluZVBvaW50KM67MDAgPSDOuywgz4YwMCA9IM+GKSwgeDAwID0geDAsIHkwMCA9IHkwLCBhMDAgPSBhMCwgYjAwID0gYjAsIGMwMCA9IGMwO1xuXHQgICAgICAgIHJlc2FtcGxlLnBvaW50ID0gbGluZVBvaW50O1xuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG5cdCAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCDOuzAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcblx0ICAgICAgICByZXNhbXBsZS5saW5lRW5kID0gbGluZUVuZDtcblx0ICAgICAgICBsaW5lRW5kKCk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJlc2FtcGxlO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgzrsxLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG5cdCAgICAgIHZhciBkeCA9IHgxIC0geDAsIGR5ID0geTEgLSB5MCwgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblx0ICAgICAgaWYgKGQyID4gNCAqIM60MiAmJiBkZXB0aC0tKSB7XG5cdCAgICAgICAgdmFyIGEgPSBhMCArIGExLCBiID0gYjAgKyBiMSwgYyA9IGMwICsgYzEsIG0gPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSwgz4YyID0gTWF0aC5hc2luKGMgLz0gbSksIM67MiA9IGFicyhhYnMoYykgLSAxKSA8IM61IHx8IGFicyjOuzAgLSDOuzEpIDwgzrUgPyAozrswICsgzrsxKSAvIDIgOiBNYXRoLmF0YW4yKGIsIGEpLCBwID0gcHJvamVjdCjOuzIsIM+GMiksIHgyID0gcFswXSwgeTIgPSBwWzFdLCBkeDIgPSB4MiAtIHgwLCBkeTIgPSB5MiAtIHkwLCBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XG5cdCAgICAgICAgaWYgKGR6ICogZHogLyBkMiA+IM60MiB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAuNSkgPiAuMyB8fCBhMCAqIGExICsgYjAgKiBiMSArIGMwICogYzEgPCBjb3NNaW5EaXN0YW5jZSkge1xuXHQgICAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgzrsyLCBhIC89IG0sIGIgLz0gbSwgYywgZGVwdGgsIHN0cmVhbSk7XG5cdCAgICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcblx0ICAgICAgICAgIHJlc2FtcGxlTGluZVRvKHgyLCB5MiwgzrsyLCBhLCBiLCBjLCB4MSwgeTEsIM67MSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXNhbXBsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCjOtDIpO1xuXHQgICAgICBtYXhEZXB0aCA9ICjOtDIgPSBfICogXykgPiAwICYmIDE2O1xuXHQgICAgICByZXR1cm4gcmVzYW1wbGU7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHJlc2FtcGxlO1xuXHQgIH1cblx0ICBkMy5nZW8ucGF0aCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHBvaW50UmFkaXVzID0gNC41LCBwcm9qZWN0aW9uLCBjb250ZXh0LCBwcm9qZWN0U3RyZWFtLCBjb250ZXh0U3RyZWFtLCBjYWNoZVN0cmVhbTtcblx0ICAgIGZ1bmN0aW9uIHBhdGgob2JqZWN0KSB7XG5cdCAgICAgIGlmIChvYmplY3QpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK3BvaW50UmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHQgICAgICAgIGlmICghY2FjaGVTdHJlYW0gfHwgIWNhY2hlU3RyZWFtLnZhbGlkKSBjYWNoZVN0cmVhbSA9IHByb2plY3RTdHJlYW0oY29udGV4dFN0cmVhbSk7XG5cdCAgICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGNhY2hlU3RyZWFtKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gY29udGV4dFN0cmVhbS5yZXN1bHQoKTtcblx0ICAgIH1cblx0ICAgIHBhdGguYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHQgICAgICBkM19nZW9fcGF0aEFyZWFTdW0gPSAwO1xuXHQgICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aEFyZWEpKTtcblx0ICAgICAgcmV0dXJuIGQzX2dlb19wYXRoQXJlYVN1bTtcblx0ICAgIH07XG5cdCAgICBwYXRoLmNlbnRyb2lkID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdCAgICAgIGQzX2dlb19jZW50cm9pZFgwID0gZDNfZ2VvX2NlbnRyb2lkWTAgPSBkM19nZW9fY2VudHJvaWRaMCA9IGQzX2dlb19jZW50cm9pZFgxID0gZDNfZ2VvX2NlbnRyb2lkWTEgPSBkM19nZW9fY2VudHJvaWRaMSA9IGQzX2dlb19jZW50cm9pZFgyID0gZDNfZ2VvX2NlbnRyb2lkWTIgPSBkM19nZW9fY2VudHJvaWRaMiA9IDA7XG5cdCAgICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBwcm9qZWN0U3RyZWFtKGQzX2dlb19wYXRoQ2VudHJvaWQpKTtcblx0ICAgICAgcmV0dXJuIGQzX2dlb19jZW50cm9pZFoyID8gWyBkM19nZW9fY2VudHJvaWRYMiAvIGQzX2dlb19jZW50cm9pZFoyLCBkM19nZW9fY2VudHJvaWRZMiAvIGQzX2dlb19jZW50cm9pZFoyIF0gOiBkM19nZW9fY2VudHJvaWRaMSA/IFsgZDNfZ2VvX2NlbnRyb2lkWDEgLyBkM19nZW9fY2VudHJvaWRaMSwgZDNfZ2VvX2NlbnRyb2lkWTEgLyBkM19nZW9fY2VudHJvaWRaMSBdIDogZDNfZ2VvX2NlbnRyb2lkWjAgPyBbIGQzX2dlb19jZW50cm9pZFgwIC8gZDNfZ2VvX2NlbnRyb2lkWjAsIGQzX2dlb19jZW50cm9pZFkwIC8gZDNfZ2VvX2NlbnRyb2lkWjAgXSA6IFsgTmFOLCBOYU4gXTtcblx0ICAgIH07XG5cdCAgICBwYXRoLmJvdW5kcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHQgICAgICBkM19nZW9fcGF0aEJvdW5kc1gxID0gZDNfZ2VvX3BhdGhCb3VuZHNZMSA9IC0oZDNfZ2VvX3BhdGhCb3VuZHNYMCA9IGQzX2dlb19wYXRoQm91bmRzWTAgPSBJbmZpbml0eSk7XG5cdCAgICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBwcm9qZWN0U3RyZWFtKGQzX2dlb19wYXRoQm91bmRzKSk7XG5cdCAgICAgIHJldHVybiBbIFsgZDNfZ2VvX3BhdGhCb3VuZHNYMCwgZDNfZ2VvX3BhdGhCb3VuZHNZMCBdLCBbIGQzX2dlb19wYXRoQm91bmRzWDEsIGQzX2dlb19wYXRoQm91bmRzWTEgXSBdO1xuXHQgICAgfTtcblx0ICAgIHBhdGgucHJvamVjdGlvbiA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJvamVjdGlvbjtcblx0ICAgICAgcHJvamVjdFN0cmVhbSA9IChwcm9qZWN0aW9uID0gXykgPyBfLnN0cmVhbSB8fCBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0oXykgOiBkM19pZGVudGl0eTtcblx0ICAgICAgcmV0dXJuIHJlc2V0KCk7XG5cdCAgICB9O1xuXHQgICAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuXHQgICAgICBjb250ZXh0U3RyZWFtID0gKGNvbnRleHQgPSBfKSA9PSBudWxsID8gbmV3IGQzX2dlb19wYXRoQnVmZmVyKCkgOiBuZXcgZDNfZ2VvX3BhdGhDb250ZXh0KF8pO1xuXHQgICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xuXHQgICAgICByZXR1cm4gcmVzZXQoKTtcblx0ICAgIH07XG5cdCAgICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwb2ludFJhZGl1cztcblx0ICAgICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtfKSwgK18pO1xuXHQgICAgICByZXR1cm4gcGF0aDtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiByZXNldCgpIHtcblx0ICAgICAgY2FjaGVTdHJlYW0gPSBudWxsO1xuXHQgICAgICByZXR1cm4gcGF0aDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBwYXRoLnByb2plY3Rpb24oZDMuZ2VvLmFsYmVyc1VzYSgpKS5jb250ZXh0KG51bGwpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhQcm9qZWN0U3RyZWFtKHByb2plY3QpIHtcblx0ICAgIHZhciByZXNhbXBsZSA9IGQzX2dlb19yZXNhbXBsZShmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIHJldHVybiBwcm9qZWN0KFsgeCAqIGQzX2RlZ3JlZXMsIHkgKiBkM19kZWdyZWVzIF0pO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG5cdCAgICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvblJhZGlhbnMocmVzYW1wbGUoc3RyZWFtKSk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5nZW8udHJhbnNmb3JtID0gZnVuY3Rpb24obWV0aG9kcykge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgc3RyZWFtOiBmdW5jdGlvbihzdHJlYW0pIHtcblx0ICAgICAgICB2YXIgdHJhbnNmb3JtID0gbmV3IGQzX2dlb190cmFuc2Zvcm0oc3RyZWFtKTtcblx0ICAgICAgICBmb3IgKHZhciBrIGluIG1ldGhvZHMpIHRyYW5zZm9ybVtrXSA9IG1ldGhvZHNba107XG5cdCAgICAgICAgcmV0dXJuIHRyYW5zZm9ybTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb190cmFuc2Zvcm0oc3RyZWFtKSB7XG5cdCAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcblx0ICB9XG5cdCAgZDNfZ2VvX3RyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG5cdCAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgICB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTtcblx0ICAgIH0sXG5cdCAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLnN0cmVhbS5zcGhlcmUoKTtcblx0ICAgIH0sXG5cdCAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLnN0cmVhbS5saW5lU3RhcnQoKTtcblx0ICAgIH0sXG5cdCAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgdGhpcy5zdHJlYW0ubGluZUVuZCgpO1xuXHQgICAgfSxcblx0ICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuXHQgICAgfSxcblx0ICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCk7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBwb2ludCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgcG9pbnQ6IHBvaW50LFxuXHQgICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5zcGhlcmUoKTtcblx0ICAgICAgfSxcblx0ICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG5cdCAgICAgIH0sXG5cdCAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG5cdCAgICAgIH0sXG5cdCAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuXHQgICAgICB9LFxuXHQgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5nZW8ucHJvamVjdGlvbiA9IGQzX2dlb19wcm9qZWN0aW9uO1xuXHQgIGQzLmdlby5wcm9qZWN0aW9uTXV0YXRvciA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcjtcblx0ICBmdW5jdGlvbiBkM19nZW9fcHJvamVjdGlvbihwcm9qZWN0KSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb25NdXRhdG9yKGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gcHJvamVjdDtcblx0ICAgIH0pKCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcblx0ICAgIHZhciBwcm9qZWN0LCByb3RhdGUsIHByb2plY3RSb3RhdGUsIHByb2plY3RSZXNhbXBsZSA9IGQzX2dlb19yZXNhbXBsZShmdW5jdGlvbih4LCB5KSB7XG5cdCAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuXHQgICAgICByZXR1cm4gWyB4WzBdICogayArIM60eCwgzrR5IC0geFsxXSAqIGsgXTtcblx0ICAgIH0pLCBrID0gMTUwLCB4ID0gNDgwLCB5ID0gMjUwLCDOuyA9IDAsIM+GID0gMCwgzrTOuyA9IDAsIM60z4YgPSAwLCDOtM6zID0gMCwgzrR4LCDOtHksIHByZWNsaXAgPSBkM19nZW9fY2xpcEFudGltZXJpZGlhbiwgcG9zdGNsaXAgPSBkM19pZGVudGl0eSwgY2xpcEFuZ2xlID0gbnVsbCwgY2xpcEV4dGVudCA9IG51bGwsIHN0cmVhbTtcblx0ICAgIGZ1bmN0aW9uIHByb2plY3Rpb24ocG9pbnQpIHtcblx0ICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlKHBvaW50WzBdICogZDNfcmFkaWFucywgcG9pbnRbMV0gKiBkM19yYWRpYW5zKTtcblx0ICAgICAgcmV0dXJuIFsgcG9pbnRbMF0gKiBrICsgzrR4LCDOtHkgLSBwb2ludFsxXSAqIGsgXTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuXHQgICAgICBwb2ludCA9IHByb2plY3RSb3RhdGUuaW52ZXJ0KChwb2ludFswXSAtIM60eCkgLyBrLCAozrR5IC0gcG9pbnRbMV0pIC8gayk7XG5cdCAgICAgIHJldHVybiBwb2ludCAmJiBbIHBvaW50WzBdICogZDNfZGVncmVlcywgcG9pbnRbMV0gKiBkM19kZWdyZWVzIF07XG5cdCAgICB9XG5cdCAgICBwcm9qZWN0aW9uLnN0cmVhbSA9IGZ1bmN0aW9uKG91dHB1dCkge1xuXHQgICAgICBpZiAoc3RyZWFtKSBzdHJlYW0udmFsaWQgPSBmYWxzZTtcblx0ICAgICAgc3RyZWFtID0gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHByZWNsaXAocm90YXRlLCBwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAob3V0cHV0KSkpKTtcblx0ICAgICAgc3RyZWFtLnZhbGlkID0gdHJ1ZTtcblx0ICAgICAgcmV0dXJuIHN0cmVhbTtcblx0ICAgIH07XG5cdCAgICBwcm9qZWN0aW9uLmNsaXBBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEFuZ2xlO1xuXHQgICAgICBwcmVjbGlwID0gXyA9PSBudWxsID8gKGNsaXBBbmdsZSA9IF8sIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuKSA6IGQzX2dlb19jbGlwQ2lyY2xlKChjbGlwQW5nbGUgPSArXykgKiBkM19yYWRpYW5zKTtcblx0ICAgICAgcmV0dXJuIGludmFsaWRhdGUoKTtcblx0ICAgIH07XG5cdCAgICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsaXBFeHRlbnQ7XG5cdCAgICAgIGNsaXBFeHRlbnQgPSBfO1xuXHQgICAgICBwb3N0Y2xpcCA9IF8gPyBkM19nZW9fY2xpcEV4dGVudChfWzBdWzBdLCBfWzBdWzFdLCBfWzFdWzBdLCBfWzFdWzFdKSA6IGQzX2lkZW50aXR5O1xuXHQgICAgICByZXR1cm4gaW52YWxpZGF0ZSgpO1xuXHQgICAgfTtcblx0ICAgIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGs7XG5cdCAgICAgIGsgPSArXztcblx0ICAgICAgcmV0dXJuIHJlc2V0KCk7XG5cdCAgICB9O1xuXHQgICAgcHJvamVjdGlvbi50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgeCwgeSBdO1xuXHQgICAgICB4ID0gK19bMF07XG5cdCAgICAgIHkgPSArX1sxXTtcblx0ICAgICAgcmV0dXJuIHJlc2V0KCk7XG5cdCAgICB9O1xuXHQgICAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgzrsgKiBkM19kZWdyZWVzLCDPhiAqIGQzX2RlZ3JlZXMgXTtcblx0ICAgICAgzrsgPSBfWzBdICUgMzYwICogZDNfcmFkaWFucztcblx0ICAgICAgz4YgPSBfWzFdICUgMzYwICogZDNfcmFkaWFucztcblx0ICAgICAgcmV0dXJuIHJlc2V0KCk7XG5cdCAgICB9O1xuXHQgICAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgzrTOuyAqIGQzX2RlZ3JlZXMsIM60z4YgKiBkM19kZWdyZWVzLCDOtM6zICogZDNfZGVncmVlcyBdO1xuXHQgICAgICDOtM67ID0gX1swXSAlIDM2MCAqIGQzX3JhZGlhbnM7XG5cdCAgICAgIM60z4YgPSBfWzFdICUgMzYwICogZDNfcmFkaWFucztcblx0ICAgICAgzrTOsyA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiBkM19yYWRpYW5zIDogMDtcblx0ICAgICAgcmV0dXJuIHJlc2V0KCk7XG5cdCAgICB9O1xuXHQgICAgZDMucmViaW5kKHByb2plY3Rpb24sIHByb2plY3RSZXNhbXBsZSwgXCJwcmVjaXNpb25cIik7XG5cdCAgICBmdW5jdGlvbiByZXNldCgpIHtcblx0ICAgICAgcHJvamVjdFJvdGF0ZSA9IGQzX2dlb19jb21wb3NlKHJvdGF0ZSA9IGQzX2dlb19yb3RhdGlvbijOtM67LCDOtM+GLCDOtM6zKSwgcHJvamVjdCk7XG5cdCAgICAgIHZhciBjZW50ZXIgPSBwcm9qZWN0KM67LCDPhik7XG5cdCAgICAgIM60eCA9IHggLSBjZW50ZXJbMF0gKiBrO1xuXHQgICAgICDOtHkgPSB5ICsgY2VudGVyWzFdICogaztcblx0ICAgICAgcmV0dXJuIGludmFsaWRhdGUoKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG5cdCAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlLCBzdHJlYW0gPSBudWxsO1xuXHQgICAgICByZXR1cm4gcHJvamVjdGlvbjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgcHJvamVjdCA9IHByb2plY3RBdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICBwcm9qZWN0aW9uLmludmVydCA9IHByb2plY3QuaW52ZXJ0ICYmIGludmVydDtcblx0ICAgICAgcmV0dXJuIHJlc2V0KCk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fcHJvamVjdGlvblJhZGlhbnMoc3RyZWFtKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX3RyYW5zZm9ybVBvaW50KHN0cmVhbSwgZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgICBzdHJlYW0ucG9pbnQoeCAqIGQzX3JhZGlhbnMsIHkgKiBkM19yYWRpYW5zKTtcblx0ICAgIH0pO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fZXF1aXJlY3Rhbmd1bGFyKM67LCDPhikge1xuXHQgICAgcmV0dXJuIFsgzrssIM+GIF07XG5cdCAgfVxuXHQgIChkMy5nZW8uZXF1aXJlY3Rhbmd1bGFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcik7XG5cdCAgfSkucmF3ID0gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhci5pbnZlcnQgPSBkM19nZW9fZXF1aXJlY3Rhbmd1bGFyO1xuXHQgIGQzLmdlby5yb3RhdGlvbiA9IGZ1bmN0aW9uKHJvdGF0ZSkge1xuXHQgICAgcm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKHJvdGF0ZVswXSAlIDM2MCAqIGQzX3JhZGlhbnMsIHJvdGF0ZVsxXSAqIGQzX3JhZGlhbnMsIHJvdGF0ZS5sZW5ndGggPiAyID8gcm90YXRlWzJdICogZDNfcmFkaWFucyA6IDApO1xuXHQgICAgZnVuY3Rpb24gZm9yd2FyZChjb29yZGluYXRlcykge1xuXHQgICAgICBjb29yZGluYXRlcyA9IHJvdGF0ZShjb29yZGluYXRlc1swXSAqIGQzX3JhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogZDNfcmFkaWFucyk7XG5cdCAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlcztcblx0ICAgIH1cblx0ICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcblx0ICAgICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcblx0ICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGQzX2RlZ3JlZXMsIGNvb3JkaW5hdGVzWzFdICo9IGQzX2RlZ3JlZXMsIGNvb3JkaW5hdGVzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBmb3J3YXJkO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2lkZW50aXR5Um90YXRpb24ozrssIM+GKSB7XG5cdCAgICByZXR1cm4gWyDOuyA+IM+AID8gzrsgLSDPhCA6IM67IDwgLc+AID8gzrsgKyDPhCA6IM67LCDPhiBdO1xuXHQgIH1cblx0ICBkM19nZW9faWRlbnRpdHlSb3RhdGlvbi5pbnZlcnQgPSBkM19nZW9fZXF1aXJlY3Rhbmd1bGFyO1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19yb3RhdGlvbijOtM67LCDOtM+GLCDOtM6zKSB7XG5cdCAgICByZXR1cm4gzrTOuyA/IM60z4YgfHwgzrTOsyA/IGQzX2dlb19jb21wb3NlKGQzX2dlb19yb3RhdGlvbs67KM60zrspLCBkM19nZW9fcm90YXRpb27Phs6zKM60z4YsIM60zrMpKSA6IGQzX2dlb19yb3RhdGlvbs67KM60zrspIDogzrTPhiB8fCDOtM6zID8gZDNfZ2VvX3JvdGF0aW9uz4bOsyjOtM+GLCDOtM6zKSA6IGQzX2dlb19pZGVudGl0eVJvdGF0aW9uO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fZm9yd2FyZFJvdGF0aW9uzrsozrTOuykge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKM67LCDPhikge1xuXHQgICAgICByZXR1cm4gzrsgKz0gzrTOuywgWyDOuyA+IM+AID8gzrsgLSDPhCA6IM67IDwgLc+AID8gzrsgKyDPhCA6IM67LCDPhiBdO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3JvdGF0aW9uzrsozrTOuykge1xuXHQgICAgdmFyIHJvdGF0aW9uID0gZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67KM60zrspO1xuXHQgICAgcm90YXRpb24uaW52ZXJ0ID0gZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67KC3OtM67KTtcblx0ICAgIHJldHVybiByb3RhdGlvbjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3JvdGF0aW9uz4bOsyjOtM+GLCDOtM6zKSB7XG5cdCAgICB2YXIgY29zzrTPhiA9IE1hdGguY29zKM60z4YpLCBzaW7OtM+GID0gTWF0aC5zaW4ozrTPhiksIGNvc860zrMgPSBNYXRoLmNvcyjOtM6zKSwgc2luzrTOsyA9IE1hdGguc2luKM60zrMpO1xuXHQgICAgZnVuY3Rpb24gcm90YXRpb24ozrssIM+GKSB7XG5cdCAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GKSwgeCA9IE1hdGguY29zKM67KSAqIGNvc8+GLCB5ID0gTWF0aC5zaW4ozrspICogY29zz4YsIHogPSBNYXRoLnNpbijPhiksIGsgPSB6ICogY29zzrTPhiArIHggKiBzaW7OtM+GO1xuXHQgICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHkgKiBjb3POtM6zIC0gayAqIHNpbs60zrMsIHggKiBjb3POtM+GIC0geiAqIHNpbs60z4YpLCBkM19hc2luKGsgKiBjb3POtM6zICsgeSAqIHNpbs60zrMpIF07XG5cdCAgICB9XG5cdCAgICByb3RhdGlvbi5pbnZlcnQgPSBmdW5jdGlvbijOuywgz4YpIHtcblx0ICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YpLCB4ID0gTWF0aC5jb3MozrspICogY29zz4YsIHkgPSBNYXRoLnNpbijOuykgKiBjb3PPhiwgeiA9IE1hdGguc2luKM+GKSwgayA9IHogKiBjb3POtM6zIC0geSAqIHNpbs60zrM7XG5cdCAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSAqIGNvc860zrMgKyB6ICogc2luzrTOsywgeCAqIGNvc860z4YgKyBrICogc2luzrTPhiksIGQzX2FzaW4oayAqIGNvc860z4YgLSB4ICogc2luzrTPhikgXTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gcm90YXRpb247XG5cdCAgfVxuXHQgIGQzLmdlby5jaXJjbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBvcmlnaW4gPSBbIDAsIDAgXSwgYW5nbGUsIHByZWNpc2lvbiA9IDYsIGludGVycG9sYXRlO1xuXHQgICAgZnVuY3Rpb24gY2lyY2xlKCkge1xuXHQgICAgICB2YXIgY2VudGVyID0gdHlwZW9mIG9yaWdpbiA9PT0gXCJmdW5jdGlvblwiID8gb3JpZ2luLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBvcmlnaW4sIHJvdGF0ZSA9IGQzX2dlb19yb3RhdGlvbigtY2VudGVyWzBdICogZDNfcmFkaWFucywgLWNlbnRlclsxXSAqIGQzX3JhZGlhbnMsIDApLmludmVydCwgcmluZyA9IFtdO1xuXHQgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCB7XG5cdCAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgICAgIHJpbmcucHVzaCh4ID0gcm90YXRlKHgsIHkpKTtcblx0ICAgICAgICAgIHhbMF0gKj0gZDNfZGVncmVlcywgeFsxXSAqPSBkM19kZWdyZWVzO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG5cdCAgICAgICAgY29vcmRpbmF0ZXM6IFsgcmluZyBdXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBjaXJjbGUub3JpZ2luID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmlnaW47XG5cdCAgICAgIG9yaWdpbiA9IHg7XG5cdCAgICAgIHJldHVybiBjaXJjbGU7XG5cdCAgICB9O1xuXHQgICAgY2lyY2xlLmFuZ2xlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBhbmdsZTtcblx0ICAgICAgaW50ZXJwb2xhdGUgPSBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUoKGFuZ2xlID0gK3gpICogZDNfcmFkaWFucywgcHJlY2lzaW9uICogZDNfcmFkaWFucyk7XG5cdCAgICAgIHJldHVybiBjaXJjbGU7XG5cdCAgICB9O1xuXHQgICAgY2lyY2xlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuXHQgICAgICBpbnRlcnBvbGF0ZSA9IGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZShhbmdsZSAqIGQzX3JhZGlhbnMsIChwcmVjaXNpb24gPSArXykgKiBkM19yYWRpYW5zKTtcblx0ICAgICAgcmV0dXJuIGNpcmNsZTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gY2lyY2xlLmFuZ2xlKDkwKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZShyYWRpdXMsIHByZWNpc2lvbikge1xuXHQgICAgdmFyIGNyID0gTWF0aC5jb3MocmFkaXVzKSwgc3IgPSBNYXRoLnNpbihyYWRpdXMpO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKGZyb20sIHRvLCBkaXJlY3Rpb24sIGxpc3RlbmVyKSB7XG5cdCAgICAgIHZhciBzdGVwID0gZGlyZWN0aW9uICogcHJlY2lzaW9uO1xuXHQgICAgICBpZiAoZnJvbSAhPSBudWxsKSB7XG5cdCAgICAgICAgZnJvbSA9IGQzX2dlb19jaXJjbGVBbmdsZShjciwgZnJvbSk7XG5cdCAgICAgICAgdG8gPSBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHRvKTtcblx0ICAgICAgICBpZiAoZGlyZWN0aW9uID4gMCA/IGZyb20gPCB0byA6IGZyb20gPiB0bykgZnJvbSArPSBkaXJlY3Rpb24gKiDPhDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBmcm9tID0gcmFkaXVzICsgZGlyZWN0aW9uICogz4Q7XG5cdCAgICAgICAgdG8gPSByYWRpdXMgLSAuNSAqIHN0ZXA7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yICh2YXIgcG9pbnQsIHQgPSBmcm9tOyBkaXJlY3Rpb24gPiAwID8gdCA+IHRvIDogdCA8IHRvOyB0IC09IHN0ZXApIHtcblx0ICAgICAgICBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBkM19nZW9fc3BoZXJpY2FsKFsgY3IsIC1zciAqIE1hdGguY29zKHQpLCAtc3IgKiBNYXRoLnNpbih0KSBdKSlbMF0sIHBvaW50WzFdKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX2NpcmNsZUFuZ2xlKGNyLCBwb2ludCkge1xuXHQgICAgdmFyIGEgPSBkM19nZW9fY2FydGVzaWFuKHBvaW50KTtcblx0ICAgIGFbMF0gLT0gY3I7XG5cdCAgICBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGEpO1xuXHQgICAgdmFyIGFuZ2xlID0gZDNfYWNvcygtYVsxXSk7XG5cdCAgICByZXR1cm4gKCgtYVsyXSA8IDAgPyAtYW5nbGUgOiBhbmdsZSkgKyAyICogTWF0aC5QSSAtIM61KSAlICgyICogTWF0aC5QSSk7XG5cdCAgfVxuXHQgIGQzLmdlby5kaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0ICAgIHZhciDOlM67ID0gKGJbMF0gLSBhWzBdKSAqIGQzX3JhZGlhbnMsIM+GMCA9IGFbMV0gKiBkM19yYWRpYW5zLCDPhjEgPSBiWzFdICogZDNfcmFkaWFucywgc2luzpTOuyA9IE1hdGguc2luKM6UzrspLCBjb3POlM67ID0gTWF0aC5jb3MozpTOuyksIHNpbs+GMCA9IE1hdGguc2luKM+GMCksIGNvc8+GMCA9IE1hdGguY29zKM+GMCksIHNpbs+GMSA9IE1hdGguc2luKM+GMSksIGNvc8+GMSA9IE1hdGguY29zKM+GMSksIHQ7XG5cdCAgICByZXR1cm4gTWF0aC5hdGFuMihNYXRoLnNxcnQoKHQgPSBjb3PPhjEgKiBzaW7OlM67KSAqIHQgKyAodCA9IGNvc8+GMCAqIHNpbs+GMSAtIHNpbs+GMCAqIGNvc8+GMSAqIGNvc86UzrspICogdCksIHNpbs+GMCAqIHNpbs+GMSArIGNvc8+GMCAqIGNvc8+GMSAqIGNvc86UzrspO1xuXHQgIH07XG5cdCAgZDMuZ2VvLmdyYXRpY3VsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHgxLCB4MCwgWDEsIFgwLCB5MSwgeTAsIFkxLCBZMCwgZHggPSAxMCwgZHkgPSBkeCwgRFggPSA5MCwgRFkgPSAzNjAsIHgsIHksIFgsIFksIHByZWNpc2lvbiA9IDIuNTtcblx0ICAgIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICB0eXBlOiBcIk11bHRpTGluZVN0cmluZ1wiLFxuXHQgICAgICAgIGNvb3JkaW5hdGVzOiBsaW5lcygpXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBsaW5lcygpIHtcblx0ICAgICAgcmV0dXJuIGQzLnJhbmdlKE1hdGguY2VpbChYMCAvIERYKSAqIERYLCBYMSwgRFgpLm1hcChYKS5jb25jYXQoZDMucmFuZ2UoTWF0aC5jZWlsKFkwIC8gRFkpICogRFksIFkxLCBEWSkubWFwKFkpKS5jb25jYXQoZDMucmFuZ2UoTWF0aC5jZWlsKHgwIC8gZHgpICogZHgsIHgxLCBkeCkuZmlsdGVyKGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgICByZXR1cm4gYWJzKHggJSBEWCkgPiDOtTtcblx0ICAgICAgfSkubWFwKHgpKS5jb25jYXQoZDMucmFuZ2UoTWF0aC5jZWlsKHkwIC8gZHkpICogZHksIHkxLCBkeSkuZmlsdGVyKGZ1bmN0aW9uKHkpIHtcblx0ICAgICAgICByZXR1cm4gYWJzKHkgJSBEWSkgPiDOtTtcblx0ICAgICAgfSkubWFwKHkpKTtcblx0ICAgIH1cblx0ICAgIGdyYXRpY3VsZS5saW5lcyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gbGluZXMoKS5tYXAoZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgdHlwZTogXCJMaW5lU3RyaW5nXCIsXG5cdCAgICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcblx0ICAgICAgICB9O1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICBncmF0aWN1bGUub3V0bGluZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuXHQgICAgICAgIGNvb3JkaW5hdGVzOiBbIFgoWDApLmNvbmNhdChZKFkxKS5zbGljZSgxKSwgWChYMSkucmV2ZXJzZSgpLnNsaWNlKDEpLCBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpIF1cblx0ICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUubWlub3JFeHRlbnQoKTtcblx0ICAgICAgcmV0dXJuIGdyYXRpY3VsZS5tYWpvckV4dGVudChfKS5taW5vckV4dGVudChfKTtcblx0ICAgIH07XG5cdCAgICBncmF0aWN1bGUubWFqb3JFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgWyBYMCwgWTAgXSwgWyBYMSwgWTEgXSBdO1xuXHQgICAgICBYMCA9ICtfWzBdWzBdLCBYMSA9ICtfWzFdWzBdO1xuXHQgICAgICBZMCA9ICtfWzBdWzFdLCBZMSA9ICtfWzFdWzFdO1xuXHQgICAgICBpZiAoWDAgPiBYMSkgXyA9IFgwLCBYMCA9IFgxLCBYMSA9IF87XG5cdCAgICAgIGlmIChZMCA+IFkxKSBfID0gWTAsIFkwID0gWTEsIFkxID0gXztcblx0ICAgICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcblx0ICAgIH07XG5cdCAgICBncmF0aWN1bGUubWlub3JFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgWyB4MCwgeTAgXSwgWyB4MSwgeTEgXSBdO1xuXHQgICAgICB4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdO1xuXHQgICAgICB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdO1xuXHQgICAgICBpZiAoeDAgPiB4MSkgXyA9IHgwLCB4MCA9IHgxLCB4MSA9IF87XG5cdCAgICAgIGlmICh5MCA+IHkxKSBfID0geTAsIHkwID0geTEsIHkxID0gXztcblx0ICAgICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcblx0ICAgIH07XG5cdCAgICBncmF0aWN1bGUuc3RlcCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLm1pbm9yU3RlcCgpO1xuXHQgICAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yU3RlcChfKS5taW5vclN0ZXAoXyk7XG5cdCAgICB9O1xuXHQgICAgZ3JhdGljdWxlLm1ham9yU3RlcCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBEWCwgRFkgXTtcblx0ICAgICAgRFggPSArX1swXSwgRFkgPSArX1sxXTtcblx0ICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcblx0ICAgIH07XG5cdCAgICBncmF0aWN1bGUubWlub3JTdGVwID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIGR4LCBkeSBdO1xuXHQgICAgICBkeCA9ICtfWzBdLCBkeSA9ICtfWzFdO1xuXHQgICAgICByZXR1cm4gZ3JhdGljdWxlO1xuXHQgICAgfTtcblx0ICAgIGdyYXRpY3VsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbjtcblx0ICAgICAgcHJlY2lzaW9uID0gK187XG5cdCAgICAgIHggPSBkM19nZW9fZ3JhdGljdWxlWCh5MCwgeTEsIDkwKTtcblx0ICAgICAgeSA9IGQzX2dlb19ncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcblx0ICAgICAgWCA9IGQzX2dlb19ncmF0aWN1bGVYKFkwLCBZMSwgOTApO1xuXHQgICAgICBZID0gZDNfZ2VvX2dyYXRpY3VsZVkoWDAsIFgxLCBwcmVjaXNpb24pO1xuXHQgICAgICByZXR1cm4gZ3JhdGljdWxlO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBncmF0aWN1bGUubWFqb3JFeHRlbnQoWyBbIC0xODAsIC05MCArIM61IF0sIFsgMTgwLCA5MCAtIM61IF0gXSkubWlub3JFeHRlbnQoWyBbIC0xODAsIC04MCAtIM61IF0sIFsgMTgwLCA4MCArIM61IF0gXSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG5cdCAgICB2YXIgeSA9IGQzLnJhbmdlKHkwLCB5MSAtIM61LCBkeSkuY29uY2F0KHkxKTtcblx0ICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7XG5cdCAgICAgICAgcmV0dXJuIFsgeCwgeSBdO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb19ncmF0aWN1bGVZKHgwLCB4MSwgZHgpIHtcblx0ICAgIHZhciB4ID0gZDMucmFuZ2UoeDAsIHgxIC0gzrUsIGR4KS5jb25jYXQoeDEpO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHkpIHtcblx0ICAgICAgcmV0dXJuIHgubWFwKGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgICByZXR1cm4gWyB4LCB5IF07XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc291cmNlKGQpIHtcblx0ICAgIHJldHVybiBkLnNvdXJjZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGFyZ2V0KGQpIHtcblx0ICAgIHJldHVybiBkLnRhcmdldDtcblx0ICB9XG5cdCAgZDMuZ2VvLmdyZWF0QXJjID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgc291cmNlID0gZDNfc291cmNlLCBzb3VyY2VfLCB0YXJnZXQgPSBkM190YXJnZXQsIHRhcmdldF87XG5cdCAgICBmdW5jdGlvbiBncmVhdEFyYygpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICB0eXBlOiBcIkxpbmVTdHJpbmdcIixcblx0ICAgICAgICBjb29yZGluYXRlczogWyBzb3VyY2VfIHx8IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0YXJnZXRfIHx8IHRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIF1cblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGdyZWF0QXJjLmRpc3RhbmNlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkMy5nZW8uZGlzdGFuY2Uoc291cmNlXyB8fCBzb3VyY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdGFyZ2V0XyB8fCB0YXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgICB9O1xuXHQgICAgZ3JlYXRBcmMuc291cmNlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG5cdCAgICAgIHNvdXJjZSA9IF8sIHNvdXJjZV8gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gbnVsbCA6IF87XG5cdCAgICAgIHJldHVybiBncmVhdEFyYztcblx0ICAgIH07XG5cdCAgICBncmVhdEFyYy50YXJnZXQgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcblx0ICAgICAgdGFyZ2V0ID0gXywgdGFyZ2V0XyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBudWxsIDogXztcblx0ICAgICAgcmV0dXJuIGdyZWF0QXJjO1xuXHQgICAgfTtcblx0ICAgIGdyZWF0QXJjLnByZWNpc2lvbiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGdyZWF0QXJjIDogMDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZ3JlYXRBcmM7XG5cdCAgfTtcblx0ICBkMy5nZW8uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihzb3VyY2UsIHRhcmdldCkge1xuXHQgICAgcmV0dXJuIGQzX2dlb19pbnRlcnBvbGF0ZShzb3VyY2VbMF0gKiBkM19yYWRpYW5zLCBzb3VyY2VbMV0gKiBkM19yYWRpYW5zLCB0YXJnZXRbMF0gKiBkM19yYWRpYW5zLCB0YXJnZXRbMV0gKiBkM19yYWRpYW5zKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19pbnRlcnBvbGF0ZSh4MCwgeTAsIHgxLCB5MSkge1xuXHQgICAgdmFyIGN5MCA9IE1hdGguY29zKHkwKSwgc3kwID0gTWF0aC5zaW4oeTApLCBjeTEgPSBNYXRoLmNvcyh5MSksIHN5MSA9IE1hdGguc2luKHkxKSwga3gwID0gY3kwICogTWF0aC5jb3MoeDApLCBreTAgPSBjeTAgKiBNYXRoLnNpbih4MCksIGt4MSA9IGN5MSAqIE1hdGguY29zKHgxKSwga3kxID0gY3kxICogTWF0aC5zaW4oeDEpLCBkID0gMiAqIE1hdGguYXNpbihNYXRoLnNxcnQoZDNfaGF2ZXJzaW4oeTEgLSB5MCkgKyBjeTAgKiBjeTEgKiBkM19oYXZlcnNpbih4MSAtIHgwKSkpLCBrID0gMSAvIE1hdGguc2luKGQpO1xuXHQgICAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgdmFyIEIgPSBNYXRoLnNpbih0ICo9IGQpICogaywgQSA9IE1hdGguc2luKGQgLSB0KSAqIGssIHggPSBBICoga3gwICsgQiAqIGt4MSwgeSA9IEEgKiBreTAgKyBCICoga3kxLCB6ID0gQSAqIHN5MCArIEIgKiBzeTE7XG5cdCAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSwgeCkgKiBkM19kZWdyZWVzLCBNYXRoLmF0YW4yKHosIE1hdGguc3FydCh4ICogeCArIHkgKiB5KSkgKiBkM19kZWdyZWVzIF07XG5cdCAgICB9IDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBbIHgwICogZDNfZGVncmVlcywgeTAgKiBkM19kZWdyZWVzIF07XG5cdCAgICB9O1xuXHQgICAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuXHQgICAgcmV0dXJuIGludGVycG9sYXRlO1xuXHQgIH1cblx0ICBkMy5nZW8ubGVuZ3RoID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdCAgICBkM19nZW9fbGVuZ3RoU3VtID0gMDtcblx0ICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBkM19nZW9fbGVuZ3RoKTtcblx0ICAgIHJldHVybiBkM19nZW9fbGVuZ3RoU3VtO1xuXHQgIH07XG5cdCAgdmFyIGQzX2dlb19sZW5ndGhTdW07XG5cdCAgdmFyIGQzX2dlb19sZW5ndGggPSB7XG5cdCAgICBzcGhlcmU6IGQzX25vb3AsXG5cdCAgICBwb2ludDogZDNfbm9vcCxcblx0ICAgIGxpbmVTdGFydDogZDNfZ2VvX2xlbmd0aExpbmVTdGFydCxcblx0ICAgIGxpbmVFbmQ6IGQzX25vb3AsXG5cdCAgICBwb2x5Z29uU3RhcnQ6IGQzX25vb3AsXG5cdCAgICBwb2x5Z29uRW5kOiBkM19ub29wXG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9fbGVuZ3RoTGluZVN0YXJ0KCkge1xuXHQgICAgdmFyIM67MCwgc2luz4YwLCBjb3PPhjA7XG5cdCAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gZnVuY3Rpb24ozrssIM+GKSB7XG5cdCAgICAgIM67MCA9IM67ICogZDNfcmFkaWFucywgc2luz4YwID0gTWF0aC5zaW4oz4YgKj0gZDNfcmFkaWFucyksIGNvc8+GMCA9IE1hdGguY29zKM+GKTtcblx0ICAgICAgZDNfZ2VvX2xlbmd0aC5wb2ludCA9IG5leHRQb2ludDtcblx0ICAgIH07XG5cdCAgICBkM19nZW9fbGVuZ3RoLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgZDNfZ2VvX2xlbmd0aC5wb2ludCA9IGQzX2dlb19sZW5ndGgubGluZUVuZCA9IGQzX25vb3A7XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuXHQgICAgICB2YXIgc2luz4YgPSBNYXRoLnNpbijPhiAqPSBkM19yYWRpYW5zKSwgY29zz4YgPSBNYXRoLmNvcyjPhiksIHQgPSBhYnMoKM67ICo9IGQzX3JhZGlhbnMpIC0gzrswKSwgY29zzpTOuyA9IE1hdGguY29zKHQpO1xuXHQgICAgICBkM19nZW9fbGVuZ3RoU3VtICs9IE1hdGguYXRhbjIoTWF0aC5zcXJ0KCh0ID0gY29zz4YgKiBNYXRoLnNpbih0KSkgKiB0ICsgKHQgPSBjb3PPhjAgKiBzaW7PhiAtIHNpbs+GMCAqIGNvc8+GICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YgKyBjb3PPhjAgKiBjb3PPhiAqIGNvc86UzrspO1xuXHQgICAgICDOuzAgPSDOuywgc2luz4YwID0gc2luz4YsIGNvc8+GMCA9IGNvc8+GO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9fYXppbXV0aGFsKHNjYWxlLCBhbmdsZSkge1xuXHQgICAgZnVuY3Rpb24gYXppbXV0aGFsKM67LCDPhikge1xuXHQgICAgICB2YXIgY29zzrsgPSBNYXRoLmNvcyjOuyksIGNvc8+GID0gTWF0aC5jb3Moz4YpLCBrID0gc2NhbGUoY29zzrsgKiBjb3PPhik7XG5cdCAgICAgIHJldHVybiBbIGsgKiBjb3PPhiAqIE1hdGguc2luKM67KSwgayAqIE1hdGguc2luKM+GKSBdO1xuXHQgICAgfVxuXHQgICAgYXppbXV0aGFsLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgdmFyIM+BID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpLCBjID0gYW5nbGUoz4EpLCBzaW5jID0gTWF0aC5zaW4oYyksIGNvc2MgPSBNYXRoLmNvcyhjKTtcblx0ICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih4ICogc2luYywgz4EgKiBjb3NjKSwgTWF0aC5hc2luKM+BICYmIHkgKiBzaW5jIC8gz4EpIF07XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGF6aW11dGhhbDtcblx0ICB9XG5cdCAgdmFyIGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWEgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcblx0ICAgIHJldHVybiBNYXRoLnNxcnQoMiAvICgxICsgY29zzrtjb3PPhikpO1xuXHQgIH0sIGZ1bmN0aW9uKM+BKSB7XG5cdCAgICByZXR1cm4gMiAqIE1hdGguYXNpbijPgSAvIDIpO1xuXHQgIH0pO1xuXHQgIChkMy5nZW8uYXppbXV0aGFsRXF1YWxBcmVhID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2F6aW11dGhhbEVxdWFsQXJlYSk7XG5cdCAgfSkucmF3ID0gZDNfZ2VvX2F6aW11dGhhbEVxdWFsQXJlYTtcblx0ICB2YXIgZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50ID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG5cdCAgICB2YXIgYyA9IE1hdGguYWNvcyhjb3POu2Nvc8+GKTtcblx0ICAgIHJldHVybiBjICYmIGMgLyBNYXRoLnNpbihjKTtcblx0ICB9LCBkM19pZGVudGl0eSk7XG5cdCAgKGQzLmdlby5hemltdXRoYWxFcXVpZGlzdGFudCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19hemltdXRoYWxFcXVpZGlzdGFudCk7XG5cdCAgfSkucmF3ID0gZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb19jb25pY0NvbmZvcm1hbCjPhjAsIM+GMSkge1xuXHQgICAgdmFyIGNvc8+GMCA9IE1hdGguY29zKM+GMCksIHQgPSBmdW5jdGlvbijPhikge1xuXHQgICAgICByZXR1cm4gTWF0aC50YW4oz4AgLyA0ICsgz4YgLyAyKTtcblx0ICAgIH0sIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiBNYXRoLmxvZyhjb3PPhjAgLyBNYXRoLmNvcyjPhjEpKSAvIE1hdGgubG9nKHQoz4YxKSAvIHQoz4YwKSksIEYgPSBjb3PPhjAgKiBNYXRoLnBvdyh0KM+GMCksIG4pIC8gbjtcblx0ICAgIGlmICghbikgcmV0dXJuIGQzX2dlb19tZXJjYXRvcjtcblx0ICAgIGZ1bmN0aW9uIGZvcndhcmQozrssIM+GKSB7XG5cdCAgICAgIGlmIChGID4gMCkge1xuXHQgICAgICAgIGlmICjPhiA8IC1oYWxmz4AgKyDOtSkgz4YgPSAtaGFsZs+AICsgzrU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKM+GID4gaGFsZs+AIC0gzrUpIM+GID0gaGFsZs+AIC0gzrU7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIM+BID0gRiAvIE1hdGgucG93KHQoz4YpLCBuKTtcblx0ICAgICAgcmV0dXJuIFsgz4EgKiBNYXRoLnNpbihuICogzrspLCBGIC0gz4EgKiBNYXRoLmNvcyhuICogzrspIF07XG5cdCAgICB9XG5cdCAgICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgICAgdmFyIM+BMF95ID0gRiAtIHksIM+BID0gZDNfc2duKG4pICogTWF0aC5zcXJ0KHggKiB4ICsgz4EwX3kgKiDPgTBfeSk7XG5cdCAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeCwgz4EwX3kpIC8gbiwgMiAqIE1hdGguYXRhbihNYXRoLnBvdyhGIC8gz4EsIDEgLyBuKSkgLSBoYWxmz4AgXTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZm9yd2FyZDtcblx0ICB9XG5cdCAgKGQzLmdlby5jb25pY0NvbmZvcm1hbCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNDb25mb3JtYWwpO1xuXHQgIH0pLnJhdyA9IGQzX2dlb19jb25pY0NvbmZvcm1hbDtcblx0ICBmdW5jdGlvbiBkM19nZW9fY29uaWNFcXVpZGlzdGFudCjPhjAsIM+GMSkge1xuXHQgICAgdmFyIGNvc8+GMCA9IE1hdGguY29zKM+GMCksIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiAoY29zz4YwIC0gTWF0aC5jb3Moz4YxKSkgLyAoz4YxIC0gz4YwKSwgRyA9IGNvc8+GMCAvIG4gKyDPhjA7XG5cdCAgICBpZiAoYWJzKG4pIDwgzrUpIHJldHVybiBkM19nZW9fZXF1aXJlY3Rhbmd1bGFyO1xuXHQgICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcblx0ICAgICAgdmFyIM+BID0gRyAtIM+GO1xuXHQgICAgICByZXR1cm4gWyDPgSAqIE1hdGguc2luKG4gKiDOuyksIEcgLSDPgSAqIE1hdGguY29zKG4gKiDOuykgXTtcblx0ICAgIH1cblx0ICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgICB2YXIgz4EwX3kgPSBHIC0geTtcblx0ICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih4LCDPgTBfeSkgLyBuLCBHIC0gZDNfc2duKG4pICogTWF0aC5zcXJ0KHggKiB4ICsgz4EwX3kgKiDPgTBfeSkgXTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZm9yd2FyZDtcblx0ICB9XG5cdCAgKGQzLmdlby5jb25pY0VxdWlkaXN0YW50ID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX2NvbmljKGQzX2dlb19jb25pY0VxdWlkaXN0YW50KTtcblx0ICB9KS5yYXcgPSBkM19nZW9fY29uaWNFcXVpZGlzdGFudDtcblx0ICB2YXIgZDNfZ2VvX2dub21vbmljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG5cdCAgICByZXR1cm4gMSAvIGNvc867Y29zz4Y7XG5cdCAgfSwgTWF0aC5hdGFuKTtcblx0ICAoZDMuZ2VvLmdub21vbmljID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2dub21vbmljKTtcblx0ICB9KS5yYXcgPSBkM19nZW9fZ25vbW9uaWM7XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX21lcmNhdG9yKM67LCDPhikge1xuXHQgICAgcmV0dXJuIFsgzrssIE1hdGgubG9nKE1hdGgudGFuKM+AIC8gNCArIM+GIC8gMikpIF07XG5cdCAgfVxuXHQgIGQzX2dlb19tZXJjYXRvci5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICByZXR1cm4gWyB4LCAyICogTWF0aC5hdGFuKE1hdGguZXhwKHkpKSAtIGhhbGbPgCBdO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG5cdCAgICB2YXIgbSA9IGQzX2dlb19wcm9qZWN0aW9uKHByb2plY3QpLCBzY2FsZSA9IG0uc2NhbGUsIHRyYW5zbGF0ZSA9IG0udHJhbnNsYXRlLCBjbGlwRXh0ZW50ID0gbS5jbGlwRXh0ZW50LCBjbGlwQXV0bztcblx0ICAgIG0uc2NhbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHYgPSBzY2FsZS5hcHBseShtLCBhcmd1bWVudHMpO1xuXHQgICAgICByZXR1cm4gdiA9PT0gbSA/IGNsaXBBdXRvID8gbS5jbGlwRXh0ZW50KG51bGwpIDogbSA6IHY7XG5cdCAgICB9O1xuXHQgICAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHYgPSB0cmFuc2xhdGUuYXBwbHkobSwgYXJndW1lbnRzKTtcblx0ICAgICAgcmV0dXJuIHYgPT09IG0gPyBjbGlwQXV0byA/IG0uY2xpcEV4dGVudChudWxsKSA6IG0gOiB2O1xuXHQgICAgfTtcblx0ICAgIG0uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgdmFyIHYgPSBjbGlwRXh0ZW50LmFwcGx5KG0sIGFyZ3VtZW50cyk7XG5cdCAgICAgIGlmICh2ID09PSBtKSB7XG5cdCAgICAgICAgaWYgKGNsaXBBdXRvID0gXyA9PSBudWxsKSB7XG5cdCAgICAgICAgICB2YXIgayA9IM+AICogc2NhbGUoKSwgdCA9IHRyYW5zbGF0ZSgpO1xuXHQgICAgICAgICAgY2xpcEV4dGVudChbIFsgdFswXSAtIGssIHRbMV0gLSBrIF0sIFsgdFswXSArIGssIHRbMV0gKyBrIF0gXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKGNsaXBBdXRvKSB7XG5cdCAgICAgICAgdiA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHY7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIG0uY2xpcEV4dGVudChudWxsKTtcblx0ICB9XG5cdCAgKGQzLmdlby5tZXJjYXRvciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2dlb19tZXJjYXRvclByb2plY3Rpb24oZDNfZ2VvX21lcmNhdG9yKTtcblx0ICB9KS5yYXcgPSBkM19nZW9fbWVyY2F0b3I7XG5cdCAgdmFyIGQzX2dlb19vcnRob2dyYXBoaWMgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIDE7XG5cdCAgfSwgTWF0aC5hc2luKTtcblx0ICAoZDMuZ2VvLm9ydGhvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19vcnRob2dyYXBoaWMpO1xuXHQgIH0pLnJhdyA9IGQzX2dlb19vcnRob2dyYXBoaWM7XG5cdCAgdmFyIGQzX2dlb19zdGVyZW9ncmFwaGljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG5cdCAgICByZXR1cm4gMSAvICgxICsgY29zzrtjb3PPhik7XG5cdCAgfSwgZnVuY3Rpb24oz4EpIHtcblx0ICAgIHJldHVybiAyICogTWF0aC5hdGFuKM+BKTtcblx0ICB9KTtcblx0ICAoZDMuZ2VvLnN0ZXJlb2dyYXBoaWMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fc3RlcmVvZ3JhcGhpYyk7XG5cdCAgfSkucmF3ID0gZDNfZ2VvX3N0ZXJlb2dyYXBoaWM7XG5cdCAgZnVuY3Rpb24gZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvcijOuywgz4YpIHtcblx0ICAgIHJldHVybiBbIE1hdGgubG9nKE1hdGgudGFuKM+AIC8gNCArIM+GIC8gMikpLCAtzrsgXTtcblx0ICB9XG5cdCAgZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvci5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICByZXR1cm4gWyAteSwgMiAqIE1hdGguYXRhbihNYXRoLmV4cCh4KSkgLSBoYWxmz4AgXTtcblx0ICB9O1xuXHQgIChkMy5nZW8udHJhbnN2ZXJzZU1lcmNhdG9yID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgcHJvamVjdGlvbiA9IGQzX2dlb19tZXJjYXRvclByb2plY3Rpb24oZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvciksIGNlbnRlciA9IHByb2plY3Rpb24uY2VudGVyLCByb3RhdGUgPSBwcm9qZWN0aW9uLnJvdGF0ZTtcblx0ICAgIHByb2plY3Rpb24uY2VudGVyID0gZnVuY3Rpb24oXykge1xuXHQgICAgICByZXR1cm4gXyA/IGNlbnRlcihbIC1fWzFdLCBfWzBdIF0pIDogKF8gPSBjZW50ZXIoKSwgWyBfWzFdLCAtX1swXSBdKTtcblx0ICAgIH07XG5cdCAgICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgcmV0dXJuIF8gPyByb3RhdGUoWyBfWzBdLCBfWzFdLCBfLmxlbmd0aCA+IDIgPyBfWzJdICsgOTAgOiA5MCBdKSA6IChfID0gcm90YXRlKCksIFxuXHQgICAgICBbIF9bMF0sIF9bMV0sIF9bMl0gLSA5MCBdKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gcm90YXRlKFsgMCwgMCwgOTAgXSk7XG5cdCAgfSkucmF3ID0gZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvcjtcblx0ICBkMy5nZW9tID0ge307XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV9wb2ludFgoZCkge1xuXHQgICAgcmV0dXJuIGRbMF07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fcG9pbnRZKGQpIHtcblx0ICAgIHJldHVybiBkWzFdO1xuXHQgIH1cblx0ICBkMy5nZW9tLmh1bGwgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuXHQgICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBodWxsKHZlcnRpY2VzKTtcblx0ICAgIGZ1bmN0aW9uIGh1bGwoZGF0YSkge1xuXHQgICAgICBpZiAoZGF0YS5sZW5ndGggPCAzKSByZXR1cm4gW107XG5cdCAgICAgIHZhciBmeCA9IGQzX2Z1bmN0b3IoeCksIGZ5ID0gZDNfZnVuY3Rvcih5KSwgaSwgbiA9IGRhdGEubGVuZ3RoLCBwb2ludHMgPSBbXSwgZmxpcHBlZFBvaW50cyA9IFtdO1xuXHQgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG5cdCAgICAgICAgcG9pbnRzLnB1c2goWyArZnguY2FsbCh0aGlzLCBkYXRhW2ldLCBpKSwgK2Z5LmNhbGwodGhpcywgZGF0YVtpXSwgaSksIGkgXSk7XG5cdCAgICAgIH1cblx0ICAgICAgcG9pbnRzLnNvcnQoZDNfZ2VvbV9odWxsT3JkZXIpO1xuXHQgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBmbGlwcGVkUG9pbnRzLnB1c2goWyBwb2ludHNbaV1bMF0sIC1wb2ludHNbaV1bMV0gXSk7XG5cdCAgICAgIHZhciB1cHBlciA9IGQzX2dlb21faHVsbFVwcGVyKHBvaW50cyksIGxvd2VyID0gZDNfZ2VvbV9odWxsVXBwZXIoZmxpcHBlZFBvaW50cyk7XG5cdCAgICAgIHZhciBza2lwTGVmdCA9IGxvd2VyWzBdID09PSB1cHBlclswXSwgc2tpcFJpZ2h0ID0gbG93ZXJbbG93ZXIubGVuZ3RoIC0gMV0gPT09IHVwcGVyW3VwcGVyLmxlbmd0aCAtIDFdLCBwb2x5Z29uID0gW107XG5cdCAgICAgIGZvciAoaSA9IHVwcGVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBwb2x5Z29uLnB1c2goZGF0YVtwb2ludHNbdXBwZXJbaV1dWzJdXSk7XG5cdCAgICAgIGZvciAoaSA9ICtza2lwTGVmdDsgaSA8IGxvd2VyLmxlbmd0aCAtIHNraXBSaWdodDsgKytpKSBwb2x5Z29uLnB1c2goZGF0YVtwb2ludHNbbG93ZXJbaV1dWzJdXSk7XG5cdCAgICAgIHJldHVybiBwb2x5Z29uO1xuXHQgICAgfVxuXHQgICAgaHVsbC54ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gXywgaHVsbCkgOiB4O1xuXHQgICAgfTtcblx0ICAgIGh1bGwueSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IF8sIGh1bGwpIDogeTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gaHVsbDtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb21faHVsbFVwcGVyKHBvaW50cykge1xuXHQgICAgdmFyIG4gPSBwb2ludHMubGVuZ3RoLCBodWxsID0gWyAwLCAxIF0sIGhzID0gMjtcblx0ICAgIGZvciAodmFyIGkgPSAyOyBpIDwgbjsgaSsrKSB7XG5cdCAgICAgIHdoaWxlIChocyA+IDEgJiYgZDNfY3Jvc3MyZChwb2ludHNbaHVsbFtocyAtIDJdXSwgcG9pbnRzW2h1bGxbaHMgLSAxXV0sIHBvaW50c1tpXSkgPD0gMCkgLS1ocztcblx0ICAgICAgaHVsbFtocysrXSA9IGk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaHVsbC5zbGljZSgwLCBocyk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21faHVsbE9yZGVyKGEsIGIpIHtcblx0ICAgIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcblx0ICB9XG5cdCAgZDMuZ2VvbS5wb2x5Z29uID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcblx0ICAgIGQzX3N1YmNsYXNzKGNvb3JkaW5hdGVzLCBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUpO1xuXHQgICAgcmV0dXJuIGNvb3JkaW5hdGVzO1xuXHQgIH07XG5cdCAgdmFyIGQzX2dlb21fcG9seWdvblByb3RvdHlwZSA9IGQzLmdlb20ucG9seWdvbi5wcm90b3R5cGUgPSBbXTtcblx0ICBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUuYXJlYSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoLCBhLCBiID0gdGhpc1tuIC0gMV0sIGFyZWEgPSAwO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgYSA9IGI7XG5cdCAgICAgIGIgPSB0aGlzW2ldO1xuXHQgICAgICBhcmVhICs9IGFbMV0gKiBiWzBdIC0gYVswXSAqIGJbMV07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gYXJlYSAqIC41O1xuXHQgIH07XG5cdCAgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlLmNlbnRyb2lkID0gZnVuY3Rpb24oaykge1xuXHQgICAgdmFyIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoLCB4ID0gMCwgeSA9IDAsIGEsIGIgPSB0aGlzW24gLSAxXSwgYztcblx0ICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgayA9IC0xIC8gKDYgKiB0aGlzLmFyZWEoKSk7XG5cdCAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICBhID0gYjtcblx0ICAgICAgYiA9IHRoaXNbaV07XG5cdCAgICAgIGMgPSBhWzBdICogYlsxXSAtIGJbMF0gKiBhWzFdO1xuXHQgICAgICB4ICs9IChhWzBdICsgYlswXSkgKiBjO1xuXHQgICAgICB5ICs9IChhWzFdICsgYlsxXSkgKiBjO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFsgeCAqIGssIHkgKiBrIF07XG5cdCAgfTtcblx0ICBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUuY2xpcCA9IGZ1bmN0aW9uKHN1YmplY3QpIHtcblx0ICAgIHZhciBpbnB1dCwgY2xvc2VkID0gZDNfZ2VvbV9wb2x5Z29uQ2xvc2VkKHN1YmplY3QpLCBpID0gLTEsIG4gPSB0aGlzLmxlbmd0aCAtIGQzX2dlb21fcG9seWdvbkNsb3NlZCh0aGlzKSwgaiwgbSwgYSA9IHRoaXNbbiAtIDFdLCBiLCBjLCBkO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgaW5wdXQgPSBzdWJqZWN0LnNsaWNlKCk7XG5cdCAgICAgIHN1YmplY3QubGVuZ3RoID0gMDtcblx0ICAgICAgYiA9IHRoaXNbaV07XG5cdCAgICAgIGMgPSBpbnB1dFsobSA9IGlucHV0Lmxlbmd0aCAtIGNsb3NlZCkgLSAxXTtcblx0ICAgICAgaiA9IC0xO1xuXHQgICAgICB3aGlsZSAoKytqIDwgbSkge1xuXHQgICAgICAgIGQgPSBpbnB1dFtqXTtcblx0ICAgICAgICBpZiAoZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKGQsIGEsIGIpKSB7XG5cdCAgICAgICAgICBpZiAoIWQzX2dlb21fcG9seWdvbkluc2lkZShjLCBhLCBiKSkge1xuXHQgICAgICAgICAgICBzdWJqZWN0LnB1c2goZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHN1YmplY3QucHVzaChkKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGQzX2dlb21fcG9seWdvbkluc2lkZShjLCBhLCBiKSkge1xuXHQgICAgICAgICAgc3ViamVjdC5wdXNoKGQzX2dlb21fcG9seWdvbkludGVyc2VjdChjLCBkLCBhLCBiKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGMgPSBkO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChjbG9zZWQpIHN1YmplY3QucHVzaChzdWJqZWN0WzBdKTtcblx0ICAgICAgYSA9IGI7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gc3ViamVjdDtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb21fcG9seWdvbkluc2lkZShwLCBhLCBiKSB7XG5cdCAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChwWzFdIC0gYVsxXSkgPCAoYlsxXSAtIGFbMV0pICogKHBbMF0gLSBhWzBdKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpIHtcblx0ICAgIHZhciB4MSA9IGNbMF0sIHgzID0gYVswXSwgeDIxID0gZFswXSAtIHgxLCB4NDMgPSBiWzBdIC0geDMsIHkxID0gY1sxXSwgeTMgPSBhWzFdLCB5MjEgPSBkWzFdIC0geTEsIHk0MyA9IGJbMV0gLSB5MywgdWEgPSAoeDQzICogKHkxIC0geTMpIC0geTQzICogKHgxIC0geDMpKSAvICh5NDMgKiB4MjEgLSB4NDMgKiB5MjEpO1xuXHQgICAgcmV0dXJuIFsgeDEgKyB1YSAqIHgyMSwgeTEgKyB1YSAqIHkyMSBdO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25DbG9zZWQoY29vcmRpbmF0ZXMpIHtcblx0ICAgIHZhciBhID0gY29vcmRpbmF0ZXNbMF0sIGIgPSBjb29yZGluYXRlc1tjb29yZGluYXRlcy5sZW5ndGggLSAxXTtcblx0ICAgIHJldHVybiAhKGFbMF0gLSBiWzBdIHx8IGFbMV0gLSBiWzFdKTtcblx0ICB9XG5cdCAgdmFyIGQzX2dlb21fdm9yb25vaUVkZ2VzLCBkM19nZW9tX3Zvcm9ub2lDZWxscywgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcywgZDNfZ2VvbV92b3Jvbm9pQmVhY2hQb29sID0gW10sIGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlLCBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzLCBkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sID0gW107XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQmVhY2goKSB7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUodGhpcyk7XG5cdCAgICB0aGlzLmVkZ2UgPSB0aGlzLnNpdGUgPSB0aGlzLmNpcmNsZSA9IG51bGw7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNyZWF0ZUJlYWNoKHNpdGUpIHtcblx0ICAgIHZhciBiZWFjaCA9IGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbC5wb3AoKSB8fCBuZXcgZDNfZ2VvbV92b3Jvbm9pQmVhY2goKTtcblx0ICAgIGJlYWNoLnNpdGUgPSBzaXRlO1xuXHQgICAgcmV0dXJuIGJlYWNoO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaChiZWFjaCkge1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGJlYWNoKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUJlYWNoZXMucmVtb3ZlKGJlYWNoKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShiZWFjaCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlbW92ZUJlYWNoKGJlYWNoKSB7XG5cdCAgICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLCB4ID0gY2lyY2xlLngsIHkgPSBjaXJjbGUuY3ksIHZlcnRleCA9IHtcblx0ICAgICAgeDogeCxcblx0ICAgICAgeTogeVxuXHQgICAgfSwgcHJldmlvdXMgPSBiZWFjaC5QLCBuZXh0ID0gYmVhY2guTiwgZGlzYXBwZWFyaW5nID0gWyBiZWFjaCBdO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQmVhY2goYmVhY2gpO1xuXHQgICAgdmFyIGxBcmMgPSBwcmV2aW91cztcblx0ICAgIHdoaWxlIChsQXJjLmNpcmNsZSAmJiBhYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgzrUgJiYgYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCDOtSkge1xuXHQgICAgICBwcmV2aW91cyA9IGxBcmMuUDtcblx0ICAgICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG5cdCAgICAgIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGxBcmMpO1xuXHQgICAgICBsQXJjID0gcHJldmlvdXM7XG5cdCAgICB9XG5cdCAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShsQXJjKTtcblx0ICAgIHZhciByQXJjID0gbmV4dDtcblx0ICAgIHdoaWxlIChyQXJjLmNpcmNsZSAmJiBhYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgzrUgJiYgYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCDOtSkge1xuXHQgICAgICBuZXh0ID0gckFyYy5OO1xuXHQgICAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQmVhY2gockFyYyk7XG5cdCAgICAgIHJBcmMgPSBuZXh0O1xuXHQgICAgfVxuXHQgICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUockFyYyk7XG5cdCAgICB2YXIgbkFyY3MgPSBkaXNhcHBlYXJpbmcubGVuZ3RoLCBpQXJjO1xuXHQgICAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcblx0ICAgICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcblx0ICAgICAgbEFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjIC0gMV07XG5cdCAgICAgIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcblx0ICAgIH1cblx0ICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG5cdCAgICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG5cdCAgICByQXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxBcmMuc2l0ZSwgckFyYy5zaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGxBcmMpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKHJBcmMpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaChzaXRlKSB7XG5cdCAgICB2YXIgeCA9IHNpdGUueCwgZGlyZWN0cml4ID0gc2l0ZS55LCBsQXJjLCByQXJjLCBkeGwsIGR4ciwgbm9kZSA9IGQzX2dlb21fdm9yb25vaUJlYWNoZXMuXztcblx0ICAgIHdoaWxlIChub2RlKSB7XG5cdCAgICAgIGR4bCA9IGQzX2dlb21fdm9yb25vaUxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuXHQgICAgICBpZiAoZHhsID4gzrUpIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuXHQgICAgICAgIGR4ciA9IHggLSBkM19nZW9tX3Zvcm9ub2lSaWdodEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KTtcblx0ICAgICAgICBpZiAoZHhyID4gzrUpIHtcblx0ICAgICAgICAgIGlmICghbm9kZS5SKSB7XG5cdCAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIG5vZGUgPSBub2RlLlI7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGlmIChkeGwgPiAtzrUpIHtcblx0ICAgICAgICAgICAgbEFyYyA9IG5vZGUuUDtcblx0ICAgICAgICAgICAgckFyYyA9IG5vZGU7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC3OtSkge1xuXHQgICAgICAgICAgICBsQXJjID0gbm9kZTtcblx0ICAgICAgICAgICAgckFyYyA9IG5vZGUuTjtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGxBcmMgPSByQXJjID0gbm9kZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgdmFyIG5ld0FyYyA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUJlYWNoKHNpdGUpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcy5pbnNlcnQobEFyYywgbmV3QXJjKTtcblx0ICAgIGlmICghbEFyYyAmJiAhckFyYykgcmV0dXJuO1xuXHQgICAgaWYgKGxBcmMgPT09IHJBcmMpIHtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGxBcmMpO1xuXHQgICAgICByQXJjID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcy5pbnNlcnQobmV3QXJjLCByQXJjKTtcblx0ICAgICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuXHQgICAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUobEFyYyk7XG5cdCAgICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShyQXJjKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgaWYgKCFyQXJjKSB7XG5cdCAgICAgIG5ld0FyYy5lZGdlID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGxBcmMpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKHJBcmMpO1xuXHQgICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLCBheCA9IGxTaXRlLngsIGF5ID0gbFNpdGUueSwgYnggPSBzaXRlLnggLSBheCwgYnkgPSBzaXRlLnkgLSBheSwgclNpdGUgPSByQXJjLnNpdGUsIGN4ID0gclNpdGUueCAtIGF4LCBjeSA9IHJTaXRlLnkgLSBheSwgZCA9IDIgKiAoYnggKiBjeSAtIGJ5ICogY3gpLCBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LCBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LCB2ZXJ0ZXggPSB7XG5cdCAgICAgIHg6IChjeSAqIGhiIC0gYnkgKiBoYykgLyBkICsgYXgsXG5cdCAgICAgIHk6IChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXlcblx0ICAgIH07XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuXHQgICAgbmV3QXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuXHQgICAgckFyYy5lZGdlID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShzaXRlLCByU2l0ZSwgbnVsbCwgdmVydGV4KTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShsQXJjKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShyQXJjKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcblx0ICAgIHZhciBzaXRlID0gYXJjLnNpdGUsIHJmb2N4ID0gc2l0ZS54LCByZm9jeSA9IHNpdGUueSwgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuXHQgICAgaWYgKCFwYnkyKSByZXR1cm4gcmZvY3g7XG5cdCAgICB2YXIgbEFyYyA9IGFyYy5QO1xuXHQgICAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuXHQgICAgc2l0ZSA9IGxBcmMuc2l0ZTtcblx0ICAgIHZhciBsZm9jeCA9IHNpdGUueCwgbGZvY3kgPSBzaXRlLnksIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XG5cdCAgICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG5cdCAgICB2YXIgaGwgPSBsZm9jeCAtIHJmb2N4LCBhYnkyID0gMSAvIHBieTIgLSAxIC8gcGxieTIsIGIgPSBobCAvIHBsYnkyO1xuXHQgICAgaWYgKGFieTIpIHJldHVybiAoLWIgKyBNYXRoLnNxcnQoYiAqIGIgLSAyICogYWJ5MiAqIChobCAqIGhsIC8gKC0yICogcGxieTIpIC0gbGZvY3kgKyBwbGJ5MiAvIDIgKyByZm9jeSAtIHBieTIgLyAyKSkpIC8gYWJ5MiArIHJmb2N4O1xuXHQgICAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJpZ2h0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuXHQgICAgdmFyIHJBcmMgPSBhcmMuTjtcblx0ICAgIGlmIChyQXJjKSByZXR1cm4gZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcblx0ICAgIHZhciBzaXRlID0gYXJjLnNpdGU7XG5cdCAgICByZXR1cm4gc2l0ZS55ID09PSBkaXJlY3RyaXggPyBzaXRlLnggOiBJbmZpbml0eTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2VsbChzaXRlKSB7XG5cdCAgICB0aGlzLnNpdGUgPSBzaXRlO1xuXHQgICAgdGhpcy5lZGdlcyA9IFtdO1xuXHQgIH1cblx0ICBkM19nZW9tX3Zvcm9ub2lDZWxsLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaGFsZkVkZ2VzID0gdGhpcy5lZGdlcywgaUhhbGZFZGdlID0gaGFsZkVkZ2VzLmxlbmd0aCwgZWRnZTtcblx0ICAgIHdoaWxlIChpSGFsZkVkZ2UtLSkge1xuXHQgICAgICBlZGdlID0gaGFsZkVkZ2VzW2lIYWxmRWRnZV0uZWRnZTtcblx0ICAgICAgaWYgKCFlZGdlLmIgfHwgIWVkZ2UuYSkgaGFsZkVkZ2VzLnNwbGljZShpSGFsZkVkZ2UsIDEpO1xuXHQgICAgfVxuXHQgICAgaGFsZkVkZ2VzLnNvcnQoZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlcik7XG5cdCAgICByZXR1cm4gaGFsZkVkZ2VzLmxlbmd0aDtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNsb3NlQ2VsbHMoZXh0ZW50KSB7XG5cdCAgICB2YXIgeDAgPSBleHRlbnRbMF1bMF0sIHgxID0gZXh0ZW50WzFdWzBdLCB5MCA9IGV4dGVudFswXVsxXSwgeTEgPSBleHRlbnRbMV1bMV0sIHgyLCB5MiwgeDMsIHkzLCBjZWxscyA9IGQzX2dlb21fdm9yb25vaUNlbGxzLCBpQ2VsbCA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgaUhhbGZFZGdlLCBoYWxmRWRnZXMsIG5IYWxmRWRnZXMsIHN0YXJ0LCBlbmQ7XG5cdCAgICB3aGlsZSAoaUNlbGwtLSkge1xuXHQgICAgICBjZWxsID0gY2VsbHNbaUNlbGxdO1xuXHQgICAgICBpZiAoIWNlbGwgfHwgIWNlbGwucHJlcGFyZSgpKSBjb250aW51ZTtcblx0ICAgICAgaGFsZkVkZ2VzID0gY2VsbC5lZGdlcztcblx0ICAgICAgbkhhbGZFZGdlcyA9IGhhbGZFZGdlcy5sZW5ndGg7XG5cdCAgICAgIGlIYWxmRWRnZSA9IDA7XG5cdCAgICAgIHdoaWxlIChpSGFsZkVkZ2UgPCBuSGFsZkVkZ2VzKSB7XG5cdCAgICAgICAgZW5kID0gaGFsZkVkZ2VzW2lIYWxmRWRnZV0uZW5kKCksIHgzID0gZW5kLngsIHkzID0gZW5kLnk7XG5cdCAgICAgICAgc3RhcnQgPSBoYWxmRWRnZXNbKytpSGFsZkVkZ2UgJSBuSGFsZkVkZ2VzXS5zdGFydCgpLCB4MiA9IHN0YXJ0LngsIHkyID0gc3RhcnQueTtcblx0ICAgICAgICBpZiAoYWJzKHgzIC0geDIpID4gzrUgfHwgYWJzKHkzIC0geTIpID4gzrUpIHtcblx0ICAgICAgICAgIGhhbGZFZGdlcy5zcGxpY2UoaUhhbGZFZGdlLCAwLCBuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZShjZWxsLnNpdGUsIGVuZCwgYWJzKHgzIC0geDApIDwgzrUgJiYgeTEgLSB5MyA+IM61ID8ge1xuXHQgICAgICAgICAgICB4OiB4MCxcblx0ICAgICAgICAgICAgeTogYWJzKHgyIC0geDApIDwgzrUgPyB5MiA6IHkxXG5cdCAgICAgICAgICB9IDogYWJzKHkzIC0geTEpIDwgzrUgJiYgeDEgLSB4MyA+IM61ID8ge1xuXHQgICAgICAgICAgICB4OiBhYnMoeTIgLSB5MSkgPCDOtSA/IHgyIDogeDEsXG5cdCAgICAgICAgICAgIHk6IHkxXG5cdCAgICAgICAgICB9IDogYWJzKHgzIC0geDEpIDwgzrUgJiYgeTMgLSB5MCA+IM61ID8ge1xuXHQgICAgICAgICAgICB4OiB4MSxcblx0ICAgICAgICAgICAgeTogYWJzKHgyIC0geDEpIDwgzrUgPyB5MiA6IHkwXG5cdCAgICAgICAgICB9IDogYWJzKHkzIC0geTApIDwgzrUgJiYgeDMgLSB4MCA+IM61ID8ge1xuXHQgICAgICAgICAgICB4OiBhYnMoeTIgLSB5MCkgPCDOtSA/IHgyIDogeDAsXG5cdCAgICAgICAgICAgIHk6IHkwXG5cdCAgICAgICAgICB9IDogbnVsbCksIGNlbGwuc2l0ZSwgbnVsbCkpO1xuXHQgICAgICAgICAgKytuSGFsZkVkZ2VzO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZU9yZGVyKGEsIGIpIHtcblx0ICAgIHJldHVybiBiLmFuZ2xlIC0gYS5hbmdsZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlKCkge1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tOb2RlKHRoaXMpO1xuXHQgICAgdGhpcy54ID0gdGhpcy55ID0gdGhpcy5hcmMgPSB0aGlzLnNpdGUgPSB0aGlzLmN5ID0gbnVsbDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGFyYykge1xuXHQgICAgdmFyIGxBcmMgPSBhcmMuUCwgckFyYyA9IGFyYy5OO1xuXHQgICAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cdCAgICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsIGNTaXRlID0gYXJjLnNpdGUsIHJTaXRlID0gckFyYy5zaXRlO1xuXHQgICAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXHQgICAgdmFyIGJ4ID0gY1NpdGUueCwgYnkgPSBjU2l0ZS55LCBheCA9IGxTaXRlLnggLSBieCwgYXkgPSBsU2l0ZS55IC0gYnksIGN4ID0gclNpdGUueCAtIGJ4LCBjeSA9IHJTaXRlLnkgLSBieTtcblx0ICAgIHZhciBkID0gMiAqIChheCAqIGN5IC0gYXkgKiBjeCk7XG5cdCAgICBpZiAoZCA+PSAtzrUyKSByZXR1cm47XG5cdCAgICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSwgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSwgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLCB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQsIGN5ID0geSArIGJ5O1xuXHQgICAgdmFyIGNpcmNsZSA9IGQzX2dlb21fdm9yb25vaUNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IGQzX2dlb21fdm9yb25vaUNpcmNsZSgpO1xuXHQgICAgY2lyY2xlLmFyYyA9IGFyYztcblx0ICAgIGNpcmNsZS5zaXRlID0gY1NpdGU7XG5cdCAgICBjaXJjbGUueCA9IHggKyBieDtcblx0ICAgIGNpcmNsZS55ID0gY3kgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG5cdCAgICBjaXJjbGUuY3kgPSBjeTtcblx0ICAgIGFyYy5jaXJjbGUgPSBjaXJjbGU7XG5cdCAgICB2YXIgYmVmb3JlID0gbnVsbCwgbm9kZSA9IGQzX2dlb21fdm9yb25vaUNpcmNsZXMuXztcblx0ICAgIHdoaWxlIChub2RlKSB7XG5cdCAgICAgIGlmIChjaXJjbGUueSA8IG5vZGUueSB8fCBjaXJjbGUueSA9PT0gbm9kZS55ICYmIGNpcmNsZS54IDw9IG5vZGUueCkge1xuXHQgICAgICAgIGlmIChub2RlLkwpIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuXHQgICAgICAgICAgYmVmb3JlID0gbm9kZS5QO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7IGVsc2Uge1xuXHQgICAgICAgICAgYmVmb3JlID0gbm9kZTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcy5pbnNlcnQoYmVmb3JlLCBjaXJjbGUpO1xuXHQgICAgaWYgKCFiZWZvcmUpIGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlID0gY2lyY2xlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUoYXJjKSB7XG5cdCAgICB2YXIgY2lyY2xlID0gYXJjLmNpcmNsZTtcblx0ICAgIGlmIChjaXJjbGUpIHtcblx0ICAgICAgaWYgKCFjaXJjbGUuUCkgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcy5yZW1vdmUoY2lyY2xlKTtcblx0ICAgICAgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG5cdCAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShjaXJjbGUpO1xuXHQgICAgICBhcmMuY2lyY2xlID0gbnVsbDtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2xpcEVkZ2VzKGV4dGVudCkge1xuXHQgICAgdmFyIGVkZ2VzID0gZDNfZ2VvbV92b3Jvbm9pRWRnZXMsIGNsaXAgPSBkM19nZW9tX2NsaXBMaW5lKGV4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdLCBleHRlbnRbMV1bMF0sIGV4dGVudFsxXVsxXSksIGkgPSBlZGdlcy5sZW5ndGgsIGU7XG5cdCAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgIGUgPSBlZGdlc1tpXTtcblx0ICAgICAgaWYgKCFkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZShlLCBleHRlbnQpIHx8ICFjbGlwKGUpIHx8IGFicyhlLmEueCAtIGUuYi54KSA8IM61ICYmIGFicyhlLmEueSAtIGUuYi55KSA8IM61KSB7XG5cdCAgICAgICAgZS5hID0gZS5iID0gbnVsbDtcblx0ICAgICAgICBlZGdlcy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ29ubmVjdEVkZ2UoZWRnZSwgZXh0ZW50KSB7XG5cdCAgICB2YXIgdmIgPSBlZGdlLmI7XG5cdCAgICBpZiAodmIpIHJldHVybiB0cnVlO1xuXHQgICAgdmFyIHZhID0gZWRnZS5hLCB4MCA9IGV4dGVudFswXVswXSwgeDEgPSBleHRlbnRbMV1bMF0sIHkwID0gZXh0ZW50WzBdWzFdLCB5MSA9IGV4dGVudFsxXVsxXSwgbFNpdGUgPSBlZGdlLmwsIHJTaXRlID0gZWRnZS5yLCBseCA9IGxTaXRlLngsIGx5ID0gbFNpdGUueSwgcnggPSByU2l0ZS54LCByeSA9IHJTaXRlLnksIGZ4ID0gKGx4ICsgcngpIC8gMiwgZnkgPSAobHkgKyByeSkgLyAyLCBmbSwgZmI7XG5cdCAgICBpZiAocnkgPT09IGx5KSB7XG5cdCAgICAgIGlmIChmeCA8IHgwIHx8IGZ4ID49IHgxKSByZXR1cm47XG5cdCAgICAgIGlmIChseCA+IHJ4KSB7XG5cdCAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG5cdCAgICAgICAgICB4OiBmeCxcblx0ICAgICAgICAgIHk6IHkwXG5cdCAgICAgICAgfTsgZWxzZSBpZiAodmEueSA+PSB5MSkgcmV0dXJuO1xuXHQgICAgICAgIHZiID0ge1xuXHQgICAgICAgICAgeDogZngsXG5cdCAgICAgICAgICB5OiB5MVxuXHQgICAgICAgIH07XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG5cdCAgICAgICAgICB4OiBmeCxcblx0ICAgICAgICAgIHk6IHkxXG5cdCAgICAgICAgfTsgZWxzZSBpZiAodmEueSA8IHkwKSByZXR1cm47XG5cdCAgICAgICAgdmIgPSB7XG5cdCAgICAgICAgICB4OiBmeCxcblx0ICAgICAgICAgIHk6IHkwXG5cdCAgICAgICAgfTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZm0gPSAobHggLSByeCkgLyAocnkgLSBseSk7XG5cdCAgICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuXHQgICAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcblx0ICAgICAgICBpZiAobHggPiByeCkge1xuXHQgICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG5cdCAgICAgICAgICAgIHg6ICh5MCAtIGZiKSAvIGZtLFxuXHQgICAgICAgICAgICB5OiB5MFxuXHQgICAgICAgICAgfTsgZWxzZSBpZiAodmEueSA+PSB5MSkgcmV0dXJuO1xuXHQgICAgICAgICAgdmIgPSB7XG5cdCAgICAgICAgICAgIHg6ICh5MSAtIGZiKSAvIGZtLFxuXHQgICAgICAgICAgICB5OiB5MVxuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG5cdCAgICAgICAgICAgIHg6ICh5MSAtIGZiKSAvIGZtLFxuXHQgICAgICAgICAgICB5OiB5MVxuXHQgICAgICAgICAgfTsgZWxzZSBpZiAodmEueSA8IHkwKSByZXR1cm47XG5cdCAgICAgICAgICB2YiA9IHtcblx0ICAgICAgICAgICAgeDogKHkwIC0gZmIpIC8gZm0sXG5cdCAgICAgICAgICAgIHk6IHkwXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAobHkgPCByeSkge1xuXHQgICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG5cdCAgICAgICAgICAgIHg6IHgwLFxuXHQgICAgICAgICAgICB5OiBmbSAqIHgwICsgZmJcblx0ICAgICAgICAgIH07IGVsc2UgaWYgKHZhLnggPj0geDEpIHJldHVybjtcblx0ICAgICAgICAgIHZiID0ge1xuXHQgICAgICAgICAgICB4OiB4MSxcblx0ICAgICAgICAgICAgeTogZm0gKiB4MSArIGZiXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcblx0ICAgICAgICAgICAgeDogeDEsXG5cdCAgICAgICAgICAgIHk6IGZtICogeDEgKyBmYlxuXHQgICAgICAgICAgfTsgZWxzZSBpZiAodmEueCA8IHgwKSByZXR1cm47XG5cdCAgICAgICAgICB2YiA9IHtcblx0ICAgICAgICAgICAgeDogeDAsXG5cdCAgICAgICAgICAgIHk6IGZtICogeDAgKyBmYlxuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGVkZ2UuYSA9IHZhO1xuXHQgICAgZWRnZS5iID0gdmI7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pRWRnZShsU2l0ZSwgclNpdGUpIHtcblx0ICAgIHRoaXMubCA9IGxTaXRlO1xuXHQgICAgdGhpcy5yID0gclNpdGU7XG5cdCAgICB0aGlzLmEgPSB0aGlzLmIgPSBudWxsO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxTaXRlLCByU2l0ZSwgdmEsIHZiKSB7XG5cdCAgICB2YXIgZWRnZSA9IG5ldyBkM19nZW9tX3Zvcm9ub2lFZGdlKGxTaXRlLCByU2l0ZSk7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lFZGdlcy5wdXNoKGVkZ2UpO1xuXHQgICAgaWYgKHZhKSBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKGVkZ2UsIGxTaXRlLCByU2l0ZSwgdmEpO1xuXHQgICAgaWYgKHZiKSBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKGVkZ2UsIHJTaXRlLCBsU2l0ZSwgdmIpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHNbbFNpdGUuaV0uZWRnZXMucHVzaChuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgbFNpdGUsIHJTaXRlKSk7XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lDZWxsc1tyU2l0ZS5pXS5lZGdlcy5wdXNoKG5ldyBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZShlZGdlLCByU2l0ZSwgbFNpdGUpKTtcblx0ICAgIHJldHVybiBlZGdlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDcmVhdGVCb3JkZXJFZGdlKGxTaXRlLCB2YSwgdmIpIHtcblx0ICAgIHZhciBlZGdlID0gbmV3IGQzX2dlb21fdm9yb25vaUVkZ2UobFNpdGUsIG51bGwpO1xuXHQgICAgZWRnZS5hID0gdmE7XG5cdCAgICBlZGdlLmIgPSB2Yjtcblx0ICAgIGQzX2dlb21fdm9yb25vaUVkZ2VzLnB1c2goZWRnZSk7XG5cdCAgICByZXR1cm4gZWRnZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZChlZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCkge1xuXHQgICAgaWYgKCFlZGdlLmEgJiYgIWVkZ2UuYikge1xuXHQgICAgICBlZGdlLmEgPSB2ZXJ0ZXg7XG5cdCAgICAgIGVkZ2UubCA9IGxTaXRlO1xuXHQgICAgICBlZGdlLnIgPSByU2l0ZTtcblx0ICAgIH0gZWxzZSBpZiAoZWRnZS5sID09PSByU2l0ZSkge1xuXHQgICAgICBlZGdlLmIgPSB2ZXJ0ZXg7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBlZGdlLmEgPSB2ZXJ0ZXg7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUhhbGZFZGdlKGVkZ2UsIGxTaXRlLCByU2l0ZSkge1xuXHQgICAgdmFyIHZhID0gZWRnZS5hLCB2YiA9IGVkZ2UuYjtcblx0ICAgIHRoaXMuZWRnZSA9IGVkZ2U7XG5cdCAgICB0aGlzLnNpdGUgPSBsU2l0ZTtcblx0ICAgIHRoaXMuYW5nbGUgPSByU2l0ZSA/IE1hdGguYXRhbjIoclNpdGUueSAtIGxTaXRlLnksIHJTaXRlLnggLSBsU2l0ZS54KSA6IGVkZ2UubCA9PT0gbFNpdGUgPyBNYXRoLmF0YW4yKHZiLnggLSB2YS54LCB2YS55IC0gdmIueSkgOiBNYXRoLmF0YW4yKHZhLnggLSB2Yi54LCB2Yi55IC0gdmEueSk7XG5cdCAgfVxuXHQgIGQzX2dlb21fdm9yb25vaUhhbGZFZGdlLnByb3RvdHlwZSA9IHtcblx0ICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZWRnZS5sID09PSB0aGlzLnNpdGUgPyB0aGlzLmVkZ2UuYSA6IHRoaXMuZWRnZS5iO1xuXHQgICAgfSxcblx0ICAgIGVuZDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmVkZ2UubCA9PT0gdGhpcy5zaXRlID8gdGhpcy5lZGdlLmIgOiB0aGlzLmVkZ2UuYTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpIHtcblx0ICAgIHRoaXMuXyA9IG51bGw7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShub2RlKSB7XG5cdCAgICBub2RlLlUgPSBub2RlLkMgPSBub2RlLkwgPSBub2RlLlIgPSBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuXHQgIH1cblx0ICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUucHJvdG90eXBlID0ge1xuXHQgICAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuXHQgICAgICB2YXIgcGFyZW50LCBncmFuZHBhLCB1bmNsZTtcblx0ICAgICAgaWYgKGFmdGVyKSB7XG5cdCAgICAgICAgbm9kZS5QID0gYWZ0ZXI7XG5cdCAgICAgICAgbm9kZS5OID0gYWZ0ZXIuTjtcblx0ICAgICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcblx0ICAgICAgICBhZnRlci5OID0gbm9kZTtcblx0ICAgICAgICBpZiAoYWZ0ZXIuUikge1xuXHQgICAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuXHQgICAgICAgICAgd2hpbGUgKGFmdGVyLkwpIGFmdGVyID0gYWZ0ZXIuTDtcblx0ICAgICAgICAgIGFmdGVyLkwgPSBub2RlO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBhZnRlci5SID0gbm9kZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG5cdCAgICAgIH0gZWxzZSBpZiAodGhpcy5fKSB7XG5cdCAgICAgICAgYWZ0ZXIgPSBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG5cdCAgICAgICAgbm9kZS5QID0gbnVsbDtcblx0ICAgICAgICBub2RlLk4gPSBhZnRlcjtcblx0ICAgICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG5cdCAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl8gPSBub2RlO1xuXHQgICAgICAgIHBhcmVudCA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcblx0ICAgICAgbm9kZS5VID0gcGFyZW50O1xuXHQgICAgICBub2RlLkMgPSB0cnVlO1xuXHQgICAgICBhZnRlciA9IG5vZGU7XG5cdCAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcblx0ICAgICAgICBncmFuZHBhID0gcGFyZW50LlU7XG5cdCAgICAgICAgaWYgKHBhcmVudCA9PT0gZ3JhbmRwYS5MKSB7XG5cdCAgICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcblx0ICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG5cdCAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuXHQgICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuXHQgICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG5cdCAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG5cdCAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG5cdCAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuXHQgICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuXHQgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcblx0ICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG5cdCAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuXHQgICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuXHQgICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XG5cdCAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuXHQgICAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuXHQgICAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcblx0ICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcblx0ICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIGdyYW5kcGEpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuXy5DID0gZmFsc2U7XG5cdCAgICB9LFxuXHQgICAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgIGlmIChub2RlLk4pIG5vZGUuTi5QID0gbm9kZS5QO1xuXHQgICAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcblx0ICAgICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcblx0ICAgICAgdmFyIHBhcmVudCA9IG5vZGUuVSwgc2libGluZywgbGVmdCA9IG5vZGUuTCwgcmlnaHQgPSBub2RlLlIsIG5leHQsIHJlZDtcblx0ICAgICAgaWYgKCFsZWZ0KSBuZXh0ID0gcmlnaHQ7IGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7IGVsc2UgbmV4dCA9IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXHQgICAgICBpZiAocGFyZW50KSB7XG5cdCAgICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7IGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuXyA9IG5leHQ7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcblx0ICAgICAgICByZWQgPSBuZXh0LkM7XG5cdCAgICAgICAgbmV4dC5DID0gbm9kZS5DO1xuXHQgICAgICAgIG5leHQuTCA9IGxlZnQ7XG5cdCAgICAgICAgbGVmdC5VID0gbmV4dDtcblx0ICAgICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcblx0ICAgICAgICAgIHBhcmVudCA9IG5leHQuVTtcblx0ICAgICAgICAgIG5leHQuVSA9IG5vZGUuVTtcblx0ICAgICAgICAgIG5vZGUgPSBuZXh0LlI7XG5cdCAgICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XG5cdCAgICAgICAgICBuZXh0LlIgPSByaWdodDtcblx0ICAgICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBuZXh0LlUgPSBwYXJlbnQ7XG5cdCAgICAgICAgICBwYXJlbnQgPSBuZXh0O1xuXHQgICAgICAgICAgbm9kZSA9IG5leHQuUjtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmVkID0gbm9kZS5DO1xuXHQgICAgICAgIG5vZGUgPSBuZXh0O1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG5cdCAgICAgIGlmIChyZWQpIHJldHVybjtcblx0ICAgICAgaWYgKG5vZGUgJiYgbm9kZS5DKSB7XG5cdCAgICAgICAgbm9kZS5DID0gZmFsc2U7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdCAgICAgIGRvIHtcblx0ICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5fKSBicmVhaztcblx0ICAgICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcblx0ICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcblx0ICAgICAgICAgIGlmIChzaWJsaW5nLkMpIHtcblx0ICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcblx0ICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG5cdCAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChzaWJsaW5nLkwgJiYgc2libGluZy5MLkMgfHwgc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSB7XG5cdCAgICAgICAgICAgIGlmICghc2libGluZy5SIHx8ICFzaWJsaW5nLlIuQykge1xuXHQgICAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHNpYmxpbmcpO1xuXHQgICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcblx0ICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuXHQgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcblx0ICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcblx0ICAgICAgICAgIGlmIChzaWJsaW5nLkMpIHtcblx0ICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcblx0ICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuXHQgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoc2libGluZy5MICYmIHNpYmxpbmcuTC5DIHx8IHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykge1xuXHQgICAgICAgICAgICBpZiAoIXNpYmxpbmcuTCB8fCAhc2libGluZy5MLkMpIHtcblx0ICAgICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG5cdCAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHNpYmxpbmcpO1xuXHQgICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcblx0ICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuXHQgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG5cdCAgICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuXHQgICAgICAgIG5vZGUgPSBwYXJlbnQ7XG5cdCAgICAgICAgcGFyZW50ID0gcGFyZW50LlU7XG5cdCAgICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXHQgICAgICBpZiAobm9kZSkgbm9kZS5DID0gZmFsc2U7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodHJlZSwgbm9kZSkge1xuXHQgICAgdmFyIHAgPSBub2RlLCBxID0gbm9kZS5SLCBwYXJlbnQgPSBwLlU7XG5cdCAgICBpZiAocGFyZW50KSB7XG5cdCAgICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxOyBlbHNlIHBhcmVudC5SID0gcTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRyZWUuXyA9IHE7XG5cdCAgICB9XG5cdCAgICBxLlUgPSBwYXJlbnQ7XG5cdCAgICBwLlUgPSBxO1xuXHQgICAgcC5SID0gcS5MO1xuXHQgICAgaWYgKHAuUikgcC5SLlUgPSBwO1xuXHQgICAgcS5MID0gcDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0cmVlLCBub2RlKSB7XG5cdCAgICB2YXIgcCA9IG5vZGUsIHEgPSBub2RlLkwsIHBhcmVudCA9IHAuVTtcblx0ICAgIGlmIChwYXJlbnQpIHtcblx0ICAgICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7IGVsc2UgcGFyZW50LlIgPSBxO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdHJlZS5fID0gcTtcblx0ICAgIH1cblx0ICAgIHEuVSA9IHBhcmVudDtcblx0ICAgIHAuVSA9IHE7XG5cdCAgICBwLkwgPSBxLlI7XG5cdCAgICBpZiAocC5MKSBwLkwuVSA9IHA7XG5cdCAgICBxLlIgPSBwO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja0ZpcnN0KG5vZGUpIHtcblx0ICAgIHdoaWxlIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG5cdCAgICByZXR1cm4gbm9kZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pKHNpdGVzLCBiYm94KSB7XG5cdCAgICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQoZDNfZ2VvbV92b3Jvbm9pVmVydGV4T3JkZXIpLnBvcCgpLCB4MCwgeTAsIGNpcmNsZTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUVkZ2VzID0gW107XG5cdCAgICBkM19nZW9tX3Zvcm9ub2lDZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyA9IG5ldyBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUoKTtcblx0ICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tUcmVlKCk7XG5cdCAgICB3aGlsZSAodHJ1ZSkge1xuXHQgICAgICBjaXJjbGUgPSBkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZTtcblx0ICAgICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZS55IDwgY2lyY2xlLnkgfHwgc2l0ZS55ID09PSBjaXJjbGUueSAmJiBzaXRlLnggPCBjaXJjbGUueCkpIHtcblx0ICAgICAgICBpZiAoc2l0ZS54ICE9PSB4MCB8fCBzaXRlLnkgIT09IHkwKSB7XG5cdCAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lDZWxsc1tzaXRlLmldID0gbmV3IGQzX2dlb21fdm9yb25vaUNlbGwoc2l0ZSk7XG5cdCAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaChzaXRlKTtcblx0ICAgICAgICAgIHgwID0gc2l0ZS54LCB5MCA9IHNpdGUueTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuXHQgICAgICB9IGVsc2UgaWYgKGNpcmNsZSkge1xuXHQgICAgICAgIGQzX2dlb21fdm9yb25vaVJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoYmJveCkgZDNfZ2VvbV92b3Jvbm9pQ2xpcEVkZ2VzKGJib3gpLCBkM19nZW9tX3Zvcm9ub2lDbG9zZUNlbGxzKGJib3gpO1xuXHQgICAgdmFyIGRpYWdyYW0gPSB7XG5cdCAgICAgIGNlbGxzOiBkM19nZW9tX3Zvcm9ub2lDZWxscyxcblx0ICAgICAgZWRnZXM6IGQzX2dlb21fdm9yb25vaUVkZ2VzXG5cdCAgICB9O1xuXHQgICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyA9IGQzX2dlb21fdm9yb25vaUNpcmNsZXMgPSBkM19nZW9tX3Zvcm9ub2lFZGdlcyA9IGQzX2dlb21fdm9yb25vaUNlbGxzID0gbnVsbDtcblx0ICAgIHJldHVybiBkaWFncmFtO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcihhLCBiKSB7XG5cdCAgICByZXR1cm4gYi55IC0gYS55IHx8IGIueCAtIGEueDtcblx0ICB9XG5cdCAgZDMuZ2VvbS52b3Jvbm9pID0gZnVuY3Rpb24ocG9pbnRzKSB7XG5cdCAgICB2YXIgeCA9IGQzX2dlb21fcG9pbnRYLCB5ID0gZDNfZ2VvbV9wb2ludFksIGZ4ID0geCwgZnkgPSB5LCBjbGlwRXh0ZW50ID0gZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudDtcblx0ICAgIGlmIChwb2ludHMpIHJldHVybiB2b3Jvbm9pKHBvaW50cyk7XG5cdCAgICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcblx0ICAgICAgdmFyIHBvbHlnb25zID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKSwgeDAgPSBjbGlwRXh0ZW50WzBdWzBdLCB5MCA9IGNsaXBFeHRlbnRbMF1bMV0sIHgxID0gY2xpcEV4dGVudFsxXVswXSwgeTEgPSBjbGlwRXh0ZW50WzFdWzFdO1xuXHQgICAgICBkM19nZW9tX3Zvcm9ub2koc2l0ZXMoZGF0YSksIGNsaXBFeHRlbnQpLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgaSkge1xuXHQgICAgICAgIHZhciBlZGdlcyA9IGNlbGwuZWRnZXMsIHNpdGUgPSBjZWxsLnNpdGUsIHBvbHlnb24gPSBwb2x5Z29uc1tpXSA9IGVkZ2VzLmxlbmd0aCA/IGVkZ2VzLm1hcChmdW5jdGlvbihlKSB7XG5cdCAgICAgICAgICB2YXIgcyA9IGUuc3RhcnQoKTtcblx0ICAgICAgICAgIHJldHVybiBbIHMueCwgcy55IF07XG5cdCAgICAgICAgfSkgOiBzaXRlLnggPj0geDAgJiYgc2l0ZS54IDw9IHgxICYmIHNpdGUueSA+PSB5MCAmJiBzaXRlLnkgPD0geTEgPyBbIFsgeDAsIHkxIF0sIFsgeDEsIHkxIF0sIFsgeDEsIHkwIF0sIFsgeDAsIHkwIF0gXSA6IFtdO1xuXHQgICAgICAgIHBvbHlnb24ucG9pbnQgPSBkYXRhW2ldO1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIHBvbHlnb25zO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc2l0ZXMoZGF0YSkge1xuXHQgICAgICByZXR1cm4gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICB4OiBNYXRoLnJvdW5kKGZ4KGQsIGkpIC8gzrUpICogzrUsXG5cdCAgICAgICAgICB5OiBNYXRoLnJvdW5kKGZ5KGQsIGkpIC8gzrUpICogzrUsXG5cdCAgICAgICAgICBpOiBpXG5cdCAgICAgICAgfTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICByZXR1cm4gZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpKS5lZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkge1xuXHQgICAgICAgIHJldHVybiBlZGdlLmwgJiYgZWRnZS5yO1xuXHQgICAgICB9KS5tYXAoZnVuY3Rpb24oZWRnZSkge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICBzb3VyY2U6IGRhdGFbZWRnZS5sLmldLFxuXHQgICAgICAgICAgdGFyZ2V0OiBkYXRhW2VkZ2Uuci5pXVxuXHQgICAgICAgIH07XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICB2YXIgdHJpYW5nbGVzID0gW107XG5cdCAgICAgIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSkuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG5cdCAgICAgICAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsIGVkZ2VzID0gY2VsbC5lZGdlcy5zb3J0KGQzX2dlb21fdm9yb25vaUhhbGZFZGdlT3JkZXIpLCBqID0gLTEsIG0gPSBlZGdlcy5sZW5ndGgsIGUwLCBzMCwgZTEgPSBlZGdlc1ttIC0gMV0uZWRnZSwgczEgPSBlMS5sID09PSBzaXRlID8gZTEuciA6IGUxLmw7XG5cdCAgICAgICAgd2hpbGUgKCsraiA8IG0pIHtcblx0ICAgICAgICAgIGUwID0gZTE7XG5cdCAgICAgICAgICBzMCA9IHMxO1xuXHQgICAgICAgICAgZTEgPSBlZGdlc1tqXS5lZGdlO1xuXHQgICAgICAgICAgczEgPSBlMS5sID09PSBzaXRlID8gZTEuciA6IGUxLmw7XG5cdCAgICAgICAgICBpZiAoaSA8IHMwLmkgJiYgaSA8IHMxLmkgJiYgZDNfZ2VvbV92b3Jvbm9pVHJpYW5nbGVBcmVhKHNpdGUsIHMwLCBzMSkgPCAwKSB7XG5cdCAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFsgZGF0YVtpXSwgZGF0YVtzMC5pXSwgZGF0YVtzMS5pXSBdKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gdHJpYW5nbGVzO1xuXHQgICAgfTtcblx0ICAgIHZvcm9ub2kueCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZnggPSBkM19mdW5jdG9yKHggPSBfKSwgdm9yb25vaSkgOiB4O1xuXHQgICAgfTtcblx0ICAgIHZvcm9ub2kueSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZnkgPSBkM19mdW5jdG9yKHkgPSBfKSwgdm9yb25vaSkgOiB5O1xuXHQgICAgfTtcblx0ICAgIHZvcm9ub2kuY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEV4dGVudCA9PT0gZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA/IG51bGwgOiBjbGlwRXh0ZW50O1xuXHQgICAgICBjbGlwRXh0ZW50ID0gXyA9PSBudWxsID8gZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA6IF87XG5cdCAgICAgIHJldHVybiB2b3Jvbm9pO1xuXHQgICAgfTtcblx0ICAgIHZvcm9ub2kuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEV4dGVudCA9PT0gZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA/IG51bGwgOiBjbGlwRXh0ZW50ICYmIGNsaXBFeHRlbnRbMV07XG5cdCAgICAgIHJldHVybiB2b3Jvbm9pLmNsaXBFeHRlbnQoXyAmJiBbIFsgMCwgMCBdLCBfIF0pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiB2b3Jvbm9pO1xuXHQgIH07XG5cdCAgdmFyIGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgPSBbIFsgLTFlNiwgLTFlNiBdLCBbIDFlNiwgMWU2IF0gXTtcblx0ICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lUcmlhbmdsZUFyZWEoYSwgYiwgYykge1xuXHQgICAgcmV0dXJuIChhLnggLSBjLngpICogKGIueSAtIGEueSkgLSAoYS54IC0gYi54KSAqIChjLnkgLSBhLnkpO1xuXHQgIH1cblx0ICBkMy5nZW9tLmRlbGF1bmF5ID0gZnVuY3Rpb24odmVydGljZXMpIHtcblx0ICAgIHJldHVybiBkMy5nZW9tLnZvcm9ub2koKS50cmlhbmdsZXModmVydGljZXMpO1xuXHQgIH07XG5cdCAgZDMuZ2VvbS5xdWFkdHJlZSA9IGZ1bmN0aW9uKHBvaW50cywgeDEsIHkxLCB4MiwgeTIpIHtcblx0ICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WSwgY29tcGF0O1xuXHQgICAgaWYgKGNvbXBhdCA9IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0ICAgICAgeCA9IGQzX2dlb21fcXVhZHRyZWVDb21wYXRYO1xuXHQgICAgICB5ID0gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFk7XG5cdCAgICAgIGlmIChjb21wYXQgPT09IDMpIHtcblx0ICAgICAgICB5MiA9IHkxO1xuXHQgICAgICAgIHgyID0geDE7XG5cdCAgICAgICAgeTEgPSB4MSA9IDA7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHF1YWR0cmVlKHBvaW50cyk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBxdWFkdHJlZShkYXRhKSB7XG5cdCAgICAgIHZhciBkLCBmeCA9IGQzX2Z1bmN0b3IoeCksIGZ5ID0gZDNfZnVuY3Rvcih5KSwgeHMsIHlzLCBpLCBuLCB4MV8sIHkxXywgeDJfLCB5Ml87XG5cdCAgICAgIGlmICh4MSAhPSBudWxsKSB7XG5cdCAgICAgICAgeDFfID0geDEsIHkxXyA9IHkxLCB4Ml8gPSB4MiwgeTJfID0geTI7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgeDJfID0geTJfID0gLSh4MV8gPSB5MV8gPSBJbmZpbml0eSk7XG5cdCAgICAgICAgeHMgPSBbXSwgeXMgPSBbXTtcblx0ICAgICAgICBuID0gZGF0YS5sZW5ndGg7XG5cdCAgICAgICAgaWYgKGNvbXBhdCkgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuXHQgICAgICAgICAgZCA9IGRhdGFbaV07XG5cdCAgICAgICAgICBpZiAoZC54IDwgeDFfKSB4MV8gPSBkLng7XG5cdCAgICAgICAgICBpZiAoZC55IDwgeTFfKSB5MV8gPSBkLnk7XG5cdCAgICAgICAgICBpZiAoZC54ID4geDJfKSB4Ml8gPSBkLng7XG5cdCAgICAgICAgICBpZiAoZC55ID4geTJfKSB5Ml8gPSBkLnk7XG5cdCAgICAgICAgICB4cy5wdXNoKGQueCk7XG5cdCAgICAgICAgICB5cy5wdXNoKGQueSk7XG5cdCAgICAgICAgfSBlbHNlIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICAgIHZhciB4XyA9ICtmeChkID0gZGF0YVtpXSwgaSksIHlfID0gK2Z5KGQsIGkpO1xuXHQgICAgICAgICAgaWYgKHhfIDwgeDFfKSB4MV8gPSB4Xztcblx0ICAgICAgICAgIGlmICh5XyA8IHkxXykgeTFfID0geV87XG5cdCAgICAgICAgICBpZiAoeF8gPiB4Ml8pIHgyXyA9IHhfO1xuXHQgICAgICAgICAgaWYgKHlfID4geTJfKSB5Ml8gPSB5Xztcblx0ICAgICAgICAgIHhzLnB1c2goeF8pO1xuXHQgICAgICAgICAgeXMucHVzaCh5Xyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHZhciBkeCA9IHgyXyAtIHgxXywgZHkgPSB5Ml8gLSB5MV87XG5cdCAgICAgIGlmIChkeCA+IGR5KSB5Ml8gPSB5MV8gKyBkeDsgZWxzZSB4Ml8gPSB4MV8gKyBkeTtcblx0ICAgICAgZnVuY3Rpb24gaW5zZXJ0KG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7XG5cdCAgICAgICAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm47XG5cdCAgICAgICAgaWYgKG4ubGVhZikge1xuXHQgICAgICAgICAgdmFyIG54ID0gbi54LCBueSA9IG4ueTtcblx0ICAgICAgICAgIGlmIChueCAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgIGlmIChhYnMobnggLSB4KSArIGFicyhueSAtIHkpIDwgLjAxKSB7XG5cdCAgICAgICAgICAgICAgaW5zZXJ0Q2hpbGQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIHZhciBuUG9pbnQgPSBuLnBvaW50O1xuXHQgICAgICAgICAgICAgIG4ueCA9IG4ueSA9IG4ucG9pbnQgPSBudWxsO1xuXHQgICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIG5Qb2ludCwgbngsIG55LCB4MSwgeTEsIHgyLCB5Mik7XG5cdCAgICAgICAgICAgICAgaW5zZXJ0Q2hpbGQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBuLnggPSB4LCBuLnkgPSB5LCBuLnBvaW50ID0gZDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaW5zZXJ0Q2hpbGQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuXHQgICAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAqIC41LCB5bSA9ICh5MSArIHkyKSAqIC41LCByaWdodCA9IHggPj0geG0sIGJlbG93ID0geSA+PSB5bSwgaSA9IGJlbG93IDw8IDEgfCByaWdodDtcblx0ICAgICAgICBuLmxlYWYgPSBmYWxzZTtcblx0ICAgICAgICBuID0gbi5ub2Rlc1tpXSB8fCAobi5ub2Rlc1tpXSA9IGQzX2dlb21fcXVhZHRyZWVOb2RlKCkpO1xuXHQgICAgICAgIGlmIChyaWdodCkgeDEgPSB4bTsgZWxzZSB4MiA9IHhtO1xuXHQgICAgICAgIGlmIChiZWxvdykgeTEgPSB5bTsgZWxzZSB5MiA9IHltO1xuXHQgICAgICAgIGluc2VydChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHJvb3QgPSBkM19nZW9tX3F1YWR0cmVlTm9kZSgpO1xuXHQgICAgICByb290LmFkZCA9IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICBpbnNlcnQocm9vdCwgZCwgK2Z4KGQsICsraSksICtmeShkLCBpKSwgeDFfLCB5MV8sIHgyXywgeTJfKTtcblx0ICAgICAgfTtcblx0ICAgICAgcm9vdC52aXNpdCA9IGZ1bmN0aW9uKGYpIHtcblx0ICAgICAgICBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgcm9vdCwgeDFfLCB5MV8sIHgyXywgeTJfKTtcblx0ICAgICAgfTtcblx0ICAgICAgcm9vdC5maW5kID0gZnVuY3Rpb24ocG9pbnQpIHtcblx0ICAgICAgICByZXR1cm4gZDNfZ2VvbV9xdWFkdHJlZUZpbmQocm9vdCwgcG9pbnRbMF0sIHBvaW50WzFdLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuXHQgICAgICB9O1xuXHQgICAgICBpID0gLTE7XG5cdCAgICAgIGlmICh4MSA9PSBudWxsKSB7XG5cdCAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICAgIGluc2VydChyb290LCBkYXRhW2ldLCB4c1tpXSwgeXNbaV0sIHgxXywgeTFfLCB4Ml8sIHkyXyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC0taTtcblx0ICAgICAgfSBlbHNlIGRhdGEuZm9yRWFjaChyb290LmFkZCk7XG5cdCAgICAgIHhzID0geXMgPSBkYXRhID0gZCA9IG51bGw7XG5cdCAgICAgIHJldHVybiByb290O1xuXHQgICAgfVxuXHQgICAgcXVhZHRyZWUueCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IF8sIHF1YWR0cmVlKSA6IHg7XG5cdCAgICB9O1xuXHQgICAgcXVhZHRyZWUueSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IF8sIHF1YWR0cmVlKSA6IHk7XG5cdCAgICB9O1xuXHQgICAgcXVhZHRyZWUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFsgWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSBdO1xuXHQgICAgICBpZiAoXyA9PSBudWxsKSB4MSA9IHkxID0geDIgPSB5MiA9IG51bGw7IGVsc2UgeDEgPSArX1swXVswXSwgeTEgPSArX1swXVsxXSwgeDIgPSArX1sxXVswXSwgXG5cdCAgICAgIHkyID0gK19bMV1bMV07XG5cdCAgICAgIHJldHVybiBxdWFkdHJlZTtcblx0ICAgIH07XG5cdCAgICBxdWFkdHJlZS5zaXplID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFsgeDIgLSB4MSwgeTIgLSB5MSBdO1xuXHQgICAgICBpZiAoXyA9PSBudWxsKSB4MSA9IHkxID0geDIgPSB5MiA9IG51bGw7IGVsc2UgeDEgPSB5MSA9IDAsIHgyID0gK19bMF0sIHkyID0gK19bMV07XG5cdCAgICAgIHJldHVybiBxdWFkdHJlZTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gcXVhZHRyZWU7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WChkKSB7XG5cdCAgICByZXR1cm4gZC54O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WShkKSB7XG5cdCAgICByZXR1cm4gZC55O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlTm9kZSgpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGxlYWY6IHRydWUsXG5cdCAgICAgIG5vZGVzOiBbXSxcblx0ICAgICAgcG9pbnQ6IG51bGwsXG5cdCAgICAgIHg6IG51bGwsXG5cdCAgICAgIHk6IG51bGxcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBub2RlLCB4MSwgeTEsIHgyLCB5Mikge1xuXHQgICAgaWYgKCFmKG5vZGUsIHgxLCB5MSwgeDIsIHkyKSkge1xuXHQgICAgICB2YXIgc3ggPSAoeDEgKyB4MikgKiAuNSwgc3kgPSAoeTEgKyB5MikgKiAuNSwgY2hpbGRyZW4gPSBub2RlLm5vZGVzO1xuXHQgICAgICBpZiAoY2hpbGRyZW5bMF0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblswXSwgeDEsIHkxLCBzeCwgc3kpO1xuXHQgICAgICBpZiAoY2hpbGRyZW5bMV0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblsxXSwgc3gsIHkxLCB4Miwgc3kpO1xuXHQgICAgICBpZiAoY2hpbGRyZW5bMl0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblsyXSwgeDEsIHN5LCBzeCwgeTIpO1xuXHQgICAgICBpZiAoY2hpbGRyZW5bM10pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblszXSwgc3gsIHN5LCB4MiwgeTIpO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlRmluZChyb290LCB4LCB5LCB4MCwgeTAsIHgzLCB5Mykge1xuXHQgICAgdmFyIG1pbkRpc3RhbmNlMiA9IEluZmluaXR5LCBjbG9zZXN0UG9pbnQ7XG5cdCAgICAoZnVuY3Rpb24gZmluZChub2RlLCB4MSwgeTEsIHgyLCB5Mikge1xuXHQgICAgICBpZiAoeDEgPiB4MyB8fCB5MSA+IHkzIHx8IHgyIDwgeDAgfHwgeTIgPCB5MCkgcmV0dXJuO1xuXHQgICAgICBpZiAocG9pbnQgPSBub2RlLnBvaW50KSB7XG5cdCAgICAgICAgdmFyIHBvaW50LCBkeCA9IHggLSBub2RlLngsIGR5ID0geSAtIG5vZGUueSwgZGlzdGFuY2UyID0gZHggKiBkeCArIGR5ICogZHk7XG5cdCAgICAgICAgaWYgKGRpc3RhbmNlMiA8IG1pbkRpc3RhbmNlMikge1xuXHQgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KG1pbkRpc3RhbmNlMiA9IGRpc3RhbmNlMik7XG5cdCAgICAgICAgICB4MCA9IHggLSBkaXN0YW5jZSwgeTAgPSB5IC0gZGlzdGFuY2U7XG5cdCAgICAgICAgICB4MyA9IHggKyBkaXN0YW5jZSwgeTMgPSB5ICsgZGlzdGFuY2U7XG5cdCAgICAgICAgICBjbG9zZXN0UG9pbnQgPSBwb2ludDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5ub2RlcywgeG0gPSAoeDEgKyB4MikgKiAuNSwgeW0gPSAoeTEgKyB5MikgKiAuNSwgcmlnaHQgPSB4ID49IHhtLCBiZWxvdyA9IHkgPj0geW07XG5cdCAgICAgIGZvciAodmFyIGkgPSBiZWxvdyA8PCAxIHwgcmlnaHQsIGogPSBpICsgNDsgaSA8IGo7ICsraSkge1xuXHQgICAgICAgIGlmIChub2RlID0gY2hpbGRyZW5baSAmIDNdKSBzd2l0Y2ggKGkgJiAzKSB7XG5cdCAgICAgICAgIGNhc2UgMDpcblx0ICAgICAgICAgIGZpbmQobm9kZSwgeDEsIHkxLCB4bSwgeW0pO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdFxuXHQgICAgICAgICBjYXNlIDE6XG5cdCAgICAgICAgICBmaW5kKG5vZGUsIHhtLCB5MSwgeDIsIHltKTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHRcblx0ICAgICAgICAgY2FzZSAyOlxuXHQgICAgICAgICAgZmluZChub2RlLCB4MSwgeW0sIHhtLCB5Mik7XG5cdCAgICAgICAgICBicmVhaztcblx0XG5cdCAgICAgICAgIGNhc2UgMzpcblx0ICAgICAgICAgIGZpbmQobm9kZSwgeG0sIHltLCB4MiwgeTIpO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9KShyb290LCB4MCwgeTAsIHgzLCB5Myk7XG5cdCAgICByZXR1cm4gY2xvc2VzdFBvaW50O1xuXHQgIH1cblx0ICBkMy5pbnRlcnBvbGF0ZVJnYiA9IGQzX2ludGVycG9sYXRlUmdiO1xuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlUmdiKGEsIGIpIHtcblx0ICAgIGEgPSBkMy5yZ2IoYSk7XG5cdCAgICBiID0gZDMucmdiKGIpO1xuXHQgICAgdmFyIGFyID0gYS5yLCBhZyA9IGEuZywgYWIgPSBhLmIsIGJyID0gYi5yIC0gYXIsIGJnID0gYi5nIC0gYWcsIGJiID0gYi5iIC0gYWI7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KE1hdGgucm91bmQoYXIgKyBiciAqIHQpKSArIGQzX3JnYl9oZXgoTWF0aC5yb3VuZChhZyArIGJnICogdCkpICsgZDNfcmdiX2hleChNYXRoLnJvdW5kKGFiICsgYmIgKiB0KSk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5pbnRlcnBvbGF0ZU9iamVjdCA9IGQzX2ludGVycG9sYXRlT2JqZWN0O1xuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlT2JqZWN0KGEsIGIpIHtcblx0ICAgIHZhciBpID0ge30sIGMgPSB7fSwgaztcblx0ICAgIGZvciAoayBpbiBhKSB7XG5cdCAgICAgIGlmIChrIGluIGIpIHtcblx0ICAgICAgICBpW2tdID0gZDNfaW50ZXJwb2xhdGUoYVtrXSwgYltrXSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY1trXSA9IGFba107XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGZvciAoayBpbiBiKSB7XG5cdCAgICAgIGlmICghKGsgaW4gYSkpIHtcblx0ICAgICAgICBjW2tdID0gYltrXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuXHQgICAgICByZXR1cm4gYztcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmludGVycG9sYXRlTnVtYmVyID0gZDNfaW50ZXJwb2xhdGVOdW1iZXI7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVOdW1iZXIoYSwgYikge1xuXHQgICAgYSA9ICthLCBiID0gK2I7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLmludGVycG9sYXRlU3RyaW5nID0gZDNfaW50ZXJwb2xhdGVTdHJpbmc7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVTdHJpbmcoYSwgYikge1xuXHQgICAgdmFyIGJpID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5sYXN0SW5kZXggPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJCLmxhc3RJbmRleCA9IDAsIGFtLCBibSwgYnMsIGkgPSAtMSwgcyA9IFtdLCBxID0gW107XG5cdCAgICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblx0ICAgIHdoaWxlICgoYW0gPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJBLmV4ZWMoYSkpICYmIChibSA9IGQzX2ludGVycG9sYXRlX251bWJlckIuZXhlYyhiKSkpIHtcblx0ICAgICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7XG5cdCAgICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG5cdCAgICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IGVsc2Ugc1srK2ldID0gYnM7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7XG5cdCAgICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IGVsc2Ugc1srK2ldID0gYm07XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgc1srK2ldID0gbnVsbDtcblx0ICAgICAgICBxLnB1c2goe1xuXHQgICAgICAgICAgaTogaSxcblx0ICAgICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKGFtLCBibSlcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgICBiaSA9IGQzX2ludGVycG9sYXRlX251bWJlckIubGFzdEluZGV4O1xuXHQgICAgfVxuXHQgICAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcblx0ICAgICAgYnMgPSBiLnNsaWNlKGJpKTtcblx0ICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IGVsc2Ugc1srK2ldID0gYnM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcy5sZW5ndGggPCAyID8gcVswXSA/IChiID0gcVswXS54LCBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiBiKHQpICsgXCJcIjtcblx0ICAgIH0pIDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBiO1xuXHQgICAgfSA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcblx0ICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcblx0ICAgIH0pO1xuXHQgIH1cblx0ICB2YXIgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZywgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQiA9IG5ldyBSZWdFeHAoZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5zb3VyY2UsIFwiZ1wiKTtcblx0ICBkMy5pbnRlcnBvbGF0ZSA9IGQzX2ludGVycG9sYXRlO1xuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlKGEsIGIpIHtcblx0ICAgIHZhciBpID0gZDMuaW50ZXJwb2xhdG9ycy5sZW5ndGgsIGY7XG5cdCAgICB3aGlsZSAoLS1pID49IDAgJiYgIShmID0gZDMuaW50ZXJwb2xhdG9yc1tpXShhLCBiKSkpIDtcblx0ICAgIHJldHVybiBmO1xuXHQgIH1cblx0ICBkMy5pbnRlcnBvbGF0b3JzID0gWyBmdW5jdGlvbihhLCBiKSB7XG5cdCAgICB2YXIgdCA9IHR5cGVvZiBiO1xuXHQgICAgcmV0dXJuICh0ID09PSBcInN0cmluZ1wiID8gZDNfcmdiX25hbWVzLmhhcyhiLnRvTG93ZXJDYXNlKCkpIHx8IC9eKCN8cmdiXFwofGhzbFxcKCkvaS50ZXN0KGIpID8gZDNfaW50ZXJwb2xhdGVSZ2IgOiBkM19pbnRlcnBvbGF0ZVN0cmluZyA6IGIgaW5zdGFuY2VvZiBkM19jb2xvciA/IGQzX2ludGVycG9sYXRlUmdiIDogQXJyYXkuaXNBcnJheShiKSA/IGQzX2ludGVycG9sYXRlQXJyYXkgOiB0ID09PSBcIm9iamVjdFwiICYmIGlzTmFOKGIpID8gZDNfaW50ZXJwb2xhdGVPYmplY3QgOiBkM19pbnRlcnBvbGF0ZU51bWJlcikoYSwgYik7XG5cdCAgfSBdO1xuXHQgIGQzLmludGVycG9sYXRlQXJyYXkgPSBkM19pbnRlcnBvbGF0ZUFycmF5O1xuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlQXJyYXkoYSwgYikge1xuXHQgICAgdmFyIHggPSBbXSwgYyA9IFtdLCBuYSA9IGEubGVuZ3RoLCBuYiA9IGIubGVuZ3RoLCBuMCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCksIGk7XG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgbjA7ICsraSkgeC5wdXNoKGQzX2ludGVycG9sYXRlKGFbaV0sIGJbaV0pKTtcblx0ICAgIGZvciAoO2kgPCBuYTsgKytpKSBjW2ldID0gYVtpXTtcblx0ICAgIGZvciAoO2kgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSBjW2ldID0geFtpXSh0KTtcblx0ICAgICAgcmV0dXJuIGM7XG5cdCAgICB9O1xuXHQgIH1cblx0ICB2YXIgZDNfZWFzZV9kZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfaWRlbnRpdHk7XG5cdCAgfTtcblx0ICB2YXIgZDNfZWFzZSA9IGQzLm1hcCh7XG5cdCAgICBsaW5lYXI6IGQzX2Vhc2VfZGVmYXVsdCxcblx0ICAgIHBvbHk6IGQzX2Vhc2VfcG9seSxcblx0ICAgIHF1YWQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfZWFzZV9xdWFkO1xuXHQgICAgfSxcblx0ICAgIGN1YmljOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX2Vhc2VfY3ViaWM7XG5cdCAgICB9LFxuXHQgICAgc2luOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX2Vhc2Vfc2luO1xuXHQgICAgfSxcblx0ICAgIGV4cDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19lYXNlX2V4cDtcblx0ICAgIH0sXG5cdCAgICBjaXJjbGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfZWFzZV9jaXJjbGU7XG5cdCAgICB9LFxuXHQgICAgZWxhc3RpYzogZDNfZWFzZV9lbGFzdGljLFxuXHQgICAgYmFjazogZDNfZWFzZV9iYWNrLFxuXHQgICAgYm91bmNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX2Vhc2VfYm91bmNlO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIHZhciBkM19lYXNlX21vZGUgPSBkMy5tYXAoe1xuXHQgICAgXCJpblwiOiBkM19pZGVudGl0eSxcblx0ICAgIG91dDogZDNfZWFzZV9yZXZlcnNlLFxuXHQgICAgXCJpbi1vdXRcIjogZDNfZWFzZV9yZWZsZWN0LFxuXHQgICAgXCJvdXQtaW5cIjogZnVuY3Rpb24oZikge1xuXHQgICAgICByZXR1cm4gZDNfZWFzZV9yZWZsZWN0KGQzX2Vhc2VfcmV2ZXJzZShmKSk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgZDMuZWFzZSA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHZhciBpID0gbmFtZS5pbmRleE9mKFwiLVwiKSwgdCA9IGkgPj0gMCA/IG5hbWUuc2xpY2UoMCwgaSkgOiBuYW1lLCBtID0gaSA+PSAwID8gbmFtZS5zbGljZShpICsgMSkgOiBcImluXCI7XG5cdCAgICB0ID0gZDNfZWFzZS5nZXQodCkgfHwgZDNfZWFzZV9kZWZhdWx0O1xuXHQgICAgbSA9IGQzX2Vhc2VfbW9kZS5nZXQobSkgfHwgZDNfaWRlbnRpdHk7XG5cdCAgICByZXR1cm4gZDNfZWFzZV9jbGFtcChtKHQuYXBwbHkobnVsbCwgZDNfYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpKSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19lYXNlX2NsYW1wKGYpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiB0IDw9IDAgPyAwIDogdCA+PSAxID8gMSA6IGYodCk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19lYXNlX3JldmVyc2UoZikge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgcmV0dXJuIDEgLSBmKDEgLSB0KTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfcmVmbGVjdChmKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICByZXR1cm4gLjUgKiAodCA8IC41ID8gZigyICogdCkgOiAyIC0gZigyIC0gMiAqIHQpKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfcXVhZCh0KSB7XG5cdCAgICByZXR1cm4gdCAqIHQ7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfY3ViaWModCkge1xuXHQgICAgcmV0dXJuIHQgKiB0ICogdDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZWFzZV9jdWJpY0luT3V0KHQpIHtcblx0ICAgIGlmICh0IDw9IDApIHJldHVybiAwO1xuXHQgICAgaWYgKHQgPj0gMSkgcmV0dXJuIDE7XG5cdCAgICB2YXIgdDIgPSB0ICogdCwgdDMgPSB0MiAqIHQ7XG5cdCAgICByZXR1cm4gNCAqICh0IDwgLjUgPyB0MyA6IDMgKiAodCAtIHQyKSArIHQzIC0gLjc1KTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZWFzZV9wb2x5KGUpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2Vfc2luKHQpIHtcblx0ICAgIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGbPgCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2Vhc2VfZXhwKHQpIHtcblx0ICAgIHJldHVybiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19lYXNlX2NpcmNsZSh0KSB7XG5cdCAgICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19lYXNlX2VsYXN0aWMoYSwgcCkge1xuXHQgICAgdmFyIHM7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHAgPSAuNDU7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgcyA9IHAgLyDPhCAqIE1hdGguYXNpbigxIC8gYSk7IGVsc2UgYSA9IDEsIHMgPSBwIC8gNDtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiAxICsgYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgLSBzKSAqIM+EIC8gcCk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19lYXNlX2JhY2socykge1xuXHQgICAgaWYgKCFzKSBzID0gMS43MDE1ODtcblx0ICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfZWFzZV9ib3VuY2UodCkge1xuXHQgICAgcmV0dXJuIHQgPCAxIC8gMi43NSA/IDcuNTYyNSAqIHQgKiB0IDogdCA8IDIgLyAyLjc1ID8gNy41NjI1ICogKHQgLT0gMS41IC8gMi43NSkgKiB0ICsgLjc1IDogdCA8IDIuNSAvIDIuNzUgPyA3LjU2MjUgKiAodCAtPSAyLjI1IC8gMi43NSkgKiB0ICsgLjkzNzUgOiA3LjU2MjUgKiAodCAtPSAyLjYyNSAvIDIuNzUpICogdCArIC45ODQzNzU7XG5cdCAgfVxuXHQgIGQzLmludGVycG9sYXRlSGNsID0gZDNfaW50ZXJwb2xhdGVIY2w7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVIY2woYSwgYikge1xuXHQgICAgYSA9IGQzLmhjbChhKTtcblx0ICAgIGIgPSBkMy5oY2woYik7XG5cdCAgICB2YXIgYWggPSBhLmgsIGFjID0gYS5jLCBhbCA9IGEubCwgYmggPSBiLmggLSBhaCwgYmMgPSBiLmMgLSBhYywgYmwgPSBiLmwgLSBhbDtcblx0ICAgIGlmIChpc05hTihiYykpIGJjID0gMCwgYWMgPSBpc05hTihhYykgPyBiLmMgOiBhYztcblx0ICAgIGlmIChpc05hTihiaCkpIGJoID0gMCwgYWggPSBpc05hTihhaCkgPyBiLmggOiBhaDsgZWxzZSBpZiAoYmggPiAxODApIGJoIC09IDM2MDsgZWxzZSBpZiAoYmggPCAtMTgwKSBiaCArPSAzNjA7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICByZXR1cm4gZDNfaGNsX2xhYihhaCArIGJoICogdCwgYWMgKyBiYyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5pbnRlcnBvbGF0ZUhzbCA9IGQzX2ludGVycG9sYXRlSHNsO1xuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlSHNsKGEsIGIpIHtcblx0ICAgIGEgPSBkMy5oc2woYSk7XG5cdCAgICBiID0gZDMuaHNsKGIpO1xuXHQgICAgdmFyIGFoID0gYS5oLCBhcyA9IGEucywgYWwgPSBhLmwsIGJoID0gYi5oIC0gYWgsIGJzID0gYi5zIC0gYXMsIGJsID0gYi5sIC0gYWw7XG5cdCAgICBpZiAoaXNOYU4oYnMpKSBicyA9IDAsIGFzID0gaXNOYU4oYXMpID8gYi5zIDogYXM7XG5cdCAgICBpZiAoaXNOYU4oYmgpKSBiaCA9IDAsIGFoID0gaXNOYU4oYWgpID8gYi5oIDogYWg7IGVsc2UgaWYgKGJoID4gMTgwKSBiaCAtPSAzNjA7IGVsc2UgaWYgKGJoIDwgLTE4MCkgYmggKz0gMzYwO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgcmV0dXJuIGQzX2hzbF9yZ2IoYWggKyBiaCAqIHQsIGFzICsgYnMgKiB0LCBhbCArIGJsICogdCkgKyBcIlwiO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMuaW50ZXJwb2xhdGVMYWIgPSBkM19pbnRlcnBvbGF0ZUxhYjtcblx0ICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUxhYihhLCBiKSB7XG5cdCAgICBhID0gZDMubGFiKGEpO1xuXHQgICAgYiA9IGQzLmxhYihiKTtcblx0ICAgIHZhciBhbCA9IGEubCwgYWEgPSBhLmEsIGFiID0gYS5iLCBibCA9IGIubCAtIGFsLCBiYSA9IGIuYSAtIGFhLCBiYiA9IGIuYiAtIGFiO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgcmV0dXJuIGQzX2xhYl9yZ2IoYWwgKyBibCAqIHQsIGFhICsgYmEgKiB0LCBhYiArIGJiICogdCkgKyBcIlwiO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMuaW50ZXJwb2xhdGVSb3VuZCA9IGQzX2ludGVycG9sYXRlUm91bmQ7XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSb3VuZChhLCBiKSB7XG5cdCAgICBiIC09IGE7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMudHJhbnNmb3JtID0gZnVuY3Rpb24oc3RyaW5nKSB7XG5cdCAgICB2YXIgZyA9IGQzX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhkMy5ucy5wcmVmaXguc3ZnLCBcImdcIik7XG5cdCAgICByZXR1cm4gKGQzLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKHN0cmluZykge1xuXHQgICAgICBpZiAoc3RyaW5nICE9IG51bGwpIHtcblx0ICAgICAgICBnLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdHJpbmcpO1xuXHQgICAgICAgIHZhciB0ID0gZy50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBuZXcgZDNfdHJhbnNmb3JtKHQgPyB0Lm1hdHJpeCA6IGQzX3RyYW5zZm9ybUlkZW50aXR5KTtcblx0ICAgIH0pKHN0cmluZyk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM190cmFuc2Zvcm0obSkge1xuXHQgICAgdmFyIHIwID0gWyBtLmEsIG0uYiBdLCByMSA9IFsgbS5jLCBtLmQgXSwga3ggPSBkM190cmFuc2Zvcm1Ob3JtYWxpemUocjApLCBreiA9IGQzX3RyYW5zZm9ybURvdChyMCwgcjEpLCBreSA9IGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShkM190cmFuc2Zvcm1Db21iaW5lKHIxLCByMCwgLWt6KSkgfHwgMDtcblx0ICAgIGlmIChyMFswXSAqIHIxWzFdIDwgcjFbMF0gKiByMFsxXSkge1xuXHQgICAgICByMFswXSAqPSAtMTtcblx0ICAgICAgcjBbMV0gKj0gLTE7XG5cdCAgICAgIGt4ICo9IC0xO1xuXHQgICAgICBreiAqPSAtMTtcblx0ICAgIH1cblx0ICAgIHRoaXMucm90YXRlID0gKGt4ID8gTWF0aC5hdGFuMihyMFsxXSwgcjBbMF0pIDogTWF0aC5hdGFuMigtcjFbMF0sIHIxWzFdKSkgKiBkM19kZWdyZWVzO1xuXHQgICAgdGhpcy50cmFuc2xhdGUgPSBbIG0uZSwgbS5mIF07XG5cdCAgICB0aGlzLnNjYWxlID0gWyBreCwga3kgXTtcblx0ICAgIHRoaXMuc2tldyA9IGt5ID8gTWF0aC5hdGFuMihreiwga3kpICogZDNfZGVncmVlcyA6IDA7XG5cdCAgfVxuXHQgIGQzX3RyYW5zZm9ybS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMudHJhbnNsYXRlICsgXCIpcm90YXRlKFwiICsgdGhpcy5yb3RhdGUgKyBcIilza2V3WChcIiArIHRoaXMuc2tldyArIFwiKXNjYWxlKFwiICsgdGhpcy5zY2FsZSArIFwiKVwiO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtRG90KGEsIGIpIHtcblx0ICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Ob3JtYWxpemUoYSkge1xuXHQgICAgdmFyIGsgPSBNYXRoLnNxcnQoZDNfdHJhbnNmb3JtRG90KGEsIGEpKTtcblx0ICAgIGlmIChrKSB7XG5cdCAgICAgIGFbMF0gLz0gaztcblx0ICAgICAgYVsxXSAvPSBrO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGs7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybUNvbWJpbmUoYSwgYiwgaykge1xuXHQgICAgYVswXSArPSBrICogYlswXTtcblx0ICAgIGFbMV0gKz0gayAqIGJbMV07XG5cdCAgICByZXR1cm4gYTtcblx0ICB9XG5cdCAgdmFyIGQzX3RyYW5zZm9ybUlkZW50aXR5ID0ge1xuXHQgICAgYTogMSxcblx0ICAgIGI6IDAsXG5cdCAgICBjOiAwLFxuXHQgICAgZDogMSxcblx0ICAgIGU6IDAsXG5cdCAgICBmOiAwXG5cdCAgfTtcblx0ICBkMy5pbnRlcnBvbGF0ZVRyYW5zZm9ybSA9IGQzX2ludGVycG9sYXRlVHJhbnNmb3JtO1xuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpIHtcblx0ICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIixcIiA6IFwiXCI7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNsYXRlKHRhLCB0YiwgcywgcSkge1xuXHQgICAgaWYgKHRhWzBdICE9PSB0YlswXSB8fCB0YVsxXSAhPT0gdGJbMV0pIHtcblx0ICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG5cdCAgICAgIHEucHVzaCh7XG5cdCAgICAgICAgaTogaSAtIDQsXG5cdCAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIodGFbMF0sIHRiWzBdKVxuXHQgICAgICB9LCB7XG5cdCAgICAgICAgaTogaSAtIDIsXG5cdCAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIodGFbMV0sIHRiWzFdKVxuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSBpZiAodGJbMF0gfHwgdGJbMV0pIHtcblx0ICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgdGIgKyBcIilcIik7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlUm90YXRlKHJhLCByYiwgcywgcSkge1xuXHQgICAgaWYgKHJhICE9PSByYikge1xuXHQgICAgICBpZiAocmEgLSByYiA+IDE4MCkgcmIgKz0gMzYwOyBlbHNlIGlmIChyYiAtIHJhID4gMTgwKSByYSArPSAzNjA7XG5cdCAgICAgIHEucHVzaCh7XG5cdCAgICAgICAgaTogcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIFwiKVwiKSAtIDIsXG5cdCAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIocmEsIHJiKVxuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSBpZiAocmIpIHtcblx0ICAgICAgcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJyb3RhdGUoXCIgKyByYiArIFwiKVwiKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVTa2V3KHdhLCB3YiwgcywgcSkge1xuXHQgICAgaWYgKHdhICE9PSB3Yikge1xuXHQgICAgICBxLnB1c2goe1xuXHQgICAgICAgIGk6IHMucHVzaChkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSArIFwic2tld1goXCIsIG51bGwsIFwiKVwiKSAtIDIsXG5cdCAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIod2EsIHdiKVxuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSBpZiAod2IpIHtcblx0ICAgICAgcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJza2V3WChcIiArIHdiICsgXCIpXCIpO1xuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVNjYWxlKGthLCBrYiwgcywgcSkge1xuXHQgICAgaWYgKGthWzBdICE9PSBrYlswXSB8fCBrYVsxXSAhPT0ga2JbMV0pIHtcblx0ICAgICAgdmFyIGkgPSBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuXHQgICAgICBxLnB1c2goe1xuXHQgICAgICAgIGk6IGkgLSA0LFxuXHQgICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKGthWzBdLCBrYlswXSlcblx0ICAgICAgfSwge1xuXHQgICAgICAgIGk6IGkgLSAyLFxuXHQgICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKGthWzFdLCBrYlsxXSlcblx0ICAgICAgfSk7XG5cdCAgICB9IGVsc2UgaWYgKGtiWzBdICE9PSAxIHx8IGtiWzFdICE9PSAxKSB7XG5cdCAgICAgIHMucHVzaChkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSArIFwic2NhbGUoXCIgKyBrYiArIFwiKVwiKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm0oYSwgYikge1xuXHQgICAgdmFyIHMgPSBbXSwgcSA9IFtdO1xuXHQgICAgYSA9IGQzLnRyYW5zZm9ybShhKSwgYiA9IGQzLnRyYW5zZm9ybShiKTtcblx0ICAgIGQzX2ludGVycG9sYXRlVHJhbnNsYXRlKGEudHJhbnNsYXRlLCBiLnRyYW5zbGF0ZSwgcywgcSk7XG5cdCAgICBkM19pbnRlcnBvbGF0ZVJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuXHQgICAgZDNfaW50ZXJwb2xhdGVTa2V3KGEuc2tldywgYi5za2V3LCBzLCBxKTtcblx0ICAgIGQzX2ludGVycG9sYXRlU2NhbGUoYS5zY2FsZSwgYi5zY2FsZSwgcywgcSk7XG5cdCAgICBhID0gYiA9IG51bGw7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuXHQgICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG5cdCAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM191bmludGVycG9sYXRlTnVtYmVyKGEsIGIpIHtcblx0ICAgIGIgPSAoYiAtPSBhID0gK2EpIHx8IDEgLyBiO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuICh4IC0gYSkgLyBiO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wKGEsIGIpIHtcblx0ICAgIGIgPSAoYiAtPSBhID0gK2EpIHx8IDEgLyBiO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsICh4IC0gYSkgLyBiKSk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5sYXlvdXQgPSB7fTtcblx0ICBkMy5sYXlvdXQuYnVuZGxlID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24obGlua3MpIHtcblx0ICAgICAgdmFyIHBhdGhzID0gW10sIGkgPSAtMSwgbiA9IGxpbmtzLmxlbmd0aDtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHBhdGhzLnB1c2goZDNfbGF5b3V0X2J1bmRsZVBhdGgobGlua3NbaV0pKTtcblx0ICAgICAgcmV0dXJuIHBhdGhzO1xuXHQgICAgfTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9idW5kbGVQYXRoKGxpbmspIHtcblx0ICAgIHZhciBzdGFydCA9IGxpbmsuc291cmNlLCBlbmQgPSBsaW5rLnRhcmdldCwgbGNhID0gZDNfbGF5b3V0X2J1bmRsZUxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksIHBvaW50cyA9IFsgc3RhcnQgXTtcblx0ICAgIHdoaWxlIChzdGFydCAhPT0gbGNhKSB7XG5cdCAgICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuXHQgICAgICBwb2ludHMucHVzaChzdGFydCk7XG5cdCAgICB9XG5cdCAgICB2YXIgayA9IHBvaW50cy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoZW5kICE9PSBsY2EpIHtcblx0ICAgICAgcG9pbnRzLnNwbGljZShrLCAwLCBlbmQpO1xuXHQgICAgICBlbmQgPSBlbmQucGFyZW50O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHBvaW50cztcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhub2RlKSB7XG5cdCAgICB2YXIgYW5jZXN0b3JzID0gW10sIHBhcmVudCA9IG5vZGUucGFyZW50O1xuXHQgICAgd2hpbGUgKHBhcmVudCAhPSBudWxsKSB7XG5cdCAgICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuXHQgICAgICBub2RlID0gcGFyZW50O1xuXHQgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuXHQgICAgfVxuXHQgICAgYW5jZXN0b3JzLnB1c2gobm9kZSk7XG5cdCAgICByZXR1cm4gYW5jZXN0b3JzO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfYnVuZGxlTGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG5cdCAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG5cdCAgICB2YXIgYU5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhhKSwgYk5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhiKSwgYU5vZGUgPSBhTm9kZXMucG9wKCksIGJOb2RlID0gYk5vZGVzLnBvcCgpLCBzaGFyZWROb2RlID0gbnVsbDtcblx0ICAgIHdoaWxlIChhTm9kZSA9PT0gYk5vZGUpIHtcblx0ICAgICAgc2hhcmVkTm9kZSA9IGFOb2RlO1xuXHQgICAgICBhTm9kZSA9IGFOb2Rlcy5wb3AoKTtcblx0ICAgICAgYk5vZGUgPSBiTm9kZXMucG9wKCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gc2hhcmVkTm9kZTtcblx0ICB9XG5cdCAgZDMubGF5b3V0LmNob3JkID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgY2hvcmQgPSB7fSwgY2hvcmRzLCBncm91cHMsIG1hdHJpeCwgbiwgcGFkZGluZyA9IDAsIHNvcnRHcm91cHMsIHNvcnRTdWJncm91cHMsIHNvcnRDaG9yZHM7XG5cdCAgICBmdW5jdGlvbiByZWxheW91dCgpIHtcblx0ICAgICAgdmFyIHN1Ymdyb3VwcyA9IHt9LCBncm91cFN1bXMgPSBbXSwgZ3JvdXBJbmRleCA9IGQzLnJhbmdlKG4pLCBzdWJncm91cEluZGV4ID0gW10sIGssIHgsIHgwLCBpLCBqO1xuXHQgICAgICBjaG9yZHMgPSBbXTtcblx0ICAgICAgZ3JvdXBzID0gW107XG5cdCAgICAgIGsgPSAwLCBpID0gLTE7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgeCA9IDAsIGogPSAtMTtcblx0ICAgICAgICB3aGlsZSAoKytqIDwgbikge1xuXHQgICAgICAgICAgeCArPSBtYXRyaXhbaV1bal07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGdyb3VwU3Vtcy5wdXNoKHgpO1xuXHQgICAgICAgIHN1Ymdyb3VwSW5kZXgucHVzaChkMy5yYW5nZShuKSk7XG5cdCAgICAgICAgayArPSB4O1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzb3J0R3JvdXBzKSB7XG5cdCAgICAgICAgZ3JvdXBJbmRleC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0ICAgICAgICAgIHJldHVybiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoc29ydFN1Ymdyb3Vwcykge1xuXHQgICAgICAgIHN1Ymdyb3VwSW5kZXguZm9yRWFjaChmdW5jdGlvbihkLCBpKSB7XG5cdCAgICAgICAgICBkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHQgICAgICAgICAgICByZXR1cm4gc29ydFN1Ymdyb3VwcyhtYXRyaXhbaV1bYV0sIG1hdHJpeFtpXVtiXSk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgICBrID0gKM+EIC0gcGFkZGluZyAqIG4pIC8gaztcblx0ICAgICAgeCA9IDAsIGkgPSAtMTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICB4MCA9IHgsIGogPSAtMTtcblx0ICAgICAgICB3aGlsZSAoKytqIDwgbikge1xuXHQgICAgICAgICAgdmFyIGRpID0gZ3JvdXBJbmRleFtpXSwgZGogPSBzdWJncm91cEluZGV4W2RpXVtqXSwgdiA9IG1hdHJpeFtkaV1bZGpdLCBhMCA9IHgsIGExID0geCArPSB2ICogaztcblx0ICAgICAgICAgIHN1Ymdyb3Vwc1tkaSArIFwiLVwiICsgZGpdID0ge1xuXHQgICAgICAgICAgICBpbmRleDogZGksXG5cdCAgICAgICAgICAgIHN1YmluZGV4OiBkaixcblx0ICAgICAgICAgICAgc3RhcnRBbmdsZTogYTAsXG5cdCAgICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcblx0ICAgICAgICAgICAgdmFsdWU6IHZcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGdyb3Vwc1tkaV0gPSB7XG5cdCAgICAgICAgICBpbmRleDogZGksXG5cdCAgICAgICAgICBzdGFydEFuZ2xlOiB4MCxcblx0ICAgICAgICAgIGVuZEFuZ2xlOiB4LFxuXHQgICAgICAgICAgdmFsdWU6IGdyb3VwU3Vtc1tkaV1cblx0ICAgICAgICB9O1xuXHQgICAgICAgIHggKz0gcGFkZGluZztcblx0ICAgICAgfVxuXHQgICAgICBpID0gLTE7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgaiA9IGkgLSAxO1xuXHQgICAgICAgIHdoaWxlICgrK2ogPCBuKSB7XG5cdCAgICAgICAgICB2YXIgc291cmNlID0gc3ViZ3JvdXBzW2kgKyBcIi1cIiArIGpdLCB0YXJnZXQgPSBzdWJncm91cHNbaiArIFwiLVwiICsgaV07XG5cdCAgICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuXHQgICAgICAgICAgICBjaG9yZHMucHVzaChzb3VyY2UudmFsdWUgPCB0YXJnZXQudmFsdWUgPyB7XG5cdCAgICAgICAgICAgICAgc291cmNlOiB0YXJnZXQsXG5cdCAgICAgICAgICAgICAgdGFyZ2V0OiBzb3VyY2Vcblx0ICAgICAgICAgICAgfSA6IHtcblx0ICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcblx0ICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHNvcnRDaG9yZHMpIHJlc29ydCgpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVzb3J0KCkge1xuXHQgICAgICBjaG9yZHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdCAgICAgICAgcmV0dXJuIHNvcnRDaG9yZHMoKGEuc291cmNlLnZhbHVlICsgYS50YXJnZXQudmFsdWUpIC8gMiwgKGIuc291cmNlLnZhbHVlICsgYi50YXJnZXQudmFsdWUpIC8gMik7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgY2hvcmQubWF0cml4ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBtYXRyaXg7XG5cdCAgICAgIG4gPSAobWF0cml4ID0geCkgJiYgbWF0cml4Lmxlbmd0aDtcblx0ICAgICAgY2hvcmRzID0gZ3JvdXBzID0gbnVsbDtcblx0ICAgICAgcmV0dXJuIGNob3JkO1xuXHQgICAgfTtcblx0ICAgIGNob3JkLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZGRpbmc7XG5cdCAgICAgIHBhZGRpbmcgPSB4O1xuXHQgICAgICBjaG9yZHMgPSBncm91cHMgPSBudWxsO1xuXHQgICAgICByZXR1cm4gY2hvcmQ7XG5cdCAgICB9O1xuXHQgICAgY2hvcmQuc29ydEdyb3VwcyA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydEdyb3Vwcztcblx0ICAgICAgc29ydEdyb3VwcyA9IHg7XG5cdCAgICAgIGNob3JkcyA9IGdyb3VwcyA9IG51bGw7XG5cdCAgICAgIHJldHVybiBjaG9yZDtcblx0ICAgIH07XG5cdCAgICBjaG9yZC5zb3J0U3ViZ3JvdXBzID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0U3ViZ3JvdXBzO1xuXHQgICAgICBzb3J0U3ViZ3JvdXBzID0geDtcblx0ICAgICAgY2hvcmRzID0gbnVsbDtcblx0ICAgICAgcmV0dXJuIGNob3JkO1xuXHQgICAgfTtcblx0ICAgIGNob3JkLnNvcnRDaG9yZHMgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnRDaG9yZHM7XG5cdCAgICAgIHNvcnRDaG9yZHMgPSB4O1xuXHQgICAgICBpZiAoY2hvcmRzKSByZXNvcnQoKTtcblx0ICAgICAgcmV0dXJuIGNob3JkO1xuXHQgICAgfTtcblx0ICAgIGNob3JkLmNob3JkcyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAoIWNob3JkcykgcmVsYXlvdXQoKTtcblx0ICAgICAgcmV0dXJuIGNob3Jkcztcblx0ICAgIH07XG5cdCAgICBjaG9yZC5ncm91cHMgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKCFncm91cHMpIHJlbGF5b3V0KCk7XG5cdCAgICAgIHJldHVybiBncm91cHM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGNob3JkO1xuXHQgIH07XG5cdCAgZDMubGF5b3V0LmZvcmNlID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgZm9yY2UgPSB7fSwgZXZlbnQgPSBkMy5kaXNwYXRjaChcInN0YXJ0XCIsIFwidGlja1wiLCBcImVuZFwiKSwgdGltZXIsIHNpemUgPSBbIDEsIDEgXSwgZHJhZywgYWxwaGEsIGZyaWN0aW9uID0gLjksIGxpbmtEaXN0YW5jZSA9IGQzX2xheW91dF9mb3JjZUxpbmtEaXN0YW5jZSwgbGlua1N0cmVuZ3RoID0gZDNfbGF5b3V0X2ZvcmNlTGlua1N0cmVuZ3RoLCBjaGFyZ2UgPSAtMzAsIGNoYXJnZURpc3RhbmNlMiA9IGQzX2xheW91dF9mb3JjZUNoYXJnZURpc3RhbmNlMiwgZ3Jhdml0eSA9IC4xLCB0aGV0YTIgPSAuNjQsIG5vZGVzID0gW10sIGxpbmtzID0gW10sIGRpc3RhbmNlcywgc3RyZW5ndGhzLCBjaGFyZ2VzO1xuXHQgICAgZnVuY3Rpb24gcmVwdWxzZShub2RlKSB7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbihxdWFkLCB4MSwgXywgeDIpIHtcblx0ICAgICAgICBpZiAocXVhZC5wb2ludCAhPT0gbm9kZSkge1xuXHQgICAgICAgICAgdmFyIGR4ID0gcXVhZC5jeCAtIG5vZGUueCwgZHkgPSBxdWFkLmN5IC0gbm9kZS55LCBkdyA9IHgyIC0geDEsIGRuID0gZHggKiBkeCArIGR5ICogZHk7XG5cdCAgICAgICAgICBpZiAoZHcgKiBkdyAvIHRoZXRhMiA8IGRuKSB7XG5cdCAgICAgICAgICAgIGlmIChkbiA8IGNoYXJnZURpc3RhbmNlMikge1xuXHQgICAgICAgICAgICAgIHZhciBrID0gcXVhZC5jaGFyZ2UgLyBkbjtcblx0ICAgICAgICAgICAgICBub2RlLnB4IC09IGR4ICogaztcblx0ICAgICAgICAgICAgICBub2RlLnB5IC09IGR5ICogaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChxdWFkLnBvaW50ICYmIGRuICYmIGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG5cdCAgICAgICAgICAgIHZhciBrID0gcXVhZC5wb2ludENoYXJnZSAvIGRuO1xuXHQgICAgICAgICAgICBub2RlLnB4IC09IGR4ICogaztcblx0ICAgICAgICAgICAgbm9kZS5weSAtPSBkeSAqIGs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiAhcXVhZC5jaGFyZ2U7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBmb3JjZS50aWNrID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICgoYWxwaGEgKj0gLjk5KSA8IC4wMDUpIHtcblx0ICAgICAgICB0aW1lciA9IG51bGw7XG5cdCAgICAgICAgZXZlbnQuZW5kKHtcblx0ICAgICAgICAgIHR5cGU6IFwiZW5kXCIsXG5cdCAgICAgICAgICBhbHBoYTogYWxwaGEgPSAwXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIG4gPSBub2Rlcy5sZW5ndGgsIG0gPSBsaW5rcy5sZW5ndGgsIHEsIGksIG8sIHMsIHQsIGwsIGssIHgsIHk7XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHtcblx0ICAgICAgICBvID0gbGlua3NbaV07XG5cdCAgICAgICAgcyA9IG8uc291cmNlO1xuXHQgICAgICAgIHQgPSBvLnRhcmdldDtcblx0ICAgICAgICB4ID0gdC54IC0gcy54O1xuXHQgICAgICAgIHkgPSB0LnkgLSBzLnk7XG5cdCAgICAgICAgaWYgKGwgPSB4ICogeCArIHkgKiB5KSB7XG5cdCAgICAgICAgICBsID0gYWxwaGEgKiBzdHJlbmd0aHNbaV0gKiAoKGwgPSBNYXRoLnNxcnQobCkpIC0gZGlzdGFuY2VzW2ldKSAvIGw7XG5cdCAgICAgICAgICB4ICo9IGw7XG5cdCAgICAgICAgICB5ICo9IGw7XG5cdCAgICAgICAgICB0LnggLT0geCAqIChrID0gcy53ZWlnaHQgKyB0LndlaWdodCA/IHMud2VpZ2h0IC8gKHMud2VpZ2h0ICsgdC53ZWlnaHQpIDogLjUpO1xuXHQgICAgICAgICAgdC55IC09IHkgKiBrO1xuXHQgICAgICAgICAgcy54ICs9IHggKiAoayA9IDEgLSBrKTtcblx0ICAgICAgICAgIHMueSArPSB5ICogaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGsgPSBhbHBoYSAqIGdyYXZpdHkpIHtcblx0ICAgICAgICB4ID0gc2l6ZVswXSAvIDI7XG5cdCAgICAgICAgeSA9IHNpemVbMV0gLyAyO1xuXHQgICAgICAgIGkgPSAtMTtcblx0ICAgICAgICBpZiAoaykgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICAgIG8gPSBub2Rlc1tpXTtcblx0ICAgICAgICAgIG8ueCArPSAoeCAtIG8ueCkgKiBrO1xuXHQgICAgICAgICAgby55ICs9ICh5IC0gby55KSAqIGs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChjaGFyZ2UpIHtcblx0ICAgICAgICBkM19sYXlvdXRfZm9yY2VBY2N1bXVsYXRlKHEgPSBkMy5nZW9tLnF1YWR0cmVlKG5vZGVzKSwgYWxwaGEsIGNoYXJnZXMpO1xuXHQgICAgICAgIGkgPSAtMTtcblx0ICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgICAgaWYgKCEobyA9IG5vZGVzW2ldKS5maXhlZCkge1xuXHQgICAgICAgICAgICBxLnZpc2l0KHJlcHVsc2UobykpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpID0gLTE7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgbyA9IG5vZGVzW2ldO1xuXHQgICAgICAgIGlmIChvLmZpeGVkKSB7XG5cdCAgICAgICAgICBvLnggPSBvLnB4O1xuXHQgICAgICAgICAgby55ID0gby5weTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgby54IC09IChvLnB4IC0gKG8ucHggPSBvLngpKSAqIGZyaWN0aW9uO1xuXHQgICAgICAgICAgby55IC09IChvLnB5IC0gKG8ucHkgPSBvLnkpKSAqIGZyaWN0aW9uO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBldmVudC50aWNrKHtcblx0ICAgICAgICB0eXBlOiBcInRpY2tcIixcblx0ICAgICAgICBhbHBoYTogYWxwaGFcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgZm9yY2Uubm9kZXMgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG5vZGVzO1xuXHQgICAgICBub2RlcyA9IHg7XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5saW5rcyA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbGlua3M7XG5cdCAgICAgIGxpbmtzID0geDtcblx0ICAgICAgcmV0dXJuIGZvcmNlO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLnNpemUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG5cdCAgICAgIHNpemUgPSB4O1xuXHQgICAgICByZXR1cm4gZm9yY2U7XG5cdCAgICB9O1xuXHQgICAgZm9yY2UubGlua0Rpc3RhbmNlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rRGlzdGFuY2U7XG5cdCAgICAgIGxpbmtEaXN0YW5jZSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5kaXN0YW5jZSA9IGZvcmNlLmxpbmtEaXN0YW5jZTtcblx0ICAgIGZvcmNlLmxpbmtTdHJlbmd0aCA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbGlua1N0cmVuZ3RoO1xuXHQgICAgICBsaW5rU3RyZW5ndGggPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuXHQgICAgICByZXR1cm4gZm9yY2U7XG5cdCAgICB9O1xuXHQgICAgZm9yY2UuZnJpY3Rpb24gPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGZyaWN0aW9uO1xuXHQgICAgICBmcmljdGlvbiA9ICt4O1xuXHQgICAgICByZXR1cm4gZm9yY2U7XG5cdCAgICB9O1xuXHQgICAgZm9yY2UuY2hhcmdlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjaGFyZ2U7XG5cdCAgICAgIGNoYXJnZSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5jaGFyZ2VEaXN0YW5jZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gTWF0aC5zcXJ0KGNoYXJnZURpc3RhbmNlMik7XG5cdCAgICAgIGNoYXJnZURpc3RhbmNlMiA9IHggKiB4O1xuXHQgICAgICByZXR1cm4gZm9yY2U7XG5cdCAgICB9O1xuXHQgICAgZm9yY2UuZ3Jhdml0eSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3Jhdml0eTtcblx0ICAgICAgZ3Jhdml0eSA9ICt4O1xuXHQgICAgICByZXR1cm4gZm9yY2U7XG5cdCAgICB9O1xuXHQgICAgZm9yY2UudGhldGEgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCh0aGV0YTIpO1xuXHQgICAgICB0aGV0YTIgPSB4ICogeDtcblx0ICAgICAgcmV0dXJuIGZvcmNlO1xuXHQgICAgfTtcblx0ICAgIGZvcmNlLmFscGhhID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBhbHBoYTtcblx0ICAgICAgeCA9ICt4O1xuXHQgICAgICBpZiAoYWxwaGEpIHtcblx0ICAgICAgICBpZiAoeCA+IDApIHtcblx0ICAgICAgICAgIGFscGhhID0geDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGltZXIuYyA9IG51bGwsIHRpbWVyLnQgPSBOYU4sIHRpbWVyID0gbnVsbDtcblx0ICAgICAgICAgIGV2ZW50LmVuZCh7XG5cdCAgICAgICAgICAgIHR5cGU6IFwiZW5kXCIsXG5cdCAgICAgICAgICAgIGFscGhhOiBhbHBoYSA9IDBcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIGlmICh4ID4gMCkge1xuXHQgICAgICAgIGV2ZW50LnN0YXJ0KHtcblx0ICAgICAgICAgIHR5cGU6IFwic3RhcnRcIixcblx0ICAgICAgICAgIGFscGhhOiBhbHBoYSA9IHhcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aW1lciA9IGQzX3RpbWVyKGZvcmNlLnRpY2spO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBmb3JjZTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbSA9IGxpbmtzLmxlbmd0aCwgdyA9IHNpemVbMF0sIGggPSBzaXplWzFdLCBuZWlnaGJvcnMsIG87XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICAobyA9IG5vZGVzW2ldKS5pbmRleCA9IGk7XG5cdCAgICAgICAgby53ZWlnaHQgPSAwO1xuXHQgICAgICB9XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHtcblx0ICAgICAgICBvID0gbGlua3NbaV07XG5cdCAgICAgICAgaWYgKHR5cGVvZiBvLnNvdXJjZSA9PSBcIm51bWJlclwiKSBvLnNvdXJjZSA9IG5vZGVzW28uc291cmNlXTtcblx0ICAgICAgICBpZiAodHlwZW9mIG8udGFyZ2V0ID09IFwibnVtYmVyXCIpIG8udGFyZ2V0ID0gbm9kZXNbby50YXJnZXRdO1xuXHQgICAgICAgICsrby5zb3VyY2Uud2VpZ2h0O1xuXHQgICAgICAgICsrby50YXJnZXQud2VpZ2h0O1xuXHQgICAgICB9XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICBvID0gbm9kZXNbaV07XG5cdCAgICAgICAgaWYgKGlzTmFOKG8ueCkpIG8ueCA9IHBvc2l0aW9uKFwieFwiLCB3KTtcblx0ICAgICAgICBpZiAoaXNOYU4oby55KSkgby55ID0gcG9zaXRpb24oXCJ5XCIsIGgpO1xuXHQgICAgICAgIGlmIChpc05hTihvLnB4KSkgby5weCA9IG8ueDtcblx0ICAgICAgICBpZiAoaXNOYU4oby5weSkpIG8ucHkgPSBvLnk7XG5cdCAgICAgIH1cblx0ICAgICAgZGlzdGFuY2VzID0gW107XG5cdCAgICAgIGlmICh0eXBlb2YgbGlua0Rpc3RhbmNlID09PSBcImZ1bmN0aW9uXCIpIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIGRpc3RhbmNlc1tpXSA9ICtsaW5rRGlzdGFuY2UuY2FsbCh0aGlzLCBsaW5rc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG07ICsraSkgZGlzdGFuY2VzW2ldID0gbGlua0Rpc3RhbmNlO1xuXHQgICAgICBzdHJlbmd0aHMgPSBbXTtcblx0ICAgICAgaWYgKHR5cGVvZiBsaW5rU3RyZW5ndGggPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc3RyZW5ndGhzW2ldID0gK2xpbmtTdHJlbmd0aC5jYWxsKHRoaXMsIGxpbmtzW2ldLCBpKTsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBzdHJlbmd0aHNbaV0gPSBsaW5rU3RyZW5ndGg7XG5cdCAgICAgIGNoYXJnZXMgPSBbXTtcblx0ICAgICAgaWYgKHR5cGVvZiBjaGFyZ2UgPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hhcmdlc1tpXSA9ICtjaGFyZ2UuY2FsbCh0aGlzLCBub2Rlc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hhcmdlc1tpXSA9IGNoYXJnZTtcblx0ICAgICAgZnVuY3Rpb24gcG9zaXRpb24oZGltZW5zaW9uLCBzaXplKSB7XG5cdCAgICAgICAgaWYgKCFuZWlnaGJvcnMpIHtcblx0ICAgICAgICAgIG5laWdoYm9ycyA9IG5ldyBBcnJheShuKTtcblx0ICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBuOyArK2opIHtcblx0ICAgICAgICAgICAgbmVpZ2hib3JzW2pdID0gW107XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG5cdCAgICAgICAgICAgIHZhciBvID0gbGlua3Nbal07XG5cdCAgICAgICAgICAgIG5laWdoYm9yc1tvLnNvdXJjZS5pbmRleF0ucHVzaChvLnRhcmdldCk7XG5cdCAgICAgICAgICAgIG5laWdoYm9yc1tvLnRhcmdldC5pbmRleF0ucHVzaChvLnNvdXJjZSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBjYW5kaWRhdGVzID0gbmVpZ2hib3JzW2ldLCBqID0gLTEsIGwgPSBjYW5kaWRhdGVzLmxlbmd0aCwgeDtcblx0ICAgICAgICB3aGlsZSAoKytqIDwgbCkgaWYgKCFpc05hTih4ID0gY2FuZGlkYXRlc1tqXVtkaW1lbnNpb25dKSkgcmV0dXJuIHg7XG5cdCAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiBzaXplO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBmb3JjZS5yZXN1bWUoKTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGZvcmNlLmFscGhhKC4xKTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBmb3JjZS5hbHBoYSgwKTtcblx0ICAgIH07XG5cdCAgICBmb3JjZS5kcmFnID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICghZHJhZykgZHJhZyA9IGQzLmJlaGF2aW9yLmRyYWcoKS5vcmlnaW4oZDNfaWRlbnRpdHkpLm9uKFwiZHJhZ3N0YXJ0LmZvcmNlXCIsIGQzX2xheW91dF9mb3JjZURyYWdzdGFydCkub24oXCJkcmFnLmZvcmNlXCIsIGRyYWdtb3ZlKS5vbihcImRyYWdlbmQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlRHJhZ2VuZCk7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRyYWc7XG5cdCAgICAgIHRoaXMub24oXCJtb3VzZW92ZXIuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlTW91c2VvdmVyKS5vbihcIm1vdXNlb3V0LmZvcmNlXCIsIGQzX2xheW91dF9mb3JjZU1vdXNlb3V0KS5jYWxsKGRyYWcpO1xuXHQgICAgfTtcblx0ICAgIGZ1bmN0aW9uIGRyYWdtb3ZlKGQpIHtcblx0ICAgICAgZC5weCA9IGQzLmV2ZW50LngsIGQucHkgPSBkMy5ldmVudC55O1xuXHQgICAgICBmb3JjZS5yZXN1bWUoKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBkMy5yZWJpbmQoZm9yY2UsIGV2ZW50LCBcIm9uXCIpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KGQpIHtcblx0ICAgIGQuZml4ZWQgfD0gMjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ2VuZChkKSB7XG5cdCAgICBkLmZpeGVkICY9IH42O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VNb3VzZW92ZXIoZCkge1xuXHQgICAgZC5maXhlZCB8PSA0O1xuXHQgICAgZC5weCA9IGQueCwgZC5weSA9IGQueTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlTW91c2VvdXQoZCkge1xuXHQgICAgZC5maXhlZCAmPSB+NDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZShxdWFkLCBhbHBoYSwgY2hhcmdlcykge1xuXHQgICAgdmFyIGN4ID0gMCwgY3kgPSAwO1xuXHQgICAgcXVhZC5jaGFyZ2UgPSAwO1xuXHQgICAgaWYgKCFxdWFkLmxlYWYpIHtcblx0ICAgICAgdmFyIG5vZGVzID0gcXVhZC5ub2RlcywgbiA9IG5vZGVzLmxlbmd0aCwgaSA9IC0xLCBjO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgIGMgPSBub2Rlc1tpXTtcblx0ICAgICAgICBpZiAoYyA9PSBudWxsKSBjb250aW51ZTtcblx0ICAgICAgICBkM19sYXlvdXRfZm9yY2VBY2N1bXVsYXRlKGMsIGFscGhhLCBjaGFyZ2VzKTtcblx0ICAgICAgICBxdWFkLmNoYXJnZSArPSBjLmNoYXJnZTtcblx0ICAgICAgICBjeCArPSBjLmNoYXJnZSAqIGMuY3g7XG5cdCAgICAgICAgY3kgKz0gYy5jaGFyZ2UgKiBjLmN5O1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAocXVhZC5wb2ludCkge1xuXHQgICAgICBpZiAoIXF1YWQubGVhZikge1xuXHQgICAgICAgIHF1YWQucG9pbnQueCArPSBNYXRoLnJhbmRvbSgpIC0gLjU7XG5cdCAgICAgICAgcXVhZC5wb2ludC55ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgayA9IGFscGhhICogY2hhcmdlc1txdWFkLnBvaW50LmluZGV4XTtcblx0ICAgICAgcXVhZC5jaGFyZ2UgKz0gcXVhZC5wb2ludENoYXJnZSA9IGs7XG5cdCAgICAgIGN4ICs9IGsgKiBxdWFkLnBvaW50Lng7XG5cdCAgICAgIGN5ICs9IGsgKiBxdWFkLnBvaW50Lnk7XG5cdCAgICB9XG5cdCAgICBxdWFkLmN4ID0gY3ggLyBxdWFkLmNoYXJnZTtcblx0ICAgIHF1YWQuY3kgPSBjeSAvIHF1YWQuY2hhcmdlO1xuXHQgIH1cblx0ICB2YXIgZDNfbGF5b3V0X2ZvcmNlTGlua0Rpc3RhbmNlID0gMjAsIGQzX2xheW91dF9mb3JjZUxpbmtTdHJlbmd0aCA9IDEsIGQzX2xheW91dF9mb3JjZUNoYXJnZURpc3RhbmNlMiA9IEluZmluaXR5O1xuXHQgIGQzLmxheW91dC5oaWVyYXJjaHkgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBzb3J0ID0gZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQsIGNoaWxkcmVuID0gZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuLCB2YWx1ZSA9IGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZTtcblx0ICAgIGZ1bmN0aW9uIGhpZXJhcmNoeShyb290KSB7XG5cdCAgICAgIHZhciBzdGFjayA9IFsgcm9vdCBdLCBub2RlcyA9IFtdLCBub2RlO1xuXHQgICAgICByb290LmRlcHRoID0gMDtcblx0ICAgICAgd2hpbGUgKChub2RlID0gc3RhY2sucG9wKCkpICE9IG51bGwpIHtcblx0ICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuXHQgICAgICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4uY2FsbChoaWVyYXJjaHksIG5vZGUsIG5vZGUuZGVwdGgpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG5cdCAgICAgICAgICB2YXIgbiwgY2hpbGRzLCBjaGlsZDtcblx0ICAgICAgICAgIHdoaWxlICgtLW4gPj0gMCkge1xuXHQgICAgICAgICAgICBzdGFjay5wdXNoKGNoaWxkID0gY2hpbGRzW25dKTtcblx0ICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcblx0ICAgICAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmICh2YWx1ZSkgbm9kZS52YWx1ZSA9IDA7XG5cdCAgICAgICAgICBub2RlLmNoaWxkcmVuID0gY2hpbGRzO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAodmFsdWUpIG5vZGUudmFsdWUgPSArdmFsdWUuY2FsbChoaWVyYXJjaHksIG5vZGUsIG5vZGUuZGVwdGgpIHx8IDA7XG5cdCAgICAgICAgICBkZWxldGUgbm9kZS5jaGlsZHJlbjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICAgIHZhciBjaGlsZHMsIHBhcmVudDtcblx0ICAgICAgICBpZiAoc29ydCAmJiAoY2hpbGRzID0gbm9kZS5jaGlsZHJlbikpIGNoaWxkcy5zb3J0KHNvcnQpO1xuXHQgICAgICAgIGlmICh2YWx1ZSAmJiAocGFyZW50ID0gbm9kZS5wYXJlbnQpKSBwYXJlbnQudmFsdWUgKz0gbm9kZS52YWx1ZTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBub2Rlcztcblx0ICAgIH1cblx0ICAgIGhpZXJhcmNoeS5zb3J0ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0O1xuXHQgICAgICBzb3J0ID0geDtcblx0ICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcblx0ICAgIH07XG5cdCAgICBoaWVyYXJjaHkuY2hpbGRyZW4gPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNoaWxkcmVuO1xuXHQgICAgICBjaGlsZHJlbiA9IHg7XG5cdCAgICAgIHJldHVybiBoaWVyYXJjaHk7XG5cdCAgICB9O1xuXHQgICAgaGllcmFyY2h5LnZhbHVlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZTtcblx0ICAgICAgdmFsdWUgPSB4O1xuXHQgICAgICByZXR1cm4gaGllcmFyY2h5O1xuXHQgICAgfTtcblx0ICAgIGhpZXJhcmNoeS5yZXZhbHVlID0gZnVuY3Rpb24ocm9vdCkge1xuXHQgICAgICBpZiAodmFsdWUpIHtcblx0ICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIG5vZGUudmFsdWUgPSAwO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgICAgICAgIHZhciBwYXJlbnQ7XG5cdCAgICAgICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIG5vZGUudmFsdWUgPSArdmFsdWUuY2FsbChoaWVyYXJjaHksIG5vZGUsIG5vZGUuZGVwdGgpIHx8IDA7XG5cdCAgICAgICAgICBpZiAocGFyZW50ID0gbm9kZS5wYXJlbnQpIHBhcmVudC52YWx1ZSArPSBub2RlLnZhbHVlO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiByb290O1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBoaWVyYXJjaHk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKG9iamVjdCwgaGllcmFyY2h5KSB7XG5cdCAgICBkMy5yZWJpbmQob2JqZWN0LCBoaWVyYXJjaHksIFwic29ydFwiLCBcImNoaWxkcmVuXCIsIFwidmFsdWVcIik7XG5cdCAgICBvYmplY3Qubm9kZXMgPSBvYmplY3Q7XG5cdCAgICBvYmplY3QubGlua3MgPSBkM19sYXlvdXRfaGllcmFyY2h5TGlua3M7XG5cdCAgICByZXR1cm4gb2JqZWN0O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUobm9kZSwgY2FsbGJhY2spIHtcblx0ICAgIHZhciBub2RlcyA9IFsgbm9kZSBdO1xuXHQgICAgd2hpbGUgKChub2RlID0gbm9kZXMucG9wKCkpICE9IG51bGwpIHtcblx0ICAgICAgY2FsbGJhY2sobm9kZSk7XG5cdCAgICAgIGlmICgoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkpIHtcblx0ICAgICAgICB2YXIgbiwgY2hpbGRyZW47XG5cdCAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSBub2Rlcy5wdXNoKGNoaWxkcmVuW25dKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihub2RlLCBjYWxsYmFjaykge1xuXHQgICAgdmFyIG5vZGVzID0gWyBub2RlIF0sIG5vZGVzMiA9IFtdO1xuXHQgICAgd2hpbGUgKChub2RlID0gbm9kZXMucG9wKCkpICE9IG51bGwpIHtcblx0ICAgICAgbm9kZXMyLnB1c2gobm9kZSk7XG5cdCAgICAgIGlmICgoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkpIHtcblx0ICAgICAgICB2YXIgaSA9IC0xLCBuLCBjaGlsZHJlbjtcblx0ICAgICAgICB3aGlsZSAoKytpIDwgbikgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHdoaWxlICgobm9kZSA9IG5vZGVzMi5wb3AoKSkgIT0gbnVsbCkge1xuXHQgICAgICBjYWxsYmFjayhub2RlKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuKGQpIHtcblx0ICAgIHJldHVybiBkLmNoaWxkcmVuO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5VmFsdWUoZCkge1xuXHQgICAgcmV0dXJuIGQudmFsdWU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlTb3J0KGEsIGIpIHtcblx0ICAgIHJldHVybiBiLnZhbHVlIC0gYS52YWx1ZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeUxpbmtzKG5vZGVzKSB7XG5cdCAgICByZXR1cm4gZDMubWVyZ2Uobm9kZXMubWFwKGZ1bmN0aW9uKHBhcmVudCkge1xuXHQgICAgICByZXR1cm4gKHBhcmVudC5jaGlsZHJlbiB8fCBbXSkubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgIHNvdXJjZTogcGFyZW50LFxuXHQgICAgICAgICAgdGFyZ2V0OiBjaGlsZFxuXHQgICAgICAgIH07XG5cdCAgICAgIH0pO1xuXHQgICAgfSkpO1xuXHQgIH1cblx0ICBkMy5sYXlvdXQucGFydGl0aW9uID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLCBzaXplID0gWyAxLCAxIF07XG5cdCAgICBmdW5jdGlvbiBwb3NpdGlvbihub2RlLCB4LCBkeCwgZHkpIHtcblx0ICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcblx0ICAgICAgbm9kZS54ID0geDtcblx0ICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGR5O1xuXHQgICAgICBub2RlLmR4ID0gZHg7XG5cdCAgICAgIG5vZGUuZHkgPSBkeTtcblx0ICAgICAgaWYgKGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuXHQgICAgICAgIHZhciBpID0gLTEsIG4sIGMsIGQ7XG5cdCAgICAgICAgZHggPSBub2RlLnZhbHVlID8gZHggLyBub2RlLnZhbHVlIDogMDtcblx0ICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgICAgcG9zaXRpb24oYyA9IGNoaWxkcmVuW2ldLCB4LCBkID0gYy52YWx1ZSAqIGR4LCBkeSk7XG5cdCAgICAgICAgICB4ICs9IGQ7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBkZXB0aChub2RlKSB7XG5cdCAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIGQgPSAwO1xuXHQgICAgICBpZiAoY2hpbGRyZW4gJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7XG5cdCAgICAgICAgdmFyIGkgPSAtMSwgbjtcblx0ICAgICAgICB3aGlsZSAoKytpIDwgbikgZCA9IE1hdGgubWF4KGQsIGRlcHRoKGNoaWxkcmVuW2ldKSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIDEgKyBkO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcGFydGl0aW9uKGQsIGkpIHtcblx0ICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSk7XG5cdCAgICAgIHBvc2l0aW9uKG5vZGVzWzBdLCAwLCBzaXplWzBdLCBzaXplWzFdIC8gZGVwdGgobm9kZXNbMF0pKTtcblx0ICAgICAgcmV0dXJuIG5vZGVzO1xuXHQgICAgfVxuXHQgICAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG5cdCAgICAgIHNpemUgPSB4O1xuXHQgICAgICByZXR1cm4gcGFydGl0aW9uO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHBhcnRpdGlvbiwgaGllcmFyY2h5KTtcblx0ICB9O1xuXHQgIGQzLmxheW91dC5waWUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciB2YWx1ZSA9IE51bWJlciwgc29ydCA9IGQzX2xheW91dF9waWVTb3J0QnlWYWx1ZSwgc3RhcnRBbmdsZSA9IDAsIGVuZEFuZ2xlID0gz4QsIHBhZEFuZ2xlID0gMDtcblx0ICAgIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG5cdCAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIHZhbHVlcyA9IGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHtcblx0ICAgICAgICByZXR1cm4gK3ZhbHVlLmNhbGwocGllLCBkLCBpKTtcblx0ICAgICAgfSksIGEgPSArKHR5cGVvZiBzdGFydEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzdGFydEFuZ2xlKSwgZGEgPSAodHlwZW9mIGVuZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogZW5kQW5nbGUpIC0gYSwgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sICsodHlwZW9mIHBhZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcGFkQW5nbGUpKSwgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksIHN1bSA9IGQzLnN1bSh2YWx1ZXMpLCBrID0gc3VtID8gKGRhIC0gbiAqIHBhKSAvIHN1bSA6IDAsIGluZGV4ID0gZDMucmFuZ2UobiksIGFyY3MgPSBbXSwgdjtcblx0ICAgICAgaWYgKHNvcnQgIT0gbnVsbCkgaW5kZXguc29ydChzb3J0ID09PSBkM19sYXlvdXRfcGllU29ydEJ5VmFsdWUgPyBmdW5jdGlvbihpLCBqKSB7XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlc1tqXSAtIHZhbHVlc1tpXTtcblx0ICAgICAgfSA6IGZ1bmN0aW9uKGksIGopIHtcblx0ICAgICAgICByZXR1cm4gc29ydChkYXRhW2ldLCBkYXRhW2pdKTtcblx0ICAgICAgfSk7XG5cdCAgICAgIGluZGV4LmZvckVhY2goZnVuY3Rpb24oaSkge1xuXHQgICAgICAgIGFyY3NbaV0gPSB7XG5cdCAgICAgICAgICBkYXRhOiBkYXRhW2ldLFxuXHQgICAgICAgICAgdmFsdWU6IHYgPSB2YWx1ZXNbaV0sXG5cdCAgICAgICAgICBzdGFydEFuZ2xlOiBhLFxuXHQgICAgICAgICAgZW5kQW5nbGU6IGEgKz0gdiAqIGsgKyBwYSxcblx0ICAgICAgICAgIHBhZEFuZ2xlOiBwXG5cdCAgICAgICAgfTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBhcmNzO1xuXHQgICAgfVxuXHQgICAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZTtcblx0ICAgICAgdmFsdWUgPSBfO1xuXHQgICAgICByZXR1cm4gcGllO1xuXHQgICAgfTtcblx0ICAgIHBpZS5zb3J0ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0O1xuXHQgICAgICBzb3J0ID0gXztcblx0ICAgICAgcmV0dXJuIHBpZTtcblx0ICAgIH07XG5cdCAgICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc3RhcnRBbmdsZTtcblx0ICAgICAgc3RhcnRBbmdsZSA9IF87XG5cdCAgICAgIHJldHVybiBwaWU7XG5cdCAgICB9O1xuXHQgICAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcblx0ICAgICAgZW5kQW5nbGUgPSBfO1xuXHQgICAgICByZXR1cm4gcGllO1xuXHQgICAgfTtcblx0ICAgIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkQW5nbGU7XG5cdCAgICAgIHBhZEFuZ2xlID0gXztcblx0ICAgICAgcmV0dXJuIHBpZTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gcGllO1xuXHQgIH07XG5cdCAgdmFyIGQzX2xheW91dF9waWVTb3J0QnlWYWx1ZSA9IHt9O1xuXHQgIGQzLmxheW91dC5zdGFjayA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHZhbHVlcyA9IGQzX2lkZW50aXR5LCBvcmRlciA9IGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdCwgb2Zmc2V0ID0gZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVybywgb3V0ID0gZDNfbGF5b3V0X3N0YWNrT3V0LCB4ID0gZDNfbGF5b3V0X3N0YWNrWCwgeSA9IGQzX2xheW91dF9zdGFja1k7XG5cdCAgICBmdW5jdGlvbiBzdGFjayhkYXRhLCBpbmRleCkge1xuXHQgICAgICBpZiAoIShuID0gZGF0YS5sZW5ndGgpKSByZXR1cm4gZGF0YTtcblx0ICAgICAgdmFyIHNlcmllcyA9IGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHtcblx0ICAgICAgICByZXR1cm4gdmFsdWVzLmNhbGwoc3RhY2ssIGQsIGkpO1xuXHQgICAgICB9KTtcblx0ICAgICAgdmFyIHBvaW50cyA9IHNlcmllcy5tYXAoZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIHJldHVybiBkLm1hcChmdW5jdGlvbih2LCBpKSB7XG5cdCAgICAgICAgICByZXR1cm4gWyB4LmNhbGwoc3RhY2ssIHYsIGkpLCB5LmNhbGwoc3RhY2ssIHYsIGkpIF07XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHQgICAgICB2YXIgb3JkZXJzID0gb3JkZXIuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG5cdCAgICAgIHNlcmllcyA9IGQzLnBlcm11dGUoc2VyaWVzLCBvcmRlcnMpO1xuXHQgICAgICBwb2ludHMgPSBkMy5wZXJtdXRlKHBvaW50cywgb3JkZXJzKTtcblx0ICAgICAgdmFyIG9mZnNldHMgPSBvZmZzZXQuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG5cdCAgICAgIHZhciBtID0gc2VyaWVzWzBdLmxlbmd0aCwgbiwgaSwgaiwgbztcblx0ICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuXHQgICAgICAgIG91dC5jYWxsKHN0YWNrLCBzZXJpZXNbMF1bal0sIG8gPSBvZmZzZXRzW2pdLCBwb2ludHNbMF1bal1bMV0pO1xuXHQgICAgICAgIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICAgIG91dC5jYWxsKHN0YWNrLCBzZXJpZXNbaV1bal0sIG8gKz0gcG9pbnRzW2kgLSAxXVtqXVsxXSwgcG9pbnRzW2ldW2pdWzFdKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGRhdGE7XG5cdCAgICB9XG5cdCAgICBzdGFjay52YWx1ZXMgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlcztcblx0ICAgICAgdmFsdWVzID0geDtcblx0ICAgICAgcmV0dXJuIHN0YWNrO1xuXHQgICAgfTtcblx0ICAgIHN0YWNrLm9yZGVyID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmRlcjtcblx0ICAgICAgb3JkZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGQzX2xheW91dF9zdGFja09yZGVycy5nZXQoeCkgfHwgZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0O1xuXHQgICAgICByZXR1cm4gc3RhY2s7XG5cdCAgICB9O1xuXHQgICAgc3RhY2sub2Zmc2V0ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvZmZzZXQ7XG5cdCAgICAgIG9mZnNldCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogZDNfbGF5b3V0X3N0YWNrT2Zmc2V0cy5nZXQoeCkgfHwgZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVybztcblx0ICAgICAgcmV0dXJuIHN0YWNrO1xuXHQgICAgfTtcblx0ICAgIHN0YWNrLnggPSBmdW5jdGlvbih6KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHg7XG5cdCAgICAgIHggPSB6O1xuXHQgICAgICByZXR1cm4gc3RhY2s7XG5cdCAgICB9O1xuXHQgICAgc3RhY2sueSA9IGZ1bmN0aW9uKHopIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTtcblx0ICAgICAgeSA9IHo7XG5cdCAgICAgIHJldHVybiBzdGFjaztcblx0ICAgIH07XG5cdCAgICBzdGFjay5vdXQgPSBmdW5jdGlvbih6KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dDtcblx0ICAgICAgb3V0ID0gejtcblx0ICAgICAgcmV0dXJuIHN0YWNrO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBzdGFjaztcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1goZCkge1xuXHQgICAgcmV0dXJuIGQueDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrWShkKSB7XG5cdCAgICByZXR1cm4gZC55O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tPdXQoZCwgeTAsIHkpIHtcblx0ICAgIGQueTAgPSB5MDtcblx0ICAgIGQueSA9IHk7XG5cdCAgfVxuXHQgIHZhciBkM19sYXlvdXRfc3RhY2tPcmRlcnMgPSBkMy5tYXAoe1xuXHQgICAgXCJpbnNpZGUtb3V0XCI6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgaSwgaiwgbWF4ID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgpLCBzdW1zID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKSwgaW5kZXggPSBkMy5yYW5nZShuKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0ICAgICAgICByZXR1cm4gbWF4W2FdIC0gbWF4W2JdO1xuXHQgICAgICB9KSwgdG9wID0gMCwgYm90dG9tID0gMCwgdG9wcyA9IFtdLCBib3R0b21zID0gW107XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICBqID0gaW5kZXhbaV07XG5cdCAgICAgICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuXHQgICAgICAgICAgdG9wICs9IHN1bXNbal07XG5cdCAgICAgICAgICB0b3BzLnB1c2goaik7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xuXHQgICAgICAgICAgYm90dG9tcy5wdXNoKGopO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gYm90dG9tcy5yZXZlcnNlKCkuY29uY2F0KHRvcHMpO1xuXHQgICAgfSxcblx0ICAgIHJldmVyc2U6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgcmV0dXJuIGQzLnJhbmdlKGRhdGEubGVuZ3RoKS5yZXZlcnNlKCk7XG5cdCAgICB9LFxuXHQgICAgXCJkZWZhdWx0XCI6IGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdFxuXHQgIH0pO1xuXHQgIHZhciBkM19sYXlvdXRfc3RhY2tPZmZzZXRzID0gZDMubWFwKHtcblx0ICAgIHNpbGhvdWV0dGU6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgbSA9IGRhdGFbMF0ubGVuZ3RoLCBzdW1zID0gW10sIG1heCA9IDAsIGksIGosIG8sIHkwID0gW107XG5cdCAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcblx0ICAgICAgICBmb3IgKGkgPSAwLCBvID0gMDsgaSA8IG47IGkrKykgbyArPSBkYXRhW2ldW2pdWzFdO1xuXHQgICAgICAgIGlmIChvID4gbWF4KSBtYXggPSBvO1xuXHQgICAgICAgIHN1bXMucHVzaChvKTtcblx0ICAgICAgfVxuXHQgICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG5cdCAgICAgICAgeTBbal0gPSAobWF4IC0gc3Vtc1tqXSkgLyAyO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB5MDtcblx0ICAgIH0sXG5cdCAgICB3aWdnbGU6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgeCA9IGRhdGFbMF0sIG0gPSB4Lmxlbmd0aCwgaSwgaiwgaywgczEsIHMyLCBzMywgZHgsIG8sIG8wLCB5MCA9IFtdO1xuXHQgICAgICB5MFswXSA9IG8gPSBvMCA9IDA7XG5cdCAgICAgIGZvciAoaiA9IDE7IGogPCBtOyArK2opIHtcblx0ICAgICAgICBmb3IgKGkgPSAwLCBzMSA9IDA7IGkgPCBuOyArK2kpIHMxICs9IGRhdGFbaV1bal1bMV07XG5cdCAgICAgICAgZm9yIChpID0gMCwgczIgPSAwLCBkeCA9IHhbal1bMF0gLSB4W2ogLSAxXVswXTsgaSA8IG47ICsraSkge1xuXHQgICAgICAgICAgZm9yIChrID0gMCwgczMgPSAoZGF0YVtpXVtqXVsxXSAtIGRhdGFbaV1baiAtIDFdWzFdKSAvICgyICogZHgpOyBrIDwgaTsgKytrKSB7XG5cdCAgICAgICAgICAgIHMzICs9IChkYXRhW2tdW2pdWzFdIC0gZGF0YVtrXVtqIC0gMV1bMV0pIC8gZHg7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBzMiArPSBzMyAqIGRhdGFbaV1bal1bMV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHkwW2pdID0gbyAtPSBzMSA/IHMyIC8gczEgKiBkeCA6IDA7XG5cdCAgICAgICAgaWYgKG8gPCBvMCkgbzAgPSBvO1xuXHQgICAgICB9XG5cdCAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHkwW2pdIC09IG8wO1xuXHQgICAgICByZXR1cm4geTA7XG5cdCAgICB9LFxuXHQgICAgZXhwYW5kOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIG0gPSBkYXRhWzBdLmxlbmd0aCwgayA9IDEgLyBuLCBpLCBqLCBvLCB5MCA9IFtdO1xuXHQgICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG5cdCAgICAgICAgZm9yIChpID0gMCwgbyA9IDA7IGkgPCBuOyBpKyspIG8gKz0gZGF0YVtpXVtqXVsxXTtcblx0ICAgICAgICBpZiAobykgZm9yIChpID0gMDsgaSA8IG47IGkrKykgZGF0YVtpXVtqXVsxXSAvPSBvOyBlbHNlIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGRhdGFbaV1bal1bMV0gPSBrO1xuXHQgICAgICB9XG5cdCAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHkwW2pdID0gMDtcblx0ICAgICAgcmV0dXJuIHkwO1xuXHQgICAgfSxcblx0ICAgIHplcm86IGQzX2xheW91dF9zdGFja09mZnNldFplcm9cblx0ICB9KTtcblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQoZGF0YSkge1xuXHQgICAgcmV0dXJuIGQzLnJhbmdlKGRhdGEubGVuZ3RoKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVybyhkYXRhKSB7XG5cdCAgICB2YXIgaiA9IC0xLCBtID0gZGF0YVswXS5sZW5ndGgsIHkwID0gW107XG5cdCAgICB3aGlsZSAoKytqIDwgbSkgeTBbal0gPSAwO1xuXHQgICAgcmV0dXJuIHkwO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tNYXhJbmRleChhcnJheSkge1xuXHQgICAgdmFyIGkgPSAxLCBqID0gMCwgdiA9IGFycmF5WzBdWzFdLCBrLCBuID0gYXJyYXkubGVuZ3RoO1xuXHQgICAgZm9yICg7aSA8IG47ICsraSkge1xuXHQgICAgICBpZiAoKGsgPSBhcnJheVtpXVsxXSkgPiB2KSB7XG5cdCAgICAgICAgaiA9IGk7XG5cdCAgICAgICAgdiA9IGs7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBqO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tSZWR1Y2VTdW0oZCkge1xuXHQgICAgcmV0dXJuIGQucmVkdWNlKGQzX2xheW91dF9zdGFja1N1bSwgMCk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1N1bShwLCBkKSB7XG5cdCAgICByZXR1cm4gcCArIGRbMV07XG5cdCAgfVxuXHQgIGQzLmxheW91dC5oaXN0b2dyYW0gPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBmcmVxdWVuY3kgPSB0cnVlLCB2YWx1ZXIgPSBOdW1iZXIsIHJhbmdlciA9IGQzX2xheW91dF9oaXN0b2dyYW1SYW5nZSwgYmlubmVyID0gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpblN0dXJnZXM7XG5cdCAgICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSwgaSkge1xuXHQgICAgICB2YXIgYmlucyA9IFtdLCB2YWx1ZXMgPSBkYXRhLm1hcCh2YWx1ZXIsIHRoaXMpLCByYW5nZSA9IHJhbmdlci5jYWxsKHRoaXMsIHZhbHVlcywgaSksIHRocmVzaG9sZHMgPSBiaW5uZXIuY2FsbCh0aGlzLCByYW5nZSwgdmFsdWVzLCBpKSwgYmluLCBpID0gLTEsIG4gPSB2YWx1ZXMubGVuZ3RoLCBtID0gdGhyZXNob2xkcy5sZW5ndGggLSAxLCBrID0gZnJlcXVlbmN5ID8gMSA6IDEgLyBuLCB4O1xuXHQgICAgICB3aGlsZSAoKytpIDwgbSkge1xuXHQgICAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcblx0ICAgICAgICBiaW4uZHggPSB0aHJlc2hvbGRzW2kgKyAxXSAtIChiaW4ueCA9IHRocmVzaG9sZHNbaV0pO1xuXHQgICAgICAgIGJpbi55ID0gMDtcblx0ICAgICAgfVxuXHQgICAgICBpZiAobSA+IDApIHtcblx0ICAgICAgICBpID0gLTE7XG5cdCAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgICAgIHggPSB2YWx1ZXNbaV07XG5cdCAgICAgICAgICBpZiAoeCA+PSByYW5nZVswXSAmJiB4IDw9IHJhbmdlWzFdKSB7XG5cdCAgICAgICAgICAgIGJpbiA9IGJpbnNbZDMuYmlzZWN0KHRocmVzaG9sZHMsIHgsIDEsIG0pIC0gMV07XG5cdCAgICAgICAgICAgIGJpbi55ICs9IGs7XG5cdCAgICAgICAgICAgIGJpbi5wdXNoKGRhdGFbaV0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gYmlucztcblx0ICAgIH1cblx0ICAgIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWVyO1xuXHQgICAgICB2YWx1ZXIgPSB4O1xuXHQgICAgICByZXR1cm4gaGlzdG9ncmFtO1xuXHQgICAgfTtcblx0ICAgIGhpc3RvZ3JhbS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2VyO1xuXHQgICAgICByYW5nZXIgPSBkM19mdW5jdG9yKHgpO1xuXHQgICAgICByZXR1cm4gaGlzdG9ncmFtO1xuXHQgICAgfTtcblx0ICAgIGhpc3RvZ3JhbS5iaW5zID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBiaW5uZXI7XG5cdCAgICAgIGJpbm5lciA9IHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gZnVuY3Rpb24ocmFuZ2UpIHtcblx0ICAgICAgICByZXR1cm4gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpbkZpeGVkKHJhbmdlLCB4KTtcblx0ICAgICAgfSA6IGQzX2Z1bmN0b3IoeCk7XG5cdCAgICAgIHJldHVybiBoaXN0b2dyYW07XG5cdCAgICB9O1xuXHQgICAgaGlzdG9ncmFtLmZyZXF1ZW5jeSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZnJlcXVlbmN5O1xuXHQgICAgICBmcmVxdWVuY3kgPSAhIXg7XG5cdCAgICAgIHJldHVybiBoaXN0b2dyYW07XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGhpc3RvZ3JhbTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1CaW5TdHVyZ2VzKHJhbmdlLCB2YWx1ZXMpIHtcblx0ICAgIHJldHVybiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yICsgMSkpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIG4pIHtcblx0ICAgIHZhciB4ID0gLTEsIGIgPSArcmFuZ2VbMF0sIG0gPSAocmFuZ2VbMV0gLSBiKSAvIG4sIGYgPSBbXTtcblx0ICAgIHdoaWxlICgrK3ggPD0gbikgZlt4XSA9IG0gKiB4ICsgYjtcblx0ICAgIHJldHVybiBmO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfaGlzdG9ncmFtUmFuZ2UodmFsdWVzKSB7XG5cdCAgICByZXR1cm4gWyBkMy5taW4odmFsdWVzKSwgZDMubWF4KHZhbHVlcykgXTtcblx0ICB9XG5cdCAgZDMubGF5b3V0LnBhY2sgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChkM19sYXlvdXRfcGFja1NvcnQpLCBwYWRkaW5nID0gMCwgc2l6ZSA9IFsgMSwgMSBdLCByYWRpdXM7XG5cdCAgICBmdW5jdGlvbiBwYWNrKGQsIGkpIHtcblx0ICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSksIHJvb3QgPSBub2Rlc1swXSwgdyA9IHNpemVbMF0sIGggPSBzaXplWzFdLCByID0gcmFkaXVzID09IG51bGwgPyBNYXRoLnNxcnQgOiB0eXBlb2YgcmFkaXVzID09PSBcImZ1bmN0aW9uXCIgPyByYWRpdXMgOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gcmFkaXVzO1xuXHQgICAgICB9O1xuXHQgICAgICByb290LnggPSByb290LnkgPSAwO1xuXHQgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgZC5yID0gK3IoZC52YWx1ZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBkM19sYXlvdXRfcGFja1NpYmxpbmdzKTtcblx0ICAgICAgaWYgKHBhZGRpbmcpIHtcblx0ICAgICAgICB2YXIgZHIgPSBwYWRkaW5nICogKHJhZGl1cyA/IDEgOiBNYXRoLm1heCgyICogcm9vdC5yIC8gdywgMiAqIHJvb3QuciAvIGgpKSAvIDI7XG5cdCAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24oZCkge1xuXHQgICAgICAgICAgZC5yICs9IGRyO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGQzX2xheW91dF9wYWNrU2libGluZ3MpO1xuXHQgICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICAgIGQuciAtPSBkcjtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgICBkM19sYXlvdXRfcGFja1RyYW5zZm9ybShyb290LCB3IC8gMiwgaCAvIDIsIHJhZGl1cyA/IDEgOiAxIC8gTWF0aC5tYXgoMiAqIHJvb3QuciAvIHcsIDIgKiByb290LnIgLyBoKSk7XG5cdCAgICAgIHJldHVybiBub2Rlcztcblx0ICAgIH1cblx0ICAgIHBhY2suc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcblx0ICAgICAgc2l6ZSA9IF87XG5cdCAgICAgIHJldHVybiBwYWNrO1xuXHQgICAgfTtcblx0ICAgIHBhY2sucmFkaXVzID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYWRpdXM7XG5cdCAgICAgIHJhZGl1cyA9IF8gPT0gbnVsbCB8fCB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6ICtfO1xuXHQgICAgICByZXR1cm4gcGFjaztcblx0ICAgIH07XG5cdCAgICBwYWNrLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZGRpbmc7XG5cdCAgICAgIHBhZGRpbmcgPSArXztcblx0ICAgICAgcmV0dXJuIHBhY2s7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQocGFjaywgaGllcmFyY2h5KTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU29ydChhLCBiKSB7XG5cdCAgICByZXR1cm4gYS52YWx1ZSAtIGIudmFsdWU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGIpIHtcblx0ICAgIHZhciBjID0gYS5fcGFja19uZXh0O1xuXHQgICAgYS5fcGFja19uZXh0ID0gYjtcblx0ICAgIGIuX3BhY2tfcHJldiA9IGE7XG5cdCAgICBiLl9wYWNrX25leHQgPSBjO1xuXHQgICAgYy5fcGFja19wcmV2ID0gYjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tTcGxpY2UoYSwgYikge1xuXHQgICAgYS5fcGFja19uZXh0ID0gYjtcblx0ICAgIGIuX3BhY2tfcHJldiA9IGE7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhhLCBiKSB7XG5cdCAgICB2YXIgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55LCBkciA9IGEuciArIGIucjtcblx0ICAgIHJldHVybiAuOTk5ICogZHIgKiBkciA+IGR4ICogZHggKyBkeSAqIGR5O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1NpYmxpbmdzKG5vZGUpIHtcblx0ICAgIGlmICghKG5vZGVzID0gbm9kZS5jaGlsZHJlbikgfHwgIShuID0gbm9kZXMubGVuZ3RoKSkgcmV0dXJuO1xuXHQgICAgdmFyIG5vZGVzLCB4TWluID0gSW5maW5pdHksIHhNYXggPSAtSW5maW5pdHksIHlNaW4gPSBJbmZpbml0eSwgeU1heCA9IC1JbmZpbml0eSwgYSwgYiwgYywgaSwgaiwgaywgbjtcblx0ICAgIGZ1bmN0aW9uIGJvdW5kKG5vZGUpIHtcblx0ICAgICAgeE1pbiA9IE1hdGgubWluKG5vZGUueCAtIG5vZGUuciwgeE1pbik7XG5cdCAgICAgIHhNYXggPSBNYXRoLm1heChub2RlLnggKyBub2RlLnIsIHhNYXgpO1xuXHQgICAgICB5TWluID0gTWF0aC5taW4obm9kZS55IC0gbm9kZS5yLCB5TWluKTtcblx0ICAgICAgeU1heCA9IE1hdGgubWF4KG5vZGUueSArIG5vZGUuciwgeU1heCk7XG5cdCAgICB9XG5cdCAgICBub2Rlcy5mb3JFYWNoKGQzX2xheW91dF9wYWNrTGluayk7XG5cdCAgICBhID0gbm9kZXNbMF07XG5cdCAgICBhLnggPSAtYS5yO1xuXHQgICAgYS55ID0gMDtcblx0ICAgIGJvdW5kKGEpO1xuXHQgICAgaWYgKG4gPiAxKSB7XG5cdCAgICAgIGIgPSBub2Rlc1sxXTtcblx0ICAgICAgYi54ID0gYi5yO1xuXHQgICAgICBiLnkgPSAwO1xuXHQgICAgICBib3VuZChiKTtcblx0ICAgICAgaWYgKG4gPiAyKSB7XG5cdCAgICAgICAgYyA9IG5vZGVzWzJdO1xuXHQgICAgICAgIGQzX2xheW91dF9wYWNrUGxhY2UoYSwgYiwgYyk7XG5cdCAgICAgICAgYm91bmQoYyk7XG5cdCAgICAgICAgZDNfbGF5b3V0X3BhY2tJbnNlcnQoYSwgYyk7XG5cdCAgICAgICAgYS5fcGFja19wcmV2ID0gYztcblx0ICAgICAgICBkM19sYXlvdXRfcGFja0luc2VydChjLCBiKTtcblx0ICAgICAgICBiID0gYS5fcGFja19uZXh0O1xuXHQgICAgICAgIGZvciAoaSA9IDM7IGkgPCBuOyBpKyspIHtcblx0ICAgICAgICAgIGQzX2xheW91dF9wYWNrUGxhY2UoYSwgYiwgYyA9IG5vZGVzW2ldKTtcblx0ICAgICAgICAgIHZhciBpc2VjdCA9IDAsIHMxID0gMSwgczIgPSAxO1xuXHQgICAgICAgICAgZm9yIChqID0gYi5fcGFja19uZXh0OyBqICE9PSBiOyBqID0gai5fcGFja19uZXh0LCBzMSsrKSB7XG5cdCAgICAgICAgICAgIGlmIChkM19sYXlvdXRfcGFja0ludGVyc2VjdHMoaiwgYykpIHtcblx0ICAgICAgICAgICAgICBpc2VjdCA9IDE7XG5cdCAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChpc2VjdCA9PSAxKSB7XG5cdCAgICAgICAgICAgIGZvciAoayA9IGEuX3BhY2tfcHJldjsgayAhPT0gai5fcGFja19wcmV2OyBrID0gay5fcGFja19wcmV2LCBzMisrKSB7XG5cdCAgICAgICAgICAgICAgaWYgKGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhrLCBjKSkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoaXNlY3QpIHtcblx0ICAgICAgICAgICAgaWYgKHMxIDwgczIgfHwgczEgPT0gczIgJiYgYi5yIDwgYS5yKSBkM19sYXlvdXRfcGFja1NwbGljZShhLCBiID0gaik7IGVsc2UgZDNfbGF5b3V0X3BhY2tTcGxpY2UoYSA9IGssIGIpO1xuXHQgICAgICAgICAgICBpLS07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBkM19sYXlvdXRfcGFja0luc2VydChhLCBjKTtcblx0ICAgICAgICAgICAgYiA9IGM7XG5cdCAgICAgICAgICAgIGJvdW5kKGMpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgdmFyIGN4ID0gKHhNaW4gKyB4TWF4KSAvIDIsIGN5ID0gKHlNaW4gKyB5TWF4KSAvIDIsIGNyID0gMDtcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0ICAgICAgYyA9IG5vZGVzW2ldO1xuXHQgICAgICBjLnggLT0gY3g7XG5cdCAgICAgIGMueSAtPSBjeTtcblx0ICAgICAgY3IgPSBNYXRoLm1heChjciwgYy5yICsgTWF0aC5zcXJ0KGMueCAqIGMueCArIGMueSAqIGMueSkpO1xuXHQgICAgfVxuXHQgICAgbm9kZS5yID0gY3I7XG5cdCAgICBub2Rlcy5mb3JFYWNoKGQzX2xheW91dF9wYWNrVW5saW5rKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tMaW5rKG5vZGUpIHtcblx0ICAgIG5vZGUuX3BhY2tfbmV4dCA9IG5vZGUuX3BhY2tfcHJldiA9IG5vZGU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrVW5saW5rKG5vZGUpIHtcblx0ICAgIGRlbGV0ZSBub2RlLl9wYWNrX25leHQ7XG5cdCAgICBkZWxldGUgbm9kZS5fcGFja19wcmV2O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1RyYW5zZm9ybShub2RlLCB4LCB5LCBrKSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuXHQgICAgbm9kZS54ID0geCArPSBrICogbm9kZS54O1xuXHQgICAgbm9kZS55ID0geSArPSBrICogbm9kZS55O1xuXHQgICAgbm9kZS5yICo9IGs7XG5cdCAgICBpZiAoY2hpbGRyZW4pIHtcblx0ICAgICAgdmFyIGkgPSAtMSwgbiA9IGNoaWxkcmVuLmxlbmd0aDtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKGNoaWxkcmVuW2ldLCB4LCB5LCBrKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjKSB7XG5cdCAgICB2YXIgZGIgPSBhLnIgKyBjLnIsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcblx0ICAgIGlmIChkYiAmJiAoZHggfHwgZHkpKSB7XG5cdCAgICAgIHZhciBkYSA9IGIuciArIGMuciwgZGMgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblx0ICAgICAgZGEgKj0gZGE7XG5cdCAgICAgIGRiICo9IGRiO1xuXHQgICAgICB2YXIgeCA9IC41ICsgKGRiIC0gZGEpIC8gKDIgKiBkYyksIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgMiAqIGRhICogKGRiICsgZGMpIC0gKGRiIC09IGRjKSAqIGRiIC0gZGEgKiBkYSkpIC8gKDIgKiBkYyk7XG5cdCAgICAgIGMueCA9IGEueCArIHggKiBkeCArIHkgKiBkeTtcblx0ICAgICAgYy55ID0gYS55ICsgeCAqIGR5IC0geSAqIGR4O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgYy54ID0gYS54ICsgZGI7XG5cdCAgICAgIGMueSA9IGEueTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZDMubGF5b3V0LnRyZWUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChudWxsKS52YWx1ZShudWxsKSwgc2VwYXJhdGlvbiA9IGQzX2xheW91dF90cmVlU2VwYXJhdGlvbiwgc2l6ZSA9IFsgMSwgMSBdLCBub2RlU2l6ZSA9IG51bGw7XG5cdCAgICBmdW5jdGlvbiB0cmVlKGQsIGkpIHtcblx0ICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSksIHJvb3QwID0gbm9kZXNbMF0sIHJvb3QxID0gd3JhcFRyZWUocm9vdDApO1xuXHQgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290MSwgZmlyc3RXYWxrKSwgcm9vdDEucGFyZW50Lm0gPSAtcm9vdDEuejtcblx0ICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKHJvb3QxLCBzZWNvbmRXYWxrKTtcblx0ICAgICAgaWYgKG5vZGVTaXplKSBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDAsIHNpemVOb2RlKTsgZWxzZSB7XG5cdCAgICAgICAgdmFyIGxlZnQgPSByb290MCwgcmlnaHQgPSByb290MCwgYm90dG9tID0gcm9vdDA7XG5cdCAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKHJvb3QwLCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgICBpZiAobm9kZS54IDwgbGVmdC54KSBsZWZ0ID0gbm9kZTtcblx0ICAgICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG5cdCAgICAgICAgICBpZiAobm9kZS5kZXB0aCA+IGJvdHRvbS5kZXB0aCkgYm90dG9tID0gbm9kZTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB2YXIgdHggPSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIgLSBsZWZ0LngsIGt4ID0gc2l6ZVswXSAvIChyaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyICsgdHgpLCBreSA9IHNpemVbMV0gLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuXHQgICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICAgICAgbm9kZS54ID0gKG5vZGUueCArIHR4KSAqIGt4O1xuXHQgICAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBub2Rlcztcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHdyYXBUcmVlKHJvb3QwKSB7XG5cdCAgICAgIHZhciByb290MSA9IHtcblx0ICAgICAgICBBOiBudWxsLFxuXHQgICAgICAgIGNoaWxkcmVuOiBbIHJvb3QwIF1cblx0ICAgICAgfSwgcXVldWUgPSBbIHJvb3QxIF0sIG5vZGUxO1xuXHQgICAgICB3aGlsZSAoKG5vZGUxID0gcXVldWUucG9wKCkpICE9IG51bGwpIHtcblx0ICAgICAgICBmb3IgKHZhciBjaGlsZHJlbiA9IG5vZGUxLmNoaWxkcmVuLCBjaGlsZCwgaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcblx0ICAgICAgICAgIHF1ZXVlLnB1c2goKGNoaWxkcmVuW2ldID0gY2hpbGQgPSB7XG5cdCAgICAgICAgICAgIF86IGNoaWxkcmVuW2ldLFxuXHQgICAgICAgICAgICBwYXJlbnQ6IG5vZGUxLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogKGNoaWxkID0gY2hpbGRyZW5baV0uY2hpbGRyZW4pICYmIGNoaWxkLnNsaWNlKCkgfHwgW10sXG5cdCAgICAgICAgICAgIEE6IG51bGwsXG5cdCAgICAgICAgICAgIGE6IG51bGwsXG5cdCAgICAgICAgICAgIHo6IDAsXG5cdCAgICAgICAgICAgIG06IDAsXG5cdCAgICAgICAgICAgIGM6IDAsXG5cdCAgICAgICAgICAgIHM6IDAsXG5cdCAgICAgICAgICAgIHQ6IG51bGwsXG5cdCAgICAgICAgICAgIGk6IGlcblx0ICAgICAgICAgIH0pLmEgPSBjaGlsZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiByb290MS5jaGlsZHJlblswXTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGZpcnN0V2Fsayh2KSB7XG5cdCAgICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG5cdCAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgICAgICBkM19sYXlvdXRfdHJlZVNoaWZ0KHYpO1xuXHQgICAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xuXHQgICAgICAgIGlmICh3KSB7XG5cdCAgICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcblx0ICAgICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2LnogPSBtaWRwb2ludDtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAodykge1xuXHQgICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuXHQgICAgICB9XG5cdCAgICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzZWNvbmRXYWxrKHYpIHtcblx0ICAgICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xuXHQgICAgICB2Lm0gKz0gdi5wYXJlbnQubTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuXHQgICAgICBpZiAodykge1xuXHQgICAgICAgIHZhciB2aXAgPSB2LCB2b3AgPSB2LCB2aW0gPSB3LCB2b20gPSB2aXAucGFyZW50LmNoaWxkcmVuWzBdLCBzaXAgPSB2aXAubSwgc29wID0gdm9wLm0sIHNpbSA9IHZpbS5tLCBzb20gPSB2b20ubSwgc2hpZnQ7XG5cdCAgICAgICAgd2hpbGUgKHZpbSA9IGQzX2xheW91dF90cmVlUmlnaHQodmltKSwgdmlwID0gZDNfbGF5b3V0X3RyZWVMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcblx0ICAgICAgICAgIHZvbSA9IGQzX2xheW91dF90cmVlTGVmdCh2b20pO1xuXHQgICAgICAgICAgdm9wID0gZDNfbGF5b3V0X3RyZWVSaWdodCh2b3ApO1xuXHQgICAgICAgICAgdm9wLmEgPSB2O1xuXHQgICAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuXHQgICAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuXHQgICAgICAgICAgICBkM19sYXlvdXRfdHJlZU1vdmUoZDNfbGF5b3V0X3RyZWVBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSwgdiwgc2hpZnQpO1xuXHQgICAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG5cdCAgICAgICAgICAgIHNvcCArPSBzaGlmdDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHNpbSArPSB2aW0ubTtcblx0ICAgICAgICAgIHNpcCArPSB2aXAubTtcblx0ICAgICAgICAgIHNvbSArPSB2b20ubTtcblx0ICAgICAgICAgIHNvcCArPSB2b3AubTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHZpbSAmJiAhZDNfbGF5b3V0X3RyZWVSaWdodCh2b3ApKSB7XG5cdCAgICAgICAgICB2b3AudCA9IHZpbTtcblx0ICAgICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHZpcCAmJiAhZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSkpIHtcblx0ICAgICAgICAgIHZvbS50ID0gdmlwO1xuXHQgICAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuXHQgICAgICAgICAgYW5jZXN0b3IgPSB2O1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gYW5jZXN0b3I7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzaXplTm9kZShub2RlKSB7XG5cdCAgICAgIG5vZGUueCAqPSBzaXplWzBdO1xuXHQgICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogc2l6ZVsxXTtcblx0ICAgIH1cblx0ICAgIHRyZWUuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2VwYXJhdGlvbjtcblx0ICAgICAgc2VwYXJhdGlvbiA9IHg7XG5cdCAgICAgIHJldHVybiB0cmVlO1xuXHQgICAgfTtcblx0ICAgIHRyZWUuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBudWxsIDogc2l6ZTtcblx0ICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBzaXplTm9kZSA6IG51bGw7XG5cdCAgICAgIHJldHVybiB0cmVlO1xuXHQgICAgfTtcblx0ICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG5vZGVTaXplID8gc2l6ZSA6IG51bGw7XG5cdCAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSA9PSBudWxsID8gbnVsbCA6IHNpemVOb2RlO1xuXHQgICAgICByZXR1cm4gdHJlZTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZCh0cmVlLCBoaWVyYXJjaHkpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uKGEsIGIpIHtcblx0ICAgIHJldHVybiBhLnBhcmVudCA9PSBiLnBhcmVudCA/IDEgOiAyO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZUxlZnQodikge1xuXHQgICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcblx0ICAgIHJldHVybiBjaGlsZHJlbi5sZW5ndGggPyBjaGlsZHJlblswXSA6IHYudDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVSaWdodCh2KSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLCBuO1xuXHQgICAgcmV0dXJuIChuID0gY2hpbGRyZW4ubGVuZ3RoKSA/IGNoaWxkcmVuW24gLSAxXSA6IHYudDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVNb3ZlKHdtLCB3cCwgc2hpZnQpIHtcblx0ICAgIHZhciBjaGFuZ2UgPSBzaGlmdCAvICh3cC5pIC0gd20uaSk7XG5cdCAgICB3cC5jIC09IGNoYW5nZTtcblx0ICAgIHdwLnMgKz0gc2hpZnQ7XG5cdCAgICB3bS5jICs9IGNoYW5nZTtcblx0ICAgIHdwLnogKz0gc2hpZnQ7XG5cdCAgICB3cC5tICs9IHNoaWZ0O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVNoaWZ0KHYpIHtcblx0ICAgIHZhciBzaGlmdCA9IDAsIGNoYW5nZSA9IDAsIGNoaWxkcmVuID0gdi5jaGlsZHJlbiwgaSA9IGNoaWxkcmVuLmxlbmd0aCwgdztcblx0ICAgIHdoaWxlICgtLWkgPj0gMCkge1xuXHQgICAgICB3ID0gY2hpbGRyZW5baV07XG5cdCAgICAgIHcueiArPSBzaGlmdDtcblx0ICAgICAgdy5tICs9IHNoaWZ0O1xuXHQgICAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlQW5jZXN0b3IodmltLCB2LCBhbmNlc3Rvcikge1xuXHQgICAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xuXHQgIH1cblx0ICBkMy5sYXlvdXQuY2x1c3RlciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KG51bGwpLnZhbHVlKG51bGwpLCBzZXBhcmF0aW9uID0gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uLCBzaXplID0gWyAxLCAxIF0sIG5vZGVTaXplID0gZmFsc2U7XG5cdCAgICBmdW5jdGlvbiBjbHVzdGVyKGQsIGkpIHtcblx0ICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSksIHJvb3QgPSBub2Rlc1swXSwgcHJldmlvdXNOb2RlLCB4ID0gMDtcblx0ICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG5cdCAgICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuXHQgICAgICAgICAgbm9kZS54ID0gZDNfbGF5b3V0X2NsdXN0ZXJYKGNoaWxkcmVuKTtcblx0ICAgICAgICAgIG5vZGUueSA9IGQzX2xheW91dF9jbHVzdGVyWShjaGlsZHJlbik7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDtcblx0ICAgICAgICAgIG5vZGUueSA9IDA7XG5cdCAgICAgICAgICBwcmV2aW91c05vZGUgPSBub2RlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHZhciBsZWZ0ID0gZDNfbGF5b3V0X2NsdXN0ZXJMZWZ0KHJvb3QpLCByaWdodCA9IGQzX2xheW91dF9jbHVzdGVyUmlnaHQocm9vdCksIHgwID0gbGVmdC54IC0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLCB4MSA9IHJpZ2h0LnggKyBzZXBhcmF0aW9uKHJpZ2h0LCBsZWZ0KSAvIDI7XG5cdCAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIG5vZGVTaXplID8gZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICAgIG5vZGUueCA9IChub2RlLnggLSByb290LngpICogc2l6ZVswXTtcblx0ICAgICAgICBub2RlLnkgPSAocm9vdC55IC0gbm9kZS55KSAqIHNpemVbMV07XG5cdCAgICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHgwKSAvICh4MSAtIHgwKSAqIHNpemVbMF07XG5cdCAgICAgICAgbm9kZS55ID0gKDEgLSAocm9vdC55ID8gbm9kZS55IC8gcm9vdC55IDogMSkpICogc2l6ZVsxXTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBub2Rlcztcblx0ICAgIH1cblx0ICAgIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2VwYXJhdGlvbjtcblx0ICAgICAgc2VwYXJhdGlvbiA9IHg7XG5cdCAgICAgIHJldHVybiBjbHVzdGVyO1xuXHQgICAgfTtcblx0ICAgIGNsdXN0ZXIuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBudWxsIDogc2l6ZTtcblx0ICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGw7XG5cdCAgICAgIHJldHVybiBjbHVzdGVyO1xuXHQgICAgfTtcblx0ICAgIGNsdXN0ZXIubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG5vZGVTaXplID8gc2l6ZSA6IG51bGw7XG5cdCAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSAhPSBudWxsO1xuXHQgICAgICByZXR1cm4gY2x1c3Rlcjtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZChjbHVzdGVyLCBoaWVyYXJjaHkpO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2NsdXN0ZXJZKGNoaWxkcmVuKSB7XG5cdCAgICByZXR1cm4gMSArIGQzLm1heChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcblx0ICAgICAgcmV0dXJuIGNoaWxkLnk7XG5cdCAgICB9KTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2NsdXN0ZXJYKGNoaWxkcmVuKSB7XG5cdCAgICByZXR1cm4gY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uKHgsIGNoaWxkKSB7XG5cdCAgICAgIHJldHVybiB4ICsgY2hpbGQueDtcblx0ICAgIH0sIDApIC8gY2hpbGRyZW4ubGVuZ3RoO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlckxlZnQobm9kZSkge1xuXHQgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcblx0ICAgIHJldHVybiBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPyBkM19sYXlvdXRfY2x1c3RlckxlZnQoY2hpbGRyZW5bMF0pIDogbm9kZTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X2NsdXN0ZXJSaWdodChub2RlKSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLCBuO1xuXHQgICAgcmV0dXJuIGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSA/IGQzX2xheW91dF9jbHVzdGVyUmlnaHQoY2hpbGRyZW5bbiAtIDFdKSA6IG5vZGU7XG5cdCAgfVxuXHQgIGQzLmxheW91dC50cmVlbWFwID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLCByb3VuZCA9IE1hdGgucm91bmQsIHNpemUgPSBbIDEsIDEgXSwgcGFkZGluZyA9IG51bGwsIHBhZCA9IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbCwgc3RpY2t5ID0gZmFsc2UsIHN0aWNraWVzLCBtb2RlID0gXCJzcXVhcmlmeVwiLCByYXRpbyA9IC41ICogKDEgKyBNYXRoLnNxcnQoNSkpO1xuXHQgICAgZnVuY3Rpb24gc2NhbGUoY2hpbGRyZW4sIGspIHtcblx0ICAgICAgdmFyIGkgPSAtMSwgbiA9IGNoaWxkcmVuLmxlbmd0aCwgY2hpbGQsIGFyZWE7XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgYXJlYSA9IChjaGlsZCA9IGNoaWxkcmVuW2ldKS52YWx1ZSAqIChrIDwgMCA/IDAgOiBrKTtcblx0ICAgICAgICBjaGlsZC5hcmVhID0gaXNOYU4oYXJlYSkgfHwgYXJlYSA8PSAwID8gMCA6IGFyZWE7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHNxdWFyaWZ5KG5vZGUpIHtcblx0ICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcblx0ICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuXHQgICAgICAgIHZhciByZWN0ID0gcGFkKG5vZGUpLCByb3cgPSBbXSwgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSwgY2hpbGQsIGJlc3QgPSBJbmZpbml0eSwgc2NvcmUsIHUgPSBtb2RlID09PSBcInNsaWNlXCIgPyByZWN0LmR4IDogbW9kZSA9PT0gXCJkaWNlXCIgPyByZWN0LmR5IDogbW9kZSA9PT0gXCJzbGljZS1kaWNlXCIgPyBub2RlLmRlcHRoICYgMSA/IHJlY3QuZHkgOiByZWN0LmR4IDogTWF0aC5taW4ocmVjdC5keCwgcmVjdC5keSksIG47XG5cdCAgICAgICAgc2NhbGUocmVtYWluaW5nLCByZWN0LmR4ICogcmVjdC5keSAvIG5vZGUudmFsdWUpO1xuXHQgICAgICAgIHJvdy5hcmVhID0gMDtcblx0ICAgICAgICB3aGlsZSAoKG4gPSByZW1haW5pbmcubGVuZ3RoKSA+IDApIHtcblx0ICAgICAgICAgIHJvdy5wdXNoKGNoaWxkID0gcmVtYWluaW5nW24gLSAxXSk7XG5cdCAgICAgICAgICByb3cuYXJlYSArPSBjaGlsZC5hcmVhO1xuXHQgICAgICAgICAgaWYgKG1vZGUgIT09IFwic3F1YXJpZnlcIiB8fCAoc2NvcmUgPSB3b3JzdChyb3csIHUpKSA8PSBiZXN0KSB7XG5cdCAgICAgICAgICAgIHJlbWFpbmluZy5wb3AoKTtcblx0ICAgICAgICAgICAgYmVzdCA9IHNjb3JlO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcm93LmFyZWEgLT0gcm93LnBvcCgpLmFyZWE7XG5cdCAgICAgICAgICAgIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgZmFsc2UpO1xuXHQgICAgICAgICAgICB1ID0gTWF0aC5taW4ocmVjdC5keCwgcmVjdC5keSk7XG5cdCAgICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG5cdCAgICAgICAgICAgIGJlc3QgPSBJbmZpbml0eTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHJvdy5sZW5ndGgpIHtcblx0ICAgICAgICAgIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgdHJ1ZSk7XG5cdCAgICAgICAgICByb3cubGVuZ3RoID0gcm93LmFyZWEgPSAwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKHNxdWFyaWZ5KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc3RpY2tpZnkobm9kZSkge1xuXHQgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuXHQgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdCAgICAgICAgdmFyIHJlY3QgPSBwYWQobm9kZSksIHJlbWFpbmluZyA9IGNoaWxkcmVuLnNsaWNlKCksIGNoaWxkLCByb3cgPSBbXTtcblx0ICAgICAgICBzY2FsZShyZW1haW5pbmcsIHJlY3QuZHggKiByZWN0LmR5IC8gbm9kZS52YWx1ZSk7XG5cdCAgICAgICAgcm93LmFyZWEgPSAwO1xuXHQgICAgICAgIHdoaWxlIChjaGlsZCA9IHJlbWFpbmluZy5wb3AoKSkge1xuXHQgICAgICAgICAgcm93LnB1c2goY2hpbGQpO1xuXHQgICAgICAgICAgcm93LmFyZWEgKz0gY2hpbGQuYXJlYTtcblx0ICAgICAgICAgIGlmIChjaGlsZC56ICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgcG9zaXRpb24ocm93LCBjaGlsZC56ID8gcmVjdC5keCA6IHJlY3QuZHksIHJlY3QsICFyZW1haW5pbmcubGVuZ3RoKTtcblx0ICAgICAgICAgICAgcm93Lmxlbmd0aCA9IHJvdy5hcmVhID0gMDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChzdGlja2lmeSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHdvcnN0KHJvdywgdSkge1xuXHQgICAgICB2YXIgcyA9IHJvdy5hcmVhLCByLCBybWF4ID0gMCwgcm1pbiA9IEluZmluaXR5LCBpID0gLTEsIG4gPSByb3cubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICAgIGlmICghKHIgPSByb3dbaV0uYXJlYSkpIGNvbnRpbnVlO1xuXHQgICAgICAgIGlmIChyIDwgcm1pbikgcm1pbiA9IHI7XG5cdCAgICAgICAgaWYgKHIgPiBybWF4KSBybWF4ID0gcjtcblx0ICAgICAgfVxuXHQgICAgICBzICo9IHM7XG5cdCAgICAgIHUgKj0gdTtcblx0ICAgICAgcmV0dXJuIHMgPyBNYXRoLm1heCh1ICogcm1heCAqIHJhdGlvIC8gcywgcyAvICh1ICogcm1pbiAqIHJhdGlvKSkgOiBJbmZpbml0eTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgZmx1c2gpIHtcblx0ICAgICAgdmFyIGkgPSAtMSwgbiA9IHJvdy5sZW5ndGgsIHggPSByZWN0LngsIHkgPSByZWN0LnksIHYgPSB1ID8gcm91bmQocm93LmFyZWEgLyB1KSA6IDAsIG87XG5cdCAgICAgIGlmICh1ID09IHJlY3QuZHgpIHtcblx0ICAgICAgICBpZiAoZmx1c2ggfHwgdiA+IHJlY3QuZHkpIHYgPSByZWN0LmR5O1xuXHQgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgICBvID0gcm93W2ldO1xuXHQgICAgICAgICAgby54ID0geDtcblx0ICAgICAgICAgIG8ueSA9IHk7XG5cdCAgICAgICAgICBvLmR5ID0gdjtcblx0ICAgICAgICAgIHggKz0gby5keCA9IE1hdGgubWluKHJlY3QueCArIHJlY3QuZHggLSB4LCB2ID8gcm91bmQoby5hcmVhIC8gdikgOiAwKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgby56ID0gdHJ1ZTtcblx0ICAgICAgICBvLmR4ICs9IHJlY3QueCArIHJlY3QuZHggLSB4O1xuXHQgICAgICAgIHJlY3QueSArPSB2O1xuXHQgICAgICAgIHJlY3QuZHkgLT0gdjtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAoZmx1c2ggfHwgdiA+IHJlY3QuZHgpIHYgPSByZWN0LmR4O1xuXHQgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgICBvID0gcm93W2ldO1xuXHQgICAgICAgICAgby54ID0geDtcblx0ICAgICAgICAgIG8ueSA9IHk7XG5cdCAgICAgICAgICBvLmR4ID0gdjtcblx0ICAgICAgICAgIHkgKz0gby5keSA9IE1hdGgubWluKHJlY3QueSArIHJlY3QuZHkgLSB5LCB2ID8gcm91bmQoby5hcmVhIC8gdikgOiAwKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgby56ID0gZmFsc2U7XG5cdCAgICAgICAgby5keSArPSByZWN0LnkgKyByZWN0LmR5IC0geTtcblx0ICAgICAgICByZWN0LnggKz0gdjtcblx0ICAgICAgICByZWN0LmR4IC09IHY7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHRyZWVtYXAoZCkge1xuXHQgICAgICB2YXIgbm9kZXMgPSBzdGlja2llcyB8fCBoaWVyYXJjaHkoZCksIHJvb3QgPSBub2Rlc1swXTtcblx0ICAgICAgcm9vdC54ID0gcm9vdC55ID0gMDtcblx0ICAgICAgaWYgKHJvb3QudmFsdWUpIHJvb3QuZHggPSBzaXplWzBdLCByb290LmR5ID0gc2l6ZVsxXTsgZWxzZSByb290LmR4ID0gcm9vdC5keSA9IDA7XG5cdCAgICAgIGlmIChzdGlja2llcykgaGllcmFyY2h5LnJldmFsdWUocm9vdCk7XG5cdCAgICAgIHNjYWxlKFsgcm9vdCBdLCByb290LmR4ICogcm9vdC5keSAvIHJvb3QudmFsdWUpO1xuXHQgICAgICAoc3RpY2tpZXMgPyBzdGlja2lmeSA6IHNxdWFyaWZ5KShyb290KTtcblx0ICAgICAgaWYgKHN0aWNreSkgc3RpY2tpZXMgPSBub2Rlcztcblx0ICAgICAgcmV0dXJuIG5vZGVzO1xuXHQgICAgfVxuXHQgICAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuXHQgICAgICBzaXplID0geDtcblx0ICAgICAgcmV0dXJuIHRyZWVtYXA7XG5cdCAgICB9O1xuXHQgICAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRkaW5nO1xuXHQgICAgICBmdW5jdGlvbiBwYWRGdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgdmFyIHAgPSB4LmNhbGwodHJlZW1hcCwgbm9kZSwgbm9kZS5kZXB0aCk7XG5cdCAgICAgICAgcmV0dXJuIHAgPT0gbnVsbCA/IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbChub2RlKSA6IGQzX2xheW91dF90cmVlbWFwUGFkKG5vZGUsIHR5cGVvZiBwID09PSBcIm51bWJlclwiID8gWyBwLCBwLCBwLCBwIF0gOiBwKTtcblx0ICAgICAgfVxuXHQgICAgICBmdW5jdGlvbiBwYWRDb25zdGFudChub2RlKSB7XG5cdCAgICAgICAgcmV0dXJuIGQzX2xheW91dF90cmVlbWFwUGFkKG5vZGUsIHgpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciB0eXBlO1xuXHQgICAgICBwYWQgPSAocGFkZGluZyA9IHgpID09IG51bGwgPyBkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwgOiAodHlwZSA9IHR5cGVvZiB4KSA9PT0gXCJmdW5jdGlvblwiID8gcGFkRnVuY3Rpb24gOiB0eXBlID09PSBcIm51bWJlclwiID8gKHggPSBbIHgsIHgsIHgsIHggXSwgXG5cdCAgICAgIHBhZENvbnN0YW50KSA6IHBhZENvbnN0YW50O1xuXHQgICAgICByZXR1cm4gdHJlZW1hcDtcblx0ICAgIH07XG5cdCAgICB0cmVlbWFwLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByb3VuZCAhPSBOdW1iZXI7XG5cdCAgICAgIHJvdW5kID0geCA/IE1hdGgucm91bmQgOiBOdW1iZXI7XG5cdCAgICAgIHJldHVybiB0cmVlbWFwO1xuXHQgICAgfTtcblx0ICAgIHRyZWVtYXAuc3RpY2t5ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGlja3k7XG5cdCAgICAgIHN0aWNreSA9IHg7XG5cdCAgICAgIHN0aWNraWVzID0gbnVsbDtcblx0ICAgICAgcmV0dXJuIHRyZWVtYXA7XG5cdCAgICB9O1xuXHQgICAgdHJlZW1hcC5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmF0aW87XG5cdCAgICAgIHJhdGlvID0geDtcblx0ICAgICAgcmV0dXJuIHRyZWVtYXA7XG5cdCAgICB9O1xuXHQgICAgdHJlZW1hcC5tb2RlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBtb2RlO1xuXHQgICAgICBtb2RlID0geCArIFwiXCI7XG5cdCAgICAgIHJldHVybiB0cmVlbWFwO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWVtYXAsIGhpZXJhcmNoeSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwobm9kZSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgeDogbm9kZS54LFxuXHQgICAgICB5OiBub2RlLnksXG5cdCAgICAgIGR4OiBub2RlLmR4LFxuXHQgICAgICBkeTogbm9kZS5keVxuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgcGFkZGluZykge1xuXHQgICAgdmFyIHggPSBub2RlLnggKyBwYWRkaW5nWzNdLCB5ID0gbm9kZS55ICsgcGFkZGluZ1swXSwgZHggPSBub2RlLmR4IC0gcGFkZGluZ1sxXSAtIHBhZGRpbmdbM10sIGR5ID0gbm9kZS5keSAtIHBhZGRpbmdbMF0gLSBwYWRkaW5nWzJdO1xuXHQgICAgaWYgKGR4IDwgMCkge1xuXHQgICAgICB4ICs9IGR4IC8gMjtcblx0ICAgICAgZHggPSAwO1xuXHQgICAgfVxuXHQgICAgaWYgKGR5IDwgMCkge1xuXHQgICAgICB5ICs9IGR5IC8gMjtcblx0ICAgICAgZHkgPSAwO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgeDogeCxcblx0ICAgICAgeTogeSxcblx0ICAgICAgZHg6IGR4LFxuXHQgICAgICBkeTogZHlcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLnJhbmRvbSA9IHtcblx0ICAgIG5vcm1hbDogZnVuY3Rpb24owrUsIM+DKSB7XG5cdCAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgICAgaWYgKG4gPCAyKSDPgyA9IDE7XG5cdCAgICAgIGlmIChuIDwgMSkgwrUgPSAwO1xuXHQgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHgsIHksIHI7XG5cdCAgICAgICAgZG8ge1xuXHQgICAgICAgICAgeCA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcblx0ICAgICAgICAgIHkgPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG5cdCAgICAgICAgICByID0geCAqIHggKyB5ICogeTtcblx0ICAgICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG5cdCAgICAgICAgcmV0dXJuIMK1ICsgz4MgKiB4ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBsb2dOb3JtYWw6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgcmFuZG9tID0gZDMucmFuZG9tLm5vcm1hbC5hcHBseShkMywgYXJndW1lbnRzKTtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb20oKSk7XG5cdCAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgYmF0ZXM6IGZ1bmN0aW9uKG0pIHtcblx0ICAgICAgdmFyIHJhbmRvbSA9IGQzLnJhbmRvbS5pcndpbkhhbGwobSk7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gcmFuZG9tKCkgLyBtO1xuXHQgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGlyd2luSGFsbDogZnVuY3Rpb24obSkge1xuXHQgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgZm9yICh2YXIgcyA9IDAsIGogPSAwOyBqIDwgbTsgaisrKSBzICs9IE1hdGgucmFuZG9tKCk7XG5cdCAgICAgICAgcmV0dXJuIHM7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfTtcblx0ICBkMy5zY2FsZSA9IHt9O1xuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlRXh0ZW50KGRvbWFpbikge1xuXHQgICAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLCBzdG9wID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXTtcblx0ICAgIHJldHVybiBzdGFydCA8IHN0b3AgPyBbIHN0YXJ0LCBzdG9wIF0gOiBbIHN0b3AsIHN0YXJ0IF07XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlUmFuZ2Uoc2NhbGUpIHtcblx0ICAgIHJldHVybiBzY2FsZS5yYW5nZUV4dGVudCA/IHNjYWxlLnJhbmdlRXh0ZW50KCkgOiBkM19zY2FsZUV4dGVudChzY2FsZS5yYW5nZSgpKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfYmlsaW5lYXIoZG9tYWluLCByYW5nZSwgdW5pbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpIHtcblx0ICAgIHZhciB1ID0gdW5pbnRlcnBvbGF0ZShkb21haW5bMF0sIGRvbWFpblsxXSksIGkgPSBpbnRlcnBvbGF0ZShyYW5nZVswXSwgcmFuZ2VbMV0pO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIGkodSh4KSk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zY2FsZV9uaWNlKGRvbWFpbiwgbmljZSkge1xuXHQgICAgdmFyIGkwID0gMCwgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSwgeDAgPSBkb21haW5baTBdLCB4MSA9IGRvbWFpbltpMV0sIGR4O1xuXHQgICAgaWYgKHgxIDwgeDApIHtcblx0ICAgICAgZHggPSBpMCwgaTAgPSBpMSwgaTEgPSBkeDtcblx0ICAgICAgZHggPSB4MCwgeDAgPSB4MSwgeDEgPSBkeDtcblx0ICAgIH1cblx0ICAgIGRvbWFpbltpMF0gPSBuaWNlLmZsb29yKHgwKTtcblx0ICAgIGRvbWFpbltpMV0gPSBuaWNlLmNlaWwoeDEpO1xuXHQgICAgcmV0dXJuIGRvbWFpbjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfbmljZVN0ZXAoc3RlcCkge1xuXHQgICAgcmV0dXJuIHN0ZXAgPyB7XG5cdCAgICAgIGZsb29yOiBmdW5jdGlvbih4KSB7XG5cdCAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoeCAvIHN0ZXApICogc3RlcDtcblx0ICAgICAgfSxcblx0ICAgICAgY2VpbDogZnVuY3Rpb24oeCkge1xuXHQgICAgICAgIHJldHVybiBNYXRoLmNlaWwoeCAvIHN0ZXApICogc3RlcDtcblx0ICAgICAgfVxuXHQgICAgfSA6IGQzX3NjYWxlX25pY2VJZGVudGl0eTtcblx0ICB9XG5cdCAgdmFyIGQzX3NjYWxlX25pY2VJZGVudGl0eSA9IHtcblx0ICAgIGZsb29yOiBkM19pZGVudGl0eSxcblx0ICAgIGNlaWw6IGQzX2lkZW50aXR5XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zY2FsZV9wb2x5bGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKSB7XG5cdCAgICB2YXIgdSA9IFtdLCBpID0gW10sIGogPSAwLCBrID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDE7XG5cdCAgICBpZiAoZG9tYWluW2tdIDwgZG9tYWluWzBdKSB7XG5cdCAgICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcblx0ICAgICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcblx0ICAgIH1cblx0ICAgIHdoaWxlICgrK2ogPD0gaykge1xuXHQgICAgICB1LnB1c2godW5pbnRlcnBvbGF0ZShkb21haW5baiAtIDFdLCBkb21haW5bal0pKTtcblx0ICAgICAgaS5wdXNoKGludGVycG9sYXRlKHJhbmdlW2ogLSAxXSwgcmFuZ2Vbal0pKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHZhciBqID0gZDMuYmlzZWN0KGRvbWFpbiwgeCwgMSwgaykgLSAxO1xuXHQgICAgICByZXR1cm4gaVtqXSh1W2pdKHgpKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIGQzLnNjYWxlLmxpbmVhciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihbIDAsIDEgXSwgWyAwLCAxIF0sIGQzX2ludGVycG9sYXRlLCBmYWxzZSk7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXIoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUsIGNsYW1wKSB7XG5cdCAgICB2YXIgb3V0cHV0LCBpbnB1dDtcblx0ICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG5cdCAgICAgIHZhciBsaW5lYXIgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IGQzX3NjYWxlX3BvbHlsaW5lYXIgOiBkM19zY2FsZV9iaWxpbmVhciwgdW5pbnRlcnBvbGF0ZSA9IGNsYW1wID8gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wIDogZDNfdW5pbnRlcnBvbGF0ZU51bWJlcjtcblx0ICAgICAgb3V0cHV0ID0gbGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKTtcblx0ICAgICAgaW5wdXQgPSBsaW5lYXIocmFuZ2UsIGRvbWFpbiwgdW5pbnRlcnBvbGF0ZSwgZDNfaW50ZXJwb2xhdGUpO1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG5cdCAgICAgIHJldHVybiBvdXRwdXQoeCk7XG5cdCAgICB9XG5cdCAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG5cdCAgICAgIHJldHVybiBpbnB1dCh5KTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcblx0ICAgICAgZG9tYWluID0geC5tYXAoTnVtYmVyKTtcblx0ICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG5cdCAgICAgIHJhbmdlID0geDtcblx0ICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gc2NhbGUucmFuZ2UoeCkuaW50ZXJwb2xhdGUoZDNfaW50ZXJwb2xhdGVSb3VuZCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsYW1wO1xuXHQgICAgICBjbGFtcCA9IHg7XG5cdCAgICAgIHJldHVybiByZXNjYWxlKCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlO1xuXHQgICAgICBpbnRlcnBvbGF0ZSA9IHg7XG5cdCAgICAgIHJldHVybiByZXNjYWxlKCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihtKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrcyhkb21haW4sIG0pO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihtLCBmb3JtYXQpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtLCBmb3JtYXQpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihtKSB7XG5cdCAgICAgIGQzX3NjYWxlX2xpbmVhck5pY2UoZG9tYWluLCBtKTtcblx0ICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXIoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUsIGNsYW1wKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gcmVzY2FsZSgpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcikge1xuXHQgICAgcmV0dXJuIGQzLnJlYmluZChzY2FsZSwgbGluZWFyLCBcInJhbmdlXCIsIFwicmFuZ2VSb3VuZFwiLCBcImludGVycG9sYXRlXCIsIFwiY2xhbXBcIik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhck5pY2UoZG9tYWluLCBtKSB7XG5cdCAgICBkM19zY2FsZV9uaWNlKGRvbWFpbiwgZDNfc2NhbGVfbmljZVN0ZXAoZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGRvbWFpbiwgbSlbMl0pKTtcblx0ICAgIGQzX3NjYWxlX25pY2UoZG9tYWluLCBkM19zY2FsZV9uaWNlU3RlcChkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKVsyXSkpO1xuXHQgICAgcmV0dXJuIGRvbWFpbjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGRvbWFpbiwgbSkge1xuXHQgICAgaWYgKG0gPT0gbnVsbCkgbSA9IDEwO1xuXHQgICAgdmFyIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGRvbWFpbiksIHNwYW4gPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIHN0ZXAgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzcGFuIC8gbSkgLyBNYXRoLkxOMTApKSwgZXJyID0gbSAvIHNwYW4gKiBzdGVwO1xuXHQgICAgaWYgKGVyciA8PSAuMTUpIHN0ZXAgKj0gMTA7IGVsc2UgaWYgKGVyciA8PSAuMzUpIHN0ZXAgKj0gNTsgZWxzZSBpZiAoZXJyIDw9IC43NSkgc3RlcCAqPSAyO1xuXHQgICAgZXh0ZW50WzBdID0gTWF0aC5jZWlsKGV4dGVudFswXSAvIHN0ZXApICogc3RlcDtcblx0ICAgIGV4dGVudFsxXSA9IE1hdGguZmxvb3IoZXh0ZW50WzFdIC8gc3RlcCkgKiBzdGVwICsgc3RlcCAqIC41O1xuXHQgICAgZXh0ZW50WzJdID0gc3RlcDtcblx0ICAgIHJldHVybiBleHRlbnQ7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSkge1xuXHQgICAgcmV0dXJuIGQzLnJhbmdlLmFwcGx5KGQzLCBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtLCBmb3JtYXQpIHtcblx0ICAgIHZhciByYW5nZSA9IGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pO1xuXHQgICAgaWYgKGZvcm1hdCkge1xuXHQgICAgICB2YXIgbWF0Y2ggPSBkM19mb3JtYXRfcmUuZXhlYyhmb3JtYXQpO1xuXHQgICAgICBtYXRjaC5zaGlmdCgpO1xuXHQgICAgICBpZiAobWF0Y2hbOF0gPT09IFwic1wiKSB7XG5cdCAgICAgICAgdmFyIHByZWZpeCA9IGQzLmZvcm1hdFByZWZpeChNYXRoLm1heChhYnMocmFuZ2VbMF0pLCBhYnMocmFuZ2VbMV0pKSk7XG5cdCAgICAgICAgaWYgKCFtYXRjaFs3XSkgbWF0Y2hbN10gPSBcIi5cIiArIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbihwcmVmaXguc2NhbGUocmFuZ2VbMl0pKTtcblx0ICAgICAgICBtYXRjaFs4XSA9IFwiZlwiO1xuXHQgICAgICAgIGZvcm1hdCA9IGQzLmZvcm1hdChtYXRjaC5qb2luKFwiXCIpKTtcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuXHQgICAgICAgICAgcmV0dXJuIGZvcm1hdChwcmVmaXguc2NhbGUoZCkpICsgcHJlZml4LnN5bWJvbDtcblx0ICAgICAgICB9O1xuXHQgICAgICB9XG5cdCAgICAgIGlmICghbWF0Y2hbN10pIG1hdGNoWzddID0gXCIuXCIgKyBkM19zY2FsZV9saW5lYXJGb3JtYXRQcmVjaXNpb24obWF0Y2hbOF0sIHJhbmdlKTtcblx0ICAgICAgZm9ybWF0ID0gbWF0Y2guam9pbihcIlwiKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGZvcm1hdCA9IFwiLC5cIiArIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbihyYW5nZVsyXSkgKyBcImZcIjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBkMy5mb3JtYXQoZm9ybWF0KTtcblx0ICB9XG5cdCAgdmFyIGQzX3NjYWxlX2xpbmVhckZvcm1hdFNpZ25pZmljYW50ID0ge1xuXHQgICAgczogMSxcblx0ICAgIGc6IDEsXG5cdCAgICBwOiAxLFxuXHQgICAgcjogMSxcblx0ICAgIGU6IDFcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbih2YWx1ZSkge1xuXHQgICAgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4xMCArIC4wMSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbih0eXBlLCByYW5nZSkge1xuXHQgICAgdmFyIHAgPSBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24ocmFuZ2VbMl0pO1xuXHQgICAgcmV0dXJuIHR5cGUgaW4gZDNfc2NhbGVfbGluZWFyRm9ybWF0U2lnbmlmaWNhbnQgPyBNYXRoLmFicyhwIC0gZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKE1hdGgubWF4KGFicyhyYW5nZVswXSksIGFicyhyYW5nZVsxXSkpKSkgKyArKHR5cGUgIT09IFwiZVwiKSA6IHAgLSAodHlwZSA9PT0gXCIlXCIpICogMjtcblx0ICB9XG5cdCAgZDMuc2NhbGUubG9nID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfc2NhbGVfbG9nKGQzLnNjYWxlLmxpbmVhcigpLmRvbWFpbihbIDAsIDEgXSksIDEwLCB0cnVlLCBbIDEsIDEwIF0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfbG9nKGxpbmVhciwgYmFzZSwgcG9zaXRpdmUsIGRvbWFpbikge1xuXHQgICAgZnVuY3Rpb24gbG9nKHgpIHtcblx0ICAgICAgcmV0dXJuIChwb3NpdGl2ZSA/IE1hdGgubG9nKHggPCAwID8gMCA6IHgpIDogLU1hdGgubG9nKHggPiAwID8gMCA6IC14KSkgLyBNYXRoLmxvZyhiYXNlKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHBvdyh4KSB7XG5cdCAgICAgIHJldHVybiBwb3NpdGl2ZSA/IE1hdGgucG93KGJhc2UsIHgpIDogLU1hdGgucG93KGJhc2UsIC14KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcblx0ICAgICAgcmV0dXJuIGxpbmVhcihsb2coeCkpO1xuXHQgICAgfVxuXHQgICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gcG93KGxpbmVhci5pbnZlcnQoeCkpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuXHQgICAgICBwb3NpdGl2ZSA9IHhbMF0gPj0gMDtcblx0ICAgICAgbGluZWFyLmRvbWFpbigoZG9tYWluID0geC5tYXAoTnVtYmVyKSkubWFwKGxvZykpO1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuYmFzZSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYmFzZTtcblx0ICAgICAgYmFzZSA9ICtfO1xuXHQgICAgICBsaW5lYXIuZG9tYWluKGRvbWFpbi5tYXAobG9nKSk7XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBuaWNlZCA9IGQzX3NjYWxlX25pY2UoZG9tYWluLm1hcChsb2cpLCBwb3NpdGl2ZSA/IE1hdGggOiBkM19zY2FsZV9sb2dOaWNlTmVnYXRpdmUpO1xuXHQgICAgICBsaW5lYXIuZG9tYWluKG5pY2VkKTtcblx0ICAgICAgZG9tYWluID0gbmljZWQubWFwKHBvdyk7XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSwgdGlja3MgPSBbXSwgdSA9IGV4dGVudFswXSwgdiA9IGV4dGVudFsxXSwgaSA9IE1hdGguZmxvb3IobG9nKHUpKSwgaiA9IE1hdGguY2VpbChsb2codikpLCBuID0gYmFzZSAlIDEgPyAyIDogYmFzZTtcblx0ICAgICAgaWYgKGlzRmluaXRlKGogLSBpKSkge1xuXHQgICAgICAgIGlmIChwb3NpdGl2ZSkge1xuXHQgICAgICAgICAgZm9yICg7aSA8IGo7IGkrKykgZm9yICh2YXIgayA9IDE7IGsgPCBuOyBrKyspIHRpY2tzLnB1c2gocG93KGkpICogayk7XG5cdCAgICAgICAgICB0aWNrcy5wdXNoKHBvdyhpKSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRpY2tzLnB1c2gocG93KGkpKTtcblx0ICAgICAgICAgIGZvciAoO2krKyA8IGo7ICkgZm9yICh2YXIgayA9IG4gLSAxOyBrID4gMDsgay0tKSB0aWNrcy5wdXNoKHBvdyhpKSAqIGspO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKGkgPSAwOyB0aWNrc1tpXSA8IHU7IGkrKykge31cblx0ICAgICAgICBmb3IgKGogPSB0aWNrcy5sZW5ndGg7IHRpY2tzW2ogLSAxXSA+IHY7IGotLSkge31cblx0ICAgICAgICB0aWNrcyA9IHRpY2tzLnNsaWNlKGksIGopO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0aWNrcztcblx0ICAgIH07XG5cdCAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obiwgZm9ybWF0KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGQzX3NjYWxlX2xvZ0Zvcm1hdDtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBmb3JtYXQgPSBkM19zY2FsZV9sb2dGb3JtYXQ7IGVsc2UgaWYgKHR5cGVvZiBmb3JtYXQgIT09IFwiZnVuY3Rpb25cIikgZm9ybWF0ID0gZDMuZm9ybWF0KGZvcm1hdCk7XG5cdCAgICAgIHZhciBrID0gTWF0aC5tYXgoMSwgYmFzZSAqIG4gLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgdmFyIGkgPSBkIC8gcG93KE1hdGgucm91bmQobG9nKGQpKSk7XG5cdCAgICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIC41KSBpICo9IGJhc2U7XG5cdCAgICAgICAgcmV0dXJuIGkgPD0gayA/IGZvcm1hdChkKSA6IFwiXCI7XG5cdCAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfc2NhbGVfbG9nKGxpbmVhci5jb3B5KCksIGJhc2UsIHBvc2l0aXZlLCBkb21haW4pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcik7XG5cdCAgfVxuXHQgIHZhciBkM19zY2FsZV9sb2dGb3JtYXQgPSBkMy5mb3JtYXQoXCIuMGVcIiksIGQzX3NjYWxlX2xvZ05pY2VOZWdhdGl2ZSA9IHtcblx0ICAgIGZsb29yOiBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiAtTWF0aC5jZWlsKC14KTtcblx0ICAgIH0sXG5cdCAgICBjZWlsOiBmdW5jdGlvbih4KSB7XG5cdCAgICAgIHJldHVybiAtTWF0aC5mbG9vcigteCk7XG5cdCAgICB9XG5cdCAgfTtcblx0ICBkMy5zY2FsZS5wb3cgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19zY2FsZV9wb3coZDMuc2NhbGUubGluZWFyKCksIDEsIFsgMCwgMSBdKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX3BvdyhsaW5lYXIsIGV4cG9uZW50LCBkb21haW4pIHtcblx0ICAgIHZhciBwb3dwID0gZDNfc2NhbGVfcG93UG93KGV4cG9uZW50KSwgcG93YiA9IGQzX3NjYWxlX3Bvd1BvdygxIC8gZXhwb25lbnQpO1xuXHQgICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuXHQgICAgICByZXR1cm4gbGluZWFyKHBvd3AoeCkpO1xuXHQgICAgfVxuXHQgICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gcG93YihsaW5lYXIuaW52ZXJ0KHgpKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcblx0ICAgICAgbGluZWFyLmRvbWFpbigoZG9tYWluID0geC5tYXAoTnVtYmVyKSkubWFwKHBvd3ApKTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24obSkge1xuXHQgICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrRm9ybWF0KGRvbWFpbiwgbSwgZm9ybWF0KTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24obSkge1xuXHQgICAgICByZXR1cm4gc2NhbGUuZG9tYWluKGQzX3NjYWxlX2xpbmVhck5pY2UoZG9tYWluLCBtKSk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGV4cG9uZW50O1xuXHQgICAgICBwb3dwID0gZDNfc2NhbGVfcG93UG93KGV4cG9uZW50ID0geCk7XG5cdCAgICAgIHBvd2IgPSBkM19zY2FsZV9wb3dQb3coMSAvIGV4cG9uZW50KTtcblx0ICAgICAgbGluZWFyLmRvbWFpbihkb21haW4ubWFwKHBvd3ApKTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGQzX3NjYWxlX3BvdyhsaW5lYXIuY29weSgpLCBleHBvbmVudCwgZG9tYWluKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zY2FsZV9wb3dQb3coZSkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIHggPCAwID8gLU1hdGgucG93KC14LCBlKSA6IE1hdGgucG93KHgsIGUpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgZDMuc2NhbGUuc3FydCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzLnNjYWxlLnBvdygpLmV4cG9uZW50KC41KTtcblx0ICB9O1xuXHQgIGQzLnNjYWxlLm9yZGluYWwgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19zY2FsZV9vcmRpbmFsKFtdLCB7XG5cdCAgICAgIHQ6IFwicmFuZ2VcIixcblx0ICAgICAgYTogWyBbXSBdXG5cdCAgICB9KTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX29yZGluYWwoZG9tYWluLCByYW5nZXIpIHtcblx0ICAgIHZhciBpbmRleCwgcmFuZ2UsIHJhbmdlQmFuZDtcblx0ICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcblx0ICAgICAgcmV0dXJuIHJhbmdlWygoaW5kZXguZ2V0KHgpIHx8IChyYW5nZXIudCA9PT0gXCJyYW5nZVwiID8gaW5kZXguc2V0KHgsIGRvbWFpbi5wdXNoKHgpKSA6IE5hTikpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc3RlcHMoc3RhcnQsIHN0ZXApIHtcblx0ICAgICAgcmV0dXJuIGQzLnJhbmdlKGRvbWFpbi5sZW5ndGgpLm1hcChmdW5jdGlvbihpKSB7XG5cdCAgICAgICAgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG5cdCAgICAgIGRvbWFpbiA9IFtdO1xuXHQgICAgICBpbmRleCA9IG5ldyBkM19NYXAoKTtcblx0ICAgICAgdmFyIGkgPSAtMSwgbiA9IHgubGVuZ3RoLCB4aTtcblx0ICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKHhpID0geFtpXSkpIGluZGV4LnNldCh4aSwgZG9tYWluLnB1c2goeGkpKTtcblx0ICAgICAgcmV0dXJuIHNjYWxlW3Jhbmdlci50XS5hcHBseShzY2FsZSwgcmFuZ2VyLmEpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcblx0ICAgICAgcmFuZ2UgPSB4O1xuXHQgICAgICByYW5nZUJhbmQgPSAwO1xuXHQgICAgICByYW5nZXIgPSB7XG5cdCAgICAgICAgdDogXCJyYW5nZVwiLFxuXHQgICAgICAgIGE6IGFyZ3VtZW50c1xuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2VQb2ludHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nKSB7XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG5cdCAgICAgIHZhciBzdGFydCA9IHhbMF0sIHN0b3AgPSB4WzFdLCBzdGVwID0gZG9tYWluLmxlbmd0aCA8IDIgPyAoc3RhcnQgPSAoc3RhcnQgKyBzdG9wKSAvIDIsIFxuXHQgICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZyk7XG5cdCAgICAgIHJhbmdlID0gc3RlcHMoc3RhcnQgKyBzdGVwICogcGFkZGluZyAvIDIsIHN0ZXApO1xuXHQgICAgICByYW5nZUJhbmQgPSAwO1xuXHQgICAgICByYW5nZXIgPSB7XG5cdCAgICAgICAgdDogXCJyYW5nZVBvaW50c1wiLFxuXHQgICAgICAgIGE6IGFyZ3VtZW50c1xuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2VSb3VuZFBvaW50cyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcpIHtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwYWRkaW5nID0gMDtcblx0ICAgICAgdmFyIHN0YXJ0ID0geFswXSwgc3RvcCA9IHhbMV0sIHN0ZXAgPSBkb21haW4ubGVuZ3RoIDwgMiA/IChzdGFydCA9IHN0b3AgPSBNYXRoLnJvdW5kKChzdGFydCArIHN0b3ApIC8gMiksIFxuXHQgICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZykgfCAwO1xuXHQgICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgTWF0aC5yb3VuZChzdGVwICogcGFkZGluZyAvIDIgKyAoc3RvcCAtIHN0YXJ0IC0gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZykgKiBzdGVwKSAvIDIpLCBzdGVwKTtcblx0ICAgICAgcmFuZ2VCYW5kID0gMDtcblx0ICAgICAgcmFuZ2VyID0ge1xuXHQgICAgICAgIHQ6IFwicmFuZ2VSb3VuZFBvaW50c1wiLFxuXHQgICAgICAgIGE6IGFyZ3VtZW50c1xuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2VCYW5kcyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcsIG91dGVyUGFkZGluZykge1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIG91dGVyUGFkZGluZyA9IHBhZGRpbmc7XG5cdCAgICAgIHZhciByZXZlcnNlID0geFsxXSA8IHhbMF0sIHN0YXJ0ID0geFtyZXZlcnNlIC0gMF0sIHN0b3AgPSB4WzEgLSByZXZlcnNlXSwgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSBwYWRkaW5nICsgMiAqIG91dGVyUGFkZGluZyk7XG5cdCAgICAgIHJhbmdlID0gc3RlcHMoc3RhcnQgKyBzdGVwICogb3V0ZXJQYWRkaW5nLCBzdGVwKTtcblx0ICAgICAgaWYgKHJldmVyc2UpIHJhbmdlLnJldmVyc2UoKTtcblx0ICAgICAgcmFuZ2VCYW5kID0gc3RlcCAqICgxIC0gcGFkZGluZyk7XG5cdCAgICAgIHJhbmdlciA9IHtcblx0ICAgICAgICB0OiBcInJhbmdlQmFuZHNcIixcblx0ICAgICAgICBhOiBhcmd1bWVudHNcblx0ICAgICAgfTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnJhbmdlUm91bmRCYW5kcyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcsIG91dGVyUGFkZGluZykge1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIG91dGVyUGFkZGluZyA9IHBhZGRpbmc7XG5cdCAgICAgIHZhciByZXZlcnNlID0geFsxXSA8IHhbMF0sIHN0YXJ0ID0geFtyZXZlcnNlIC0gMF0sIHN0b3AgPSB4WzEgLSByZXZlcnNlXSwgc3RlcCA9IE1hdGguZmxvb3IoKHN0b3AgLSBzdGFydCkgLyAoZG9tYWluLmxlbmd0aCAtIHBhZGRpbmcgKyAyICogb3V0ZXJQYWRkaW5nKSk7XG5cdCAgICAgIHJhbmdlID0gc3RlcHMoc3RhcnQgKyBNYXRoLnJvdW5kKChzdG9wIC0gc3RhcnQgLSAoZG9tYWluLmxlbmd0aCAtIHBhZGRpbmcpICogc3RlcCkgLyAyKSwgc3RlcCk7XG5cdCAgICAgIGlmIChyZXZlcnNlKSByYW5nZS5yZXZlcnNlKCk7XG5cdCAgICAgIHJhbmdlQmFuZCA9IE1hdGgucm91bmQoc3RlcCAqICgxIC0gcGFkZGluZykpO1xuXHQgICAgICByYW5nZXIgPSB7XG5cdCAgICAgICAgdDogXCJyYW5nZVJvdW5kQmFuZHNcIixcblx0ICAgICAgICBhOiBhcmd1bWVudHNcblx0ICAgICAgfTtcblx0ICAgICAgcmV0dXJuIHNjYWxlO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnJhbmdlQmFuZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gcmFuZ2VCYW5kO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnJhbmdlRXh0ZW50ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZUV4dGVudChyYW5nZXIuYVswXSk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfc2NhbGVfb3JkaW5hbChkb21haW4sIHJhbmdlcik7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkb21haW4pO1xuXHQgIH1cblx0ICBkMy5zY2FsZS5jYXRlZ29yeTEwID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MTApO1xuXHQgIH07XG5cdCAgZDMuc2NhbGUuY2F0ZWdvcnkyMCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShkM19jYXRlZ29yeTIwKTtcblx0ICB9O1xuXHQgIGQzLnNjYWxlLmNhdGVnb3J5MjBiID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MjBiKTtcblx0ICB9O1xuXHQgIGQzLnNjYWxlLmNhdGVnb3J5MjBjID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MjBjKTtcblx0ICB9O1xuXHQgIHZhciBkM19jYXRlZ29yeTEwID0gWyAyMDYyMjYwLCAxNjc0NDIwNiwgMjkyNDU4OCwgMTQwMzQ3MjgsIDk3MjU4ODUsIDkxOTcxMzEsIDE0OTA3MzMwLCA4MzU1NzExLCAxMjM2OTE4NiwgMTU1NjE3NSBdLm1hcChkM19yZ2JTdHJpbmcpO1xuXHQgIHZhciBkM19jYXRlZ29yeTIwID0gWyAyMDYyMjYwLCAxMTQ1NDQ0MCwgMTY3NDQyMDYsIDE2NzU5NjcyLCAyOTI0NTg4LCAxMDAxODY5OCwgMTQwMzQ3MjgsIDE2NzUwNzQyLCA5NzI1ODg1LCAxMjk1NTg2MSwgOTE5NzEzMSwgMTI4ODUxNDAsIDE0OTA3MzMwLCAxNjIzNDE5NCwgODM1NTcxMSwgMTMwOTI4MDcsIDEyMzY5MTg2LCAxNDQwODU4OSwgMTU1NjE3NSwgMTA0MTA3MjUgXS5tYXAoZDNfcmdiU3RyaW5nKTtcblx0ICB2YXIgZDNfY2F0ZWdvcnkyMGIgPSBbIDM3NTA3NzcsIDUzOTU2MTksIDcwNDA3MTksIDEwMjY0Mjg2LCA2NTE5MDk3LCA5MjE2NTk0LCAxMTkxNTExNSwgMTM1NTY2MzYsIDkyMDI5OTMsIDEyNDI2ODA5LCAxNTE4NjUxNCwgMTUxOTA5MzIsIDg2NjYxNjksIDExMzU2NDkwLCAxNDA0OTY0MywgMTUxNzczNzIsIDgwNzc2ODMsIDEwODM0MzI0LCAxMzUyODUwOSwgMTQ1ODk2NTQgXS5tYXAoZDNfcmdiU3RyaW5nKTtcblx0ICB2YXIgZDNfY2F0ZWdvcnkyMGMgPSBbIDMyNDQ3MzMsIDcwNTcxMTAsIDEwNDA2NjI1LCAxMzAzMjQzMSwgMTUwOTUwNTMsIDE2NjE2NzY0LCAxNjYyNTI1OSwgMTY2MzQwMTgsIDMyNTMwNzYsIDc2NTI0NzAsIDEwNjA3MDAzLCAxMzEwMTUwNCwgNzY5NTI4MSwgMTAzOTQzMTIsIDEyMzY5MzcyLCAxNDM0Mjg5MSwgNjUxMzUwNywgOTg2ODk1MCwgMTI0MzQ4NzcsIDE0Mjc3MDgxIF0ubWFwKGQzX3JnYlN0cmluZyk7XG5cdCAgZDMuc2NhbGUucXVhbnRpbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM19zY2FsZV9xdWFudGlsZShbXSwgW10pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfcXVhbnRpbGUoZG9tYWluLCByYW5nZSkge1xuXHQgICAgdmFyIHRocmVzaG9sZHM7XG5cdCAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuXHQgICAgICB2YXIgayA9IDAsIHEgPSByYW5nZS5sZW5ndGg7XG5cdCAgICAgIHRocmVzaG9sZHMgPSBbXTtcblx0ICAgICAgd2hpbGUgKCsrayA8IHEpIHRocmVzaG9sZHNbayAtIDFdID0gZDMucXVhbnRpbGUoZG9tYWluLCBrIC8gcSk7XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcblx0ICAgICAgaWYgKCFpc05hTih4ID0gK3gpKSByZXR1cm4gcmFuZ2VbZDMuYmlzZWN0KHRocmVzaG9sZHMsIHgpXTtcblx0ICAgIH1cblx0ICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuXHQgICAgICBkb21haW4gPSB4Lm1hcChkM19udW1iZXIpLmZpbHRlcihkM19udW1lcmljKS5zb3J0KGQzX2FzY2VuZGluZyk7XG5cdCAgICAgIHJldHVybiByZXNjYWxlKCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuXHQgICAgICByYW5nZSA9IHg7XG5cdCAgICAgIHJldHVybiByZXNjYWxlKCk7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucXVhbnRpbGVzID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aHJlc2hvbGRzO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcblx0ICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG5cdCAgICAgIHJldHVybiB5IDwgMCA/IFsgTmFOLCBOYU4gXSA6IFsgeSA+IDAgPyB0aHJlc2hvbGRzW3kgLSAxXSA6IGRvbWFpblswXSwgeSA8IHRocmVzaG9sZHMubGVuZ3RoID8gdGhyZXNob2xkc1t5XSA6IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0gXTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9xdWFudGlsZShkb21haW4sIHJhbmdlKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gcmVzY2FsZSgpO1xuXHQgIH1cblx0ICBkMy5zY2FsZS5xdWFudGl6ZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aXplKDAsIDEsIFsgMCwgMSBdKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX3F1YW50aXplKHgwLCB4MSwgcmFuZ2UpIHtcblx0ICAgIHZhciBreCwgaTtcblx0ICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcblx0ICAgICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKGksIE1hdGguZmxvb3Ioa3ggKiAoeCAtIHgwKSkpKV07XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuXHQgICAgICBreCA9IHJhbmdlLmxlbmd0aCAvICh4MSAtIHgwKTtcblx0ICAgICAgaSA9IHJhbmdlLmxlbmd0aCAtIDE7XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH1cblx0ICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyB4MCwgeDEgXTtcblx0ICAgICAgeDAgPSAreFswXTtcblx0ICAgICAgeDEgPSAreFt4Lmxlbmd0aCAtIDFdO1xuXHQgICAgICByZXR1cm4gcmVzY2FsZSgpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcblx0ICAgICAgcmFuZ2UgPSB4O1xuXHQgICAgICByZXR1cm4gcmVzY2FsZSgpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcblx0ICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG5cdCAgICAgIHkgPSB5IDwgMCA/IE5hTiA6IHkgLyBreCArIHgwO1xuXHQgICAgICByZXR1cm4gWyB5LCB5ICsgMSAvIGt4IF07XG5cdCAgICB9O1xuXHQgICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZDNfc2NhbGVfcXVhbnRpemUoeDAsIHgxLCByYW5nZSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHJlc2NhbGUoKTtcblx0ICB9XG5cdCAgZDMuc2NhbGUudGhyZXNob2xkID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfc2NhbGVfdGhyZXNob2xkKFsgLjUgXSwgWyAwLCAxIF0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc2NhbGVfdGhyZXNob2xkKGRvbWFpbiwgcmFuZ2UpIHtcblx0ICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcblx0ICAgICAgaWYgKHggPD0geCkgcmV0dXJuIHJhbmdlW2QzLmJpc2VjdChkb21haW4sIHgpXTtcblx0ICAgIH1cblx0ICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuXHQgICAgICBkb21haW4gPSBfO1xuXHQgICAgICByZXR1cm4gc2NhbGU7XG5cdCAgICB9O1xuXHQgICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuXHQgICAgICByYW5nZSA9IF87XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG5cdCAgICAgIHkgPSByYW5nZS5pbmRleE9mKHkpO1xuXHQgICAgICByZXR1cm4gWyBkb21haW5beSAtIDFdLCBkb21haW5beV0gXTtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV90aHJlc2hvbGQoZG9tYWluLCByYW5nZSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHNjYWxlO1xuXHQgIH1cblx0ICBkMy5zY2FsZS5pZGVudGl0eSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3NjYWxlX2lkZW50aXR5KFsgMCwgMSBdKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3NjYWxlX2lkZW50aXR5KGRvbWFpbikge1xuXHQgICAgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuXHQgICAgICByZXR1cm4gK3g7XG5cdCAgICB9XG5cdCAgICBpZGVudGl0eS5pbnZlcnQgPSBpZGVudGl0eTtcblx0ICAgIGlkZW50aXR5LmRvbWFpbiA9IGlkZW50aXR5LnJhbmdlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG5cdCAgICAgIGRvbWFpbiA9IHgubWFwKGlkZW50aXR5KTtcblx0ICAgICAgcmV0dXJuIGlkZW50aXR5O1xuXHQgICAgfTtcblx0ICAgIGlkZW50aXR5LnRpY2tzID0gZnVuY3Rpb24obSkge1xuXHQgICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKTtcblx0ICAgIH07XG5cdCAgICBpZGVudGl0eS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrRm9ybWF0KGRvbWFpbiwgbSwgZm9ybWF0KTtcblx0ICAgIH07XG5cdCAgICBpZGVudGl0eS5jb3B5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM19zY2FsZV9pZGVudGl0eShkb21haW4pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBpZGVudGl0eTtcblx0ICB9XG5cdCAgZDMuc3ZnID0ge307XG5cdCAgZnVuY3Rpb24gZDNfemVybygpIHtcblx0ICAgIHJldHVybiAwO1xuXHQgIH1cblx0ICBkMy5zdmcuYXJjID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaW5uZXJSYWRpdXMgPSBkM19zdmdfYXJjSW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzID0gZDNfc3ZnX2FyY091dGVyUmFkaXVzLCBjb3JuZXJSYWRpdXMgPSBkM196ZXJvLCBwYWRSYWRpdXMgPSBkM19zdmdfYXJjQXV0bywgc3RhcnRBbmdsZSA9IGQzX3N2Z19hcmNTdGFydEFuZ2xlLCBlbmRBbmdsZSA9IGQzX3N2Z19hcmNFbmRBbmdsZSwgcGFkQW5nbGUgPSBkM19zdmdfYXJjUGFkQW5nbGU7XG5cdCAgICBmdW5jdGlvbiBhcmMoKSB7XG5cdCAgICAgIHZhciByMCA9IE1hdGgubWF4KDAsICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgcjEgPSBNYXRoLm1heCgwLCArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZs+ALCBhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmz4AsIGRhID0gTWF0aC5hYnMoYTEgLSBhMCksIGN3ID0gYTAgPiBhMSA/IDAgOiAxO1xuXHQgICAgICBpZiAocjEgPCByMCkgcmMgPSByMSwgcjEgPSByMCwgcjAgPSByYztcblx0ICAgICAgaWYgKGRhID49IM+EzrUpIHJldHVybiBjaXJjbGVTZWdtZW50KHIxLCBjdykgKyAocjAgPyBjaXJjbGVTZWdtZW50KHIwLCAxIC0gY3cpIDogXCJcIikgKyBcIlpcIjtcblx0ICAgICAgdmFyIHJjLCBjciwgcnAsIGFwLCBwMCA9IDAsIHAxID0gMCwgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCBwYXRoID0gW107XG5cdCAgICAgIGlmIChhcCA9ICgrcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwKSAvIDIpIHtcblx0ICAgICAgICBycCA9IHBhZFJhZGl1cyA9PT0gZDNfc3ZnX2FyY0F1dG8gPyBNYXRoLnNxcnQocjAgKiByMCArIHIxICogcjEpIDogK3BhZFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIGlmICghY3cpIHAxICo9IC0xO1xuXHQgICAgICAgIGlmIChyMSkgcDEgPSBkM19hc2luKHJwIC8gcjEgKiBNYXRoLnNpbihhcCkpO1xuXHQgICAgICAgIGlmIChyMCkgcDAgPSBkM19hc2luKHJwIC8gcjAgKiBNYXRoLnNpbihhcCkpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChyMSkge1xuXHQgICAgICAgIHgwID0gcjEgKiBNYXRoLmNvcyhhMCArIHAxKTtcblx0ICAgICAgICB5MCA9IHIxICogTWF0aC5zaW4oYTAgKyBwMSk7XG5cdCAgICAgICAgeDEgPSByMSAqIE1hdGguY29zKGExIC0gcDEpO1xuXHQgICAgICAgIHkxID0gcjEgKiBNYXRoLnNpbihhMSAtIHAxKTtcblx0ICAgICAgICB2YXIgbDEgPSBNYXRoLmFicyhhMSAtIGEwIC0gMiAqIHAxKSA8PSDPgCA/IDAgOiAxO1xuXHQgICAgICAgIGlmIChwMSAmJiBkM19zdmdfYXJjU3dlZXAoeDAsIHkwLCB4MSwgeTEpID09PSBjdyBeIGwxKSB7XG5cdCAgICAgICAgICB2YXIgaDEgPSAoYTAgKyBhMSkgLyAyO1xuXHQgICAgICAgICAgeDAgPSByMSAqIE1hdGguY29zKGgxKTtcblx0ICAgICAgICAgIHkwID0gcjEgKiBNYXRoLnNpbihoMSk7XG5cdCAgICAgICAgICB4MSA9IHkxID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgeDAgPSB5MCA9IDA7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHIwKSB7XG5cdCAgICAgICAgeDIgPSByMCAqIE1hdGguY29zKGExIC0gcDApO1xuXHQgICAgICAgIHkyID0gcjAgKiBNYXRoLnNpbihhMSAtIHAwKTtcblx0ICAgICAgICB4MyA9IHIwICogTWF0aC5jb3MoYTAgKyBwMCk7XG5cdCAgICAgICAgeTMgPSByMCAqIE1hdGguc2luKGEwICsgcDApO1xuXHQgICAgICAgIHZhciBsMCA9IE1hdGguYWJzKGEwIC0gYTEgKyAyICogcDApIDw9IM+AID8gMCA6IDE7XG5cdCAgICAgICAgaWYgKHAwICYmIGQzX3N2Z19hcmNTd2VlcCh4MiwgeTIsIHgzLCB5MykgPT09IDEgLSBjdyBeIGwwKSB7XG5cdCAgICAgICAgICB2YXIgaDAgPSAoYTAgKyBhMSkgLyAyO1xuXHQgICAgICAgICAgeDIgPSByMCAqIE1hdGguY29zKGgwKTtcblx0ICAgICAgICAgIHkyID0gcjAgKiBNYXRoLnNpbihoMCk7XG5cdCAgICAgICAgICB4MyA9IHkzID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgeDIgPSB5MiA9IDA7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGRhID4gzrUgJiYgKHJjID0gTWF0aC5taW4oTWF0aC5hYnMocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpKSA+IC4wMDEpIHtcblx0ICAgICAgICBjciA9IHIwIDwgcjEgXiBjdyA/IDAgOiAxO1xuXHQgICAgICAgIHZhciByYzEgPSByYywgcmMwID0gcmM7XG5cdCAgICAgICAgaWYgKGRhIDwgz4ApIHtcblx0ICAgICAgICAgIHZhciBvYyA9IHgzID09IG51bGwgPyBbIHgyLCB5MiBdIDogeDEgPT0gbnVsbCA/IFsgeDAsIHkwIF0gOiBkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoWyB4MCwgeTAgXSwgWyB4MywgeTMgXSwgWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSksIGF4ID0geDAgLSBvY1swXSwgYXkgPSB5MCAtIG9jWzFdLCBieCA9IHgxIC0gb2NbMF0sIGJ5ID0geTEgLSBvY1sxXSwga2MgPSAxIC8gTWF0aC5zaW4oTWF0aC5hY29zKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoTWF0aC5zcXJ0KGF4ICogYXggKyBheSAqIGF5KSAqIE1hdGguc3FydChieCAqIGJ4ICsgYnkgKiBieSkpKSAvIDIpLCBsYyA9IE1hdGguc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG5cdCAgICAgICAgICByYzAgPSBNYXRoLm1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuXHQgICAgICAgICAgcmMxID0gTWF0aC5taW4ocmMsIChyMSAtIGxjKSAvIChrYyArIDEpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHgxICE9IG51bGwpIHtcblx0ICAgICAgICAgIHZhciB0MzAgPSBkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMoeDMgPT0gbnVsbCA/IFsgeDIsIHkyIF0gOiBbIHgzLCB5MyBdLCBbIHgwLCB5MCBdLCByMSwgcmMxLCBjdyksIHQxMiA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhbIHgxLCB5MSBdLCBbIHgyLCB5MiBdLCByMSwgcmMxLCBjdyk7XG5cdCAgICAgICAgICBpZiAocmMgPT09IHJjMSkge1xuXHQgICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQzMFsxXSwgXCJBXCIsIHIxLCBcIixcIiwgcjEsIFwiIDAgXCIsIDEgLSBjdyBeIGQzX3N2Z19hcmNTd2VlcCh0MzBbMV1bMF0sIHQzMFsxXVsxXSwgdDEyWzFdWzBdLCB0MTJbMV1bMV0pLCBcIixcIiwgY3csIFwiIFwiLCB0MTJbMV0sIFwiQVwiLCByYzEsIFwiLFwiLCByYzEsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MTJbMF0pO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcGF0aC5wdXNoKFwiTVwiLCB0MzBbMF0sIFwiQVwiLCByYzEsIFwiLFwiLCByYzEsIFwiIDAgMSxcIiwgY3IsIFwiIFwiLCB0MTJbMF0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHgwLCBcIixcIiwgeTApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoeDMgIT0gbnVsbCkge1xuXHQgICAgICAgICAgdmFyIHQwMyA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhbIHgwLCB5MCBdLCBbIHgzLCB5MyBdLCByMCwgLXJjMCwgY3cpLCB0MjEgPSBkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMoWyB4MiwgeTIgXSwgeDEgPT0gbnVsbCA/IFsgeDAsIHkwIF0gOiBbIHgxLCB5MSBdLCByMCwgLXJjMCwgY3cpO1xuXHQgICAgICAgICAgaWYgKHJjID09PSByYzApIHtcblx0ICAgICAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB0MjFbMF0sIFwiQVwiLCByYzAsIFwiLFwiLCByYzAsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MjFbMV0sIFwiQVwiLCByMCwgXCIsXCIsIHIwLCBcIiAwIFwiLCBjdyBeIGQzX3N2Z19hcmNTd2VlcCh0MjFbMV1bMF0sIHQyMVsxXVsxXSwgdDAzWzFdWzBdLCB0MDNbMV1bMV0pLCBcIixcIiwgMSAtIGN3LCBcIiBcIiwgdDAzWzFdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDAzWzBdKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgdDIxWzBdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDAzWzBdKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB4MiwgXCIsXCIsIHkyKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcGF0aC5wdXNoKFwiTVwiLCB4MCwgXCIsXCIsIHkwKTtcblx0ICAgICAgICBpZiAoeDEgIT0gbnVsbCkgcGF0aC5wdXNoKFwiQVwiLCByMSwgXCIsXCIsIHIxLCBcIiAwIFwiLCBsMSwgXCIsXCIsIGN3LCBcIiBcIiwgeDEsIFwiLFwiLCB5MSk7XG5cdCAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB4MiwgXCIsXCIsIHkyKTtcblx0ICAgICAgICBpZiAoeDMgIT0gbnVsbCkgcGF0aC5wdXNoKFwiQVwiLCByMCwgXCIsXCIsIHIwLCBcIiAwIFwiLCBsMCwgXCIsXCIsIDEgLSBjdywgXCIgXCIsIHgzLCBcIixcIiwgeTMpO1xuXHQgICAgICB9XG5cdCAgICAgIHBhdGgucHVzaChcIlpcIik7XG5cdCAgICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBjaXJjbGVTZWdtZW50KHIxLCBjdykge1xuXHQgICAgICByZXR1cm4gXCJNMCxcIiArIHIxICsgXCJBXCIgKyByMSArIFwiLFwiICsgcjEgKyBcIiAwIDEsXCIgKyBjdyArIFwiIDAsXCIgKyAtcjEgKyBcIkFcIiArIHIxICsgXCIsXCIgKyByMSArIFwiIDAgMSxcIiArIGN3ICsgXCIgMCxcIiArIHIxO1xuXHQgICAgfVxuXHQgICAgYXJjLmlubmVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbm5lclJhZGl1cztcblx0ICAgICAgaW5uZXJSYWRpdXMgPSBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gYXJjO1xuXHQgICAgfTtcblx0ICAgIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3V0ZXJSYWRpdXM7XG5cdCAgICAgIG91dGVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcblx0ICAgICAgcmV0dXJuIGFyYztcblx0ICAgIH07XG5cdCAgICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjb3JuZXJSYWRpdXM7XG5cdCAgICAgIGNvcm5lclJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG5cdCAgICAgIHJldHVybiBhcmM7XG5cdCAgICB9O1xuXHQgICAgYXJjLnBhZFJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkUmFkaXVzO1xuXHQgICAgICBwYWRSYWRpdXMgPSB2ID09IGQzX3N2Z19hcmNBdXRvID8gZDNfc3ZnX2FyY0F1dG8gOiBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gYXJjO1xuXHQgICAgfTtcblx0ICAgIGFyYy5zdGFydEFuZ2xlID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuXHQgICAgICBzdGFydEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcblx0ICAgICAgcmV0dXJuIGFyYztcblx0ICAgIH07XG5cdCAgICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGVuZEFuZ2xlO1xuXHQgICAgICBlbmRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG5cdCAgICAgIHJldHVybiBhcmM7XG5cdCAgICB9O1xuXHQgICAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcblx0ICAgICAgcGFkQW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gYXJjO1xuXHQgICAgfTtcblx0ICAgIGFyYy5jZW50cm9pZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBoYWxmz4A7XG5cdCAgICAgIHJldHVybiBbIE1hdGguY29zKGEpICogciwgTWF0aC5zaW4oYSkgKiByIF07XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGFyYztcblx0ICB9O1xuXHQgIHZhciBkM19zdmdfYXJjQXV0byA9IFwiYXV0b1wiO1xuXHQgIGZ1bmN0aW9uIGQzX3N2Z19hcmNJbm5lclJhZGl1cyhkKSB7XG5cdCAgICByZXR1cm4gZC5pbm5lclJhZGl1cztcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2FyY091dGVyUmFkaXVzKGQpIHtcblx0ICAgIHJldHVybiBkLm91dGVyUmFkaXVzO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfYXJjU3RhcnRBbmdsZShkKSB7XG5cdCAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfYXJjRW5kQW5nbGUoZCkge1xuXHQgICAgcmV0dXJuIGQuZW5kQW5nbGU7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19hcmNQYWRBbmdsZShkKSB7XG5cdCAgICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfYXJjU3dlZXAoeDAsIHkwLCB4MSwgeTEpIHtcblx0ICAgIHJldHVybiAoeDAgLSB4MSkgKiB5MCAtICh5MCAtIHkxKSAqIHgwID4gMCA/IDAgOiAxO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMocDAsIHAxLCByMSwgcmMsIGN3KSB7XG5cdCAgICB2YXIgeDAxID0gcDBbMF0gLSBwMVswXSwgeTAxID0gcDBbMV0gLSBwMVsxXSwgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBNYXRoLnNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSwgb3ggPSBsbyAqIHkwMSwgb3kgPSAtbG8gKiB4MDEsIHgxID0gcDBbMF0gKyBveCwgeTEgPSBwMFsxXSArIG95LCB4MiA9IHAxWzBdICsgb3gsIHkyID0gcDFbMV0gKyBveSwgeDMgPSAoeDEgKyB4MikgLyAyLCB5MyA9ICh5MSArIHkyKSAvIDIsIGR4ID0geDIgLSB4MSwgZHkgPSB5MiAtIHkxLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5LCByID0gcjEgLSByYywgRCA9IHgxICogeTIgLSB4MiAqIHkxLCBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLCBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLCBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMiwgZHgwID0gY3gwIC0geDMsIGR5MCA9IGN5MCAtIHkzLCBkeDEgPSBjeDEgLSB4MywgZHkxID0gY3kxIC0geTM7XG5cdCAgICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblx0ICAgIHJldHVybiBbIFsgY3gwIC0gb3gsIGN5MCAtIG95IF0sIFsgY3gwICogcjEgLyByLCBjeTAgKiByMSAvIHIgXSBdO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZShwcm9qZWN0aW9uKSB7XG5cdCAgICB2YXIgeCA9IGQzX2dlb21fcG9pbnRYLCB5ID0gZDNfZ2VvbV9wb2ludFksIGRlZmluZWQgPSBkM190cnVlLCBpbnRlcnBvbGF0ZSA9IGQzX3N2Z19saW5lTGluZWFyLCBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlLmtleSwgdGVuc2lvbiA9IC43O1xuXHQgICAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG5cdCAgICAgIHZhciBzZWdtZW50cyA9IFtdLCBwb2ludHMgPSBbXSwgaSA9IC0xLCBuID0gZGF0YS5sZW5ndGgsIGQsIGZ4ID0gZDNfZnVuY3Rvcih4KSwgZnkgPSBkM19mdW5jdG9yKHkpO1xuXHQgICAgICBmdW5jdGlvbiBzZWdtZW50KCkge1xuXHQgICAgICAgIHNlZ21lbnRzLnB1c2goXCJNXCIsIGludGVycG9sYXRlKHByb2plY3Rpb24ocG9pbnRzKSwgdGVuc2lvbikpO1xuXHQgICAgICB9XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcblx0ICAgICAgICAgIHBvaW50cy5wdXNoKFsgK2Z4LmNhbGwodGhpcywgZCwgaSksICtmeS5jYWxsKHRoaXMsIGQsIGkpIF0pO1xuXHQgICAgICAgIH0gZWxzZSBpZiAocG9pbnRzLmxlbmd0aCkge1xuXHQgICAgICAgICAgc2VnbWVudCgpO1xuXHQgICAgICAgICAgcG9pbnRzID0gW107XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChwb2ludHMubGVuZ3RoKSBzZWdtZW50KCk7XG5cdCAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50cy5qb2luKFwiXCIpIDogbnVsbDtcblx0ICAgIH1cblx0ICAgIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcblx0ICAgICAgeCA9IF87XG5cdCAgICAgIHJldHVybiBsaW5lO1xuXHQgICAgfTtcblx0ICAgIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTtcblx0ICAgICAgeSA9IF87XG5cdCAgICAgIHJldHVybiBsaW5lO1xuXHQgICAgfTtcblx0ICAgIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGVmaW5lZDtcblx0ICAgICAgZGVmaW5lZCA9IF87XG5cdCAgICAgIHJldHVybiBsaW5lO1xuXHQgICAgfTtcblx0ICAgIGxpbmUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlS2V5O1xuXHQgICAgICBpZiAodHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIikgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZSA9IF87IGVsc2UgaW50ZXJwb2xhdGVLZXkgPSAoaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUludGVycG9sYXRvcnMuZ2V0KF8pIHx8IGQzX3N2Z19saW5lTGluZWFyKS5rZXk7XG5cdCAgICAgIHJldHVybiBsaW5lO1xuXHQgICAgfTtcblx0ICAgIGxpbmUudGVuc2lvbiA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGVuc2lvbjtcblx0ICAgICAgdGVuc2lvbiA9IF87XG5cdCAgICAgIHJldHVybiBsaW5lO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBsaW5lO1xuXHQgIH1cblx0ICBkMy5zdmcubGluZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGQzX3N2Z19saW5lKGQzX2lkZW50aXR5KTtcblx0ICB9O1xuXHQgIHZhciBkM19zdmdfbGluZUludGVycG9sYXRvcnMgPSBkMy5tYXAoe1xuXHQgICAgbGluZWFyOiBkM19zdmdfbGluZUxpbmVhcixcblx0ICAgIFwibGluZWFyLWNsb3NlZFwiOiBkM19zdmdfbGluZUxpbmVhckNsb3NlZCxcblx0ICAgIHN0ZXA6IGQzX3N2Z19saW5lU3RlcCxcblx0ICAgIFwic3RlcC1iZWZvcmVcIjogZDNfc3ZnX2xpbmVTdGVwQmVmb3JlLFxuXHQgICAgXCJzdGVwLWFmdGVyXCI6IGQzX3N2Z19saW5lU3RlcEFmdGVyLFxuXHQgICAgYmFzaXM6IGQzX3N2Z19saW5lQmFzaXMsXG5cdCAgICBcImJhc2lzLW9wZW5cIjogZDNfc3ZnX2xpbmVCYXNpc09wZW4sXG5cdCAgICBcImJhc2lzLWNsb3NlZFwiOiBkM19zdmdfbGluZUJhc2lzQ2xvc2VkLFxuXHQgICAgYnVuZGxlOiBkM19zdmdfbGluZUJ1bmRsZSxcblx0ICAgIGNhcmRpbmFsOiBkM19zdmdfbGluZUNhcmRpbmFsLFxuXHQgICAgXCJjYXJkaW5hbC1vcGVuXCI6IGQzX3N2Z19saW5lQ2FyZGluYWxPcGVuLFxuXHQgICAgXCJjYXJkaW5hbC1jbG9zZWRcIjogZDNfc3ZnX2xpbmVDYXJkaW5hbENsb3NlZCxcblx0ICAgIG1vbm90b25lOiBkM19zdmdfbGluZU1vbm90b25lXG5cdCAgfSk7XG5cdCAgZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHQgICAgdmFsdWUua2V5ID0ga2V5O1xuXHQgICAgdmFsdWUuY2xvc2VkID0gLy1jbG9zZWQkLy50ZXN0KGtleSk7XG5cdCAgfSk7XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSB7XG5cdCAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA+IDEgPyBwb2ludHMuam9pbihcIkxcIikgOiBwb2ludHMgKyBcIlpcIjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVMaW5lYXJDbG9zZWQocG9pbnRzKSB7XG5cdCAgICByZXR1cm4gcG9pbnRzLmpvaW4oXCJMXCIpICsgXCJaXCI7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcChwb2ludHMpIHtcblx0ICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sIFwiLFwiLCBwWzFdIF07XG5cdCAgICB3aGlsZSAoKytpIDwgbikgcGF0aC5wdXNoKFwiSFwiLCAocFswXSArIChwID0gcG9pbnRzW2ldKVswXSkgLyAyLCBcIlZcIiwgcFsxXSk7XG5cdCAgICBpZiAobiA+IDEpIHBhdGgucHVzaChcIkhcIiwgcFswXSk7XG5cdCAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZVN0ZXBCZWZvcmUocG9pbnRzKSB7XG5cdCAgICB2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoLCBwID0gcG9pbnRzWzBdLCBwYXRoID0gWyBwWzBdLCBcIixcIiwgcFsxXSBdO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaChcIlZcIiwgKHAgPSBwb2ludHNbaV0pWzFdLCBcIkhcIiwgcFswXSk7XG5cdCAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZVN0ZXBBZnRlcihwb2ludHMpIHtcblx0ICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sIFwiLFwiLCBwWzFdIF07XG5cdCAgICB3aGlsZSAoKytpIDwgbikgcGF0aC5wdXNoKFwiSFwiLCAocCA9IHBvaW50c1tpXSlbMF0sIFwiVlwiLCBwWzFdKTtcblx0ICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxPcGVuKHBvaW50cywgdGVuc2lvbikge1xuXHQgICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCA0ID8gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSA6IHBvaW50c1sxXSArIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMuc2xpY2UoMSwgLTEpLCBkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMocG9pbnRzLCB0ZW5zaW9uKSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxDbG9zZWQocG9pbnRzLCB0ZW5zaW9uKSB7XG5cdCAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhckNsb3NlZChwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKChwb2ludHMucHVzaChwb2ludHNbMF0pLCBcblx0ICAgIHBvaW50cyksIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhbIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMl0gXS5jb25jYXQocG9pbnRzLCBbIHBvaW50c1sxXSBdKSwgdGVuc2lvbikpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsKHBvaW50cywgdGVuc2lvbikge1xuXHQgICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSA6IHBvaW50c1swXSArIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMsIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhwb2ludHMsIHRlbnNpb24pKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgdGFuZ2VudHMpIHtcblx0ICAgIGlmICh0YW5nZW50cy5sZW5ndGggPCAxIHx8IHBvaW50cy5sZW5ndGggIT0gdGFuZ2VudHMubGVuZ3RoICYmIHBvaW50cy5sZW5ndGggIT0gdGFuZ2VudHMubGVuZ3RoICsgMikge1xuXHQgICAgICByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcblx0ICAgIH1cblx0ICAgIHZhciBxdWFkID0gcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGgsIHBhdGggPSBcIlwiLCBwMCA9IHBvaW50c1swXSwgcCA9IHBvaW50c1sxXSwgdDAgPSB0YW5nZW50c1swXSwgdCA9IHQwLCBwaSA9IDE7XG5cdCAgICBpZiAocXVhZCkge1xuXHQgICAgICBwYXRoICs9IFwiUVwiICsgKHBbMF0gLSB0MFswXSAqIDIgLyAzKSArIFwiLFwiICsgKHBbMV0gLSB0MFsxXSAqIDIgLyAzKSArIFwiLFwiICsgcFswXSArIFwiLFwiICsgcFsxXTtcblx0ICAgICAgcDAgPSBwb2ludHNbMV07XG5cdCAgICAgIHBpID0gMjtcblx0ICAgIH1cblx0ICAgIGlmICh0YW5nZW50cy5sZW5ndGggPiAxKSB7XG5cdCAgICAgIHQgPSB0YW5nZW50c1sxXTtcblx0ICAgICAgcCA9IHBvaW50c1twaV07XG5cdCAgICAgIHBpKys7XG5cdCAgICAgIHBhdGggKz0gXCJDXCIgKyAocDBbMF0gKyB0MFswXSkgKyBcIixcIiArIChwMFsxXSArIHQwWzFdKSArIFwiLFwiICsgKHBbMF0gLSB0WzBdKSArIFwiLFwiICsgKHBbMV0gLSB0WzFdKSArIFwiLFwiICsgcFswXSArIFwiLFwiICsgcFsxXTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCB0YW5nZW50cy5sZW5ndGg7IGkrKywgcGkrKykge1xuXHQgICAgICAgIHAgPSBwb2ludHNbcGldO1xuXHQgICAgICAgIHQgPSB0YW5nZW50c1tpXTtcblx0ICAgICAgICBwYXRoICs9IFwiU1wiICsgKHBbMF0gLSB0WzBdKSArIFwiLFwiICsgKHBbMV0gLSB0WzFdKSArIFwiLFwiICsgcFswXSArIFwiLFwiICsgcFsxXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKHF1YWQpIHtcblx0ICAgICAgdmFyIGxwID0gcG9pbnRzW3BpXTtcblx0ICAgICAgcGF0aCArPSBcIlFcIiArIChwWzBdICsgdFswXSAqIDIgLyAzKSArIFwiLFwiICsgKHBbMV0gKyB0WzFdICogMiAvIDMpICsgXCIsXCIgKyBscFswXSArIFwiLFwiICsgbHBbMV07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcGF0aDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikge1xuXHQgICAgdmFyIHRhbmdlbnRzID0gW10sIGEgPSAoMSAtIHRlbnNpb24pIC8gMiwgcDAsIHAxID0gcG9pbnRzWzBdLCBwMiA9IHBvaW50c1sxXSwgaSA9IDEsIG4gPSBwb2ludHMubGVuZ3RoO1xuXHQgICAgd2hpbGUgKCsraSA8IG4pIHtcblx0ICAgICAgcDAgPSBwMTtcblx0ICAgICAgcDEgPSBwMjtcblx0ICAgICAgcDIgPSBwb2ludHNbaV07XG5cdCAgICAgIHRhbmdlbnRzLnB1c2goWyBhICogKHAyWzBdIC0gcDBbMF0pLCBhICogKHAyWzFdIC0gcDBbMV0pIF0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRhbmdlbnRzO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzKHBvaW50cykge1xuXHQgICAgaWYgKHBvaW50cy5sZW5ndGggPCAzKSByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcblx0ICAgIHZhciBpID0gMSwgbiA9IHBvaW50cy5sZW5ndGgsIHBpID0gcG9pbnRzWzBdLCB4MCA9IHBpWzBdLCB5MCA9IHBpWzFdLCBweCA9IFsgeDAsIHgwLCB4MCwgKHBpID0gcG9pbnRzWzFdKVswXSBdLCBweSA9IFsgeTAsIHkwLCB5MCwgcGlbMV0gXSwgcGF0aCA9IFsgeDAsIFwiLFwiLCB5MCwgXCJMXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSkgXTtcblx0ICAgIHBvaW50cy5wdXNoKHBvaW50c1tuIC0gMV0pO1xuXHQgICAgd2hpbGUgKCsraSA8PSBuKSB7XG5cdCAgICAgIHBpID0gcG9pbnRzW2ldO1xuXHQgICAgICBweC5zaGlmdCgpO1xuXHQgICAgICBweC5wdXNoKHBpWzBdKTtcblx0ICAgICAgcHkuc2hpZnQoKTtcblx0ICAgICAgcHkucHVzaChwaVsxXSk7XG5cdCAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcblx0ICAgIH1cblx0ICAgIHBvaW50cy5wb3AoKTtcblx0ICAgIHBhdGgucHVzaChcIkxcIiwgcGkpO1xuXHQgICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc09wZW4ocG9pbnRzKSB7XG5cdCAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDQpIHJldHVybiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpO1xuXHQgICAgdmFyIHBhdGggPSBbXSwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgcGksIHB4ID0gWyAwIF0sIHB5ID0gWyAwIF07XG5cdCAgICB3aGlsZSAoKytpIDwgMykge1xuXHQgICAgICBwaSA9IHBvaW50c1tpXTtcblx0ICAgICAgcHgucHVzaChwaVswXSk7XG5cdCAgICAgIHB5LnB1c2gocGlbMV0pO1xuXHQgICAgfVxuXHQgICAgcGF0aC5wdXNoKGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpICsgXCIsXCIgKyBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB5KSk7XG5cdCAgICAtLWk7XG5cdCAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICBwaSA9IHBvaW50c1tpXTtcblx0ICAgICAgcHguc2hpZnQoKTtcblx0ICAgICAgcHgucHVzaChwaVswXSk7XG5cdCAgICAgIHB5LnNoaWZ0KCk7XG5cdCAgICAgIHB5LnB1c2gocGlbMV0pO1xuXHQgICAgICBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHB4LCBweSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzQ2xvc2VkKHBvaW50cykge1xuXHQgICAgdmFyIHBhdGgsIGkgPSAtMSwgbiA9IHBvaW50cy5sZW5ndGgsIG0gPSBuICsgNCwgcGksIHB4ID0gW10sIHB5ID0gW107XG5cdCAgICB3aGlsZSAoKytpIDwgNCkge1xuXHQgICAgICBwaSA9IHBvaW50c1tpICUgbl07XG5cdCAgICAgIHB4LnB1c2gocGlbMF0pO1xuXHQgICAgICBweS5wdXNoKHBpWzFdKTtcblx0ICAgIH1cblx0ICAgIHBhdGggPSBbIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSkgXTtcblx0ICAgIC0taTtcblx0ICAgIHdoaWxlICgrK2kgPCBtKSB7XG5cdCAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcblx0ICAgICAgcHguc2hpZnQoKTtcblx0ICAgICAgcHgucHVzaChwaVswXSk7XG5cdCAgICAgIHB5LnNoaWZ0KCk7XG5cdCAgICAgIHB5LnB1c2gocGlbMV0pO1xuXHQgICAgICBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHB4LCBweSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUJ1bmRsZShwb2ludHMsIHRlbnNpb24pIHtcblx0ICAgIHZhciBuID0gcG9pbnRzLmxlbmd0aCAtIDE7XG5cdCAgICBpZiAobikge1xuXHQgICAgICB2YXIgeDAgPSBwb2ludHNbMF1bMF0sIHkwID0gcG9pbnRzWzBdWzFdLCBkeCA9IHBvaW50c1tuXVswXSAtIHgwLCBkeSA9IHBvaW50c1tuXVsxXSAtIHkwLCBpID0gLTEsIHAsIHQ7XG5cdCAgICAgIHdoaWxlICgrK2kgPD0gbikge1xuXHQgICAgICAgIHAgPSBwb2ludHNbaV07XG5cdCAgICAgICAgdCA9IGkgLyBuO1xuXHQgICAgICAgIHBbMF0gPSB0ZW5zaW9uICogcFswXSArICgxIC0gdGVuc2lvbikgKiAoeDAgKyB0ICogZHgpO1xuXHQgICAgICAgIHBbMV0gPSB0ZW5zaW9uICogcFsxXSArICgxIC0gdGVuc2lvbikgKiAoeTAgKyB0ICogZHkpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfc3ZnX2xpbmVCYXNpcyhwb2ludHMpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZURvdDQoYSwgYikge1xuXHQgICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xuXHQgIH1cblx0ICB2YXIgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEgPSBbIDAsIDIgLyAzLCAxIC8gMywgMCBdLCBkM19zdmdfbGluZUJhc2lzQmV6aWVyMiA9IFsgMCwgMSAvIDMsIDIgLyAzLCAwIF0sIGQzX3N2Z19saW5lQmFzaXNCZXppZXIzID0gWyAwLCAxIC8gNiwgMiAvIDMsIDEgLyA2IF07XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCB4LCB5KSB7XG5cdCAgICBwYXRoLnB1c2goXCJDXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMSwgeCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEsIHkpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIyLCB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMiwgeSksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCB5KSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKSB7XG5cdCAgICByZXR1cm4gKHAxWzFdIC0gcDBbMV0pIC8gKHAxWzBdIC0gcDBbMF0pO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzKHBvaW50cykge1xuXHQgICAgdmFyIGkgPSAwLCBqID0gcG9pbnRzLmxlbmd0aCAtIDEsIG0gPSBbXSwgcDAgPSBwb2ludHNbMF0sIHAxID0gcG9pbnRzWzFdLCBkID0gbVswXSA9IGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKTtcblx0ICAgIHdoaWxlICgrK2kgPCBqKSB7XG5cdCAgICAgIG1baV0gPSAoZCArIChkID0gZDNfc3ZnX2xpbmVTbG9wZShwMCA9IHAxLCBwMSA9IHBvaW50c1tpICsgMV0pKSkgLyAyO1xuXHQgICAgfVxuXHQgICAgbVtpXSA9IGQ7XG5cdCAgICByZXR1cm4gbTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzKHBvaW50cykge1xuXHQgICAgdmFyIHRhbmdlbnRzID0gW10sIGQsIGEsIGIsIHMsIG0gPSBkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzKHBvaW50cyksIGkgPSAtMSwgaiA9IHBvaW50cy5sZW5ndGggLSAxO1xuXHQgICAgd2hpbGUgKCsraSA8IGopIHtcblx0ICAgICAgZCA9IGQzX3N2Z19saW5lU2xvcGUocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdKTtcblx0ICAgICAgaWYgKGFicyhkKSA8IM61KSB7XG5cdCAgICAgICAgbVtpXSA9IG1baSArIDFdID0gMDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBhID0gbVtpXSAvIGQ7XG5cdCAgICAgICAgYiA9IG1baSArIDFdIC8gZDtcblx0ICAgICAgICBzID0gYSAqIGEgKyBiICogYjtcblx0ICAgICAgICBpZiAocyA+IDkpIHtcblx0ICAgICAgICAgIHMgPSBkICogMyAvIE1hdGguc3FydChzKTtcblx0ICAgICAgICAgIG1baV0gPSBzICogYTtcblx0ICAgICAgICAgIG1baSArIDFdID0gcyAqIGI7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpID0gLTE7XG5cdCAgICB3aGlsZSAoKytpIDw9IGopIHtcblx0ICAgICAgcyA9IChwb2ludHNbTWF0aC5taW4oaiwgaSArIDEpXVswXSAtIHBvaW50c1tNYXRoLm1heCgwLCBpIC0gMSldWzBdKSAvICg2ICogKDEgKyBtW2ldICogbVtpXSkpO1xuXHQgICAgICB0YW5nZW50cy5wdXNoKFsgcyB8fCAwLCBtW2ldICogcyB8fCAwIF0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRhbmdlbnRzO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBkM19zdmdfbGluZU1vbm90b25lKHBvaW50cykge1xuXHQgICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSA6IHBvaW50c1swXSArIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMsIGQzX3N2Z19saW5lTW9ub3RvbmVUYW5nZW50cyhwb2ludHMpKTtcblx0ICB9XG5cdCAgZDMuc3ZnLmxpbmUucmFkaWFsID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgbGluZSA9IGQzX3N2Z19saW5lKGQzX3N2Z19saW5lUmFkaWFsKTtcblx0ICAgIGxpbmUucmFkaXVzID0gbGluZS54LCBkZWxldGUgbGluZS54O1xuXHQgICAgbGluZS5hbmdsZSA9IGxpbmUueSwgZGVsZXRlIGxpbmUueTtcblx0ICAgIHJldHVybiBsaW5lO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVSYWRpYWwocG9pbnRzKSB7XG5cdCAgICB2YXIgcG9pbnQsIGkgPSAtMSwgbiA9IHBvaW50cy5sZW5ndGgsIHIsIGE7XG5cdCAgICB3aGlsZSAoKytpIDwgbikge1xuXHQgICAgICBwb2ludCA9IHBvaW50c1tpXTtcblx0ICAgICAgciA9IHBvaW50WzBdO1xuXHQgICAgICBhID0gcG9pbnRbMV0gLSBoYWxmz4A7XG5cdCAgICAgIHBvaW50WzBdID0gciAqIE1hdGguY29zKGEpO1xuXHQgICAgICBwb2ludFsxXSA9IHIgKiBNYXRoLnNpbihhKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBwb2ludHM7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGQzX3N2Z19hcmVhKHByb2plY3Rpb24pIHtcblx0ICAgIHZhciB4MCA9IGQzX2dlb21fcG9pbnRYLCB4MSA9IGQzX2dlb21fcG9pbnRYLCB5MCA9IDAsIHkxID0gZDNfZ2VvbV9wb2ludFksIGRlZmluZWQgPSBkM190cnVlLCBpbnRlcnBvbGF0ZSA9IGQzX3N2Z19saW5lTGluZWFyLCBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlLmtleSwgaW50ZXJwb2xhdGVSZXZlcnNlID0gaW50ZXJwb2xhdGUsIEwgPSBcIkxcIiwgdGVuc2lvbiA9IC43O1xuXHQgICAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG5cdCAgICAgIHZhciBzZWdtZW50cyA9IFtdLCBwb2ludHMwID0gW10sIHBvaW50czEgPSBbXSwgaSA9IC0xLCBuID0gZGF0YS5sZW5ndGgsIGQsIGZ4MCA9IGQzX2Z1bmN0b3IoeDApLCBmeTAgPSBkM19mdW5jdG9yKHkwKSwgZngxID0geDAgPT09IHgxID8gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHg7XG5cdCAgICAgIH0gOiBkM19mdW5jdG9yKHgxKSwgZnkxID0geTAgPT09IHkxID8gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHk7XG5cdCAgICAgIH0gOiBkM19mdW5jdG9yKHkxKSwgeCwgeTtcblx0ICAgICAgZnVuY3Rpb24gc2VnbWVudCgpIHtcblx0ICAgICAgICBzZWdtZW50cy5wdXNoKFwiTVwiLCBpbnRlcnBvbGF0ZShwcm9qZWN0aW9uKHBvaW50czEpLCB0ZW5zaW9uKSwgTCwgaW50ZXJwb2xhdGVSZXZlcnNlKHByb2plY3Rpb24ocG9pbnRzMC5yZXZlcnNlKCkpLCB0ZW5zaW9uKSwgXCJaXCIpO1xuXHQgICAgICB9XG5cdCAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG5cdCAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcblx0ICAgICAgICAgIHBvaW50czAucHVzaChbIHggPSArZngwLmNhbGwodGhpcywgZCwgaSksIHkgPSArZnkwLmNhbGwodGhpcywgZCwgaSkgXSk7XG5cdCAgICAgICAgICBwb2ludHMxLnB1c2goWyArZngxLmNhbGwodGhpcywgZCwgaSksICtmeTEuY2FsbCh0aGlzLCBkLCBpKSBdKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHBvaW50czAubGVuZ3RoKSB7XG5cdCAgICAgICAgICBzZWdtZW50KCk7XG5cdCAgICAgICAgICBwb2ludHMwID0gW107XG5cdCAgICAgICAgICBwb2ludHMxID0gW107XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChwb2ludHMwLmxlbmd0aCkgc2VnbWVudCgpO1xuXHQgICAgICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID8gc2VnbWVudHMuam9pbihcIlwiKSA6IG51bGw7XG5cdCAgICB9XG5cdCAgICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxO1xuXHQgICAgICB4MCA9IHgxID0gXztcblx0ICAgICAgcmV0dXJuIGFyZWE7XG5cdCAgICB9O1xuXHQgICAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDA7XG5cdCAgICAgIHgwID0gXztcblx0ICAgICAgcmV0dXJuIGFyZWE7XG5cdCAgICB9O1xuXHQgICAgYXJlYS54MSA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDE7XG5cdCAgICAgIHgxID0gXztcblx0ICAgICAgcmV0dXJuIGFyZWE7XG5cdCAgICB9O1xuXHQgICAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5MTtcblx0ICAgICAgeTAgPSB5MSA9IF87XG5cdCAgICAgIHJldHVybiBhcmVhO1xuXHQgICAgfTtcblx0ICAgIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkwO1xuXHQgICAgICB5MCA9IF87XG5cdCAgICAgIHJldHVybiBhcmVhO1xuXHQgICAgfTtcblx0ICAgIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuXHQgICAgICB5MSA9IF87XG5cdCAgICAgIHJldHVybiBhcmVhO1xuXHQgICAgfTtcblx0ICAgIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGVmaW5lZDtcblx0ICAgICAgZGVmaW5lZCA9IF87XG5cdCAgICAgIHJldHVybiBhcmVhO1xuXHQgICAgfTtcblx0ICAgIGFyZWEuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlS2V5O1xuXHQgICAgICBpZiAodHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIikgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZSA9IF87IGVsc2UgaW50ZXJwb2xhdGVLZXkgPSAoaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUludGVycG9sYXRvcnMuZ2V0KF8pIHx8IGQzX3N2Z19saW5lTGluZWFyKS5rZXk7XG5cdCAgICAgIGludGVycG9sYXRlUmV2ZXJzZSA9IGludGVycG9sYXRlLnJldmVyc2UgfHwgaW50ZXJwb2xhdGU7XG5cdCAgICAgIEwgPSBpbnRlcnBvbGF0ZS5jbG9zZWQgPyBcIk1cIiA6IFwiTFwiO1xuXHQgICAgICByZXR1cm4gYXJlYTtcblx0ICAgIH07XG5cdCAgICBhcmVhLnRlbnNpb24gPSBmdW5jdGlvbihfKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRlbnNpb247XG5cdCAgICAgIHRlbnNpb24gPSBfO1xuXHQgICAgICByZXR1cm4gYXJlYTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gYXJlYTtcblx0ICB9XG5cdCAgZDNfc3ZnX2xpbmVTdGVwQmVmb3JlLnJldmVyc2UgPSBkM19zdmdfbGluZVN0ZXBBZnRlcjtcblx0ICBkM19zdmdfbGluZVN0ZXBBZnRlci5yZXZlcnNlID0gZDNfc3ZnX2xpbmVTdGVwQmVmb3JlO1xuXHQgIGQzLnN2Zy5hcmVhID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZDNfc3ZnX2FyZWEoZDNfaWRlbnRpdHkpO1xuXHQgIH07XG5cdCAgZDMuc3ZnLmFyZWEucmFkaWFsID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgYXJlYSA9IGQzX3N2Z19hcmVhKGQzX3N2Z19saW5lUmFkaWFsKTtcblx0ICAgIGFyZWEucmFkaXVzID0gYXJlYS54LCBkZWxldGUgYXJlYS54O1xuXHQgICAgYXJlYS5pbm5lclJhZGl1cyA9IGFyZWEueDAsIGRlbGV0ZSBhcmVhLngwO1xuXHQgICAgYXJlYS5vdXRlclJhZGl1cyA9IGFyZWEueDEsIGRlbGV0ZSBhcmVhLngxO1xuXHQgICAgYXJlYS5hbmdsZSA9IGFyZWEueSwgZGVsZXRlIGFyZWEueTtcblx0ICAgIGFyZWEuc3RhcnRBbmdsZSA9IGFyZWEueTAsIGRlbGV0ZSBhcmVhLnkwO1xuXHQgICAgYXJlYS5lbmRBbmdsZSA9IGFyZWEueTEsIGRlbGV0ZSBhcmVhLnkxO1xuXHQgICAgcmV0dXJuIGFyZWE7XG5cdCAgfTtcblx0ICBkMy5zdmcuY2hvcmQgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBzb3VyY2UgPSBkM19zb3VyY2UsIHRhcmdldCA9IGQzX3RhcmdldCwgcmFkaXVzID0gZDNfc3ZnX2Nob3JkUmFkaXVzLCBzdGFydEFuZ2xlID0gZDNfc3ZnX2FyY1N0YXJ0QW5nbGUsIGVuZEFuZ2xlID0gZDNfc3ZnX2FyY0VuZEFuZ2xlO1xuXHQgICAgZnVuY3Rpb24gY2hvcmQoZCwgaSkge1xuXHQgICAgICB2YXIgcyA9IHN1Ymdyb3VwKHRoaXMsIHNvdXJjZSwgZCwgaSksIHQgPSBzdWJncm91cCh0aGlzLCB0YXJnZXQsIGQsIGkpO1xuXHQgICAgICByZXR1cm4gXCJNXCIgKyBzLnAwICsgYXJjKHMuciwgcy5wMSwgcy5hMSAtIHMuYTApICsgKGVxdWFscyhzLCB0KSA/IGN1cnZlKHMuciwgcy5wMSwgcy5yLCBzLnAwKSA6IGN1cnZlKHMuciwgcy5wMSwgdC5yLCB0LnAwKSArIGFyYyh0LnIsIHQucDEsIHQuYTEgLSB0LmEwKSArIGN1cnZlKHQuciwgdC5wMSwgcy5yLCBzLnAwKSkgKyBcIlpcIjtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHN1Ymdyb3VwKHNlbGYsIGYsIGQsIGkpIHtcblx0ICAgICAgdmFyIHN1Ymdyb3VwID0gZi5jYWxsKHNlbGYsIGQsIGkpLCByID0gcmFkaXVzLmNhbGwoc2VsZiwgc3ViZ3JvdXAsIGkpLCBhMCA9IHN0YXJ0QW5nbGUuY2FsbChzZWxmLCBzdWJncm91cCwgaSkgLSBoYWxmz4AsIGExID0gZW5kQW5nbGUuY2FsbChzZWxmLCBzdWJncm91cCwgaSkgLSBoYWxmz4A7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgcjogcixcblx0ICAgICAgICBhMDogYTAsXG5cdCAgICAgICAgYTE6IGExLFxuXHQgICAgICAgIHAwOiBbIHIgKiBNYXRoLmNvcyhhMCksIHIgKiBNYXRoLnNpbihhMCkgXSxcblx0ICAgICAgICBwMTogWyByICogTWF0aC5jb3MoYTEpLCByICogTWF0aC5zaW4oYTEpIF1cblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG5cdCAgICAgIHJldHVybiBhLmEwID09IGIuYTAgJiYgYS5hMSA9PSBiLmExO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXJjKHIsIHAsIGEpIHtcblx0ICAgICAgcmV0dXJuIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgXCIgKyArKGEgPiDPgCkgKyBcIiwxIFwiICsgcDtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGN1cnZlKHIwLCBwMCwgcjEsIHAxKSB7XG5cdCAgICAgIHJldHVybiBcIlEgMCwwIFwiICsgcDE7XG5cdCAgICB9XG5cdCAgICBjaG9yZC5yYWRpdXMgPSBmdW5jdGlvbih2KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhZGl1cztcblx0ICAgICAgcmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcblx0ICAgICAgcmV0dXJuIGNob3JkO1xuXHQgICAgfTtcblx0ICAgIGNob3JkLnNvdXJjZSA9IGZ1bmN0aW9uKHYpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc291cmNlO1xuXHQgICAgICBzb3VyY2UgPSBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gY2hvcmQ7XG5cdCAgICB9O1xuXHQgICAgY2hvcmQudGFyZ2V0ID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0YXJnZXQ7XG5cdCAgICAgIHRhcmdldCA9IGQzX2Z1bmN0b3Iodik7XG5cdCAgICAgIHJldHVybiBjaG9yZDtcblx0ICAgIH07XG5cdCAgICBjaG9yZC5zdGFydEFuZ2xlID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuXHQgICAgICBzdGFydEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcblx0ICAgICAgcmV0dXJuIGNob3JkO1xuXHQgICAgfTtcblx0ICAgIGNob3JkLmVuZEFuZ2xlID0gZnVuY3Rpb24odikge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcblx0ICAgICAgZW5kQW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuXHQgICAgICByZXR1cm4gY2hvcmQ7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGNob3JkO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2Nob3JkUmFkaXVzKGQpIHtcblx0ICAgIHJldHVybiBkLnJhZGl1cztcblx0ICB9XG5cdCAgZDMuc3ZnLmRpYWdvbmFsID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgc291cmNlID0gZDNfc291cmNlLCB0YXJnZXQgPSBkM190YXJnZXQsIHByb2plY3Rpb24gPSBkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uO1xuXHQgICAgZnVuY3Rpb24gZGlhZ29uYWwoZCwgaSkge1xuXHQgICAgICB2YXIgcDAgPSBzb3VyY2UuY2FsbCh0aGlzLCBkLCBpKSwgcDMgPSB0YXJnZXQuY2FsbCh0aGlzLCBkLCBpKSwgbSA9IChwMC55ICsgcDMueSkgLyAyLCBwID0gWyBwMCwge1xuXHQgICAgICAgIHg6IHAwLngsXG5cdCAgICAgICAgeTogbVxuXHQgICAgICB9LCB7XG5cdCAgICAgICAgeDogcDMueCxcblx0ICAgICAgICB5OiBtXG5cdCAgICAgIH0sIHAzIF07XG5cdCAgICAgIHAgPSBwLm1hcChwcm9qZWN0aW9uKTtcblx0ICAgICAgcmV0dXJuIFwiTVwiICsgcFswXSArIFwiQ1wiICsgcFsxXSArIFwiIFwiICsgcFsyXSArIFwiIFwiICsgcFszXTtcblx0ICAgIH1cblx0ICAgIGRpYWdvbmFsLnNvdXJjZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc291cmNlO1xuXHQgICAgICBzb3VyY2UgPSBkM19mdW5jdG9yKHgpO1xuXHQgICAgICByZXR1cm4gZGlhZ29uYWw7XG5cdCAgICB9O1xuXHQgICAgZGlhZ29uYWwudGFyZ2V0ID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0YXJnZXQ7XG5cdCAgICAgIHRhcmdldCA9IGQzX2Z1bmN0b3IoeCk7XG5cdCAgICAgIHJldHVybiBkaWFnb25hbDtcblx0ICAgIH07XG5cdCAgICBkaWFnb25hbC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcm9qZWN0aW9uO1xuXHQgICAgICBwcm9qZWN0aW9uID0geDtcblx0ICAgICAgcmV0dXJuIGRpYWdvbmFsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBkaWFnb25hbDtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3N2Z19kaWFnb25hbFByb2plY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIFsgZC54LCBkLnkgXTtcblx0ICB9XG5cdCAgZDMuc3ZnLmRpYWdvbmFsLnJhZGlhbCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGRpYWdvbmFsID0gZDMuc3ZnLmRpYWdvbmFsKCksIHByb2plY3Rpb24gPSBkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uLCBwcm9qZWN0aW9uXyA9IGRpYWdvbmFsLnByb2plY3Rpb247XG5cdCAgICBkaWFnb25hbC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHByb2plY3Rpb25fKGQzX3N2Z19kaWFnb25hbFJhZGlhbFByb2plY3Rpb24ocHJvamVjdGlvbiA9IHgpKSA6IHByb2plY3Rpb247XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGRpYWdvbmFsO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBkID0gcHJvamVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCByID0gZFswXSwgYSA9IGRbMV0gLSBoYWxmz4A7XG5cdCAgICAgIHJldHVybiBbIHIgKiBNYXRoLmNvcyhhKSwgciAqIE1hdGguc2luKGEpIF07XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkMy5zdmcuc3ltYm9sID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgdHlwZSA9IGQzX3N2Z19zeW1ib2xUeXBlLCBzaXplID0gZDNfc3ZnX3N5bWJvbFNpemU7XG5cdCAgICBmdW5jdGlvbiBzeW1ib2woZCwgaSkge1xuXHQgICAgICByZXR1cm4gKGQzX3N2Z19zeW1ib2xzLmdldCh0eXBlLmNhbGwodGhpcywgZCwgaSkpIHx8IGQzX3N2Z19zeW1ib2xDaXJjbGUpKHNpemUuY2FsbCh0aGlzLCBkLCBpKSk7XG5cdCAgICB9XG5cdCAgICBzeW1ib2wudHlwZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdHlwZTtcblx0ICAgICAgdHlwZSA9IGQzX2Z1bmN0b3IoeCk7XG5cdCAgICAgIHJldHVybiBzeW1ib2w7XG5cdCAgICB9O1xuXHQgICAgc3ltYm9sLnNpemUgPSBmdW5jdGlvbih4KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG5cdCAgICAgIHNpemUgPSBkM19mdW5jdG9yKHgpO1xuXHQgICAgICByZXR1cm4gc3ltYm9sO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBzeW1ib2w7XG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sU2l6ZSgpIHtcblx0ICAgIHJldHVybiA2NDtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX3N5bWJvbFR5cGUoKSB7XG5cdCAgICByZXR1cm4gXCJjaXJjbGVcIjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX3N5bWJvbENpcmNsZShzaXplKSB7XG5cdCAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gz4ApO1xuXHQgICAgcmV0dXJuIFwiTTAsXCIgKyByICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIgMCAxLDEgMCxcIiArIC1yICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIgMCAxLDEgMCxcIiArIHIgKyBcIlpcIjtcblx0ICB9XG5cdCAgdmFyIGQzX3N2Z19zeW1ib2xzID0gZDMubWFwKHtcblx0ICAgIGNpcmNsZTogZDNfc3ZnX3N5bWJvbENpcmNsZSxcblx0ICAgIGNyb3NzOiBmdW5jdGlvbihzaXplKSB7XG5cdCAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG5cdCAgICAgIHJldHVybiBcIk1cIiArIC0zICogciArIFwiLFwiICsgLXIgKyBcIkhcIiArIC1yICsgXCJWXCIgKyAtMyAqIHIgKyBcIkhcIiArIHIgKyBcIlZcIiArIC1yICsgXCJIXCIgKyAzICogciArIFwiVlwiICsgciArIFwiSFwiICsgciArIFwiVlwiICsgMyAqIHIgKyBcIkhcIiArIC1yICsgXCJWXCIgKyByICsgXCJIXCIgKyAtMyAqIHIgKyBcIlpcIjtcblx0ICAgIH0sXG5cdCAgICBkaWFtb25kOiBmdW5jdGlvbihzaXplKSB7XG5cdCAgICAgIHZhciByeSA9IE1hdGguc3FydChzaXplIC8gKDIgKiBkM19zdmdfc3ltYm9sVGFuMzApKSwgcnggPSByeSAqIGQzX3N2Z19zeW1ib2xUYW4zMDtcblx0ICAgICAgcmV0dXJuIFwiTTAsXCIgKyAtcnkgKyBcIkxcIiArIHJ4ICsgXCIsMFwiICsgXCIgMCxcIiArIHJ5ICsgXCIgXCIgKyAtcnggKyBcIiwwXCIgKyBcIlpcIjtcblx0ICAgIH0sXG5cdCAgICBzcXVhcmU6IGZ1bmN0aW9uKHNpemUpIHtcblx0ICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSkgLyAyO1xuXHQgICAgICByZXR1cm4gXCJNXCIgKyAtciArIFwiLFwiICsgLXIgKyBcIkxcIiArIHIgKyBcIixcIiArIC1yICsgXCIgXCIgKyByICsgXCIsXCIgKyByICsgXCIgXCIgKyAtciArIFwiLFwiICsgciArIFwiWlwiO1xuXHQgICAgfSxcblx0ICAgIFwidHJpYW5nbGUtZG93blwiOiBmdW5jdGlvbihzaXplKSB7XG5cdCAgICAgIHZhciByeCA9IE1hdGguc3FydChzaXplIC8gZDNfc3ZnX3N5bWJvbFNxcnQzKSwgcnkgPSByeCAqIGQzX3N2Z19zeW1ib2xTcXJ0MyAvIDI7XG5cdCAgICAgIHJldHVybiBcIk0wLFwiICsgcnkgKyBcIkxcIiArIHJ4ICsgXCIsXCIgKyAtcnkgKyBcIiBcIiArIC1yeCArIFwiLFwiICsgLXJ5ICsgXCJaXCI7XG5cdCAgICB9LFxuXHQgICAgXCJ0cmlhbmdsZS11cFwiOiBmdW5jdGlvbihzaXplKSB7XG5cdCAgICAgIHZhciByeCA9IE1hdGguc3FydChzaXplIC8gZDNfc3ZnX3N5bWJvbFNxcnQzKSwgcnkgPSByeCAqIGQzX3N2Z19zeW1ib2xTcXJ0MyAvIDI7XG5cdCAgICAgIHJldHVybiBcIk0wLFwiICsgLXJ5ICsgXCJMXCIgKyByeCArIFwiLFwiICsgcnkgKyBcIiBcIiArIC1yeCArIFwiLFwiICsgcnkgKyBcIlpcIjtcblx0ICAgIH1cblx0ICB9KTtcblx0ICBkMy5zdmcuc3ltYm9sVHlwZXMgPSBkM19zdmdfc3ltYm9scy5rZXlzKCk7XG5cdCAgdmFyIGQzX3N2Z19zeW1ib2xTcXJ0MyA9IE1hdGguc3FydCgzKSwgZDNfc3ZnX3N5bWJvbFRhbjMwID0gTWF0aC50YW4oMzAgKiBkM19yYWRpYW5zKTtcblx0ICBkM19zZWxlY3Rpb25Qcm90b3R5cGUudHJhbnNpdGlvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHZhciBpZCA9IGQzX3RyYW5zaXRpb25Jbmhlcml0SWQgfHwgKytkM190cmFuc2l0aW9uSWQsIG5zID0gZDNfdHJhbnNpdGlvbk5hbWVzcGFjZShuYW1lKSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBub2RlLCB0cmFuc2l0aW9uID0gZDNfdHJhbnNpdGlvbkluaGVyaXQgfHwge1xuXHQgICAgICB0aW1lOiBEYXRlLm5vdygpLFxuXHQgICAgICBlYXNlOiBkM19lYXNlX2N1YmljSW5PdXQsXG5cdCAgICAgIGRlbGF5OiAwLFxuXHQgICAgICBkdXJhdGlvbjogMjUwXG5cdCAgICB9O1xuXHQgICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuXHQgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcblx0ICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuXHQgICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGQzX3RyYW5zaXRpb25Ob2RlKG5vZGUsIGksIG5zLCBpZCwgdHJhbnNpdGlvbik7XG5cdCAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQpO1xuXHQgIH07XG5cdCAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHJldHVybiB0aGlzLmVhY2gobmFtZSA9PSBudWxsID8gZDNfc2VsZWN0aW9uX2ludGVycnVwdCA6IGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpKSk7XG5cdCAgfTtcblx0ICB2YXIgZDNfc2VsZWN0aW9uX2ludGVycnVwdCA9IGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhkM190cmFuc2l0aW9uTmFtZXNwYWNlKCkpO1xuXHQgIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhucykge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgbG9jaywgYWN0aXZlSWQsIGFjdGl2ZTtcblx0ICAgICAgaWYgKChsb2NrID0gdGhpc1tuc10pICYmIChhY3RpdmUgPSBsb2NrW2FjdGl2ZUlkID0gbG9jay5hY3RpdmVdKSkge1xuXHQgICAgICAgIGFjdGl2ZS50aW1lci5jID0gbnVsbDtcblx0ICAgICAgICBhY3RpdmUudGltZXIudCA9IE5hTjtcblx0ICAgICAgICBpZiAoLS1sb2NrLmNvdW50KSBkZWxldGUgbG9ja1thY3RpdmVJZF07IGVsc2UgZGVsZXRlIHRoaXNbbnNdO1xuXHQgICAgICAgIGxvY2suYWN0aXZlICs9IC41O1xuXHQgICAgICAgIGFjdGl2ZS5ldmVudCAmJiBhY3RpdmUuZXZlbnQuaW50ZXJydXB0LmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgYWN0aXZlLmluZGV4KTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbihncm91cHMsIG5zLCBpZCkge1xuXHQgICAgZDNfc3ViY2xhc3MoZ3JvdXBzLCBkM190cmFuc2l0aW9uUHJvdG90eXBlKTtcblx0ICAgIGdyb3Vwcy5uYW1lc3BhY2UgPSBucztcblx0ICAgIGdyb3Vwcy5pZCA9IGlkO1xuXHQgICAgcmV0dXJuIGdyb3Vwcztcblx0ICB9XG5cdCAgdmFyIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUgPSBbXSwgZDNfdHJhbnNpdGlvbklkID0gMCwgZDNfdHJhbnNpdGlvbkluaGVyaXRJZCwgZDNfdHJhbnNpdGlvbkluaGVyaXQ7XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5jYWxsID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmNhbGw7XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5lbXB0eSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5lbXB0eTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLm5vZGUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnNpemUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2l6ZTtcblx0ICBkMy50cmFuc2l0aW9uID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBuYW1lKSB7XG5cdCAgICByZXR1cm4gc2VsZWN0aW9uICYmIHNlbGVjdGlvbi50cmFuc2l0aW9uID8gZDNfdHJhbnNpdGlvbkluaGVyaXRJZCA/IHNlbGVjdGlvbi50cmFuc2l0aW9uKG5hbWUpIDogc2VsZWN0aW9uIDogZDMuc2VsZWN0aW9uKCkudHJhbnNpdGlvbihzZWxlY3Rpb24pO1xuXHQgIH07XG5cdCAgZDMudHJhbnNpdGlvbi5wcm90b3R5cGUgPSBkM190cmFuc2l0aW9uUHJvdG90eXBlO1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0ICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2UsIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgc3Vibm9kZSwgbm9kZTtcblx0ICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKTtcblx0ICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcblx0ICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG5cdCAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcblx0ICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSkge1xuXHQgICAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcblx0ICAgICAgICAgIGQzX3RyYW5zaXRpb25Ob2RlKHN1Ym5vZGUsIGksIG5zLCBpZCwgbm9kZVtuc11baWRdKTtcblx0ICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobnVsbCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIG5zLCBpZCk7XG5cdCAgfTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG5cdCAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGVzLCBub2RlLCBzdWJub2RlLCB0cmFuc2l0aW9uO1xuXHQgICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHQgICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuXHQgICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG5cdCAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuXHQgICAgICAgICAgdHJhbnNpdGlvbiA9IG5vZGVbbnNdW2lkXTtcblx0ICAgICAgICAgIHN1Ym5vZGVzID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcblx0ICAgICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuXHQgICAgICAgICAgZm9yICh2YXIgayA9IC0xLCBvID0gc3Vibm9kZXMubGVuZ3RoOyArK2sgPCBvOyApIHtcblx0ICAgICAgICAgICAgaWYgKHN1Ym5vZGUgPSBzdWJub2Rlc1trXSkgZDNfdHJhbnNpdGlvbk5vZGUoc3Vibm9kZSwgaywgbnMsIGlkLCB0cmFuc2l0aW9uKTtcblx0ICAgICAgICAgICAgc3ViZ3JvdXAucHVzaChzdWJub2RlKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgbnMsIGlkKTtcblx0ICB9O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cdCAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZTtcblx0ICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSBcImZ1bmN0aW9uXCIpIGZpbHRlciA9IGQzX3NlbGVjdGlvbl9maWx0ZXIoZmlsdGVyKTtcblx0ICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcblx0ICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG5cdCAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0ICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgZmlsdGVyLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpIHtcblx0ICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMubmFtZXNwYWNlLCB0aGlzLmlkKTtcblx0ICB9O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudHdlZW4gPSBmdW5jdGlvbihuYW1lLCB0d2Vlbikge1xuXHQgICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0udHdlZW4uZ2V0KG5hbWUpO1xuXHQgICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIHR3ZWVuID09IG51bGwgPyBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgIG5vZGVbbnNdW2lkXS50d2Vlbi5yZW1vdmUobmFtZSk7XG5cdCAgICB9IDogZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICBub2RlW25zXVtpZF0udHdlZW4uc2V0KG5hbWUsIHR3ZWVuKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbl90d2Vlbihncm91cHMsIG5hbWUsIHZhbHVlLCB0d2Vlbikge1xuXHQgICAgdmFyIGlkID0gZ3JvdXBzLmlkLCBucyA9IGdyb3Vwcy5uYW1lc3BhY2U7XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2goZ3JvdXBzLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcblx0ICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB0d2Vlbih2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSk7XG5cdCAgICB9IDogKHZhbHVlID0gdHdlZW4odmFsdWUpLCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgIG5vZGVbbnNdW2lkXS50d2Vlbi5zZXQobmFtZSwgdmFsdWUpO1xuXHQgICAgfSkpO1xuXHQgIH1cblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmF0dHIgPSBmdW5jdGlvbihuYW1lTlMsIHZhbHVlKSB7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0ICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lTlMpIHRoaXMuYXR0cih2YWx1ZSwgbmFtZU5TW3ZhbHVlXSk7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgICAgdmFyIGludGVycG9sYXRlID0gbmFtZU5TID09IFwidHJhbnNmb3JtXCIgPyBkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGQzX2ludGVycG9sYXRlLCBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lTlMpO1xuXHQgICAgZnVuY3Rpb24gYXR0ck51bGwoKSB7XG5cdCAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXR0ck51bGxOUygpIHtcblx0ICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGF0dHJUd2VlbihiKSB7XG5cdCAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbCA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBhID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSksIGk7XG5cdCAgICAgICAgcmV0dXJuIGEgIT09IGIgJiYgKGkgPSBpbnRlcnBvbGF0ZShhLCBiKSwgZnVuY3Rpb24odCkge1xuXHQgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaSh0KSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXR0clR3ZWVuTlMoYikge1xuXHQgICAgICByZXR1cm4gYiA9PSBudWxsID8gYXR0ck51bGxOUyA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBhID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSwgaTtcblx0ICAgICAgICByZXR1cm4gYSAhPT0gYiAmJiAoaSA9IGludGVycG9sYXRlKGEsIGIpLCBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIGkodCkpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBkM190cmFuc2l0aW9uX3R3ZWVuKHRoaXMsIFwiYXR0ci5cIiArIG5hbWVOUywgdmFsdWUsIG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2Vlbik7XG5cdCAgfTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmF0dHJUd2VlbiA9IGZ1bmN0aW9uKG5hbWVOUywgdHdlZW4pIHtcblx0ICAgIHZhciBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lTlMpO1xuXHQgICAgZnVuY3Rpb24gYXR0clR3ZWVuKGQsIGkpIHtcblx0ICAgICAgdmFyIGYgPSB0d2Vlbi5jYWxsKHRoaXMsIGQsIGksIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpKTtcblx0ICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuXHQgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGYodCkpO1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYXR0clR3ZWVuTlMoZCwgaSkge1xuXHQgICAgICB2YXIgZiA9IHR3ZWVuLmNhbGwodGhpcywgZCwgaSwgdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSk7XG5cdCAgICAgIHJldHVybiBmICYmIGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIGYodCkpO1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXMudHdlZW4oXCJhdHRyLlwiICsgbmFtZU5TLCBuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuXHQgICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgICAgaWYgKG4gPCAzKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuXHQgICAgICAgIGlmIChuIDwgMikgdmFsdWUgPSBcIlwiO1xuXHQgICAgICAgIGZvciAocHJpb3JpdHkgaW4gbmFtZSkgdGhpcy5zdHlsZShwcmlvcml0eSwgbmFtZVtwcmlvcml0eV0sIHZhbHVlKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBwcmlvcml0eSA9IFwiXCI7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzdHlsZU51bGwoKSB7XG5cdCAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBzdHlsZVN0cmluZyhiKSB7XG5cdCAgICAgIHJldHVybiBiID09IG51bGwgPyBzdHlsZU51bGwgOiAoYiArPSBcIlwiLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgYSA9IGQzX3dpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSksIGk7XG5cdCAgICAgICAgcmV0dXJuIGEgIT09IGIgJiYgKGkgPSBkM19pbnRlcnBvbGF0ZShhLCBiKSwgZnVuY3Rpb24odCkge1xuXHQgICAgICAgICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlLCBzdHlsZVN0cmluZyk7XG5cdCAgfTtcblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnN0eWxlVHdlZW4gPSBmdW5jdGlvbihuYW1lLCB0d2VlbiwgcHJpb3JpdHkpIHtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgcHJpb3JpdHkgPSBcIlwiO1xuXHQgICAgZnVuY3Rpb24gc3R5bGVUd2VlbihkLCBpKSB7XG5cdCAgICAgIHZhciBmID0gdHdlZW4uY2FsbCh0aGlzLCBkLCBpLCBkM193aW5kb3codGhpcykuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpKTtcblx0ICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuXHQgICAgICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgZih0KSwgcHJpb3JpdHkpO1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXMudHdlZW4oXCJzdHlsZS5cIiArIG5hbWUsIHN0eWxlVHdlZW4pO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgIHJldHVybiBkM190cmFuc2l0aW9uX3R3ZWVuKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSwgZDNfdHJhbnNpdGlvbl90ZXh0KTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb25fdGV4dChiKSB7XG5cdCAgICBpZiAoYiA9PSBudWxsKSBiID0gXCJcIjtcblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgdGhpcy50ZXh0Q29udGVudCA9IGI7XG5cdCAgICB9O1xuXHQgIH1cblx0ICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIG5zID0gdGhpcy5uYW1lc3BhY2U7XG5cdCAgICByZXR1cm4gdGhpcy5lYWNoKFwiZW5kLnRyYW5zaXRpb25cIiwgZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBwO1xuXHQgICAgICBpZiAodGhpc1tuc10uY291bnQgPCAyICYmIChwID0gdGhpcy5wYXJlbnROb2RlKSkgcC5yZW1vdmVDaGlsZCh0aGlzKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5lYXNlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHJldHVybiB0aGlzLm5vZGUoKVtuc11baWRdLmVhc2U7XG5cdCAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gZDMuZWFzZS5hcHBseShkMywgYXJndW1lbnRzKTtcblx0ICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgIG5vZGVbbnNdW2lkXS5lYXNlID0gdmFsdWU7XG5cdCAgICB9KTtcblx0ICB9O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0uZGVsYXk7XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG5cdCAgICAgIG5vZGVbbnNdW2lkXS5kZWxheSA9ICt2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuXHQgICAgfSA6ICh2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICBub2RlW25zXVtpZF0uZGVsYXkgPSB2YWx1ZTtcblx0ICAgIH0pKTtcblx0ICB9O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0uZHVyYXRpb247XG5cdCAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG5cdCAgICAgIG5vZGVbbnNdW2lkXS5kdXJhdGlvbiA9IE1hdGgubWF4KDEsIHZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpO1xuXHQgICAgfSA6ICh2YWx1ZSA9IE1hdGgubWF4KDEsIHZhbHVlKSwgZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICBub2RlW25zXVtpZF0uZHVyYXRpb24gPSB2YWx1ZTtcblx0ICAgIH0pKTtcblx0ICB9O1xuXHQgIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG5cdCAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdCAgICAgIHZhciBpbmhlcml0ID0gZDNfdHJhbnNpdGlvbkluaGVyaXQsIGluaGVyaXRJZCA9IGQzX3RyYW5zaXRpb25Jbmhlcml0SWQ7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXRJZCA9IGlkO1xuXHQgICAgICAgIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcblx0ICAgICAgICAgIGQzX3RyYW5zaXRpb25Jbmhlcml0ID0gbm9kZVtuc11baWRdO1xuXHQgICAgICAgICAgdHlwZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIGQzX3RyYW5zaXRpb25Jbmhlcml0ID0gaW5oZXJpdDtcblx0ICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaW5oZXJpdElkO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlKSB7XG5cdCAgICAgICAgdmFyIHRyYW5zaXRpb24gPSBub2RlW25zXVtpZF07XG5cdCAgICAgICAgKHRyYW5zaXRpb24uZXZlbnQgfHwgKHRyYW5zaXRpb24uZXZlbnQgPSBkMy5kaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpKSkub24odHlwZSwgbGlzdGVuZXIpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH07XG5cdCAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS50cmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaWQwID0gdGhpcy5pZCwgaWQxID0gKytkM190cmFuc2l0aW9uSWQsIG5zID0gdGhpcy5uYW1lc3BhY2UsIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgZ3JvdXAsIG5vZGUsIHRyYW5zaXRpb247XG5cdCAgICBmb3IgKHZhciBqID0gMCwgbSA9IHRoaXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG5cdCAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuXHQgICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdCAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuXHQgICAgICAgICAgdHJhbnNpdGlvbiA9IG5vZGVbbnNdW2lkMF07XG5cdCAgICAgICAgICBkM190cmFuc2l0aW9uTm9kZShub2RlLCBpLCBucywgaWQxLCB7XG5cdCAgICAgICAgICAgIHRpbWU6IHRyYW5zaXRpb24udGltZSxcblx0ICAgICAgICAgICAgZWFzZTogdHJhbnNpdGlvbi5lYXNlLFxuXHQgICAgICAgICAgICBkZWxheTogdHJhbnNpdGlvbi5kZWxheSArIHRyYW5zaXRpb24uZHVyYXRpb24sXG5cdCAgICAgICAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uLmR1cmF0aW9uXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQxKTtcblx0ICB9O1xuXHQgIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb25OYW1lc3BhY2UobmFtZSkge1xuXHQgICAgcmV0dXJuIG5hbWUgPT0gbnVsbCA/IFwiX190cmFuc2l0aW9uX19cIiA6IFwiX190cmFuc2l0aW9uX1wiICsgbmFtZSArIFwiX19cIjtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbk5vZGUobm9kZSwgaSwgbnMsIGlkLCBpbmhlcml0KSB7XG5cdCAgICB2YXIgbG9jayA9IG5vZGVbbnNdIHx8IChub2RlW25zXSA9IHtcblx0ICAgICAgYWN0aXZlOiAwLFxuXHQgICAgICBjb3VudDogMFxuXHQgICAgfSksIHRyYW5zaXRpb24gPSBsb2NrW2lkXSwgdGltZSwgdGltZXIsIGR1cmF0aW9uLCBlYXNlLCB0d2VlbnM7XG5cdCAgICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG5cdCAgICAgIHZhciBkZWxheSA9IHRyYW5zaXRpb24uZGVsYXk7XG5cdCAgICAgIHRpbWVyLnQgPSBkZWxheSArIHRpbWU7XG5cdCAgICAgIGlmIChkZWxheSA8PSBlbGFwc2VkKSByZXR1cm4gc3RhcnQoZWxhcHNlZCAtIGRlbGF5KTtcblx0ICAgICAgdGltZXIuYyA9IHN0YXJ0O1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuXHQgICAgICB2YXIgYWN0aXZlSWQgPSBsb2NrLmFjdGl2ZSwgYWN0aXZlID0gbG9ja1thY3RpdmVJZF07XG5cdCAgICAgIGlmIChhY3RpdmUpIHtcblx0ICAgICAgICBhY3RpdmUudGltZXIuYyA9IG51bGw7XG5cdCAgICAgICAgYWN0aXZlLnRpbWVyLnQgPSBOYU47XG5cdCAgICAgICAgLS1sb2NrLmNvdW50O1xuXHQgICAgICAgIGRlbGV0ZSBsb2NrW2FjdGl2ZUlkXTtcblx0ICAgICAgICBhY3RpdmUuZXZlbnQgJiYgYWN0aXZlLmV2ZW50LmludGVycnVwdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGFjdGl2ZS5pbmRleCk7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yICh2YXIgY2FuY2VsSWQgaW4gbG9jaykge1xuXHQgICAgICAgIGlmICgrY2FuY2VsSWQgPCBpZCkge1xuXHQgICAgICAgICAgdmFyIGNhbmNlbCA9IGxvY2tbY2FuY2VsSWRdO1xuXHQgICAgICAgICAgY2FuY2VsLnRpbWVyLmMgPSBudWxsO1xuXHQgICAgICAgICAgY2FuY2VsLnRpbWVyLnQgPSBOYU47XG5cdCAgICAgICAgICAtLWxvY2suY291bnQ7XG5cdCAgICAgICAgICBkZWxldGUgbG9ja1tjYW5jZWxJZF07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHRpbWVyLmMgPSB0aWNrO1xuXHQgICAgICBkM190aW1lcihmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAodGltZXIuYyAmJiB0aWNrKGVsYXBzZWQgfHwgMSkpIHtcblx0ICAgICAgICAgIHRpbWVyLmMgPSBudWxsO1xuXHQgICAgICAgICAgdGltZXIudCA9IE5hTjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIDE7XG5cdCAgICAgIH0sIDAsIHRpbWUpO1xuXHQgICAgICBsb2NrLmFjdGl2ZSA9IGlkO1xuXHQgICAgICB0cmFuc2l0aW9uLmV2ZW50ICYmIHRyYW5zaXRpb24uZXZlbnQuc3RhcnQuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpKTtcblx0ICAgICAgdHdlZW5zID0gW107XG5cdCAgICAgIHRyYW5zaXRpb24udHdlZW4uZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKHZhbHVlID0gdmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpKSkge1xuXHQgICAgICAgICAgdHdlZW5zLnB1c2godmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIGVhc2UgPSB0cmFuc2l0aW9uLmVhc2U7XG5cdCAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbi5kdXJhdGlvbjtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuXHQgICAgICB2YXIgdCA9IGVsYXBzZWQgLyBkdXJhdGlvbiwgZSA9IGVhc2UodCksIG4gPSB0d2VlbnMubGVuZ3RoO1xuXHQgICAgICB3aGlsZSAobiA+IDApIHtcblx0ICAgICAgICB0d2VlbnNbLS1uXS5jYWxsKG5vZGUsIGUpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0ID49IDEpIHtcblx0ICAgICAgICB0cmFuc2l0aW9uLmV2ZW50ICYmIHRyYW5zaXRpb24uZXZlbnQuZW5kLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSk7XG5cdCAgICAgICAgaWYgKC0tbG9jay5jb3VudCkgZGVsZXRlIGxvY2tbaWRdOyBlbHNlIGRlbGV0ZSBub2RlW25zXTtcblx0ICAgICAgICByZXR1cm4gMTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKCF0cmFuc2l0aW9uKSB7XG5cdCAgICAgIHRpbWUgPSBpbmhlcml0LnRpbWU7XG5cdCAgICAgIHRpbWVyID0gZDNfdGltZXIoc2NoZWR1bGUsIDAsIHRpbWUpO1xuXHQgICAgICB0cmFuc2l0aW9uID0gbG9ja1tpZF0gPSB7XG5cdCAgICAgICAgdHdlZW46IG5ldyBkM19NYXAoKSxcblx0ICAgICAgICB0aW1lOiB0aW1lLFxuXHQgICAgICAgIHRpbWVyOiB0aW1lcixcblx0ICAgICAgICBkZWxheTogaW5oZXJpdC5kZWxheSxcblx0ICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcblx0ICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2UsXG5cdCAgICAgICAgaW5kZXg6IGlcblx0ICAgICAgfTtcblx0ICAgICAgaW5oZXJpdCA9IG51bGw7XG5cdCAgICAgICsrbG9jay5jb3VudDtcblx0ICAgIH1cblx0ICB9XG5cdCAgZDMuc3ZnLmF4aXMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBzY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpLCBvcmllbnQgPSBkM19zdmdfYXhpc0RlZmF1bHRPcmllbnQsIGlubmVyVGlja1NpemUgPSA2LCBvdXRlclRpY2tTaXplID0gNiwgdGlja1BhZGRpbmcgPSAzLCB0aWNrQXJndW1lbnRzXyA9IFsgMTAgXSwgdGlja1ZhbHVlcyA9IG51bGwsIHRpY2tGb3JtYXRfO1xuXHQgICAgZnVuY3Rpb24gYXhpcyhnKSB7XG5cdCAgICAgIGcuZWFjaChmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgZyA9IGQzLnNlbGVjdCh0aGlzKTtcblx0ICAgICAgICB2YXIgc2NhbGUwID0gdGhpcy5fX2NoYXJ0X18gfHwgc2NhbGUsIHNjYWxlMSA9IHRoaXMuX19jaGFydF9fID0gc2NhbGUuY29weSgpO1xuXHQgICAgICAgIHZhciB0aWNrcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IHNjYWxlMS50aWNrcyA/IHNjYWxlMS50aWNrcy5hcHBseShzY2FsZTEsIHRpY2tBcmd1bWVudHNfKSA6IHNjYWxlMS5kb21haW4oKSA6IHRpY2tWYWx1ZXMsIHRpY2tGb3JtYXQgPSB0aWNrRm9ybWF0XyA9PSBudWxsID8gc2NhbGUxLnRpY2tGb3JtYXQgPyBzY2FsZTEudGlja0Zvcm1hdC5hcHBseShzY2FsZTEsIHRpY2tBcmd1bWVudHNfKSA6IGQzX2lkZW50aXR5IDogdGlja0Zvcm1hdF8sIHRpY2sgPSBnLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodGlja3MsIHNjYWxlMSksIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5pbnNlcnQoXCJnXCIsIFwiLmRvbWFpblwiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLnN0eWxlKFwib3BhY2l0eVwiLCDOtSksIHRpY2tFeGl0ID0gZDMudHJhbnNpdGlvbih0aWNrLmV4aXQoKSkuc3R5bGUoXCJvcGFjaXR5XCIsIM61KS5yZW1vdmUoKSwgdGlja1VwZGF0ZSA9IGQzLnRyYW5zaXRpb24odGljay5vcmRlcigpKS5zdHlsZShcIm9wYWNpdHlcIiwgMSksIHRpY2tTcGFjaW5nID0gTWF0aC5tYXgoaW5uZXJUaWNrU2l6ZSwgMCkgKyB0aWNrUGFkZGluZywgdGlja1RyYW5zZm9ybTtcblx0ICAgICAgICB2YXIgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHNjYWxlMSksIHBhdGggPSBnLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbIDAgXSksIHBhdGhVcGRhdGUgPSAocGF0aC5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpLCBcblx0ICAgICAgICBkMy50cmFuc2l0aW9uKHBhdGgpKTtcblx0ICAgICAgICB0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKTtcblx0ICAgICAgICB0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKTtcblx0ICAgICAgICB2YXIgbGluZUVudGVyID0gdGlja0VudGVyLnNlbGVjdChcImxpbmVcIiksIGxpbmVVcGRhdGUgPSB0aWNrVXBkYXRlLnNlbGVjdChcImxpbmVcIiksIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIikudGV4dCh0aWNrRm9ybWF0KSwgdGV4dEVudGVyID0gdGlja0VudGVyLnNlbGVjdChcInRleHRcIiksIHRleHRVcGRhdGUgPSB0aWNrVXBkYXRlLnNlbGVjdChcInRleHRcIiksIHNpZ24gPSBvcmllbnQgPT09IFwidG9wXCIgfHwgb3JpZW50ID09PSBcImxlZnRcIiA/IC0xIDogMSwgeDEsIHgyLCB5MSwgeTI7XG5cdCAgICAgICAgaWYgKG9yaWVudCA9PT0gXCJib3R0b21cIiB8fCBvcmllbnQgPT09IFwidG9wXCIpIHtcblx0ICAgICAgICAgIHRpY2tUcmFuc2Zvcm0gPSBkM19zdmdfYXhpc1gsIHgxID0gXCJ4XCIsIHkxID0gXCJ5XCIsIHgyID0gXCJ4MlwiLCB5MiA9IFwieTJcIjtcblx0ICAgICAgICAgIHRleHQuYXR0cihcImR5XCIsIHNpZ24gPCAwID8gXCIwZW1cIiA6IFwiLjcxZW1cIikuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKTtcblx0ICAgICAgICAgIHBhdGhVcGRhdGUuYXR0cihcImRcIiwgXCJNXCIgKyByYW5nZVswXSArIFwiLFwiICsgc2lnbiAqIG91dGVyVGlja1NpemUgKyBcIlYwSFwiICsgcmFuZ2VbMV0gKyBcIlZcIiArIHNpZ24gKiBvdXRlclRpY2tTaXplKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGlja1RyYW5zZm9ybSA9IGQzX3N2Z19heGlzWSwgeDEgPSBcInlcIiwgeTEgPSBcInhcIiwgeDIgPSBcInkyXCIsIHkyID0gXCJ4MlwiO1xuXHQgICAgICAgICAgdGV4dC5hdHRyKFwiZHlcIiwgXCIuMzJlbVwiKS5zdHlsZShcInRleHQtYW5jaG9yXCIsIHNpZ24gPCAwID8gXCJlbmRcIiA6IFwic3RhcnRcIik7XG5cdCAgICAgICAgICBwYXRoVXBkYXRlLmF0dHIoXCJkXCIsIFwiTVwiICsgc2lnbiAqIG91dGVyVGlja1NpemUgKyBcIixcIiArIHJhbmdlWzBdICsgXCJIMFZcIiArIHJhbmdlWzFdICsgXCJIXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGxpbmVFbnRlci5hdHRyKHkyLCBzaWduICogaW5uZXJUaWNrU2l6ZSk7XG5cdCAgICAgICAgdGV4dEVudGVyLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG5cdCAgICAgICAgbGluZVVwZGF0ZS5hdHRyKHgyLCAwKS5hdHRyKHkyLCBzaWduICogaW5uZXJUaWNrU2l6ZSk7XG5cdCAgICAgICAgdGV4dFVwZGF0ZS5hdHRyKHgxLCAwKS5hdHRyKHkxLCBzaWduICogdGlja1NwYWNpbmcpO1xuXHQgICAgICAgIGlmIChzY2FsZTEucmFuZ2VCYW5kKSB7XG5cdCAgICAgICAgICB2YXIgeCA9IHNjYWxlMSwgZHggPSB4LnJhbmdlQmFuZCgpIC8gMjtcblx0ICAgICAgICAgIHNjYWxlMCA9IHNjYWxlMSA9IGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHgoZCkgKyBkeDtcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfSBlbHNlIGlmIChzY2FsZTAucmFuZ2VCYW5kKSB7XG5cdCAgICAgICAgICBzY2FsZTAgPSBzY2FsZTE7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRpY2tFeGl0LmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUxLCBzY2FsZTApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aWNrRW50ZXIuY2FsbCh0aWNrVHJhbnNmb3JtLCBzY2FsZTAsIHNjYWxlMSk7XG5cdCAgICAgICAgdGlja1VwZGF0ZS5jYWxsKHRpY2tUcmFuc2Zvcm0sIHNjYWxlMSwgc2NhbGUxKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBheGlzLnNjYWxlID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzY2FsZTtcblx0ICAgICAgc2NhbGUgPSB4O1xuXHQgICAgICByZXR1cm4gYXhpcztcblx0ICAgIH07XG5cdCAgICBheGlzLm9yaWVudCA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JpZW50O1xuXHQgICAgICBvcmllbnQgPSB4IGluIGQzX3N2Z19heGlzT3JpZW50cyA/IHggKyBcIlwiIDogZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50O1xuXHQgICAgICByZXR1cm4gYXhpcztcblx0ICAgIH07XG5cdCAgICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRpY2tBcmd1bWVudHNfO1xuXHQgICAgICB0aWNrQXJndW1lbnRzXyA9IGQzX2FycmF5KGFyZ3VtZW50cyk7XG5cdCAgICAgIHJldHVybiBheGlzO1xuXHQgICAgfTtcblx0ICAgIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja1ZhbHVlcztcblx0ICAgICAgdGlja1ZhbHVlcyA9IHg7XG5cdCAgICAgIHJldHVybiBheGlzO1xuXHQgICAgfTtcblx0ICAgIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja0Zvcm1hdF87XG5cdCAgICAgIHRpY2tGb3JtYXRfID0geDtcblx0ICAgICAgcmV0dXJuIGF4aXM7XG5cdCAgICB9O1xuXHQgICAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgICAgICBpZiAoIW4pIHJldHVybiBpbm5lclRpY2tTaXplO1xuXHQgICAgICBpbm5lclRpY2tTaXplID0gK3g7XG5cdCAgICAgIG91dGVyVGlja1NpemUgPSArYXJndW1lbnRzW24gLSAxXTtcblx0ICAgICAgcmV0dXJuIGF4aXM7XG5cdCAgICB9O1xuXHQgICAgYXhpcy5pbm5lclRpY2tTaXplID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbm5lclRpY2tTaXplO1xuXHQgICAgICBpbm5lclRpY2tTaXplID0gK3g7XG5cdCAgICAgIHJldHVybiBheGlzO1xuXHQgICAgfTtcblx0ICAgIGF4aXMub3V0ZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3V0ZXJUaWNrU2l6ZTtcblx0ICAgICAgb3V0ZXJUaWNrU2l6ZSA9ICt4O1xuXHQgICAgICByZXR1cm4gYXhpcztcblx0ICAgIH07XG5cdCAgICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuXHQgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrUGFkZGluZztcblx0ICAgICAgdGlja1BhZGRpbmcgPSAreDtcblx0ICAgICAgcmV0dXJuIGF4aXM7XG5cdCAgICB9O1xuXHQgICAgYXhpcy50aWNrU3ViZGl2aWRlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoICYmIGF4aXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGF4aXM7XG5cdCAgfTtcblx0ICB2YXIgZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50ID0gXCJib3R0b21cIiwgZDNfc3ZnX2F4aXNPcmllbnRzID0ge1xuXHQgICAgdG9wOiAxLFxuXHQgICAgcmlnaHQ6IDEsXG5cdCAgICBib3R0b206IDEsXG5cdCAgICBsZWZ0OiAxXG5cdCAgfTtcblx0ICBmdW5jdGlvbiBkM19zdmdfYXhpc1goc2VsZWN0aW9uLCB4MCwgeDEpIHtcblx0ICAgIHNlbGVjdGlvbi5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICAgdmFyIHYwID0geDAoZCk7XG5cdCAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIChpc0Zpbml0ZSh2MCkgPyB2MCA6IHgxKGQpKSArIFwiLDApXCI7XG5cdCAgICB9KTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfc3ZnX2F4aXNZKHNlbGVjdGlvbiwgeTAsIHkxKSB7XG5cdCAgICBzZWxlY3Rpb24uYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICAgIHZhciB2MCA9IHkwKGQpO1xuXHQgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArIChpc0Zpbml0ZSh2MCkgPyB2MCA6IHkxKGQpKSArIFwiKVwiO1xuXHQgICAgfSk7XG5cdCAgfVxuXHQgIGQzLnN2Zy5icnVzaCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGV2ZW50ID0gZDNfZXZlbnREaXNwYXRjaChicnVzaCwgXCJicnVzaHN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJicnVzaGVuZFwiKSwgeCA9IG51bGwsIHkgPSBudWxsLCB4RXh0ZW50ID0gWyAwLCAwIF0sIHlFeHRlbnQgPSBbIDAsIDAgXSwgeEV4dGVudERvbWFpbiwgeUV4dGVudERvbWFpbiwgeENsYW1wID0gdHJ1ZSwgeUNsYW1wID0gdHJ1ZSwgcmVzaXplcyA9IGQzX3N2Z19icnVzaFJlc2l6ZXNbMF07XG5cdCAgICBmdW5jdGlvbiBicnVzaChnKSB7XG5cdCAgICAgIGcuZWFjaChmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgZyA9IGQzLnNlbGVjdCh0aGlzKS5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKS5vbihcIm1vdXNlZG93bi5icnVzaFwiLCBicnVzaHN0YXJ0KS5vbihcInRvdWNoc3RhcnQuYnJ1c2hcIiwgYnJ1c2hzdGFydCk7XG5cdCAgICAgICAgdmFyIGJhY2tncm91bmQgPSBnLnNlbGVjdEFsbChcIi5iYWNrZ3JvdW5kXCIpLmRhdGEoWyAwIF0pO1xuXHQgICAgICAgIGJhY2tncm91bmQuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBcImJhY2tncm91bmRcIikuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpLnN0eWxlKFwiY3Vyc29yXCIsIFwiY3Jvc3NoYWlyXCIpO1xuXHQgICAgICAgIGcuc2VsZWN0QWxsKFwiLmV4dGVudFwiKS5kYXRhKFsgMCBdKS5lbnRlcigpLmFwcGVuZChcInJlY3RcIikuYXR0cihcImNsYXNzXCIsIFwiZXh0ZW50XCIpLnN0eWxlKFwiY3Vyc29yXCIsIFwibW92ZVwiKTtcblx0ICAgICAgICB2YXIgcmVzaXplID0gZy5zZWxlY3RBbGwoXCIucmVzaXplXCIpLmRhdGEocmVzaXplcywgZDNfaWRlbnRpdHkpO1xuXHQgICAgICAgIHJlc2l6ZS5leGl0KCkucmVtb3ZlKCk7XG5cdCAgICAgICAgcmVzaXplLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgICAgICAgcmV0dXJuIFwicmVzaXplIFwiICsgZDtcblx0ICAgICAgICB9KS5zdHlsZShcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgICByZXR1cm4gZDNfc3ZnX2JydXNoQ3Vyc29yW2RdO1xuXHQgICAgICAgIH0pLmFwcGVuZChcInJlY3RcIikuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgICAgICAgcmV0dXJuIC9bZXddJC8udGVzdChkKSA/IC0zIDogbnVsbDtcblx0ICAgICAgICB9KS5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgICByZXR1cm4gL15bbnNdLy50ZXN0KGQpID8gLTMgOiBudWxsO1xuXHQgICAgICAgIH0pLmF0dHIoXCJ3aWR0aFwiLCA2KS5hdHRyKFwiaGVpZ2h0XCIsIDYpLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcblx0ICAgICAgICByZXNpemUuc3R5bGUoXCJkaXNwbGF5XCIsIGJydXNoLmVtcHR5KCkgPyBcIm5vbmVcIiA6IG51bGwpO1xuXHQgICAgICAgIHZhciBnVXBkYXRlID0gZDMudHJhbnNpdGlvbihnKSwgYmFja2dyb3VuZFVwZGF0ZSA9IGQzLnRyYW5zaXRpb24oYmFja2dyb3VuZCksIHJhbmdlO1xuXHQgICAgICAgIGlmICh4KSB7XG5cdCAgICAgICAgICByYW5nZSA9IGQzX3NjYWxlUmFuZ2UoeCk7XG5cdCAgICAgICAgICBiYWNrZ3JvdW5kVXBkYXRlLmF0dHIoXCJ4XCIsIHJhbmdlWzBdKS5hdHRyKFwid2lkdGhcIiwgcmFuZ2VbMV0gLSByYW5nZVswXSk7XG5cdCAgICAgICAgICByZWRyYXdYKGdVcGRhdGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoeSkge1xuXHQgICAgICAgICAgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHkpO1xuXHQgICAgICAgICAgYmFja2dyb3VuZFVwZGF0ZS5hdHRyKFwieVwiLCByYW5nZVswXSkuYXR0cihcImhlaWdodFwiLCByYW5nZVsxXSAtIHJhbmdlWzBdKTtcblx0ICAgICAgICAgIHJlZHJhd1koZ1VwZGF0ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJlZHJhdyhnVXBkYXRlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBicnVzaC5ldmVudCA9IGZ1bmN0aW9uKGcpIHtcblx0ICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBldmVudF8gPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpLCBleHRlbnQxID0ge1xuXHQgICAgICAgICAgeDogeEV4dGVudCxcblx0ICAgICAgICAgIHk6IHlFeHRlbnQsXG5cdCAgICAgICAgICBpOiB4RXh0ZW50RG9tYWluLFxuXHQgICAgICAgICAgajogeUV4dGVudERvbWFpblxuXHQgICAgICAgIH0sIGV4dGVudDAgPSB0aGlzLl9fY2hhcnRfXyB8fCBleHRlbnQxO1xuXHQgICAgICAgIHRoaXMuX19jaGFydF9fID0gZXh0ZW50MTtcblx0ICAgICAgICBpZiAoZDNfdHJhbnNpdGlvbkluaGVyaXRJZCkge1xuXHQgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5lYWNoKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSBleHRlbnQwLmk7XG5cdCAgICAgICAgICAgIHlFeHRlbnREb21haW4gPSBleHRlbnQwLmo7XG5cdCAgICAgICAgICAgIHhFeHRlbnQgPSBleHRlbnQwLng7XG5cdCAgICAgICAgICAgIHlFeHRlbnQgPSBleHRlbnQwLnk7XG5cdCAgICAgICAgICAgIGV2ZW50Xyh7XG5cdCAgICAgICAgICAgICAgdHlwZTogXCJicnVzaHN0YXJ0XCJcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9KS50d2VlbihcImJydXNoOmJydXNoXCIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICB2YXIgeGkgPSBkM19pbnRlcnBvbGF0ZUFycmF5KHhFeHRlbnQsIGV4dGVudDEueCksIHlpID0gZDNfaW50ZXJwb2xhdGVBcnJheSh5RXh0ZW50LCBleHRlbnQxLnkpO1xuXHQgICAgICAgICAgICB4RXh0ZW50RG9tYWluID0geUV4dGVudERvbWFpbiA9IG51bGw7XG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgICAgICAgeEV4dGVudCA9IGV4dGVudDEueCA9IHhpKHQpO1xuXHQgICAgICAgICAgICAgIHlFeHRlbnQgPSBleHRlbnQxLnkgPSB5aSh0KTtcblx0ICAgICAgICAgICAgICBldmVudF8oe1xuXHQgICAgICAgICAgICAgICAgdHlwZTogXCJicnVzaFwiLFxuXHQgICAgICAgICAgICAgICAgbW9kZTogXCJyZXNpemVcIlxuXHQgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgfSkuZWFjaChcImVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgeEV4dGVudERvbWFpbiA9IGV4dGVudDEuaTtcblx0ICAgICAgICAgICAgeUV4dGVudERvbWFpbiA9IGV4dGVudDEuajtcblx0ICAgICAgICAgICAgZXZlbnRfKHtcblx0ICAgICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG5cdCAgICAgICAgICAgICAgbW9kZTogXCJyZXNpemVcIlxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgZXZlbnRfKHtcblx0ICAgICAgICAgICAgICB0eXBlOiBcImJydXNoZW5kXCJcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgZXZlbnRfKHtcblx0ICAgICAgICAgICAgdHlwZTogXCJicnVzaHN0YXJ0XCJcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgZXZlbnRfKHtcblx0ICAgICAgICAgICAgdHlwZTogXCJicnVzaFwiLFxuXHQgICAgICAgICAgICBtb2RlOiBcInJlc2l6ZVwiXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIGV2ZW50Xyh7XG5cdCAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiByZWRyYXcoZykge1xuXHQgICAgICBnLnNlbGVjdEFsbChcIi5yZXNpemVcIikuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeEV4dGVudFsrL2UkLy50ZXN0KGQpXSArIFwiLFwiICsgeUV4dGVudFsrL15zLy50ZXN0KGQpXSArIFwiKVwiO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJlZHJhd1goZykge1xuXHQgICAgICBnLnNlbGVjdChcIi5leHRlbnRcIikuYXR0cihcInhcIiwgeEV4dGVudFswXSk7XG5cdCAgICAgIGcuc2VsZWN0QWxsKFwiLmV4dGVudCwubj5yZWN0LC5zPnJlY3RcIikuYXR0cihcIndpZHRoXCIsIHhFeHRlbnRbMV0gLSB4RXh0ZW50WzBdKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIHJlZHJhd1koZykge1xuXHQgICAgICBnLnNlbGVjdChcIi5leHRlbnRcIikuYXR0cihcInlcIiwgeUV4dGVudFswXSk7XG5cdCAgICAgIGcuc2VsZWN0QWxsKFwiLmV4dGVudCwuZT5yZWN0LC53PnJlY3RcIikuYXR0cihcImhlaWdodFwiLCB5RXh0ZW50WzFdIC0geUV4dGVudFswXSk7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBicnVzaHN0YXJ0KCkge1xuXHQgICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgZXZlbnRUYXJnZXQgPSBkMy5zZWxlY3QoZDMuZXZlbnQudGFyZ2V0KSwgZXZlbnRfID0gZXZlbnQub2YodGFyZ2V0LCBhcmd1bWVudHMpLCBnID0gZDMuc2VsZWN0KHRhcmdldCksIHJlc2l6aW5nID0gZXZlbnRUYXJnZXQuZGF0dW0oKSwgcmVzaXppbmdYID0gIS9eKG58cykkLy50ZXN0KHJlc2l6aW5nKSAmJiB4LCByZXNpemluZ1kgPSAhL14oZXx3KSQvLnRlc3QocmVzaXppbmcpICYmIHksIGRyYWdnaW5nID0gZXZlbnRUYXJnZXQuY2xhc3NlZChcImV4dGVudFwiKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgY2VudGVyLCBvcmlnaW4gPSBkMy5tb3VzZSh0YXJnZXQpLCBvZmZzZXQ7XG5cdCAgICAgIHZhciB3ID0gZDMuc2VsZWN0KGQzX3dpbmRvdyh0YXJnZXQpKS5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bikub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cCk7XG5cdCAgICAgIGlmIChkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuXHQgICAgICAgIHcub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcInRvdWNoZW5kLmJydXNoXCIsIGJydXNoZW5kKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB3Lm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIGJydXNobW92ZSkub24oXCJtb3VzZXVwLmJydXNoXCIsIGJydXNoZW5kKTtcblx0ICAgICAgfVxuXHQgICAgICBnLmludGVycnVwdCgpLnNlbGVjdEFsbChcIipcIikuaW50ZXJydXB0KCk7XG5cdCAgICAgIGlmIChkcmFnZ2luZykge1xuXHQgICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbMF0gLSBvcmlnaW5bMF07XG5cdCAgICAgICAgb3JpZ2luWzFdID0geUV4dGVudFswXSAtIG9yaWdpblsxXTtcblx0ICAgICAgfSBlbHNlIGlmIChyZXNpemluZykge1xuXHQgICAgICAgIHZhciBleCA9ICsvdyQvLnRlc3QocmVzaXppbmcpLCBleSA9ICsvXm4vLnRlc3QocmVzaXppbmcpO1xuXHQgICAgICAgIG9mZnNldCA9IFsgeEV4dGVudFsxIC0gZXhdIC0gb3JpZ2luWzBdLCB5RXh0ZW50WzEgLSBleV0gLSBvcmlnaW5bMV0gXTtcblx0ICAgICAgICBvcmlnaW5bMF0gPSB4RXh0ZW50W2V4XTtcblx0ICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50W2V5XTtcblx0ICAgICAgfSBlbHNlIGlmIChkMy5ldmVudC5hbHRLZXkpIGNlbnRlciA9IG9yaWdpbi5zbGljZSgpO1xuXHQgICAgICBnLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpLnNlbGVjdEFsbChcIi5yZXNpemVcIikuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpO1xuXHQgICAgICBkMy5zZWxlY3QoXCJib2R5XCIpLnN0eWxlKFwiY3Vyc29yXCIsIGV2ZW50VGFyZ2V0LnN0eWxlKFwiY3Vyc29yXCIpKTtcblx0ICAgICAgZXZlbnRfKHtcblx0ICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuXHQgICAgICB9KTtcblx0ICAgICAgYnJ1c2htb3ZlKCk7XG5cdCAgICAgIGZ1bmN0aW9uIGtleWRvd24oKSB7XG5cdCAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIpIHtcblx0ICAgICAgICAgIGlmICghZHJhZ2dpbmcpIHtcblx0ICAgICAgICAgICAgY2VudGVyID0gbnVsbDtcblx0ICAgICAgICAgICAgb3JpZ2luWzBdIC09IHhFeHRlbnRbMV07XG5cdCAgICAgICAgICAgIG9yaWdpblsxXSAtPSB5RXh0ZW50WzFdO1xuXHQgICAgICAgICAgICBkcmFnZ2luZyA9IDI7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBkM19ldmVudFByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGtleXVwKCkge1xuXHQgICAgICAgIGlmIChkMy5ldmVudC5rZXlDb2RlID09IDMyICYmIGRyYWdnaW5nID09IDIpIHtcblx0ICAgICAgICAgIG9yaWdpblswXSArPSB4RXh0ZW50WzFdO1xuXHQgICAgICAgICAgb3JpZ2luWzFdICs9IHlFeHRlbnRbMV07XG5cdCAgICAgICAgICBkcmFnZ2luZyA9IDA7XG5cdCAgICAgICAgICBkM19ldmVudFByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGJydXNobW92ZSgpIHtcblx0ICAgICAgICB2YXIgcG9pbnQgPSBkMy5tb3VzZSh0YXJnZXQpLCBtb3ZlZCA9IGZhbHNlO1xuXHQgICAgICAgIGlmIChvZmZzZXQpIHtcblx0ICAgICAgICAgIHBvaW50WzBdICs9IG9mZnNldFswXTtcblx0ICAgICAgICAgIHBvaW50WzFdICs9IG9mZnNldFsxXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFkcmFnZ2luZykge1xuXHQgICAgICAgICAgaWYgKGQzLmV2ZW50LmFsdEtleSkge1xuXHQgICAgICAgICAgICBpZiAoIWNlbnRlcikgY2VudGVyID0gWyAoeEV4dGVudFswXSArIHhFeHRlbnRbMV0pIC8gMiwgKHlFeHRlbnRbMF0gKyB5RXh0ZW50WzFdKSAvIDIgXTtcblx0ICAgICAgICAgICAgb3JpZ2luWzBdID0geEV4dGVudFsrKHBvaW50WzBdIDwgY2VudGVyWzBdKV07XG5cdCAgICAgICAgICAgIG9yaWdpblsxXSA9IHlFeHRlbnRbKyhwb2ludFsxXSA8IGNlbnRlclsxXSldO1xuXHQgICAgICAgICAgfSBlbHNlIGNlbnRlciA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChyZXNpemluZ1ggJiYgbW92ZTEocG9pbnQsIHgsIDApKSB7XG5cdCAgICAgICAgICByZWRyYXdYKGcpO1xuXHQgICAgICAgICAgbW92ZWQgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocmVzaXppbmdZICYmIG1vdmUxKHBvaW50LCB5LCAxKSkge1xuXHQgICAgICAgICAgcmVkcmF3WShnKTtcblx0ICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG1vdmVkKSB7XG5cdCAgICAgICAgICByZWRyYXcoZyk7XG5cdCAgICAgICAgICBldmVudF8oe1xuXHQgICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG5cdCAgICAgICAgICAgIG1vZGU6IGRyYWdnaW5nID8gXCJtb3ZlXCIgOiBcInJlc2l6ZVwiXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZnVuY3Rpb24gbW92ZTEocG9pbnQsIHNjYWxlLCBpKSB7XG5cdCAgICAgICAgdmFyIHJhbmdlID0gZDNfc2NhbGVSYW5nZShzY2FsZSksIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV0sIHBvc2l0aW9uID0gb3JpZ2luW2ldLCBleHRlbnQgPSBpID8geUV4dGVudCA6IHhFeHRlbnQsIHNpemUgPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIG1pbiwgbWF4O1xuXHQgICAgICAgIGlmIChkcmFnZ2luZykge1xuXHQgICAgICAgICAgcjAgLT0gcG9zaXRpb247XG5cdCAgICAgICAgICByMSAtPSBzaXplICsgcG9zaXRpb247XG5cdCAgICAgICAgfVxuXHQgICAgICAgIG1pbiA9IChpID8geUNsYW1wIDogeENsYW1wKSA/IE1hdGgubWF4KHIwLCBNYXRoLm1pbihyMSwgcG9pbnRbaV0pKSA6IHBvaW50W2ldO1xuXHQgICAgICAgIGlmIChkcmFnZ2luZykge1xuXHQgICAgICAgICAgbWF4ID0gKG1pbiArPSBwb3NpdGlvbikgKyBzaXplO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAoY2VudGVyKSBwb3NpdGlvbiA9IE1hdGgubWF4KHIwLCBNYXRoLm1pbihyMSwgMiAqIGNlbnRlcltpXSAtIG1pbikpO1xuXHQgICAgICAgICAgaWYgKHBvc2l0aW9uIDwgbWluKSB7XG5cdCAgICAgICAgICAgIG1heCA9IG1pbjtcblx0ICAgICAgICAgICAgbWluID0gcG9zaXRpb247XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBtYXggPSBwb3NpdGlvbjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGV4dGVudFswXSAhPSBtaW4gfHwgZXh0ZW50WzFdICE9IG1heCkge1xuXHQgICAgICAgICAgaWYgKGkpIHlFeHRlbnREb21haW4gPSBudWxsOyBlbHNlIHhFeHRlbnREb21haW4gPSBudWxsO1xuXHQgICAgICAgICAgZXh0ZW50WzBdID0gbWluO1xuXHQgICAgICAgICAgZXh0ZW50WzFdID0gbWF4O1xuXHQgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGZ1bmN0aW9uIGJydXNoZW5kKCkge1xuXHQgICAgICAgIGJydXNobW92ZSgpO1xuXHQgICAgICAgIGcuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKS5zZWxlY3RBbGwoXCIucmVzaXplXCIpLnN0eWxlKFwiZGlzcGxheVwiLCBicnVzaC5lbXB0eSgpID8gXCJub25lXCIgOiBudWxsKTtcblx0ICAgICAgICBkMy5zZWxlY3QoXCJib2R5XCIpLnN0eWxlKFwiY3Vyc29yXCIsIG51bGwpO1xuXHQgICAgICAgIHcub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbnVsbCkub24oXCJtb3VzZXVwLmJydXNoXCIsIG51bGwpLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIG51bGwpLm9uKFwidG91Y2hlbmQuYnJ1c2hcIiwgbnVsbCkub24oXCJrZXlkb3duLmJydXNoXCIsIG51bGwpLm9uKFwia2V5dXAuYnJ1c2hcIiwgbnVsbCk7XG5cdCAgICAgICAgZHJhZ1Jlc3RvcmUoKTtcblx0ICAgICAgICBldmVudF8oe1xuXHQgICAgICAgICAgdHlwZTogXCJicnVzaGVuZFwiXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGJydXNoLnggPSBmdW5jdGlvbih6KSB7XG5cdCAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHg7XG5cdCAgICAgIHggPSB6O1xuXHQgICAgICByZXNpemVzID0gZDNfc3ZnX2JydXNoUmVzaXplc1sheCA8PCAxIHwgIXldO1xuXHQgICAgICByZXR1cm4gYnJ1c2g7XG5cdCAgICB9O1xuXHQgICAgYnJ1c2gueSA9IGZ1bmN0aW9uKHopIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTtcblx0ICAgICAgeSA9IHo7XG5cdCAgICAgIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWyF4IDw8IDEgfCAheV07XG5cdCAgICAgIHJldHVybiBicnVzaDtcblx0ICAgIH07XG5cdCAgICBicnVzaC5jbGFtcCA9IGZ1bmN0aW9uKHopIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geCAmJiB5ID8gWyB4Q2xhbXAsIHlDbGFtcCBdIDogeCA/IHhDbGFtcCA6IHkgPyB5Q2xhbXAgOiBudWxsO1xuXHQgICAgICBpZiAoeCAmJiB5KSB4Q2xhbXAgPSAhIXpbMF0sIHlDbGFtcCA9ICEhelsxXTsgZWxzZSBpZiAoeCkgeENsYW1wID0gISF6OyBlbHNlIGlmICh5KSB5Q2xhbXAgPSAhIXo7XG5cdCAgICAgIHJldHVybiBicnVzaDtcblx0ICAgIH07XG5cdCAgICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbih6KSB7XG5cdCAgICAgIHZhciB4MCwgeDEsIHkwLCB5MSwgdDtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdCAgICAgICAgaWYgKHgpIHtcblx0ICAgICAgICAgIGlmICh4RXh0ZW50RG9tYWluKSB7XG5cdCAgICAgICAgICAgIHgwID0geEV4dGVudERvbWFpblswXSwgeDEgPSB4RXh0ZW50RG9tYWluWzFdO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgeDAgPSB4RXh0ZW50WzBdLCB4MSA9IHhFeHRlbnRbMV07XG5cdCAgICAgICAgICAgIGlmICh4LmludmVydCkgeDAgPSB4LmludmVydCh4MCksIHgxID0geC5pbnZlcnQoeDEpO1xuXHQgICAgICAgICAgICBpZiAoeDEgPCB4MCkgdCA9IHgwLCB4MCA9IHgxLCB4MSA9IHQ7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh5KSB7XG5cdCAgICAgICAgICBpZiAoeUV4dGVudERvbWFpbikge1xuXHQgICAgICAgICAgICB5MCA9IHlFeHRlbnREb21haW5bMF0sIHkxID0geUV4dGVudERvbWFpblsxXTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHkwID0geUV4dGVudFswXSwgeTEgPSB5RXh0ZW50WzFdO1xuXHQgICAgICAgICAgICBpZiAoeS5pbnZlcnQpIHkwID0geS5pbnZlcnQoeTApLCB5MSA9IHkuaW52ZXJ0KHkxKTtcblx0ICAgICAgICAgICAgaWYgKHkxIDwgeTApIHQgPSB5MCwgeTAgPSB5MSwgeTEgPSB0O1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4geCAmJiB5ID8gWyBbIHgwLCB5MCBdLCBbIHgxLCB5MSBdIF0gOiB4ID8gWyB4MCwgeDEgXSA6IHkgJiYgWyB5MCwgeTEgXTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoeCkge1xuXHQgICAgICAgIHgwID0gelswXSwgeDEgPSB6WzFdO1xuXHQgICAgICAgIGlmICh5KSB4MCA9IHgwWzBdLCB4MSA9IHgxWzBdO1xuXHQgICAgICAgIHhFeHRlbnREb21haW4gPSBbIHgwLCB4MSBdO1xuXHQgICAgICAgIGlmICh4LmludmVydCkgeDAgPSB4KHgwKSwgeDEgPSB4KHgxKTtcblx0ICAgICAgICBpZiAoeDEgPCB4MCkgdCA9IHgwLCB4MCA9IHgxLCB4MSA9IHQ7XG5cdCAgICAgICAgaWYgKHgwICE9IHhFeHRlbnRbMF0gfHwgeDEgIT0geEV4dGVudFsxXSkgeEV4dGVudCA9IFsgeDAsIHgxIF07XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHkpIHtcblx0ICAgICAgICB5MCA9IHpbMF0sIHkxID0gelsxXTtcblx0ICAgICAgICBpZiAoeCkgeTAgPSB5MFsxXSwgeTEgPSB5MVsxXTtcblx0ICAgICAgICB5RXh0ZW50RG9tYWluID0gWyB5MCwgeTEgXTtcblx0ICAgICAgICBpZiAoeS5pbnZlcnQpIHkwID0geSh5MCksIHkxID0geSh5MSk7XG5cdCAgICAgICAgaWYgKHkxIDwgeTApIHQgPSB5MCwgeTAgPSB5MSwgeTEgPSB0O1xuXHQgICAgICAgIGlmICh5MCAhPSB5RXh0ZW50WzBdIHx8IHkxICE9IHlFeHRlbnRbMV0pIHlFeHRlbnQgPSBbIHkwLCB5MSBdO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBicnVzaDtcblx0ICAgIH07XG5cdCAgICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAoIWJydXNoLmVtcHR5KCkpIHtcblx0ICAgICAgICB4RXh0ZW50ID0gWyAwLCAwIF0sIHlFeHRlbnQgPSBbIDAsIDAgXTtcblx0ICAgICAgICB4RXh0ZW50RG9tYWluID0geUV4dGVudERvbWFpbiA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGJydXNoO1xuXHQgICAgfTtcblx0ICAgIGJydXNoLmVtcHR5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiAhIXggJiYgeEV4dGVudFswXSA9PSB4RXh0ZW50WzFdIHx8ICEheSAmJiB5RXh0ZW50WzBdID09IHlFeHRlbnRbMV07XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGQzLnJlYmluZChicnVzaCwgZXZlbnQsIFwib25cIik7XG5cdCAgfTtcblx0ICB2YXIgZDNfc3ZnX2JydXNoQ3Vyc29yID0ge1xuXHQgICAgbjogXCJucy1yZXNpemVcIixcblx0ICAgIGU6IFwiZXctcmVzaXplXCIsXG5cdCAgICBzOiBcIm5zLXJlc2l6ZVwiLFxuXHQgICAgdzogXCJldy1yZXNpemVcIixcblx0ICAgIG53OiBcIm53c2UtcmVzaXplXCIsXG5cdCAgICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuXHQgICAgc2U6IFwibndzZS1yZXNpemVcIixcblx0ICAgIHN3OiBcIm5lc3ctcmVzaXplXCJcblx0ICB9O1xuXHQgIHZhciBkM19zdmdfYnJ1c2hSZXNpemVzID0gWyBbIFwiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCIgXSwgWyBcImVcIiwgXCJ3XCIgXSwgWyBcIm5cIiwgXCJzXCIgXSwgW10gXTtcblx0ICB2YXIgZDNfdGltZV9mb3JtYXQgPSBkM190aW1lLmZvcm1hdCA9IGQzX2xvY2FsZV9lblVTLnRpbWVGb3JtYXQ7XG5cdCAgdmFyIGQzX3RpbWVfZm9ybWF0VXRjID0gZDNfdGltZV9mb3JtYXQudXRjO1xuXHQgIHZhciBkM190aW1lX2Zvcm1hdElzbyA9IGQzX3RpbWVfZm9ybWF0VXRjKFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCIpO1xuXHQgIGQzX3RpbWVfZm9ybWF0LmlzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICYmICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKSA/IGQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlIDogZDNfdGltZV9mb3JtYXRJc287XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuXHQgICAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcblx0ICB9XG5cdCAgZDNfdGltZV9mb3JtYXRJc29OYXRpdmUucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcblx0ICAgIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcblx0ICAgIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xuXHQgIH07XG5cdCAgZDNfdGltZV9mb3JtYXRJc29OYXRpdmUudG9TdHJpbmcgPSBkM190aW1lX2Zvcm1hdElzby50b1N0cmluZztcblx0ICBkM190aW1lLnNlY29uZCA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDFlMykgKiAxZTMpO1xuXHQgIH0sIGZ1bmN0aW9uKGRhdGUsIG9mZnNldCkge1xuXHQgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgTWF0aC5mbG9vcihvZmZzZXQpICogMWUzKTtcblx0ICB9LCBmdW5jdGlvbihkYXRlKSB7XG5cdCAgICByZXR1cm4gZGF0ZS5nZXRTZWNvbmRzKCk7XG5cdCAgfSk7XG5cdCAgZDNfdGltZS5zZWNvbmRzID0gZDNfdGltZS5zZWNvbmQucmFuZ2U7XG5cdCAgZDNfdGltZS5zZWNvbmRzLnV0YyA9IGQzX3RpbWUuc2Vjb25kLnV0Yy5yYW5nZTtcblx0ICBkM190aW1lLm1pbnV0ZSA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuXHQgICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDZlNCkgKiA2ZTQpO1xuXHQgIH0sIGZ1bmN0aW9uKGRhdGUsIG9mZnNldCkge1xuXHQgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgTWF0aC5mbG9vcihvZmZzZXQpICogNmU0KTtcblx0ICB9LCBmdW5jdGlvbihkYXRlKSB7XG5cdCAgICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG5cdCAgfSk7XG5cdCAgZDNfdGltZS5taW51dGVzID0gZDNfdGltZS5taW51dGUucmFuZ2U7XG5cdCAgZDNfdGltZS5taW51dGVzLnV0YyA9IGQzX3RpbWUubWludXRlLnV0Yy5yYW5nZTtcblx0ICBkM190aW1lLmhvdXIgPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIHZhciB0aW1lem9uZSA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwO1xuXHQgICAgcmV0dXJuIG5ldyBkM19kYXRlKChNYXRoLmZsb29yKGRhdGUgLyAzNmU1IC0gdGltZXpvbmUpICsgdGltZXpvbmUpICogMzZlNSk7XG5cdCAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG5cdCAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAzNmU1KTtcblx0ICB9LCBmdW5jdGlvbihkYXRlKSB7XG5cdCAgICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xuXHQgIH0pO1xuXHQgIGQzX3RpbWUuaG91cnMgPSBkM190aW1lLmhvdXIucmFuZ2U7XG5cdCAgZDNfdGltZS5ob3Vycy51dGMgPSBkM190aW1lLmhvdXIudXRjLnJhbmdlO1xuXHQgIGQzX3RpbWUubW9udGggPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIGRhdGUgPSBkM190aW1lLmRheShkYXRlKTtcblx0ICAgIGRhdGUuc2V0RGF0ZSgxKTtcblx0ICAgIHJldHVybiBkYXRlO1xuXHQgIH0sIGZ1bmN0aW9uKGRhdGUsIG9mZnNldCkge1xuXHQgICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBvZmZzZXQpO1xuXHQgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG5cdCAgfSk7XG5cdCAgZDNfdGltZS5tb250aHMgPSBkM190aW1lLm1vbnRoLnJhbmdlO1xuXHQgIGQzX3RpbWUubW9udGhzLnV0YyA9IGQzX3RpbWUubW9udGgudXRjLnJhbmdlO1xuXHQgIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGUobGluZWFyLCBtZXRob2RzLCBmb3JtYXQpIHtcblx0ICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcblx0ICAgICAgcmV0dXJuIGxpbmVhcih4KTtcblx0ICAgIH1cblx0ICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgcmV0dXJuIGQzX3RpbWVfc2NhbGVEYXRlKGxpbmVhci5pbnZlcnQoeCkpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcblx0ICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbGluZWFyLmRvbWFpbigpLm1hcChkM190aW1lX3NjYWxlRGF0ZSk7XG5cdCAgICAgIGxpbmVhci5kb21haW4oeCk7XG5cdCAgICAgIHJldHVybiBzY2FsZTtcblx0ICAgIH07XG5cdCAgICBmdW5jdGlvbiB0aWNrTWV0aG9kKGV4dGVudCwgY291bnQpIHtcblx0ICAgICAgdmFyIHNwYW4gPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIHRhcmdldCA9IHNwYW4gLyBjb3VudCwgaSA9IGQzLmJpc2VjdChkM190aW1lX3NjYWxlU3RlcHMsIHRhcmdldCk7XG5cdCAgICAgIHJldHVybiBpID09IGQzX3RpbWVfc2NhbGVTdGVwcy5sZW5ndGggPyBbIG1ldGhvZHMueWVhciwgZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGV4dGVudC5tYXAoZnVuY3Rpb24oZCkge1xuXHQgICAgICAgIHJldHVybiBkIC8gMzE1MzZlNjtcblx0ICAgICAgfSksIGNvdW50KVsyXSBdIDogIWkgPyBbIGQzX3RpbWVfc2NhbGVNaWxsaXNlY29uZHMsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShleHRlbnQsIGNvdW50KVsyXSBdIDogbWV0aG9kc1t0YXJnZXQgLyBkM190aW1lX3NjYWxlU3RlcHNbaSAtIDFdIDwgZDNfdGltZV9zY2FsZVN0ZXBzW2ldIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcblx0ICAgIH1cblx0ICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCwgc2tpcCkge1xuXHQgICAgICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluKCksIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGRvbWFpbiksIG1ldGhvZCA9IGludGVydmFsID09IG51bGwgPyB0aWNrTWV0aG9kKGV4dGVudCwgMTApIDogdHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiICYmIHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCk7XG5cdCAgICAgIGlmIChtZXRob2QpIGludGVydmFsID0gbWV0aG9kWzBdLCBza2lwID0gbWV0aG9kWzFdO1xuXHQgICAgICBmdW5jdGlvbiBza2lwcGVkKGRhdGUpIHtcblx0ICAgICAgICByZXR1cm4gIWlzTmFOKGRhdGUpICYmICFpbnRlcnZhbC5yYW5nZShkYXRlLCBkM190aW1lX3NjYWxlRGF0ZSgrZGF0ZSArIDEpLCBza2lwKS5sZW5ndGg7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkM19zY2FsZV9uaWNlKGRvbWFpbiwgc2tpcCA+IDEgPyB7XG5cdCAgICAgICAgZmxvb3I6IGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgICAgICAgIHdoaWxlIChza2lwcGVkKGRhdGUgPSBpbnRlcnZhbC5mbG9vcihkYXRlKSkpIGRhdGUgPSBkM190aW1lX3NjYWxlRGF0ZShkYXRlIC0gMSk7XG5cdCAgICAgICAgICByZXR1cm4gZGF0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGNlaWw6IGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgICAgICAgIHdoaWxlIChza2lwcGVkKGRhdGUgPSBpbnRlcnZhbC5jZWlsKGRhdGUpKSkgZGF0ZSA9IGQzX3RpbWVfc2NhbGVEYXRlKCtkYXRlICsgMSk7XG5cdCAgICAgICAgICByZXR1cm4gZGF0ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gOiBpbnRlcnZhbCkpO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oaW50ZXJ2YWwsIHNraXApIHtcblx0ICAgICAgdmFyIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KHNjYWxlLmRvbWFpbigpKSwgbWV0aG9kID0gaW50ZXJ2YWwgPT0gbnVsbCA/IHRpY2tNZXRob2QoZXh0ZW50LCAxMCkgOiB0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIgPyB0aWNrTWV0aG9kKGV4dGVudCwgaW50ZXJ2YWwpIDogIWludGVydmFsLnJhbmdlICYmIFsge1xuXHQgICAgICAgIHJhbmdlOiBpbnRlcnZhbFxuXHQgICAgICB9LCBza2lwIF07XG5cdCAgICAgIGlmIChtZXRob2QpIGludGVydmFsID0gbWV0aG9kWzBdLCBza2lwID0gbWV0aG9kWzFdO1xuXHQgICAgICByZXR1cm4gaW50ZXJ2YWwucmFuZ2UoZXh0ZW50WzBdLCBkM190aW1lX3NjYWxlRGF0ZSgrZXh0ZW50WzFdICsgMSksIHNraXAgPCAxID8gMSA6IHNraXApO1xuXHQgICAgfTtcblx0ICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGZvcm1hdDtcblx0ICAgIH07XG5cdCAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBkM190aW1lX3NjYWxlKGxpbmVhci5jb3B5KCksIG1ldGhvZHMsIGZvcm1hdCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKTtcblx0ICB9XG5cdCAgZnVuY3Rpb24gZDNfdGltZV9zY2FsZURhdGUodCkge1xuXHQgICAgcmV0dXJuIG5ldyBEYXRlKHQpO1xuXHQgIH1cblx0ICB2YXIgZDNfdGltZV9zY2FsZVN0ZXBzID0gWyAxZTMsIDVlMywgMTVlMywgM2U0LCA2ZTQsIDNlNSwgOWU1LCAxOGU1LCAzNmU1LCAxMDhlNSwgMjE2ZTUsIDQzMmU1LCA4NjRlNSwgMTcyOGU1LCA2MDQ4ZTUsIDI1OTJlNiwgNzc3NmU2LCAzMTUzNmU2IF07XG5cdCAgdmFyIGQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMgPSBbIFsgZDNfdGltZS5zZWNvbmQsIDEgXSwgWyBkM190aW1lLnNlY29uZCwgNSBdLCBbIGQzX3RpbWUuc2Vjb25kLCAxNSBdLCBbIGQzX3RpbWUuc2Vjb25kLCAzMCBdLCBbIGQzX3RpbWUubWludXRlLCAxIF0sIFsgZDNfdGltZS5taW51dGUsIDUgXSwgWyBkM190aW1lLm1pbnV0ZSwgMTUgXSwgWyBkM190aW1lLm1pbnV0ZSwgMzAgXSwgWyBkM190aW1lLmhvdXIsIDEgXSwgWyBkM190aW1lLmhvdXIsIDMgXSwgWyBkM190aW1lLmhvdXIsIDYgXSwgWyBkM190aW1lLmhvdXIsIDEyIF0sIFsgZDNfdGltZS5kYXksIDEgXSwgWyBkM190aW1lLmRheSwgMiBdLCBbIGQzX3RpbWUud2VlaywgMSBdLCBbIGQzX3RpbWUubW9udGgsIDEgXSwgWyBkM190aW1lLm1vbnRoLCAzIF0sIFsgZDNfdGltZS55ZWFyLCAxIF0gXTtcblx0ICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsRm9ybWF0ID0gZDNfdGltZV9mb3JtYXQubXVsdGkoWyBbIFwiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldE1pbGxpc2Vjb25kcygpO1xuXHQgIH0gXSwgWyBcIjolU1wiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXRTZWNvbmRzKCk7XG5cdCAgfSBdLCBbIFwiJUk6JU1cIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0TWludXRlcygpO1xuXHQgIH0gXSwgWyBcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldEhvdXJzKCk7XG5cdCAgfSBdLCBbIFwiJWEgJWRcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0RGF5KCkgJiYgZC5nZXREYXRlKCkgIT0gMTtcblx0ICB9IF0sIFsgXCIlYiAlZFwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXREYXRlKCkgIT0gMTtcblx0ICB9IF0sIFsgXCIlQlwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXRNb250aCgpO1xuXHQgIH0gXSwgWyBcIiVZXCIsIGQzX3RydWUgXSBdKTtcblx0ICB2YXIgZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcyA9IHtcblx0ICAgIHJhbmdlOiBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuXHQgICAgICByZXR1cm4gZDMucmFuZ2UoTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCkgKiBzdGVwLCArc3RvcCwgc3RlcCkubWFwKGQzX3RpbWVfc2NhbGVEYXRlKTtcblx0ICAgIH0sXG5cdCAgICBmbG9vcjogZDNfaWRlbnRpdHksXG5cdCAgICBjZWlsOiBkM19pZGVudGl0eVxuXHQgIH07XG5cdCAgZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcy55ZWFyID0gZDNfdGltZS55ZWFyO1xuXHQgIGQzX3RpbWUuc2NhbGUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM190aW1lX3NjYWxlKGQzLnNjYWxlLmxpbmVhcigpLCBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLCBkM190aW1lX3NjYWxlTG9jYWxGb3JtYXQpO1xuXHQgIH07XG5cdCAgdmFyIGQzX3RpbWVfc2NhbGVVdGNNZXRob2RzID0gZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcy5tYXAoZnVuY3Rpb24obSkge1xuXHQgICAgcmV0dXJuIFsgbVswXS51dGMsIG1bMV0gXTtcblx0ICB9KTtcblx0ICB2YXIgZDNfdGltZV9zY2FsZVV0Y0Zvcm1hdCA9IGQzX3RpbWVfZm9ybWF0VXRjLm11bHRpKFsgWyBcIi4lTFwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcblx0ICB9IF0sIFsgXCI6JVNcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0VVRDU2Vjb25kcygpO1xuXHQgIH0gXSwgWyBcIiVJOiVNXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldFVUQ01pbnV0ZXMoKTtcblx0ICB9IF0sIFsgXCIlSSAlcFwiLCBmdW5jdGlvbihkKSB7XG5cdCAgICByZXR1cm4gZC5nZXRVVENIb3VycygpO1xuXHQgIH0gXSwgWyBcIiVhICVkXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgIHJldHVybiBkLmdldFVUQ0RheSgpICYmIGQuZ2V0VVRDRGF0ZSgpICE9IDE7XG5cdCAgfSBdLCBbIFwiJWIgJWRcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0VVRDRGF0ZSgpICE9IDE7XG5cdCAgfSBdLCBbIFwiJUJcIiwgZnVuY3Rpb24oZCkge1xuXHQgICAgcmV0dXJuIGQuZ2V0VVRDTW9udGgoKTtcblx0ICB9IF0sIFsgXCIlWVwiLCBkM190cnVlIF0gXSk7XG5cdCAgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMueWVhciA9IGQzX3RpbWUueWVhci51dGM7XG5cdCAgZDNfdGltZS5zY2FsZS51dGMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBkM190aW1lX3NjYWxlKGQzLnNjYWxlLmxpbmVhcigpLCBkM190aW1lX3NjYWxlVXRjTWV0aG9kcywgZDNfdGltZV9zY2FsZVV0Y0Zvcm1hdCk7XG5cdCAgfTtcblx0ICBkMy50ZXh0ID0gZDNfeGhyVHlwZShmdW5jdGlvbihyZXF1ZXN0KSB7XG5cdCAgICByZXR1cm4gcmVxdWVzdC5yZXNwb25zZVRleHQ7XG5cdCAgfSk7XG5cdCAgZDMuanNvbiA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcblx0ICAgIHJldHVybiBkM194aHIodXJsLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgZDNfanNvbiwgY2FsbGJhY2spO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfanNvbihyZXF1ZXN0KSB7XG5cdCAgICByZXR1cm4gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG5cdCAgfVxuXHQgIGQzLmh0bWwgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG5cdCAgICByZXR1cm4gZDNfeGhyKHVybCwgXCJ0ZXh0L2h0bWxcIiwgZDNfaHRtbCwgY2FsbGJhY2spO1xuXHQgIH07XG5cdCAgZnVuY3Rpb24gZDNfaHRtbChyZXF1ZXN0KSB7XG5cdCAgICB2YXIgcmFuZ2UgPSBkM19kb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXHQgICAgcmFuZ2Uuc2VsZWN0Tm9kZShkM19kb2N1bWVudC5ib2R5KTtcblx0ICAgIHJldHVybiByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuXHQgIH1cblx0ICBkMy54bWwgPSBkM194aHJUeXBlKGZ1bmN0aW9uKHJlcXVlc3QpIHtcblx0ICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlWE1MO1xuXHQgIH0pO1xuXHQgIGlmICh0cnVlKSB0aGlzLmQzID0gZDMsICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGQzKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/IChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLCBleHBvcnRzLCBtb2R1bGUpKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTsgZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkMzsgZWxzZSB0aGlzLmQzID0gZDM7XG5cdH0oKTtcblxuLyoqKi8gfSxcbi8qIDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdHZhciBCYXNlRWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBCYXNlRWxlbWVudChzdmcpIHtcblx0ICAgICAgICB0aGlzLnN2ZyA9IHN2Zztcblx0ICAgIH1cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlRWxlbWVudC5wcm90b3R5cGUsIFwiY3hcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy53aWR0aCAvIDI7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUVsZW1lbnQucHJvdG90eXBlLCBcImN5XCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0IC8gMjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlRWxlbWVudC5wcm90b3R5cGUsIFwid2lkdGhcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gKyQoXCIudmlzdWFsaXplclwiKS53aWR0aCgpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VFbGVtZW50LnByb3RvdHlwZSwgXCJoZWlnaHRcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gKyQoXCIudmlzdWFsaXplclwiKS5oZWlnaHQoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBCYXNlRWxlbWVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5CYXNlRWxlbWVudCA9IEJhc2VFbGVtZW50O1xuXG5cbi8qKiovIH0sXG4vKiA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKlxyXG5cdFx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRcdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuXHQqL1xyXG5cdC8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBsaXN0ID0gW107XHJcblx0XHJcblx0XHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0XHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgaXRlbSA9IHRoaXNbaV07XHJcblx0XHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0XHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxyXG5cdFx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xyXG5cdFx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXHJcblx0XHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRyZXR1cm4gbGlzdDtcclxuXHR9O1xyXG5cblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJmb250cy9TYW5zdW1pLVJlZ3VsYXIuZW90XCI7XG5cbi8qKiovIH0sXG4vKiA3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKlxyXG5cdFx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRcdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuXHQqL1xyXG5cdHZhciBzdHlsZXNJbkRvbSA9IHt9LFxyXG5cdFx0bWVtb2l6ZSA9IGZ1bmN0aW9uKGZuKSB7XHJcblx0XHRcdHZhciBtZW1vO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0cmV0dXJuIG1lbW87XHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cdFx0aXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiAvbXNpZSBbNi05XVxcYi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcclxuXHRcdH0pLFxyXG5cdFx0Z2V0SGVhZEVsZW1lbnQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cdFx0fSksXHJcblx0XHRzaW5nbGV0b25FbGVtZW50ID0gbnVsbCxcclxuXHRcdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxyXG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AgPSBbXTtcclxuXHRcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRcdGlmKHRydWUpIHtcclxuXHRcdFx0aWYodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XHJcblx0XHR9XHJcblx0XHJcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHRcdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxyXG5cdFx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XHJcblx0XHJcblx0XHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcclxuXHRcclxuXHRcdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0XHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcclxuXHRcdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYobmV3TGlzdCkge1xyXG5cdFx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xyXG5cdFx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcclxuXHRcdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMrKztcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHRcdHZhciBzdHlsZXMgPSBbXTtcclxuXHRcdHZhciBuZXdTdHlsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbGlzdFtpXTtcclxuXHRcdFx0dmFyIGlkID0gaXRlbVswXTtcclxuXHRcdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XHJcblx0XHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xyXG5cdFx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxyXG5cdFx0XHRcdHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc3R5bGVzO1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0XHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XHJcblx0XHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcFtzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcclxuXHRcdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRcdGlmKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xyXG5cdFx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgaGVhZC5maXJzdENoaWxkKTtcclxuXHRcdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGVFbGVtZW50KTtcclxuXHRcdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdFx0aWYoaWR4ID49IDApIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0XHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdFx0c3R5bGVFbGVtZW50LnR5cGUgPSBcInRleHQvY3NzXCI7XHJcblx0XHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRcdHJldHVybiBzdHlsZUVsZW1lbnQ7XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpIHtcclxuXHRcdHZhciBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xyXG5cdFx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0XHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGlua0VsZW1lbnQpO1xyXG5cdFx0cmV0dXJuIGxpbmtFbGVtZW50O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcclxuXHRcdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cdFxyXG5cdFx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XHJcblx0XHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpO1xyXG5cdFx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHRcdH0gZWxzZSBpZihvYmouc291cmNlTWFwICYmXHJcblx0XHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xyXG5cdFx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KTtcclxuXHRcdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdFx0aWYoc3R5bGVFbGVtZW50LmhyZWYpXHJcblx0XHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdFx0fTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dXBkYXRlKG9iaik7XHJcblx0XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRcdGlmKG5ld09iaikge1xyXG5cdFx0XHRcdGlmKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcClcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZW1vdmUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblx0XHJcblx0dmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHRcclxuXHRcdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XHJcblx0XHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XHJcblx0XHR9O1xyXG5cdH0pKCk7XHJcblx0XHJcblx0ZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cdFxyXG5cdFx0aWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcclxuXHRcdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0XHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblx0XHJcblx0XHRpZihtZWRpYSkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXHJcblx0XHR9XHJcblx0XHJcblx0XHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0d2hpbGUoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gdXBkYXRlTGluayhsaW5rRWxlbWVudCwgb2JqKSB7XHJcblx0XHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHRcdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cdFxyXG5cdFx0aWYoc291cmNlTWFwKSB7XHJcblx0XHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XHJcblx0XHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcclxuXHRcdH1cclxuXHRcclxuXHRcdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xyXG5cdFxyXG5cdFx0dmFyIG9sZFNyYyA9IGxpbmtFbGVtZW50LmhyZWY7XHJcblx0XHJcblx0XHRsaW5rRWxlbWVudC5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHRcclxuXHRcdGlmKG9sZFNyYylcclxuXHRcdFx0VVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xyXG5cdH1cclxuXG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0ZnVuY3Rpb24gX19leHBvcnQobSkge1xuXHQgICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xuXHR9XG5cdF9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjkpKTtcblx0X19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyOCkpO1xuXHRfX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSk7XG5cblxuLyoqKi8gfSxcbi8qIDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdChmdW5jdGlvbihzZWxmKSB7XG5cdCAgJ3VzZSBzdHJpY3QnO1xuXHRcblx0ICBpZiAoc2VsZi5mZXRjaCkge1xuXHQgICAgcmV0dXJuXG5cdCAgfVxuXHRcblx0ICB2YXIgc3VwcG9ydCA9IHtcblx0ICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcblx0ICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuXHQgICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIG5ldyBCbG9iKClcblx0ICAgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgICB9IGNhdGNoKGUpIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2Vcblx0ICAgICAgfVxuXHQgICAgfSkoKSxcblx0ICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG5cdCAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcblx0ICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcblx0ICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuXHQgICAgfVxuXHQgICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcblx0ICAgIH1cblx0ICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG5cdCAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuXHQgICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcblx0ICAgIH1cblx0ICAgIHJldHVybiB2YWx1ZVxuXHQgIH1cblx0XG5cdCAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3Rcblx0ICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuXHQgICAgdmFyIGl0ZXJhdG9yID0ge1xuXHQgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG5cdCAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuXHQgICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIGl0ZXJhdG9yXG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gaXRlcmF0b3Jcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuXHQgICAgdGhpcy5tYXAgPSB7fVxuXHRcblx0ICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuXHQgICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcblx0ICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcblx0ICAgICAgfSwgdGhpcylcblx0XG5cdCAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcblx0ICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcblx0ICAgICAgfSwgdGhpcylcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cdCAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuXHQgICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcblx0ICAgIHZhciBsaXN0ID0gdGhpcy5tYXBbbmFtZV1cblx0ICAgIGlmICghbGlzdCkge1xuXHQgICAgICBsaXN0ID0gW11cblx0ICAgICAgdGhpcy5tYXBbbmFtZV0gPSBsaXN0XG5cdCAgICB9XG5cdCAgICBsaXN0LnB1c2godmFsdWUpXG5cdCAgfVxuXHRcblx0ICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuXHQgICAgcmV0dXJuIHZhbHVlcyA/IHZhbHVlc1swXSA6IG51bGxcblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHJldHVybiB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSB8fCBbXVxuXHQgIH1cblx0XG5cdCAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuXHQgICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG5cdCAgfVxuXHRcblx0ICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHQgICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBbbm9ybWFsaXplVmFsdWUodmFsdWUpXVxuXHQgIH1cblx0XG5cdCAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG5cdCAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLm1hcCkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbHVlLCBuYW1lLCB0aGlzKVxuXHQgICAgICB9LCB0aGlzKVxuXHQgICAgfSwgdGhpcylcblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBpdGVtcyA9IFtdXG5cdCAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChuYW1lKSB9KVxuXHQgICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuXHQgIH1cblx0XG5cdCAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaXRlbXMgPSBbXVxuXHQgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IGl0ZW1zLnB1c2godmFsdWUpIH0pXG5cdCAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG5cdCAgfVxuXHRcblx0ICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaXRlbXMgPSBbXVxuXHQgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSkgfSlcblx0ICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcblx0ICB9XG5cdFxuXHQgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG5cdCAgICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuXHQgICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcblx0ICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuXHQgICAgfVxuXHQgICAgYm9keS5ib2R5VXNlZCA9IHRydWVcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcblx0ICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcblx0ICAgICAgfVxuXHQgICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG5cdCAgICAgIH1cblx0ICAgIH0pXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuXHQgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcblx0ICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuXHQgICAgcmV0dXJuIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG5cdCAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuXHQgICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcblx0ICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gQm9keSgpIHtcblx0ICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXHRcblx0ICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuXHQgICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcblx0ICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuXHQgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG5cdCAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG5cdCAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuXHQgICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcblx0ICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcblx0ICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuXHQgICAgICB9IGVsc2UgaWYgKCFib2R5KSB7XG5cdCAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuXHQgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcblx0ICAgICAgICAvLyBPbmx5IHN1cHBvcnQgQXJyYXlCdWZmZXJzIGZvciBQT1NUIG1ldGhvZC5cblx0ICAgICAgICAvLyBSZWNlaXZpbmcgQXJyYXlCdWZmZXJzIGhhcHBlbnMgdmlhIEJsb2JzLCBpbnN0ZWFkLlxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgQm9keUluaXQgdHlwZScpXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jylcblx0ICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcblx0ICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG5cdCAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcblx0ICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHN1cHBvcnQuYmxvYikge1xuXHQgICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuXHQgICAgICAgIGlmIChyZWplY3RlZCkge1xuXHQgICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcblx0ICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG5cdCAgICAgICAgaWYgKHJlamVjdGVkKSB7XG5cdCAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuXHQgICAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuXHQgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuXHQgICAgICAgIHJldHVybiByZWplY3RlZCA/IHJlamVjdGVkIDogUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcblx0ICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiB0aGlzXG5cdCAgfVxuXHRcblx0ICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcblx0ICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXHRcblx0ICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG5cdCAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG5cdCAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2Rcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcblx0ICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cdCAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXHQgICAgaWYgKFJlcXVlc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoaW5wdXQpKSB7XG5cdCAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcblx0ICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG5cdCAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG5cdCAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuXHQgICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG5cdCAgICAgIGlmICghYm9keSkge1xuXHQgICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcblx0ICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy51cmwgPSBpbnB1dFxuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG5cdCAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcblx0ICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuXHQgICAgfVxuXHQgICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG5cdCAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcblx0ICAgIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cdFxuXHQgICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG5cdCAgICB9XG5cdCAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuXHQgIH1cblx0XG5cdCAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzKVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcblx0ICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcblx0ICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuXHQgICAgICBpZiAoYnl0ZXMpIHtcblx0ICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG5cdCAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG5cdCAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG5cdCAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuXHQgICAgICB9XG5cdCAgICB9KVxuXHQgICAgcmV0dXJuIGZvcm1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGhlYWRlcnMoeGhyKSB7XG5cdCAgICB2YXIgaGVhZCA9IG5ldyBIZWFkZXJzKClcblx0ICAgIHZhciBwYWlycyA9ICh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpLnRyaW0oKS5zcGxpdCgnXFxuJylcblx0ICAgIHBhaXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG5cdCAgICAgIHZhciBzcGxpdCA9IGhlYWRlci50cmltKCkuc3BsaXQoJzonKVxuXHQgICAgICB2YXIga2V5ID0gc3BsaXQuc2hpZnQoKS50cmltKClcblx0ICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignOicpLnRyaW0oKVxuXHQgICAgICBoZWFkLmFwcGVuZChrZXksIHZhbHVlKVxuXHQgICAgfSlcblx0ICAgIHJldHVybiBoZWFkXG5cdCAgfVxuXHRcblx0ICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cdFxuXHQgIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG5cdCAgICBpZiAoIW9wdGlvbnMpIHtcblx0ICAgICAgb3B0aW9ucyA9IHt9XG5cdCAgICB9XG5cdFxuXHQgICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG5cdCAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzXG5cdCAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG5cdCAgICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHRcblx0ICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMgPyBvcHRpb25zLmhlYWRlcnMgOiBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG5cdCAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG5cdCAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcblx0ICB9XG5cdFxuXHQgIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cdFxuXHQgIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuXHQgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuXHQgICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG5cdCAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG5cdCAgICAgIHVybDogdGhpcy51cmxcblx0ICAgIH0pXG5cdCAgfVxuXHRcblx0ICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcblx0ICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG5cdCAgICByZXR1cm4gcmVzcG9uc2Vcblx0ICB9XG5cdFxuXHQgIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXHRcblx0ICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG5cdCAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG5cdCAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcblx0ICB9XG5cdFxuXHQgIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcblx0ICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG5cdCAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG5cdFxuXHQgIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuXHQgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICB2YXIgcmVxdWVzdFxuXHQgICAgICBpZiAoUmVxdWVzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihpbnB1dCkgJiYgIWluaXQpIHtcblx0ICAgICAgICByZXF1ZXN0ID0gaW5wdXRcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXHRcblx0ICAgICAgZnVuY3Rpb24gcmVzcG9uc2VVUkwoKSB7XG5cdCAgICAgICAgaWYgKCdyZXNwb25zZVVSTCcgaW4geGhyKSB7XG5cdCAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVVJMXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyBBdm9pZCBzZWN1cml0eSB3YXJuaW5ncyBvbiBnZXRSZXNwb25zZUhlYWRlciB3aGVuIG5vdCBhbGxvd2VkIGJ5IENPUlNcblx0ICAgICAgICBpZiAoL15YLVJlcXVlc3QtVVJMOi9tLnRlc3QoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkge1xuXHQgICAgICAgICAgcmV0dXJuIHhoci5nZXRSZXNwb25zZUhlYWRlcignWC1SZXF1ZXN0LVVSTCcpXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm5cblx0ICAgICAgfVxuXHRcblx0ICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0ge1xuXHQgICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuXHQgICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG5cdCAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKHhociksXG5cdCAgICAgICAgICB1cmw6IHJlc3BvbnNlVVJMKClcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcblx0ICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcblx0ICAgICAgfVxuXHRcblx0ICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcblx0ICAgICAgfVxuXHRcblx0ICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXHRcblx0ICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuXHQgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG5cdCAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuXHQgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuXHQgICAgICB9KVxuXHRcblx0ICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcblx0ICAgIH0pXG5cdCAgfVxuXHQgIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cdH0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcblxuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoKTtcblx0Ly8gaW1wb3J0c1xuXHRcblx0XG5cdC8vIG1vZHVsZVxuXHRleHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNle2ZvbnQtZmFtaWx5OlNhbnN1bWktUmVndWxhcjtzcmM6dXJsKFwiICsgX193ZWJwYWNrX3JlcXVpcmVfXyg2KSArIFwiKTtzcmM6dXJsKFwiICsgX193ZWJwYWNrX3JlcXVpcmVfXygxNSkgKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLHVybChcIiArIF9fd2VicGFja19yZXF1aXJlX18oMTQpICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLHVybChcIiArIF9fd2VicGFja19yZXF1aXJlX18oMTMpICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKSArIFwiI1NhbnN1bWktUmVndWxhcikgZm9ybWF0KFxcXCJzdmdcXFwiKSx1cmwoXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpICsgXCI/I2llZml4KSBmb3JtYXQoXFxcImVtYmVkZGVkLW9wZW50eXBlXFxcIik7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohIG5vcm1hbGl6ZS1zY3NzIHwgTUlUL0dQTHYyIExpY2Vuc2UgfCBiaXQubHkvbm9ybWFsaXplLXNjc3MgKi9odG1se2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWY7LW1zLXRleHQtc2l6ZS1hZGp1c3Q6MTAwJTstd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6MTAwJX1ib2R5e21hcmdpbjowfWFydGljbGUsYXNpZGUsZGV0YWlscyxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsaGVhZGVyLG1haW4sbWVudSxuYXYsc2VjdGlvbixzdW1tYXJ5e2Rpc3BsYXk6YmxvY2t9YXVkaW8sY2FudmFzLHByb2dyZXNzLHZpZGVve2Rpc3BsYXk6aW5saW5lLWJsb2NrfWF1ZGlvOm5vdChbY29udHJvbHNdKXtkaXNwbGF5Om5vbmU7aGVpZ2h0OjB9cHJvZ3Jlc3N7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9W2hpZGRlbl0sdGVtcGxhdGV7ZGlzcGxheTpub25lfWF7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOm9iamVjdHN9YTphY3RpdmUsYTpob3ZlcntvdXRsaW5lLXdpZHRoOjB9YWJiclt0aXRsZV17Ym9yZGVyLWJvdHRvbTpub25lO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSBkb3R0ZWR9YixzdHJvbmd7Zm9udC13ZWlnaHQ6aW5oZXJpdDtmb250LXdlaWdodDpib2xkZXJ9Y29kZSxrYmQsc2FtcHtmb250LWZhbWlseTptb25vc3BhY2UsbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19ZGZue2ZvbnQtc3R5bGU6aXRhbGljfWgxe2ZvbnQtc2l6ZToyZW07bWFyZ2luOi43NWVtIDB9bWFya3tiYWNrZ3JvdW5kLWNvbG9yOiNmZjA7Y29sb3I6IzAwMH1zbWFsbHtmb250LXNpemU6ODAlfXN1YixzdXB7Zm9udC1zaXplOjc1JTtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfXN1Yntib3R0b206LS4yNWVtfXN1cHt0b3A6LS41ZW19aW1ne2JvcmRlci1zdHlsZTpub25lfXN2Zzpub3QoOnJvb3Qpe292ZXJmbG93OmhpZGRlbn1maWd1cmV7bWFyZ2luOjEuNWVtIDQwcHh9aHJ7Ym94LXNpemluZzpjb250ZW50LWJveDtoZWlnaHQ6MDtvdmVyZmxvdzp2aXNpYmxlfXByZXtmb250LWZhbWlseTptb25vc3BhY2UsbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19YnV0dG9uLGlucHV0LG9wdGdyb3VwLHNlbGVjdCx0ZXh0YXJlYXtmb250OmluaGVyaXQ7bWFyZ2luOjB9YnV0dG9ue292ZXJmbG93OnZpc2libGV9YnV0dG9uLHNlbGVjdHt0ZXh0LXRyYW5zZm9ybTpub25lfVt0eXBlPXJlc2V0XSxbdHlwZT1zdWJtaXRdLGJ1dHRvbixodG1sIFt0eXBlPWJ1dHRvbl17LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbn1bdHlwZT1idXR0b25dOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPXJlc2V0XTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1zdWJtaXRdOjotbW96LWZvY3VzLWlubmVyLGJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcntib3JkZXItc3R5bGU6bm9uZTtwYWRkaW5nOjB9W3R5cGU9YnV0dG9uXTotbW96LWZvY3VzcmluZyxbdHlwZT1yZXNldF06LW1vei1mb2N1c3JpbmcsW3R5cGU9c3VibWl0XTotbW96LWZvY3VzcmluZyxidXR0b246LW1vei1mb2N1c3Jpbmd7b3V0bGluZToxcHggZG90dGVkIEJ1dHRvblRleHR9aW5wdXR7b3ZlcmZsb3c6dmlzaWJsZX1bdHlwZT1jaGVja2JveF0sW3R5cGU9cmFkaW9de2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjB9W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixbdHlwZT1udW1iZXJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9ue2hlaWdodDphdXRvfVt0eXBlPXNlYXJjaF17LXdlYmtpdC1hcHBlYXJhbmNlOnRleHRmaWVsZDtvdXRsaW5lLW9mZnNldDotMnB4fVt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sW3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX06Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6aW5oZXJpdDtvcGFjaXR5Oi41NH06Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b247Zm9udDppbmhlcml0fWZpZWxkc2V0e2JvcmRlcjoxcHggc29saWQgc2lsdmVyO21hcmdpbjowIDJweDtwYWRkaW5nOi4zNWVtIC42MjVlbSAuNzVlbX1sZWdlbmR7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6dGFibGU7bWF4LXdpZHRoOjEwMCU7d2hpdGUtc3BhY2U6bm9ybWFsO2NvbG9yOmluaGVyaXQ7cGFkZGluZzowfW9wdGdyb3Vwe2ZvbnQtd2VpZ2h0OjcwMH10ZXh0YXJlYXtvdmVyZmxvdzphdXRvfWgxLGgyLGxhYmVsLHB7Zm9udC1mYW1pbHk6U2Fuc3VtaS1SZWd1bGFyfWJvZHksaHRtbHtoZWlnaHQ6MTAwJTtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWluLWhlaWdodDoxMDB2aH1sYWJlbHtmb250LXNpemU6MTJweH1oMXtmb250LXNpemU6MThweH1oMntmb250LXNpemU6MTZweH0uY29udGVudHt3aWR0aDoxMDAlO2hlaWdodDpjYWxjKDEwMCUgLSA4MHB4KTtkaXNwbGF5OmZsZXg7ZmxleDoxfS5ub2RlIGNpcmNsZXtzdHJva2U6IzFmYmFkNztzdHJva2Utd2lkdGg6MnB4fS5ub2RlIC5ub2RlLWNvbG9yLTF7ZmlsbDojNmU4NjhkfS5ub2RlIC5ub2RlLWNvbG9yLTJ7ZmlsbDojNTY3MTdhfS5ub2RlIC5ub2RlLWNvbG9yLTN7ZmlsbDojM2U1ZDY3fS5ub2RlIC5ub2RlLWNvbG9yLTR7ZmlsbDojMjY0OTU0fS5ub2RlIC5ub2RlLWNvbG9yLTV7ZmlsbDojMGUzNTQxfS5ub2RlIGRpdntkaXNwbGF5OnRhYmxlO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7b3ZlcmZsb3c6aGlkZGVufS5ub2RlIHB7Zm9udC1zaXplOjhweDtjb2xvcjojZjJmMmYyO3RleHQtc2hhZG93OjFweCAxcHggNHB4ICMwZTM1NDE7ZGlzcGxheTp0YWJsZS1jZWxsO3RleHQtYWxpZ246Y2VudGVyO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0ubG9hZGVyIGNpcmNsZXtmaWxsLW9wYWNpdHk6MDtzdHJva2U6IzFmNzdiNDtzdHJva2Utd2lkdGg6M3B4fS5sb2FkZXIgcmVjdHtmaWxsOiNmZmZ9LnZpc3VhbGl6ZXJ7d2lkdGg6MTAwJTtmbGV4OjF9LnRvcC1iYXJ7YmFja2dyb3VuZC1jb2xvcjojMDkwOTFhO2hlaWdodDo4MHB4O2NvbG9yOiNmMmYyZjI7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nLWxlZnQ6NDhweH0udG9wLWJhciBwe3BhZGRpbmctbGVmdDoxNnB4O21hcmdpbjowfS5tZW51e2JhY2tncm91bmQtY29sb3I6I2ZmZjtjb2xvcjojMDkwOTFhO2ZsZXg6MCAwIDE2ZW07Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjMDkwOTFhO3BhZGRpbmctdG9wOjUwcHh9Lm1lbnUgZGl2LC5tZW51IGgyLC5tZW51IGltZywubWVudSBpbnB1dHtwYWRkaW5nLWxlZnQ6NDhweH0ubWVudSBoMSwubWVudSBpbWd7ZGlzcGxheTppbmxpbmV9Lm1lbnUgaDF7bGluZS1oZWlnaHQ6MH0ubWVudSBocntjb2xvcjojMDkwOTFhO3dpZHRoOjgwJTttYXJnaW4tYm90dG9tOjIwcHh9Lm1lbnUgaW5wdXR7bWFyZ2luOjVweCAwfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnN2Z1wiO1xuXG4vKioqLyB9LFxuLyogMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJmb250cy9TYW5zdW1pLVJlZ3VsYXIudHRmXCI7XG5cbi8qKiovIH0sXG4vKiAxNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcImZvbnRzL1NhbnN1bWktUmVndWxhci53b2ZmXCI7XG5cbi8qKiovIH0sXG4vKiAxNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcImZvbnRzL1NhbnN1bWktUmVndWxhci53b2ZmMlwiO1xuXG4vKioqLyB9LFxuLyogMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cdFxuXHQvLyBsb2FkIHRoZSBzdHlsZXNcblx0dmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0aWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cdC8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cblx0dmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNykoY29udGVudCwge30pO1xuXHRpZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcblx0Ly8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuXHRpZihmYWxzZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL1NhbnN1bWktUmVndWxhci5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1wiKTtcblx0XHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXHRcblx0Ly8gbG9hZCB0aGUgc3R5bGVzXG5cdHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdGlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXHQvLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG5cdHZhciB1cGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKGNvbnRlbnQsIHt9KTtcblx0aWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcblx0aWYoZmFsc2UpIHtcblx0XHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZXMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cdFx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xuXHR9XG5cbi8qKiovIH0sXG4vKiAxOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0dmFyIGNvbXBvbmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXHR2YXIgbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRsb2cuc2V0TGV2ZWwoXCJkZWJ1Z1wiKTtcblx0dmFyIEFwcCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBBcHAoKSB7XG5cdCAgICAgICAgdGhpcy5fdmlzdWFsaXplciA9IG5ldyBjb21wb25lbnRzXzEuVmlzdWFsaXplcihuZXcgY29tcG9uZW50c18xLk1lbnVDb21wb25lbnQoKSwge30pO1xuXHQgICAgfVxuXHQgICAgQXBwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICQoJ2JvZHknKS5mYWRlSW4oXCJmYXN0XCIpO1xuXHQgICAgICAgIHRoaXMuX3Zpc3VhbGl6ZXIuZHJhdygpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBBcHA7XG5cdH0oKSk7XG5cdGV4cG9ydHMuQXBwID0gQXBwO1xuXHR2YXIgYXBwID0gbmV3IEFwcCgpO1xuXHRhcHAuaW5pdCgpO1xuXG5cbi8qKiovIH0sXG4vKiAxOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcblx0ICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcblx0fVxuXHRfX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKSk7XG5cdF9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjQpKTtcblxuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdHZhciBwcmltYXJ5U2VsZWN0b3IgPSBcInByaW1hcnktc2VsZWN0b3JzXCI7XG5cdHZhciBzZWNvbmRhcnlTZWxlY3RvciA9IFwic2Vjb25kYXJ5LXNlbGVjdG9yc1wiO1xuXHR2YXIgbG9nTWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBsb2cgPSBsb2dNYW5hZ2VyLmdldExvZ2dlcihcIm1lbnVcIik7XG5cdHZhciBNZW51Q29tcG9uZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE1lbnVDb21wb25lbnQoKSB7XG5cdCAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB7fTtcblx0ICAgIH1cblx0ICAgIE1lbnVDb21wb25lbnQucHJvdG90eXBlLnNldFNlbGVjdG9ycyA9IGZ1bmN0aW9uIChzZWxlY3RvcnMpIHtcblx0ICAgICAgICB2YXIgc2VsZWN0ZWRQcmltYXJ5ID0gc2VsZWN0b3JzWzBdLnF1ZXJ5O1xuXHQgICAgICAgIHZhciBzZWxlY3RlZFNlY29uZGFyeSA9IHNlbGVjdG9yc1swXS5jaGlsZHJlblswXS5xdWVyeTtcblx0ICAgICAgICB0aGlzLnNldFNlbGVjdG9yc0ludGVybmFsKHByaW1hcnlTZWxlY3Rvciwgc2VsZWN0b3JzLCBzZWxlY3RlZFByaW1hcnkpO1xuXHQgICAgICAgIHRoaXMuc2V0U2VsZWN0b3JzSW50ZXJuYWwoc2Vjb25kYXJ5U2VsZWN0b3IsIHNlbGVjdG9yc1swXS5jaGlsZHJlbiwgc2VsZWN0ZWRTZWNvbmRhcnkpO1xuXHQgICAgICAgIHRoaXMuX3NlbGVjdG9yc0hpZXJhcmNoeSA9IHNlbGVjdG9ycztcblx0ICAgIH07XG5cdCAgICBNZW51Q29tcG9uZW50LnByb3RvdHlwZS5zZXRPblNlbGVjdG9yc0NhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcblx0ICAgIH07XG5cdCAgICBNZW51Q29tcG9uZW50LnByb3RvdHlwZS5zZXRTZWxlY3RvcnNJbnRlcm5hbCA9IGZ1bmN0aW9uIChjYXRlZ29yeSwgc2VsZWN0b3JzLCBzZWxlY3RlZCkge1xuXHQgICAgICAgIHRoaXMuX3NlbGVjdGVkW2NhdGVnb3J5XSA9IHNlbGVjdGVkO1xuXHQgICAgICAgIHZhciBjYXRlZ29yeUNsYXNzID0gXCIuXCIgKyBjYXRlZ29yeTtcblx0ICAgICAgICAkKGNhdGVnb3J5Q2xhc3MpLmVtcHR5KCk7XG5cdCAgICAgICAgc2VsZWN0b3JzLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdG9yLCBpKSB7XG5cdCAgICAgICAgICAgIHZhciBzZWxlY3RlZFN0cmluZyA9IHNlbGVjdGVkID09PSBzZWxlY3Rvci5xdWVyeSA/IFwiY2hlY2tlZFwiIDogXCJcIjtcblx0ICAgICAgICAgICAgdmFyIGh0bWwgPSBcIlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcIlwiICsgY2F0ZWdvcnkgKyBcIlxcXCIgaWQ9XFxcIlwiICsgY2F0ZWdvcnkgKyBcIi1cIiArIGkgKyBcIlxcXCIgdmFsdWU9XFxcIlwiICsgc2VsZWN0b3IucXVlcnkgKyBcIlxcXCIgXCIgKyBzZWxlY3RlZFN0cmluZyArIFwiIC8+XFxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcIlwiICsgY2F0ZWdvcnkgKyBcIi1cIiArIGkgKyBcIlxcXCI+XCIgKyBzZWxlY3Rvci5sYWJlbCArIFwiPC9sYWJlbD48YnI+XFxuICAgICAgICAgICAgXCI7XG5cdCAgICAgICAgICAgICQoY2F0ZWdvcnlDbGFzcykuYXBwZW5kKGh0bWwpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMuYWRkQ2hhbmdlTGlzdGVuZXIoY2F0ZWdvcnkpO1xuXHQgICAgfTtcblx0ICAgIE1lbnVDb21wb25lbnQucHJvdG90eXBlLmFkZENoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB2YXIgY2F0ZWdvcnlDbGFzcyA9IFwiLlwiICsgY2F0ZWdvcnk7XG5cdCAgICAgICAgJChjYXRlZ29yeUNsYXNzICsgJyBpbnB1dCcpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICB2YXIgc2VsZWN0ZWRWYWx1ZSA9ICQoXCJpbnB1dFtuYW1lPVxcXCJcIiArIGNhdGVnb3J5ICsgXCJcXFwiXTpjaGVja2VkXCIsIGNhdGVnb3J5Q2xhc3MpLnZhbCgpO1xuXHQgICAgICAgICAgICBfdGhpcy5fc2VsZWN0ZWRbY2F0ZWdvcnldID0gc2VsZWN0ZWRWYWx1ZTtcblx0ICAgICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBwcmltYXJ5U2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IF90aGlzLl9zZWxlY3RvcnNIaWVyYXJjaHkuZmluZChmdW5jdGlvbiAocykgeyByZXR1cm4gcy5xdWVyeSA9PT0gc2VsZWN0ZWRWYWx1ZTsgfSk7XG5cdCAgICAgICAgICAgICAgICBfdGhpcy5zZXRTZWxlY3RvcnNJbnRlcm5hbChzZWNvbmRhcnlTZWxlY3Rvciwgc2VsZWN0ZWQuY2hpbGRyZW4sIHNlbGVjdGVkLmNoaWxkcmVuWzBdLnF1ZXJ5KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBfdGhpcy5pbnZva2VDYWxsYmFjaygpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIE1lbnVDb21wb25lbnQucHJvdG90eXBlLmludm9rZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2spIHtcblx0ICAgICAgICAgICAgbG9nLmVycm9yKFwiQ2FsbGJhY2sgaGFzIG5vdCBiZWVuIHNldFwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9jYWxsYmFjayh7IHF1ZXJ5OiB0aGlzLl9zZWxlY3RlZFtwcmltYXJ5U2VsZWN0b3JdIH0sIHsgcXVlcnk6IHRoaXMuX3NlbGVjdGVkW3NlY29uZGFyeVNlbGVjdG9yXSB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gTWVudUNvbXBvbmVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5NZW51Q29tcG9uZW50ID0gTWVudUNvbXBvbmVudDtcblxuXG4vKioqLyB9LFxuLyogMjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRmdW5jdGlvbiBfX2V4cG9ydChtKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG5cdH1cblx0X19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XG5cdF9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMjIpKTtcblx0X19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygyMykpO1xuXG5cbi8qKiovIH0sXG4vKiAyMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG5cdCAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG5cdH07XG5cdHZhciBkMyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBiYXNlX2VsZW1lbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBsb2dNYW5hZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGxvZyA9IGxvZ01hbmFnZXIuZ2V0TG9nZ2VyKFwibG9hZGVyXCIpO1xuXHR2YXIgU3RhbmRhcmRMb2FkZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKFN0YW5kYXJkTG9hZGVyLCBfc3VwZXIpO1xuXHQgICAgZnVuY3Rpb24gU3RhbmRhcmRMb2FkZXIoc3ZnKSB7XG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgc3ZnKTtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSYWRpdXMgb2YgdGhlIGxvYWRlclxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRoaXMuciA9IDUwO1xuXHQgICAgfVxuXHQgICAgU3RhbmRhcmRMb2FkZXIucHJvdG90eXBlLnN0YXJ0TG9hZGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmcpIHtcblx0ICAgICAgICAgICAgbG9nLmRlYnVnKFwiQ2FsbGluZyBhbHJlYWR5IHN0YXJ0ZWQgbG9hZGVyXCIpO1xuXHQgICAgICAgICAgICByZXR1cm47IC8vIFdlIGlnbm9yZSBjYWxsIGlmIGFscmVhZHkgbG9hZGluZy5cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5nID0gdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuXHQgICAgICAgICAgICAuY2xhc3NlZChcImxvYWRlclwiLCB0cnVlKTtcblx0ICAgICAgICB0aGlzLmFkZENpcmNsZSh0aGlzLmcpO1xuXHQgICAgICAgIHRoaXMuYWRkUmVjdCh0aGlzLmcpO1xuXHQgICAgfTtcblx0ICAgIFN0YW5kYXJkTG9hZGVyLnByb3RvdHlwZS5zdG9wTG9hZGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmcpIHtcblx0ICAgICAgICAgICAgdGhpcy5nLnJlbW92ZSgpO1xuXHQgICAgICAgICAgICB0aGlzLmcgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvLy8gQWRkcyBhIGNpcmNsZSB0byB0aGUgc2VsZWN0aW9uLiBUaGUgY2lyY2xlIGlzIHBsYWNlZCBpbiB0aGUgY2VudGVyIG9mIHRoZSBib2FyZC5cblx0ICAgIFN0YW5kYXJkTG9hZGVyLnByb3RvdHlwZS5hZGRDaXJjbGUgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICBzZWxlY3Rpb24uYXBwZW5kKFwiY2lyY2xlXCIpXG5cdCAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY3g7IH0pXG5cdCAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY3k7IH0pXG5cdCAgICAgICAgICAgIC5hdHRyKFwiclwiLCB0aGlzLnIpO1xuXHQgICAgfTtcblx0ICAgIFN0YW5kYXJkTG9hZGVyLnByb3RvdHlwZS5hZGRSZWN0ID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuciAqIDIgKyA1OyAvLyAqMiA9IGRpYW1ldGVyLiArNSB0byBhY2NvdW50IGZvciB0aGUgY2lyY2xlcyBib3JkZXIuXG5cdCAgICAgICAgdmFyIHdpZHRoID0gMjA7IC8vIERlZmluZXMgdGhlIHdpZHRoIG9mIHRoZSBnYXAgaW4gdGhlIGNpcmNsZVxuXHQgICAgICAgIHZhciByZWN0ID0gc2VsZWN0aW9uLmFwcGVuZChcInJlY3RcIilcblx0ICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmN4IC0gMjAgLyAyOyB9KVxuXHQgICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY3kgLSBoZWlnaHQgLyAyOyB9KVxuXHQgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIDIwKVxuXHQgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xuXHQgICAgICAgIHRoaXMuYWRkUm90YXRpb24ocmVjdCk7XG5cdCAgICB9O1xuXHQgICAgU3RhbmRhcmRMb2FkZXIucHJvdG90eXBlLmFkZFJvdGF0aW9uID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdmFyIHRyYW5zaXN0aW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBzZWxlY3Rpb24udHJhbnNpdGlvbigpXG5cdCAgICAgICAgICAgICAgICAuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGQzLmludGVycG9sYXRlU3RyaW5nKFwicm90YXRlKDAsICAgXCIgKyBfdGhpcy5jeCArIFwiLCBcIiArIF90aGlzLmN5ICsgXCIpXCIsIFwicm90YXRlKDM2MCwgXCIgKyBfdGhpcy5jeCArIFwiLCBcIiArIF90aGlzLmN5ICsgXCIpXCIpOyB9KVxuXHQgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDIwMDApXG5cdCAgICAgICAgICAgICAgICAuZWFjaChcImVuZFwiLCB0cmFuc2lzdGlvbik7IC8vIFJlcGVhdCB0cmFuc2l0aW9uXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB0cmFuc2lzdGlvbigpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBTdGFuZGFyZExvYWRlcjtcblx0fShiYXNlX2VsZW1lbnRfMS5CYXNlRWxlbWVudCkpO1xuXHRleHBvcnRzLlN0YW5kYXJkTG9hZGVyID0gU3RhbmRhcmRMb2FkZXI7XG5cblxuLyoqKi8gfSxcbi8qIDIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuXHQgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG5cdCAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0fTtcblx0dmFyIGQzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGJhc2VfZWxlbWVudF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIHV0aWxzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgbG9nTWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBsb2cgPSBsb2dNYW5hZ2VyLmdldExvZ2dlcihcIm5vZGUtaGllcmFyY2h5XCIpO1xuXHR2YXIgTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24oKSB7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24gPSBOb2RlSGllcmFyY2h5RWxlbWVudE9wdGlvbjtcblx0LyoqXG5cdCAqIFRoZSBub2RlIEhpZXJhcmNoeSByZXByZXNlbnRzIGEgaGllcmFyY2h5IG9mIG5vZGVzLlxuXHQgKiBUaGUgZGVwdGggb2YgdGhlIGhpZXJhcmNoeSBpcyBhbHdheXMgb25lLlxuXHQgKi9cblx0dmFyIE5vZGVIaWVyYXJjaHlFbGVtZW50ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcblx0ICAgIF9fZXh0ZW5kcyhOb2RlSGllcmFyY2h5RWxlbWVudCwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIE5vZGVIaWVyYXJjaHlFbGVtZW50KHN2ZywgX2NvbmZpZykge1xuXHQgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHN2Zyk7XG5cdCAgICAgICAgdGhpcy5fY29uZmlnID0gX2NvbmZpZztcblx0ICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZykge1xuXHQgICAgICAgICAgICBsb2cuZXJyb3IoXCJObyBjb25maWd1cmF0aW9uIGlzIHNwZWNpZmllZFwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUsIFwiY29sb3JTY2hlbWVcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMuX2NvbG9yU2NoZW1lKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9jb2xvclNjaGVtZSA9IGQzLnNjYWxlLmNhdGVnb3J5MjBjKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yU2NoZW1lO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVGhlIGRlZmF1bHQgY29sb3JzY2hlbWUgY2FuIGJlIG92ZXJyaWRlblxuXHQgICAgICAgICovXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY29sb3JTY2hlbWUgPSB2YWx1ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUsIFwibWluaW11bVZhbHVlXCIsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5taW5pbXVtVmFsdWUgfHwgMDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5taW5pbXVtVmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUsIFwiZGF0YVwiLCB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2V0cyBkYXRhIGFuZCBzdGFydHMgZHJhd2luZyBub2RlZGVzXG5cdCAgICAgICAgICogICovXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fZGF0YSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jbGVhbigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuXHQgICAgICAgICAgICB0aGlzLnJlZHJhdygpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgTm9kZUhpZXJhcmNoeUVsZW1lbnQucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIi5ub2RlXCIpLnJlbW92ZSgpO1xuXHQgICAgfTtcblx0ICAgIE5vZGVIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB2YXIgdHJhbnNsYXRlTm9kZVRvQm9yZGVyID0gdXRpbHNfMS50cmFuc2xhdGVUb0JvcmRlckZhY3RvcnkodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXHQgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudmFsdWUgPj0gX3RoaXMubWluaW11bVZhbHVlICYmIGQubmFtZTsgfSk7XG5cdCAgICAgICAgdmFyIHBhY2sgPSBkMy5sYXlvdXQucGFjaygpXG5cdCAgICAgICAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAtYS5uYW1lLmxlbmd0aCAtIGIubmFtZS5sZW5ndGg7XG5cdCAgICAgICAgICAgIC8vIHZhciB0aHJlc2hvbGQgPSAxMDtcblx0ICAgICAgICAgICAgLy8gaWYgKChhLnZhbHVlID4gdGhyZXNob2xkKSAmJiAoYi52YWx1ZSA+IHRocmVzaG9sZCkpIHtcblx0ICAgICAgICAgICAgLy8gICAgIHJldHVybiAoYS52YWx1ZSAtIGIudmFsdWUpO1xuXHQgICAgICAgICAgICAvLyB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvLyAgICAgcmV0dXJuIDE7XG5cdCAgICAgICAgICAgIC8vIH1cblx0ICAgICAgICB9KVxuXHQgICAgICAgICAgICAuc2l6ZShbdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdKVxuXHQgICAgICAgICAgICAucGFkZGluZyg1KTtcblx0ICAgICAgICB2YXIgbGF5b3V0Tm9kZXMgPSBwYWNrLm5vZGVzKHsgY2hpbGRyZW46IGRhdGEgfSlcblx0ICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gIWQuY2hpbGRyZW47IH0pOyAvLyBSZW1vdmUgdGhlIHJvb3Qgbm9kZSBhcyB0aGUgaGllcmFyY2hpY2FsIG5hdHVyZSBpcyByZW1vdmVkLiBcblx0ICAgICAgICBsYXlvdXROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnJhZGl1cyA9IGQucjsgfSk7XG5cdCAgICAgICAgdmFyIG5vZGVzU2VsZWN0aW9uID0gdGhpcy5zdmdcblx0ICAgICAgICAgICAgLnNlbGVjdEFsbChcIi5ub2RlXCIpXG5cdCAgICAgICAgICAgIC5kYXRhKGxheW91dE5vZGVzKVxuXHQgICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG5cdCAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJub2RlXCIpXG5cdCAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zbGF0ZU5vZGVUb0JvcmRlcik7XG5cdCAgICAgICAgdGhpcy5hZGRUaXRsZShub2Rlc1NlbGVjdGlvbik7XG5cdCAgICAgICAgdGhpcy5hZGRDaXJjbGUobm9kZXNTZWxlY3Rpb24pO1xuXHQgICAgICAgIHRoaXMuYWRkTGFiZWwobm9kZXNTZWxlY3Rpb24pO1xuXHQgICAgICAgIHRoaXMudHJhbnNsYXRlVG9DZW50ZXIobm9kZXNTZWxlY3Rpb24pO1xuXHQgICAgfTtcblx0ICAgIE5vZGVIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZS50cmFuc2xhdGVUb0NlbnRlciA9IGZ1bmN0aW9uIChub2Rlc1NlbGVjdGlvbikge1xuXHQgICAgICAgIG5vZGVzU2VsZWN0aW9uLnRyYW5zaXRpb24oKVxuXHQgICAgICAgICAgICAuZHVyYXRpb24oMjAwMClcblx0ICAgICAgICAgICAgLmVhc2UoXCJjdWJpYy1pbi1vdXRcIilcblx0ICAgICAgICAgICAgLmRlbGF5KGZ1bmN0aW9uIChkLCBpKSB7IHJldHVybiBpICogMjAgKiBNYXRoLnJhbmRvbSgpOyB9KVxuXHQgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIiwgXCIgKyBkLnkgKyBcIilcIjtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICBOb2RlSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUuYWRkQ2lyY2xlID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuXHQgICAgICAgIHNlbGVjdGlvbi5hcHBlbmQoXCJjaXJjbGVcIilcblx0ICAgICAgICAgICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnI7IH0pXG5cdCAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24gKGQsIGkpIHsgcmV0dXJuIFwibm9kZS1jb2xvci1cIiArICgoaSAlIDYpICsgMSk7IH0pO1xuXHQgICAgfTtcblx0ICAgIE5vZGVIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZS5hZGRUaXRsZSA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcblx0ICAgICAgICBzZWxlY3Rpb24uYXBwZW5kKFwidGl0bGVcIilcblx0ICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSArIFwiOiBcIiArIGQudmFsdWU7IH0pO1xuXHQgICAgfTtcblx0ICAgIE5vZGVIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZS5hZGRMYWJlbCA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcblx0ICAgICAgICAvLyBBIGZvcmVpZ25PamVjdCBpcyBhZGRlZCBoZXJlIGluc3RlYWQgb2YganVzdCB1c2luZyBTVkcgdGV4dC4gXG5cdCAgICAgICAgLy8gU1ZHIHRleHQgZG9lcyBub3Qgc3VwcG9ydCB3b3JkIHdyYXAgaW4gYW55IGNsZWFuIHdheSBhdGxlYXN0LiBcblx0ICAgICAgICAvLyBVc2luZyBmb3JlaWduT2JqZWN0IGRpdiBhbmQgcCdzIGNhbiBiZSBpbnNlcnRlZCBcblx0ICAgICAgICAvLyBhbmQgQ1NTIGNhbiBlbnN1cmUgdGhlIGFyZSBwbGFjZWQgcHJvcGVybHkuIFxuXHQgICAgICAgIHNlbGVjdGlvbi5hcHBlbmQoXCJmb3JlaWduT2JqZWN0XCIpXG5cdCAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuciAqIDI7IH0pXG5cdCAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnIgKiAyOyB9KVxuXHQgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gKFwidHJhbnNsYXRlKFwiICsgLWQuciArIFwiLFwiICsgLWQuciArIFwiKVwiKTsgfSlcblx0ICAgICAgICAgICAgLmFwcGVuZChcInhodG1sOmRpdlwiKVxuXHQgICAgICAgICAgICAuYXBwZW5kKFwieGh0bWw6cFwiKVxuXHQgICAgICAgICAgICAuaHRtbChmdW5jdGlvbiAoZCkgeyByZXR1cm4gdXRpbHNfMS5zaG9ydGVuVG9XaXRoaW5SYWRpdXMoZC5yLCBkLm5hbWUpOyB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gTm9kZUhpZXJhcmNoeUVsZW1lbnQ7XG5cdH0oYmFzZV9lbGVtZW50XzEuQmFzZUVsZW1lbnQpKTtcblx0ZXhwb3J0cy5Ob2RlSGllcmFyY2h5RWxlbWVudCA9IE5vZGVIaWVyYXJjaHlFbGVtZW50O1xuXG5cbi8qKiovIH0sXG4vKiAyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBkMyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIGVsZW1lbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0dmFyIHJlcG9zaXRvcmllc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdHZhciBWaXN1YWxpemVyID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFZpc3VhbGl6ZXIoX21hbmFnZXIsIGNvbmZpZykge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgICAgICAgdGhpcy5fbWFuYWdlciA9IF9tYW5hZ2VyO1xuXHQgICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHQgICAgICAgIHRoaXMub25TZWxlY3RvckNoYW5nZWQgPSBmdW5jdGlvbiAocHJpbWFyeSwgc2Vjb25kYXJ5KSB7XG5cdCAgICAgICAgICAgIGlmIChfdGhpcy5fbm9kZUhpZXJhcmNoeSkge1xuXHQgICAgICAgICAgICAgICAgX3RoaXMuX25vZGVIaWVyYXJjaHkuY2xlYW4oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBfdGhpcy5zZXRJc0xvYWRpbmcodHJ1ZSk7XG5cdCAgICAgICAgICAgIF90aGlzLl9yZXBvc2l0b3J5LmdldEdyb3VwcyhwcmltYXJ5LCBzZWNvbmRhcnkpXG5cdCAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZ3JvdXBzKSB7XG5cdCAgICAgICAgICAgICAgICBfdGhpcy5zZXREYXRhKGdyb3Vwcyk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdGhpcy5fcmVwb3NpdG9yeSA9IG5ldyByZXBvc2l0b3JpZXNfMS5Tb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5KCk7XG5cdCAgICB9XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlzdWFsaXplci5wcm90b3R5cGUsIFwidGFyZ2V0SWRcIiwge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcudGFyZ2V0SWQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy50YXJnZXRJZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gXCIudmlzdWFsaXplclwiO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdCAgICAgKiBEcmF3cyB0aGUgYm9hcmQgYW5kIGluaXRpYWxpc2VkIHJlbGF0ZWQgY29tcG9uZW50cy5cblx0ICAgICAqIERyYXcgaXMgZGVmaW5lZCBlbHNld2hlcmUgYXMgaXQgZW5zdXJlcyB0aGUgY2xhc3MgY2FuIGJlIGNvbnN0cnVjdGVkIHByaW9yIHRvIGFjdHVhbGx5IGJlIHNob3duLlxuXHQgICAgICogZHJhdygpIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIHNldERhdGEgdG8gc2hvdyBsb2FkaW5nIHdoaWxlIGRhdGEgaXMgYmVpbmcgZmV0Y2hlZFxuXHQgICAgICogKi9cblx0ICAgIFZpc3VhbGl6ZXIucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICB0aGlzLl9yZXBvc2l0b3J5LmdldFNlbGVjdG9ycygpLnRoZW4oZnVuY3Rpb24gKHNlbGVjdG9ycykge1xuXHQgICAgICAgICAgICBpZiAoIXNlbGVjdG9ycyB8fCBzZWxlY3RvcnMubGVuZ3RoID09IDApIHtcblx0ICAgICAgICAgICAgICAgIGxvZy5lcnJvcihcIk5vIHNlbGVjdG9ycyBmb3VuZFwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBfdGhpcy5vblNlbGVjdG9yQ2hhbmdlZCh7IHF1ZXJ5OiBzZWxlY3RvcnNbMF0ucXVlcnkgfSwgeyBxdWVyeTogc2VsZWN0b3JzWzBdLmNoaWxkcmVuWzBdLnF1ZXJ5IH0pO1xuXHQgICAgICAgICAgICBfdGhpcy5fbWFuYWdlci5zZXRTZWxlY3RvcnMoc2VsZWN0b3JzKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB2YXIgdGFyZ2V0ID0gZDMuc2VsZWN0KHRoaXMudGFyZ2V0SWQpO1xuXHQgICAgICAgIHRoaXMuX3N2ZyA9IHRhcmdldC5hcHBlbmQoXCJzdmdcIilcblx0ICAgICAgICAgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAwIFwiICsgJCh0aGlzLnRhcmdldElkKS53aWR0aCgpICsgXCIgXCIgKyAkKHRoaXMudGFyZ2V0SWQpLmhlaWdodCgpKTtcblx0ICAgICAgICB0aGlzLl9sb2FkZXIgPSBuZXcgZWxlbWVudHNfMS5TdGFuZGFyZExvYWRlcih0aGlzLl9zdmcpO1xuXHQgICAgICAgIHRoaXMuc2V0SXNMb2FkaW5nKHRydWUpO1xuXHQgICAgICAgIHZhciBjb25maWcgPSB7XG5cdCAgICAgICAgICAgIG1pbmltdW1WYWx1ZTogMlxuXHQgICAgICAgIH07XG5cdCAgICAgICAgLy8gQm9vdHN0cmFwIHdpdGggZGVmYXVsdCBkYXRhXG5cdCAgICAgICAgdGhpcy5fbWFuYWdlci5zZXRPblNlbGVjdG9yc0NhbGxiYWNrKHRoaXMub25TZWxlY3RvckNoYW5nZWQpO1xuXHQgICAgICAgIHRoaXMuX25vZGVIaWVyYXJjaHkgPSBuZXcgZWxlbWVudHNfMS5Ob2RlSGllcmFyY2h5RWxlbWVudCh0aGlzLl9zdmcsIGNvbmZpZyk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBTZXRzIGRhdGEgYW5kIHNob3dzIGl0IG9uIHRoZSBzY3JlZW4uXG5cdCAgICAgKiAgQHBhcmFtIHtib29sZWFufSBpc0xvYWRpbmdcblx0ICAgICAqL1xuXHQgICAgVmlzdWFsaXplci5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLl9ub2RlSGllcmFyY2h5KSB7XG5cdCAgICAgICAgICAgIC8vIElmIHRoZSBfbm9kZUhpZXJhcmNoeSBpcyBub3QgY3JlYXRlZCBkcmF3IGhhcyBub3QgYmVlbiBjYWxsZWRcblx0ICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc2V0SXNMb2FkaW5nKGZhbHNlKTtcblx0ICAgICAgICB0aGlzLl9ub2RlSGllcmFyY2h5LmRhdGEgPSBkYXRhO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogU2V0IHdoZXRoZXIgb3Igbm90IGEgbG9hZGVyIHNob3VsZCBiZSBzaG93bi5cblx0ICAgICAqICBAcGFyYW0ge2Jvb2xlYW59IGlzTG9hZGluZ1xuXHQgICAgICovXG5cdCAgICBWaXN1YWxpemVyLnByb3RvdHlwZS5zZXRJc0xvYWRpbmcgPSBmdW5jdGlvbiAoaXNMb2FkaW5nKSB7XG5cdCAgICAgICAgaWYgKGlzTG9hZGluZykge1xuXHQgICAgICAgICAgICB0aGlzLl9sb2FkZXIuc3RhcnRMb2FkZXIoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xvYWRlci5zdG9wTG9hZGVyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBWaXN1YWxpemVyO1xuXHR9KCkpO1xuXHRleHBvcnRzLlZpc3VhbGl6ZXIgPSBWaXN1YWxpemVyO1xuXG5cbi8qKiovIH0sXG4vKiAyNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcblx0ICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcblx0fVxuXHRfX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KSk7XG5cblxuLyoqKi8gfSxcbi8qIDI2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblx0dmFyIGxvZ01hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgdXRpbHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBsb2cgPSBsb2dNYW5hZ2VyLmdldExvZ2dlcihcIm1vdmllLWxvY2F0aW9uLXJlcG9cIik7XG5cdHZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0LyoqXG5cdCAqIFRoZSBJbk1lbW9yeUZpbG1Mb2NhdGlvbiByZXBvc2l0b3J5IGZldGNoZXMgdGhlIGVudGlyZSBkYXRhIHNldCB1cCBmcm9udCBhbmQgc3RvcmVzIGl0IGluIG1lbW9yeS5cblx0ICogRm9yIHNtYWxsZXIgZGF0YSBzZXRzIHRoaXMgaXMgc3VmZmljaWVudCwgYnV0IGZvciBsYXJnZXIgaXQgaXMgbm90XG5cdCAqL1xuXHR2YXIgU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5KCkge1xuXHQgICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG5cdCAgICAgICAgdGhpcy51cmwgPSAnaHR0cHM6Ly9kYXRhLnNmZ292Lm9yZy9yZXNvdXJjZS93d211LWdtemMuanNvbic7XG5cdCAgICB9XG5cdCAgICBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5LnByb3RvdHlwZS5nZXRHcm91cHMgPSBmdW5jdGlvbiAocHJpbWFyeSwgc2Vjb25kYXJ5KSB7XG5cdCAgICAgICAgLy8gQSBtYXBwZXIgaXMgY3JlYXRlZC4gSXQgY29udmVydHMgdGhlIHJlc3VsdCBmcm9tIHRoZSBhcGkgdG8gYW4gYXJyYXkgb2YgSUdyb3VwXG5cdCAgICAgICAgdmFyIG1hcHBlciA9IHV0aWxzXzEuZ3JvdXBNYXBwZXJGYWN0b3J5KHByaW1hcnkucXVlcnksIFwiQ09VTlRfXCIgKyBzZWNvbmRhcnkucXVlcnkpO1xuXHQgICAgICAgIC8vIElmIG5laXRoZXIgc2VsZWN0b3IgaXMgdGhlIGxvY2F0aW9uIHdlIG5lZWQgYSBtb3JlIGFkdmFuY2VkIHF1ZXJ5IGFzIHdlIHdvdWxkIG90aGVyIHdpc2UgZ2V0IFxuXHQgICAgICAgIC8vIHZlcnkgbWlzbGVhZGluZyByZXN1bHRzIChvciBzaW1wbHkgcGxhaW4gd3JvbmcgcmVzdWx0cylcblx0ICAgICAgICAvLyBlLmcuIGlmIHByaW1hcnkgPSBwcm9kdWN0aW9uX2NvbXBhbnkgYW5kIHNlY29uZGFyeSA9IHdyaXRlciBpdCB3aWxsIHNob3cgdGhlIG51bWJlciBvZiBsb2NhdGlvbnMgXG5cdCAgICAgICAgLy8gdGhhdCBwcm9kdWN0aW9uIGNvbXBhbnkgaGFzIHVzZWQgdGhhdCB3cml0ZXIgbm90IGJhc2VkIG9uIG51bWJlciBvZiBmaWxtcyBcblx0ICAgICAgICBpZiAocHJpbWFyeS5xdWVyeSAhPT0gXCJsb2NhdGlvbnNcIiAmJiBzZWNvbmRhcnkucXVlcnkgIT09IFwibG9jYXRpb25zXCIpIHtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2godGhpcy51cmwgKyBcIj8kZ3JvdXA9XCIgKyBwcmltYXJ5LnF1ZXJ5ICsgXCImJHNlbGVjdD1cIiArIHByaW1hcnkucXVlcnkgKyBcIixDT1VOVChcIiArIHNlY29uZGFyeS5xdWVyeSArIFwiKVwiKVxuXHQgICAgICAgICAgICAudGhlbihtYXBwZXIpO1xuXHQgICAgfTtcblx0ICAgIFNvZGFGaWxtTG9jYXRpb1JlcG9zaXRvcnkucHJvdG90eXBlLmdldEF2YW5jZWRHcm91cHMgPSBmdW5jdGlvbiAocHJpbWFyeSwgc2Vjb25kYXJ5LCBtYXBwZXIpIHtcblx0ICAgICAgICB2YXIgcXVlcnkgPSBcIlNFTEVDVCBcIiArIHByaW1hcnkucXVlcnkgKyBcIiwgY291bnQoKikgXFxuICAgICAgICAgICAgICAgICAgICAgR1JPVVAgQlkgXCIgKyBzZWNvbmRhcnkucXVlcnkgKyBcIiwgXCIgKyBwcmltYXJ5LnF1ZXJ5ICsgXCIgfD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VMRUNUIFwiICsgcHJpbWFyeS5xdWVyeSArIFwiLCBDT1VOVCgqKSBBUyBjb3VudCBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR1JPVVAgQlkgXCIgKyBwcmltYXJ5LnF1ZXJ5O1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZldGNoKHRoaXMudXJsICsgXCI/JHF1ZXJ5XCIgKyBxdWVyeSlcblx0ICAgICAgICAgICAgLnRoZW4obWFwcGVyKTtcblx0ICAgIH07XG5cdCAgICBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5LnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uIChxdWVyeSkge1xuXHQgICAgICAgIHJldHVybiBmZXRjaChxdWVyeSlcblx0ICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZS5qc29uKCk7IH0pO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogR2V0cyB0aGUgcG9zc2libGUgc2VsZWN0b3JzLlxuXHQgICAgICogVGhlc2UgYXJlIGhhcmRjb2RlZCBmb3Igbm93LCBidXQgc2hvdWxkIHByZWZlcmFibHkgYmUgZmV0Y2hlZCBmcm9tIHRoZSBBUElcblx0ICAgICAqL1xuXHQgICAgU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeS5wcm90b3R5cGUuZ2V0U2VsZWN0b3JzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciB0aXRsZVNlbGVjdG9yID0ge1xuXHQgICAgICAgICAgICBsYWJlbDogXCJNb3ZpZVwiLFxuXHQgICAgICAgICAgICBxdWVyeTogXCJ0aXRsZVwiXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB2YXIgbG9jYXRpb25zU2VsZWN0b3IgPSB7XG5cdCAgICAgICAgICAgIGxhYmVsOiBcIkxvY2F0aW9uc1wiLFxuXHQgICAgICAgICAgICBxdWVyeTogXCJsb2NhdGlvbnNcIlxuXHQgICAgICAgIH07XG5cdCAgICAgICAgdmFyIHdyaXRlclNlbGVjdG9yID0ge1xuXHQgICAgICAgICAgICBsYWJlbDogXCJXcml0ZXJcIixcblx0ICAgICAgICAgICAgcXVlcnk6IFwid3JpdGVyXCJcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHZhciBkaXJlY3RvclNlbGVjdG9yID0ge1xuXHQgICAgICAgICAgICBsYWJlbDogXCJEaXJlY3RvclwiLFxuXHQgICAgICAgICAgICBxdWVyeTogXCJkaXJlY3RvclwiXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB2YXIgcHJvZHVjdGlvbkNvbXBhbnkgPSB7XG5cdCAgICAgICAgICAgIGxhYmVsOiBcIlByb2R1Y3Rpb24gQ29tcGFueVwiLFxuXHQgICAgICAgICAgICBxdWVyeTogXCJwcm9kdWN0aW9uX2NvbXBhbnlcIlxuXHQgICAgICAgIH07XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSBbXG5cdCAgICAgICAgICAgICAgICAkLmV4dGVuZCh0aXRsZVNlbGVjdG9yLCB7IGNoaWxkcmVuOiBbbG9jYXRpb25zU2VsZWN0b3JdIH0pLFxuXHQgICAgICAgICAgICAgICAgJC5leHRlbmQobG9jYXRpb25zU2VsZWN0b3IsIHsgY2hpbGRyZW46IFt0aXRsZVNlbGVjdG9yXSB9KSxcblx0ICAgICAgICAgICAgICAgICQuZXh0ZW5kKHdyaXRlclNlbGVjdG9yLCB7IGNoaWxkcmVuOiBbdGl0bGVTZWxlY3RvciwgbG9jYXRpb25zU2VsZWN0b3IsIGRpcmVjdG9yU2VsZWN0b3IsIHByb2R1Y3Rpb25Db21wYW55XSB9KSxcblx0ICAgICAgICAgICAgICAgICQuZXh0ZW5kKGRpcmVjdG9yU2VsZWN0b3IsIHsgY2hpbGRyZW46IFt0aXRsZVNlbGVjdG9yLCBsb2NhdGlvbnNTZWxlY3Rvciwgd3JpdGVyU2VsZWN0b3IsIHByb2R1Y3Rpb25Db21wYW55XSB9KSxcblx0ICAgICAgICAgICAgICAgICQuZXh0ZW5kKHByb2R1Y3Rpb25Db21wYW55LCB7IGNoaWxkcmVuOiBbdGl0bGVTZWxlY3RvciwgbG9jYXRpb25zU2VsZWN0b3IsIHdyaXRlclNlbGVjdG9yLCBkaXJlY3RvclNlbGVjdG9yXSB9KSxcblx0ICAgICAgICAgICAgXTtcblx0ICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeTtcblx0fSgpKTtcblx0ZXhwb3J0cy5Tb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5ID0gU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeTtcblxuXG4vKioqLyB9LFxuLyogMjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRleHBvcnRzLmdyb3VwTWFwcGVyRmFjdG9yeSA9IGZ1bmN0aW9uIChuYW1lTGFiZWwsIHZhbHVlTGFiZWwpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudHMpIHtcblx0ICAgICAgICByZXR1cm4gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbGVtKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICBuYW1lOiBlbGVtW25hbWVMYWJlbF0sXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogK2VsZW1bdmFsdWVMYWJlbF1cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHRha2VzIHRoZSByYWRpdXMgb2YgdGhlIGNpcmNsZSBhbmQgdGhlIHRleHQgYW5kIGF0dGVtcHRzIHRvXG5cdCAqIHNob3J0ZW4gdGhlIHRleHQgc3VjaCB0aGF0IGl0IGZpdHMgd2l0aGluIHRoZSBjaXJjbGUuXG5cdCAqIFRoZSBtZXRob2QgY291bGQgdXNlIGFuIG92ZXJoYXVsIGFuZCB0YWtlIHRoZSBmb250IHNpemUgYXMgaW5wdXQuXG5cdCAqIE9yIGJldHRlciBpdCBzaG91bGQgdHJ5IGFuZCBjYWxjdWxhdGUgdGhlIHNpemUgYW5kIHRoZW4gZml0IHdvcmRzIGludG8gdG8gZWFjaCBsaW5lXG5cdCAqIHN1Y2ggdGhhdCB0aGV5IGZvcm0gYSBjaXJjbGUuXG5cdCAqL1xuXHRleHBvcnRzLnNob3J0ZW5Ub1dpdGhpblJhZGl1cyA9IGZ1bmN0aW9uIChyYWRpdXMsIHRleHQpIHtcblx0ICAgIHZhciBtYXhXaWR0aCA9IHJhZGl1cyAvIDMuMTtcblx0ICAgIHZhciBsaW5lcyA9IHJhZGl1cyAvIDEwO1xuXHQgICAgdGV4dCA9IHRleHQuc3BsaXQoL1xccysvZykubWFwKGZ1bmN0aW9uIChzKSB7XG5cdCAgICAgICAgaWYgKHMubGVuZ3RoID49IG1heFdpZHRoKSB7XG5cdCAgICAgICAgICAgIHZhciBtYXJnaW4gPSAyO1xuXHQgICAgICAgICAgICByZXR1cm4gcy5zdWJzdHIoMCwgbWF4V2lkdGggLSBtYXJnaW4pICtcblx0ICAgICAgICAgICAgICAgIFwiLTxicj5cIiArXG5cdCAgICAgICAgICAgICAgICBzLnN1YnN0cihtYXhXaWR0aCAtIG1hcmdpbiArIDEsIHMubGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHM7XG5cdCAgICB9KS5qb2luKFwiIFwiKTtcblx0ICAgIGlmICh0ZXh0ICYmIHRleHQubGVuZ3RoID4gbWF4V2lkdGggKiBsaW5lcykge1xuXHQgICAgICAgIHZhciBzdWJzdHIgPSB0ZXh0LnN1YnN0cigwLCBtYXhXaWR0aCAtIDMpO1xuXHQgICAgICAgIGlmIChzdWJzdHIubGVuZ3RoIDwgNSkge1xuXHQgICAgICAgICAgICByZXR1cm4gXCJcIjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHN1YnN0ciArIFwiJmhlbGxpcDtcIjtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0ZXh0O1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGV4cG9ydHMudHJhbnNsYXRlVG9Cb3JkZXJGYWN0b3J5ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoZCkge1xuXHQgICAgICAgIHZhciBjeCA9IHdpZHRoIC8gMjtcblx0ICAgICAgICB2YXIgY3kgPSBoZWlnaHQgLyAyO1xuXHQgICAgICAgIHZhciB4Q2VudGVyRGlzdGFuY2UgPSAoZC54IC0gY3gpO1xuXHQgICAgICAgIHZhciB5Q2VudGVyRGlzdGFuY2UgPSAoZC55IC0gY3kpO1xuXHQgICAgICAgIHZhciBjbG9zZXRzWEJvcmRlciA9IHhDZW50ZXJEaXN0YW5jZSA8IDAgPyAwIDogd2lkdGg7XG5cdCAgICAgICAgdmFyIGNsb3NldHNZQm9yZGVyID0geUNlbnRlckRpc3RhbmNlIDwgMCA/IDAgOiBoZWlnaHQ7XG5cdCAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyAoaGVpZ2h0ICsgZC5yKSArIFwiKVwiO1xuXHQgICAgfTtcblx0fTtcblxuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBidW5kbGUubWluLmpzXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCBkYTI4NzBiNzdhZTEwNThkOWY0YVxuICoqLyIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4xLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOS0yMlQyMjozMFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0fVxuXG5cdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRcdHJlc29sdmUuY2FsbCggdW5kZWZpbmVkLCB2YWx1ZSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5jYWxsKCB1bmRlZmluZWQsIHZhbHVlICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSxcblx0XHR2YWwgPSAwO1xuXG5cdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRpZiAoIGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0aSA9IDQ7XG5cblx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHR9IGVsc2Uge1xuXHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuXHR2YXIgdmFsLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdGlmICggZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHR2YWwgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpWyBuYW1lIF07XG5cdH1cblxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHJhZigpIHtcblx0aWYgKCB0aW1lcklkICkge1xuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJhZiApO1xuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmIG9yIGlmIGRvY3VtZW50IGlzIGhpZGRlblxuXHRpZiAoIGpRdWVyeS5meC5vZmYgfHwgZG9jdW1lbnQuaGlkZGVuICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCByYWYgKSA6XG5cdFx0XHR3aW5kb3cuc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aWYgKCB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKCB0aW1lcklkICk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcblx0fVxuXG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLCByZWN0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGVsZW1lbnQgaXMgbm90IGhpZGRlbiAoZGlzcGxheTogbm9uZSlcblx0XHRpZiAoIHJlY3Qud2lkdGggfHwgcmVjdC5oZWlnaHQgKSB7XG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0cmV0dXJuIHJlY3Q7XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0bGVmdDogcGFyZW50T2Zmc2V0LmxlZnQgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2pxdWVyeS9kaXN0L2pxdWVyeS5qc1xuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXG4qIGxvZ2xldmVsIC0gaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsXG4qXG4qIENvcHlyaWdodCAoYykgMjAxMyBUaW0gUGVycnlcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuKi9cbihmdW5jdGlvbiAocm9vdCwgZGVmaW5pdGlvbikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKGRlZmluaXRpb24pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5sb2cgPSBkZWZpbml0aW9uKCk7XG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuICAgIHZhciB1bmRlZmluZWRUeXBlID0gXCJ1bmRlZmluZWRcIjtcblxuICAgIGZ1bmN0aW9uIHJlYWxNZXRob2QobWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gV2UgY2FuJ3QgYnVpbGQgYSByZWFsIG1ldGhvZCB3aXRob3V0IGEgY29uc29sZSB0byBsb2cgdG9cbiAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlW21ldGhvZE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsIG1ldGhvZE5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGUubG9nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsICdsb2cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub29wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmluZE1ldGhvZChvYmosIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9ialttZXRob2ROYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QuYmluZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5iaW5kKG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKG1ldGhvZCwgb2JqKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KG1ldGhvZCwgW29iaiwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRoZXNlIHByaXZhdGUgZnVuY3Rpb25zIGFsd2F5cyBuZWVkIGB0aGlzYCB0byBiZSBzZXQgcHJvcGVybHlcblxuICAgIGZ1bmN0aW9uIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMsIGxldmVsLCBsb2dnZXJOYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUxvZ2dpbmdNZXRob2RzKGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9nTWV0aG9kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSBsb2dNZXRob2RzW2ldO1xuICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IChpIDwgbGV2ZWwpID9cbiAgICAgICAgICAgICAgICBub29wIDpcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdE1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgcmV0dXJuIHJlYWxNZXRob2QobWV0aG9kTmFtZSkgfHxcbiAgICAgICAgICAgICAgIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICB2YXIgbG9nTWV0aG9kcyA9IFtcbiAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICBcImRlYnVnXCIsXG4gICAgICAgIFwiaW5mb1wiLFxuICAgICAgICBcIndhcm5cIixcbiAgICAgICAgXCJlcnJvclwiXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIExvZ2dlcihuYW1lLCBkZWZhdWx0TGV2ZWwsIGZhY3RvcnkpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBjdXJyZW50TGV2ZWw7XG4gICAgICB2YXIgc3RvcmFnZUtleSA9IFwibG9nbGV2ZWxcIjtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHN0b3JhZ2VLZXkgKz0gXCI6XCIgKyBuYW1lO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsTnVtKSB7XG4gICAgICAgICAgdmFyIGxldmVsTmFtZSA9IChsb2dNZXRob2RzW2xldmVsTnVtXSB8fCAnc2lsZW50JykudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XSA9IGxldmVsTmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPVxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiICsgbGV2ZWxOYW1lICsgXCI7XCI7XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRMZXZlbCgpIHtcbiAgICAgICAgICB2YXIgc3RvcmVkTGV2ZWw7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV07XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZWRMZXZlbCA9PT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IHdpbmRvdy5kb2N1bWVudC5jb29raWU7XG4gICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjb29raWUuaW5kZXhPZihcbiAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIik7XG4gICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IC9eKFteO10rKS8uZXhlYyhjb29raWUuc2xpY2UobG9jYXRpb24pKVsxXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZSBzdG9yZWQgbGV2ZWwgaXMgbm90IHZhbGlkLCB0cmVhdCBpdCBhcyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG4gICAgICAgICAgaWYgKHNlbGYubGV2ZWxzW3N0b3JlZExldmVsXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHN0b3JlZExldmVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdG9yZWRMZXZlbDtcbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqXG4gICAgICAgKiBQdWJsaWMgQVBJXG4gICAgICAgKlxuICAgICAgICovXG5cbiAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxuICAgICAgICAgIFwiRVJST1JcIjogNCwgXCJTSUxFTlRcIjogNX07XG5cbiAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XG5cbiAgICAgIHNlbGYuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRMZXZlbDtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwsIHBlcnNpc3QpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcInN0cmluZ1wiICYmIHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgbGV2ZWwgPSBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJudW1iZXJcIiAmJiBsZXZlbCA+PSAwICYmIGxldmVsIDw9IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgICAgaWYgKHBlcnNpc3QgIT09IGZhbHNlKSB7ICAvLyBkZWZhdWx0cyB0byB0cnVlXG4gICAgICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmLCBsZXZlbCwgbmFtZSk7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSAmJiBsZXZlbCA8IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gY29uc29sZSBhdmFpbGFibGUgZm9yIGxvZ2dpbmdcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IFwibG9nLnNldExldmVsKCkgY2FsbGVkIHdpdGggaW52YWxpZCBsZXZlbDogXCIgKyBsZXZlbDtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNldERlZmF1bHRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgIGlmICghZ2V0UGVyc2lzdGVkTGV2ZWwoKSkge1xuICAgICAgICAgICAgICBzZWxmLnNldExldmVsKGxldmVsLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5UUkFDRSwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQsIHBlcnNpc3QpO1xuICAgICAgfTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIHRoZSByaWdodCBsZXZlbFxuICAgICAgdmFyIGluaXRpYWxMZXZlbCA9IGdldFBlcnNpc3RlZExldmVsKCk7XG4gICAgICBpZiAoaW5pdGlhbExldmVsID09IG51bGwpIHtcbiAgICAgICAgICBpbml0aWFsTGV2ZWwgPSBkZWZhdWx0TGV2ZWwgPT0gbnVsbCA/IFwiV0FSTlwiIDogZGVmYXVsdExldmVsO1xuICAgICAgfVxuICAgICAgc2VsZi5zZXRMZXZlbChpbml0aWFsTGV2ZWwsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqXG4gICAgICogUGFja2FnZS1sZXZlbCBBUElcbiAgICAgKlxuICAgICAqL1xuXG4gICAgdmFyIGRlZmF1bHRMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbiAgICB2YXIgX2xvZ2dlcnNCeU5hbWUgPSB7fTtcbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlciA9IGZ1bmN0aW9uIGdldExvZ2dlcihuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIiB8fCBuYW1lID09PSBcIlwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV07XG4gICAgICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICAgICAgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV0gPSBuZXcgTG9nZ2VyKFxuICAgICAgICAgICAgbmFtZSwgZGVmYXVsdExvZ2dlci5nZXRMZXZlbCgpLCBkZWZhdWx0TG9nZ2VyLm1ldGhvZEZhY3RvcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfTtcblxuICAgIC8vIEdyYWIgdGhlIGN1cnJlbnQgZ2xvYmFsIGxvZyB2YXJpYWJsZSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuICAgIHZhciBfbG9nID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpID8gd2luZG93LmxvZyA6IHVuZGVmaW5lZDtcbiAgICBkZWZhdWx0TG9nZ2VyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiZcbiAgICAgICAgICAgICAgIHdpbmRvdy5sb2cgPT09IGRlZmF1bHRMb2dnZXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2cgPSBfbG9nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xufSkpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vbG9nbGV2ZWwvbGliL2xvZ2xldmVsLmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiIWZ1bmN0aW9uKCkge1xuICB2YXIgZDMgPSB7XG4gICAgdmVyc2lvbjogXCIzLjUuMTdcIlxuICB9O1xuICB2YXIgZDNfYXJyYXlTbGljZSA9IFtdLnNsaWNlLCBkM19hcnJheSA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICByZXR1cm4gZDNfYXJyYXlTbGljZS5jYWxsKGxpc3QpO1xuICB9O1xuICB2YXIgZDNfZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50O1xuICBmdW5jdGlvbiBkM19kb2N1bWVudEVsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlICYmIChub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZS5kb2N1bWVudCB8fCBub2RlKS5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfd2luZG93KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSAmJiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCBub2RlLmRvY3VtZW50ICYmIG5vZGUgfHwgbm9kZS5kZWZhdWx0Vmlldyk7XG4gIH1cbiAgaWYgKGQzX2RvY3VtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIGQzX2FycmF5KGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jaGlsZE5vZGVzKVswXS5ub2RlVHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkM19hcnJheSA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICAgICAgdmFyIGkgPSBsaXN0Lmxlbmd0aCwgYXJyYXkgPSBuZXcgQXJyYXkoaSk7XG4gICAgICAgIHdoaWxlIChpLS0pIGFycmF5W2ldID0gbGlzdFtpXTtcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKCFEYXRlLm5vdykgRGF0ZS5ub3cgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gK25ldyBEYXRlKCk7XG4gIH07XG4gIGlmIChkM19kb2N1bWVudCkge1xuICAgIHRyeSB7XG4gICAgICBkM19kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLnN0eWxlLnNldFByb3BlcnR5KFwib3BhY2l0eVwiLCAwLCBcIlwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdmFyIGQzX2VsZW1lbnRfcHJvdG90eXBlID0gdGhpcy5FbGVtZW50LnByb3RvdHlwZSwgZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGUgPSBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGUsIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlTlMgPSBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGVOUywgZDNfc3R5bGVfcHJvdG90eXBlID0gdGhpcy5DU1NTdHlsZURlY2xhcmF0aW9uLnByb3RvdHlwZSwgZDNfc3R5bGVfc2V0UHJvcGVydHkgPSBkM19zdHlsZV9wcm90b3R5cGUuc2V0UHJvcGVydHk7XG4gICAgICBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgICBkM19lbGVtZW50X3NldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlICsgXCJcIik7XG4gICAgICB9O1xuICAgICAgZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMgPSBmdW5jdGlvbihzcGFjZSwgbG9jYWwsIHZhbHVlKSB7XG4gICAgICAgIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlTlMuY2FsbCh0aGlzLCBzcGFjZSwgbG9jYWwsIHZhbHVlICsgXCJcIik7XG4gICAgICB9O1xuICAgICAgZDNfc3R5bGVfcHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgICAgIGQzX3N0eWxlX3NldFByb3BlcnR5LmNhbGwodGhpcywgbmFtZSwgdmFsdWUgKyBcIlwiLCBwcmlvcml0eSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBkMy5hc2NlbmRpbmcgPSBkM19hc2NlbmRpbmc7XG4gIGZ1bmN0aW9uIGQzX2FzY2VuZGluZyhhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xuICB9XG4gIGQzLmRlc2NlbmRpbmcgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xuICB9O1xuICBkMy5taW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGEsIGI7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGEgPiBiKSBhID0gYjtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYSA+IGIpIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfTtcbiAgZDMubWF4ID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBiO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+PSBiKSB7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID4gYSkgYSA9IGI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPiBhKSBhID0gYjtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH07XG4gIGQzLmV4dGVudCA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgYiwgYztcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICBhID0gYyA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhID4gYikgYSA9IGI7XG4gICAgICAgIGlmIChjIDwgYikgYyA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGMgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuICAgICAgICBpZiAoYyA8IGIpIGMgPSBiO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWyBhLCBjIF07XG4gIH07XG4gIGZ1bmN0aW9uIGQzX251bWJlcih4KSB7XG4gICAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbiAgfVxuICBmdW5jdGlvbiBkM19udW1lcmljKHgpIHtcbiAgICByZXR1cm4gIWlzTmFOKHgpO1xuICB9XG4gIGQzLnN1bSA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIHMgPSAwLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBpID0gLTE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gK2FycmF5W2ldKSkgcyArPSBhO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9ICtmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpIHMgKz0gYTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG4gIH07XG4gIGQzLm1lYW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBzID0gMCwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgaSA9IC0xLCBqID0gbjtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkgcyArPSBhOyBlbHNlIC0tajtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSkgcyArPSBhOyBlbHNlIC0tajtcbiAgICB9XG4gICAgaWYgKGopIHJldHVybiBzIC8gajtcbiAgfTtcbiAgZDMucXVhbnRpbGUgPSBmdW5jdGlvbih2YWx1ZXMsIHApIHtcbiAgICB2YXIgSCA9ICh2YWx1ZXMubGVuZ3RoIC0gMSkgKiBwICsgMSwgaCA9IE1hdGguZmxvb3IoSCksIHYgPSArdmFsdWVzW2ggLSAxXSwgZSA9IEggLSBoO1xuICAgIHJldHVybiBlID8gdiArIGUgKiAodmFsdWVzW2hdIC0gdikgOiB2O1xuICB9O1xuICBkMy5tZWRpYW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBudW1iZXJzID0gW10sIG4gPSBhcnJheS5sZW5ndGgsIGEsIGkgPSAtMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkgbnVtYmVycy5wdXNoKGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSBudW1iZXJzLnB1c2goYSk7XG4gICAgfVxuICAgIGlmIChudW1iZXJzLmxlbmd0aCkgcmV0dXJuIGQzLnF1YW50aWxlKG51bWJlcnMuc29ydChkM19hc2NlbmRpbmcpLCAuNSk7XG4gIH07XG4gIGQzLnZhcmlhbmNlID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgbiA9IGFycmF5Lmxlbmd0aCwgbSA9IDAsIGEsIGQsIHMgPSAwLCBpID0gLTEsIGogPSAwO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGFycmF5W2ldKSkpIHtcbiAgICAgICAgICBkID0gYSAtIG07XG4gICAgICAgICAgbSArPSBkIC8gKytqO1xuICAgICAgICAgIHMgKz0gZCAqIChhIC0gbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSB7XG4gICAgICAgICAgZCA9IGEgLSBtO1xuICAgICAgICAgIG0gKz0gZCAvICsrajtcbiAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChqID4gMSkgcmV0dXJuIHMgLyAoaiAtIDEpO1xuICB9O1xuICBkMy5kZXZpYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IGQzLnZhcmlhbmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xuICB9O1xuICBmdW5jdGlvbiBkM19iaXNlY3Rvcihjb21wYXJlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGxvID0gMDtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSBoaSA9IGEubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7IGVsc2UgaGkgPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvO1xuICAgICAgfSxcbiAgICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBsbyA9IDA7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7IGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsbztcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBkM19iaXNlY3QgPSBkM19iaXNlY3RvcihkM19hc2NlbmRpbmcpO1xuICBkMy5iaXNlY3RMZWZ0ID0gZDNfYmlzZWN0LmxlZnQ7XG4gIGQzLmJpc2VjdCA9IGQzLmJpc2VjdFJpZ2h0ID0gZDNfYmlzZWN0LnJpZ2h0O1xuICBkMy5iaXNlY3RvciA9IGZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gZDNfYmlzZWN0b3IoZi5sZW5ndGggPT09IDEgPyBmdW5jdGlvbihkLCB4KSB7XG4gICAgICByZXR1cm4gZDNfYXNjZW5kaW5nKGYoZCksIHgpO1xuICAgIH0gOiBmKTtcbiAgfTtcbiAgZDMuc2h1ZmZsZSA9IGZ1bmN0aW9uKGFycmF5LCBpMCwgaTEpIHtcbiAgICBpZiAoKG0gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDMpIHtcbiAgICAgIGkxID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKG0gPCAyKSBpMCA9IDA7XG4gICAgfVxuICAgIHZhciBtID0gaTEgLSBpMCwgdCwgaTtcbiAgICB3aGlsZSAobSkge1xuICAgICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgICAgdCA9IGFycmF5W20gKyBpMF0sIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdLCBhcnJheVtpICsgaTBdID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9O1xuICBkMy5wZXJtdXRlID0gZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSBwZXJtdXRlc1tpXSA9IGFycmF5W2luZGV4ZXNbaV1dO1xuICAgIHJldHVybiBwZXJtdXRlcztcbiAgfTtcbiAgZDMucGFpcnMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciBpID0gMCwgbiA9IGFycmF5Lmxlbmd0aCAtIDEsIHAwLCBwMSA9IGFycmF5WzBdLCBwYWlycyA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgICB3aGlsZSAoaSA8IG4pIHBhaXJzW2ldID0gWyBwMCA9IHAxLCBwMSA9IGFycmF5WysraV0gXTtcbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG4gIGQzLnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCkge1xuICAgIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuICAgIGZvciAodmFyIGkgPSAtMSwgbSA9IGQzLm1pbihtYXRyaXgsIGQzX3RyYW5zcG9zZUxlbmd0aCksIHRyYW5zcG9zZSA9IG5ldyBBcnJheShtKTsgKytpIDwgbTsgKSB7XG4gICAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjsgKSB7XG4gICAgICAgIHJvd1tqXSA9IG1hdHJpeFtqXVtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zcG9zZTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNwb3NlTGVuZ3RoKGQpIHtcbiAgICByZXR1cm4gZC5sZW5ndGg7XG4gIH1cbiAgZDMuemlwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnRyYW5zcG9zZShhcmd1bWVudHMpO1xuICB9O1xuICBkMy5rZXlzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcbiAgZDMudmFsdWVzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuICBkMy5lbnRyaWVzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe1xuICAgICAga2V5OiBrZXksXG4gICAgICB2YWx1ZTogbWFwW2tleV1cbiAgICB9KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfTtcbiAgZDMubWVyZ2UgPSBmdW5jdGlvbihhcnJheXMpIHtcbiAgICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsIG0sIGkgPSAtMSwgaiA9IDAsIG1lcmdlZCwgYXJyYXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGogKz0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG4gICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICBhcnJheSA9IGFycmF5c1tuXTtcbiAgICAgIG0gPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgICAgbWVyZ2VkWy0tal0gPSBhcnJheVttXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfTtcbiAgdmFyIGFicyA9IE1hdGguYWJzO1xuICBkMy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgICBzdGVwID0gMTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICBzdG9wID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKChzdG9wIC0gc3RhcnQpIC8gc3RlcCA9PT0gSW5maW5pdHkpIHRocm93IG5ldyBFcnJvcihcImluZmluaXRlIHJhbmdlXCIpO1xuICAgIHZhciByYW5nZSA9IFtdLCBrID0gZDNfcmFuZ2VfaW50ZWdlclNjYWxlKGFicyhzdGVwKSksIGkgPSAtMSwgajtcbiAgICBzdGFydCAqPSBrLCBzdG9wICo9IGssIHN0ZXAgKj0gaztcbiAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgoaiA9IHN0YXJ0ICsgc3RlcCAqICsraSkgPiBzdG9wKSByYW5nZS5wdXNoKGogLyBrKTsgZWxzZSB3aGlsZSAoKGogPSBzdGFydCArIHN0ZXAgKiArK2kpIDwgc3RvcCkgcmFuZ2UucHVzaChqIC8gayk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuICBmdW5jdGlvbiBkM19yYW5nZV9pbnRlZ2VyU2NhbGUoeCkge1xuICAgIHZhciBrID0gMTtcbiAgICB3aGlsZSAoeCAqIGsgJSAxKSBrICo9IDEwO1xuICAgIHJldHVybiBrO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2NsYXNzKGN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0b3IucHJvdG90eXBlLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHByb3BlcnRpZXNba2V5XSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBkMy5tYXAgPSBmdW5jdGlvbihvYmplY3QsIGYpIHtcbiAgICB2YXIgbWFwID0gbmV3IGQzX01hcCgpO1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBkM19NYXApIHtcbiAgICAgIG9iamVjdC5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aCwgbztcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pOyBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYuY2FsbChvYmplY3QsIG8gPSBvYmplY3RbaV0sIGkpLCBvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfTWFwKCkge1xuICAgIHRoaXMuXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgdmFyIGQzX21hcF9wcm90byA9IFwiX19wcm90b19fXCIsIGQzX21hcF96ZXJvID0gXCJcXHgwMFwiO1xuICBkM19jbGFzcyhkM19NYXAsIHtcbiAgICBoYXM6IGQzX21hcF9oYXMsXG4gICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9bZDNfbWFwX2VzY2FwZShrZXkpXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX1tkM19tYXBfZXNjYXBlKGtleSldID0gdmFsdWU7XG4gICAgfSxcbiAgICByZW1vdmU6IGQzX21hcF9yZW1vdmUsXG4gICAga2V5czogZDNfbWFwX2tleXMsXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIHZhbHVlcy5wdXNoKHRoaXMuX1trZXldKTtcbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBlbnRyaWVzLnB1c2goe1xuICAgICAgICBrZXk6IGQzX21hcF91bmVzY2FwZShrZXkpLFxuICAgICAgICB2YWx1ZTogdGhpcy5fW2tleV1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgfSxcbiAgICBzaXplOiBkM19tYXBfc2l6ZSxcbiAgICBlbXB0eTogZDNfbWFwX2VtcHR5LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIGYuY2FsbCh0aGlzLCBkM19tYXBfdW5lc2NhcGUoa2V5KSwgdGhpcy5fW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGQzX21hcF9lc2NhcGUoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkgKz0gXCJcIikgPT09IGQzX21hcF9wcm90byB8fCBrZXlbMF0gPT09IGQzX21hcF96ZXJvID8gZDNfbWFwX3plcm8gKyBrZXkgOiBrZXk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX3VuZXNjYXBlKGtleSkge1xuICAgIHJldHVybiAoa2V5ICs9IFwiXCIpWzBdID09PSBkM19tYXBfemVybyA/IGtleS5zbGljZSgxKSA6IGtleTtcbiAgfVxuICBmdW5jdGlvbiBkM19tYXBfaGFzKGtleSkge1xuICAgIHJldHVybiBkM19tYXBfZXNjYXBlKGtleSkgaW4gdGhpcy5fO1xuICB9XG4gIGZ1bmN0aW9uIGQzX21hcF9yZW1vdmUoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkgPSBkM19tYXBfZXNjYXBlKGtleSkpIGluIHRoaXMuXyAmJiBkZWxldGUgdGhpcy5fW2tleV07XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX2tleXMoKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBrZXlzLnB1c2goZDNfbWFwX3VuZXNjYXBlKGtleSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX21hcF9zaXplKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX2VtcHR5KCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBkMy5uZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5lc3QgPSB7fSwga2V5cyA9IFtdLCBzb3J0S2V5cyA9IFtdLCBzb3J0VmFsdWVzLCByb2xsdXA7XG4gICAgZnVuY3Rpb24gbWFwKG1hcFR5cGUsIGFycmF5LCBkZXB0aCkge1xuICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gcm9sbHVwID8gcm9sbHVwLmNhbGwobmVzdCwgYXJyYXkpIDogc29ydFZhbHVlcyA/IGFycmF5LnNvcnQoc29ydFZhbHVlcykgOiBhcnJheTtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGtleSA9IGtleXNbZGVwdGgrK10sIGtleVZhbHVlLCBvYmplY3QsIHNldHRlciwgdmFsdWVzQnlLZXkgPSBuZXcgZDNfTWFwKCksIHZhbHVlcztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkob2JqZWN0ID0gYXJyYXlbaV0pKSkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKG9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbIG9iamVjdCBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1hcFR5cGUpIHtcbiAgICAgICAgb2JqZWN0ID0gbWFwVHlwZSgpO1xuICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihrZXlWYWx1ZSwgdmFsdWVzKSB7XG4gICAgICAgICAgb2JqZWN0LnNldChrZXlWYWx1ZSwgbWFwKG1hcFR5cGUsIHZhbHVlcywgZGVwdGgpKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdCA9IHt9O1xuICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihrZXlWYWx1ZSwgdmFsdWVzKSB7XG4gICAgICAgICAgb2JqZWN0W2tleVZhbHVlXSA9IG1hcChtYXBUeXBlLCB2YWx1ZXMsIGRlcHRoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhbHVlc0J5S2V5LmZvckVhY2goc2V0dGVyKTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgICAgdmFyIGFycmF5ID0gW10sIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCsrXTtcbiAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKGtleSwga2V5TWFwKSB7XG4gICAgICAgIGFycmF5LnB1c2goe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlczogZW50cmllcyhrZXlNYXAsIGRlcHRoKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvcnRLZXkgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTtcbiAgICAgIH0pIDogYXJyYXk7XG4gICAgfVxuICAgIG5lc3QubWFwID0gZnVuY3Rpb24oYXJyYXksIG1hcFR5cGUpIHtcbiAgICAgIHJldHVybiBtYXAobWFwVHlwZSwgYXJyYXksIDApO1xuICAgIH07XG4gICAgbmVzdC5lbnRyaWVzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgIHJldHVybiBlbnRyaWVzKG1hcChkMy5tYXAsIGFycmF5LCAwKSwgMCk7XG4gICAgfTtcbiAgICBuZXN0LmtleSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIGtleXMucHVzaChkKTtcbiAgICAgIHJldHVybiBuZXN0O1xuICAgIH07XG4gICAgbmVzdC5zb3J0S2V5cyA9IGZ1bmN0aW9uKG9yZGVyKSB7XG4gICAgICBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7XG4gICAgICByZXR1cm4gbmVzdDtcbiAgICB9O1xuICAgIG5lc3Quc29ydFZhbHVlcyA9IGZ1bmN0aW9uKG9yZGVyKSB7XG4gICAgICBzb3J0VmFsdWVzID0gb3JkZXI7XG4gICAgICByZXR1cm4gbmVzdDtcbiAgICB9O1xuICAgIG5lc3Qucm9sbHVwID0gZnVuY3Rpb24oZikge1xuICAgICAgcm9sbHVwID0gZjtcbiAgICAgIHJldHVybiBuZXN0O1xuICAgIH07XG4gICAgcmV0dXJuIG5lc3Q7XG4gIH07XG4gIGQzLnNldCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHNldCA9IG5ldyBkM19TZXQoKTtcbiAgICBpZiAoYXJyYXkpIGZvciAodmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoOyBpIDwgbjsgKytpKSBzZXQuYWRkKGFycmF5W2ldKTtcbiAgICByZXR1cm4gc2V0O1xuICB9O1xuICBmdW5jdGlvbiBkM19TZXQoKSB7XG4gICAgdGhpcy5fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICBkM19jbGFzcyhkM19TZXQsIHtcbiAgICBoYXM6IGQzX21hcF9oYXMsXG4gICAgYWRkOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHRoaXMuX1tkM19tYXBfZXNjYXBlKGtleSArPSBcIlwiKV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9LFxuICAgIHJlbW92ZTogZDNfbWFwX3JlbW92ZSxcbiAgICB2YWx1ZXM6IGQzX21hcF9rZXlzLFxuICAgIHNpemU6IGQzX21hcF9zaXplLFxuICAgIGVtcHR5OiBkM19tYXBfZW1wdHksXG4gICAgZm9yRWFjaDogZnVuY3Rpb24oZikge1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgZi5jYWxsKHRoaXMsIGQzX21hcF91bmVzY2FwZShrZXkpKTtcbiAgICB9XG4gIH0pO1xuICBkMy5iZWhhdmlvciA9IHt9O1xuICBmdW5jdGlvbiBkM19pZGVudGl0eShkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH1cbiAgZDMucmViaW5kID0gZnVuY3Rpb24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICB2YXIgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZXRob2Q7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRhcmdldFttZXRob2QgPSBhcmd1bWVudHNbaV1dID0gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBzb3VyY2VbbWV0aG9kXSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBtZXRob2QuYXBwbHkoc291cmNlLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBzb3VyY2UgPyB0YXJnZXQgOiB2YWx1ZTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3ZlbmRvclN5bWJvbChvYmplY3QsIG5hbWUpIHtcbiAgICBpZiAobmFtZSBpbiBvYmplY3QpIHJldHVybiBuYW1lO1xuICAgIG5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGQzX3ZlbmRvclByZWZpeGVzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHByZWZpeE5hbWUgPSBkM192ZW5kb3JQcmVmaXhlc1tpXSArIG5hbWU7XG4gICAgICBpZiAocHJlZml4TmFtZSBpbiBvYmplY3QpIHJldHVybiBwcmVmaXhOYW1lO1xuICAgIH1cbiAgfVxuICB2YXIgZDNfdmVuZG9yUHJlZml4ZXMgPSBbIFwid2Via2l0XCIsIFwibXNcIiwgXCJtb3pcIiwgXCJNb3pcIiwgXCJvXCIsIFwiT1wiIF07XG4gIGZ1bmN0aW9uIGQzX25vb3AoKSB7fVxuICBkMy5kaXNwYXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkaXNwYXRjaCA9IG5ldyBkM19kaXNwYXRjaCgpLCBpID0gLTEsIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpO1xuICAgIHJldHVybiBkaXNwYXRjaDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZGlzcGF0Y2goKSB7fVxuICBkM19kaXNwYXRjaC5wcm90b3R5cGUub24gPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIHZhciBpID0gdHlwZS5pbmRleE9mKFwiLlwiKSwgbmFtZSA9IFwiXCI7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgbmFtZSA9IHR5cGUuc2xpY2UoaSArIDEpO1xuICAgICAgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSk7XG4gICAgfVxuICAgIGlmICh0eXBlKSByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB0aGlzW3R5cGVdLm9uKG5hbWUpIDogdGhpc1t0eXBlXS5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIGlmIChsaXN0ZW5lciA9PSBudWxsKSBmb3IgKHR5cGUgaW4gdGhpcykge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhpc1t0eXBlXS5vbihuYW1lLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gW10sIGxpc3RlbmVyQnlOYW1lID0gbmV3IGQzX01hcCgpO1xuICAgIGZ1bmN0aW9uIGV2ZW50KCkge1xuICAgICAgdmFyIHogPSBsaXN0ZW5lcnMsIGkgPSAtMSwgbiA9IHoubGVuZ3RoLCBsO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChsID0geltpXS5vbikgbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGRpc3BhdGNoO1xuICAgIH1cbiAgICBldmVudC5vbiA9IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbCA9IGxpc3RlbmVyQnlOYW1lLmdldChuYW1lKSwgaTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGwgJiYgbC5vbjtcbiAgICAgIGlmIChsKSB7XG4gICAgICAgIGwub24gPSBudWxsO1xuICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoMCwgaSA9IGxpc3RlbmVycy5pbmRleE9mKGwpKS5jb25jYXQobGlzdGVuZXJzLnNsaWNlKGkgKyAxKSk7XG4gICAgICAgIGxpc3RlbmVyQnlOYW1lLnJlbW92ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChsaXN0ZW5lcikgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXJCeU5hbWUuc2V0KG5hbWUsIHtcbiAgICAgICAgb246IGxpc3RlbmVyXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gZGlzcGF0Y2g7XG4gICAgfTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbiAgZDMuZXZlbnQgPSBudWxsO1xuICBmdW5jdGlvbiBkM19ldmVudFByZXZlbnREZWZhdWx0KCkge1xuICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZXZlbnRTb3VyY2UoKSB7XG4gICAgdmFyIGUgPSBkMy5ldmVudCwgcztcbiAgICB3aGlsZSAocyA9IGUuc291cmNlRXZlbnQpIGUgPSBzO1xuICAgIHJldHVybiBlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2V2ZW50RGlzcGF0Y2godGFyZ2V0KSB7XG4gICAgdmFyIGRpc3BhdGNoID0gbmV3IGQzX2Rpc3BhdGNoKCksIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgZGlzcGF0Y2hbYXJndW1lbnRzW2ldXSA9IGQzX2Rpc3BhdGNoX2V2ZW50KGRpc3BhdGNoKTtcbiAgICBkaXNwYXRjaC5vZiA9IGZ1bmN0aW9uKHRoaXosIGFyZ3VtZW50eikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUxKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGUwID0gZTEuc291cmNlRXZlbnQgPSBkMy5ldmVudDtcbiAgICAgICAgICBlMS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgZDMuZXZlbnQgPSBlMTtcbiAgICAgICAgICBkaXNwYXRjaFtlMS50eXBlXS5hcHBseSh0aGl6LCBhcmd1bWVudHopO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGQzLmV2ZW50ID0gZTA7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gZGlzcGF0Y2g7XG4gIH1cbiAgZDMucmVxdW90ZSA9IGZ1bmN0aW9uKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKGQzX3JlcXVvdGVfcmUsIFwiXFxcXCQmXCIpO1xuICB9O1xuICB2YXIgZDNfcmVxdW90ZV9yZSA9IC9bXFxcXFxcXlxcJFxcKlxcK1xcP1xcfFxcW1xcXVxcKFxcKVxcLlxce1xcfV0vZztcbiAgdmFyIGQzX3N1YmNsYXNzID0ge30uX19wcm90b19fID8gZnVuY3Rpb24ob2JqZWN0LCBwcm90b3R5cGUpIHtcbiAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICB9IDogZnVuY3Rpb24ob2JqZWN0LCBwcm90b3R5cGUpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm90b3R5cGUpIG9iamVjdFtwcm9wZXJ0eV0gPSBwcm90b3R5cGVbcHJvcGVydHldO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb24oZ3JvdXBzKSB7XG4gICAgZDNfc3ViY2xhc3MoZ3JvdXBzLCBkM19zZWxlY3Rpb25Qcm90b3R5cGUpO1xuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgdmFyIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICByZXR1cm4gbi5xdWVyeVNlbGVjdG9yKHMpO1xuICB9LCBkM19zZWxlY3RBbGwgPSBmdW5jdGlvbihzLCBuKSB7XG4gICAgcmV0dXJuIG4ucXVlcnlTZWxlY3RvckFsbChzKTtcbiAgfSwgZDNfc2VsZWN0TWF0Y2hlcyA9IGZ1bmN0aW9uKG4sIHMpIHtcbiAgICB2YXIgZDNfc2VsZWN0TWF0Y2hlciA9IG4ubWF0Y2hlcyB8fCBuW2QzX3ZlbmRvclN5bWJvbChuLCBcIm1hdGNoZXNTZWxlY3RvclwiKV07XG4gICAgZDNfc2VsZWN0TWF0Y2hlcyA9IGZ1bmN0aW9uKG4sIHMpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVyLmNhbGwobiwgcyk7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2VsZWN0TWF0Y2hlcyhuLCBzKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBTaXp6bGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICAgIHJldHVybiBTaXp6bGUocywgbilbMF0gfHwgbnVsbDtcbiAgICB9O1xuICAgIGQzX3NlbGVjdEFsbCA9IFNpenpsZTtcbiAgICBkM19zZWxlY3RNYXRjaGVzID0gU2l6emxlLm1hdGNoZXNTZWxlY3RvcjtcbiAgfVxuICBkMy5zZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2VsZWN0KGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gIH07XG4gIHZhciBkM19zZWxlY3Rpb25Qcm90b3R5cGUgPSBkMy5zZWxlY3Rpb24ucHJvdG90eXBlID0gW107XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIGdyb3VwLCBub2RlO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIHN1Ymdyb3VwLnBhcmVudE5vZGUgPSAoZ3JvdXAgPSB0aGlzW2pdKS5wYXJlbnROb2RlO1xuICAgICAgZm9yICh2YXIgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSA9IHNlbGVjdG9yLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpO1xuICAgICAgICAgIGlmIChzdWJub2RlICYmIFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0b3IgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3Qoc2VsZWN0b3IsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgbm9kZTtcbiAgICBzZWxlY3RvciA9IGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBkM19hcnJheShzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSk7XG4gICAgICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3RvciA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NlbGVjdEFsbChzZWxlY3RvciwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfbnNYaHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuICB2YXIgZDNfbnNQcmVmaXggPSB7XG4gICAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgeGh0bWw6IGQzX25zWGh0bWwsXG4gICAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG4gIH07XG4gIGQzLm5zID0ge1xuICAgIHByZWZpeDogZDNfbnNQcmVmaXgsXG4gICAgcXVhbGlmeTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoXCI6XCIpLCBwcmVmaXggPSBuYW1lO1xuICAgICAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICAgICAgcmV0dXJuIGQzX25zUHJlZml4Lmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7XG4gICAgICAgIHNwYWNlOiBkM19uc1ByZWZpeFtwcmVmaXhdLFxuICAgICAgICBsb2NhbDogbmFtZVxuICAgICAgfSA6IG5hbWU7XG4gICAgfVxuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICAgICAgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSk7XG4gICAgICAgIHJldHVybiBuYW1lLmxvY2FsID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSA6IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2F0dHIodmFsdWUsIG5hbWVbdmFsdWVdKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpO1xuICAgIGZ1bmN0aW9uIGF0dHJOdWxsKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJOdWxsTlMoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbigpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyRnVuY3Rpb25OUygpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7IGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB4KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBuYW1lLmxvY2FsID8gYXR0ck51bGxOUyA6IGF0dHJOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24gOiBuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfY29sbGFwc2Uocykge1xuICAgIHJldHVybiBzLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2xhc3NlZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKSwgbiA9IChuYW1lID0gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkpLmxlbmd0aCwgaSA9IC0xO1xuICAgICAgICBpZiAodmFsdWUgPSBub2RlLmNsYXNzTGlzdCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIXZhbHVlLmNvbnRhaW5zKG5hbWVbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWQzX3NlbGVjdGlvbl9jbGFzc2VkUmUobmFtZVtpXSkudGVzdCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9jbGFzc2VkKHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoPzpefFxcXFxzKylcIiArIGQzLnJlcXVvdGUobmFtZSkgKyBcIig/OlxcXFxzK3wkKVwiLCBcImdcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkge1xuICAgIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkubWFwKGQzX3NlbGVjdGlvbl9jbGFzc2VkTmFtZSk7XG4gICAgdmFyIG4gPSBuYW1lLmxlbmd0aDtcbiAgICBmdW5jdGlvbiBjbGFzc2VkQ29uc3RhbnQoKSB7XG4gICAgICB2YXIgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgdmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IC0xLCB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBuYW1lW2ldKHRoaXMsIHgpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzc2VkRnVuY3Rpb24gOiBjbGFzc2VkQ29uc3RhbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWROYW1lKG5hbWUpIHtcbiAgICB2YXIgcmUgPSBkM19zZWxlY3Rpb25fY2xhc3NlZFJlKG5hbWUpO1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgICAgaWYgKGMgPSBub2RlLmNsYXNzTGlzdCkgcmV0dXJuIHZhbHVlID8gYy5hZGQobmFtZSkgOiBjLnJlbW92ZShuYW1lKTtcbiAgICAgIHZhciBjID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGlmICghcmUudGVzdChjKSkgbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBkM19jb2xsYXBzZShjICsgXCIgXCIgKyBuYW1lKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGQzX2NvbGxhcHNlKGMucmVwbGFjZShyZSwgXCIgXCIpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIGZvciAocHJpb3JpdHkgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShwcmlvcml0eSwgbmFtZVtwcmlvcml0eV0sIHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKG4gPCAyKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgICAgIHJldHVybiBkM193aW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuICAgICAgfVxuICAgICAgcHJpb3JpdHkgPSBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIGZ1bmN0aW9uIHN0eWxlTnVsbCgpIHtcbiAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpOyBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgeCwgcHJpb3JpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVGdW5jdGlvbiA6IHN0eWxlQ29uc3RhbnQ7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHRoaXMubm9kZSgpW25hbWVdO1xuICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3Byb3BlcnR5KHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9wcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5TnVsbCgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KCkge1xuICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHggPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07IGVsc2UgdGhpc1tuYW1lXSA9IHg7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gcHJvcGVydHlOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wZXJ0eUZ1bmN0aW9uIDogcHJvcGVydHlDb25zdGFudDtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLmVhY2godHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH0pIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuZWFjaCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgfSkgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKG5hbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsIG5hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgICAgcmV0dXJuIG5hbWVzcGFjZSA9PT0gZDNfbnNYaHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSBkM19uc1hodG1sID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIG5hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVOUygpIHtcbiAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiAobmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSkpLmxvY2FsID8gY3JlYXRlTlMgOiBjcmVhdGU7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICAgIG5hbWUgPSBkM19zZWxlY3Rpb25fY3JlYXRvcihuYW1lKTtcbiAgICBiZWZvcmUgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3IoYmVmb3JlKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobmFtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBiZWZvcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgICB9KTtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uUmVtb3ZlKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uUmVtb3ZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHZhciBpID0gLTEsIG4gPSB0aGlzLmxlbmd0aCwgZ3JvdXAsIG5vZGU7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YWx1ZSA9IG5ldyBBcnJheShuID0gKGdyb3VwID0gdGhpc1swXSkubGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB2YWx1ZVtpXSA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluZChncm91cCwgZ3JvdXBEYXRhKSB7XG4gICAgICB2YXIgaSwgbiA9IGdyb3VwLmxlbmd0aCwgbSA9IGdyb3VwRGF0YS5sZW5ndGgsIG4wID0gTWF0aC5taW4obiwgbSksIHVwZGF0ZU5vZGVzID0gbmV3IEFycmF5KG0pLCBlbnRlck5vZGVzID0gbmV3IEFycmF5KG0pLCBleGl0Tm9kZXMgPSBuZXcgQXJyYXkobiksIG5vZGUsIG5vZGVEYXRhO1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgZDNfTWFwKCksIGtleVZhbHVlcyA9IG5ldyBBcnJheShuKSwga2V5VmFsdWU7XG4gICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBuOyApIHtcbiAgICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSkpKSB7XG4gICAgICAgICAgICAgIGV4aXROb2Rlc1tpXSA9IG5vZGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBtOyApIHtcbiAgICAgICAgICBpZiAoIShub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlID0ga2V5LmNhbGwoZ3JvdXBEYXRhLCBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXSwgaSkpKSkge1xuICAgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShub2RlRGF0YSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICB1cGRhdGVOb2Rlc1tpXSA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLl9fZGF0YV9fID0gbm9kZURhdGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG47ICkge1xuICAgICAgICAgIGlmIChpIGluIGtleVZhbHVlcyAmJiBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAtMTsgKytpIDwgbjA7ICkge1xuICAgICAgICAgIG5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgICBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXTtcbiAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5fX2RhdGFfXyA9IG5vZGVEYXRhO1xuICAgICAgICAgICAgdXBkYXRlTm9kZXNbaV0gPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnRlck5vZGVzW2ldID0gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKG5vZGVEYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7aSA8IG07ICsraSkge1xuICAgICAgICAgIGVudGVyTm9kZXNbaV0gPSBkM19zZWxlY3Rpb25fZGF0YU5vZGUoZ3JvdXBEYXRhW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDtpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVudGVyTm9kZXMudXBkYXRlID0gdXBkYXRlTm9kZXM7XG4gICAgICBlbnRlck5vZGVzLnBhcmVudE5vZGUgPSB1cGRhdGVOb2Rlcy5wYXJlbnROb2RlID0gZXhpdE5vZGVzLnBhcmVudE5vZGUgPSBncm91cC5wYXJlbnROb2RlO1xuICAgICAgZW50ZXIucHVzaChlbnRlck5vZGVzKTtcbiAgICAgIHVwZGF0ZS5wdXNoKHVwZGF0ZU5vZGVzKTtcbiAgICAgIGV4aXQucHVzaChleGl0Tm9kZXMpO1xuICAgIH1cbiAgICB2YXIgZW50ZXIgPSBkM19zZWxlY3Rpb25fZW50ZXIoW10pLCB1cGRhdGUgPSBkM19zZWxlY3Rpb24oW10pLCBleGl0ID0gZDNfc2VsZWN0aW9uKFtdKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGJpbmQoZ3JvdXAgPSB0aGlzW2ldLCB2YWx1ZS5jYWxsKGdyb3VwLCBncm91cC5wYXJlbnROb2RlLl9fZGF0YV9fLCBpKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGJpbmQoZ3JvdXAgPSB0aGlzW2ldLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZS5lbnRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVudGVyO1xuICAgIH07XG4gICAgdXBkYXRlLmV4aXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleGl0O1xuICAgIH07XG4gICAgcmV0dXJuIHVwZGF0ZTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKGRhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19kYXRhX186IGRhdGFcbiAgICB9O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXR1bSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpIDogdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgZ3JvdXAsIG5vZGU7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIikgZmlsdGVyID0gZDNfc2VsZWN0aW9uX2ZpbHRlcihmaWx0ZXIpO1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IChncm91cCA9IHRoaXNbal0pLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgZmlsdGVyLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2ZpbHRlcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVzKHRoaXMsIHNlbGVjdG9yKTtcbiAgICB9O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5vcmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgY29tcGFyYXRvciA9IGQzX3NlbGVjdGlvbl9zb3J0Q29tcGFyYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHRoaXNbal0uc29ydChjb21wYXJhdG9yKTtcbiAgICByZXR1cm4gdGhpcy5vcmRlcigpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IoY29tcGFyYXRvcikge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgY29tcGFyYXRvciA9IGQzX2FzY2VuZGluZztcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmF0b3IoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuICAgIH0pO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2sobm9kZSwgaSwgaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBhcmdzID0gZDNfYXJyYXkoYXJndW1lbnRzKTtcbiAgICBjYWxsYmFjay5hcHBseShhcmdzWzBdID0gdGhpcywgYXJncyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhdGhpcy5ub2RlKCk7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuID0gMDtcbiAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICAgICsrbjtcbiAgICB9KTtcbiAgICByZXR1cm4gbjtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2VudGVyKHNlbGVjdGlvbikge1xuICAgIGQzX3N1YmNsYXNzKHNlbGVjdGlvbiwgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlKTtcbiAgICByZXR1cm4gc2VsZWN0aW9uO1xuICB9XG4gIHZhciBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUgPSBbXTtcbiAgZDMuc2VsZWN0aW9uLmVudGVyID0gZDNfc2VsZWN0aW9uX2VudGVyO1xuICBkMy5zZWxlY3Rpb24uZW50ZXIucHJvdG90eXBlID0gZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuYXBwZW5kID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmFwcGVuZDtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLmVtcHR5ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5O1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUubm9kZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuY2FsbCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2l6ZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5zaXplO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2RlLCB1cGdyb3VwLCBncm91cCwgbm9kZTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICB1cGdyb3VwID0gKGdyb3VwID0gdGhpc1tqXSkudXBkYXRlO1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gZ3JvdXAucGFyZW50Tm9kZTtcbiAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKHVwZ3JvdXBbaV0gPSBzdWJub2RlID0gc2VsZWN0b3IuY2FsbChncm91cC5wYXJlbnROb2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSk7XG4gICAgICAgICAgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG4gIH07XG4gIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGJlZm9yZSA9IGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZSh0aGlzKTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydC5jYWxsKHRoaXMsIG5hbWUsIGJlZm9yZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZShlbnRlcikge1xuICAgIHZhciBpMCwgajA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGopIHtcbiAgICAgIHZhciBncm91cCA9IGVudGVyW2pdLnVwZGF0ZSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTtcbiAgICAgIGlmIChqICE9IGowKSBqMCA9IGosIGkwID0gMDtcbiAgICAgIGlmIChpID49IGkwKSBpMCA9IGkgKyAxO1xuICAgICAgd2hpbGUgKCEobm9kZSA9IGdyb3VwW2kwXSkgJiYgKytpMCA8IG4pIDtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gIH1cbiAgZDMuc2VsZWN0ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBncm91cDtcbiAgICBpZiAodHlwZW9mIG5vZGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGdyb3VwID0gWyBkM19zZWxlY3Qobm9kZSwgZDNfZG9jdW1lbnQpIF07XG4gICAgICBncm91cC5wYXJlbnROb2RlID0gZDNfZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cCA9IFsgbm9kZSBdO1xuICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IGQzX2RvY3VtZW50RWxlbWVudChub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihbIGdyb3VwIF0pO1xuICB9O1xuICBkMy5zZWxlY3RBbGwgPSBmdW5jdGlvbihub2Rlcykge1xuICAgIHZhciBncm91cDtcbiAgICBpZiAodHlwZW9mIG5vZGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBncm91cCA9IGQzX2FycmF5KGQzX3NlbGVjdEFsbChub2RlcywgZDNfZG9jdW1lbnQpKTtcbiAgICAgIGdyb3VwLnBhcmVudE5vZGUgPSBkM19kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwID0gZDNfYXJyYXkobm9kZXMpO1xuICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oWyBncm91cCBdKTtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLm9uID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSBsaXN0ZW5lciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNhcHR1cmUgaW4gdHlwZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9vbihjYXB0dXJlLCB0eXBlW2NhcHR1cmVdLCBsaXN0ZW5lcikpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmIChuIDwgMikgcmV0dXJuIChuID0gdGhpcy5ub2RlKClbXCJfX29uXCIgKyB0eXBlXSkgJiYgbi5fO1xuICAgICAgY2FwdHVyZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9vbih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICB2YXIgbmFtZSA9IFwiX19vblwiICsgdHlwZSwgaSA9IHR5cGUuaW5kZXhPZihcIi5cIiksIHdyYXAgPSBkM19zZWxlY3Rpb25fb25MaXN0ZW5lcjtcbiAgICBpZiAoaSA+IDApIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpO1xuICAgIHZhciBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLmdldCh0eXBlKTtcbiAgICBpZiAoZmlsdGVyKSB0eXBlID0gZmlsdGVyLCB3cmFwID0gZDNfc2VsZWN0aW9uX29uRmlsdGVyO1xuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlKCkge1xuICAgICAgdmFyIGwgPSB0aGlzW25hbWVdO1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGwsIGwuJCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkFkZCgpIHtcbiAgICAgIHZhciBsID0gd3JhcChsaXN0ZW5lciwgZDNfYXJyYXkoYXJndW1lbnRzKSk7XG4gICAgICBvblJlbW92ZS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHRoaXNbbmFtZV0gPSBsLCBsLiQgPSBjYXB0dXJlKTtcbiAgICAgIGwuXyA9IGxpc3RlbmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGwoKSB7XG4gICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiXl9fb24oW14uXSspXCIgKyBkMy5yZXF1b3RlKHR5cGUpICsgXCIkXCIpLCBtYXRjaDtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICBpZiAobWF0Y2ggPSBuYW1lLm1hdGNoKHJlKSkge1xuICAgICAgICAgIHZhciBsID0gdGhpc1tuYW1lXTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIobWF0Y2hbMV0sIGwsIGwuJCk7XG4gICAgICAgICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGkgPyBsaXN0ZW5lciA/IG9uQWRkIDogb25SZW1vdmUgOiBsaXN0ZW5lciA/IGQzX25vb3AgOiByZW1vdmVBbGw7XG4gIH1cbiAgdmFyIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMgPSBkMy5tYXAoe1xuICAgIG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG4gICAgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiXG4gIH0pO1xuICBpZiAoZDNfZG9jdW1lbnQpIHtcbiAgICBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgICAgaWYgKFwib25cIiArIGsgaW4gZDNfZG9jdW1lbnQpIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMucmVtb3ZlKGspO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIG8gPSBkMy5ldmVudDtcbiAgICAgIGQzLmV2ZW50ID0gZTtcbiAgICAgIGFyZ3VtZW50elswXSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0cnkge1xuICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHopO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDMuZXZlbnQgPSBvO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX29uRmlsdGVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcbiAgICB2YXIgbCA9IGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopO1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgcmVsYXRlZCA9IGUucmVsYXRlZFRhcmdldDtcbiAgICAgIGlmICghcmVsYXRlZCB8fCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRhcmdldCkgJiA4KSkge1xuICAgICAgICBsLmNhbGwodGFyZ2V0LCBlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBkM19ldmVudF9kcmFnU2VsZWN0LCBkM19ldmVudF9kcmFnSWQgPSAwO1xuICBmdW5jdGlvbiBkM19ldmVudF9kcmFnU3VwcHJlc3Mobm9kZSkge1xuICAgIHZhciBuYW1lID0gXCIuZHJhZ3N1cHByZXNzLVwiICsgKytkM19ldmVudF9kcmFnSWQsIGNsaWNrID0gXCJjbGlja1wiICsgbmFtZSwgdyA9IGQzLnNlbGVjdChkM193aW5kb3cobm9kZSkpLm9uKFwidG91Y2htb3ZlXCIgKyBuYW1lLCBkM19ldmVudFByZXZlbnREZWZhdWx0KS5vbihcImRyYWdzdGFydFwiICsgbmFtZSwgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCkub24oXCJzZWxlY3RzdGFydFwiICsgbmFtZSwgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCk7XG4gICAgaWYgKGQzX2V2ZW50X2RyYWdTZWxlY3QgPT0gbnVsbCkge1xuICAgICAgZDNfZXZlbnRfZHJhZ1NlbGVjdCA9IFwib25zZWxlY3RzdGFydFwiIGluIG5vZGUgPyBmYWxzZSA6IGQzX3ZlbmRvclN5bWJvbChub2RlLnN0eWxlLCBcInVzZXJTZWxlY3RcIik7XG4gICAgfVxuICAgIGlmIChkM19ldmVudF9kcmFnU2VsZWN0KSB7XG4gICAgICB2YXIgc3R5bGUgPSBkM19kb2N1bWVudEVsZW1lbnQobm9kZSkuc3R5bGUsIHNlbGVjdCA9IHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdO1xuICAgICAgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN1cHByZXNzQ2xpY2spIHtcbiAgICAgIHcub24obmFtZSwgbnVsbCk7XG4gICAgICBpZiAoZDNfZXZlbnRfZHJhZ1NlbGVjdCkgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBzZWxlY3Q7XG4gICAgICBpZiAoc3VwcHJlc3NDbGljaykge1xuICAgICAgICB2YXIgb2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdy5vbihjbGljaywgbnVsbCk7XG4gICAgICAgIH07XG4gICAgICAgIHcub24oY2xpY2ssIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBvZmYoKTtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIHNldFRpbWVvdXQob2ZmLCAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzLm1vdXNlID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCBkM19ldmVudFNvdXJjZSgpKTtcbiAgfTtcbiAgdmFyIGQzX21vdXNlX2J1ZzQ0MDgzID0gdGhpcy5uYXZpZ2F0b3IgJiYgL1dlYktpdC8udGVzdCh0aGlzLm5hdmlnYXRvci51c2VyQWdlbnQpID8gLTEgOiAwO1xuICBmdW5jdGlvbiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgZSkge1xuICAgIGlmIChlLmNoYW5nZWRUb3VjaGVzKSBlID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICB2YXIgc3ZnID0gY29udGFpbmVyLm93bmVyU1ZHRWxlbWVudCB8fCBjb250YWluZXI7XG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBpZiAoZDNfbW91c2VfYnVnNDQwODMgPCAwKSB7XG4gICAgICAgIHZhciB3aW5kb3cgPSBkM193aW5kb3coY29udGFpbmVyKTtcbiAgICAgICAgaWYgKHdpbmRvdy5zY3JvbGxYIHx8IHdpbmRvdy5zY3JvbGxZKSB7XG4gICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJzdmdcIikuc3R5bGUoe1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgYm9yZGVyOiBcIm5vbmVcIlxuICAgICAgICAgIH0sIFwiaW1wb3J0YW50XCIpO1xuICAgICAgICAgIHZhciBjdG0gPSBzdmdbMF1bMF0uZ2V0U2NyZWVuQ1RNKCk7XG4gICAgICAgICAgZDNfbW91c2VfYnVnNDQwODMgPSAhKGN0bS5mIHx8IGN0bS5lKTtcbiAgICAgICAgICBzdmcucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkM19tb3VzZV9idWc0NDA4MykgcG9pbnQueCA9IGUucGFnZVgsIHBvaW50LnkgPSBlLnBhZ2VZOyBlbHNlIHBvaW50LnggPSBlLmNsaWVudFgsIFxuICAgICAgcG9pbnQueSA9IGUuY2xpZW50WTtcbiAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKGNvbnRhaW5lci5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgICAgcmV0dXJuIFsgcG9pbnQueCwgcG9pbnQueSBdO1xuICAgIH1cbiAgICB2YXIgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gWyBlLmNsaWVudFggLSByZWN0LmxlZnQgLSBjb250YWluZXIuY2xpZW50TGVmdCwgZS5jbGllbnRZIC0gcmVjdC50b3AgLSBjb250YWluZXIuY2xpZW50VG9wIF07XG4gIH1cbiAgZDMudG91Y2ggPSBmdW5jdGlvbihjb250YWluZXIsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gZDNfZXZlbnRTb3VyY2UoKS5jaGFuZ2VkVG91Y2hlcztcbiAgICBpZiAodG91Y2hlcykgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzLmxlbmd0aCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgdG91Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgZDMuYmVoYXZpb3IuZHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goZHJhZywgXCJkcmFnXCIsIFwiZHJhZ3N0YXJ0XCIsIFwiZHJhZ2VuZFwiKSwgb3JpZ2luID0gbnVsbCwgbW91c2Vkb3duID0gZHJhZ3N0YXJ0KGQzX25vb3AsIGQzLm1vdXNlLCBkM193aW5kb3csIFwibW91c2Vtb3ZlXCIsIFwibW91c2V1cFwiKSwgdG91Y2hzdGFydCA9IGRyYWdzdGFydChkM19iZWhhdmlvcl9kcmFnVG91Y2hJZCwgZDMudG91Y2gsIGQzX2lkZW50aXR5LCBcInRvdWNobW92ZVwiLCBcInRvdWNoZW5kXCIpO1xuICAgIGZ1bmN0aW9uIGRyYWcoKSB7XG4gICAgICB0aGlzLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duKS5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZHJhZ3N0YXJ0KGlkLCBwb3NpdGlvbiwgc3ViamVjdCwgbW92ZSwgZW5kKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcywgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0LmNvcnJlc3BvbmRpbmdFbGVtZW50IHx8IGQzLmV2ZW50LnRhcmdldCwgcGFyZW50ID0gdGhhdC5wYXJlbnROb2RlLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBkcmFnSWQgPSBpZCgpLCBkcmFnTmFtZSA9IFwiLmRyYWdcIiArIChkcmFnSWQgPT0gbnVsbCA/IFwiXCIgOiBcIi1cIiArIGRyYWdJZCksIGRyYWdPZmZzZXQsIGRyYWdTdWJqZWN0ID0gZDMuc2VsZWN0KHN1YmplY3QodGFyZ2V0KSkub24obW92ZSArIGRyYWdOYW1lLCBtb3ZlZCkub24oZW5kICsgZHJhZ05hbWUsIGVuZGVkKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgcG9zaXRpb24wID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpO1xuICAgICAgICBpZiAob3JpZ2luKSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IG9yaWdpbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgIGRyYWdPZmZzZXQgPSBbIGRyYWdPZmZzZXQueCAtIHBvc2l0aW9uMFswXSwgZHJhZ09mZnNldC55IC0gcG9zaXRpb24wWzFdIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IFsgMCwgMCBdO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBcImRyYWdzdGFydFwiXG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgICAgICB2YXIgcG9zaXRpb24xID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpLCBkeCwgZHk7XG4gICAgICAgICAgaWYgKCFwb3NpdGlvbjEpIHJldHVybjtcbiAgICAgICAgICBkeCA9IHBvc2l0aW9uMVswXSAtIHBvc2l0aW9uMFswXTtcbiAgICAgICAgICBkeSA9IHBvc2l0aW9uMVsxXSAtIHBvc2l0aW9uMFsxXTtcbiAgICAgICAgICBkcmFnZ2VkIHw9IGR4IHwgZHk7XG4gICAgICAgICAgcG9zaXRpb24wID0gcG9zaXRpb24xO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ1wiLFxuICAgICAgICAgICAgeDogcG9zaXRpb24xWzBdICsgZHJhZ09mZnNldFswXSxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uMVsxXSArIGRyYWdPZmZzZXRbMV0sXG4gICAgICAgICAgICBkeDogZHgsXG4gICAgICAgICAgICBkeTogZHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgICAgICBpZiAoIXBvc2l0aW9uKHBhcmVudCwgZHJhZ0lkKSkgcmV0dXJuO1xuICAgICAgICAgIGRyYWdTdWJqZWN0Lm9uKG1vdmUgKyBkcmFnTmFtZSwgbnVsbCkub24oZW5kICsgZHJhZ05hbWUsIG51bGwpO1xuICAgICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ2VuZFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGRyYWcub3JpZ2luID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JpZ2luO1xuICAgICAgb3JpZ2luID0geDtcbiAgICAgIHJldHVybiBkcmFnO1xuICAgIH07XG4gICAgcmV0dXJuIGQzLnJlYmluZChkcmFnLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfYmVoYXZpb3JfZHJhZ1RvdWNoSWQoKSB7XG4gICAgcmV0dXJuIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gIH1cbiAgZDMudG91Y2hlcyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgdG91Y2hlcykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgdG91Y2hlcyA9IGQzX2V2ZW50U291cmNlKCkudG91Y2hlcztcbiAgICByZXR1cm4gdG91Y2hlcyA/IGQzX2FycmF5KHRvdWNoZXMpLm1hcChmdW5jdGlvbih0b3VjaCkge1xuICAgICAgdmFyIHBvaW50ID0gZDNfbW91c2VQb2ludChjb250YWluZXIsIHRvdWNoKTtcbiAgICAgIHBvaW50LmlkZW50aWZpZXIgPSB0b3VjaC5pZGVudGlmaWVyO1xuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH0pIDogW107XG4gIH07XG4gIHZhciDOtSA9IDFlLTYsIM61MiA9IM61ICogzrUsIM+AID0gTWF0aC5QSSwgz4QgPSAyICogz4AsIM+EzrUgPSDPhCAtIM61LCBoYWxmz4AgPSDPgCAvIDIsIGQzX3JhZGlhbnMgPSDPgCAvIDE4MCwgZDNfZGVncmVlcyA9IDE4MCAvIM+AO1xuICBmdW5jdGlvbiBkM19zZ24oeCkge1xuICAgIHJldHVybiB4ID4gMCA/IDEgOiB4IDwgMCA/IC0xIDogMDtcbiAgfVxuICBmdW5jdGlvbiBkM19jcm9zczJkKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBkM19hY29zKHgpIHtcbiAgICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gz4AgOiBNYXRoLmFjb3MoeCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfYXNpbih4KSB7XG4gICAgcmV0dXJuIHggPiAxID8gaGFsZs+AIDogeCA8IC0xID8gLWhhbGbPgCA6IE1hdGguYXNpbih4KTtcbiAgfVxuICBmdW5jdGlvbiBkM19zaW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM19jb3NoKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM190YW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbiAgfVxuICBmdW5jdGlvbiBkM19oYXZlcnNpbih4KSB7XG4gICAgcmV0dXJuICh4ID0gTWF0aC5zaW4oeCAvIDIpKSAqIHg7XG4gIH1cbiAgdmFyIM+BID0gTWF0aC5TUVJUMiwgz4EyID0gMiwgz4E0ID0gNDtcbiAgZDMuaW50ZXJwb2xhdGVab29tID0gZnVuY3Rpb24ocDAsIHAxKSB7XG4gICAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSwgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLCBkeCA9IHV4MSAtIHV4MCwgZHkgPSB1eTEgLSB1eTAsIGQyID0gZHggKiBkeCArIGR5ICogZHksIGksIFM7XG4gICAgaWYgKGQyIDwgzrUyKSB7XG4gICAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyDPgTtcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbIHV4MCArIHQgKiBkeCwgdXkwICsgdCAqIGR5LCB3MCAqIE1hdGguZXhwKM+BICogdCAqIFMpIF07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLCBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIM+BNCAqIGQyKSAvICgyICogdzAgKiDPgTIgKiBkMSksIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gz4E0ICogZDIpIC8gKDIgKiB3MSAqIM+BMiAqIGQxKSwgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLCByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgICBTID0gKHIxIC0gcjApIC8gz4E7XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgcyA9IHQgKiBTLCBjb3NocjAgPSBkM19jb3NoKHIwKSwgdSA9IHcwIC8gKM+BMiAqIGQxKSAqIChjb3NocjAgKiBkM190YW5oKM+BICogcyArIHIwKSAtIGQzX3NpbmgocjApKTtcbiAgICAgICAgcmV0dXJuIFsgdXgwICsgdSAqIGR4LCB1eTAgKyB1ICogZHksIHcwICogY29zaHIwIC8gZDNfY29zaCjPgSAqIHMgKyByMCkgXTtcbiAgICAgIH07XG4gICAgfVxuICAgIGkuZHVyYXRpb24gPSBTICogMWUzO1xuICAgIHJldHVybiBpO1xuICB9O1xuICBkMy5iZWhhdmlvci56b29tID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZXcgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIGs6IDFcbiAgICB9LCB0cmFuc2xhdGUwLCBjZW50ZXIwLCBjZW50ZXIsIHNpemUgPSBbIDk2MCwgNTAwIF0sIHNjYWxlRXh0ZW50ID0gZDNfYmVoYXZpb3Jfem9vbUluZmluaXR5LCBkdXJhdGlvbiA9IDI1MCwgem9vbWluZyA9IDAsIG1vdXNlZG93biA9IFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vtb3ZlID0gXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZXVwID0gXCJtb3VzZXVwLnpvb21cIiwgbW91c2V3aGVlbFRpbWVyLCB0b3VjaHN0YXJ0ID0gXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2h0aW1lLCBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goem9vbSwgXCJ6b29tc3RhcnRcIiwgXCJ6b29tXCIsIFwiem9vbWVuZFwiKSwgeDAsIHgxLCB5MCwgeTE7XG4gICAgaWYgKCFkM19iZWhhdmlvcl96b29tV2hlZWwpIHtcbiAgICAgIGQzX2JlaGF2aW9yX3pvb21XaGVlbCA9IFwib253aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gLWQzLmV2ZW50LmRlbHRhWSAqIChkMy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKTtcbiAgICAgIH0sIFwid2hlZWxcIikgOiBcIm9ubW91c2V3aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZDMuZXZlbnQud2hlZWxEZWx0YTtcbiAgICAgIH0sIFwibW91c2V3aGVlbFwiKSA6IChkM19iZWhhdmlvcl96b29tRGVsdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIC1kMy5ldmVudC5kZXRhaWw7XG4gICAgICB9LCBcIk1vek1vdXNlUGl4ZWxTY3JvbGxcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb20oZykge1xuICAgICAgZy5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbihkM19iZWhhdmlvcl96b29tV2hlZWwgKyBcIi56b29tXCIsIG1vdXNld2hlZWxlZCkub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpLm9uKHRvdWNoc3RhcnQsIHRvdWNoc3RhcnRlZCk7XG4gICAgfVxuICAgIHpvb20uZXZlbnQgPSBmdW5jdGlvbihnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoaXMsIGFyZ3VtZW50cyksIHZpZXcxID0gdmlldztcbiAgICAgICAgaWYgKGQzX3RyYW5zaXRpb25Jbmhlcml0SWQpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmlldyA9IHRoaXMuX19jaGFydF9fIHx8IHtcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgazogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KS50d2VlbihcInpvb206em9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHNpemVbMF0sIGR5ID0gc2l6ZVsxXSwgY3ggPSBjZW50ZXIwID8gY2VudGVyMFswXSA6IGR4IC8gMiwgY3kgPSBjZW50ZXIwID8gY2VudGVyMFsxXSA6IGR5IC8gMiwgaSA9IGQzLmludGVycG9sYXRlWm9vbShbIChjeCAtIHZpZXcueCkgLyB2aWV3LmssIChjeSAtIHZpZXcueSkgLyB2aWV3LmssIGR4IC8gdmlldy5rIF0sIFsgKGN4IC0gdmlldzEueCkgLyB2aWV3MS5rLCAoY3kgLSB2aWV3MS55KSAvIHZpZXcxLmssIGR4IC8gdmlldzEuayBdKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIHZhciBsID0gaSh0KSwgayA9IGR4IC8gbFsyXTtcbiAgICAgICAgICAgICAgdGhpcy5fX2NoYXJ0X18gPSB2aWV3ID0ge1xuICAgICAgICAgICAgICAgIHg6IGN4IC0gbFswXSAqIGssXG4gICAgICAgICAgICAgICAgeTogY3kgLSBsWzFdICogayxcbiAgICAgICAgICAgICAgICBrOiBrXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLmVhY2goXCJpbnRlcnJ1cHQuem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG4gICAgICAgICAgfSkuZWFjaChcImVuZC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IHZpZXc7XG4gICAgICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB6b29tLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgdmlldy54LCB2aWV3LnkgXTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6ICtfWzBdLFxuICAgICAgICB5OiArX1sxXSxcbiAgICAgICAgazogdmlldy5rXG4gICAgICB9O1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmlldy5rO1xuICAgICAgdmlldyA9IHtcbiAgICAgICAgeDogdmlldy54LFxuICAgICAgICB5OiB2aWV3LnksXG4gICAgICAgIGs6IG51bGxcbiAgICAgIH07XG4gICAgICBzY2FsZVRvKCtfKTtcbiAgICAgIHJlc2NhbGUoKTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNjYWxlRXh0ZW50O1xuICAgICAgc2NhbGVFeHRlbnQgPSBfID09IG51bGwgPyBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgOiBbICtfWzBdLCArX1sxXSBdO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNlbnRlcjtcbiAgICAgIGNlbnRlciA9IF8gJiYgWyArX1swXSwgK19bMV0gXTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSBfICYmIFsgK19bMF0sICtfWzFdIF07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkdXJhdGlvbjtcbiAgICAgIGR1cmF0aW9uID0gK187XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20ueCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxO1xuICAgICAgeDEgPSB6O1xuICAgICAgeDAgPSB6LmNvcHkoKTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGs6IDFcbiAgICAgIH07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20ueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuICAgICAgeTEgPSB6O1xuICAgICAgeTAgPSB6LmNvcHkoKTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGs6IDFcbiAgICAgIH07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uKHApIHtcbiAgICAgIHJldHVybiBbIChwWzBdIC0gdmlldy54KSAvIHZpZXcuaywgKHBbMV0gLSB2aWV3LnkpIC8gdmlldy5rIF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50KGwpIHtcbiAgICAgIHJldHVybiBbIGxbMF0gKiB2aWV3LmsgKyB2aWV3LngsIGxbMV0gKiB2aWV3LmsgKyB2aWV3LnkgXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGVUbyhzKSB7XG4gICAgICB2aWV3LmsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIHMpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8ocCwgbCkge1xuICAgICAgbCA9IHBvaW50KGwpO1xuICAgICAgdmlldy54ICs9IHBbMF0gLSBsWzBdO1xuICAgICAgdmlldy55ICs9IHBbMV0gLSBsWzFdO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tVG8odGhhdCwgcCwgbCwgaykge1xuICAgICAgdGhhdC5fX2NoYXJ0X18gPSB7XG4gICAgICAgIHg6IHZpZXcueCxcbiAgICAgICAgeTogdmlldy55LFxuICAgICAgICBrOiB2aWV3LmtcbiAgICAgIH07XG4gICAgICBzY2FsZVRvKE1hdGgucG93KDIsIGspKTtcbiAgICAgIHRyYW5zbGF0ZVRvKGNlbnRlcjAgPSBwLCBsKTtcbiAgICAgIHRoYXQgPSBkMy5zZWxlY3QodGhhdCk7XG4gICAgICBpZiAoZHVyYXRpb24gPiAwKSB0aGF0ID0gdGhhdC50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgdGhhdC5jYWxsKHpvb20uZXZlbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgaWYgKHgxKSB4MS5kb21haW4oeDAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gKHggLSB2aWV3LngpIC8gdmlldy5rO1xuICAgICAgfSkubWFwKHgwLmludmVydCkpO1xuICAgICAgaWYgKHkxKSB5MS5kb21haW4oeTAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeSkge1xuICAgICAgICByZXR1cm4gKHkgLSB2aWV3LnkpIC8gdmlldy5rO1xuICAgICAgfSkubWFwKHkwLmludmVydCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tc3RhcnRlZChkaXNwYXRjaCkge1xuICAgICAgaWYgKCF6b29taW5nKyspIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJ6b29tc3RhcnRcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb21lZChkaXNwYXRjaCkge1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcInpvb21cIixcbiAgICAgICAgc2NhbGU6IHZpZXcuayxcbiAgICAgICAgdHJhbnNsYXRlOiBbIHZpZXcueCwgdmlldy55IF1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tZW5kZWQoZGlzcGF0Y2gpIHtcbiAgICAgIGlmICghLS16b29taW5nKSBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwiem9vbWVuZFwiXG4gICAgICB9KSwgY2VudGVyMCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBzdWJqZWN0ID0gZDMuc2VsZWN0KGQzX3dpbmRvdyh0aGF0KSkub24obW91c2Vtb3ZlLCBtb3ZlZCkub24obW91c2V1cCwgZW5kZWQpLCBsb2NhdGlvbjAgPSBsb2NhdGlvbihkMy5tb3VzZSh0aGF0KSksIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKHRoYXQpO1xuICAgICAgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoYXQpO1xuICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICAgIGRyYWdnZWQgPSAxO1xuICAgICAgICB0cmFuc2xhdGVUbyhkMy5tb3VzZSh0aGF0KSwgbG9jYXRpb24wKTtcbiAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBzdWJqZWN0Lm9uKG1vdXNlbW92ZSwgbnVsbCkub24obW91c2V1cCwgbnVsbCk7XG4gICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsIGRpc3BhdGNoID0gZXZlbnQub2YodGhhdCwgYXJndW1lbnRzKSwgbG9jYXRpb25zMCA9IHt9LCBkaXN0YW5jZTAgPSAwLCBzY2FsZTAsIHpvb21OYW1lID0gXCIuem9vbS1cIiArIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIsIHRvdWNobW92ZSA9IFwidG91Y2htb3ZlXCIgKyB6b29tTmFtZSwgdG91Y2hlbmQgPSBcInRvdWNoZW5kXCIgKyB6b29tTmFtZSwgdGFyZ2V0cyA9IFtdLCBzdWJqZWN0ID0gZDMuc2VsZWN0KHRoYXQpLCBkcmFnUmVzdG9yZSA9IGQzX2V2ZW50X2RyYWdTdXBwcmVzcyh0aGF0KTtcbiAgICAgIHN0YXJ0ZWQoKTtcbiAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgIHN1YmplY3Qub24obW91c2Vkb3duLCBudWxsKS5vbih0b3VjaHN0YXJ0LCBzdGFydGVkKTtcbiAgICAgIGZ1bmN0aW9uIHJlbG9jYXRlKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCk7XG4gICAgICAgIHNjYWxlMCA9IHZpZXcuaztcbiAgICAgICAgdG91Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBpZiAodC5pZGVudGlmaWVyIGluIGxvY2F0aW9uczApIGxvY2F0aW9uczBbdC5pZGVudGlmaWVyXSA9IGxvY2F0aW9uKHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdWNoZXM7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0O1xuICAgICAgICBkMy5zZWxlY3QodGFyZ2V0KS5vbih0b3VjaG1vdmUsIG1vdmVkKS5vbih0b3VjaGVuZCwgZW5kZWQpO1xuICAgICAgICB0YXJnZXRzLnB1c2godGFyZ2V0KTtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGFuZ2VkLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGxvY2F0aW9uczBbY2hhbmdlZFtpXS5pZGVudGlmaWVyXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdWNoZXMgPSByZWxvY2F0ZSgpLCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAodG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBpZiAobm93IC0gdG91Y2h0aW1lIDwgNTAwKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRvdWNoZXNbMF07XG4gICAgICAgICAgICB6b29tVG8odGhhdCwgcCwgbG9jYXRpb25zMFtwLmlkZW50aWZpZXJdLCBNYXRoLmZsb29yKE1hdGgubG9nKHZpZXcuaykgLyBNYXRoLkxOMikgKyAxKTtcbiAgICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG91Y2h0aW1lID0gbm93O1xuICAgICAgICB9IGVsc2UgaWYgKHRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHZhciBwID0gdG91Y2hlc1swXSwgcSA9IHRvdWNoZXNbMV0sIGR4ID0gcFswXSAtIHFbMF0sIGR5ID0gcFsxXSAtIHFbMV07XG4gICAgICAgICAgZGlzdGFuY2UwID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCksIHAwLCBsMCwgcDEsIGwxO1xuICAgICAgICBkM19zZWxlY3Rpb25faW50ZXJydXB0LmNhbGwodGhhdCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcy5sZW5ndGg7IGkgPCBuOyArK2ksIGwxID0gbnVsbCkge1xuICAgICAgICAgIHAxID0gdG91Y2hlc1tpXTtcbiAgICAgICAgICBpZiAobDEgPSBsb2NhdGlvbnMwW3AxLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgICBpZiAobDApIGJyZWFrO1xuICAgICAgICAgICAgcDAgPSBwMSwgbDAgPSBsMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGwxKSB7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlMSA9IChkaXN0YW5jZTEgPSBwMVswXSAtIHAwWzBdKSAqIGRpc3RhbmNlMSArIChkaXN0YW5jZTEgPSBwMVsxXSAtIHAwWzFdKSAqIGRpc3RhbmNlMSwgc2NhbGUxID0gZGlzdGFuY2UwICYmIE1hdGguc3FydChkaXN0YW5jZTEgLyBkaXN0YW5jZTApO1xuICAgICAgICAgIHAwID0gWyAocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyIF07XG4gICAgICAgICAgbDAgPSBbIChsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDIgXTtcbiAgICAgICAgICBzY2FsZVRvKHNjYWxlMSAqIHNjYWxlMCk7XG4gICAgICAgIH1cbiAgICAgICAgdG91Y2h0aW1lID0gbnVsbDtcbiAgICAgICAgdHJhbnNsYXRlVG8ocDAsIGwwKTtcbiAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBpZiAoZDMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgY2hhbmdlZCA9IGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gY2hhbmdlZC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhdGlvbnMwW2NoYW5nZWRbaV0uaWRlbnRpZmllcl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGlkZW50aWZpZXIgaW4gbG9jYXRpb25zMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgcmVsb2NhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZDMuc2VsZWN0QWxsKHRhcmdldHMpLm9uKHpvb21OYW1lLCBudWxsKTtcbiAgICAgICAgc3ViamVjdC5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbih0b3VjaHN0YXJ0LCB0b3VjaHN0YXJ0ZWQpO1xuICAgICAgICBkcmFnUmVzdG9yZSgpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtb3VzZXdoZWVsZWQoKSB7XG4gICAgICB2YXIgZGlzcGF0Y2ggPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKG1vdXNld2hlZWxUaW1lcikgY2xlYXJUaW1lb3V0KG1vdXNld2hlZWxUaW1lcik7IGVsc2UgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoaXMpLCBcbiAgICAgIHRyYW5zbGF0ZTAgPSBsb2NhdGlvbihjZW50ZXIwID0gY2VudGVyIHx8IGQzLm1vdXNlKHRoaXMpKSwgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgbW91c2V3aGVlbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgbW91c2V3aGVlbFRpbWVyID0gbnVsbDtcbiAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgIH0sIDUwKTtcbiAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNjYWxlVG8oTWF0aC5wb3coMiwgZDNfYmVoYXZpb3Jfem9vbURlbHRhKCkgKiAuMDAyKSAqIHZpZXcuayk7XG4gICAgICB0cmFuc2xhdGVUbyhjZW50ZXIwLCB0cmFuc2xhdGUwKTtcbiAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRibGNsaWNrZWQoKSB7XG4gICAgICB2YXIgcCA9IGQzLm1vdXNlKHRoaXMpLCBrID0gTWF0aC5sb2codmlldy5rKSAvIE1hdGguTE4yO1xuICAgICAgem9vbVRvKHRoaXMsIHAsIGxvY2F0aW9uKHApLCBkMy5ldmVudC5zaGlmdEtleSA/IE1hdGguY2VpbChrKSAtIDEgOiBNYXRoLmZsb29yKGspICsgMSk7XG4gICAgfVxuICAgIHJldHVybiBkMy5yZWJpbmQoem9vbSwgZXZlbnQsIFwib25cIik7XG4gIH07XG4gIHZhciBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgPSBbIDAsIEluZmluaXR5IF0sIGQzX2JlaGF2aW9yX3pvb21EZWx0YSwgZDNfYmVoYXZpb3Jfem9vbVdoZWVsO1xuICBkMy5jb2xvciA9IGQzX2NvbG9yO1xuICBmdW5jdGlvbiBkM19jb2xvcigpIHt9XG4gIGQzX2NvbG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfTtcbiAgZDMuaHNsID0gZDNfaHNsO1xuICBmdW5jdGlvbiBkM19oc2woaCwgcywgbCkge1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfaHNsID8gdm9pZCAodGhpcy5oID0gK2gsIHRoaXMucyA9ICtzLCB0aGlzLmwgPSArbCkgOiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGggaW5zdGFuY2VvZiBkM19oc2wgPyBuZXcgZDNfaHNsKGguaCwgaC5zLCBoLmwpIDogZDNfcmdiX3BhcnNlKFwiXCIgKyBoLCBkM19yZ2JfaHNsLCBkM19oc2wpIDogbmV3IGQzX2hzbChoLCBzLCBsKTtcbiAgfVxuICB2YXIgZDNfaHNsUHJvdG90eXBlID0gZDNfaHNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuICBkM19oc2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpO1xuICAgIHJldHVybiBuZXcgZDNfaHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgLyBrKTtcbiAgfTtcbiAgZDNfaHNsUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgcmV0dXJuIG5ldyBkM19oc2wodGhpcy5oLCB0aGlzLnMsIGsgKiB0aGlzLmwpO1xuICB9O1xuICBkM19oc2xQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2hzbF9yZ2IodGhpcy5oLCB0aGlzLnMsIHRoaXMubCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2hzbF9yZ2IoaCwgcywgbCkge1xuICAgIHZhciBtMSwgbTI7XG4gICAgaCA9IGlzTmFOKGgpID8gMCA6IChoICU9IDM2MCkgPCAwID8gaCArIDM2MCA6IGg7XG4gICAgcyA9IGlzTmFOKHMpID8gMCA6IHMgPCAwID8gMCA6IHMgPiAxID8gMSA6IHM7XG4gICAgbCA9IGwgPCAwID8gMCA6IGwgPiAxID8gMSA6IGw7XG4gICAgbTIgPSBsIDw9IC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICBmdW5jdGlvbiB2KGgpIHtcbiAgICAgIGlmIChoID4gMzYwKSBoIC09IDM2MDsgZWxzZSBpZiAoaCA8IDApIGggKz0gMzYwO1xuICAgICAgaWYgKGggPCA2MCkgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAvIDYwO1xuICAgICAgaWYgKGggPCAxODApIHJldHVybiBtMjtcbiAgICAgIGlmIChoIDwgMjQwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MDtcbiAgICAgIHJldHVybiBtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdnYoaCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQodihoKSAqIDI1NSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgZDNfcmdiKHZ2KGggKyAxMjApLCB2dihoKSwgdnYoaCAtIDEyMCkpO1xuICB9XG4gIGQzLmhjbCA9IGQzX2hjbDtcbiAgZnVuY3Rpb24gZDNfaGNsKGgsIGMsIGwpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2hjbCA/IHZvaWQgKHRoaXMuaCA9ICtoLCB0aGlzLmMgPSArYywgdGhpcy5sID0gK2wpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBoIGluc3RhbmNlb2YgZDNfaGNsID8gbmV3IGQzX2hjbChoLmgsIGguYywgaC5sKSA6IGggaW5zdGFuY2VvZiBkM19sYWIgPyBkM19sYWJfaGNsKGgubCwgaC5hLCBoLmIpIDogZDNfbGFiX2hjbCgoaCA9IGQzX3JnYl9sYWIoKGggPSBkMy5yZ2IoaCkpLnIsIGguZywgaC5iKSkubCwgaC5hLCBoLmIpIDogbmV3IGQzX2hjbChoLCBjLCBsKTtcbiAgfVxuICB2YXIgZDNfaGNsUHJvdG90eXBlID0gZDNfaGNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuICBkM19oY2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBkM19oY2wodGhpcy5oLCB0aGlzLmMsIE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSkpO1xuICB9O1xuICBkM19oY2xQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfaGNsKHRoaXMuaCwgdGhpcy5jLCBNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSk7XG4gIH07XG4gIGQzX2hjbFByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfaGNsX2xhYih0aGlzLmgsIHRoaXMuYywgdGhpcy5sKS5yZ2IoKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfaGNsX2xhYihoLCBjLCBsKSB7XG4gICAgaWYgKGlzTmFOKGgpKSBoID0gMDtcbiAgICBpZiAoaXNOYU4oYykpIGMgPSAwO1xuICAgIHJldHVybiBuZXcgZDNfbGFiKGwsIE1hdGguY29zKGggKj0gZDNfcmFkaWFucykgKiBjLCBNYXRoLnNpbihoKSAqIGMpO1xuICB9XG4gIGQzLmxhYiA9IGQzX2xhYjtcbiAgZnVuY3Rpb24gZDNfbGFiKGwsIGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2xhYiA/IHZvaWQgKHRoaXMubCA9ICtsLCB0aGlzLmEgPSArYSwgdGhpcy5iID0gK2IpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBsIGluc3RhbmNlb2YgZDNfbGFiID8gbmV3IGQzX2xhYihsLmwsIGwuYSwgbC5iKSA6IGwgaW5zdGFuY2VvZiBkM19oY2wgPyBkM19oY2xfbGFiKGwuaCwgbC5jLCBsLmwpIDogZDNfcmdiX2xhYigobCA9IGQzX3JnYihsKSkuciwgbC5nLCBsLmIpIDogbmV3IGQzX2xhYihsLCBhLCBiKTtcbiAgfVxuICB2YXIgZDNfbGFiX0sgPSAxODtcbiAgdmFyIGQzX2xhYl9YID0gLjk1MDQ3LCBkM19sYWJfWSA9IDEsIGQzX2xhYl9aID0gMS4wODg4MztcbiAgdmFyIGQzX2xhYlByb3RvdHlwZSA9IGQzX2xhYi5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcbiAgZDNfbGFiUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfbGFiKE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSksIHRoaXMuYSwgdGhpcy5iKTtcbiAgfTtcbiAgZDNfbGFiUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IGQzX2xhYihNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSwgdGhpcy5hLCB0aGlzLmIpO1xuICB9O1xuICBkM19sYWJQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2xhYl9yZ2IodGhpcy5sLCB0aGlzLmEsIHRoaXMuYik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xhYl9yZ2IobCwgYSwgYikge1xuICAgIHZhciB5ID0gKGwgKyAxNikgLyAxMTYsIHggPSB5ICsgYSAvIDUwMCwgeiA9IHkgLSBiIC8gMjAwO1xuICAgIHggPSBkM19sYWJfeHl6KHgpICogZDNfbGFiX1g7XG4gICAgeSA9IGQzX2xhYl94eXooeSkgKiBkM19sYWJfWTtcbiAgICB6ID0gZDNfbGFiX3h5eih6KSAqIGQzX2xhYl9aO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKGQzX3h5el9yZ2IoMy4yNDA0NTQyICogeCAtIDEuNTM3MTM4NSAqIHkgLSAuNDk4NTMxNCAqIHopLCBkM194eXpfcmdiKC0uOTY5MjY2ICogeCArIDEuODc2MDEwOCAqIHkgKyAuMDQxNTU2ICogeiksIGQzX3h5el9yZ2IoLjA1NTY0MzQgKiB4IC0gLjIwNDAyNTkgKiB5ICsgMS4wNTcyMjUyICogeikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xhYl9oY2wobCwgYSwgYikge1xuICAgIHJldHVybiBsID4gMCA/IG5ldyBkM19oY2woTWF0aC5hdGFuMihiLCBhKSAqIGQzX2RlZ3JlZXMsIE1hdGguc3FydChhICogYSArIGIgKiBiKSwgbCkgOiBuZXcgZDNfaGNsKE5hTiwgTmFOLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYWJfeHl6KHgpIHtcbiAgICByZXR1cm4geCA+IC4yMDY4OTMwMzQgPyB4ICogeCAqIHggOiAoeCAtIDQgLyAyOSkgLyA3Ljc4NzAzNztcbiAgfVxuICBmdW5jdGlvbiBkM194eXpfbGFiKHgpIHtcbiAgICByZXR1cm4geCA+IC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiA3Ljc4NzAzNyAqIHggKyA0IC8gMjk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfeHl6X3JnYihyKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoMjU1ICogKHIgPD0gLjAwMzA0ID8gMTIuOTIgKiByIDogMS4wNTUgKiBNYXRoLnBvdyhyLCAxIC8gMi40KSAtIC4wNTUpKTtcbiAgfVxuICBkMy5yZ2IgPSBkM19yZ2I7XG4gIGZ1bmN0aW9uIGQzX3JnYihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBkM19yZ2IgPyB2b2lkICh0aGlzLnIgPSB+fnIsIHRoaXMuZyA9IH5+ZywgdGhpcy5iID0gfn5iKSA6IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gciBpbnN0YW5jZW9mIGQzX3JnYiA/IG5ldyBkM19yZ2Ioci5yLCByLmcsIHIuYikgOiBkM19yZ2JfcGFyc2UoXCJcIiArIHIsIGQzX3JnYiwgZDNfaHNsX3JnYikgOiBuZXcgZDNfcmdiKHIsIGcsIGIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYk51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgZDNfcmdiKHZhbHVlID4+IDE2LCB2YWx1ZSA+PiA4ICYgMjU1LCB2YWx1ZSAmIDI1NSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfcmdiU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIGQzX3JnYk51bWJlcih2YWx1ZSkgKyBcIlwiO1xuICB9XG4gIHZhciBkM19yZ2JQcm90b3R5cGUgPSBkM19yZ2IucHJvdG90eXBlID0gbmV3IGQzX2NvbG9yKCk7XG4gIGQzX3JnYlByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgdmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmIsIGkgPSAzMDtcbiAgICBpZiAoIXIgJiYgIWcgJiYgIWIpIHJldHVybiBuZXcgZDNfcmdiKGksIGksIGkpO1xuICAgIGlmIChyICYmIHIgPCBpKSByID0gaTtcbiAgICBpZiAoZyAmJiBnIDwgaSkgZyA9IGk7XG4gICAgaWYgKGIgJiYgYiA8IGkpIGIgPSBpO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKE1hdGgubWluKDI1NSwgciAvIGspLCBNYXRoLm1pbigyNTUsIGcgLyBrKSwgTWF0aC5taW4oMjU1LCBiIC8gaykpO1xuICB9O1xuICBkM19yZ2JQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKTtcbiAgICByZXR1cm4gbmV3IGQzX3JnYihrICogdGhpcy5yLCBrICogdGhpcy5nLCBrICogdGhpcy5iKTtcbiAgfTtcbiAgZDNfcmdiUHJvdG90eXBlLmhzbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19yZ2JfaHNsKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICB9O1xuICBkM19yZ2JQcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KHRoaXMucikgKyBkM19yZ2JfaGV4KHRoaXMuZykgKyBkM19yZ2JfaGV4KHRoaXMuYik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3JnYl9oZXgodikge1xuICAgIHJldHVybiB2IDwgMTYgPyBcIjBcIiArIE1hdGgubWF4KDAsIHYpLnRvU3RyaW5nKDE2KSA6IE1hdGgubWluKDI1NSwgdikudG9TdHJpbmcoMTYpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZShmb3JtYXQsIHJnYiwgaHNsKSB7XG4gICAgdmFyIHIgPSAwLCBnID0gMCwgYiA9IDAsIG0xLCBtMiwgY29sb3I7XG4gICAgbTEgPSAvKFthLXpdKylcXCgoLiopXFwpLy5leGVjKGZvcm1hdCA9IGZvcm1hdC50b0xvd2VyQ2FzZSgpKTtcbiAgICBpZiAobTEpIHtcbiAgICAgIG0yID0gbTFbMl0uc3BsaXQoXCIsXCIpO1xuICAgICAgc3dpdGNoIChtMVsxXSkge1xuICAgICAgIGNhc2UgXCJoc2xcIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBoc2wocGFyc2VGbG9hdChtMlswXSksIHBhcnNlRmxvYXQobTJbMV0pIC8gMTAwLCBwYXJzZUZsb2F0KG0yWzJdKSAvIDEwMCk7XG4gICAgICAgIH1cblxuICAgICAgIGNhc2UgXCJyZ2JcIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiByZ2IoZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzBdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzFdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzJdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbG9yID0gZDNfcmdiX25hbWVzLmdldChmb3JtYXQpKSB7XG4gICAgICByZXR1cm4gcmdiKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ICE9IG51bGwgJiYgZm9ybWF0LmNoYXJBdCgwKSA9PT0gXCIjXCIgJiYgIWlzTmFOKGNvbG9yID0gcGFyc2VJbnQoZm9ybWF0LnNsaWNlKDEpLCAxNikpKSB7XG4gICAgICBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICByID0gKGNvbG9yICYgMzg0MCkgPj4gNDtcbiAgICAgICAgciA9IHIgPj4gNCB8IHI7XG4gICAgICAgIGcgPSBjb2xvciAmIDI0MDtcbiAgICAgICAgZyA9IGcgPj4gNCB8IGc7XG4gICAgICAgIGIgPSBjb2xvciAmIDE1O1xuICAgICAgICBiID0gYiA8PCA0IHwgYjtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNykge1xuICAgICAgICByID0gKGNvbG9yICYgMTY3MTE2ODApID4+IDE2O1xuICAgICAgICBnID0gKGNvbG9yICYgNjUyODApID4+IDg7XG4gICAgICAgIGIgPSBjb2xvciAmIDI1NTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJnYihyLCBnLCBiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfaHNsKHIsIGcsIGIpIHtcbiAgICB2YXIgbWluID0gTWF0aC5taW4ociAvPSAyNTUsIGcgLz0gMjU1LCBiIC89IDI1NSksIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLCBkID0gbWF4IC0gbWluLCBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuICAgIGlmIChkKSB7XG4gICAgICBzID0gbCA8IC41ID8gZCAvIChtYXggKyBtaW4pIDogZCAvICgyIC0gbWF4IC0gbWluKTtcbiAgICAgIGlmIChyID09IG1heCkgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBlbHNlIGlmIChnID09IG1heCkgaCA9IChiIC0gcikgLyBkICsgMjsgZWxzZSBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IE5hTjtcbiAgICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IGQzX2hzbChoLCBzLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfbGFiKHIsIGcsIGIpIHtcbiAgICByID0gZDNfcmdiX3h5eihyKTtcbiAgICBnID0gZDNfcmdiX3h5eihnKTtcbiAgICBiID0gZDNfcmdiX3h5eihiKTtcbiAgICB2YXIgeCA9IGQzX3h5el9sYWIoKC40MTI0NTY0ICogciArIC4zNTc1NzYxICogZyArIC4xODA0Mzc1ICogYikgLyBkM19sYWJfWCksIHkgPSBkM194eXpfbGFiKCguMjEyNjcyOSAqIHIgKyAuNzE1MTUyMiAqIGcgKyAuMDcyMTc1ICogYikgLyBkM19sYWJfWSksIHogPSBkM194eXpfbGFiKCguMDE5MzMzOSAqIHIgKyAuMTE5MTkyICogZyArIC45NTAzMDQxICogYikgLyBkM19sYWJfWik7XG4gICAgcmV0dXJuIGQzX2xhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYl94eXoocikge1xuICAgIHJldHVybiAociAvPSAyNTUpIDw9IC4wNDA0NSA/IHIgLyAxMi45MiA6IE1hdGgucG93KChyICsgLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfcGFyc2VOdW1iZXIoYykge1xuICAgIHZhciBmID0gcGFyc2VGbG9hdChjKTtcbiAgICByZXR1cm4gYy5jaGFyQXQoYy5sZW5ndGggLSAxKSA9PT0gXCIlXCIgPyBNYXRoLnJvdW5kKGYgKiAyLjU1KSA6IGY7XG4gIH1cbiAgdmFyIGQzX3JnYl9uYW1lcyA9IGQzLm1hcCh7XG4gICAgYWxpY2VibHVlOiAxNTc5MjM4MyxcbiAgICBhbnRpcXVld2hpdGU6IDE2NDQ0Mzc1LFxuICAgIGFxdWE6IDY1NTM1LFxuICAgIGFxdWFtYXJpbmU6IDgzODg1NjQsXG4gICAgYXp1cmU6IDE1Nzk0MTc1LFxuICAgIGJlaWdlOiAxNjExOTI2MCxcbiAgICBiaXNxdWU6IDE2NzcwMjQ0LFxuICAgIGJsYWNrOiAwLFxuICAgIGJsYW5jaGVkYWxtb25kOiAxNjc3MjA0NSxcbiAgICBibHVlOiAyNTUsXG4gICAgYmx1ZXZpb2xldDogOTA1NTIwMixcbiAgICBicm93bjogMTA4MjQyMzQsXG4gICAgYnVybHl3b29kOiAxNDU5NjIzMSxcbiAgICBjYWRldGJsdWU6IDYyNjY1MjgsXG4gICAgY2hhcnRyZXVzZTogODM4ODM1MixcbiAgICBjaG9jb2xhdGU6IDEzNzg5NDcwLFxuICAgIGNvcmFsOiAxNjc0NDI3MixcbiAgICBjb3JuZmxvd2VyYmx1ZTogNjU5MTk4MSxcbiAgICBjb3Juc2lsazogMTY3NzUzODgsXG4gICAgY3JpbXNvbjogMTQ0MjMxMDAsXG4gICAgY3lhbjogNjU1MzUsXG4gICAgZGFya2JsdWU6IDEzOSxcbiAgICBkYXJrY3lhbjogMzU3MjMsXG4gICAgZGFya2dvbGRlbnJvZDogMTIwOTI5MzksXG4gICAgZGFya2dyYXk6IDExMTE5MDE3LFxuICAgIGRhcmtncmVlbjogMjU2MDAsXG4gICAgZGFya2dyZXk6IDExMTE5MDE3LFxuICAgIGRhcmtraGFraTogMTI0MzMyNTksXG4gICAgZGFya21hZ2VudGE6IDkxMDk2NDMsXG4gICAgZGFya29saXZlZ3JlZW46IDU1OTc5OTksXG4gICAgZGFya29yYW5nZTogMTY3NDc1MjAsXG4gICAgZGFya29yY2hpZDogMTAwNDAwMTIsXG4gICAgZGFya3JlZDogOTEwOTUwNCxcbiAgICBkYXJrc2FsbW9uOiAxNTMwODQxMCxcbiAgICBkYXJrc2VhZ3JlZW46IDk0MTk5MTksXG4gICAgZGFya3NsYXRlYmx1ZTogNDczNDM0NyxcbiAgICBkYXJrc2xhdGVncmF5OiAzMTAwNDk1LFxuICAgIGRhcmtzbGF0ZWdyZXk6IDMxMDA0OTUsXG4gICAgZGFya3R1cnF1b2lzZTogNTI5NDUsXG4gICAgZGFya3Zpb2xldDogOTY5OTUzOSxcbiAgICBkZWVwcGluazogMTY3MTY5NDcsXG4gICAgZGVlcHNreWJsdWU6IDQ5MTUxLFxuICAgIGRpbWdyYXk6IDY5MDgyNjUsXG4gICAgZGltZ3JleTogNjkwODI2NSxcbiAgICBkb2RnZXJibHVlOiAyMDAzMTk5LFxuICAgIGZpcmVicmljazogMTE2NzQxNDYsXG4gICAgZmxvcmFsd2hpdGU6IDE2Nzc1OTIwLFxuICAgIGZvcmVzdGdyZWVuOiAyMjYzODQyLFxuICAgIGZ1Y2hzaWE6IDE2NzExOTM1LFxuICAgIGdhaW5zYm9ybzogMTQ0NzQ0NjAsXG4gICAgZ2hvc3R3aGl0ZTogMTYzMTY2NzEsXG4gICAgZ29sZDogMTY3NjY3MjAsXG4gICAgZ29sZGVucm9kOiAxNDMyOTEyMCxcbiAgICBncmF5OiA4NDIxNTA0LFxuICAgIGdyZWVuOiAzMjc2OCxcbiAgICBncmVlbnllbGxvdzogMTE0MDMwNTUsXG4gICAgZ3JleTogODQyMTUwNCxcbiAgICBob25leWRldzogMTU3OTQxNjAsXG4gICAgaG90cGluazogMTY3Mzg3NDAsXG4gICAgaW5kaWFucmVkOiAxMzQ1ODUyNCxcbiAgICBpbmRpZ286IDQ5MTUzMzAsXG4gICAgaXZvcnk6IDE2Nzc3MjAwLFxuICAgIGtoYWtpOiAxNTc4NzY2MCxcbiAgICBsYXZlbmRlcjogMTUxMzI0MTAsXG4gICAgbGF2ZW5kZXJibHVzaDogMTY3NzMzNjUsXG4gICAgbGF3bmdyZWVuOiA4MTkwOTc2LFxuICAgIGxlbW9uY2hpZmZvbjogMTY3NzU4ODUsXG4gICAgbGlnaHRibHVlOiAxMTM5MzI1NCxcbiAgICBsaWdodGNvcmFsOiAxNTc2MTUzNixcbiAgICBsaWdodGN5YW46IDE0NzQ1NTk5LFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAxNjQ0ODIxMCxcbiAgICBsaWdodGdyYXk6IDEzODgyMzIzLFxuICAgIGxpZ2h0Z3JlZW46IDk0OTgyNTYsXG4gICAgbGlnaHRncmV5OiAxMzg4MjMyMyxcbiAgICBsaWdodHBpbms6IDE2NzU4NDY1LFxuICAgIGxpZ2h0c2FsbW9uOiAxNjc1Mjc2MixcbiAgICBsaWdodHNlYWdyZWVuOiAyMTQyODkwLFxuICAgIGxpZ2h0c2t5Ymx1ZTogODkwMDM0NixcbiAgICBsaWdodHNsYXRlZ3JheTogNzgzMzc1MyxcbiAgICBsaWdodHNsYXRlZ3JleTogNzgzMzc1MyxcbiAgICBsaWdodHN0ZWVsYmx1ZTogMTE1ODQ3MzQsXG4gICAgbGlnaHR5ZWxsb3c6IDE2Nzc3MTg0LFxuICAgIGxpbWU6IDY1MjgwLFxuICAgIGxpbWVncmVlbjogMzMyOTMzMCxcbiAgICBsaW5lbjogMTY0NDU2NzAsXG4gICAgbWFnZW50YTogMTY3MTE5MzUsXG4gICAgbWFyb29uOiA4Mzg4NjA4LFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IDY3MzczMjIsXG4gICAgbWVkaXVtYmx1ZTogMjA1LFxuICAgIG1lZGl1bW9yY2hpZDogMTIyMTE2NjcsXG4gICAgbWVkaXVtcHVycGxlOiA5NjYyNjgzLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAzOTc4MDk3LFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogODA4Nzc5MCxcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogNjQxNTQsXG4gICAgbWVkaXVtdHVycXVvaXNlOiA0NzcyMzAwLFxuICAgIG1lZGl1bXZpb2xldHJlZDogMTMwNDcxNzMsXG4gICAgbWlkbmlnaHRibHVlOiAxNjQ0OTEyLFxuICAgIG1pbnRjcmVhbTogMTYxMjE4NTAsXG4gICAgbWlzdHlyb3NlOiAxNjc3MDI3MyxcbiAgICBtb2NjYXNpbjogMTY3NzAyMjksXG4gICAgbmF2YWpvd2hpdGU6IDE2NzY4Njg1LFxuICAgIG5hdnk6IDEyOCxcbiAgICBvbGRsYWNlOiAxNjY0MzU1OCxcbiAgICBvbGl2ZTogODQyMTM3NixcbiAgICBvbGl2ZWRyYWI6IDcwNDg3MzksXG4gICAgb3JhbmdlOiAxNjc1MzkyMCxcbiAgICBvcmFuZ2VyZWQ6IDE2NzI5MzQ0LFxuICAgIG9yY2hpZDogMTQzMTU3MzQsXG4gICAgcGFsZWdvbGRlbnJvZDogMTU2NTcxMzAsXG4gICAgcGFsZWdyZWVuOiAxMDAyNTg4MCxcbiAgICBwYWxldHVycXVvaXNlOiAxMTUyOTk2NixcbiAgICBwYWxldmlvbGV0cmVkOiAxNDM4MTIwMyxcbiAgICBwYXBheWF3aGlwOiAxNjc3MzA3NyxcbiAgICBwZWFjaHB1ZmY6IDE2NzY3NjczLFxuICAgIHBlcnU6IDEzNDY4OTkxLFxuICAgIHBpbms6IDE2NzYxMDM1LFxuICAgIHBsdW06IDE0NTI0NjM3LFxuICAgIHBvd2RlcmJsdWU6IDExNTkxOTEwLFxuICAgIHB1cnBsZTogODM4ODczNixcbiAgICByZWJlY2NhcHVycGxlOiA2Njk3ODgxLFxuICAgIHJlZDogMTY3MTE2ODAsXG4gICAgcm9zeWJyb3duOiAxMjM1NzUxOSxcbiAgICByb3lhbGJsdWU6IDQyODY5NDUsXG4gICAgc2FkZGxlYnJvd246IDkxMjcxODcsXG4gICAgc2FsbW9uOiAxNjQxNjg4MixcbiAgICBzYW5keWJyb3duOiAxNjAzMjg2NCxcbiAgICBzZWFncmVlbjogMzA1MDMyNyxcbiAgICBzZWFzaGVsbDogMTY3NzQ2MzgsXG4gICAgc2llbm5hOiAxMDUwNjc5NyxcbiAgICBzaWx2ZXI6IDEyNjMyMjU2LFxuICAgIHNreWJsdWU6IDg5MDAzMzEsXG4gICAgc2xhdGVibHVlOiA2OTcwMDYxLFxuICAgIHNsYXRlZ3JheTogNzM3Mjk0NCxcbiAgICBzbGF0ZWdyZXk6IDczNzI5NDQsXG4gICAgc25vdzogMTY3NzU5MzAsXG4gICAgc3ByaW5nZ3JlZW46IDY1NDA3LFxuICAgIHN0ZWVsYmx1ZTogNDYyMDk4MCxcbiAgICB0YW46IDEzODA4NzgwLFxuICAgIHRlYWw6IDMyODk2LFxuICAgIHRoaXN0bGU6IDE0MjA0ODg4LFxuICAgIHRvbWF0bzogMTY3MzcwOTUsXG4gICAgdHVycXVvaXNlOiA0MjUxODU2LFxuICAgIHZpb2xldDogMTU2MzEwODYsXG4gICAgd2hlYXQ6IDE2MTEzMzMxLFxuICAgIHdoaXRlOiAxNjc3NzIxNSxcbiAgICB3aGl0ZXNtb2tlOiAxNjExOTI4NSxcbiAgICB5ZWxsb3c6IDE2Nzc2OTYwLFxuICAgIHllbGxvd2dyZWVuOiAxMDE0NTA3NFxuICB9KTtcbiAgZDNfcmdiX25hbWVzLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGQzX3JnYl9uYW1lcy5zZXQoa2V5LCBkM19yZ2JOdW1iZXIodmFsdWUpKTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGQzX2Z1bmN0b3Iodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdiA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbiAgfVxuICBkMy5mdW5jdG9yID0gZDNfZnVuY3RvcjtcbiAgZDMueGhyID0gZDNfeGhyVHlwZShkM19pZGVudGl0eSk7XG4gIGZ1bmN0aW9uIGQzX3hoclR5cGUocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCBtaW1lVHlwZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBtaW1lVHlwZSA9PT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjayA9IG1pbWVUeXBlLCBcbiAgICAgIG1pbWVUeXBlID0gbnVsbDtcbiAgICAgIHJldHVybiBkM194aHIodXJsLCBtaW1lVHlwZSwgcmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3hocih1cmwsIG1pbWVUeXBlLCByZXNwb25zZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgeGhyID0ge30sIGRpc3BhdGNoID0gZDMuZGlzcGF0Y2goXCJiZWZvcmVzZW5kXCIsIFwicHJvZ3Jlc3NcIiwgXCJsb2FkXCIsIFwiZXJyb3JcIiksIGhlYWRlcnMgPSB7fSwgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLCByZXNwb25zZVR5cGUgPSBudWxsO1xuICAgIGlmICh0aGlzLlhEb21haW5SZXF1ZXN0ICYmICEoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiByZXF1ZXN0KSAmJiAvXihodHRwKHMpPzopP1xcL1xcLy8udGVzdCh1cmwpKSByZXF1ZXN0ID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgXCJvbmxvYWRcIiBpbiByZXF1ZXN0ID8gcmVxdWVzdC5vbmxvYWQgPSByZXF1ZXN0Lm9uZXJyb3IgPSByZXNwb25kIDogcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlcXVlc3QucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZCgpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gcmVzcG9uZCgpIHtcbiAgICAgIHZhciBzdGF0dXMgPSByZXF1ZXN0LnN0YXR1cywgcmVzdWx0O1xuICAgICAgaWYgKCFzdGF0dXMgJiYgZDNfeGhySGFzUmVzcG9uc2UocmVxdWVzdCkgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoLmxvYWQuY2FsbCh4aHIsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgbyA9IGQzLmV2ZW50O1xuICAgICAgZDMuZXZlbnQgPSBldmVudDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRpc3BhdGNoLnByb2dyZXNzLmNhbGwoeGhyLCByZXF1ZXN0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzLmV2ZW50ID0gbztcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5oZWFkZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgbmFtZSA9IChuYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGhlYWRlcnNbbmFtZV07XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIGhlYWRlcnNbbmFtZV07IGVsc2UgaGVhZGVyc1tuYW1lXSA9IHZhbHVlICsgXCJcIjtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfTtcbiAgICB4aHIubWltZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWltZVR5cGU7XG4gICAgICBtaW1lVHlwZSA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmVzcG9uc2VUeXBlO1xuICAgICAgcmVzcG9uc2VUeXBlID0gdmFsdWU7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgeGhyLnJlc3BvbnNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3BvbnNlID0gdmFsdWU7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgWyBcImdldFwiLCBcInBvc3RcIiBdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICB4aHJbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geGhyLnNlbmQuYXBwbHkoeGhyLCBbIG1ldGhvZCBdLmNvbmNhdChkM19hcnJheShhcmd1bWVudHMpKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHhoci5zZW5kID0gZnVuY3Rpb24obWV0aG9kLCBkYXRhLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgICAgIHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiAhKFwiYWNjZXB0XCIgaW4gaGVhZGVycykpIGhlYWRlcnNbXCJhY2NlcHRcIl0gPSBtaW1lVHlwZSArIFwiLCovKlwiO1xuICAgICAgaWYgKHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcikgZm9yICh2YXIgbmFtZSBpbiBoZWFkZXJzKSByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIobmFtZSwgaGVhZGVyc1tuYW1lXSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUpIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZSk7XG4gICAgICBpZiAocmVzcG9uc2VUeXBlICE9IG51bGwpIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHhoci5vbihcImVycm9yXCIsIGNhbGxiYWNrKS5vbihcImxvYWRcIiwgZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXF1ZXN0KTtcbiAgICAgIH0pO1xuICAgICAgZGlzcGF0Y2guYmVmb3Jlc2VuZC5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICByZXF1ZXN0LnNlbmQoZGF0YSA9PSBudWxsID8gbnVsbCA6IGRhdGEpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIGQzLnJlYmluZCh4aHIsIGRpc3BhdGNoLCBcIm9uXCIpO1xuICAgIHJldHVybiBjYWxsYmFjayA9PSBudWxsID8geGhyIDogeGhyLmdldChkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spKTtcbiAgfVxuICBmdW5jdGlvbiBkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gY2FsbGJhY2subGVuZ3RoID09PSAxID8gZnVuY3Rpb24oZXJyb3IsIHJlcXVlc3QpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyByZXF1ZXN0IDogbnVsbCk7XG4gICAgfSA6IGNhbGxiYWNrO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3hockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICB2YXIgdHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xuICAgIHJldHVybiB0eXBlICYmIHR5cGUgIT09IFwidGV4dFwiID8gcmVxdWVzdC5yZXNwb25zZSA6IHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9XG4gIGQzLmRzdiA9IGZ1bmN0aW9uKGRlbGltaXRlciwgbWltZVR5cGUpIHtcbiAgICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKCdbXCInICsgZGVsaW1pdGVyICsgXCJcXG5dXCIpLCBkZWxpbWl0ZXJDb2RlID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG4gICAgZnVuY3Rpb24gZHN2KHVybCwgcm93LCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcbiAgICAgIHZhciB4aHIgPSBkM194aHIodXJsLCBtaW1lVHlwZSwgcm93ID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2Uocm93KSwgY2FsbGJhY2spO1xuICAgICAgeGhyLnJvdyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB4aHIucmVzcG9uc2UoKHJvdyA9IF8pID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2UoXykpIDogcm93O1xuICAgICAgfTtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0eXBlZFJlc3BvbnNlKGYpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQsIGYpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZHN2LnBhcnNlID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIG87XG4gICAgICByZXR1cm4gZHN2LnBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgICAgaWYgKG8pIHJldHVybiBvKHJvdywgaSAtIDEpO1xuICAgICAgICB2YXIgYSA9IG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgcm93Lm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gICAgICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuICAgICAgICBvID0gZiA/IGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgICAgIHJldHVybiBmKGEocm93KSwgaSk7XG4gICAgICAgIH0gOiBhO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBkc3YucGFyc2VSb3dzID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIEVPTCA9IHt9LCBFT0YgPSB7fSwgcm93cyA9IFtdLCBOID0gdGV4dC5sZW5ndGgsIEkgPSAwLCBuID0gMCwgdCwgZW9sO1xuICAgICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7XG4gICAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuICAgICAgICB2YXIgaiA9IEk7XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IDM0KSB7XG4gICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAzNCkge1xuICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMzQpIGJyZWFrO1xuICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEkgPSBpICsgMjtcbiAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICAgICAgaWYgKGMgPT09IDEzKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpICsgMikgPT09IDEwKSArK0k7XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAxMCkge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkpLnJlcGxhY2UoL1wiXCIvZywgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgICAgdmFyIGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSwgayA9IDE7XG4gICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlOyBlbHNlIGlmIChjID09PSAxMykge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IDEwKSArK0ksICsraztcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgIT09IGRlbGltaXRlckNvZGUpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIEkgLSBrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcbiAgICAgICAgICBhLnB1c2godCk7XG4gICAgICAgICAgdCA9IHRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGYgJiYgKGEgPSBmKGEsIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICByb3dzLnB1c2goYSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm93cztcbiAgICB9O1xuICAgIGRzdi5mb3JtYXQgPSBmdW5jdGlvbihyb3dzKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dzWzBdKSkgcmV0dXJuIGRzdi5mb3JtYXRSb3dzKHJvd3MpO1xuICAgICAgdmFyIGZpZWxkU2V0ID0gbmV3IGQzX1NldCgpLCBmaWVsZHMgPSBbXTtcbiAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgZm9yICh2YXIgZmllbGQgaW4gcm93KSB7XG4gICAgICAgICAgaWYgKCFmaWVsZFNldC5oYXMoZmllbGQpKSB7XG4gICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZFNldC5hZGQoZmllbGQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFsgZmllbGRzLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpIF0uY29uY2F0KHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICByZXR1cm4gZmllbGRzLm1hcChmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbZmllbGRdKTtcbiAgICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBkc3YuZm9ybWF0Um93cyA9IGZ1bmN0aW9uKHJvd3MpIHtcbiAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgICByZXR1cm4gcmVGb3JtYXQudGVzdCh0ZXh0KSA/ICdcIicgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgJ1wiXCInKSArICdcIicgOiB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gZHN2O1xuICB9O1xuICBkMy5jc3YgPSBkMy5kc3YoXCIsXCIsIFwidGV4dC9jc3ZcIik7XG4gIGQzLnRzdiA9IGQzLmRzdihcIlx0XCIsIFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiKTtcbiAgdmFyIGQzX3RpbWVyX3F1ZXVlSGVhZCwgZDNfdGltZXJfcXVldWVUYWlsLCBkM190aW1lcl9pbnRlcnZhbCwgZDNfdGltZXJfdGltZW91dCwgZDNfdGltZXJfZnJhbWUgPSB0aGlzW2QzX3ZlbmRvclN5bWJvbCh0aGlzLCBcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiKV0gfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNyk7XG4gIH07XG4gIGQzLnRpbWVyID0gZnVuY3Rpb24oKSB7XG4gICAgZDNfdGltZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aGVuKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChuIDwgMikgZGVsYXkgPSAwO1xuICAgIGlmIChuIDwgMykgdGhlbiA9IERhdGUubm93KCk7XG4gICAgdmFyIHRpbWUgPSB0aGVuICsgZGVsYXksIHRpbWVyID0ge1xuICAgICAgYzogY2FsbGJhY2ssXG4gICAgICB0OiB0aW1lLFxuICAgICAgbjogbnVsbFxuICAgIH07XG4gICAgaWYgKGQzX3RpbWVyX3F1ZXVlVGFpbCkgZDNfdGltZXJfcXVldWVUYWlsLm4gPSB0aW1lcjsgZWxzZSBkM190aW1lcl9xdWV1ZUhlYWQgPSB0aW1lcjtcbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0aW1lcjtcbiAgICBpZiAoIWQzX3RpbWVyX2ludGVydmFsKSB7XG4gICAgICBkM190aW1lcl90aW1lb3V0ID0gY2xlYXJUaW1lb3V0KGQzX3RpbWVyX3RpbWVvdXQpO1xuICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG4gICAgfVxuICAgIHJldHVybiB0aW1lcjtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lcl9zdGVwKCkge1xuICAgIHZhciBub3cgPSBkM190aW1lcl9tYXJrKCksIGRlbGF5ID0gZDNfdGltZXJfc3dlZXAoKSAtIG5vdztcbiAgICBpZiAoZGVsYXkgPiAyNCkge1xuICAgICAgaWYgKGlzRmluaXRlKGRlbGF5KSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZDNfdGltZXJfdGltZW91dCk7XG4gICAgICAgIGQzX3RpbWVyX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGQzX3RpbWVyX3N0ZXAsIGRlbGF5KTtcbiAgICAgIH1cbiAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG4gICAgfVxuICB9XG4gIGQzLnRpbWVyLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgZDNfdGltZXJfbWFyaygpO1xuICAgIGQzX3RpbWVyX3N3ZWVwKCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RpbWVyX21hcmsoKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCksIHRpbWVyID0gZDNfdGltZXJfcXVldWVIZWFkO1xuICAgIHdoaWxlICh0aW1lcikge1xuICAgICAgaWYgKG5vdyA+PSB0aW1lci50ICYmIHRpbWVyLmMobm93IC0gdGltZXIudCkpIHRpbWVyLmMgPSBudWxsO1xuICAgICAgdGltZXIgPSB0aW1lci5uO1xuICAgIH1cbiAgICByZXR1cm4gbm93O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVyX3N3ZWVwKCkge1xuICAgIHZhciB0MCwgdDEgPSBkM190aW1lcl9xdWV1ZUhlYWQsIHRpbWUgPSBJbmZpbml0eTtcbiAgICB3aGlsZSAodDEpIHtcbiAgICAgIGlmICh0MS5jKSB7XG4gICAgICAgIGlmICh0MS50IDwgdGltZSkgdGltZSA9IHQxLnQ7XG4gICAgICAgIHQxID0gKHQwID0gdDEpLm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0MSA9IHQwID8gdDAubiA9IHQxLm4gOiBkM190aW1lcl9xdWV1ZUhlYWQgPSB0MS5uO1xuICAgICAgfVxuICAgIH1cbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0MDtcbiAgICByZXR1cm4gdGltZTtcbiAgfVxuICBmdW5jdGlvbiBkM19mb3JtYXRfcHJlY2lzaW9uKHgsIHApIHtcbiAgICByZXR1cm4gcCAtICh4ID8gTWF0aC5jZWlsKE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwKSA6IDEpO1xuICB9XG4gIGQzLnJvdW5kID0gZnVuY3Rpb24oeCwgbikge1xuICAgIHJldHVybiBuID8gTWF0aC5yb3VuZCh4ICogKG4gPSBNYXRoLnBvdygxMCwgbikpKSAvIG4gOiBNYXRoLnJvdW5kKHgpO1xuICB9O1xuICB2YXIgZDNfZm9ybWF0UHJlZml4ZXMgPSBbIFwieVwiLCBcInpcIiwgXCJhXCIsIFwiZlwiLCBcInBcIiwgXCJuXCIsIFwiwrVcIiwgXCJtXCIsIFwiXCIsIFwia1wiLCBcIk1cIiwgXCJHXCIsIFwiVFwiLCBcIlBcIiwgXCJFXCIsIFwiWlwiLCBcIllcIiBdLm1hcChkM19mb3JtYXRQcmVmaXgpO1xuICBkMy5mb3JtYXRQcmVmaXggPSBmdW5jdGlvbih2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlmICh2YWx1ZSA9ICt2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgKj0gLTE7XG4gICAgICBpZiAocHJlY2lzaW9uKSB2YWx1ZSA9IGQzLnJvdW5kKHZhbHVlLCBkM19mb3JtYXRfcHJlY2lzaW9uKHZhbHVlLCBwcmVjaXNpb24pKTtcbiAgICAgIGkgPSAxICsgTWF0aC5mbG9vcigxZS0xMiArIE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4xMCk7XG4gICAgICBpID0gTWF0aC5tYXgoLTI0LCBNYXRoLm1pbigyNCwgTWF0aC5mbG9vcigoaSAtIDEpIC8gMykgKiAzKSk7XG4gICAgfVxuICAgIHJldHVybiBkM19mb3JtYXRQcmVmaXhlc1s4ICsgaSAvIDNdO1xuICB9O1xuICBmdW5jdGlvbiBkM19mb3JtYXRQcmVmaXgoZCwgaSkge1xuICAgIHZhciBrID0gTWF0aC5wb3coMTAsIGFicyg4IC0gaSkgKiAzKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2NhbGU6IGkgPiA4ID8gZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZCAvIGs7XG4gICAgICB9IDogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZCAqIGs7XG4gICAgICB9LFxuICAgICAgc3ltYm9sOiBkXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLCBsb2NhbGVfdGhvdXNhbmRzID0gbG9jYWxlLnRob3VzYW5kcywgbG9jYWxlX2dyb3VwaW5nID0gbG9jYWxlLmdyb3VwaW5nLCBsb2NhbGVfY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksIGZvcm1hdEdyb3VwID0gbG9jYWxlX2dyb3VwaW5nICYmIGxvY2FsZV90aG91c2FuZHMgPyBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLCB0ID0gW10sIGogPSAwLCBnID0gbG9jYWxlX2dyb3VwaW5nWzBdLCBsZW5ndGggPSAwO1xuICAgICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgICBnID0gbG9jYWxlX2dyb3VwaW5nW2ogPSAoaiArIDEpICUgbG9jYWxlX2dyb3VwaW5nLmxlbmd0aF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbihsb2NhbGVfdGhvdXNhbmRzKTtcbiAgICB9IDogZDNfaWRlbnRpdHk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIG1hdGNoID0gZDNfZm9ybWF0X3JlLmV4ZWMoc3BlY2lmaWVyKSwgZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiLCBhbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiLCBzaWduID0gbWF0Y2hbM10gfHwgXCItXCIsIHN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCIsIHpmaWxsID0gbWF0Y2hbNV0sIHdpZHRoID0gK21hdGNoWzZdLCBjb21tYSA9IG1hdGNoWzddLCBwcmVjaXNpb24gPSBtYXRjaFs4XSwgdHlwZSA9IG1hdGNoWzldLCBzY2FsZSA9IDEsIHByZWZpeCA9IFwiXCIsIHN1ZmZpeCA9IFwiXCIsIGludGVnZXIgPSBmYWxzZSwgZXhwb25lbnQgPSB0cnVlO1xuICAgICAgaWYgKHByZWNpc2lvbikgcHJlY2lzaW9uID0gK3ByZWNpc2lvbi5zdWJzdHJpbmcoMSk7XG4gICAgICBpZiAoemZpbGwgfHwgZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSB7XG4gICAgICAgIHpmaWxsID0gZmlsbCA9IFwiMFwiO1xuICAgICAgICBhbGlnbiA9IFwiPVwiO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgY2FzZSBcIm5cIjpcbiAgICAgICAgY29tbWEgPSB0cnVlO1xuICAgICAgICB0eXBlID0gXCJnXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcIiVcIjpcbiAgICAgICAgc2NhbGUgPSAxMDA7XG4gICAgICAgIHN1ZmZpeCA9IFwiJVwiO1xuICAgICAgICB0eXBlID0gXCJmXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcInBcIjpcbiAgICAgICAgc2NhbGUgPSAxMDA7XG4gICAgICAgIHN1ZmZpeCA9IFwiJVwiO1xuICAgICAgICB0eXBlID0gXCJyXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcImJcIjpcbiAgICAgICBjYXNlIFwib1wiOlxuICAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgaWYgKHN5bWJvbCA9PT0gXCIjXCIpIHByZWZpeCA9IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgZXhwb25lbnQgPSBmYWxzZTtcblxuICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIGludGVnZXIgPSB0cnVlO1xuICAgICAgICBwcmVjaXNpb24gPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIHNjYWxlID0gLTE7XG4gICAgICAgIHR5cGUgPSBcInJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoc3ltYm9sID09PSBcIiRcIikgcHJlZml4ID0gbG9jYWxlX2N1cnJlbmN5WzBdLCBzdWZmaXggPSBsb2NhbGVfY3VycmVuY3lbMV07XG4gICAgICBpZiAodHlwZSA9PSBcInJcIiAmJiAhcHJlY2lzaW9uKSB0eXBlID0gXCJnXCI7XG4gICAgICBpZiAocHJlY2lzaW9uICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJnXCIpIHByZWNpc2lvbiA9IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKTsgZWxzZSBpZiAodHlwZSA9PSBcImVcIiB8fCB0eXBlID09IFwiZlwiKSBwcmVjaXNpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG4gICAgICB9XG4gICAgICB0eXBlID0gZDNfZm9ybWF0X3R5cGVzLmdldCh0eXBlKSB8fCBkM19mb3JtYXRfdHlwZURlZmF1bHQ7XG4gICAgICB2YXIgemNvbW1hID0gemZpbGwgJiYgY29tbWE7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGZ1bGxTdWZmaXggPSBzdWZmaXg7XG4gICAgICAgIGlmIChpbnRlZ2VyICYmIHZhbHVlICUgMSkgcmV0dXJuIFwiXCI7XG4gICAgICAgIHZhciBuZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gKHZhbHVlID0gLXZhbHVlLCBcIi1cIikgOiBzaWduID09PSBcIi1cIiA/IFwiXCIgOiBzaWduO1xuICAgICAgICBpZiAoc2NhbGUgPCAwKSB7XG4gICAgICAgICAgdmFyIHVuaXQgPSBkMy5mb3JtYXRQcmVmaXgodmFsdWUsIHByZWNpc2lvbik7XG4gICAgICAgICAgdmFsdWUgPSB1bml0LnNjYWxlKHZhbHVlKTtcbiAgICAgICAgICBmdWxsU3VmZml4ID0gdW5pdC5zeW1ib2wgKyBzdWZmaXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgKj0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB0eXBlKHZhbHVlLCBwcmVjaXNpb24pO1xuICAgICAgICB2YXIgaSA9IHZhbHVlLmxhc3RJbmRleE9mKFwiLlwiKSwgYmVmb3JlLCBhZnRlcjtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgdmFyIGogPSBleHBvbmVudCA/IHZhbHVlLmxhc3RJbmRleE9mKFwiZVwiKSA6IC0xO1xuICAgICAgICAgIGlmIChqIDwgMCkgYmVmb3JlID0gdmFsdWUsIGFmdGVyID0gXCJcIjsgZWxzZSBiZWZvcmUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgaiksIGFmdGVyID0gdmFsdWUuc3Vic3RyaW5nKGopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IHZhbHVlLnN1YnN0cmluZygwLCBpKTtcbiAgICAgICAgICBhZnRlciA9IGxvY2FsZV9kZWNpbWFsICsgdmFsdWUuc3Vic3RyaW5nKGkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXpmaWxsICYmIGNvbW1hKSBiZWZvcmUgPSBmb3JtYXRHcm91cChiZWZvcmUsIEluZmluaXR5KTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHByZWZpeC5sZW5ndGggKyBiZWZvcmUubGVuZ3RoICsgYWZ0ZXIubGVuZ3RoICsgKHpjb21tYSA/IDAgOiBuZWdhdGl2ZS5sZW5ndGgpLCBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkobGVuZ3RoID0gd2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcbiAgICAgICAgaWYgKHpjb21tYSkgYmVmb3JlID0gZm9ybWF0R3JvdXAocGFkZGluZyArIGJlZm9yZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIGFmdGVyLmxlbmd0aCA6IEluZmluaXR5KTtcbiAgICAgICAgbmVnYXRpdmUgKz0gcHJlZml4O1xuICAgICAgICB2YWx1ZSA9IGJlZm9yZSArIGFmdGVyO1xuICAgICAgICByZXR1cm4gKGFsaWduID09PSBcIjxcIiA/IG5lZ2F0aXZlICsgdmFsdWUgKyBwYWRkaW5nIDogYWxpZ24gPT09IFwiPlwiID8gcGFkZGluZyArIG5lZ2F0aXZlICsgdmFsdWUgOiBhbGlnbiA9PT0gXCJeXCIgPyBwYWRkaW5nLnN1YnN0cmluZygwLCBsZW5ndGggPj49IDEpICsgbmVnYXRpdmUgKyB2YWx1ZSArIHBhZGRpbmcuc3Vic3RyaW5nKGxlbmd0aCkgOiBuZWdhdGl2ZSArICh6Y29tbWEgPyB2YWx1ZSA6IHBhZGRpbmcgKyB2YWx1ZSkpICsgZnVsbFN1ZmZpeDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZm9ybWF0X3JlID0gLyg/OihbXntdKT8oWzw+PV5dKSk/KFsrXFwtIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuLT9cXGQrKT8oW2EteiVdKT8vaTtcbiAgdmFyIGQzX2Zvcm1hdF90eXBlcyA9IGQzLm1hcCh7XG4gICAgYjogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMik7XG4gICAgfSxcbiAgICBjOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgICB9LFxuICAgIG86IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4LnRvU3RyaW5nKDgpO1xuICAgIH0sXG4gICAgeDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpO1xuICAgIH0sXG4gICAgWDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgfSxcbiAgICBnOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b1ByZWNpc2lvbihwKTtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uKHgsIHApIHtcbiAgICAgIHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b0ZpeGVkKHApO1xuICAgIH0sXG4gICAgcjogZnVuY3Rpb24oeCwgcCkge1xuICAgICAgcmV0dXJuICh4ID0gZDMucm91bmQoeCwgZDNfZm9ybWF0X3ByZWNpc2lvbih4LCBwKSkpLnRvRml4ZWQoTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIGQzX2Zvcm1hdF9wcmVjaXNpb24oeCAqICgxICsgMWUtMTUpLCBwKSkpKTtcbiAgICB9XG4gIH0pO1xuICBmdW5jdGlvbiBkM19mb3JtYXRfdHlwZURlZmF1bHQoeCkge1xuICAgIHJldHVybiB4ICsgXCJcIjtcbiAgfVxuICB2YXIgZDNfdGltZSA9IGQzLnRpbWUgPSB7fSwgZDNfZGF0ZSA9IERhdGU7XG4gIGZ1bmN0aW9uIGQzX2RhdGVfdXRjKCkge1xuICAgIHRoaXMuXyA9IG5ldyBEYXRlKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gRGF0ZS5VVEMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGFyZ3VtZW50c1swXSk7XG4gIH1cbiAgZDNfZGF0ZV91dGMucHJvdG90eXBlID0ge1xuICAgIGdldERhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXRlKCk7XG4gICAgfSxcbiAgICBnZXREYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXkoKTtcbiAgICB9LFxuICAgIGdldEZ1bGxZZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDRnVsbFllYXIoKTtcbiAgICB9LFxuICAgIGdldEhvdXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDSG91cnMoKTtcbiAgICB9LFxuICAgIGdldE1pbGxpc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIH0sXG4gICAgZ2V0TWludXRlczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbnV0ZXMoKTtcbiAgICB9LFxuICAgIGdldE1vbnRoOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDTW9udGgoKTtcbiAgICB9LFxuICAgIGdldFNlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENTZWNvbmRzKCk7XG4gICAgfSxcbiAgICBnZXRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VGltZSgpO1xuICAgIH0sXG4gICAgZ2V0VGltZXpvbmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8udmFsdWVPZigpO1xuICAgIH0sXG4gICAgc2V0RGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXRlLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldERheTogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXkuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0RnVsbFllYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDRnVsbFllYXIuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0SG91cnM6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDSG91cnMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TWlsbGlzZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbGxpc2Vjb25kcy5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzZXRNaW51dGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbnV0ZXMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TW9udGg6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDTW9udGguYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0U2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENTZWNvbmRzLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldFRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VGltZS5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xuICB2YXIgZDNfdGltZV9wcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbiAgZnVuY3Rpb24gZDNfdGltZV9pbnRlcnZhbChsb2NhbCwgc3RlcCwgbnVtYmVyKSB7XG4gICAgZnVuY3Rpb24gcm91bmQoZGF0ZSkge1xuICAgICAgdmFyIGQwID0gbG9jYWwoZGF0ZSksIGQxID0gb2Zmc2V0KGQwLCAxKTtcbiAgICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjZWlsKGRhdGUpIHtcbiAgICAgIHN0ZXAoZGF0ZSA9IGxvY2FsKG5ldyBkM19kYXRlKGRhdGUgLSAxKSksIDEpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9mZnNldChkYXRlLCBrKSB7XG4gICAgICBzdGVwKGRhdGUgPSBuZXcgZDNfZGF0ZSgrZGF0ZSksIGspO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlKHQwLCB0MSwgZHQpIHtcbiAgICAgIHZhciB0aW1lID0gY2VpbCh0MCksIHRpbWVzID0gW107XG4gICAgICBpZiAoZHQgPiAxKSB7XG4gICAgICAgIHdoaWxlICh0aW1lIDwgdDEpIHtcbiAgICAgICAgICBpZiAoIShudW1iZXIodGltZSkgJSBkdCkpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKTtcbiAgICAgICAgICBzdGVwKHRpbWUsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAodGltZSA8IHQxKSB0aW1lcy5wdXNoKG5ldyBEYXRlKCt0aW1lKSksIHN0ZXAodGltZSwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGltZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlX3V0Yyh0MCwgdDEsIGR0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBkM19kYXRlID0gZDNfZGF0ZV91dGM7XG4gICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZV91dGMoKTtcbiAgICAgICAgdXRjLl8gPSB0MDtcbiAgICAgICAgcmV0dXJuIHJhbmdlKHV0YywgdDEsIGR0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2NhbC5mbG9vciA9IGxvY2FsO1xuICAgIGxvY2FsLnJvdW5kID0gcm91bmQ7XG4gICAgbG9jYWwuY2VpbCA9IGNlaWw7XG4gICAgbG9jYWwub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIGxvY2FsLnJhbmdlID0gcmFuZ2U7XG4gICAgdmFyIHV0YyA9IGxvY2FsLnV0YyA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKGxvY2FsKTtcbiAgICB1dGMuZmxvb3IgPSB1dGM7XG4gICAgdXRjLnJvdW5kID0gZDNfdGltZV9pbnRlcnZhbF91dGMocm91bmQpO1xuICAgIHV0Yy5jZWlsID0gZDNfdGltZV9pbnRlcnZhbF91dGMoY2VpbCk7XG4gICAgdXRjLm9mZnNldCA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKG9mZnNldCk7XG4gICAgdXRjLnJhbmdlID0gcmFuZ2VfdXRjO1xuICAgIHJldHVybiBsb2NhbDtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2ludGVydmFsX3V0YyhtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICB2YXIgdXRjID0gbmV3IGQzX2RhdGVfdXRjKCk7XG4gICAgICAgIHV0Yy5fID0gZGF0ZTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZCh1dGMsIGspLl87XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzX3RpbWUueWVhciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUgPSBkM190aW1lLmRheShkYXRlKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIHJldHVybiBkYXRlO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9KTtcbiAgZDNfdGltZS55ZWFycyA9IGQzX3RpbWUueWVhci5yYW5nZTtcbiAgZDNfdGltZS55ZWFycy51dGMgPSBkM190aW1lLnllYXIudXRjLnJhbmdlO1xuICBkM190aW1lLmRheSA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkYXkgPSBuZXcgZDNfZGF0ZSgyZTMsIDApO1xuICAgIGRheS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgIHJldHVybiBkYXk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIG9mZnNldCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xuICB9KTtcbiAgZDNfdGltZS5kYXlzID0gZDNfdGltZS5kYXkucmFuZ2U7XG4gIGQzX3RpbWUuZGF5cy51dGMgPSBkM190aW1lLmRheS51dGMucmFuZ2U7XG4gIGQzX3RpbWUuZGF5T2ZZZWFyID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB5ZWFyID0gZDNfdGltZS55ZWFyKGRhdGUpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKChkYXRlIC0geWVhciAtIChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLSB5ZWFyLmdldFRpbWV6b25lT2Zmc2V0KCkpICogNmU0KSAvIDg2NGU1KTtcbiAgfTtcbiAgWyBcInN1bmRheVwiLCBcIm1vbmRheVwiLCBcInR1ZXNkYXlcIiwgXCJ3ZWRuZXNkYXlcIiwgXCJ0aHVyc2RheVwiLCBcImZyaWRheVwiLCBcInNhdHVyZGF5XCIgXS5mb3JFYWNoKGZ1bmN0aW9uKGRheSwgaSkge1xuICAgIGkgPSA3IC0gaTtcbiAgICB2YXIgaW50ZXJ2YWwgPSBkM190aW1lW2RheV0gPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIChkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSkpLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIGkpICUgNyk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDcpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpIC0gKGRheSAhPT0gaSk7XG4gICAgfSk7XG4gICAgZDNfdGltZVtkYXkgKyBcInNcIl0gPSBpbnRlcnZhbC5yYW5nZTtcbiAgICBkM190aW1lW2RheSArIFwic1wiXS51dGMgPSBpbnRlcnZhbC51dGMucmFuZ2U7XG4gICAgZDNfdGltZVtkYXkgKyBcIk9mWWVhclwiXSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpO1xuICAgIH07XG4gIH0pO1xuICBkM190aW1lLndlZWsgPSBkM190aW1lLnN1bmRheTtcbiAgZDNfdGltZS53ZWVrcyA9IGQzX3RpbWUuc3VuZGF5LnJhbmdlO1xuICBkM190aW1lLndlZWtzLnV0YyA9IGQzX3RpbWUuc3VuZGF5LnV0Yy5yYW5nZTtcbiAgZDNfdGltZS53ZWVrT2ZZZWFyID0gZDNfdGltZS5zdW5kYXlPZlllYXI7XG4gIGZ1bmN0aW9uIGQzX2xvY2FsZV90aW1lRm9ybWF0KGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsIGxvY2FsZV9kYXlzID0gbG9jYWxlLmRheXMsIGxvY2FsZV9zaG9ydERheXMgPSBsb2NhbGUuc2hvcnREYXlzLCBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocywgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuICAgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKSB7XG4gICAgICB2YXIgbiA9IHRlbXBsYXRlLmxlbmd0aDtcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgICAgIHZhciBzdHJpbmcgPSBbXSwgaSA9IC0xLCBqID0gMCwgYywgcCwgZjtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpZiAodGVtcGxhdGUuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICAgIHN0cmluZy5wdXNoKHRlbXBsYXRlLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICAgIGlmICgocCA9IGQzX3RpbWVfZm9ybWF0UGFkc1tjID0gdGVtcGxhdGUuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gdGVtcGxhdGUuY2hhckF0KCsraSk7XG4gICAgICAgICAgICBpZiAoZiA9IGQzX3RpbWVfZm9ybWF0c1tjXSkgYyA9IGYoZGF0ZSwgcCA9PSBudWxsID8gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiIDogcCk7XG4gICAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyaW5nLnB1c2godGVtcGxhdGUuc2xpY2UoaiwgaSkpO1xuICAgICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICB9XG4gICAgICBmb3JtYXQucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgdmFyIGQgPSB7XG4gICAgICAgICAgeTogMTkwMCxcbiAgICAgICAgICBtOiAwLFxuICAgICAgICAgIGQ6IDEsXG4gICAgICAgICAgSDogMCxcbiAgICAgICAgICBNOiAwLFxuICAgICAgICAgIFM6IDAsXG4gICAgICAgICAgTDogMCxcbiAgICAgICAgICBaOiBudWxsXG4gICAgICAgIH0sIGkgPSBkM190aW1lX3BhcnNlKGQsIHRlbXBsYXRlLCBzdHJpbmcsIDApO1xuICAgICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG4gICAgICAgIHZhciBsb2NhbFogPSBkLlogIT0gbnVsbCAmJiBkM19kYXRlICE9PSBkM19kYXRlX3V0YywgZGF0ZSA9IG5ldyAobG9jYWxaID8gZDNfZGF0ZV91dGMgOiBkM19kYXRlKSgpO1xuICAgICAgICBpZiAoXCJqXCIgaW4gZCkgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIGQuaik7IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIDEpO1xuICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55LCAwLCBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDYpICUgNyk7XG4gICAgICAgIH0gZWxzZSBkYXRlLnNldEZ1bGxZZWFyKGQueSwgZC5tLCBkLmQpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKGQuSCArIChkLlogLyAxMDAgfCAwKSwgZC5NICsgZC5aICUgMTAwLCBkLlMsIGQuTCk7XG4gICAgICAgIHJldHVybiBsb2NhbFogPyBkYXRlLl8gOiBkYXRlO1xuICAgICAgfTtcbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZShkYXRlLCB0ZW1wbGF0ZSwgc3RyaW5nLCBqKSB7XG4gICAgICB2YXIgYywgcCwgdCwgaSA9IDAsIG4gPSB0ZW1wbGF0ZS5sZW5ndGgsIG0gPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgICAgYyA9IHRlbXBsYXRlLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgICAgdCA9IHRlbXBsYXRlLmNoYXJBdChpKyspO1xuICAgICAgICAgIHAgPSBkM190aW1lX3BhcnNlcnNbdCBpbiBkM190aW1lX2Zvcm1hdFBhZHMgPyB0ZW1wbGF0ZS5jaGFyQXQoaSsrKSA6IHRdO1xuICAgICAgICAgIGlmICghcCB8fCAoaiA9IHAoZGF0ZSwgc3RyaW5nLCBqKSkgPCAwKSByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gajtcbiAgICB9XG4gICAgZDNfdGltZV9mb3JtYXQudXRjID0gZnVuY3Rpb24odGVtcGxhdGUpIHtcbiAgICAgIHZhciBsb2NhbCA9IGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKTtcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZSgpO1xuICAgICAgICAgIHV0Yy5fID0gZGF0ZTtcbiAgICAgICAgICByZXR1cm4gbG9jYWwodXRjKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9ybWF0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICAgIHZhciBkYXRlID0gbG9jYWwucGFyc2Uoc3RyaW5nKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLl87XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IERhdGU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmb3JtYXQudG9TdHJpbmcgPSBsb2NhbC50b1N0cmluZztcbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfTtcbiAgICBkM190aW1lX2Zvcm1hdC5tdWx0aSA9IGQzX3RpbWVfZm9ybWF0LnV0Yy5tdWx0aSA9IGQzX3RpbWVfZm9ybWF0TXVsdGk7XG4gICAgdmFyIGQzX3RpbWVfcGVyaW9kTG9va3VwID0gZDMubWFwKCksIGQzX3RpbWVfZGF5UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9kYXlzKSwgZDNfdGltZV9kYXlMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfZGF5cyksIGQzX3RpbWVfZGF5QWJicmV2UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX2RheUFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX21vbnRoUmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9tb250aHMpLCBkM190aW1lX21vbnRoTG9va3VwID0gZDNfdGltZV9mb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksIGQzX3RpbWVfbW9udGhBYmJyZXZSZSA9IGQzX3RpbWVfZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSwgZDNfdGltZV9tb250aEFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG4gICAgbG9jYWxlX3BlcmlvZHMuZm9yRWFjaChmdW5jdGlvbihwLCBpKSB7XG4gICAgICBkM190aW1lX3BlcmlvZExvb2t1cC5zZXQocC50b0xvd2VyQ2FzZSgpLCBpKTtcbiAgICB9KTtcbiAgICB2YXIgZDNfdGltZV9mb3JtYXRzID0ge1xuICAgICAgYTogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3Nob3J0RGF5c1tkLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBBOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfZGF5c1tkLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBiOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgICAgIH0sXG4gICAgICBCOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gICAgICB9LFxuICAgICAgYzogZDNfdGltZV9mb3JtYXQobG9jYWxlX2RhdGVUaW1lKSxcbiAgICAgIGQ6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBlOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldERhdGUoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgSDogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBJOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG4gICAgICB9LFxuICAgICAgajogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoMSArIGQzX3RpbWUuZGF5T2ZZZWFyKGQpLCBwLCAzKTtcbiAgICAgIH0sXG4gICAgICBMOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbiAgICAgIH0sXG4gICAgICBtOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBNOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgcDogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgICAgIH0sXG4gICAgICBTOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgVTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5zdW5kYXlPZlllYXIoZCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHc6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuZ2V0RGF5KCk7XG4gICAgICB9LFxuICAgICAgVzogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5tb25kYXlPZlllYXIoZCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV9kYXRlKSxcbiAgICAgIFg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV90aW1lKSxcbiAgICAgIHk6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG4gICAgICB9LFxuICAgICAgWTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRGdWxsWWVhcigpICUgMWU0LCBwLCA0KTtcbiAgICAgIH0sXG4gICAgICBaOiBkM190aW1lX3pvbmUsXG4gICAgICBcIiVcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIiVcIjtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBkM190aW1lX3BhcnNlcnMgPSB7XG4gICAgICBhOiBkM190aW1lX3BhcnNlV2Vla2RheUFiYnJldixcbiAgICAgIEE6IGQzX3RpbWVfcGFyc2VXZWVrZGF5LFxuICAgICAgYjogZDNfdGltZV9wYXJzZU1vbnRoQWJicmV2LFxuICAgICAgQjogZDNfdGltZV9wYXJzZU1vbnRoLFxuICAgICAgYzogZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwsXG4gICAgICBkOiBkM190aW1lX3BhcnNlRGF5LFxuICAgICAgZTogZDNfdGltZV9wYXJzZURheSxcbiAgICAgIEg6IGQzX3RpbWVfcGFyc2VIb3VyMjQsXG4gICAgICBJOiBkM190aW1lX3BhcnNlSG91cjI0LFxuICAgICAgajogZDNfdGltZV9wYXJzZURheU9mWWVhcixcbiAgICAgIEw6IGQzX3RpbWVfcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgICBtOiBkM190aW1lX3BhcnNlTW9udGhOdW1iZXIsXG4gICAgICBNOiBkM190aW1lX3BhcnNlTWludXRlcyxcbiAgICAgIHA6IGQzX3RpbWVfcGFyc2VBbVBtLFxuICAgICAgUzogZDNfdGltZV9wYXJzZVNlY29uZHMsXG4gICAgICBVOiBkM190aW1lX3BhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICAgIHc6IGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyLFxuICAgICAgVzogZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgICB4OiBkM190aW1lX3BhcnNlTG9jYWxlRGF0ZSxcbiAgICAgIFg6IGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lLFxuICAgICAgeTogZDNfdGltZV9wYXJzZVllYXIsXG4gICAgICBZOiBkM190aW1lX3BhcnNlRnVsbFllYXIsXG4gICAgICBaOiBkM190aW1lX3BhcnNlWm9uZSxcbiAgICAgIFwiJVwiOiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheUFiYnJldlJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5QWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aEFiYnJldihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIGQzX3RpbWVfbW9udGhBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX21vbnRoQWJicmV2UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gZDNfdGltZV9tb250aEFiYnJldkxvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTW9udGgoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICBkM190aW1lX21vbnRoUmUubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBuID0gZDNfdGltZV9tb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUubSA9IGQzX3RpbWVfbW9udGhMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gZDNfdGltZV9wYXJzZShkYXRlLCBkM190aW1lX2Zvcm1hdHMuYy50b1N0cmluZygpLCBzdHJpbmcsIGkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTG9jYWxlRGF0ZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3BhcnNlKGRhdGUsIGQzX3RpbWVfZm9ybWF0cy54LnRvU3RyaW5nKCksIHN0cmluZywgaSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lKGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgcmV0dXJuIGQzX3RpbWVfcGFyc2UoZGF0ZSwgZDNfdGltZV9mb3JtYXRzLlgudG9TdHJpbmcoKSwgc3RyaW5nLCBpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUFtUG0oZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IGQzX3RpbWVfcGVyaW9kTG9va3VwLmdldChzdHJpbmcuc2xpY2UoaSwgaSArPSAyKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIHJldHVybiBuID09IG51bGwgPyAtMSA6IChkYXRlLnAgPSBuLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0O1xuICB9XG4gIHZhciBkM190aW1lX2Zvcm1hdFBhZHMgPSB7XG4gICAgXCItXCI6IFwiXCIsXG4gICAgXzogXCIgXCIsXG4gICAgXCIwXCI6IFwiMFwiXG4gIH0sIGQzX3RpbWVfbnVtYmVyUmUgPSAvXlxccypcXGQrLywgZDNfdGltZV9wZXJjZW50UmUgPSAvXiUvO1xuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdFBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIiwgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRSZShuYW1lcykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKGQzLnJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdExvb2t1cChuYW1lcykge1xuICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwKCksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgbWFwLnNldChuYW1lc1tpXS50b0xvd2VyQ2FzZSgpLCBpKTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGRhdGUuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXkoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRnVsbFllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9IGQzX3RpbWVfZXhwYW5kWWVhcigrblswXSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlWm9uZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gL15bKy1dXFxkezR9JC8udGVzdChzdHJpbmcgPSBzdHJpbmcuc2xpY2UoaSwgaSArIDUpKSA/IChkYXRlLlogPSAtc3RyaW5nLCBcbiAgICBpICsgNSkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2V4cGFuZFllYXIoZCkge1xuICAgIHJldHVybiBkICsgKGQgPiA2OCA/IDE5MDAgOiAyZTMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aE51bWJlcihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VEYXlPZlllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICAgIHJldHVybiBuID8gKGRhdGUuaiA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUhvdXIyNChkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWludXRlcyhkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlU2Vjb25kcyhkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfem9uZShkKSB7XG4gICAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCksIHpzID0geiA+IDAgPyBcIi1cIiA6IFwiK1wiLCB6aCA9IGFicyh6KSAvIDYwIHwgMCwgem0gPSBhYnMoeikgJSA2MDtcbiAgICByZXR1cm4genMgKyBkM190aW1lX2Zvcm1hdFBhZCh6aCwgXCIwXCIsIDIpICsgZDNfdGltZV9mb3JtYXRQYWQoem0sIFwiMFwiLCAyKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnQoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9wZXJjZW50UmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gICAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdE11bHRpKGZvcm1hdHMpIHtcbiAgICB2YXIgbiA9IGZvcm1hdHMubGVuZ3RoLCBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8IG4pIGZvcm1hdHNbaV1bMF0gPSB0aGlzKGZvcm1hdHNbaV1bMF0pO1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgaSA9IDAsIGYgPSBmb3JtYXRzW2ldO1xuICAgICAgd2hpbGUgKCFmWzFdKGRhdGUpKSBmID0gZm9ybWF0c1srK2ldO1xuICAgICAgcmV0dXJuIGZbMF0oZGF0ZSk7XG4gICAgfTtcbiAgfVxuICBkMy5sb2NhbGUgPSBmdW5jdGlvbihsb2NhbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyRm9ybWF0OiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSksXG4gICAgICB0aW1lRm9ybWF0OiBkM19sb2NhbGVfdGltZUZvcm1hdChsb2NhbGUpXG4gICAgfTtcbiAgfTtcbiAgdmFyIGQzX2xvY2FsZV9lblVTID0gZDMubG9jYWxlKHtcbiAgICBkZWNpbWFsOiBcIi5cIixcbiAgICB0aG91c2FuZHM6IFwiLFwiLFxuICAgIGdyb3VwaW5nOiBbIDMgXSxcbiAgICBjdXJyZW5jeTogWyBcIiRcIiwgXCJcIiBdLFxuICAgIGRhdGVUaW1lOiBcIiVhICViICVlICVYICVZXCIsXG4gICAgZGF0ZTogXCIlbS8lZC8lWVwiLFxuICAgIHRpbWU6IFwiJUg6JU06JVNcIixcbiAgICBwZXJpb2RzOiBbIFwiQU1cIiwgXCJQTVwiIF0sXG4gICAgZGF5czogWyBcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCIgXSxcbiAgICBzaG9ydERheXM6IFsgXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiBdLFxuICAgIG1vbnRoczogWyBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCIgXSxcbiAgICBzaG9ydE1vbnRoczogWyBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiIF1cbiAgfSk7XG4gIGQzLmZvcm1hdCA9IGQzX2xvY2FsZV9lblVTLm51bWJlckZvcm1hdDtcbiAgZDMuZ2VvID0ge307XG4gIGZ1bmN0aW9uIGQzX2FkZGVyKCkge31cbiAgZDNfYWRkZXIucHJvdG90eXBlID0ge1xuICAgIHM6IDAsXG4gICAgdDogMCxcbiAgICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIGQzX2FkZGVyU3VtKHksIHRoaXMudCwgZDNfYWRkZXJUZW1wKTtcbiAgICAgIGQzX2FkZGVyU3VtKGQzX2FkZGVyVGVtcC5zLCB0aGlzLnMsIHRoaXMpO1xuICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IGQzX2FkZGVyVGVtcC50OyBlbHNlIHRoaXMucyA9IGQzX2FkZGVyVGVtcC50O1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zID0gdGhpcy50ID0gMDtcbiAgICB9LFxuICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucztcbiAgICB9XG4gIH07XG4gIHZhciBkM19hZGRlclRlbXAgPSBuZXcgZDNfYWRkZXIoKTtcbiAgZnVuY3Rpb24gZDNfYWRkZXJTdW0oYSwgYiwgbykge1xuICAgIHZhciB4ID0gby5zID0gYSArIGIsIGJ2ID0geCAtIGEsIGF2ID0geCAtIGJ2O1xuICAgIG8udCA9IGEgLSBhdiArIChiIC0gYnYpO1xuICB9XG4gIGQzLmdlby5zdHJlYW0gPSBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgaWYgKG9iamVjdCAmJiBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KG9iamVjdCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBsaXN0ZW5lcikge1xuICAgIGlmIChnZW9tZXRyeSAmJiBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgICBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBsaXN0ZW5lcik7XG4gICAgfVxuICB9XG4gIHZhciBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZSA9IHtcbiAgICBGZWF0dXJlOiBmdW5jdGlvbihmZWF0dXJlLCBsaXN0ZW5lcikge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGZlYXR1cmUuZ2VvbWV0cnksIGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIGxpc3RlbmVyKTtcbiAgICB9XG4gIH07XG4gIHZhciBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xuICAgIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIuc3BoZXJlKCk7XG4gICAgfSxcbiAgICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgb2JqZWN0ID0gb2JqZWN0LmNvb3JkaW5hdGVzO1xuICAgICAgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICBkM19nZW9fc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCAwKTtcbiAgICB9LFxuICAgIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLCAwKTtcbiAgICB9LFxuICAgIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgbGlzdGVuZXIpO1xuICAgIH0sXG4gICAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIpO1xuICAgIH0sXG4gICAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCBjbG9zZWQpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLCBjb29yZGluYXRlO1xuICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgbGlzdGVuZXIpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIsIDEpO1xuICAgIGxpc3RlbmVyLnBvbHlnb25FbmQoKTtcbiAgfVxuICBkMy5nZW8uYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19hcmVhU3VtID0gMDtcbiAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2FyZWEpO1xuICAgIHJldHVybiBkM19nZW9fYXJlYVN1bTtcbiAgfTtcbiAgdmFyIGQzX2dlb19hcmVhU3VtLCBkM19nZW9fYXJlYVJpbmdTdW0gPSBuZXcgZDNfYWRkZXIoKTtcbiAgdmFyIGQzX2dlb19hcmVhID0ge1xuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fYXJlYVN1bSArPSA0ICogz4A7XG4gICAgfSxcbiAgICBwb2ludDogZDNfbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG4gICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQgPSBkM19nZW9fYXJlYVJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZWEgPSAyICogZDNfZ2VvX2FyZWFSaW5nU3VtO1xuICAgICAgZDNfZ2VvX2FyZWFTdW0gKz0gYXJlYSA8IDAgPyA0ICogz4AgKyBhcmVhIDogYXJlYTtcbiAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCA9IGQzX2dlb19hcmVhLmxpbmVFbmQgPSBkM19nZW9fYXJlYS5wb2ludCA9IGQzX25vb3A7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fYXJlYVJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgzrswLCBjb3PPhjAsIHNpbs+GMDtcbiAgICBkM19nZW9fYXJlYS5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgZDNfZ2VvX2FyZWEucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICDOuzAgPSAozrswMCA9IM67KSAqIGQzX3JhZGlhbnMsIGNvc8+GMCA9IE1hdGguY29zKM+GID0gKM+GMDAgPSDPhikgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNCksIFxuICAgICAgc2luz4YwID0gTWF0aC5zaW4oz4YpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIM+GID0gz4YgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNDtcbiAgICAgIHZhciBkzrsgPSDOuyAtIM67MCwgc2TOuyA9IGTOuyA+PSAwID8gMSA6IC0xLCBhZM67ID0gc2TOuyAqIGTOuywgY29zz4YgPSBNYXRoLmNvcyjPhiksIHNpbs+GID0gTWF0aC5zaW4oz4YpLCBrID0gc2luz4YwICogc2luz4YsIHUgPSBjb3PPhjAgKiBjb3PPhiArIGsgKiBNYXRoLmNvcyhhZM67KSwgdiA9IGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyk7XG4gICAgICBkM19nZW9fYXJlYVJpbmdTdW0uYWRkKE1hdGguYXRhbjIodiwgdSkpO1xuICAgICAgzrswID0gzrssIGNvc8+GMCA9IGNvc8+GLCBzaW7PhjAgPSBzaW7PhjtcbiAgICB9XG4gICAgZDNfZ2VvX2FyZWEubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgbmV4dFBvaW50KM67MDAsIM+GMDApO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgICB2YXIgzrsgPSBzcGhlcmljYWxbMF0sIM+GID0gc3BoZXJpY2FsWzFdLCBjb3PPhiA9IE1hdGguY29zKM+GKTtcbiAgICByZXR1cm4gWyBjb3PPhiAqIE1hdGguY29zKM67KSwgY29zz4YgKiBNYXRoLnNpbijOuyksIE1hdGguc2luKM+GKSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgICByZXR1cm4gWyBhWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdIF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkFkZChhLCBiKSB7XG4gICAgYVswXSArPSBiWzBdO1xuICAgIGFbMV0gKz0gYlsxXTtcbiAgICBhWzJdICs9IGJbMl07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICAgIHJldHVybiBbIHZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGsgXTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGQpIHtcbiAgICB2YXIgbCA9IE1hdGguc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICAgIGRbMF0gLz0gbDtcbiAgICBkWzFdIC89IGw7XG4gICAgZFsyXSAvPSBsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gICAgcmV0dXJuIFsgTWF0aC5hdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGQzX2FzaW4oY2FydGVzaWFuWzJdKSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWxFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGFicyhhWzBdIC0gYlswXSkgPCDOtSAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgzrU7XG4gIH1cbiAgZDMuZ2VvLmJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciDOuzAsIM+GMCwgzrsxLCDPhjEsIM67XywgzrtfXywgz4ZfXywgcDAsIGTOu1N1bSwgcmFuZ2VzLCByYW5nZTtcbiAgICB2YXIgYm91bmQgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBib3VuZC5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuICAgICAgICBib3VuZC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgZM67U3VtID0gMDtcbiAgICAgICAgZDNfZ2VvX2FyZWEucG9seWdvblN0YXJ0KCk7XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGQzX2dlb19hcmVhLnBvbHlnb25FbmQoKTtcbiAgICAgICAgYm91bmQucG9pbnQgPSBwb2ludDtcbiAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBib3VuZC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgaWYgKGQzX2dlb19hcmVhUmluZ1N1bSA8IDApIM67MCA9IC0ozrsxID0gMTgwKSwgz4YwID0gLSjPhjEgPSA5MCk7IGVsc2UgaWYgKGTOu1N1bSA+IM61KSDPhjEgPSA5MDsgZWxzZSBpZiAoZM67U3VtIDwgLc61KSDPhjAgPSAtOTA7XG4gICAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHBvaW50KM67LCDPhikge1xuICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbIM67MCA9IM67LCDOuzEgPSDOuyBdKTtcbiAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG4gICAgICBpZiAoz4YgPiDPhjEpIM+GMSA9IM+GO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQozrssIM+GKSB7XG4gICAgICB2YXIgcCA9IGQzX2dlb19jYXJ0ZXNpYW4oWyDOuyAqIGQzX3JhZGlhbnMsIM+GICogZDNfcmFkaWFucyBdKTtcbiAgICAgIGlmIChwMCkge1xuICAgICAgICB2YXIgbm9ybWFsID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKHAwLCBwKSwgZXF1YXRvcmlhbCA9IFsgbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwIF0sIGluZmxlY3Rpb24gPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcbiAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShpbmZsZWN0aW9uKTtcbiAgICAgICAgaW5mbGVjdGlvbiA9IGQzX2dlb19zcGhlcmljYWwoaW5mbGVjdGlvbik7XG4gICAgICAgIHZhciBkzrsgPSDOuyAtIM67XywgcyA9IGTOuyA+IDAgPyAxIDogLTEsIM67aSA9IGluZmxlY3Rpb25bMF0gKiBkM19kZWdyZWVzICogcywgYW50aW1lcmlkaWFuID0gYWJzKGTOuykgPiAxODA7XG4gICAgICAgIGlmIChhbnRpbWVyaWRpYW4gXiAocyAqIM67XyA8IM67aSAmJiDOu2kgPCBzICogzrspKSB7XG4gICAgICAgICAgdmFyIM+GaSA9IGluZmxlY3Rpb25bMV0gKiBkM19kZWdyZWVzO1xuICAgICAgICAgIGlmICjPhmkgPiDPhjEpIM+GMSA9IM+GaTtcbiAgICAgICAgfSBlbHNlIGlmICjOu2kgPSAozrtpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHMgKiDOu18gPCDOu2kgJiYgzrtpIDwgcyAqIM67KSkge1xuICAgICAgICAgIHZhciDPhmkgPSAtaW5mbGVjdGlvblsxXSAqIGQzX2RlZ3JlZXM7XG4gICAgICAgICAgaWYgKM+GaSA8IM+GMCkgz4YwID0gz4ZpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG4gICAgICAgICAgaWYgKM+GID4gz4YxKSDPhjEgPSDPhjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICAgICAgaWYgKM67IDwgzrtfKSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUozrssIM67MSkgPiBhbmdsZSjOuzAsIM67MSkpIM67MCA9IM67O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAozrsxID49IM67MCkge1xuICAgICAgICAgICAgaWYgKM67IDwgzrswKSDOuzAgPSDOuztcbiAgICAgICAgICAgIGlmICjOuyA+IM67MSkgzrsxID0gzrs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICjOuyA+IM67Xykge1xuICAgICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ2xlKM67LCDOuzEpID4gYW5nbGUozrswLCDOuzEpKSDOuzAgPSDOuztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50KM67LCDPhik7XG4gICAgICB9XG4gICAgICBwMCA9IHAsIM67XyA9IM67O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBib3VuZC5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIGJvdW5kLnBvaW50ID0gcG9pbnQ7XG4gICAgICBwMCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludCjOuywgz4YpIHtcbiAgICAgIGlmIChwMCkge1xuICAgICAgICB2YXIgZM67ID0gzrsgLSDOu187XG4gICAgICAgIGTOu1N1bSArPSBhYnMoZM67KSA+IDE4MCA/IGTOuyArIChkzrsgPiAwID8gMzYwIDogLTM2MCkgOiBkzrs7XG4gICAgICB9IGVsc2UgzrtfXyA9IM67LCDPhl9fID0gz4Y7XG4gICAgICBkM19nZW9fYXJlYS5wb2ludCjOuywgz4YpO1xuICAgICAgbGluZVBvaW50KM67LCDPhik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmluZ1BvaW50KM67X18sIM+GX18pO1xuICAgICAgZDNfZ2VvX2FyZWEubGluZUVuZCgpO1xuICAgICAgaWYgKGFicyhkzrtTdW0pID4gzrUpIM67MCA9IC0ozrsxID0gMTgwKTtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIHAwID0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW5nbGUozrswLCDOuzEpIHtcbiAgICAgIHJldHVybiAozrsxIC09IM67MCkgPCAwID8gzrsxICsgMzYwIDogzrsxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUmFuZ2VzKGEsIGIpIHtcbiAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd2l0aGluUmFuZ2UoeCwgcmFuZ2UpIHtcbiAgICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICDPhjEgPSDOuzEgPSAtKM67MCA9IM+GMCA9IEluZmluaXR5KTtcbiAgICAgIHJhbmdlcyA9IFtdO1xuICAgICAgZDMuZ2VvLnN0cmVhbShmZWF0dXJlLCBib3VuZCk7XG4gICAgICB2YXIgbiA9IHJhbmdlcy5sZW5ndGg7XG4gICAgICBpZiAobikge1xuICAgICAgICByYW5nZXMuc29ydChjb21wYXJlUmFuZ2VzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGEgPSByYW5nZXNbMF0sIGIsIG1lcmdlZCA9IFsgYSBdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgYiA9IHJhbmdlc1tpXTtcbiAgICAgICAgICBpZiAod2l0aGluUmFuZ2UoYlswXSwgYSkgfHwgd2l0aGluUmFuZ2UoYlsxXSwgYSkpIHtcbiAgICAgICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgICAgIGlmIChhbmdsZShiWzBdLCBhWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzBdID0gYlswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYmVzdCA9IC1JbmZpbml0eSwgZM67O1xuICAgICAgICBmb3IgKHZhciBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dLCBiOyBpIDw9IG47IGEgPSBiLCArK2kpIHtcbiAgICAgICAgICBiID0gbWVyZ2VkW2ldO1xuICAgICAgICAgIGlmICgoZM67ID0gYW5nbGUoYVsxXSwgYlswXSkpID4gYmVzdCkgYmVzdCA9IGTOuywgzrswID0gYlswXSwgzrsxID0gYVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmFuZ2VzID0gcmFuZ2UgPSBudWxsO1xuICAgICAgcmV0dXJuIM67MCA9PT0gSW5maW5pdHkgfHwgz4YwID09PSBJbmZpbml0eSA/IFsgWyBOYU4sIE5hTiBdLCBbIE5hTiwgTmFOIF0gXSA6IFsgWyDOuzAsIM+GMCBdLCBbIM67MSwgz4YxIF0gXTtcbiAgICB9O1xuICB9KCk7XG4gIGQzLmdlby5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19jZW50cm9pZFcwID0gZDNfZ2VvX2NlbnRyb2lkVzEgPSBkM19nZW9fY2VudHJvaWRYMCA9IGQzX2dlb19jZW50cm9pZFkwID0gZDNfZ2VvX2NlbnRyb2lkWjAgPSBkM19nZW9fY2VudHJvaWRYMSA9IGQzX2dlb19jZW50cm9pZFkxID0gZDNfZ2VvX2NlbnRyb2lkWjEgPSBkM19nZW9fY2VudHJvaWRYMiA9IGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBkM19nZW9fY2VudHJvaWQpO1xuICAgIHZhciB4ID0gZDNfZ2VvX2NlbnRyb2lkWDIsIHkgPSBkM19nZW9fY2VudHJvaWRZMiwgeiA9IGQzX2dlb19jZW50cm9pZFoyLCBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIGlmIChtIDwgzrUyKSB7XG4gICAgICB4ID0gZDNfZ2VvX2NlbnRyb2lkWDEsIHkgPSBkM19nZW9fY2VudHJvaWRZMSwgeiA9IGQzX2dlb19jZW50cm9pZFoxO1xuICAgICAgaWYgKGQzX2dlb19jZW50cm9pZFcxIDwgzrUpIHggPSBkM19nZW9fY2VudHJvaWRYMCwgeSA9IGQzX2dlb19jZW50cm9pZFkwLCB6ID0gZDNfZ2VvX2NlbnRyb2lkWjA7XG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgICAgaWYgKG0gPCDOtTIpIHJldHVybiBbIE5hTiwgTmFOIF07XG4gICAgfVxuICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSwgeCkgKiBkM19kZWdyZWVzLCBkM19hc2luKHogLyBNYXRoLnNxcnQobSkpICogZDNfZGVncmVlcyBdO1xuICB9O1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkVzAsIGQzX2dlb19jZW50cm9pZFcxLCBkM19nZW9fY2VudHJvaWRYMCwgZDNfZ2VvX2NlbnRyb2lkWTAsIGQzX2dlb19jZW50cm9pZFowLCBkM19nZW9fY2VudHJvaWRYMSwgZDNfZ2VvX2NlbnRyb2lkWTEsIGQzX2dlb19jZW50cm9pZFoxLCBkM19nZW9fY2VudHJvaWRYMiwgZDNfZ2VvX2NlbnRyb2lkWTIsIGQzX2dlb19jZW50cm9pZFoyO1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkID0ge1xuICAgIHNwaGVyZTogZDNfbm9vcCxcbiAgICBwb2ludDogZDNfZ2VvX2NlbnRyb2lkUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fY2VudHJvaWRMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZFJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZExpbmVTdGFydDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50KM67LCDPhikge1xuICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyk7XG4gICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooY29zz4YgKiBNYXRoLmNvcyjOuyksIGNvc8+GICogTWF0aC5zaW4ozrspLCBNYXRoLnNpbijPhikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgsIHksIHopIHtcbiAgICArK2QzX2dlb19jZW50cm9pZFcwO1xuICAgIGQzX2dlb19jZW50cm9pZFgwICs9ICh4IC0gZDNfZ2VvX2NlbnRyb2lkWDApIC8gZDNfZ2VvX2NlbnRyb2lkVzA7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWTAgKz0gKHkgLSBkM19nZW9fY2VudHJvaWRZMCkgLyBkM19nZW9fY2VudHJvaWRXMDtcbiAgICBkM19nZW9fY2VudHJvaWRaMCArPSAoeiAtIGQzX2dlb19jZW50cm9pZFowKSAvIGQzX2dlb19jZW50cm9pZFcwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZExpbmVTdGFydCgpIHtcbiAgICB2YXIgeDAsIHkwLCB6MDtcbiAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKTtcbiAgICAgIHgwID0gY29zz4YgKiBNYXRoLmNvcyjOuyk7XG4gICAgICB5MCA9IGNvc8+GICogTWF0aC5zaW4ozrspO1xuICAgICAgejAgPSBNYXRoLnNpbijPhik7XG4gICAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKSwgeCA9IGNvc8+GICogTWF0aC5jb3MozrspLCB5ID0gY29zz4YgKiBNYXRoLnNpbijOuyksIHogPSBNYXRoLnNpbijPhiksIHcgPSBNYXRoLmF0YW4yKE1hdGguc3FydCgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgeDAsIHkwLCB6MDtcbiAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67MDAgPSDOuywgz4YwMCA9IM+GO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpO1xuICAgICAgeDAgPSBjb3PPhiAqIE1hdGguY29zKM67KTtcbiAgICAgIHkwID0gY29zz4YgKiBNYXRoLnNpbijOuyk7XG4gICAgICB6MCA9IE1hdGguc2luKM+GKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH07XG4gICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCjOuzAwLCDPhjAwKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5saW5lRW5kID0gZDNfZ2VvX2NlbnRyb2lkTGluZUVuZDtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpLCB4ID0gY29zz4YgKiBNYXRoLmNvcyjOuyksIHkgPSBjb3PPhiAqIE1hdGguc2luKM67KSwgeiA9IE1hdGguc2luKM+GKSwgY3ggPSB5MCAqIHogLSB6MCAqIHksIGN5ID0gejAgKiB4IC0geDAgKiB6LCBjeiA9IHgwICogeSAtIHkwICogeCwgbSA9IE1hdGguc3FydChjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLCB1ID0geDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6LCB2ID0gbSAmJiAtZDNfYWNvcyh1KSAvIG0sIHcgPSBNYXRoLmF0YW4yKG0sIHUpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0gdiAqIGN4O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgKz0gdiAqIGN5O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjIgKz0gdiAqIGN6O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY29tcG9zZShhLCBiKSB7XG4gICAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gICAgfVxuICAgIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2U7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJ1ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmUsIGNsaXBTdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIHN1YmplY3QgPSBbXSwgY2xpcCA9IFtdO1xuICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgICAgaWYgKChuID0gc2VnbWVudC5sZW5ndGggLSAxKSA8PSAwKSByZXR1cm47XG4gICAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl07XG4gICAgICBpZiAoZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSksIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAwLCBudWxsLCBhLCBmYWxzZSk7XG4gICAgICBhLm8gPSBiO1xuICAgICAgc3ViamVjdC5wdXNoKGEpO1xuICAgICAgY2xpcC5wdXNoKGIpO1xuICAgICAgYSA9IG5ldyBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKTtcbiAgICAgIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAxLCBudWxsLCBhLCB0cnVlKTtcbiAgICAgIGEubyA9IGI7XG4gICAgICBzdWJqZWN0LnB1c2goYSk7XG4gICAgICBjbGlwLnB1c2goYik7XG4gICAgfSk7XG4gICAgY2xpcC5zb3J0KGNvbXBhcmUpO1xuICAgIGQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhcihzdWJqZWN0KTtcbiAgICBkM19nZW9fY2xpcFBvbHlnb25MaW5rQ2lyY3VsYXIoY2xpcCk7XG4gICAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuICAgIGZvciAodmFyIGkgPSAwLCBlbnRyeSA9IGNsaXBTdGFydEluc2lkZSwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBjbGlwW2ldLmUgPSBlbnRyeSA9ICFlbnRyeTtcbiAgICB9XG4gICAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSwgcG9pbnRzLCBwb2ludDtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydCwgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgICBwb2ludHMgPSBjdXJyZW50LnAuejtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50LnAueCwgLTEsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBQb2x5Z29uTGlua0NpcmN1bGFyKGFycmF5KSB7XG4gICAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbiwgaSA9IDAsIGEgPSBhcnJheVswXSwgYjtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgICAgYi5wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICBhLm4gPSBiID0gYXJyYXlbMF07XG4gICAgYi5wID0gYTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gICAgdGhpcy54ID0gcG9pbnQ7XG4gICAgdGhpcy56ID0gcG9pbnRzO1xuICAgIHRoaXMubyA9IG90aGVyO1xuICAgIHRoaXMuZSA9IGVudHJ5O1xuICAgIHRoaXMudiA9IGZhbHNlO1xuICAgIHRoaXMubiA9IHRoaXMucCA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXAocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIGNsaXBTdGFydCkge1xuICAgIHJldHVybiBmdW5jdGlvbihyb3RhdGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGluZSA9IGNsaXBMaW5lKGxpc3RlbmVyKSwgcm90YXRlZENsaXBTdGFydCA9IHJvdGF0ZS5pbnZlcnQoY2xpcFN0YXJ0WzBdLCBjbGlwU3RhcnRbMV0pO1xuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50UmluZztcbiAgICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgICBjbGlwLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IGQzLm1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgICB2YXIgY2xpcFN0YXJ0SW5zaWRlID0gZDNfZ2VvX3BvaW50SW5Qb2x5Z29uKHJvdGF0ZWRDbGlwU3RhcnQsIHBvbHlnb24pO1xuICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGQzX2dlb19jbGlwU29ydCwgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xpcFN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGlzdGVuZXIucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgbGlzdGVuZXIpO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmdW5jdGlvbiBwb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG4gICAgICAgIGlmIChwb2ludFZpc2libGUozrsgPSBwb2ludFswXSwgz4YgPSBwb2ludFsxXSkpIGxpc3RlbmVyLnBvaW50KM67LCDPhik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwb2ludExpbmUozrssIM+GKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZSjOuywgz4YpO1xuICAgICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XG4gICAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgdmFyIHNlZ21lbnRzO1xuICAgICAgdmFyIGJ1ZmZlciA9IGQzX2dlb19jbGlwQnVmZmVyTGlzdGVuZXIoKSwgcmluZ0xpc3RlbmVyID0gY2xpcExpbmUoYnVmZmVyKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZSwgcG9seWdvbiwgcmluZztcbiAgICAgIGZ1bmN0aW9uIHBvaW50UmluZyjOuywgz4YpIHtcbiAgICAgICAgcmluZy5wdXNoKFsgzrssIM+GIF0pO1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUozrssIM+GKTtcbiAgICAgICAgcmluZ0xpc3RlbmVyLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICAgIHJpbmdMaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgcmluZyA9IFtdO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xuICAgICAgICByaW5nTGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICB2YXIgY2xlYW4gPSByaW5nTGlzdGVuZXIuY2xlYW4oKSwgcmluZ1NlZ21lbnRzID0gYnVmZmVyLmJ1ZmZlcigpLCBzZWdtZW50LCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgcmluZy5wb3AoKTtcbiAgICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgICByaW5nID0gbnVsbDtcbiAgICAgICAgaWYgKCFuKSByZXR1cm47XG4gICAgICAgIGlmIChjbGVhbiAmIDEpIHtcbiAgICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICAgIHZhciBuID0gc2VnbWVudC5sZW5ndGggLSAxLCBpID0gLTEsIHBvaW50O1xuICAgICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHNlZ21lbnRbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcihkM19nZW9fY2xpcFNlZ21lbnRMZW5ndGgxKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xpcDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEoc2VnbWVudCkge1xuICAgIHJldHVybiBzZWdtZW50Lmxlbmd0aCA+IDE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpIHtcbiAgICB2YXIgbGluZXMgPSBbXSwgbGluZTtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGluZXMucHVzaChsaW5lID0gW10pO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgICAgbGluZS5wdXNoKFsgzrssIM+GIF0pO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgICBidWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gbGluZXM7XG4gICAgICAgIGxpbmVzID0gW107XG4gICAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgfSxcbiAgICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFNvcnQoYSwgYikge1xuICAgIHJldHVybiAoKGEgPSBhLngpWzBdIDwgMCA/IGFbMV0gLSBoYWxmz4AgLSDOtSA6IGhhbGbPgCAtIGFbMV0pIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZs+AIC0gzrUgOiBoYWxmz4AgLSBiWzFdKTtcbiAgfVxuICB2YXIgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4gPSBkM19nZW9fY2xpcChkM190cnVlLCBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUsIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsIFsgLc+ALCAtz4AgLyAyIF0pO1xuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUobGlzdGVuZXIpIHtcbiAgICB2YXIgzrswID0gTmFOLCDPhjAgPSBOYU4sIHPOuzAgPSBOYU4sIGNsZWFuO1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbijOuzEsIM+GMSkge1xuICAgICAgICB2YXIgc867MSA9IM67MSA+IDAgPyDPgCA6IC3PgCwgZM67ID0gYWJzKM67MSAtIM67MCk7XG4gICAgICAgIGlmIChhYnMoZM67IC0gz4ApIDwgzrUpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludCjOuzAsIM+GMCA9ICjPhjAgKyDPhjEpIC8gMiA+IDAgPyBoYWxmz4AgOiAtaGFsZs+AKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrswLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrsxLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KM67MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoc867MCAhPT0gc867MSAmJiBkzrsgPj0gz4ApIHtcbiAgICAgICAgICBpZiAoYWJzKM67MCAtIHPOuzApIDwgzrUpIM67MCAtPSBzzrswICogzrU7XG4gICAgICAgICAgaWYgKGFicyjOuzEgLSBzzrsxKSA8IM61KSDOuzEgLT0gc867MSAqIM61O1xuICAgICAgICAgIM+GMCA9IGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KM67MCwgz4YwLCDOuzEsIM+GMSk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MCwgz4YwKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdGVuZXIucG9pbnQozrswID0gzrsxLCDPhjAgPSDPhjEpO1xuICAgICAgICBzzrswID0gc867MTtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICDOuzAgPSDPhjAgPSBOYU47XG4gICAgICB9LFxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMiAtIGNsZWFuO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QozrswLCDPhjAsIM67MSwgz4YxKSB7XG4gICAgdmFyIGNvc8+GMCwgY29zz4YxLCBzaW7OuzBfzrsxID0gTWF0aC5zaW4ozrswIC0gzrsxKTtcbiAgICByZXR1cm4gYWJzKHNpbs67MF/OuzEpID4gzrUgPyBNYXRoLmF0YW4oKE1hdGguc2luKM+GMCkgKiAoY29zz4YxID0gTWF0aC5jb3Moz4YxKSkgKiBNYXRoLnNpbijOuzEpIC0gTWF0aC5zaW4oz4YxKSAqIChjb3PPhjAgPSBNYXRoLmNvcyjPhjApKSAqIE1hdGguc2luKM67MCkpIC8gKGNvc8+GMCAqIGNvc8+GMSAqIHNpbs67MF/OuzEpKSA6ICjPhjAgKyDPhjEpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIGxpc3RlbmVyKSB7XG4gICAgdmFyIM+GO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogaGFsZs+AO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCjPgCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIDApO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIC3Phik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAwKTtcbiAgICAgIGxpc3RlbmVyLnBvaW50KC3PgCwgz4YpO1xuICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiDOtSkge1xuICAgICAgdmFyIHMgPSBmcm9tWzBdIDwgdG9bMF0gPyDPgCA6IC3PgDtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogcyAvIDI7XG4gICAgICBsaXN0ZW5lci5wb2ludCgtcywgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoMCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQocywgz4YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0ZW5lci5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcG9pbnRJblBvbHlnb24ocG9pbnQsIHBvbHlnb24pIHtcbiAgICB2YXIgbWVyaWRpYW4gPSBwb2ludFswXSwgcGFyYWxsZWwgPSBwb2ludFsxXSwgbWVyaWRpYW5Ob3JtYWwgPSBbIE1hdGguc2luKG1lcmlkaWFuKSwgLU1hdGguY29zKG1lcmlkaWFuKSwgMCBdLCBwb2xhckFuZ2xlID0gMCwgd2luZGluZyA9IDA7XG4gICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHJpbmcgPSBwb2x5Z29uW2ldLCBtID0gcmluZy5sZW5ndGg7XG4gICAgICBpZiAoIW0pIGNvbnRpbnVlO1xuICAgICAgdmFyIHBvaW50MCA9IHJpbmdbMF0sIM67MCA9IHBvaW50MFswXSwgz4YwID0gcG9pbnQwWzFdIC8gMiArIM+AIC8gNCwgc2luz4YwID0gTWF0aC5zaW4oz4YwKSwgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgaiA9IDE7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoaiA9PT0gbSkgaiA9IDA7XG4gICAgICAgIHBvaW50ID0gcmluZ1tqXTtcbiAgICAgICAgdmFyIM67ID0gcG9pbnRbMF0sIM+GID0gcG9pbnRbMV0gLyAyICsgz4AgLyA0LCBzaW7PhiA9IE1hdGguc2luKM+GKSwgY29zz4YgPSBNYXRoLmNvcyjPhiksIGTOuyA9IM67IC0gzrswLCBzZM67ID0gZM67ID49IDAgPyAxIDogLTEsIGFkzrsgPSBzZM67ICogZM67LCBhbnRpbWVyaWRpYW4gPSBhZM67ID4gz4AsIGsgPSBzaW7PhjAgKiBzaW7PhjtcbiAgICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLmFkZChNYXRoLmF0YW4yKGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyksIGNvc8+GMCAqIGNvc8+GICsgayAqIE1hdGguY29zKGFkzrspKSk7XG4gICAgICAgIHBvbGFyQW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZM67ICsgc2TOuyAqIM+EIDogZM67O1xuICAgICAgICBpZiAoYW50aW1lcmlkaWFuIF4gzrswID49IG1lcmlkaWFuIF4gzrsgPj0gbWVyaWRpYW4pIHtcbiAgICAgICAgICB2YXIgYXJjID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGQzX2dlb19jYXJ0ZXNpYW4ocG9pbnQwKSwgZDNfZ2VvX2NhcnRlc2lhbihwb2ludCkpO1xuICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYXJjKTtcbiAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKG1lcmlkaWFuTm9ybWFsLCBhcmMpO1xuICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgICB2YXIgz4ZhcmMgPSAoYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAtMSA6IDEpICogZDNfYXNpbihpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICAgIGlmIChwYXJhbGxlbCA+IM+GYXJjIHx8IHBhcmFsbGVsID09PSDPhmFyYyAmJiAoYXJjWzBdIHx8IGFyY1sxXSkpIHtcbiAgICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAxIDogLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaisrKSBicmVhaztcbiAgICAgICAgzrswID0gzrssIHNpbs+GMCA9IHNpbs+GLCBjb3PPhjAgPSBjb3PPhiwgcG9pbnQwID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAocG9sYXJBbmdsZSA8IC3OtSB8fCBwb2xhckFuZ2xlIDwgzrUgJiYgZDNfZ2VvX2FyZWFSaW5nU3VtIDwgLc61KSBeIHdpbmRpbmcgJiAxO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwQ2lyY2xlKHJhZGl1cykge1xuICAgIHZhciBjciA9IE1hdGguY29zKHJhZGl1cyksIHNtYWxsUmFkaXVzID0gY3IgPiAwLCBub3RIZW1pc3BoZXJlID0gYWJzKGNyKSA+IM61LCBpbnRlcnBvbGF0ZSA9IGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZShyYWRpdXMsIDYgKiBkM19yYWRpYW5zKTtcbiAgICByZXR1cm4gZDNfZ2VvX2NsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFsgMCwgLXJhZGl1cyBdIDogWyAtz4AsIHJhZGl1cyAtIM+AIF0pO1xuICAgIGZ1bmN0aW9uIHZpc2libGUozrssIM+GKSB7XG4gICAgICByZXR1cm4gTWF0aC5jb3MozrspICogTWF0aC5jb3Moz4YpID4gY3I7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsaXBMaW5lKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgcG9pbnQwLCBjMCwgdjAsIHYwMCwgY2xlYW47XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHYwMCA9IHYwID0gZmFsc2U7XG4gICAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgICB9LFxuICAgICAgICBwb2ludDogZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICAgICAgdmFyIHBvaW50MSA9IFsgzrssIM+GIF0sIHBvaW50MiwgdiA9IHZpc2libGUozrssIM+GKSwgYyA9IHNtYWxsUmFkaXVzID8gdiA/IDAgOiBjb2RlKM67LCDPhikgOiB2ID8gY29kZSjOuyArICjOuyA8IDAgPyDPgCA6IC3PgCksIM+GKSA6IDA7XG4gICAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgIGlmIChkM19nZW9fc3BoZXJpY2FsRXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IGQzX2dlb19zcGhlcmljYWxFcXVhbChwb2ludDEsIHBvaW50MikpIHtcbiAgICAgICAgICAgICAgcG9pbnQxWzBdICs9IM61O1xuICAgICAgICAgICAgICBwb2ludDFbMV0gKz0gzrU7XG4gICAgICAgICAgICAgIHYgPSB2aXNpYmxlKHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcbiAgICAgICAgICAgIHZhciB0O1xuICAgICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnQwID0gcG9pbnQxLCB2MCA9IHYsIGMwID0gYztcbiAgICAgICAgfSxcbiAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHYwKSBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgcG9pbnQwID0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBjbGVhbiB8ICh2MDAgJiYgdjApIDw8IDE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICAgIHZhciBwYSA9IGQzX2dlb19jYXJ0ZXNpYW4oYSksIHBiID0gZDNfZ2VvX2NhcnRlc2lhbihiKTtcbiAgICAgIHZhciBuMSA9IFsgMSwgMCwgMCBdLCBuMiA9IGQzX2dlb19jYXJ0ZXNpYW5Dcm9zcyhwYSwgcGIpLCBuMm4yID0gZDNfZ2VvX2NhcnRlc2lhbkRvdChuMiwgbjIpLCBuMW4yID0gbjJbMF0sIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuICAgICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcbiAgICAgIHZhciBjMSA9IGNyICogbjJuMiAvIGRldGVybWluYW50LCBjMiA9IC1jciAqIG4xbjIgLyBkZXRlcm1pbmFudCwgbjF4bjIgPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSwgQSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLCBCID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKG4yLCBjMik7XG4gICAgICBkM19nZW9fY2FydGVzaWFuQWRkKEEsIEIpO1xuICAgICAgdmFyIHUgPSBuMXhuMiwgdyA9IGQzX2dlb19jYXJ0ZXNpYW5Eb3QoQSwgdSksIHV1ID0gZDNfZ2VvX2NhcnRlc2lhbkRvdCh1LCB1KSwgdDIgPSB3ICogdyAtIHV1ICogKGQzX2dlb19jYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcbiAgICAgIGlmICh0MiA8IDApIHJldHVybjtcbiAgICAgIHZhciB0ID0gTWF0aC5zcXJ0KHQyKSwgcSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICAgIGQzX2dlb19jYXJ0ZXNpYW5BZGQocSwgQSk7XG4gICAgICBxID0gZDNfZ2VvX3NwaGVyaWNhbChxKTtcbiAgICAgIGlmICghdHdvKSByZXR1cm4gcTtcbiAgICAgIHZhciDOuzAgPSBhWzBdLCDOuzEgPSBiWzBdLCDPhjAgPSBhWzFdLCDPhjEgPSBiWzFdLCB6O1xuICAgICAgaWYgKM67MSA8IM67MCkgeiA9IM67MCwgzrswID0gzrsxLCDOuzEgPSB6O1xuICAgICAgdmFyIM60zrsgPSDOuzEgLSDOuzAsIHBvbGFyID0gYWJzKM60zrsgLSDPgCkgPCDOtSwgbWVyaWRpYW4gPSBwb2xhciB8fCDOtM67IDwgzrU7XG4gICAgICBpZiAoIXBvbGFyICYmIM+GMSA8IM+GMCkgeiA9IM+GMCwgz4YwID0gz4YxLCDPhjEgPSB6O1xuICAgICAgaWYgKG1lcmlkaWFuID8gcG9sYXIgPyDPhjAgKyDPhjEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIM67MCkgPCDOtSA/IM+GMCA6IM+GMSkgOiDPhjAgPD0gcVsxXSAmJiBxWzFdIDw9IM+GMSA6IM60zrsgPiDPgCBeICjOuzAgPD0gcVswXSAmJiBxWzBdIDw9IM67MSkpIHtcbiAgICAgICAgdmFyIHExID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHUsICgtdyArIHQpIC8gdXUpO1xuICAgICAgICBkM19nZW9fY2FydGVzaWFuQWRkKHExLCBBKTtcbiAgICAgICAgcmV0dXJuIFsgcSwgZDNfZ2VvX3NwaGVyaWNhbChxMSkgXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY29kZSjOuywgz4YpIHtcbiAgICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiDPgCAtIHJhZGl1cywgY29kZSA9IDA7XG4gICAgICBpZiAozrsgPCAtcikgY29kZSB8PSAxOyBlbHNlIGlmICjOuyA+IHIpIGNvZGUgfD0gMjtcbiAgICAgIGlmICjPhiA8IC1yKSBjb2RlIHw9IDQ7IGVsc2UgaWYgKM+GID4gcikgY29kZSB8PSA4O1xuICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fY2xpcExpbmUoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIGEgPSBsaW5lLmEsIGIgPSBsaW5lLmIsIGF4ID0gYS54LCBheSA9IGEueSwgYnggPSBiLngsIGJ5ID0gYi55LCB0MCA9IDAsIHQxID0gMSwgZHggPSBieCAtIGF4LCBkeSA9IGJ5IC0gYXksIHI7XG4gICAgICByID0geDAgLSBheDtcbiAgICAgIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHg7XG4gICAgICBpZiAoZHggPCAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgICB9XG4gICAgICByID0geDEgLSBheDtcbiAgICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHg7XG4gICAgICBpZiAoZHggPCAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgICB9XG4gICAgICByID0geTAgLSBheTtcbiAgICAgIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHk7XG4gICAgICBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgICB9XG4gICAgICByID0geTEgLSBheTtcbiAgICAgIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHk7XG4gICAgICBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgICB9XG4gICAgICBpZiAodDAgPiAwKSBsaW5lLmEgPSB7XG4gICAgICAgIHg6IGF4ICsgdDAgKiBkeCxcbiAgICAgICAgeTogYXkgKyB0MCAqIGR5XG4gICAgICB9O1xuICAgICAgaWYgKHQxIDwgMSkgbGluZS5iID0ge1xuICAgICAgICB4OiBheCArIHQxICogZHgsXG4gICAgICAgIHk6IGF5ICsgdDEgKiBkeVxuICAgICAgfTtcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2dlb19jbGlwRXh0ZW50TUFYID0gMWU5O1xuICBkMy5nZW8uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4MCwgeTAsIHgxLCB5MSwgc3RyZWFtLCBjbGlwLCBjbGlwRXh0ZW50ID0ge1xuICAgICAgc3RyZWFtOiBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHN0cmVhbSA9IGNsaXAob3V0cHV0KTtcbiAgICAgICAgc3RyZWFtLnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgIH0sXG4gICAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIHgwLCB5MCBdLCBbIHgxLCB5MSBdIF07XG4gICAgICAgIGNsaXAgPSBkM19nZW9fY2xpcEV4dGVudCh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKTtcbiAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2UsIHN0cmVhbSA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbGlwRXh0ZW50O1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGNsaXBFeHRlbnQuZXh0ZW50KFsgWyAwLCAwIF0sIFsgOTYwLCA1MDAgXSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0ZW5lcl8gPSBsaXN0ZW5lciwgYnVmZmVyTGlzdGVuZXIgPSBkM19nZW9fY2xpcEJ1ZmZlckxpc3RlbmVyKCksIGNsaXBMaW5lID0gZDNfZ2VvbV9jbGlwTGluZSh4MCwgeTAsIHgxLCB5MSksIHNlZ21lbnRzLCBwb2x5Z29uLCByaW5nO1xuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGlzdGVuZXIgPSBidWZmZXJMaXN0ZW5lcjtcbiAgICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgICAgICBjbGVhbiA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJfO1xuICAgICAgICAgIHNlZ21lbnRzID0gZDMubWVyZ2Uoc2VnbWVudHMpO1xuICAgICAgICAgIHZhciBjbGlwU3RhcnRJbnNpZGUgPSBpbnNpZGVQb2x5Z29uKFsgeDAsIHkxIF0pLCBpbnNpZGUgPSBjbGVhbiAmJiBjbGlwU3RhcnRJbnNpZGUsIHZpc2libGUgPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgICAgaWYgKGluc2lkZSB8fCB2aXNpYmxlKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICAgIGlmIChpbnNpZGUpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgICAgZDNfZ2VvX2NsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlLCBjbGlwU3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gaW5zaWRlUG9seWdvbihwKSB7XG4gICAgICAgIHZhciB3biA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aCwgeSA9IHBbMV07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDEsIHYgPSBwb2x5Z29uW2ldLCBtID0gdi5sZW5ndGgsIGEgPSB2WzBdLCBiOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgICBiID0gdltqXTtcbiAgICAgICAgICAgIGlmIChhWzFdIDw9IHkpIHtcbiAgICAgICAgICAgICAgaWYgKGJbMV0gPiB5ICYmIGQzX2Nyb3NzMmQoYSwgYiwgcCkgPiAwKSArK3duO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJbMV0gPD0geSAmJiBkM19jcm9zczJkKGEsIGIsIHApIDwgMCkgLS13bjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEgPSBiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd24gIT09IDA7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgYSA9IDAsIGExID0gMDtcbiAgICAgICAgaWYgKGZyb20gPT0gbnVsbCB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID0gY29ybmVyKHRvLCBkaXJlY3Rpb24pKSB8fCBjb21wYXJlUG9pbnRzKGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgICAgICB9IHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHBvaW50VmlzaWJsZSh4LCB5KSB7XG4gICAgICAgIHJldHVybiB4MCA8PSB4ICYmIHggPD0geDEgJiYgeTAgPD0geSAmJiB5IDw9IHkxO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICBpZiAocG9pbnRWaXNpYmxlKHgsIHkpKSBsaXN0ZW5lci5wb2ludCh4LCB5KTtcbiAgICAgIH1cbiAgICAgIHZhciB4X18sIHlfXywgdl9fLCB4XywgeV8sIHZfLCBmaXJzdCwgY2xlYW47XG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgICB2XyA9IGZhbHNlO1xuICAgICAgICB4XyA9IHlfID0gTmFOO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgaWYgKHNlZ21lbnRzKSB7XG4gICAgICAgICAgbGluZVBvaW50KHhfXywgeV9fKTtcbiAgICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJMaXN0ZW5lci5yZWpvaW4oKTtcbiAgICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlckxpc3RlbmVyLmJ1ZmZlcigpKTtcbiAgICAgICAgfVxuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGlmICh2XykgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZVBvaW50KHgsIHkpIHtcbiAgICAgICAgeCA9IE1hdGgubWF4KC1kM19nZW9fY2xpcEV4dGVudE1BWCwgTWF0aC5taW4oZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIHgpKTtcbiAgICAgICAgeSA9IE1hdGgubWF4KC1kM19nZW9fY2xpcEV4dGVudE1BWCwgTWF0aC5taW4oZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIHkpKTtcbiAgICAgICAgdmFyIHYgPSBwb2ludFZpc2libGUoeCwgeSk7XG4gICAgICAgIGlmIChwb2x5Z29uKSByaW5nLnB1c2goWyB4LCB5IF0pO1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2ICYmIHZfKSBsaXN0ZW5lci5wb2ludCh4LCB5KTsgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbCA9IHtcbiAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgIHg6IHhfLFxuICAgICAgICAgICAgICAgIHk6IHlfXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGI6IHtcbiAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgIHk6IHlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjbGlwTGluZShsKSkge1xuICAgICAgICAgICAgICBpZiAoIXZfKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQobC5hLngsIGwuYS55KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludChsLmIueCwgbC5iLnkpO1xuICAgICAgICAgICAgICBpZiAoIXYpIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xpcDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNvcm5lcihwLCBkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IM61ID8gZGlyZWN0aW9uID4gMCA/IDAgOiAzIDogYWJzKHBbMF0gLSB4MSkgPCDOtSA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMSA6IGFicyhwWzFdIC0geTApIDwgzrUgPyBkaXJlY3Rpb24gPiAwID8gMSA6IDAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludHMoYS54LCBiLngpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKGEsIGIpIHtcbiAgICAgIHZhciBjYSA9IGNvcm5lcihhLCAxKSwgY2IgPSBjb3JuZXIoYiwgMSk7XG4gICAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYiA6IGNhID09PSAwID8gYlsxXSAtIGFbMV0gOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXSA6IGJbMF0gLSBhWzBdO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY29uaWMocHJvamVjdEF0KSB7XG4gICAgdmFyIM+GMCA9IDAsIM+GMSA9IM+AIC8gMywgbSA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLCBwID0gbSjPhjAsIM+GMSk7XG4gICAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIM+GMCAvIM+AICogMTgwLCDPhjEgLyDPgCAqIDE4MCBdO1xuICAgICAgcmV0dXJuIG0oz4YwID0gX1swXSAqIM+AIC8gMTgwLCDPhjEgPSBfWzFdICogz4AgLyAxODApO1xuICAgIH07XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NvbmljRXF1YWxBcmVhKM+GMCwgz4YxKSB7XG4gICAgdmFyIHNpbs+GMCA9IE1hdGguc2luKM+GMCksIG4gPSAoc2luz4YwICsgTWF0aC5zaW4oz4YxKSkgLyAyLCBDID0gMSArIHNpbs+GMCAqICgyICogbiAtIHNpbs+GMCksIM+BMCA9IE1hdGguc3FydChDKSAvIG47XG4gICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcbiAgICAgIHZhciDPgSA9IE1hdGguc3FydChDIC0gMiAqIG4gKiBNYXRoLnNpbijPhikpIC8gbjtcbiAgICAgIHJldHVybiBbIM+BICogTWF0aC5zaW4ozrsgKj0gbiksIM+BMCAtIM+BICogTWF0aC5jb3MozrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gz4EwIC0geTtcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeCwgz4EwX3kpIC8gbiwgZDNfYXNpbigoQyAtICh4ICogeCArIM+BMF95ICogz4EwX3kpICogbiAqIG4pIC8gKDIgKiBuKSkgXTtcbiAgICB9O1xuICAgIHJldHVybiBmb3J3YXJkO1xuICB9XG4gIChkMy5nZW8uY29uaWNFcXVhbEFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX2NvbmljKGQzX2dlb19jb25pY0VxdWFsQXJlYSk7XG4gIH0pLnJhdyA9IGQzX2dlb19jb25pY0VxdWFsQXJlYTtcbiAgZDMuZ2VvLmFsYmVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyA5NiwgMCBdKS5jZW50ZXIoWyAtLjYsIDM4LjcgXSkucGFyYWxsZWxzKFsgMjkuNSwgNDUuNSBdKS5zY2FsZSgxMDcwKTtcbiAgfTtcbiAgZDMuZ2VvLmFsYmVyc1VzYSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsb3dlcjQ4ID0gZDMuZ2VvLmFsYmVycygpO1xuICAgIHZhciBhbGFza2EgPSBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyAxNTQsIDAgXSkuY2VudGVyKFsgLTIsIDU4LjUgXSkucGFyYWxsZWxzKFsgNTUsIDY1IF0pO1xuICAgIHZhciBoYXdhaWkgPSBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyAxNTcsIDAgXSkuY2VudGVyKFsgLTMsIDE5LjkgXSkucGFyYWxsZWxzKFsgOCwgMTggXSk7XG4gICAgdmFyIHBvaW50LCBwb2ludFN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHBvaW50ID0gWyB4LCB5IF07XG4gICAgICB9XG4gICAgfSwgbG93ZXI0OFBvaW50LCBhbGFza2FQb2ludCwgaGF3YWlpUG9pbnQ7XG4gICAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgICB2YXIgeCA9IGNvb3JkaW5hdGVzWzBdLCB5ID0gY29vcmRpbmF0ZXNbMV07XG4gICAgICBwb2ludCA9IG51bGw7XG4gICAgICAobG93ZXI0OFBvaW50KHgsIHkpLCBwb2ludCkgfHwgKGFsYXNrYVBvaW50KHgsIHkpLCBwb2ludCkgfHwgaGF3YWlpUG9pbnQoeCwgeSk7XG4gICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICAgIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHQgPSBsb3dlcjQ4LnRyYW5zbGF0ZSgpLCB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLCB5ID0gKGNvb3JkaW5hdGVzWzFdIC0gdFsxXSkgLyBrO1xuICAgICAgcmV0dXJuICh5ID49IC4xMiAmJiB5IDwgLjIzNCAmJiB4ID49IC0uNDI1ICYmIHggPCAtLjIxNCA/IGFsYXNrYSA6IHkgPj0gLjE2NiAmJiB5IDwgLjIzNCAmJiB4ID49IC0uMjE0ICYmIHggPCAtLjExNSA/IGhhd2FpaSA6IGxvd2VyNDgpLmludmVydChjb29yZGluYXRlcyk7XG4gICAgfTtcbiAgICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgbG93ZXI0OFN0cmVhbSA9IGxvd2VyNDguc3RyZWFtKHN0cmVhbSksIGFsYXNrYVN0cmVhbSA9IGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpU3RyZWFtID0gaGF3YWlpLnN0cmVhbShzdHJlYW0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICBsb3dlcjQ4U3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5zcGhlcmUoKTtcbiAgICAgICAgICBhbGFza2FTdHJlYW0uc3BoZXJlKCk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLnNwaGVyZSgpO1xuICAgICAgICB9LFxuICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGhhd2FpaVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgIGhhd2FpaVN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgucHJlY2lzaW9uKCk7XG4gICAgICBsb3dlcjQ4LnByZWNpc2lvbihfKTtcbiAgICAgIGFsYXNrYS5wcmVjaXNpb24oXyk7XG4gICAgICBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9O1xuICAgIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDguc2NhbGUoKTtcbiAgICAgIGxvd2VyNDguc2NhbGUoXyk7XG4gICAgICBhbGFza2Euc2NhbGUoXyAqIC4zNSk7XG4gICAgICBoYXdhaWkuc2NhbGUoXyk7XG4gICAgICByZXR1cm4gYWxiZXJzVXNhLnRyYW5zbGF0ZShsb3dlcjQ4LnRyYW5zbGF0ZSgpKTtcbiAgICB9O1xuICAgIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnRyYW5zbGF0ZSgpO1xuICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHggPSArX1swXSwgeSA9ICtfWzFdO1xuICAgICAgbG93ZXI0OFBvaW50ID0gbG93ZXI0OC50cmFuc2xhdGUoXykuY2xpcEV4dGVudChbIFsgeCAtIC40NTUgKiBrLCB5IC0gLjIzOCAqIGsgXSwgWyB4ICsgLjQ1NSAqIGssIHkgKyAuMjM4ICogayBdIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG4gICAgICBhbGFza2FQb2ludCA9IGFsYXNrYS50cmFuc2xhdGUoWyB4IC0gLjMwNyAqIGssIHkgKyAuMjAxICogayBdKS5jbGlwRXh0ZW50KFsgWyB4IC0gLjQyNSAqIGsgKyDOtSwgeSArIC4xMiAqIGsgKyDOtSBdLCBbIHggLSAuMjE0ICogayAtIM61LCB5ICsgLjIzNCAqIGsgLSDOtSBdIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG4gICAgICBoYXdhaWlQb2ludCA9IGhhd2FpaS50cmFuc2xhdGUoWyB4IC0gLjIwNSAqIGssIHkgKyAuMjEyICogayBdKS5jbGlwRXh0ZW50KFsgWyB4IC0gLjIxNCAqIGsgKyDOtSwgeSArIC4xNjYgKiBrICsgzrUgXSwgWyB4IC0gLjExNSAqIGsgLSDOtSwgeSArIC4yMzQgKiBrIC0gzrUgXSBdKS5zdHJlYW0ocG9pbnRTdHJlYW0pLnBvaW50O1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9O1xuICAgIHJldHVybiBhbGJlcnNVc2Euc2NhbGUoMTA3MCk7XG4gIH07XG4gIHZhciBkM19nZW9fcGF0aEFyZWFTdW0sIGQzX2dlb19wYXRoQXJlYVBvbHlnb24sIGQzX2dlb19wYXRoQXJlYSA9IHtcbiAgICBwb2ludDogZDNfbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG4gICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiA9IDA7XG4gICAgICBkM19nZW9fcGF0aEFyZWEubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhBcmVhUmluZ1N0YXJ0O1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fcGF0aEFyZWEubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhBcmVhLmxpbmVFbmQgPSBkM19nZW9fcGF0aEFyZWEucG9pbnQgPSBkM19ub29wO1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhU3VtICs9IGFicyhkM19nZW9fcGF0aEFyZWFQb2x5Z29uIC8gMik7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fcGF0aEFyZWFSaW5nU3RhcnQoKSB7XG4gICAgdmFyIHgwMCwgeTAwLCB4MCwgeTA7XG4gICAgZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiArPSB5MCAqIHggLSB4MCAqIHk7XG4gICAgICB4MCA9IHgsIHkwID0geTtcbiAgICB9XG4gICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCh4MDAsIHkwMCk7XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZ2VvX3BhdGhCb3VuZHNYMCwgZDNfZ2VvX3BhdGhCb3VuZHNZMCwgZDNfZ2VvX3BhdGhCb3VuZHNYMSwgZDNfZ2VvX3BhdGhCb3VuZHNZMTtcbiAgdmFyIGQzX2dlb19wYXRoQm91bmRzID0ge1xuICAgIHBvaW50OiBkM19nZW9fcGF0aEJvdW5kc1BvaW50LFxuICAgIGxpbmVTdGFydDogZDNfbm9vcCxcbiAgICBsaW5lRW5kOiBkM19ub29wLFxuICAgIHBvbHlnb25TdGFydDogZDNfbm9vcCxcbiAgICBwb2x5Z29uRW5kOiBkM19ub29wXG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQm91bmRzUG9pbnQoeCwgeSkge1xuICAgIGlmICh4IDwgZDNfZ2VvX3BhdGhCb3VuZHNYMCkgZDNfZ2VvX3BhdGhCb3VuZHNYMCA9IHg7XG4gICAgaWYgKHggPiBkM19nZW9fcGF0aEJvdW5kc1gxKSBkM19nZW9fcGF0aEJvdW5kc1gxID0geDtcbiAgICBpZiAoeSA8IGQzX2dlb19wYXRoQm91bmRzWTApIGQzX2dlb19wYXRoQm91bmRzWTAgPSB5O1xuICAgIGlmICh5ID4gZDNfZ2VvX3BhdGhCb3VuZHNZMSkgZDNfZ2VvX3BhdGhCb3VuZHNZMSA9IHk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhCdWZmZXIoKSB7XG4gICAgdmFyIHBvaW50Q2lyY2xlID0gZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUoNC41KSwgYnVmZmVyID0gW107XG4gICAgdmFyIHN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgfSxcbiAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHBvaW50Q2lyY2xlID0gZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUoXyk7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LFxuICAgICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgYnVmZmVyLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCBwb2ludENpcmNsZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcbiAgICAgIGJ1ZmZlci5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSk7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZSh4LCB5KSB7XG4gICAgICBidWZmZXIucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpbmVFbmRQb2x5Z29uKCkge1xuICAgICAgYnVmZmVyLnB1c2goXCJaXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKHJhZGl1cykge1xuICAgIHJldHVybiBcIm0wLFwiICsgcmFkaXVzICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1cyArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgMiAqIHJhZGl1cyArIFwielwiO1xuICB9XG4gIHZhciBkM19nZW9fcGF0aENlbnRyb2lkID0ge1xuICAgIHBvaW50OiBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fcGF0aENlbnRyb2lkTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQ2VudHJvaWRSaW5nU3RhcnQ7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQ7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVFbmQgPSBkM19nZW9fcGF0aENlbnRyb2lkTGluZUVuZDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4LCB5KSB7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWDAgKz0geDtcbiAgICBkM19nZW9fY2VudHJvaWRZMCArPSB5O1xuICAgICsrZDNfZ2VvX2NlbnRyb2lkWjA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydCgpIHtcbiAgICB2YXIgeDAsIHkwO1xuICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCh4LCB5KSB7XG4gICAgICB2YXIgZHggPSB4IC0geDAsIGR5ID0geSAtIHkwLCB6ID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gejtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICB2YXIgeDAwLCB5MDAsIHgwLCB5MDtcbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geSk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuICAgICAgdmFyIGR4ID0geCAtIHgwLCBkeSA9IHkgLSB5MCwgeiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0geiAqICh5MCArIHkpIC8gMjtcbiAgICAgIGQzX2dlb19jZW50cm9pZFoxICs9IHo7XG4gICAgICB6ID0geTAgKiB4IC0geDAgKiB5O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0geiAqICh4MCArIHgpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgKz0geiAqICh5MCArIHkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjIgKz0geiAqIDM7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xuICAgIH1cbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCh4MDAsIHkwMCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcGF0aENvbnRleHQoY29udGV4dCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNTtcbiAgICB2YXIgc3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lU3RhcnQ7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZFBvbHlnb247XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICB9LFxuICAgICAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcG9pbnRSYWRpdXMgPSBfO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgfSxcbiAgICAgIHJlc3VsdDogZDNfbm9vcFxuICAgIH07XG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oeCArIHBvaW50UmFkaXVzLCB5KTtcbiAgICAgIGNvbnRleHQuYXJjKHgsIHksIHBvaW50UmFkaXVzLCAwLCDPhCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHgsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZUVuZFBvbHlnb24oKSB7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19yZXNhbXBsZShwcm9qZWN0KSB7XG4gICAgdmFyIM60MiA9IC41LCBjb3NNaW5EaXN0YW5jZSA9IE1hdGguY29zKDMwICogZDNfcmFkaWFucyksIG1heERlcHRoID0gMTY7XG4gICAgZnVuY3Rpb24gcmVzYW1wbGUoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gKG1heERlcHRoID8gcmVzYW1wbGVSZWN1cnNpdmUgOiByZXNhbXBsZU5vbmUpKHN0cmVhbSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2FtcGxlTm9uZShzdHJlYW0pIHtcbiAgICAgIHJldHVybiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzYW1wbGVSZWN1cnNpdmUoc3RyZWFtKSB7XG4gICAgICB2YXIgzrswMCwgz4YwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIM67MCwgeDAsIHkwLCBhMCwgYjAsIGMwO1xuICAgICAgdmFyIHJlc2FtcGxlID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICByZXNhbXBsZS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgcmVzYW1wbGUubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgICB4MCA9IE5hTjtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIGMgPSBkM19nZW9fY2FydGVzaWFuKFsgzrssIM+GIF0pLCBwID0gcHJvamVjdCjOuywgz4YpO1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIM67MCA9IM67LCBhMCA9IGNbMF0sIGIwID0gY1sxXSwgYzAgPSBjWzJdLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICByZXNhbXBsZS5wb2ludCA9IHBvaW50O1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgICBsaW5lU3RhcnQoKTtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICAgIHJlc2FtcGxlLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ1BvaW50KM67LCDPhikge1xuICAgICAgICBsaW5lUG9pbnQozrswMCA9IM67LCDPhjAwID0gz4YpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICAgIHJlc2FtcGxlLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCDOuzAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgcmVzYW1wbGUubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIGxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNhbXBsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgzrsxLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZHggPSB4MSAtIHgwLCBkeSA9IHkxIC0geTAsIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPiA0ICogzrQyICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFyIGEgPSBhMCArIGExLCBiID0gYjAgKyBiMSwgYyA9IGMwICsgYzEsIG0gPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSwgz4YyID0gTWF0aC5hc2luKGMgLz0gbSksIM67MiA9IGFicyhhYnMoYykgLSAxKSA8IM61IHx8IGFicyjOuzAgLSDOuzEpIDwgzrUgPyAozrswICsgzrsxKSAvIDIgOiBNYXRoLmF0YW4yKGIsIGEpLCBwID0gcHJvamVjdCjOuzIsIM+GMiksIHgyID0gcFswXSwgeTIgPSBwWzFdLCBkeDIgPSB4MiAtIHgwLCBkeTIgPSB5MiAtIHkwLCBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XG4gICAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiDOtDIgfHwgYWJzKChkeCAqIGR4MiArIGR5ICogZHkyKSAvIGQyIC0gLjUpID4gLjMgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHtcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDIsIHkyLCDOuzIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MiwgeTIsIM67MiwgYSwgYiwgYywgeDEsIHkxLCDOuzEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlc2FtcGxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCjOtDIpO1xuICAgICAgbWF4RGVwdGggPSAozrQyID0gXyAqIF8pID4gMCAmJiAxNjtcbiAgICAgIHJldHVybiByZXNhbXBsZTtcbiAgICB9O1xuICAgIHJldHVybiByZXNhbXBsZTtcbiAgfVxuICBkMy5nZW8ucGF0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNSwgcHJvamVjdGlvbiwgY29udGV4dCwgcHJvamVjdFN0cmVhbSwgY29udGV4dFN0cmVhbSwgY2FjaGVTdHJlYW07XG4gICAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtwb2ludFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgaWYgKCFjYWNoZVN0cmVhbSB8fCAhY2FjaGVTdHJlYW0udmFsaWQpIGNhY2hlU3RyZWFtID0gcHJvamVjdFN0cmVhbShjb250ZXh0U3RyZWFtKTtcbiAgICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGNhY2hlU3RyZWFtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuICAgIH1cbiAgICBwYXRoLmFyZWEgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGQzX2dlb19wYXRoQXJlYVN1bSA9IDA7XG4gICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aEFyZWEpKTtcbiAgICAgIHJldHVybiBkM19nZW9fcGF0aEFyZWFTdW07XG4gICAgfTtcbiAgICBwYXRoLmNlbnRyb2lkID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMCA9IGQzX2dlb19jZW50cm9pZFkwID0gZDNfZ2VvX2NlbnRyb2lkWjAgPSBkM19nZW9fY2VudHJvaWRYMSA9IGQzX2dlb19jZW50cm9pZFkxID0gZDNfZ2VvX2NlbnRyb2lkWjEgPSBkM19nZW9fY2VudHJvaWRYMiA9IGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIHByb2plY3RTdHJlYW0oZDNfZ2VvX3BhdGhDZW50cm9pZCkpO1xuICAgICAgcmV0dXJuIGQzX2dlb19jZW50cm9pZFoyID8gWyBkM19nZW9fY2VudHJvaWRYMiAvIGQzX2dlb19jZW50cm9pZFoyLCBkM19nZW9fY2VudHJvaWRZMiAvIGQzX2dlb19jZW50cm9pZFoyIF0gOiBkM19nZW9fY2VudHJvaWRaMSA/IFsgZDNfZ2VvX2NlbnRyb2lkWDEgLyBkM19nZW9fY2VudHJvaWRaMSwgZDNfZ2VvX2NlbnRyb2lkWTEgLyBkM19nZW9fY2VudHJvaWRaMSBdIDogZDNfZ2VvX2NlbnRyb2lkWjAgPyBbIGQzX2dlb19jZW50cm9pZFgwIC8gZDNfZ2VvX2NlbnRyb2lkWjAsIGQzX2dlb19jZW50cm9pZFkwIC8gZDNfZ2VvX2NlbnRyb2lkWjAgXSA6IFsgTmFOLCBOYU4gXTtcbiAgICB9O1xuICAgIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBkM19nZW9fcGF0aEJvdW5kc1gxID0gZDNfZ2VvX3BhdGhCb3VuZHNZMSA9IC0oZDNfZ2VvX3BhdGhCb3VuZHNYMCA9IGQzX2dlb19wYXRoQm91bmRzWTAgPSBJbmZpbml0eSk7XG4gICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aEJvdW5kcykpO1xuICAgICAgcmV0dXJuIFsgWyBkM19nZW9fcGF0aEJvdW5kc1gwLCBkM19nZW9fcGF0aEJvdW5kc1kwIF0sIFsgZDNfZ2VvX3BhdGhCb3VuZHNYMSwgZDNfZ2VvX3BhdGhCb3VuZHNZMSBdIF07XG4gICAgfTtcbiAgICBwYXRoLnByb2plY3Rpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcm9qZWN0aW9uO1xuICAgICAgcHJvamVjdFN0cmVhbSA9IChwcm9qZWN0aW9uID0gXykgPyBfLnN0cmVhbSB8fCBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0oXykgOiBkM19pZGVudGl0eTtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICAgIGNvbnRleHRTdHJlYW0gPSAoY29udGV4dCA9IF8pID09IG51bGwgPyBuZXcgZDNfZ2VvX3BhdGhCdWZmZXIoKSA6IG5ldyBkM19nZW9fcGF0aENvbnRleHQoXyk7XG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIHJldHVybiBwYXRoLnByb2plY3Rpb24oZDMuZ2VvLmFsYmVyc1VzYSgpKS5jb250ZXh0KG51bGwpO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0ocHJvamVjdCkge1xuICAgIHZhciByZXNhbXBsZSA9IGQzX2dlb19yZXNhbXBsZShmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4gcHJvamVjdChbIHggKiBkM19kZWdyZWVzLCB5ICogZDNfZGVncmVlcyBdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHJlc2FtcGxlKHN0cmVhbSkpO1xuICAgIH07XG4gIH1cbiAgZDMuZ2VvLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKG1ldGhvZHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyZWFtOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IG5ldyBkM19nZW9fdHJhbnNmb3JtKHN0cmVhbSk7XG4gICAgICAgIGZvciAodmFyIGsgaW4gbWV0aG9kcykgdHJhbnNmb3JtW2tdID0gbWV0aG9kc1trXTtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnNmb3JtKHN0cmVhbSkge1xuICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICB9XG4gIGQzX2dlb190cmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5zcGhlcmUoKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHJlYW0ubGluZUVuZCgpO1xuICAgIH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBwb2ludCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0uc3BoZXJlKCk7XG4gICAgICB9LFxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzLmdlby5wcm9qZWN0aW9uID0gZDNfZ2VvX3Byb2plY3Rpb247XG4gIGQzLmdlby5wcm9qZWN0aW9uTXV0YXRvciA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcjtcbiAgZnVuY3Rpb24gZDNfZ2VvX3Byb2plY3Rpb24ocHJvamVjdCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcHJvamVjdDtcbiAgICB9KSgpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcbiAgICB2YXIgcHJvamVjdCwgcm90YXRlLCBwcm9qZWN0Um90YXRlLCBwcm9qZWN0UmVzYW1wbGUgPSBkM19nZW9fcmVzYW1wbGUoZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICByZXR1cm4gWyB4WzBdICogayArIM60eCwgzrR5IC0geFsxXSAqIGsgXTtcbiAgICB9KSwgayA9IDE1MCwgeCA9IDQ4MCwgeSA9IDI1MCwgzrsgPSAwLCDPhiA9IDAsIM60zrsgPSAwLCDOtM+GID0gMCwgzrTOsyA9IDAsIM60eCwgzrR5LCBwcmVjbGlwID0gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4sIHBvc3RjbGlwID0gZDNfaWRlbnRpdHksIGNsaXBBbmdsZSA9IG51bGwsIGNsaXBFeHRlbnQgPSBudWxsLCBzdHJlYW07XG4gICAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlKHBvaW50WzBdICogZDNfcmFkaWFucywgcG9pbnRbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBbIHBvaW50WzBdICogayArIM60eCwgzrR5IC0gcG9pbnRbMV0gKiBrIF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlLmludmVydCgocG9pbnRbMF0gLSDOtHgpIC8gaywgKM60eSAtIHBvaW50WzFdKSAvIGspO1xuICAgICAgcmV0dXJuIHBvaW50ICYmIFsgcG9pbnRbMF0gKiBkM19kZWdyZWVzLCBwb2ludFsxXSAqIGQzX2RlZ3JlZXMgXTtcbiAgICB9XG4gICAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtID0gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHByZWNsaXAocm90YXRlLCBwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAob3V0cHV0KSkpKTtcbiAgICAgIHN0cmVhbS52YWxpZCA9IHRydWU7XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwQW5nbGU7XG4gICAgICBwcmVjbGlwID0gXyA9PSBudWxsID8gKGNsaXBBbmdsZSA9IF8sIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuKSA6IGQzX2dlb19jbGlwQ2lyY2xlKChjbGlwQW5nbGUgPSArXykgKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBpbnZhbGlkYXRlKCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50O1xuICAgICAgY2xpcEV4dGVudCA9IF87XG4gICAgICBwb3N0Y2xpcCA9IF8gPyBkM19nZW9fY2xpcEV4dGVudChfWzBdWzBdLCBfWzBdWzFdLCBfWzFdWzBdLCBfWzFdWzFdKSA6IGQzX2lkZW50aXR5O1xuICAgICAgcmV0dXJuIGludmFsaWRhdGUoKTtcbiAgICB9O1xuICAgIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBrO1xuICAgICAgayA9ICtfO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgeCwgeSBdO1xuICAgICAgeCA9ICtfWzBdO1xuICAgICAgeSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgzrsgKiBkM19kZWdyZWVzLCDPhiAqIGQzX2RlZ3JlZXMgXTtcbiAgICAgIM67ID0gX1swXSAlIDM2MCAqIGQzX3JhZGlhbnM7XG4gICAgICDPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgzrTOuyAqIGQzX2RlZ3JlZXMsIM60z4YgKiBkM19kZWdyZWVzLCDOtM6zICogZDNfZGVncmVlcyBdO1xuICAgICAgzrTOuyA9IF9bMF0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgzrTPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgzrTOsyA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiBkM19yYWRpYW5zIDogMDtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgZDMucmViaW5kKHByb2plY3Rpb24sIHByb2plY3RSZXNhbXBsZSwgXCJwcmVjaXNpb25cIik7XG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBwcm9qZWN0Um90YXRlID0gZDNfZ2VvX2NvbXBvc2Uocm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKM60zrssIM60z4YsIM60zrMpLCBwcm9qZWN0KTtcbiAgICAgIHZhciBjZW50ZXIgPSBwcm9qZWN0KM67LCDPhik7XG4gICAgICDOtHggPSB4IC0gY2VudGVyWzBdICogaztcbiAgICAgIM60eSA9IHkgKyBjZW50ZXJbMV0gKiBrO1xuICAgICAgcmV0dXJuIGludmFsaWRhdGUoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlLCBzdHJlYW0gPSBudWxsO1xuICAgICAgcmV0dXJuIHByb2plY3Rpb247XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHByb2plY3QgPSBwcm9qZWN0QXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcHJvamVjdGlvblJhZGlhbnMoc3RyZWFtKSB7XG4gICAgcmV0dXJuIGQzX2dlb190cmFuc2Zvcm1Qb2ludChzdHJlYW0sIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHN0cmVhbS5wb2ludCh4ICogZDNfcmFkaWFucywgeSAqIGQzX3JhZGlhbnMpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIozrssIM+GKSB7XG4gICAgcmV0dXJuIFsgzrssIM+GIF07XG4gIH1cbiAgKGQzLmdlby5lcXVpcmVjdGFuZ3VsYXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcik7XG4gIH0pLnJhdyA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIuaW52ZXJ0ID0gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcjtcbiAgZDMuZ2VvLnJvdGF0aW9uID0gZnVuY3Rpb24ocm90YXRlKSB7XG4gICAgcm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKHJvdGF0ZVswXSAlIDM2MCAqIGQzX3JhZGlhbnMsIHJvdGF0ZVsxXSAqIGQzX3JhZGlhbnMsIHJvdGF0ZS5sZW5ndGggPiAyID8gcm90YXRlWzJdICogZDNfcmFkaWFucyA6IDApO1xuICAgIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlcztcbiAgICB9XG4gICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlcztcbiAgICB9O1xuICAgIHJldHVybiBmb3J3YXJkO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9faWRlbnRpdHlSb3RhdGlvbijOuywgz4YpIHtcbiAgICByZXR1cm4gWyDOuyA+IM+AID8gzrsgLSDPhCA6IM67IDwgLc+AID8gzrsgKyDPhCA6IM67LCDPhiBdO1xuICB9XG4gIGQzX2dlb19pZGVudGl0eVJvdGF0aW9uLmludmVydCA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG4gIGZ1bmN0aW9uIGQzX2dlb19yb3RhdGlvbijOtM67LCDOtM+GLCDOtM6zKSB7XG4gICAgcmV0dXJuIM60zrsgPyDOtM+GIHx8IM60zrMgPyBkM19nZW9fY29tcG9zZShkM19nZW9fcm90YXRpb27OuyjOtM67KSwgZDNfZ2VvX3JvdGF0aW9uz4bOsyjOtM+GLCDOtM6zKSkgOiBkM19nZW9fcm90YXRpb27OuyjOtM67KSA6IM60z4YgfHwgzrTOsyA/IGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykgOiBkM19nZW9faWRlbnRpdHlSb3RhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fZm9yd2FyZFJvdGF0aW9uzrsozrTOuykge1xuICAgIHJldHVybiBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIHJldHVybiDOuyArPSDOtM67LCBbIM67ID4gz4AgPyDOuyAtIM+EIDogzrsgPCAtz4AgPyDOuyArIM+EIDogzrssIM+GIF07XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcm90YXRpb27OuyjOtM67KSB7XG4gICAgdmFyIHJvdGF0aW9uID0gZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67KM60zrspO1xuICAgIHJvdGF0aW9uLmludmVydCA9IGQzX2dlb19mb3J3YXJkUm90YXRpb27OuygtzrTOuyk7XG4gICAgcmV0dXJuIHJvdGF0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykge1xuICAgIHZhciBjb3POtM+GID0gTWF0aC5jb3MozrTPhiksIHNpbs60z4YgPSBNYXRoLnNpbijOtM+GKSwgY29zzrTOsyA9IE1hdGguY29zKM60zrMpLCBzaW7OtM6zID0gTWF0aC5zaW4ozrTOsyk7XG4gICAgZnVuY3Rpb24gcm90YXRpb24ozrssIM+GKSB7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhiwgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLCB6ID0gTWF0aC5zaW4oz4YpLCBrID0geiAqIGNvc860z4YgKyB4ICogc2luzrTPhjtcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSAqIGNvc860zrMgLSBrICogc2luzrTOsywgeCAqIGNvc860z4YgLSB6ICogc2luzrTPhiksIGQzX2FzaW4oayAqIGNvc860zrMgKyB5ICogc2luzrTOsykgXTtcbiAgICB9XG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhiwgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLCB6ID0gTWF0aC5zaW4oz4YpLCBrID0geiAqIGNvc860zrMgLSB5ICogc2luzrTOsztcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSAqIGNvc860zrMgKyB6ICogc2luzrTOsywgeCAqIGNvc860z4YgKyBrICogc2luzrTPhiksIGQzX2FzaW4oayAqIGNvc860z4YgLSB4ICogc2luzrTPhikgXTtcbiAgICB9O1xuICAgIHJldHVybiByb3RhdGlvbjtcbiAgfVxuICBkMy5nZW8uY2lyY2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9yaWdpbiA9IFsgMCwgMCBdLCBhbmdsZSwgcHJlY2lzaW9uID0gNiwgaW50ZXJwb2xhdGU7XG4gICAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgICAgdmFyIGNlbnRlciA9IHR5cGVvZiBvcmlnaW4gPT09IFwiZnVuY3Rpb25cIiA/IG9yaWdpbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogb3JpZ2luLCByb3RhdGUgPSBkM19nZW9fcm90YXRpb24oLWNlbnRlclswXSAqIGQzX3JhZGlhbnMsIC1jZW50ZXJbMV0gKiBkM19yYWRpYW5zLCAwKS5pbnZlcnQsIHJpbmcgPSBbXTtcbiAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgICAgICAgeFswXSAqPSBkM19kZWdyZWVzLCB4WzFdICo9IGQzX2RlZ3JlZXM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbIHJpbmcgXVxuICAgICAgfTtcbiAgICB9XG4gICAgY2lyY2xlLm9yaWdpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9yaWdpbjtcbiAgICAgIG9yaWdpbiA9IHg7XG4gICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH07XG4gICAgY2lyY2xlLmFuZ2xlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYW5nbGU7XG4gICAgICBpbnRlcnBvbGF0ZSA9IGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZSgoYW5nbGUgPSAreCkgKiBkM19yYWRpYW5zLCBwcmVjaXNpb24gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjaXJjbGU7XG4gICAgfTtcbiAgICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgICAgaW50ZXJwb2xhdGUgPSBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUoYW5nbGUgKiBkM19yYWRpYW5zLCAocHJlY2lzaW9uID0gK18pICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH07XG4gICAgcmV0dXJuIGNpcmNsZS5hbmdsZSg5MCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZShyYWRpdXMsIHByZWNpc2lvbikge1xuICAgIHZhciBjciA9IE1hdGguY29zKHJhZGl1cyksIHNyID0gTWF0aC5zaW4ocmFkaXVzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZnJvbSwgdG8sIGRpcmVjdGlvbiwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBzdGVwID0gZGlyZWN0aW9uICogcHJlY2lzaW9uO1xuICAgICAgaWYgKGZyb20gIT0gbnVsbCkge1xuICAgICAgICBmcm9tID0gZDNfZ2VvX2NpcmNsZUFuZ2xlKGNyLCBmcm9tKTtcbiAgICAgICAgdG8gPSBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHRvKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA+IDAgPyBmcm9tIDwgdG8gOiBmcm9tID4gdG8pIGZyb20gKz0gZGlyZWN0aW9uICogz4Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcm9tID0gcmFkaXVzICsgZGlyZWN0aW9uICogz4Q7XG4gICAgICAgIHRvID0gcmFkaXVzIC0gLjUgKiBzdGVwO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgcG9pbnQsIHQgPSBmcm9tOyBkaXJlY3Rpb24gPiAwID8gdCA+IHRvIDogdCA8IHRvOyB0IC09IHN0ZXApIHtcbiAgICAgICAgbGlzdGVuZXIucG9pbnQoKHBvaW50ID0gZDNfZ2VvX3NwaGVyaWNhbChbIGNyLCAtc3IgKiBNYXRoLmNvcyh0KSwgLXNyICogTWF0aC5zaW4odCkgXSkpWzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHBvaW50KSB7XG4gICAgdmFyIGEgPSBkM19nZW9fY2FydGVzaWFuKHBvaW50KTtcbiAgICBhWzBdIC09IGNyO1xuICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYSk7XG4gICAgdmFyIGFuZ2xlID0gZDNfYWNvcygtYVsxXSk7XG4gICAgcmV0dXJuICgoLWFbMl0gPCAwID8gLWFuZ2xlIDogYW5nbGUpICsgMiAqIE1hdGguUEkgLSDOtSkgJSAoMiAqIE1hdGguUEkpO1xuICB9XG4gIGQzLmdlby5kaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgzpTOuyA9IChiWzBdIC0gYVswXSkgKiBkM19yYWRpYW5zLCDPhjAgPSBhWzFdICogZDNfcmFkaWFucywgz4YxID0gYlsxXSAqIGQzX3JhZGlhbnMsIHNpbs6UzrsgPSBNYXRoLnNpbijOlM67KSwgY29zzpTOuyA9IE1hdGguY29zKM6UzrspLCBzaW7PhjAgPSBNYXRoLnNpbijPhjApLCBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLCBzaW7PhjEgPSBNYXRoLnNpbijPhjEpLCBjb3PPhjEgPSBNYXRoLmNvcyjPhjEpLCB0O1xuICAgIHJldHVybiBNYXRoLmF0YW4yKE1hdGguc3FydCgodCA9IGNvc8+GMSAqIHNpbs6UzrspICogdCArICh0ID0gY29zz4YwICogc2luz4YxIC0gc2luz4YwICogY29zz4YxICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YxICsgY29zz4YwICogY29zz4YxICogY29zzpTOuyk7XG4gIH07XG4gIGQzLmdlby5ncmF0aWN1bGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgeDEsIHgwLCBYMSwgWDAsIHkxLCB5MCwgWTEsIFkwLCBkeCA9IDEwLCBkeSA9IGR4LCBEWCA9IDkwLCBEWSA9IDM2MCwgeCwgeSwgWCwgWSwgcHJlY2lzaW9uID0gMi41O1xuICAgIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBsaW5lcygpXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoWDAgLyBEWCkgKiBEWCwgWDEsIERYKS5tYXAoWCkuY29uY2F0KGQzLnJhbmdlKE1hdGguY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSkuY29uY2F0KGQzLnJhbmdlKE1hdGguY2VpbCh4MCAvIGR4KSAqIGR4LCB4MSwgZHgpLmZpbHRlcihmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBhYnMoeCAlIERYKSA+IM61O1xuICAgICAgfSkubWFwKHgpKS5jb25jYXQoZDMucmFuZ2UoTWF0aC5jZWlsKHkwIC8gZHkpICogZHksIHkxLCBkeSkuZmlsdGVyKGZ1bmN0aW9uKHkpIHtcbiAgICAgICAgcmV0dXJuIGFicyh5ICUgRFkpID4gzrU7XG4gICAgICB9KS5tYXAoeSkpO1xuICAgIH1cbiAgICBncmF0aWN1bGUubGluZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiTGluZVN0cmluZ1wiLFxuICAgICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBncmF0aWN1bGUub3V0bGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbIFgoWDApLmNvbmNhdChZKFkxKS5zbGljZSgxKSwgWChYMSkucmV2ZXJzZSgpLnNsaWNlKDEpLCBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpIF1cbiAgICAgIH07XG4gICAgfTtcbiAgICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLm1pbm9yRXh0ZW50KCk7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yRXh0ZW50KF8pLm1pbm9yRXh0ZW50KF8pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm1ham9yRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIFgwLCBZMCBdLCBbIFgxLCBZMSBdIF07XG4gICAgICBYMCA9ICtfWzBdWzBdLCBYMSA9ICtfWzFdWzBdO1xuICAgICAgWTAgPSArX1swXVsxXSwgWTEgPSArX1sxXVsxXTtcbiAgICAgIGlmIChYMCA+IFgxKSBfID0gWDAsIFgwID0gWDEsIFgxID0gXztcbiAgICAgIGlmIChZMCA+IFkxKSBfID0gWTAsIFkwID0gWTEsIFkxID0gXztcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gICAgfTtcbiAgICBncmF0aWN1bGUubWlub3JFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIFsgeDAsIHkwIF0sIFsgeDEsIHkxIF0gXTtcbiAgICAgIHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF07XG4gICAgICB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdO1xuICAgICAgaWYgKHgwID4geDEpIF8gPSB4MCwgeDAgPSB4MSwgeDEgPSBfO1xuICAgICAgaWYgKHkwID4geTEpIF8gPSB5MCwgeTAgPSB5MSwgeTEgPSBfO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLm1pbm9yU3RlcCgpO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5tYWpvclN0ZXAoXykubWlub3JTdGVwKF8pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm1ham9yU3RlcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgRFgsIERZIF07XG4gICAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5taW5vclN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIGR4LCBkeSBdO1xuICAgICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcbiAgICBncmF0aWN1bGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgICAgcHJlY2lzaW9uID0gK187XG4gICAgICB4ID0gZDNfZ2VvX2dyYXRpY3VsZVgoeTAsIHkxLCA5MCk7XG4gICAgICB5ID0gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBwcmVjaXNpb24pO1xuICAgICAgWCA9IGQzX2dlb19ncmF0aWN1bGVYKFkwLCBZMSwgOTApO1xuICAgICAgWSA9IGQzX2dlb19ncmF0aWN1bGVZKFgwLCBYMSwgcHJlY2lzaW9uKTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcbiAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yRXh0ZW50KFsgWyAtMTgwLCAtOTAgKyDOtSBdLCBbIDE4MCwgOTAgLSDOtSBdIF0pLm1pbm9yRXh0ZW50KFsgWyAtMTgwLCAtODAgLSDOtSBdLCBbIDE4MCwgODAgKyDOtSBdIF0pO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gICAgdmFyIHkgPSBkMy5yYW5nZSh5MCwgeTEgLSDOtSwgZHkpLmNvbmNhdCh5MSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7XG4gICAgICAgIHJldHVybiBbIHgsIHkgXTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBkeCkge1xuICAgIHZhciB4ID0gZDMucmFuZ2UoeDAsIHgxIC0gzrUsIGR4KS5jb25jYXQoeDEpO1xuICAgIHJldHVybiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gWyB4LCB5IF07XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NvdXJjZShkKSB7XG4gICAgcmV0dXJuIGQuc291cmNlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RhcmdldChkKSB7XG4gICAgcmV0dXJuIGQudGFyZ2V0O1xuICB9XG4gIGQzLmdlby5ncmVhdEFyYyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3VyY2UgPSBkM19zb3VyY2UsIHNvdXJjZV8sIHRhcmdldCA9IGQzX3RhcmdldCwgdGFyZ2V0XztcbiAgICBmdW5jdGlvbiBncmVhdEFyYygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiTGluZVN0cmluZ1wiLFxuICAgICAgICBjb29yZGluYXRlczogWyBzb3VyY2VfIHx8IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0YXJnZXRfIHx8IHRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIF1cbiAgICAgIH07XG4gICAgfVxuICAgIGdyZWF0QXJjLmRpc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDMuZ2VvLmRpc3RhbmNlKHNvdXJjZV8gfHwgc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRhcmdldF8gfHwgdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgZ3JlYXRBcmMuc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc291cmNlO1xuICAgICAgc291cmNlID0gXywgc291cmNlXyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBudWxsIDogXztcbiAgICAgIHJldHVybiBncmVhdEFyYztcbiAgICB9O1xuICAgIGdyZWF0QXJjLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcbiAgICAgIHRhcmdldCA9IF8sIHRhcmdldF8gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gbnVsbCA6IF87XG4gICAgICByZXR1cm4gZ3JlYXRBcmM7XG4gICAgfTtcbiAgICBncmVhdEFyYy5wcmVjaXNpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZ3JlYXRBcmMgOiAwO1xuICAgIH07XG4gICAgcmV0dXJuIGdyZWF0QXJjO1xuICB9O1xuICBkMy5nZW8uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihzb3VyY2UsIHRhcmdldCkge1xuICAgIHJldHVybiBkM19nZW9faW50ZXJwb2xhdGUoc291cmNlWzBdICogZDNfcmFkaWFucywgc291cmNlWzFdICogZDNfcmFkaWFucywgdGFyZ2V0WzBdICogZDNfcmFkaWFucywgdGFyZ2V0WzFdICogZDNfcmFkaWFucyk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19pbnRlcnBvbGF0ZSh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBjeTAgPSBNYXRoLmNvcyh5MCksIHN5MCA9IE1hdGguc2luKHkwKSwgY3kxID0gTWF0aC5jb3MoeTEpLCBzeTEgPSBNYXRoLnNpbih5MSksIGt4MCA9IGN5MCAqIE1hdGguY29zKHgwKSwga3kwID0gY3kwICogTWF0aC5zaW4oeDApLCBreDEgPSBjeTEgKiBNYXRoLmNvcyh4MSksIGt5MSA9IGN5MSAqIE1hdGguc2luKHgxKSwgZCA9IDIgKiBNYXRoLmFzaW4oTWF0aC5zcXJ0KGQzX2hhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogZDNfaGF2ZXJzaW4oeDEgLSB4MCkpKSwgayA9IDEgLyBNYXRoLnNpbihkKTtcbiAgICB2YXIgaW50ZXJwb2xhdGUgPSBkID8gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIEIgPSBNYXRoLnNpbih0ICo9IGQpICogaywgQSA9IE1hdGguc2luKGQgLSB0KSAqIGssIHggPSBBICoga3gwICsgQiAqIGt4MSwgeSA9IEEgKiBreTAgKyBCICoga3kxLCB6ID0gQSAqIHN5MCArIEIgKiBzeTE7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHksIHgpICogZDNfZGVncmVlcywgTWF0aC5hdGFuMih6LCBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSkpICogZDNfZGVncmVlcyBdO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbIHgwICogZDNfZGVncmVlcywgeTAgKiBkM19kZWdyZWVzIF07XG4gICAgfTtcbiAgICBpbnRlcnBvbGF0ZS5kaXN0YW5jZSA9IGQ7XG4gICAgcmV0dXJuIGludGVycG9sYXRlO1xuICB9XG4gIGQzLmdlby5sZW5ndGggPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBkM19nZW9fbGVuZ3RoU3VtID0gMDtcbiAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2xlbmd0aCk7XG4gICAgcmV0dXJuIGQzX2dlb19sZW5ndGhTdW07XG4gIH07XG4gIHZhciBkM19nZW9fbGVuZ3RoU3VtO1xuICB2YXIgZDNfZ2VvX2xlbmd0aCA9IHtcbiAgICBzcGhlcmU6IGQzX25vb3AsXG4gICAgcG9pbnQ6IGQzX25vb3AsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fbGVuZ3RoTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgcG9seWdvblN0YXJ0OiBkM19ub29wLFxuICAgIHBvbHlnb25FbmQ6IGQzX25vb3BcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX2xlbmd0aExpbmVTdGFydCgpIHtcbiAgICB2YXIgzrswLCBzaW7PhjAsIGNvc8+GMDtcbiAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICDOuzAgPSDOuyAqIGQzX3JhZGlhbnMsIHNpbs+GMCA9IE1hdGguc2luKM+GICo9IGQzX3JhZGlhbnMpLCBjb3PPhjAgPSBNYXRoLmNvcyjPhik7XG4gICAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gbmV4dFBvaW50O1xuICAgIH07XG4gICAgZDNfZ2VvX2xlbmd0aC5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gZDNfZ2VvX2xlbmd0aC5saW5lRW5kID0gZDNfbm9vcDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcbiAgICAgIHZhciBzaW7PhiA9IE1hdGguc2luKM+GICo9IGQzX3JhZGlhbnMpLCBjb3PPhiA9IE1hdGguY29zKM+GKSwgdCA9IGFicygozrsgKj0gZDNfcmFkaWFucykgLSDOuzApLCBjb3POlM67ID0gTWF0aC5jb3ModCk7XG4gICAgICBkM19nZW9fbGVuZ3RoU3VtICs9IE1hdGguYXRhbjIoTWF0aC5zcXJ0KCh0ID0gY29zz4YgKiBNYXRoLnNpbih0KSkgKiB0ICsgKHQgPSBjb3PPhjAgKiBzaW7PhiAtIHNpbs+GMCAqIGNvc8+GICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YgKyBjb3PPhjAgKiBjb3PPhiAqIGNvc86UzrspO1xuICAgICAgzrswID0gzrssIHNpbs+GMCA9IHNpbs+GLCBjb3PPhjAgPSBjb3PPhjtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2F6aW11dGhhbChzY2FsZSwgYW5nbGUpIHtcbiAgICBmdW5jdGlvbiBhemltdXRoYWwozrssIM+GKSB7XG4gICAgICB2YXIgY29zzrsgPSBNYXRoLmNvcyjOuyksIGNvc8+GID0gTWF0aC5jb3Moz4YpLCBrID0gc2NhbGUoY29zzrsgKiBjb3PPhik7XG4gICAgICByZXR1cm4gWyBrICogY29zz4YgKiBNYXRoLnNpbijOuyksIGsgKiBNYXRoLnNpbijPhikgXTtcbiAgICB9XG4gICAgYXppbXV0aGFsLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgSA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSwgYyA9IGFuZ2xlKM+BKSwgc2luYyA9IE1hdGguc2luKGMpLCBjb3NjID0gTWF0aC5jb3MoYyk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHggKiBzaW5jLCDPgSAqIGNvc2MpLCBNYXRoLmFzaW4oz4EgJiYgeSAqIHNpbmMgLyDPgSkgXTtcbiAgICB9O1xuICAgIHJldHVybiBhemltdXRoYWw7XG4gIH1cbiAgdmFyIGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWEgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KDIgLyAoMSArIGNvc867Y29zz4YpKTtcbiAgfSwgZnVuY3Rpb24oz4EpIHtcbiAgICByZXR1cm4gMiAqIE1hdGguYXNpbijPgSAvIDIpO1xuICB9KTtcbiAgKGQzLmdlby5hemltdXRoYWxFcXVhbEFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2F6aW11dGhhbEVxdWFsQXJlYSk7XG4gIH0pLnJhdyA9IGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWE7XG4gIHZhciBkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcbiAgICB2YXIgYyA9IE1hdGguYWNvcyhjb3POu2Nvc8+GKTtcbiAgICByZXR1cm4gYyAmJiBjIC8gTWF0aC5zaW4oYyk7XG4gIH0sIGQzX2lkZW50aXR5KTtcbiAgKGQzLmdlby5hemltdXRoYWxFcXVpZGlzdGFudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQpO1xuICB9KS5yYXcgPSBkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQ7XG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0NvbmZvcm1hbCjPhjAsIM+GMSkge1xuICAgIHZhciBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLCB0ID0gZnVuY3Rpb24oz4YpIHtcbiAgICAgIHJldHVybiBNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpO1xuICAgIH0sIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiBNYXRoLmxvZyhjb3PPhjAgLyBNYXRoLmNvcyjPhjEpKSAvIE1hdGgubG9nKHQoz4YxKSAvIHQoz4YwKSksIEYgPSBjb3PPhjAgKiBNYXRoLnBvdyh0KM+GMCksIG4pIC8gbjtcbiAgICBpZiAoIW4pIHJldHVybiBkM19nZW9fbWVyY2F0b3I7XG4gICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcbiAgICAgIGlmIChGID4gMCkge1xuICAgICAgICBpZiAoz4YgPCAtaGFsZs+AICsgzrUpIM+GID0gLWhhbGbPgCArIM61O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKM+GID4gaGFsZs+AIC0gzrUpIM+GID0gaGFsZs+AIC0gzrU7XG4gICAgICB9XG4gICAgICB2YXIgz4EgPSBGIC8gTWF0aC5wb3codCjPhiksIG4pO1xuICAgICAgcmV0dXJuIFsgz4EgKiBNYXRoLnNpbihuICogzrspLCBGIC0gz4EgKiBNYXRoLmNvcyhuICogzrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gRiAtIHksIM+BID0gZDNfc2duKG4pICogTWF0aC5zcXJ0KHggKiB4ICsgz4EwX3kgKiDPgTBfeSk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIDIgKiBNYXRoLmF0YW4oTWF0aC5wb3coRiAvIM+BLCAxIC8gbikpIC0gaGFsZs+AIF07XG4gICAgfTtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxuICAoZDMuZ2VvLmNvbmljQ29uZm9ybWFsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNDb25mb3JtYWwpO1xuICB9KS5yYXcgPSBkM19nZW9fY29uaWNDb25mb3JtYWw7XG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0VxdWlkaXN0YW50KM+GMCwgz4YxKSB7XG4gICAgdmFyIGNvc8+GMCA9IE1hdGguY29zKM+GMCksIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiAoY29zz4YwIC0gTWF0aC5jb3Moz4YxKSkgLyAoz4YxIC0gz4YwKSwgRyA9IGNvc8+GMCAvIG4gKyDPhjA7XG4gICAgaWYgKGFicyhuKSA8IM61KSByZXR1cm4gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcjtcbiAgICBmdW5jdGlvbiBmb3J3YXJkKM67LCDPhikge1xuICAgICAgdmFyIM+BID0gRyAtIM+GO1xuICAgICAgcmV0dXJuIFsgz4EgKiBNYXRoLnNpbihuICogzrspLCBHIC0gz4EgKiBNYXRoLmNvcyhuICogzrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gRyAtIHk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIEcgLSBkM19zZ24obikgKiBNYXRoLnNxcnQoeCAqIHggKyDPgTBfeSAqIM+BMF95KSBdO1xuICAgIH07XG4gICAgcmV0dXJuIGZvcndhcmQ7XG4gIH1cbiAgKGQzLmdlby5jb25pY0VxdWlkaXN0YW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNFcXVpZGlzdGFudCk7XG4gIH0pLnJhdyA9IGQzX2dlb19jb25pY0VxdWlkaXN0YW50O1xuICB2YXIgZDNfZ2VvX2dub21vbmljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgcmV0dXJuIDEgLyBjb3POu2Nvc8+GO1xuICB9LCBNYXRoLmF0YW4pO1xuICAoZDMuZ2VvLmdub21vbmljID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19nbm9tb25pYyk7XG4gIH0pLnJhdyA9IGQzX2dlb19nbm9tb25pYztcbiAgZnVuY3Rpb24gZDNfZ2VvX21lcmNhdG9yKM67LCDPhikge1xuICAgIHJldHVybiBbIM67LCBNYXRoLmxvZyhNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpKSBdO1xuICB9XG4gIGQzX2dlb19tZXJjYXRvci5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsgeCwgMiAqIE1hdGguYXRhbihNYXRoLmV4cCh5KSkgLSBoYWxmz4AgXTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gICAgdmFyIG0gPSBkM19nZW9fcHJvamVjdGlvbihwcm9qZWN0KSwgc2NhbGUgPSBtLnNjYWxlLCB0cmFuc2xhdGUgPSBtLnRyYW5zbGF0ZSwgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCwgY2xpcEF1dG87XG4gICAgbS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSBzY2FsZS5hcHBseShtLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHYgPT09IG0gPyBjbGlwQXV0byA/IG0uY2xpcEV4dGVudChudWxsKSA6IG0gOiB2O1xuICAgIH07XG4gICAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdHJhbnNsYXRlLmFwcGx5KG0sIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdiA9PT0gbSA/IGNsaXBBdXRvID8gbS5jbGlwRXh0ZW50KG51bGwpIDogbSA6IHY7XG4gICAgfTtcbiAgICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICB2YXIgdiA9IGNsaXBFeHRlbnQuYXBwbHkobSwgYXJndW1lbnRzKTtcbiAgICAgIGlmICh2ID09PSBtKSB7XG4gICAgICAgIGlmIChjbGlwQXV0byA9IF8gPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBrID0gz4AgKiBzY2FsZSgpLCB0ID0gdHJhbnNsYXRlKCk7XG4gICAgICAgICAgY2xpcEV4dGVudChbIFsgdFswXSAtIGssIHRbMV0gLSBrIF0sIFsgdFswXSArIGssIHRbMV0gKyBrIF0gXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2xpcEF1dG8pIHtcbiAgICAgICAgdiA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdjtcbiAgICB9O1xuICAgIHJldHVybiBtLmNsaXBFeHRlbnQobnVsbCk7XG4gIH1cbiAgKGQzLmdlby5tZXJjYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uKGQzX2dlb19tZXJjYXRvcik7XG4gIH0pLnJhdyA9IGQzX2dlb19tZXJjYXRvcjtcbiAgdmFyIGQzX2dlb19vcnRob2dyYXBoaWMgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAxO1xuICB9LCBNYXRoLmFzaW4pO1xuICAoZDMuZ2VvLm9ydGhvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fb3J0aG9ncmFwaGljKTtcbiAgfSkucmF3ID0gZDNfZ2VvX29ydGhvZ3JhcGhpYztcbiAgdmFyIGQzX2dlb19zdGVyZW9ncmFwaGljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgcmV0dXJuIDEgLyAoMSArIGNvc867Y29zz4YpO1xuICB9LCBmdW5jdGlvbijPgSkge1xuICAgIHJldHVybiAyICogTWF0aC5hdGFuKM+BKTtcbiAgfSk7XG4gIChkMy5nZW8uc3RlcmVvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fc3RlcmVvZ3JhcGhpYyk7XG4gIH0pLnJhdyA9IGQzX2dlb19zdGVyZW9ncmFwaGljO1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yKM67LCDPhikge1xuICAgIHJldHVybiBbIE1hdGgubG9nKE1hdGgudGFuKM+AIC8gNCArIM+GIC8gMikpLCAtzrsgXTtcbiAgfVxuICBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gWyAteSwgMiAqIE1hdGguYXRhbihNYXRoLmV4cCh4KSkgLSBoYWxmz4AgXTtcbiAgfTtcbiAgKGQzLmdlby50cmFuc3ZlcnNlTWVyY2F0b3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvamVjdGlvbiA9IGQzX2dlb19tZXJjYXRvclByb2plY3Rpb24oZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvciksIGNlbnRlciA9IHByb2plY3Rpb24uY2VudGVyLCByb3RhdGUgPSBwcm9qZWN0aW9uLnJvdGF0ZTtcbiAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBfID8gY2VudGVyKFsgLV9bMV0sIF9bMF0gXSkgOiAoXyA9IGNlbnRlcigpLCBbIF9bMV0sIC1fWzBdIF0pO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gXyA/IHJvdGF0ZShbIF9bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwIF0pIDogKF8gPSByb3RhdGUoKSwgXG4gICAgICBbIF9bMF0sIF9bMV0sIF9bMl0gLSA5MCBdKTtcbiAgICB9O1xuICAgIHJldHVybiByb3RhdGUoWyAwLCAwLCA5MCBdKTtcbiAgfSkucmF3ID0gZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvcjtcbiAgZDMuZ2VvbSA9IHt9O1xuICBmdW5jdGlvbiBkM19nZW9tX3BvaW50WChkKSB7XG4gICAgcmV0dXJuIGRbMF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2ludFkoZCkge1xuICAgIHJldHVybiBkWzFdO1xuICB9XG4gIGQzLmdlb20uaHVsbCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaHVsbCh2ZXJ0aWNlcyk7XG4gICAgZnVuY3Rpb24gaHVsbChkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5sZW5ndGggPCAzKSByZXR1cm4gW107XG4gICAgICB2YXIgZnggPSBkM19mdW5jdG9yKHgpLCBmeSA9IGQzX2Z1bmN0b3IoeSksIGksIG4gPSBkYXRhLmxlbmd0aCwgcG9pbnRzID0gW10sIGZsaXBwZWRQb2ludHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcG9pbnRzLnB1c2goWyArZnguY2FsbCh0aGlzLCBkYXRhW2ldLCBpKSwgK2Z5LmNhbGwodGhpcywgZGF0YVtpXSwgaSksIGkgXSk7XG4gICAgICB9XG4gICAgICBwb2ludHMuc29ydChkM19nZW9tX2h1bGxPcmRlcik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBmbGlwcGVkUG9pbnRzLnB1c2goWyBwb2ludHNbaV1bMF0sIC1wb2ludHNbaV1bMV0gXSk7XG4gICAgICB2YXIgdXBwZXIgPSBkM19nZW9tX2h1bGxVcHBlcihwb2ludHMpLCBsb3dlciA9IGQzX2dlb21faHVsbFVwcGVyKGZsaXBwZWRQb2ludHMpO1xuICAgICAgdmFyIHNraXBMZWZ0ID0gbG93ZXJbMF0gPT09IHVwcGVyWzBdLCBza2lwUmlnaHQgPSBsb3dlcltsb3dlci5sZW5ndGggLSAxXSA9PT0gdXBwZXJbdXBwZXIubGVuZ3RoIC0gMV0sIHBvbHlnb24gPSBbXTtcbiAgICAgIGZvciAoaSA9IHVwcGVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBwb2x5Z29uLnB1c2goZGF0YVtwb2ludHNbdXBwZXJbaV1dWzJdXSk7XG4gICAgICBmb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlci5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgcG9seWdvbi5wdXNoKGRhdGFbcG9pbnRzW2xvd2VyW2ldXVsyXV0pO1xuICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfVxuICAgIGh1bGwueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSBfLCBodWxsKSA6IHg7XG4gICAgfTtcbiAgICBodWxsLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gXywgaHVsbCkgOiB5O1xuICAgIH07XG4gICAgcmV0dXJuIGh1bGw7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21faHVsbFVwcGVyKHBvaW50cykge1xuICAgIHZhciBuID0gcG9pbnRzLmxlbmd0aCwgaHVsbCA9IFsgMCwgMSBdLCBocyA9IDI7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyBpKyspIHtcbiAgICAgIHdoaWxlIChocyA+IDEgJiYgZDNfY3Jvc3MyZChwb2ludHNbaHVsbFtocyAtIDJdXSwgcG9pbnRzW2h1bGxbaHMgLSAxXV0sIHBvaW50c1tpXSkgPD0gMCkgLS1ocztcbiAgICAgIGh1bGxbaHMrK10gPSBpO1xuICAgIH1cbiAgICByZXR1cm4gaHVsbC5zbGljZSgwLCBocyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9odWxsT3JkZXIoYSwgYikge1xuICAgIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbiAgfVxuICBkMy5nZW9tLnBvbHlnb24gPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIGQzX3N1YmNsYXNzKGNvb3JkaW5hdGVzLCBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUpO1xuICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgfTtcbiAgdmFyIGQzX2dlb21fcG9seWdvblByb3RvdHlwZSA9IGQzLmdlb20ucG9seWdvbi5wcm90b3R5cGUgPSBbXTtcbiAgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlLmFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIGEsIGIgPSB0aGlzW24gLSAxXSwgYXJlYSA9IDA7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBhcmVhICs9IGFbMV0gKiBiWzBdIC0gYVswXSAqIGJbMV07XG4gICAgfVxuICAgIHJldHVybiBhcmVhICogLjU7XG4gIH07XG4gIGQzX2dlb21fcG9seWdvblByb3RvdHlwZS5jZW50cm9pZCA9IGZ1bmN0aW9uKGspIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIHggPSAwLCB5ID0gMCwgYSwgYiA9IHRoaXNbbiAtIDFdLCBjO1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgayA9IC0xIC8gKDYgKiB0aGlzLmFyZWEoKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBjID0gYVswXSAqIGJbMV0gLSBiWzBdICogYVsxXTtcbiAgICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgICB5ICs9IChhWzFdICsgYlsxXSkgKiBjO1xuICAgIH1cbiAgICByZXR1cm4gWyB4ICogaywgeSAqIGsgXTtcbiAgfTtcbiAgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlLmNsaXAgPSBmdW5jdGlvbihzdWJqZWN0KSB7XG4gICAgdmFyIGlucHV0LCBjbG9zZWQgPSBkM19nZW9tX3BvbHlnb25DbG9zZWQoc3ViamVjdCksIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoIC0gZDNfZ2VvbV9wb2x5Z29uQ2xvc2VkKHRoaXMpLCBqLCBtLCBhID0gdGhpc1tuIC0gMV0sIGIsIGMsIGQ7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlucHV0ID0gc3ViamVjdC5zbGljZSgpO1xuICAgICAgc3ViamVjdC5sZW5ndGggPSAwO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBjID0gaW5wdXRbKG0gPSBpbnB1dC5sZW5ndGggLSBjbG9zZWQpIC0gMV07XG4gICAgICBqID0gLTE7XG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICBkID0gaW5wdXRbal07XG4gICAgICAgIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoZCwgYSwgYikpIHtcbiAgICAgICAgICBpZiAoIWQzX2dlb21fcG9seWdvbkluc2lkZShjLCBhLCBiKSkge1xuICAgICAgICAgICAgc3ViamVjdC5wdXNoKGQzX2dlb21fcG9seWdvbkludGVyc2VjdChjLCBkLCBhLCBiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1YmplY3QucHVzaChkKTtcbiAgICAgICAgfSBlbHNlIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoYywgYSwgYikpIHtcbiAgICAgICAgICBzdWJqZWN0LnB1c2goZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpKTtcbiAgICAgICAgfVxuICAgICAgICBjID0gZDtcbiAgICAgIH1cbiAgICAgIGlmIChjbG9zZWQpIHN1YmplY3QucHVzaChzdWJqZWN0WzBdKTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gc3ViamVjdDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKHAsIGEsIGIpIHtcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChwWzFdIC0gYVsxXSkgPCAoYlsxXSAtIGFbMV0pICogKHBbMF0gLSBhWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoYywgZCwgYSwgYikge1xuICAgIHZhciB4MSA9IGNbMF0sIHgzID0gYVswXSwgeDIxID0gZFswXSAtIHgxLCB4NDMgPSBiWzBdIC0geDMsIHkxID0gY1sxXSwgeTMgPSBhWzFdLCB5MjEgPSBkWzFdIC0geTEsIHk0MyA9IGJbMV0gLSB5MywgdWEgPSAoeDQzICogKHkxIC0geTMpIC0geTQzICogKHgxIC0geDMpKSAvICh5NDMgKiB4MjEgLSB4NDMgKiB5MjEpO1xuICAgIHJldHVybiBbIHgxICsgdWEgKiB4MjEsIHkxICsgdWEgKiB5MjEgXTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25DbG9zZWQoY29vcmRpbmF0ZXMpIHtcbiAgICB2YXIgYSA9IGNvb3JkaW5hdGVzWzBdLCBiID0gY29vcmRpbmF0ZXNbY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuICEoYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV0pO1xuICB9XG4gIHZhciBkM19nZW9tX3Zvcm9ub2lFZGdlcywgZDNfZ2VvbV92b3Jvbm9pQ2VsbHMsIGQzX2dlb21fdm9yb25vaUJlYWNoZXMsIGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbCA9IFtdLCBkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZSwgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcywgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbCA9IFtdO1xuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lCZWFjaCgpIHtcbiAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUodGhpcyk7XG4gICAgdGhpcy5lZGdlID0gdGhpcy5zaXRlID0gdGhpcy5jaXJjbGUgPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNyZWF0ZUJlYWNoKHNpdGUpIHtcbiAgICB2YXIgYmVhY2ggPSBkM19nZW9tX3Zvcm9ub2lCZWFjaFBvb2wucG9wKCkgfHwgbmV3IGQzX2dlb21fdm9yb25vaUJlYWNoKCk7XG4gICAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gICAgcmV0dXJuIGJlYWNoO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGJlYWNoKSB7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hQb29sLnB1c2goYmVhY2gpO1xuICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShiZWFjaCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goYmVhY2gpIHtcbiAgICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLCB4ID0gY2lyY2xlLngsIHkgPSBjaXJjbGUuY3ksIHZlcnRleCA9IHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfSwgcHJldmlvdXMgPSBiZWFjaC5QLCBuZXh0ID0gYmVhY2guTiwgZGlzYXBwZWFyaW5nID0gWyBiZWFjaCBdO1xuICAgIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGJlYWNoKTtcbiAgICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICAgIHdoaWxlIChsQXJjLmNpcmNsZSAmJiBhYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgzrUgJiYgYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCDOtSkge1xuICAgICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGxBcmMpO1xuICAgICAgbEFyYyA9IHByZXZpb3VzO1xuICAgIH1cbiAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgdmFyIHJBcmMgPSBuZXh0O1xuICAgIHdoaWxlIChyQXJjLmNpcmNsZSAmJiBhYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgzrUgJiYgYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCDOtSkge1xuICAgICAgbmV4dCA9IHJBcmMuTjtcbiAgICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQmVhY2gockFyYyk7XG4gICAgICByQXJjID0gbmV4dDtcbiAgICB9XG4gICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsIGlBcmM7XG4gICAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbaUFyY107XG4gICAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICAgIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgICB9XG4gICAgbEFyYyA9IGRpc2FwcGVhcmluZ1swXTtcbiAgICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gICAgckFyYy5lZGdlID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKHJBcmMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUFkZEJlYWNoKHNpdGUpIHtcbiAgICB2YXIgeCA9IHNpdGUueCwgZGlyZWN0cml4ID0gc2l0ZS55LCBsQXJjLCByQXJjLCBkeGwsIGR4ciwgbm9kZSA9IGQzX2dlb21fdm9yb25vaUJlYWNoZXMuXztcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgZHhsID0gZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KSAtIHg7XG4gICAgICBpZiAoZHhsID4gzrUpIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuICAgICAgICBkeHIgPSB4IC0gZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCk7XG4gICAgICAgIGlmIChkeHIgPiDOtSkge1xuICAgICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlID0gbm9kZS5SO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChkeGwgPiAtzrUpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgICByQXJjID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC3OtSkge1xuICAgICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgICByQXJjID0gbm9kZS5OO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsQXJjID0gckFyYyA9IG5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBuZXdBcmMgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVCZWFjaChzaXRlKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuICAgIGlmICghbEFyYyAmJiAhckFyYykgcmV0dXJuO1xuICAgIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgICByQXJjID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaUJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUockFyYyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghckFyYykge1xuICAgICAgbmV3QXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSwgYXggPSBsU2l0ZS54LCBheSA9IGxTaXRlLnksIGJ4ID0gc2l0ZS54IC0gYXgsIGJ5ID0gc2l0ZS55IC0gYXksIHJTaXRlID0gckFyYy5zaXRlLCBjeCA9IHJTaXRlLnggLSBheCwgY3kgPSByU2l0ZS55IC0gYXksIGQgPSAyICogKGJ4ICogY3kgLSBieSAqIGN4KSwgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSwgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSwgdmVydGV4ID0ge1xuICAgICAgeDogKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCxcbiAgICAgIHk6IChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXlcbiAgICB9O1xuICAgIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQockFyYy5lZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCk7XG4gICAgbmV3QXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICAgIHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2Uoc2l0ZSwgclNpdGUsIG51bGwsIHZlcnRleCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShyQXJjKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lMZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICAgIHZhciBzaXRlID0gYXJjLnNpdGUsIHJmb2N4ID0gc2l0ZS54LCByZm9jeSA9IHNpdGUueSwgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuICAgIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuICAgIHZhciBsQXJjID0gYXJjLlA7XG4gICAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuICAgIHNpdGUgPSBsQXJjLnNpdGU7XG4gICAgdmFyIGxmb2N4ID0gc2l0ZS54LCBsZm9jeSA9IHNpdGUueSwgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcbiAgICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG4gICAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCwgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLCBiID0gaGwgLyBwbGJ5MjtcbiAgICBpZiAoYWJ5MikgcmV0dXJuICgtYiArIE1hdGguc3FydChiICogYiAtIDIgKiBhYnkyICogKGhsICogaGwgLyAoLTIgKiBwbGJ5MikgLSBsZm9jeSArIHBsYnkyIC8gMiArIHJmb2N5IC0gcGJ5MiAvIDIpKSkgLyBhYnkyICsgcmZvY3g7XG4gICAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gICAgdmFyIHJBcmMgPSBhcmMuTjtcbiAgICBpZiAockFyYykgcmV0dXJuIGQzX2dlb21fdm9yb25vaUxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gICAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgICByZXR1cm4gc2l0ZS55ID09PSBkaXJlY3RyaXggPyBzaXRlLnggOiBJbmZpbml0eTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDZWxsKHNpdGUpIHtcbiAgICB0aGlzLnNpdGUgPSBzaXRlO1xuICAgIHRoaXMuZWRnZXMgPSBbXTtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lDZWxsLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhhbGZFZGdlcyA9IHRoaXMuZWRnZXMsIGlIYWxmRWRnZSA9IGhhbGZFZGdlcy5sZW5ndGgsIGVkZ2U7XG4gICAgd2hpbGUgKGlIYWxmRWRnZS0tKSB7XG4gICAgICBlZGdlID0gaGFsZkVkZ2VzW2lIYWxmRWRnZV0uZWRnZTtcbiAgICAgIGlmICghZWRnZS5iIHx8ICFlZGdlLmEpIGhhbGZFZGdlcy5zcGxpY2UoaUhhbGZFZGdlLCAxKTtcbiAgICB9XG4gICAgaGFsZkVkZ2VzLnNvcnQoZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlcik7XG4gICAgcmV0dXJuIGhhbGZFZGdlcy5sZW5ndGg7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNsb3NlQ2VsbHMoZXh0ZW50KSB7XG4gICAgdmFyIHgwID0gZXh0ZW50WzBdWzBdLCB4MSA9IGV4dGVudFsxXVswXSwgeTAgPSBleHRlbnRbMF1bMV0sIHkxID0gZXh0ZW50WzFdWzFdLCB4MiwgeTIsIHgzLCB5MywgY2VsbHMgPSBkM19nZW9tX3Zvcm9ub2lDZWxscywgaUNlbGwgPSBjZWxscy5sZW5ndGgsIGNlbGwsIGlIYWxmRWRnZSwgaGFsZkVkZ2VzLCBuSGFsZkVkZ2VzLCBzdGFydCwgZW5kO1xuICAgIHdoaWxlIChpQ2VsbC0tKSB7XG4gICAgICBjZWxsID0gY2VsbHNbaUNlbGxdO1xuICAgICAgaWYgKCFjZWxsIHx8ICFjZWxsLnByZXBhcmUoKSkgY29udGludWU7XG4gICAgICBoYWxmRWRnZXMgPSBjZWxsLmVkZ2VzO1xuICAgICAgbkhhbGZFZGdlcyA9IGhhbGZFZGdlcy5sZW5ndGg7XG4gICAgICBpSGFsZkVkZ2UgPSAwO1xuICAgICAgd2hpbGUgKGlIYWxmRWRnZSA8IG5IYWxmRWRnZXMpIHtcbiAgICAgICAgZW5kID0gaGFsZkVkZ2VzW2lIYWxmRWRnZV0uZW5kKCksIHgzID0gZW5kLngsIHkzID0gZW5kLnk7XG4gICAgICAgIHN0YXJ0ID0gaGFsZkVkZ2VzWysraUhhbGZFZGdlICUgbkhhbGZFZGdlc10uc3RhcnQoKSwgeDIgPSBzdGFydC54LCB5MiA9IHN0YXJ0Lnk7XG4gICAgICAgIGlmIChhYnMoeDMgLSB4MikgPiDOtSB8fCBhYnMoeTMgLSB5MikgPiDOtSkge1xuICAgICAgICAgIGhhbGZFZGdlcy5zcGxpY2UoaUhhbGZFZGdlLCAwLCBuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZShjZWxsLnNpdGUsIGVuZCwgYWJzKHgzIC0geDApIDwgzrUgJiYgeTEgLSB5MyA+IM61ID8ge1xuICAgICAgICAgICAgeDogeDAsXG4gICAgICAgICAgICB5OiBhYnMoeDIgLSB4MCkgPCDOtSA/IHkyIDogeTFcbiAgICAgICAgICB9IDogYWJzKHkzIC0geTEpIDwgzrUgJiYgeDEgLSB4MyA+IM61ID8ge1xuICAgICAgICAgICAgeDogYWJzKHkyIC0geTEpIDwgzrUgPyB4MiA6IHgxLFxuICAgICAgICAgICAgeTogeTFcbiAgICAgICAgICB9IDogYWJzKHgzIC0geDEpIDwgzrUgJiYgeTMgLSB5MCA+IM61ID8ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBhYnMoeDIgLSB4MSkgPCDOtSA/IHkyIDogeTBcbiAgICAgICAgICB9IDogYWJzKHkzIC0geTApIDwgzrUgJiYgeDMgLSB4MCA+IM61ID8ge1xuICAgICAgICAgICAgeDogYWJzKHkyIC0geTApIDwgzrUgPyB4MiA6IHgwLFxuICAgICAgICAgICAgeTogeTBcbiAgICAgICAgICB9IDogbnVsbCksIGNlbGwuc2l0ZSwgbnVsbCkpO1xuICAgICAgICAgICsrbkhhbGZFZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZU9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hbmdsZSAtIGEuYW5nbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlKCkge1xuICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLmFyYyA9IHRoaXMuc2l0ZSA9IHRoaXMuY3kgPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShhcmMpIHtcbiAgICB2YXIgbEFyYyA9IGFyYy5QLCByQXJjID0gYXJjLk47XG4gICAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG4gICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLCBjU2l0ZSA9IGFyYy5zaXRlLCByU2l0ZSA9IHJBcmMuc2l0ZTtcbiAgICBpZiAobFNpdGUgPT09IHJTaXRlKSByZXR1cm47XG4gICAgdmFyIGJ4ID0gY1NpdGUueCwgYnkgPSBjU2l0ZS55LCBheCA9IGxTaXRlLnggLSBieCwgYXkgPSBsU2l0ZS55IC0gYnksIGN4ID0gclNpdGUueCAtIGJ4LCBjeSA9IHJTaXRlLnkgLSBieTtcbiAgICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICAgIGlmIChkID49IC3OtTIpIHJldHVybjtcbiAgICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSwgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSwgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLCB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQsIGN5ID0geSArIGJ5O1xuICAgIHZhciBjaXJjbGUgPSBkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBkM19nZW9tX3Zvcm9ub2lDaXJjbGUoKTtcbiAgICBjaXJjbGUuYXJjID0gYXJjO1xuICAgIGNpcmNsZS5zaXRlID0gY1NpdGU7XG4gICAgY2lyY2xlLnggPSB4ICsgYng7XG4gICAgY2lyY2xlLnkgPSBjeSArIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICBjaXJjbGUuY3kgPSBjeTtcbiAgICBhcmMuY2lyY2xlID0gY2lyY2xlO1xuICAgIHZhciBiZWZvcmUgPSBudWxsLCBub2RlID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcy5fO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgY2lyY2xlLnkgPT09IG5vZGUueSAmJiBjaXJjbGUueCA8PSBub2RlLngpIHtcbiAgICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gbm9kZS5QO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SOyBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcbiAgICBpZiAoIWJlZm9yZSkgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUgPSBjaXJjbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGFyYykge1xuICAgIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuICAgIGlmIChjaXJjbGUpIHtcbiAgICAgIGlmICghY2lyY2xlLlApIGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlID0gY2lyY2xlLk47XG4gICAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUoY2lyY2xlKTtcbiAgICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDbGlwRWRnZXMoZXh0ZW50KSB7XG4gICAgdmFyIGVkZ2VzID0gZDNfZ2VvbV92b3Jvbm9pRWRnZXMsIGNsaXAgPSBkM19nZW9tX2NsaXBMaW5lKGV4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdLCBleHRlbnRbMV1bMF0sIGV4dGVudFsxXVsxXSksIGkgPSBlZGdlcy5sZW5ndGgsIGU7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgZSA9IGVkZ2VzW2ldO1xuICAgICAgaWYgKCFkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZShlLCBleHRlbnQpIHx8ICFjbGlwKGUpIHx8IGFicyhlLmEueCAtIGUuYi54KSA8IM61ICYmIGFicyhlLmEueSAtIGUuYi55KSA8IM61KSB7XG4gICAgICAgIGUuYSA9IGUuYiA9IG51bGw7XG4gICAgICAgIGVkZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ29ubmVjdEVkZ2UoZWRnZSwgZXh0ZW50KSB7XG4gICAgdmFyIHZiID0gZWRnZS5iO1xuICAgIGlmICh2YikgcmV0dXJuIHRydWU7XG4gICAgdmFyIHZhID0gZWRnZS5hLCB4MCA9IGV4dGVudFswXVswXSwgeDEgPSBleHRlbnRbMV1bMF0sIHkwID0gZXh0ZW50WzBdWzFdLCB5MSA9IGV4dGVudFsxXVsxXSwgbFNpdGUgPSBlZGdlLmwsIHJTaXRlID0gZWRnZS5yLCBseCA9IGxTaXRlLngsIGx5ID0gbFNpdGUueSwgcnggPSByU2l0ZS54LCByeSA9IHJTaXRlLnksIGZ4ID0gKGx4ICsgcngpIC8gMiwgZnkgPSAobHkgKyByeSkgLyAyLCBmbSwgZmI7XG4gICAgaWYgKHJ5ID09PSBseSkge1xuICAgICAgaWYgKGZ4IDwgeDAgfHwgZnggPj0geDEpIHJldHVybjtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkwXG4gICAgICAgIH07IGVsc2UgaWYgKHZhLnkgPj0geTEpIHJldHVybjtcbiAgICAgICAgdmIgPSB7XG4gICAgICAgICAgeDogZngsXG4gICAgICAgICAgeTogeTFcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkxXG4gICAgICAgIH07IGVsc2UgaWYgKHZhLnkgPCB5MCkgcmV0dXJuO1xuICAgICAgICB2YiA9IHtcbiAgICAgICAgICB4OiBmeCxcbiAgICAgICAgICB5OiB5MFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuICAgICAgaWYgKGZtIDwgLTEgfHwgZm0gPiAxKSB7XG4gICAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiAoeTAgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueSA+PSB5MSkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogKHkxIC0gZmIpIC8gZm0sXG4gICAgICAgICAgICB5OiB5MVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiAoeTEgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkxXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueSA8IHkwKSByZXR1cm47XG4gICAgICAgICAgdmIgPSB7XG4gICAgICAgICAgICB4OiAoeTAgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGx5IDwgcnkpIHtcbiAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcbiAgICAgICAgICAgIHg6IHgwLFxuICAgICAgICAgICAgeTogZm0gKiB4MCArIGZiXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueCA+PSB4MSkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcbiAgICAgICAgICB9OyBlbHNlIGlmICh2YS54IDwgeDApIHJldHVybjtcbiAgICAgICAgICB2YiA9IHtcbiAgICAgICAgICAgIHg6IHgwLFxuICAgICAgICAgICAgeTogZm0gKiB4MCArIGZiXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlZGdlLmEgPSB2YTtcbiAgICBlZGdlLmIgPSB2YjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lFZGdlKGxTaXRlLCByU2l0ZSkge1xuICAgIHRoaXMubCA9IGxTaXRlO1xuICAgIHRoaXMuciA9IHJTaXRlO1xuICAgIHRoaXMuYSA9IHRoaXMuYiA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsU2l0ZSwgclNpdGUsIHZhLCB2Yikge1xuICAgIHZhciBlZGdlID0gbmV3IGQzX2dlb21fdm9yb25vaUVkZ2UobFNpdGUsIHJTaXRlKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lFZGdlcy5wdXNoKGVkZ2UpO1xuICAgIGlmICh2YSkgZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZChlZGdlLCBsU2l0ZSwgclNpdGUsIHZhKTtcbiAgICBpZiAodmIpIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQoZWRnZSwgclNpdGUsIGxTaXRlLCB2Yik7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHNbbFNpdGUuaV0uZWRnZXMucHVzaChuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgbFNpdGUsIHJTaXRlKSk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHNbclNpdGUuaV0uZWRnZXMucHVzaChuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgclNpdGUsIGxTaXRlKSk7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZShsU2l0ZSwgdmEsIHZiKSB7XG4gICAgdmFyIGVkZ2UgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pRWRnZShsU2l0ZSwgbnVsbCk7XG4gICAgZWRnZS5hID0gdmE7XG4gICAgZWRnZS5iID0gdmI7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRWRnZXMucHVzaChlZGdlKTtcbiAgICByZXR1cm4gZWRnZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKGVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KSB7XG4gICAgaWYgKCFlZGdlLmEgJiYgIWVkZ2UuYikge1xuICAgICAgZWRnZS5hID0gdmVydGV4O1xuICAgICAgZWRnZS5sID0gbFNpdGU7XG4gICAgICBlZGdlLnIgPSByU2l0ZTtcbiAgICB9IGVsc2UgaWYgKGVkZ2UubCA9PT0gclNpdGUpIHtcbiAgICAgIGVkZ2UuYiA9IHZlcnRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRnZS5hID0gdmVydGV4O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZShlZGdlLCBsU2l0ZSwgclNpdGUpIHtcbiAgICB2YXIgdmEgPSBlZGdlLmEsIHZiID0gZWRnZS5iO1xuICAgIHRoaXMuZWRnZSA9IGVkZ2U7XG4gICAgdGhpcy5zaXRlID0gbFNpdGU7XG4gICAgdGhpcy5hbmdsZSA9IHJTaXRlID8gTWF0aC5hdGFuMihyU2l0ZS55IC0gbFNpdGUueSwgclNpdGUueCAtIGxTaXRlLngpIDogZWRnZS5sID09PSBsU2l0ZSA/IE1hdGguYXRhbjIodmIueCAtIHZhLngsIHZhLnkgLSB2Yi55KSA6IE1hdGguYXRhbjIodmEueCAtIHZiLngsIHZiLnkgLSB2YS55KTtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZS5wcm90b3R5cGUgPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWRnZS5sID09PSB0aGlzLnNpdGUgPyB0aGlzLmVkZ2UuYSA6IHRoaXMuZWRnZS5iO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVkZ2UubCA9PT0gdGhpcy5zaXRlID8gdGhpcy5lZGdlLmIgOiB0aGlzLmVkZ2UuYTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpIHtcbiAgICB0aGlzLl8gPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShub2RlKSB7XG4gICAgbm9kZS5VID0gbm9kZS5DID0gbm9kZS5MID0gbm9kZS5SID0gbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUucHJvdG90eXBlID0ge1xuICAgIGluc2VydDogZnVuY3Rpb24oYWZ0ZXIsIG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgICBub2RlLk4gPSBhZnRlci5OO1xuICAgICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICAgIGlmIChhZnRlci5SKSB7XG4gICAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgICAgYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgICBhZnRlciA9IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QodGhpcy5fKTtcbiAgICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICAgIGFmdGVyLlAgPSBhZnRlci5MID0gbm9kZTtcbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuICAgICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgICBwYXJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICAgIG5vZGUuQyA9IHRydWU7XG4gICAgICBhZnRlciA9IG5vZGU7XG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gZ3JhbmRwYS5MKSB7XG4gICAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgfVxuICAgICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICAgIG5vZGUuTiA9IG5vZGUuUCA9IG51bGw7XG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5VLCBzaWJsaW5nLCBsZWZ0ID0gbm9kZS5MLCByaWdodCA9IG5vZGUuUiwgbmV4dCwgcmVkO1xuICAgICAgaWYgKCFsZWZ0KSBuZXh0ID0gcmlnaHQ7IGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7IGVsc2UgbmV4dCA9IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QocmlnaHQpO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDsgZWxzZSBwYXJlbnQuUiA9IG5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl8gPSBuZXh0O1xuICAgICAgfVxuICAgICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcbiAgICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICAgIG5leHQuTCA9IGxlZnQ7XG4gICAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICAgIHBhcmVudCA9IG5leHQuVTtcbiAgICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XG4gICAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkID0gbm9kZS5DO1xuICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgICBpZiAocmVkKSByZXR1cm47XG4gICAgICBpZiAobm9kZSAmJiBub2RlLkMpIHtcbiAgICAgICAgbm9kZS5DID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2libGluZy5MICYmIHNpYmxpbmcuTC5DIHx8IHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQyB8fCBzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuICAgICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsIHEgPSBub2RlLlIsIHBhcmVudCA9IHAuVTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTsgZWxzZSBwYXJlbnQuUiA9IHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWUuXyA9IHE7XG4gICAgfVxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuUiA9IHEuTDtcbiAgICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gICAgcS5MID0gcDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsIHEgPSBub2RlLkwsIHBhcmVudCA9IHAuVTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTsgZWxzZSBwYXJlbnQuUiA9IHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWUuXyA9IHE7XG4gICAgfVxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuTCA9IHEuUjtcbiAgICBpZiAocC5MKSBwLkwuVSA9IHA7XG4gICAgcS5SID0gcDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgICB3aGlsZSAobm9kZS5MKSBub2RlID0gbm9kZS5MO1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaShzaXRlcywgYmJveCkge1xuICAgIHZhciBzaXRlID0gc2l0ZXMuc29ydChkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcikucG9wKCksIHgwLCB5MCwgY2lyY2xlO1xuICAgIGQzX2dlb21fdm9yb25vaUVkZ2VzID0gW107XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHMgPSBuZXcgQXJyYXkoc2l0ZXMubGVuZ3RoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzID0gbmV3IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpO1xuICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tUcmVlKCk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNpcmNsZSA9IGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlO1xuICAgICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZS55IDwgY2lyY2xlLnkgfHwgc2l0ZS55ID09PSBjaXJjbGUueSAmJiBzaXRlLnggPCBjaXJjbGUueCkpIHtcbiAgICAgICAgaWYgKHNpdGUueCAhPT0geDAgfHwgc2l0ZS55ICE9PSB5MCkge1xuICAgICAgICAgIGQzX2dlb21fdm9yb25vaUNlbGxzW3NpdGUuaV0gPSBuZXcgZDNfZ2VvbV92b3Jvbm9pQ2VsbChzaXRlKTtcbiAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaChzaXRlKTtcbiAgICAgICAgICB4MCA9IHNpdGUueCwgeTAgPSBzaXRlLnk7XG4gICAgICAgIH1cbiAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJib3gpIGQzX2dlb21fdm9yb25vaUNsaXBFZGdlcyhiYm94KSwgZDNfZ2VvbV92b3Jvbm9pQ2xvc2VDZWxscyhiYm94KTtcbiAgICB2YXIgZGlhZ3JhbSA9IHtcbiAgICAgIGNlbGxzOiBkM19nZW9tX3Zvcm9ub2lDZWxscyxcbiAgICAgIGVkZ2VzOiBkM19nZW9tX3Zvcm9ub2lFZGdlc1xuICAgIH07XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyA9IGQzX2dlb21fdm9yb25vaUNpcmNsZXMgPSBkM19nZW9tX3Zvcm9ub2lFZGdlcyA9IGQzX2dlb21fdm9yb25vaUNlbGxzID0gbnVsbDtcbiAgICByZXR1cm4gZGlhZ3JhbTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGIueSAtIGEueSB8fCBiLnggLSBhLng7XG4gIH1cbiAgZDMuZ2VvbS52b3Jvbm9pID0gZnVuY3Rpb24ocG9pbnRzKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZLCBmeCA9IHgsIGZ5ID0geSwgY2xpcEV4dGVudCA9IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQ7XG4gICAgaWYgKHBvaW50cykgcmV0dXJuIHZvcm9ub2kocG9pbnRzKTtcbiAgICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICAgIHZhciBwb2x5Z29ucyA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCksIHgwID0gY2xpcEV4dGVudFswXVswXSwgeTAgPSBjbGlwRXh0ZW50WzBdWzFdLCB4MSA9IGNsaXBFeHRlbnRbMV1bMF0sIHkxID0gY2xpcEV4dGVudFsxXVsxXTtcbiAgICAgIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSwgY2xpcEV4dGVudCkuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICAgIHZhciBlZGdlcyA9IGNlbGwuZWRnZXMsIHNpdGUgPSBjZWxsLnNpdGUsIHBvbHlnb24gPSBwb2x5Z29uc1tpXSA9IGVkZ2VzLmxlbmd0aCA/IGVkZ2VzLm1hcChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHMgPSBlLnN0YXJ0KCk7XG4gICAgICAgICAgcmV0dXJuIFsgcy54LCBzLnkgXTtcbiAgICAgICAgfSkgOiBzaXRlLnggPj0geDAgJiYgc2l0ZS54IDw9IHgxICYmIHNpdGUueSA+PSB5MCAmJiBzaXRlLnkgPD0geTEgPyBbIFsgeDAsIHkxIF0sIFsgeDEsIHkxIF0sIFsgeDEsIHkwIF0sIFsgeDAsIHkwIF0gXSA6IFtdO1xuICAgICAgICBwb2x5Z29uLnBvaW50ID0gZGF0YVtpXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBvbHlnb25zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaXRlcyhkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IE1hdGgucm91bmQoZngoZCwgaSkgLyDOtSkgKiDOtSxcbiAgICAgICAgICB5OiBNYXRoLnJvdW5kKGZ5KGQsIGkpIC8gzrUpICogzrUsXG4gICAgICAgICAgaTogaVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZvcm9ub2kubGlua3MgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpKS5lZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICByZXR1cm4gZWRnZS5sICYmIGVkZ2UucjtcbiAgICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBkYXRhW2VkZ2UubC5pXSxcbiAgICAgICAgICB0YXJnZXQ6IGRhdGFbZWRnZS5yLmldXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIHRyaWFuZ2xlcyA9IFtdO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpKS5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgICAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsIGVkZ2VzID0gY2VsbC5lZGdlcy5zb3J0KGQzX2dlb21fdm9yb25vaUhhbGZFZGdlT3JkZXIpLCBqID0gLTEsIG0gPSBlZGdlcy5sZW5ndGgsIGUwLCBzMCwgZTEgPSBlZGdlc1ttIC0gMV0uZWRnZSwgczEgPSBlMS5sID09PSBzaXRlID8gZTEuciA6IGUxLmw7XG4gICAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgICAgZTAgPSBlMTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIGUxID0gZWRnZXNbal0uZWRnZTtcbiAgICAgICAgICBzMSA9IGUxLmwgPT09IHNpdGUgPyBlMS5yIDogZTEubDtcbiAgICAgICAgICBpZiAoaSA8IHMwLmkgJiYgaSA8IHMxLmkgJiYgZDNfZ2VvbV92b3Jvbm9pVHJpYW5nbGVBcmVhKHNpdGUsIHMwLCBzMSkgPCAwKSB7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChbIGRhdGFbaV0sIGRhdGFbczAuaV0sIGRhdGFbczEuaV0gXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmlhbmdsZXM7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmeCA9IGQzX2Z1bmN0b3IoeCA9IF8pLCB2b3Jvbm9pKSA6IHg7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmeSA9IGQzX2Z1bmN0b3IoeSA9IF8pLCB2b3Jvbm9pKSA6IHk7XG4gICAgfTtcbiAgICB2b3Jvbm9pLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50ID09PSBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50ID8gbnVsbCA6IGNsaXBFeHRlbnQ7XG4gICAgICBjbGlwRXh0ZW50ID0gXyA9PSBudWxsID8gZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA6IF87XG4gICAgICByZXR1cm4gdm9yb25vaTtcbiAgICB9O1xuICAgIHZvcm9ub2kuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsaXBFeHRlbnQgPT09IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgPyBudWxsIDogY2xpcEV4dGVudCAmJiBjbGlwRXh0ZW50WzFdO1xuICAgICAgcmV0dXJuIHZvcm9ub2kuY2xpcEV4dGVudChfICYmIFsgWyAwLCAwIF0sIF8gXSk7XG4gICAgfTtcbiAgICByZXR1cm4gdm9yb25vaTtcbiAgfTtcbiAgdmFyIGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgPSBbIFsgLTFlNiwgLTFlNiBdLCBbIDFlNiwgMWU2IF0gXTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pVHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGEueCAtIGMueCkgKiAoYi55IC0gYS55KSAtIChhLnggLSBiLngpICogKGMueSAtIGEueSk7XG4gIH1cbiAgZDMuZ2VvbS5kZWxhdW5heSA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgcmV0dXJuIGQzLmdlb20udm9yb25vaSgpLnRyaWFuZ2xlcyh2ZXJ0aWNlcyk7XG4gIH07XG4gIGQzLmdlb20ucXVhZHRyZWUgPSBmdW5jdGlvbihwb2ludHMsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZLCBjb21wYXQ7XG4gICAgaWYgKGNvbXBhdCA9IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHggPSBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WDtcbiAgICAgIHkgPSBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WTtcbiAgICAgIGlmIChjb21wYXQgPT09IDMpIHtcbiAgICAgICAgeTIgPSB5MTtcbiAgICAgICAgeDIgPSB4MTtcbiAgICAgICAgeTEgPSB4MSA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcXVhZHRyZWUocG9pbnRzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcXVhZHRyZWUoZGF0YSkge1xuICAgICAgdmFyIGQsIGZ4ID0gZDNfZnVuY3Rvcih4KSwgZnkgPSBkM19mdW5jdG9yKHkpLCB4cywgeXMsIGksIG4sIHgxXywgeTFfLCB4Ml8sIHkyXztcbiAgICAgIGlmICh4MSAhPSBudWxsKSB7XG4gICAgICAgIHgxXyA9IHgxLCB5MV8gPSB5MSwgeDJfID0geDIsIHkyXyA9IHkyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDJfID0geTJfID0gLSh4MV8gPSB5MV8gPSBJbmZpbml0eSk7XG4gICAgICAgIHhzID0gW10sIHlzID0gW107XG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvbXBhdCkgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGQgPSBkYXRhW2ldO1xuICAgICAgICAgIGlmIChkLnggPCB4MV8pIHgxXyA9IGQueDtcbiAgICAgICAgICBpZiAoZC55IDwgeTFfKSB5MV8gPSBkLnk7XG4gICAgICAgICAgaWYgKGQueCA+IHgyXykgeDJfID0gZC54O1xuICAgICAgICAgIGlmIChkLnkgPiB5Ml8pIHkyXyA9IGQueTtcbiAgICAgICAgICB4cy5wdXNoKGQueCk7XG4gICAgICAgICAgeXMucHVzaChkLnkpO1xuICAgICAgICB9IGVsc2UgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIHZhciB4XyA9ICtmeChkID0gZGF0YVtpXSwgaSksIHlfID0gK2Z5KGQsIGkpO1xuICAgICAgICAgIGlmICh4XyA8IHgxXykgeDFfID0geF87XG4gICAgICAgICAgaWYgKHlfIDwgeTFfKSB5MV8gPSB5XztcbiAgICAgICAgICBpZiAoeF8gPiB4Ml8pIHgyXyA9IHhfO1xuICAgICAgICAgIGlmICh5XyA+IHkyXykgeTJfID0geV87XG4gICAgICAgICAgeHMucHVzaCh4Xyk7XG4gICAgICAgICAgeXMucHVzaCh5Xyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBkeCA9IHgyXyAtIHgxXywgZHkgPSB5Ml8gLSB5MV87XG4gICAgICBpZiAoZHggPiBkeSkgeTJfID0geTFfICsgZHg7IGVsc2UgeDJfID0geDFfICsgZHk7XG4gICAgICBmdW5jdGlvbiBpbnNlcnQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm47XG4gICAgICAgIGlmIChuLmxlYWYpIHtcbiAgICAgICAgICB2YXIgbnggPSBuLngsIG55ID0gbi55O1xuICAgICAgICAgIGlmIChueCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoYWJzKG54IC0geCkgKyBhYnMobnkgLSB5KSA8IC4wMSkge1xuICAgICAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgblBvaW50ID0gbi5wb2ludDtcbiAgICAgICAgICAgICAgbi54ID0gbi55ID0gbi5wb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIG5Qb2ludCwgbngsIG55LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbi54ID0geCwgbi55ID0geSwgbi5wb2ludCA9IGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaW5zZXJ0Q2hpbGQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgdmFyIHhtID0gKHgxICsgeDIpICogLjUsIHltID0gKHkxICsgeTIpICogLjUsIHJpZ2h0ID0geCA+PSB4bSwgYmVsb3cgPSB5ID49IHltLCBpID0gYmVsb3cgPDwgMSB8IHJpZ2h0O1xuICAgICAgICBuLmxlYWYgPSBmYWxzZTtcbiAgICAgICAgbiA9IG4ubm9kZXNbaV0gfHwgKG4ubm9kZXNbaV0gPSBkM19nZW9tX3F1YWR0cmVlTm9kZSgpKTtcbiAgICAgICAgaWYgKHJpZ2h0KSB4MSA9IHhtOyBlbHNlIHgyID0geG07XG4gICAgICAgIGlmIChiZWxvdykgeTEgPSB5bTsgZWxzZSB5MiA9IHltO1xuICAgICAgICBpbnNlcnQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuICAgICAgfVxuICAgICAgdmFyIHJvb3QgPSBkM19nZW9tX3F1YWR0cmVlTm9kZSgpO1xuICAgICAgcm9vdC5hZGQgPSBmdW5jdGlvbihkKSB7XG4gICAgICAgIGluc2VydChyb290LCBkLCArZngoZCwgKytpKSwgK2Z5KGQsIGkpLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgfTtcbiAgICAgIHJvb3QudmlzaXQgPSBmdW5jdGlvbihmKSB7XG4gICAgICAgIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCByb290LCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgfTtcbiAgICAgIHJvb3QuZmluZCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgIHJldHVybiBkM19nZW9tX3F1YWR0cmVlRmluZChyb290LCBwb2ludFswXSwgcG9pbnRbMV0sIHgxXywgeTFfLCB4Ml8sIHkyXyk7XG4gICAgICB9O1xuICAgICAgaSA9IC0xO1xuICAgICAgaWYgKHgxID09IG51bGwpIHtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpbnNlcnQocm9vdCwgZGF0YVtpXSwgeHNbaV0sIHlzW2ldLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgICB9XG4gICAgICAgIC0taTtcbiAgICAgIH0gZWxzZSBkYXRhLmZvckVhY2gocm9vdC5hZGQpO1xuICAgICAgeHMgPSB5cyA9IGRhdGEgPSBkID0gbnVsbDtcbiAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICBxdWFkdHJlZS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IF8sIHF1YWR0cmVlKSA6IHg7XG4gICAgfTtcbiAgICBxdWFkdHJlZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IF8sIHF1YWR0cmVlKSA6IHk7XG4gICAgfTtcbiAgICBxdWFkdHJlZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFsgWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSBdO1xuICAgICAgaWYgKF8gPT0gbnVsbCkgeDEgPSB5MSA9IHgyID0geTIgPSBudWxsOyBlbHNlIHgxID0gK19bMF1bMF0sIHkxID0gK19bMF1bMV0sIHgyID0gK19bMV1bMF0sIFxuICAgICAgeTIgPSArX1sxXVsxXTtcbiAgICAgIHJldHVybiBxdWFkdHJlZTtcbiAgICB9O1xuICAgIHF1YWR0cmVlLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFsgeDIgLSB4MSwgeTIgLSB5MSBdO1xuICAgICAgaWYgKF8gPT0gbnVsbCkgeDEgPSB5MSA9IHgyID0geTIgPSBudWxsOyBlbHNlIHgxID0geTEgPSAwLCB4MiA9ICtfWzBdLCB5MiA9ICtfWzFdO1xuICAgICAgcmV0dXJuIHF1YWR0cmVlO1xuICAgIH07XG4gICAgcmV0dXJuIHF1YWR0cmVlO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WChkKSB7XG4gICAgcmV0dXJuIGQueDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WShkKSB7XG4gICAgcmV0dXJuIGQueTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlTm9kZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVhZjogdHJ1ZSxcbiAgICAgIG5vZGVzOiBbXSxcbiAgICAgIHBvaW50OiBudWxsLFxuICAgICAgeDogbnVsbCxcbiAgICAgIHk6IG51bGxcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBub2RlLCB4MSwgeTEsIHgyLCB5Mikge1xuICAgIGlmICghZihub2RlLCB4MSwgeTEsIHgyLCB5MikpIHtcbiAgICAgIHZhciBzeCA9ICh4MSArIHgyKSAqIC41LCBzeSA9ICh5MSArIHkyKSAqIC41LCBjaGlsZHJlbiA9IG5vZGUubm9kZXM7XG4gICAgICBpZiAoY2hpbGRyZW5bMF0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblswXSwgeDEsIHkxLCBzeCwgc3kpO1xuICAgICAgaWYgKGNoaWxkcmVuWzFdKSBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgY2hpbGRyZW5bMV0sIHN4LCB5MSwgeDIsIHN5KTtcbiAgICAgIGlmIChjaGlsZHJlblsyXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzJdLCB4MSwgc3ksIHN4LCB5Mik7XG4gICAgICBpZiAoY2hpbGRyZW5bM10pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblszXSwgc3gsIHN5LCB4MiwgeTIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlRmluZChyb290LCB4LCB5LCB4MCwgeTAsIHgzLCB5Mykge1xuICAgIHZhciBtaW5EaXN0YW5jZTIgPSBJbmZpbml0eSwgY2xvc2VzdFBvaW50O1xuICAgIChmdW5jdGlvbiBmaW5kKG5vZGUsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICBpZiAoeDEgPiB4MyB8fCB5MSA+IHkzIHx8IHgyIDwgeDAgfHwgeTIgPCB5MCkgcmV0dXJuO1xuICAgICAgaWYgKHBvaW50ID0gbm9kZS5wb2ludCkge1xuICAgICAgICB2YXIgcG9pbnQsIGR4ID0geCAtIG5vZGUueCwgZHkgPSB5IC0gbm9kZS55LCBkaXN0YW5jZTIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGRpc3RhbmNlMiA8IG1pbkRpc3RhbmNlMikge1xuICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChtaW5EaXN0YW5jZTIgPSBkaXN0YW5jZTIpO1xuICAgICAgICAgIHgwID0geCAtIGRpc3RhbmNlLCB5MCA9IHkgLSBkaXN0YW5jZTtcbiAgICAgICAgICB4MyA9IHggKyBkaXN0YW5jZSwgeTMgPSB5ICsgZGlzdGFuY2U7XG4gICAgICAgICAgY2xvc2VzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUubm9kZXMsIHhtID0gKHgxICsgeDIpICogLjUsIHltID0gKHkxICsgeTIpICogLjUsIHJpZ2h0ID0geCA+PSB4bSwgYmVsb3cgPSB5ID49IHltO1xuICAgICAgZm9yICh2YXIgaSA9IGJlbG93IDw8IDEgfCByaWdodCwgaiA9IGkgKyA0OyBpIDwgajsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gY2hpbGRyZW5baSAmIDNdKSBzd2l0Y2ggKGkgJiAzKSB7XG4gICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgZmluZChub2RlLCB4MSwgeTEsIHhtLCB5bSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBmaW5kKG5vZGUsIHhtLCB5MSwgeDIsIHltKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGZpbmQobm9kZSwgeDEsIHltLCB4bSwgeTIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgZmluZChub2RlLCB4bSwgeW0sIHgyLCB5Mik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KShyb290LCB4MCwgeTAsIHgzLCB5Myk7XG4gICAgcmV0dXJuIGNsb3Nlc3RQb2ludDtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVJnYiA9IGQzX2ludGVycG9sYXRlUmdiO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVJnYihhLCBiKSB7XG4gICAgYSA9IGQzLnJnYihhKTtcbiAgICBiID0gZDMucmdiKGIpO1xuICAgIHZhciBhciA9IGEuciwgYWcgPSBhLmcsIGFiID0gYS5iLCBiciA9IGIuciAtIGFyLCBiZyA9IGIuZyAtIGFnLCBiYiA9IGIuYiAtIGFiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KE1hdGgucm91bmQoYXIgKyBiciAqIHQpKSArIGQzX3JnYl9oZXgoTWF0aC5yb3VuZChhZyArIGJnICogdCkpICsgZDNfcmdiX2hleChNYXRoLnJvdW5kKGFiICsgYmIgKiB0KSk7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZU9iamVjdCA9IGQzX2ludGVycG9sYXRlT2JqZWN0O1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZU9iamVjdChhLCBiKSB7XG4gICAgdmFyIGkgPSB7fSwgYyA9IHt9LCBrO1xuICAgIGZvciAoayBpbiBhKSB7XG4gICAgICBpZiAoayBpbiBiKSB7XG4gICAgICAgIGlba10gPSBkM19pbnRlcnBvbGF0ZShhW2tdLCBiW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNba10gPSBhW2tdO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgaW4gYikge1xuICAgICAgaWYgKCEoayBpbiBhKSkge1xuICAgICAgICBjW2tdID0gYltrXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVOdW1iZXIgPSBkM19pbnRlcnBvbGF0ZU51bWJlcjtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVOdW1iZXIoYSwgYikge1xuICAgIGEgPSArYSwgYiA9ICtiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgICB9O1xuICB9XG4gIGQzLmludGVycG9sYXRlU3RyaW5nID0gZDNfaW50ZXJwb2xhdGVTdHJpbmc7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU3RyaW5nKGEsIGIpIHtcbiAgICB2YXIgYmkgPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJBLmxhc3RJbmRleCA9IGQzX2ludGVycG9sYXRlX251bWJlckIubGFzdEluZGV4ID0gMCwgYW0sIGJtLCBicywgaSA9IC0xLCBzID0gW10sIHEgPSBbXTtcbiAgICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcbiAgICB3aGlsZSAoKGFtID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5leGVjKGEpKSAmJiAoYm0gPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJCLmV4ZWMoYikpKSB7XG4gICAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHtcbiAgICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyBlbHNlIHNbKytpXSA9IGJzO1xuICAgICAgfVxuICAgICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7XG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyBlbHNlIHNbKytpXSA9IGJtO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgICAgcS5wdXNoKHtcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKGFtLCBibSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBiaSA9IGQzX2ludGVycG9sYXRlX251bWJlckIubGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICByZXR1cm4gcy5sZW5ndGggPCAyID8gcVswXSA/IChiID0gcVswXS54LCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gICAgfSkgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH0gOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZywgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQiA9IG5ldyBSZWdFeHAoZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5zb3VyY2UsIFwiZ1wiKTtcbiAgZDMuaW50ZXJwb2xhdGUgPSBkM19pbnRlcnBvbGF0ZTtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGUoYSwgYikge1xuICAgIHZhciBpID0gZDMuaW50ZXJwb2xhdG9ycy5sZW5ndGgsIGY7XG4gICAgd2hpbGUgKC0taSA+PSAwICYmICEoZiA9IGQzLmludGVycG9sYXRvcnNbaV0oYSwgYikpKSA7XG4gICAgcmV0dXJuIGY7XG4gIH1cbiAgZDMuaW50ZXJwb2xhdG9ycyA9IFsgZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciB0ID0gdHlwZW9mIGI7XG4gICAgcmV0dXJuICh0ID09PSBcInN0cmluZ1wiID8gZDNfcmdiX25hbWVzLmhhcyhiLnRvTG93ZXJDYXNlKCkpIHx8IC9eKCN8cmdiXFwofGhzbFxcKCkvaS50ZXN0KGIpID8gZDNfaW50ZXJwb2xhdGVSZ2IgOiBkM19pbnRlcnBvbGF0ZVN0cmluZyA6IGIgaW5zdGFuY2VvZiBkM19jb2xvciA/IGQzX2ludGVycG9sYXRlUmdiIDogQXJyYXkuaXNBcnJheShiKSA/IGQzX2ludGVycG9sYXRlQXJyYXkgOiB0ID09PSBcIm9iamVjdFwiICYmIGlzTmFOKGIpID8gZDNfaW50ZXJwb2xhdGVPYmplY3QgOiBkM19pbnRlcnBvbGF0ZU51bWJlcikoYSwgYik7XG4gIH0gXTtcbiAgZDMuaW50ZXJwb2xhdGVBcnJheSA9IGQzX2ludGVycG9sYXRlQXJyYXk7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlQXJyYXkoYSwgYikge1xuICAgIHZhciB4ID0gW10sIGMgPSBbXSwgbmEgPSBhLmxlbmd0aCwgbmIgPSBiLmxlbmd0aCwgbjAgPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpLCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSB4LnB1c2goZDNfaW50ZXJwb2xhdGUoYVtpXSwgYltpXSkpO1xuICAgIGZvciAoO2kgPCBuYTsgKytpKSBjW2ldID0gYVtpXTtcbiAgICBmb3IgKDtpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2Vhc2VfZGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19pZGVudGl0eTtcbiAgfTtcbiAgdmFyIGQzX2Vhc2UgPSBkMy5tYXAoe1xuICAgIGxpbmVhcjogZDNfZWFzZV9kZWZhdWx0LFxuICAgIHBvbHk6IGQzX2Vhc2VfcG9seSxcbiAgICBxdWFkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX3F1YWQ7XG4gICAgfSxcbiAgICBjdWJpYzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9jdWJpYztcbiAgICB9LFxuICAgIHNpbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9zaW47XG4gICAgfSxcbiAgICBleHA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX2Vhc2VfZXhwO1xuICAgIH0sXG4gICAgY2lyY2xlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX2NpcmNsZTtcbiAgICB9LFxuICAgIGVsYXN0aWM6IGQzX2Vhc2VfZWxhc3RpYyxcbiAgICBiYWNrOiBkM19lYXNlX2JhY2ssXG4gICAgYm91bmNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX2JvdW5jZTtcbiAgICB9XG4gIH0pO1xuICB2YXIgZDNfZWFzZV9tb2RlID0gZDMubWFwKHtcbiAgICBcImluXCI6IGQzX2lkZW50aXR5LFxuICAgIG91dDogZDNfZWFzZV9yZXZlcnNlLFxuICAgIFwiaW4tb3V0XCI6IGQzX2Vhc2VfcmVmbGVjdCxcbiAgICBcIm91dC1pblwiOiBmdW5jdGlvbihmKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9yZWZsZWN0KGQzX2Vhc2VfcmV2ZXJzZShmKSk7XG4gICAgfVxuICB9KTtcbiAgZDMuZWFzZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IG5hbWUuaW5kZXhPZihcIi1cIiksIHQgPSBpID49IDAgPyBuYW1lLnNsaWNlKDAsIGkpIDogbmFtZSwgbSA9IGkgPj0gMCA/IG5hbWUuc2xpY2UoaSArIDEpIDogXCJpblwiO1xuICAgIHQgPSBkM19lYXNlLmdldCh0KSB8fCBkM19lYXNlX2RlZmF1bHQ7XG4gICAgbSA9IGQzX2Vhc2VfbW9kZS5nZXQobSkgfHwgZDNfaWRlbnRpdHk7XG4gICAgcmV0dXJuIGQzX2Vhc2VfY2xhbXAobSh0LmFwcGx5KG51bGwsIGQzX2FycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19lYXNlX2NsYW1wKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQgPD0gMCA/IDAgOiB0ID49IDEgPyAxIDogZih0KTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcmV2ZXJzZShmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiAxIC0gZigxIC0gdCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX3JlZmxlY3QoZikge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gLjUgKiAodCA8IC41ID8gZigyICogdCkgOiAyIC0gZigyIC0gMiAqIHQpKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcXVhZCh0KSB7XG4gICAgcmV0dXJuIHQgKiB0O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfY3ViaWModCkge1xuICAgIHJldHVybiB0ICogdCAqIHQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9jdWJpY0luT3V0KHQpIHtcbiAgICBpZiAodCA8PSAwKSByZXR1cm4gMDtcbiAgICBpZiAodCA+PSAxKSByZXR1cm4gMTtcbiAgICB2YXIgdDIgPSB0ICogdCwgdDMgPSB0MiAqIHQ7XG4gICAgcmV0dXJuIDQgKiAodCA8IC41ID8gdDMgOiAzICogKHQgLSB0MikgKyB0MyAtIC43NSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9wb2x5KGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9zaW4odCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGbPgCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9leHAodCkge1xuICAgIHJldHVybiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfY2lyY2xlKHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfZWxhc3RpYyhhLCBwKSB7XG4gICAgdmFyIHM7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwID0gLjQ1O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSBzID0gcCAvIM+EICogTWF0aC5hc2luKDEgLyBhKTsgZWxzZSBhID0gMSwgcyA9IHAgLyA0O1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gMSArIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiDPhCAvIHApO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9iYWNrKHMpIHtcbiAgICBpZiAoIXMpIHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfYm91bmNlKHQpIHtcbiAgICByZXR1cm4gdCA8IDEgLyAyLjc1ID8gNy41NjI1ICogdCAqIHQgOiB0IDwgMiAvIDIuNzUgPyA3LjU2MjUgKiAodCAtPSAxLjUgLyAyLjc1KSAqIHQgKyAuNzUgOiB0IDwgMi41IC8gMi43NSA/IDcuNTYyNSAqICh0IC09IDIuMjUgLyAyLjc1KSAqIHQgKyAuOTM3NSA6IDcuNTYyNSAqICh0IC09IDIuNjI1IC8gMi43NSkgKiB0ICsgLjk4NDM3NTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUhjbCA9IGQzX2ludGVycG9sYXRlSGNsO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUhjbChhLCBiKSB7XG4gICAgYSA9IGQzLmhjbChhKTtcbiAgICBiID0gZDMuaGNsKGIpO1xuICAgIHZhciBhaCA9IGEuaCwgYWMgPSBhLmMsIGFsID0gYS5sLCBiaCA9IGIuaCAtIGFoLCBiYyA9IGIuYyAtIGFjLCBibCA9IGIubCAtIGFsO1xuICAgIGlmIChpc05hTihiYykpIGJjID0gMCwgYWMgPSBpc05hTihhYykgPyBiLmMgOiBhYztcbiAgICBpZiAoaXNOYU4oYmgpKSBiaCA9IDAsIGFoID0gaXNOYU4oYWgpID8gYi5oIDogYWg7IGVsc2UgaWYgKGJoID4gMTgwKSBiaCAtPSAzNjA7IGVsc2UgaWYgKGJoIDwgLTE4MCkgYmggKz0gMzYwO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfaGNsX2xhYihhaCArIGJoICogdCwgYWMgKyBiYyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUhzbCA9IGQzX2ludGVycG9sYXRlSHNsO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUhzbChhLCBiKSB7XG4gICAgYSA9IGQzLmhzbChhKTtcbiAgICBiID0gZDMuaHNsKGIpO1xuICAgIHZhciBhaCA9IGEuaCwgYXMgPSBhLnMsIGFsID0gYS5sLCBiaCA9IGIuaCAtIGFoLCBicyA9IGIucyAtIGFzLCBibCA9IGIubCAtIGFsO1xuICAgIGlmIChpc05hTihicykpIGJzID0gMCwgYXMgPSBpc05hTihhcykgPyBiLnMgOiBhcztcbiAgICBpZiAoaXNOYU4oYmgpKSBiaCA9IDAsIGFoID0gaXNOYU4oYWgpID8gYi5oIDogYWg7IGVsc2UgaWYgKGJoID4gMTgwKSBiaCAtPSAzNjA7IGVsc2UgaWYgKGJoIDwgLTE4MCkgYmggKz0gMzYwO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfaHNsX3JnYihhaCArIGJoICogdCwgYXMgKyBicyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUxhYiA9IGQzX2ludGVycG9sYXRlTGFiO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUxhYihhLCBiKSB7XG4gICAgYSA9IGQzLmxhYihhKTtcbiAgICBiID0gZDMubGFiKGIpO1xuICAgIHZhciBhbCA9IGEubCwgYWEgPSBhLmEsIGFiID0gYS5iLCBibCA9IGIubCAtIGFsLCBiYSA9IGIuYSAtIGFhLCBiYiA9IGIuYiAtIGFiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfbGFiX3JnYihhbCArIGJsICogdCwgYWEgKyBiYSAqIHQsIGFiICsgYmIgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVJvdW5kID0gZDNfaW50ZXJwb2xhdGVSb3VuZDtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSb3VuZChhLCBiKSB7XG4gICAgYiAtPSBhO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICAgIH07XG4gIH1cbiAgZDMudHJhbnNmb3JtID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGcgPSBkM19kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZDMubnMucHJlZml4LnN2ZywgXCJnXCIpO1xuICAgIHJldHVybiAoZDMudHJhbnNmb3JtID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBpZiAoc3RyaW5nICE9IG51bGwpIHtcbiAgICAgICAgZy5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RyaW5nKTtcbiAgICAgICAgdmFyIHQgPSBnLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IGQzX3RyYW5zZm9ybSh0ID8gdC5tYXRyaXggOiBkM190cmFuc2Zvcm1JZGVudGl0eSk7XG4gICAgfSkoc3RyaW5nKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtKG0pIHtcbiAgICB2YXIgcjAgPSBbIG0uYSwgbS5iIF0sIHIxID0gWyBtLmMsIG0uZCBdLCBreCA9IGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShyMCksIGt6ID0gZDNfdHJhbnNmb3JtRG90KHIwLCByMSksIGt5ID0gZDNfdHJhbnNmb3JtTm9ybWFsaXplKGQzX3RyYW5zZm9ybUNvbWJpbmUocjEsIHIwLCAta3opKSB8fCAwO1xuICAgIGlmIChyMFswXSAqIHIxWzFdIDwgcjFbMF0gKiByMFsxXSkge1xuICAgICAgcjBbMF0gKj0gLTE7XG4gICAgICByMFsxXSAqPSAtMTtcbiAgICAgIGt4ICo9IC0xO1xuICAgICAga3ogKj0gLTE7XG4gICAgfVxuICAgIHRoaXMucm90YXRlID0gKGt4ID8gTWF0aC5hdGFuMihyMFsxXSwgcjBbMF0pIDogTWF0aC5hdGFuMigtcjFbMF0sIHIxWzFdKSkgKiBkM19kZWdyZWVzO1xuICAgIHRoaXMudHJhbnNsYXRlID0gWyBtLmUsIG0uZiBdO1xuICAgIHRoaXMuc2NhbGUgPSBbIGt4LCBreSBdO1xuICAgIHRoaXMuc2tldyA9IGt5ID8gTWF0aC5hdGFuMihreiwga3kpICogZDNfZGVncmVlcyA6IDA7XG4gIH1cbiAgZDNfdHJhbnNmb3JtLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMudHJhbnNsYXRlICsgXCIpcm90YXRlKFwiICsgdGhpcy5yb3RhdGUgKyBcIilza2V3WChcIiArIHRoaXMuc2tldyArIFwiKXNjYWxlKFwiICsgdGhpcy5zY2FsZSArIFwiKVwiO1xuICB9O1xuICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShhKSB7XG4gICAgdmFyIGsgPSBNYXRoLnNxcnQoZDNfdHJhbnNmb3JtRG90KGEsIGEpKTtcbiAgICBpZiAoaykge1xuICAgICAgYVswXSAvPSBrO1xuICAgICAgYVsxXSAvPSBrO1xuICAgIH1cbiAgICByZXR1cm4gaztcbiAgfVxuICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Db21iaW5lKGEsIGIsIGspIHtcbiAgICBhWzBdICs9IGsgKiBiWzBdO1xuICAgIGFbMV0gKz0gayAqIGJbMV07XG4gICAgcmV0dXJuIGE7XG4gIH1cbiAgdmFyIGQzX3RyYW5zZm9ybUlkZW50aXR5ID0ge1xuICAgIGE6IDEsXG4gICAgYjogMCxcbiAgICBjOiAwLFxuICAgIGQ6IDEsXG4gICAgZTogMCxcbiAgICBmOiAwXG4gIH07XG4gIGQzLmludGVycG9sYXRlVHJhbnNmb3JtID0gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm07XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIsXCIgOiBcIlwiO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNsYXRlKHRhLCB0YiwgcywgcSkge1xuICAgIGlmICh0YVswXSAhPT0gdGJbMF0gfHwgdGFbMV0gIT09IHRiWzFdKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7XG4gICAgICAgIGk6IGkgLSA0LFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVswXSwgdGJbMF0pXG4gICAgICB9LCB7XG4gICAgICAgIGk6IGkgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVsxXSwgdGJbMV0pXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRiWzBdIHx8IHRiWzFdKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB0YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSb3RhdGUocmEsIHJiLCBzLCBxKSB7XG4gICAgaWYgKHJhICE9PSByYikge1xuICAgICAgaWYgKHJhIC0gcmIgPiAxODApIHJiICs9IDM2MDsgZWxzZSBpZiAocmIgLSByYSA+IDE4MCkgcmEgKz0gMzYwO1xuICAgICAgcS5wdXNoKHtcbiAgICAgICAgaTogcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIFwiKVwiKSAtIDIsXG4gICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKHJhLCByYilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmIpIHtcbiAgICAgIHMucHVzaChkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSArIFwicm90YXRlKFwiICsgcmIgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU2tldyh3YSwgd2IsIHMsIHEpIHtcbiAgICBpZiAod2EgIT09IHdiKSB7XG4gICAgICBxLnB1c2goe1xuICAgICAgICBpOiBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBcIilcIikgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih3YSwgd2IpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHdiKSB7XG4gICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNrZXdYKFwiICsgd2IgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU2NhbGUoa2EsIGtiLCBzLCBxKSB7XG4gICAgaWYgKGthWzBdICE9PSBrYlswXSB8fCBrYVsxXSAhPT0ga2JbMV0pIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7XG4gICAgICAgIGk6IGkgLSA0LFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihrYVswXSwga2JbMF0pXG4gICAgICB9LCB7XG4gICAgICAgIGk6IGkgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihrYVsxXSwga2JbMV0pXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGtiWzBdICE9PSAxIHx8IGtiWzFdICE9PSAxKSB7XG4gICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNjYWxlKFwiICsga2IgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNmb3JtKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCBxID0gW107XG4gICAgYSA9IGQzLnRyYW5zZm9ybShhKSwgYiA9IGQzLnRyYW5zZm9ybShiKTtcbiAgICBkM19pbnRlcnBvbGF0ZVRyYW5zbGF0ZShhLnRyYW5zbGF0ZSwgYi50cmFuc2xhdGUsIHMsIHEpO1xuICAgIGQzX2ludGVycG9sYXRlUm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgZDNfaW50ZXJwb2xhdGVTa2V3KGEuc2tldywgYi5za2V3LCBzLCBxKTtcbiAgICBkM19pbnRlcnBvbGF0ZVNjYWxlKGEuc2NhbGUsIGIuc2NhbGUsIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM191bmludGVycG9sYXRlTnVtYmVyKGEsIGIpIHtcbiAgICBiID0gKGIgLT0gYSA9ICthKSB8fCAxIC8gYjtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuICh4IC0gYSkgLyBiO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wKGEsIGIpIHtcbiAgICBiID0gKGIgLT0gYSA9ICthKSB8fCAxIC8gYjtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsICh4IC0gYSkgLyBiKSk7XG4gICAgfTtcbiAgfVxuICBkMy5sYXlvdXQgPSB7fTtcbiAgZDMubGF5b3V0LmJ1bmRsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihsaW5rcykge1xuICAgICAgdmFyIHBhdGhzID0gW10sIGkgPSAtMSwgbiA9IGxpbmtzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBwYXRocy5wdXNoKGQzX2xheW91dF9idW5kbGVQYXRoKGxpbmtzW2ldKSk7XG4gICAgICByZXR1cm4gcGF0aHM7XG4gICAgfTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZVBhdGgobGluaykge1xuICAgIHZhciBzdGFydCA9IGxpbmsuc291cmNlLCBlbmQgPSBsaW5rLnRhcmdldCwgbGNhID0gZDNfbGF5b3V0X2J1bmRsZUxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksIHBvaW50cyA9IFsgc3RhcnQgXTtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGxjYSkge1xuICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgICBwb2ludHMucHVzaChzdGFydCk7XG4gICAgfVxuICAgIHZhciBrID0gcG9pbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoZW5kICE9PSBsY2EpIHtcbiAgICAgIHBvaW50cy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhub2RlKSB7XG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdLCBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICAgIHJldHVybiBhbmNlc3RvcnM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZUxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICAgIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgICB2YXIgYU5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhhKSwgYk5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhiKSwgYU5vZGUgPSBhTm9kZXMucG9wKCksIGJOb2RlID0gYk5vZGVzLnBvcCgpLCBzaGFyZWROb2RlID0gbnVsbDtcbiAgICB3aGlsZSAoYU5vZGUgPT09IGJOb2RlKSB7XG4gICAgICBzaGFyZWROb2RlID0gYU5vZGU7XG4gICAgICBhTm9kZSA9IGFOb2Rlcy5wb3AoKTtcbiAgICAgIGJOb2RlID0gYk5vZGVzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2hhcmVkTm9kZTtcbiAgfVxuICBkMy5sYXlvdXQuY2hvcmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hvcmQgPSB7fSwgY2hvcmRzLCBncm91cHMsIG1hdHJpeCwgbiwgcGFkZGluZyA9IDAsIHNvcnRHcm91cHMsIHNvcnRTdWJncm91cHMsIHNvcnRDaG9yZHM7XG4gICAgZnVuY3Rpb24gcmVsYXlvdXQoKSB7XG4gICAgICB2YXIgc3ViZ3JvdXBzID0ge30sIGdyb3VwU3VtcyA9IFtdLCBncm91cEluZGV4ID0gZDMucmFuZ2UobiksIHN1Ymdyb3VwSW5kZXggPSBbXSwgaywgeCwgeDAsIGksIGo7XG4gICAgICBjaG9yZHMgPSBbXTtcbiAgICAgIGdyb3VwcyA9IFtdO1xuICAgICAgayA9IDAsIGkgPSAtMTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHggPSAwLCBqID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgICAgeCArPSBtYXRyaXhbaV1bal07XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XG4gICAgICAgIHN1Ymdyb3VwSW5kZXgucHVzaChkMy5yYW5nZShuKSk7XG4gICAgICAgIGsgKz0geDtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0R3JvdXBzKSB7XG4gICAgICAgIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0U3ViZ3JvdXBzKSB7XG4gICAgICAgIHN1Ymdyb3VwSW5kZXguZm9yRWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBrID0gKM+EIC0gcGFkZGluZyAqIG4pIC8gaztcbiAgICAgIHggPSAwLCBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICB4MCA9IHgsIGogPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLCBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLCB2ID0gbWF0cml4W2RpXVtkal0sIGEwID0geCwgYTEgPSB4ICs9IHYgKiBrO1xuICAgICAgICAgIHN1Ymdyb3Vwc1tkaSArIFwiLVwiICsgZGpdID0ge1xuICAgICAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICAgICAgc3ViaW5kZXg6IGRqLFxuICAgICAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgICAgICB2YWx1ZTogdlxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzW2RpXSA9IHtcbiAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgc3RhcnRBbmdsZTogeDAsXG4gICAgICAgICAgZW5kQW5nbGU6IHgsXG4gICAgICAgICAgdmFsdWU6IGdyb3VwU3Vtc1tkaV1cbiAgICAgICAgfTtcbiAgICAgICAgeCArPSBwYWRkaW5nO1xuICAgICAgfVxuICAgICAgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaiA9IGkgLSAxO1xuICAgICAgICB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaSArIFwiLVwiICsgal0sIHRhcmdldCA9IHN1Ymdyb3Vwc1tqICsgXCItXCIgKyBpXTtcbiAgICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlID8ge1xuICAgICAgICAgICAgICBzb3VyY2U6IHRhcmdldCxcbiAgICAgICAgICAgICAgdGFyZ2V0OiBzb3VyY2VcbiAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc29ydENob3JkcykgcmVzb3J0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc29ydCgpIHtcbiAgICAgIGNob3Jkcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRDaG9yZHMoKGEuc291cmNlLnZhbHVlICsgYS50YXJnZXQudmFsdWUpIC8gMiwgKGIuc291cmNlLnZhbHVlICsgYi50YXJnZXQudmFsdWUpIC8gMik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY2hvcmQubWF0cml4ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWF0cml4O1xuICAgICAgbiA9IChtYXRyaXggPSB4KSAmJiBtYXRyaXgubGVuZ3RoO1xuICAgICAgY2hvcmRzID0gZ3JvdXBzID0gbnVsbDtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRkaW5nO1xuICAgICAgcGFkZGluZyA9IHg7XG4gICAgICBjaG9yZHMgPSBncm91cHMgPSBudWxsO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQuc29ydEdyb3VwcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnRHcm91cHM7XG4gICAgICBzb3J0R3JvdXBzID0geDtcbiAgICAgIGNob3JkcyA9IGdyb3VwcyA9IG51bGw7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3J0U3ViZ3JvdXBzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydFN1Ymdyb3VwcztcbiAgICAgIHNvcnRTdWJncm91cHMgPSB4O1xuICAgICAgY2hvcmRzID0gbnVsbDtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnNvcnRDaG9yZHMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0Q2hvcmRzO1xuICAgICAgc29ydENob3JkcyA9IHg7XG4gICAgICBpZiAoY2hvcmRzKSByZXNvcnQoKTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLmNob3JkcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFjaG9yZHMpIHJlbGF5b3V0KCk7XG4gICAgICByZXR1cm4gY2hvcmRzO1xuICAgIH07XG4gICAgY2hvcmQuZ3JvdXBzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWdyb3VwcykgcmVsYXlvdXQoKTtcbiAgICAgIHJldHVybiBncm91cHM7XG4gICAgfTtcbiAgICByZXR1cm4gY2hvcmQ7XG4gIH07XG4gIGQzLmxheW91dC5mb3JjZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JjZSA9IHt9LCBldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIiwgXCJ0aWNrXCIsIFwiZW5kXCIpLCB0aW1lciwgc2l6ZSA9IFsgMSwgMSBdLCBkcmFnLCBhbHBoYSwgZnJpY3Rpb24gPSAuOSwgbGlua0Rpc3RhbmNlID0gZDNfbGF5b3V0X2ZvcmNlTGlua0Rpc3RhbmNlLCBsaW5rU3RyZW5ndGggPSBkM19sYXlvdXRfZm9yY2VMaW5rU3RyZW5ndGgsIGNoYXJnZSA9IC0zMCwgY2hhcmdlRGlzdGFuY2UyID0gZDNfbGF5b3V0X2ZvcmNlQ2hhcmdlRGlzdGFuY2UyLCBncmF2aXR5ID0gLjEsIHRoZXRhMiA9IC42NCwgbm9kZXMgPSBbXSwgbGlua3MgPSBbXSwgZGlzdGFuY2VzLCBzdHJlbmd0aHMsIGNoYXJnZXM7XG4gICAgZnVuY3Rpb24gcmVwdWxzZShub2RlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgICAgIGlmIChxdWFkLnBvaW50ICE9PSBub2RlKSB7XG4gICAgICAgICAgdmFyIGR4ID0gcXVhZC5jeCAtIG5vZGUueCwgZHkgPSBxdWFkLmN5IC0gbm9kZS55LCBkdyA9IHgyIC0geDEsIGRuID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGR3ICogZHcgLyB0aGV0YTIgPCBkbikge1xuICAgICAgICAgICAgaWYgKGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gcXVhZC5jaGFyZ2UgLyBkbjtcbiAgICAgICAgICAgICAgbm9kZS5weCAtPSBkeCAqIGs7XG4gICAgICAgICAgICAgIG5vZGUucHkgLT0gZHkgKiBrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChxdWFkLnBvaW50ICYmIGRuICYmIGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG4gICAgICAgICAgICB2YXIgayA9IHF1YWQucG9pbnRDaGFyZ2UgLyBkbjtcbiAgICAgICAgICAgIG5vZGUucHggLT0gZHggKiBrO1xuICAgICAgICAgICAgbm9kZS5weSAtPSBkeSAqIGs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcXVhZC5jaGFyZ2U7XG4gICAgICB9O1xuICAgIH1cbiAgICBmb3JjZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGFscGhhICo9IC45OSkgPCAuMDA1KSB7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgZXZlbnQuZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImVuZFwiLFxuICAgICAgICAgIGFscGhhOiBhbHBoYSA9IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG4gPSBub2Rlcy5sZW5ndGgsIG0gPSBsaW5rcy5sZW5ndGgsIHEsIGksIG8sIHMsIHQsIGwsIGssIHgsIHk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSB7XG4gICAgICAgIG8gPSBsaW5rc1tpXTtcbiAgICAgICAgcyA9IG8uc291cmNlO1xuICAgICAgICB0ID0gby50YXJnZXQ7XG4gICAgICAgIHggPSB0LnggLSBzLng7XG4gICAgICAgIHkgPSB0LnkgLSBzLnk7XG4gICAgICAgIGlmIChsID0geCAqIHggKyB5ICogeSkge1xuICAgICAgICAgIGwgPSBhbHBoYSAqIHN0cmVuZ3Roc1tpXSAqICgobCA9IE1hdGguc3FydChsKSkgLSBkaXN0YW5jZXNbaV0pIC8gbDtcbiAgICAgICAgICB4ICo9IGw7XG4gICAgICAgICAgeSAqPSBsO1xuICAgICAgICAgIHQueCAtPSB4ICogKGsgPSBzLndlaWdodCArIHQud2VpZ2h0ID8gcy53ZWlnaHQgLyAocy53ZWlnaHQgKyB0LndlaWdodCkgOiAuNSk7XG4gICAgICAgICAgdC55IC09IHkgKiBrO1xuICAgICAgICAgIHMueCArPSB4ICogKGsgPSAxIC0gayk7XG4gICAgICAgICAgcy55ICs9IHkgKiBrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoayA9IGFscGhhICogZ3Jhdml0eSkge1xuICAgICAgICB4ID0gc2l6ZVswXSAvIDI7XG4gICAgICAgIHkgPSBzaXplWzFdIC8gMjtcbiAgICAgICAgaSA9IC0xO1xuICAgICAgICBpZiAoaykgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBvID0gbm9kZXNbaV07XG4gICAgICAgICAgby54ICs9ICh4IC0gby54KSAqIGs7XG4gICAgICAgICAgby55ICs9ICh5IC0gby55KSAqIGs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFyZ2UpIHtcbiAgICAgICAgZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZShxID0gZDMuZ2VvbS5xdWFkdHJlZShub2RlcyksIGFscGhhLCBjaGFyZ2VzKTtcbiAgICAgICAgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIGlmICghKG8gPSBub2Rlc1tpXSkuZml4ZWQpIHtcbiAgICAgICAgICAgIHEudmlzaXQocmVwdWxzZShvKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBvID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChvLmZpeGVkKSB7XG4gICAgICAgICAgby54ID0gby5weDtcbiAgICAgICAgICBvLnkgPSBvLnB5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG8ueCAtPSAoby5weCAtIChvLnB4ID0gby54KSkgKiBmcmljdGlvbjtcbiAgICAgICAgICBvLnkgLT0gKG8ucHkgLSAoby5weSA9IG8ueSkpICogZnJpY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGV2ZW50LnRpY2soe1xuICAgICAgICB0eXBlOiBcInRpY2tcIixcbiAgICAgICAgYWxwaGE6IGFscGhhXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGZvcmNlLm5vZGVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZXM7XG4gICAgICBub2RlcyA9IHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5saW5rcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmtzO1xuICAgICAgbGlua3MgPSB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2Uuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0geDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmxpbmtEaXN0YW5jZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmtEaXN0YW5jZTtcbiAgICAgIGxpbmtEaXN0YW5jZSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5kaXN0YW5jZSA9IGZvcmNlLmxpbmtEaXN0YW5jZTtcbiAgICBmb3JjZS5saW5rU3RyZW5ndGggPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rU3RyZW5ndGg7XG4gICAgICBsaW5rU3RyZW5ndGggPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuZnJpY3Rpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmcmljdGlvbjtcbiAgICAgIGZyaWN0aW9uID0gK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5jaGFyZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjaGFyZ2U7XG4gICAgICBjaGFyZ2UgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuY2hhcmdlRGlzdGFuY2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQoY2hhcmdlRGlzdGFuY2UyKTtcbiAgICAgIGNoYXJnZURpc3RhbmNlMiA9IHggKiB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuZ3Jhdml0eSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXZpdHk7XG4gICAgICBncmF2aXR5ID0gK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCh0aGV0YTIpO1xuICAgICAgdGhldGEyID0geCAqIHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5hbHBoYSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGFscGhhO1xuICAgICAgeCA9ICt4O1xuICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgIGlmICh4ID4gMCkge1xuICAgICAgICAgIGFscGhhID0geDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lci5jID0gbnVsbCwgdGltZXIudCA9IE5hTiwgdGltZXIgPSBudWxsO1xuICAgICAgICAgIGV2ZW50LmVuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImVuZFwiLFxuICAgICAgICAgICAgYWxwaGE6IGFscGhhID0gMFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHggPiAwKSB7XG4gICAgICAgIGV2ZW50LnN0YXJ0KHtcbiAgICAgICAgICB0eXBlOiBcInN0YXJ0XCIsXG4gICAgICAgICAgYWxwaGE6IGFscGhhID0geFxuICAgICAgICB9KTtcbiAgICAgICAgdGltZXIgPSBkM190aW1lcihmb3JjZS50aWNrKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbSA9IGxpbmtzLmxlbmd0aCwgdyA9IHNpemVbMF0sIGggPSBzaXplWzFdLCBuZWlnaGJvcnMsIG87XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIChvID0gbm9kZXNbaV0pLmluZGV4ID0gaTtcbiAgICAgICAgby53ZWlnaHQgPSAwO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkge1xuICAgICAgICBvID0gbGlua3NbaV07XG4gICAgICAgIGlmICh0eXBlb2Ygby5zb3VyY2UgPT0gXCJudW1iZXJcIikgby5zb3VyY2UgPSBub2Rlc1tvLnNvdXJjZV07XG4gICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQgPT0gXCJudW1iZXJcIikgby50YXJnZXQgPSBub2Rlc1tvLnRhcmdldF07XG4gICAgICAgICsrby5zb3VyY2Uud2VpZ2h0O1xuICAgICAgICArK28udGFyZ2V0LndlaWdodDtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbyA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoaXNOYU4oby54KSkgby54ID0gcG9zaXRpb24oXCJ4XCIsIHcpO1xuICAgICAgICBpZiAoaXNOYU4oby55KSkgby55ID0gcG9zaXRpb24oXCJ5XCIsIGgpO1xuICAgICAgICBpZiAoaXNOYU4oby5weCkpIG8ucHggPSBvLng7XG4gICAgICAgIGlmIChpc05hTihvLnB5KSkgby5weSA9IG8ueTtcbiAgICAgIH1cbiAgICAgIGRpc3RhbmNlcyA9IFtdO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rRGlzdGFuY2UgPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG07ICsraSkgZGlzdGFuY2VzW2ldID0gK2xpbmtEaXN0YW5jZS5jYWxsKHRoaXMsIGxpbmtzW2ldLCBpKTsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBkaXN0YW5jZXNbaV0gPSBsaW5rRGlzdGFuY2U7XG4gICAgICBzdHJlbmd0aHMgPSBbXTtcbiAgICAgIGlmICh0eXBlb2YgbGlua1N0cmVuZ3RoID09PSBcImZ1bmN0aW9uXCIpIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHN0cmVuZ3Roc1tpXSA9ICtsaW5rU3RyZW5ndGguY2FsbCh0aGlzLCBsaW5rc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc3RyZW5ndGhzW2ldID0gbGlua1N0cmVuZ3RoO1xuICAgICAgY2hhcmdlcyA9IFtdO1xuICAgICAgaWYgKHR5cGVvZiBjaGFyZ2UgPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hhcmdlc1tpXSA9ICtjaGFyZ2UuY2FsbCh0aGlzLCBub2Rlc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hhcmdlc1tpXSA9IGNoYXJnZTtcbiAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uKGRpbWVuc2lvbiwgc2l6ZSkge1xuICAgICAgICBpZiAoIW5laWdoYm9ycykge1xuICAgICAgICAgIG5laWdoYm9ycyA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbjsgKytqKSB7XG4gICAgICAgICAgICBuZWlnaGJvcnNbal0gPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICAgICAgdmFyIG8gPSBsaW5rc1tqXTtcbiAgICAgICAgICAgIG5laWdoYm9yc1tvLnNvdXJjZS5pbmRleF0ucHVzaChvLnRhcmdldCk7XG4gICAgICAgICAgICBuZWlnaGJvcnNbby50YXJnZXQuaW5kZXhdLnB1c2goby5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FuZGlkYXRlcyA9IG5laWdoYm9yc1tpXSwgaiA9IC0xLCBsID0gY2FuZGlkYXRlcy5sZW5ndGgsIHg7XG4gICAgICAgIHdoaWxlICgrK2ogPCBsKSBpZiAoIWlzTmFOKHggPSBjYW5kaWRhdGVzW2pdW2RpbWVuc2lvbl0pKSByZXR1cm4geDtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiBzaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcmNlLnJlc3VtZSgpO1xuICAgIH07XG4gICAgZm9yY2UucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm9yY2UuYWxwaGEoLjEpO1xuICAgIH07XG4gICAgZm9yY2Uuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcmNlLmFscGhhKDApO1xuICAgIH07XG4gICAgZm9yY2UuZHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFkcmFnKSBkcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpLm9yaWdpbihkM19pZGVudGl0eSkub24oXCJkcmFnc3RhcnQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KS5vbihcImRyYWcuZm9yY2VcIiwgZHJhZ21vdmUpLm9uKFwiZHJhZ2VuZC5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VEcmFnZW5kKTtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRyYWc7XG4gICAgICB0aGlzLm9uKFwibW91c2VvdmVyLmZvcmNlXCIsIGQzX2xheW91dF9mb3JjZU1vdXNlb3Zlcikub24oXCJtb3VzZW91dC5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VNb3VzZW91dCkuY2FsbChkcmFnKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGRyYWdtb3ZlKGQpIHtcbiAgICAgIGQucHggPSBkMy5ldmVudC54LCBkLnB5ID0gZDMuZXZlbnQueTtcbiAgICAgIGZvcmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZDMucmViaW5kKGZvcmNlLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KGQpIHtcbiAgICBkLmZpeGVkIHw9IDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ2VuZChkKSB7XG4gICAgZC5maXhlZCAmPSB+NjtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VNb3VzZW92ZXIoZCkge1xuICAgIGQuZml4ZWQgfD0gNDtcbiAgICBkLnB4ID0gZC54LCBkLnB5ID0gZC55O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZU1vdXNlb3V0KGQpIHtcbiAgICBkLmZpeGVkICY9IH40O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZUFjY3VtdWxhdGUocXVhZCwgYWxwaGEsIGNoYXJnZXMpIHtcbiAgICB2YXIgY3ggPSAwLCBjeSA9IDA7XG4gICAgcXVhZC5jaGFyZ2UgPSAwO1xuICAgIGlmICghcXVhZC5sZWFmKSB7XG4gICAgICB2YXIgbm9kZXMgPSBxdWFkLm5vZGVzLCBuID0gbm9kZXMubGVuZ3RoLCBpID0gLTEsIGM7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBjID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChjID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBkM19sYXlvdXRfZm9yY2VBY2N1bXVsYXRlKGMsIGFscGhhLCBjaGFyZ2VzKTtcbiAgICAgICAgcXVhZC5jaGFyZ2UgKz0gYy5jaGFyZ2U7XG4gICAgICAgIGN4ICs9IGMuY2hhcmdlICogYy5jeDtcbiAgICAgICAgY3kgKz0gYy5jaGFyZ2UgKiBjLmN5O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVhZC5wb2ludCkge1xuICAgICAgaWYgKCFxdWFkLmxlYWYpIHtcbiAgICAgICAgcXVhZC5wb2ludC54ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcbiAgICAgICAgcXVhZC5wb2ludC55ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcbiAgICAgIH1cbiAgICAgIHZhciBrID0gYWxwaGEgKiBjaGFyZ2VzW3F1YWQucG9pbnQuaW5kZXhdO1xuICAgICAgcXVhZC5jaGFyZ2UgKz0gcXVhZC5wb2ludENoYXJnZSA9IGs7XG4gICAgICBjeCArPSBrICogcXVhZC5wb2ludC54O1xuICAgICAgY3kgKz0gayAqIHF1YWQucG9pbnQueTtcbiAgICB9XG4gICAgcXVhZC5jeCA9IGN4IC8gcXVhZC5jaGFyZ2U7XG4gICAgcXVhZC5jeSA9IGN5IC8gcXVhZC5jaGFyZ2U7XG4gIH1cbiAgdmFyIGQzX2xheW91dF9mb3JjZUxpbmtEaXN0YW5jZSA9IDIwLCBkM19sYXlvdXRfZm9yY2VMaW5rU3RyZW5ndGggPSAxLCBkM19sYXlvdXRfZm9yY2VDaGFyZ2VEaXN0YW5jZTIgPSBJbmZpbml0eTtcbiAgZDMubGF5b3V0LmhpZXJhcmNoeSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3J0ID0gZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQsIGNoaWxkcmVuID0gZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuLCB2YWx1ZSA9IGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZTtcbiAgICBmdW5jdGlvbiBoaWVyYXJjaHkocm9vdCkge1xuICAgICAgdmFyIHN0YWNrID0gWyByb290IF0sIG5vZGVzID0gW10sIG5vZGU7XG4gICAgICByb290LmRlcHRoID0gMDtcbiAgICAgIHdoaWxlICgobm9kZSA9IHN0YWNrLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4uY2FsbChoaWVyYXJjaHksIG5vZGUsIG5vZGUuZGVwdGgpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICAgICAgdmFyIG4sIGNoaWxkcywgY2hpbGQ7XG4gICAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGNoaWxkID0gY2hpbGRzW25dKTtcbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUpIG5vZGUudmFsdWUgPSAwO1xuICAgICAgICAgIG5vZGUuY2hpbGRyZW4gPSBjaGlsZHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHZhbHVlKSBub2RlLnZhbHVlID0gK3ZhbHVlLmNhbGwoaGllcmFyY2h5LCBub2RlLCBub2RlLmRlcHRoKSB8fCAwO1xuICAgICAgICAgIGRlbGV0ZSBub2RlLmNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZHMsIHBhcmVudDtcbiAgICAgICAgaWYgKHNvcnQgJiYgKGNoaWxkcyA9IG5vZGUuY2hpbGRyZW4pKSBjaGlsZHMuc29ydChzb3J0KTtcbiAgICAgICAgaWYgKHZhbHVlICYmIChwYXJlbnQgPSBub2RlLnBhcmVudCkpIHBhcmVudC52YWx1ZSArPSBub2RlLnZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGhpZXJhcmNoeS5zb3J0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydDtcbiAgICAgIHNvcnQgPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS5jaGlsZHJlbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgY2hpbGRyZW4gPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS52YWx1ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlO1xuICAgICAgdmFsdWUgPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS5yZXZhbHVlID0gZnVuY3Rpb24ocm9vdCkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIG5vZGUudmFsdWUgPSAwO1xuICAgICAgICB9KTtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIHZhciBwYXJlbnQ7XG4gICAgICAgICAgaWYgKCFub2RlLmNoaWxkcmVuKSBub2RlLnZhbHVlID0gK3ZhbHVlLmNhbGwoaGllcmFyY2h5LCBub2RlLCBub2RlLmRlcHRoKSB8fCAwO1xuICAgICAgICAgIGlmIChwYXJlbnQgPSBub2RlLnBhcmVudCkgcGFyZW50LnZhbHVlICs9IG5vZGUudmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfTtcbiAgICByZXR1cm4gaGllcmFyY2h5O1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKG9iamVjdCwgaGllcmFyY2h5KSB7XG4gICAgZDMucmViaW5kKG9iamVjdCwgaGllcmFyY2h5LCBcInNvcnRcIiwgXCJjaGlsZHJlblwiLCBcInZhbHVlXCIpO1xuICAgIG9iamVjdC5ub2RlcyA9IG9iamVjdDtcbiAgICBvYmplY3QubGlua3MgPSBkM19sYXlvdXRfaGllcmFyY2h5TGlua3M7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUobm9kZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgbm9kZXMgPSBbIG5vZGUgXTtcbiAgICB3aGlsZSAoKG5vZGUgPSBub2Rlcy5wb3AoKSkgIT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICBpZiAoKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBuLCBjaGlsZHJlbjtcbiAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSBub2Rlcy5wdXNoKGNoaWxkcmVuW25dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIobm9kZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgbm9kZXMgPSBbIG5vZGUgXSwgbm9kZXMyID0gW107XG4gICAgd2hpbGUgKChub2RlID0gbm9kZXMucG9wKCkpICE9IG51bGwpIHtcbiAgICAgIG5vZGVzMi5wdXNoKG5vZGUpO1xuICAgICAgaWYgKChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuLCBjaGlsZHJlbjtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoKG5vZGUgPSBub2RlczIucG9wKCkpICE9IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5Q2hpbGRyZW4oZCkge1xuICAgIHJldHVybiBkLmNoaWxkcmVuO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZShkKSB7XG4gICAgcmV0dXJuIGQudmFsdWU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQoYSwgYikge1xuICAgIHJldHVybiBiLnZhbHVlIC0gYS52YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5TGlua3Mobm9kZXMpIHtcbiAgICByZXR1cm4gZDMubWVyZ2Uobm9kZXMubWFwKGZ1bmN0aW9uKHBhcmVudCkge1xuICAgICAgcmV0dXJuIChwYXJlbnQuY2hpbGRyZW4gfHwgW10pLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogcGFyZW50LFxuICAgICAgICAgIHRhcmdldDogY2hpbGRcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxuICBkMy5sYXlvdXQucGFydGl0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKSwgc2l6ZSA9IFsgMSwgMSBdO1xuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUsIHgsIGR4LCBkeSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIG5vZGUueCA9IHg7XG4gICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gICAgICBub2RlLmR4ID0gZHg7XG4gICAgICBub2RlLmR5ID0gZHk7XG4gICAgICBpZiAoY2hpbGRyZW4gJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG4sIGMsIGQ7XG4gICAgICAgIGR4ID0gbm9kZS52YWx1ZSA/IGR4IC8gbm9kZS52YWx1ZSA6IDA7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgcG9zaXRpb24oYyA9IGNoaWxkcmVuW2ldLCB4LCBkID0gYy52YWx1ZSAqIGR4LCBkeSk7XG4gICAgICAgICAgeCArPSBkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlcHRoKG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIGQgPSAwO1xuICAgICAgaWYgKGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgZCA9IE1hdGgubWF4KGQsIGRlcHRoKGNoaWxkcmVuW2ldKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gMSArIGQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnRpdGlvbihkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgIHBvc2l0aW9uKG5vZGVzWzBdLCAwLCBzaXplWzBdLCBzaXplWzFdIC8gZGVwdGgobm9kZXNbMF0pKTtcbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgICAgc2l6ZSA9IHg7XG4gICAgICByZXR1cm4gcGFydGl0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQocGFydGl0aW9uLCBoaWVyYXJjaHkpO1xuICB9O1xuICBkMy5sYXlvdXQucGllID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gTnVtYmVyLCBzb3J0ID0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlLCBzdGFydEFuZ2xlID0gMCwgZW5kQW5nbGUgPSDPhCwgcGFkQW5nbGUgPSAwO1xuICAgIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCB2YWx1ZXMgPSBkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiArdmFsdWUuY2FsbChwaWUsIGQsIGkpO1xuICAgICAgfSksIGEgPSArKHR5cGVvZiBzdGFydEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzdGFydEFuZ2xlKSwgZGEgPSAodHlwZW9mIGVuZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogZW5kQW5nbGUpIC0gYSwgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sICsodHlwZW9mIHBhZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcGFkQW5nbGUpKSwgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksIHN1bSA9IGQzLnN1bSh2YWx1ZXMpLCBrID0gc3VtID8gKGRhIC0gbiAqIHBhKSAvIHN1bSA6IDAsIGluZGV4ID0gZDMucmFuZ2UobiksIGFyY3MgPSBbXSwgdjtcbiAgICAgIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoc29ydCA9PT0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlID8gZnVuY3Rpb24oaSwgaikge1xuICAgICAgICByZXR1cm4gdmFsdWVzW2pdIC0gdmFsdWVzW2ldO1xuICAgICAgfSA6IGZ1bmN0aW9uKGksIGopIHtcbiAgICAgICAgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7XG4gICAgICB9KTtcbiAgICAgIGluZGV4LmZvckVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBhcmNzW2ldID0ge1xuICAgICAgICAgIGRhdGE6IGRhdGFbaV0sXG4gICAgICAgICAgdmFsdWU6IHYgPSB2YWx1ZXNbaV0sXG4gICAgICAgICAgc3RhcnRBbmdsZTogYSxcbiAgICAgICAgICBlbmRBbmdsZTogYSArPSB2ICogayArIHBhLFxuICAgICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhcmNzO1xuICAgIH1cbiAgICBwaWUudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZTtcbiAgICAgIHZhbHVlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuc29ydCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnQ7XG4gICAgICBzb3J0ID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG4gICAgICBzdGFydEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcbiAgICAgIGVuZEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcbiAgICAgIHBhZEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICByZXR1cm4gcGllO1xuICB9O1xuICB2YXIgZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlID0ge307XG4gIGQzLmxheW91dC5zdGFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBkM19pZGVudGl0eSwgb3JkZXIgPSBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQsIG9mZnNldCA9IGQzX2xheW91dF9zdGFja09mZnNldFplcm8sIG91dCA9IGQzX2xheW91dF9zdGFja091dCwgeCA9IGQzX2xheW91dF9zdGFja1gsIHkgPSBkM19sYXlvdXRfc3RhY2tZO1xuICAgIGZ1bmN0aW9uIHN0YWNrKGRhdGEsIGluZGV4KSB7XG4gICAgICBpZiAoIShuID0gZGF0YS5sZW5ndGgpKSByZXR1cm4gZGF0YTtcbiAgICAgIHZhciBzZXJpZXMgPSBkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuY2FsbChzdGFjaywgZCwgaSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBwb2ludHMgPSBzZXJpZXMubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQubWFwKGZ1bmN0aW9uKHYsIGkpIHtcbiAgICAgICAgICByZXR1cm4gWyB4LmNhbGwoc3RhY2ssIHYsIGkpLCB5LmNhbGwoc3RhY2ssIHYsIGkpIF07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgb3JkZXJzID0gb3JkZXIuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG4gICAgICBzZXJpZXMgPSBkMy5wZXJtdXRlKHNlcmllcywgb3JkZXJzKTtcbiAgICAgIHBvaW50cyA9IGQzLnBlcm11dGUocG9pbnRzLCBvcmRlcnMpO1xuICAgICAgdmFyIG9mZnNldHMgPSBvZmZzZXQuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG4gICAgICB2YXIgbSA9IHNlcmllc1swXS5sZW5ndGgsIG4sIGksIGosIG87XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIG91dC5jYWxsKHN0YWNrLCBzZXJpZXNbMF1bal0sIG8gPSBvZmZzZXRzW2pdLCBwb2ludHNbMF1bal1bMV0pO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgb3V0LmNhbGwoc3RhY2ssIHNlcmllc1tpXVtqXSwgbyArPSBwb2ludHNbaSAtIDFdW2pdWzFdLCBwb2ludHNbaV1bal1bMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgc3RhY2sudmFsdWVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWVzO1xuICAgICAgdmFsdWVzID0geDtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLm9yZGVyID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JkZXI7XG4gICAgICBvcmRlciA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogZDNfbGF5b3V0X3N0YWNrT3JkZXJzLmdldCh4KSB8fCBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQ7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvZmZzZXQ7XG4gICAgICBvZmZzZXQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGQzX2xheW91dF9zdGFja09mZnNldHMuZ2V0KHgpIHx8IGQzX2xheW91dF9zdGFja09mZnNldFplcm87XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay54ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcbiAgICAgIHggPSB6O1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgc3RhY2sueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHk7XG4gICAgICB5ID0gejtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLm91dCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dDtcbiAgICAgIG91dCA9IHo7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1goZCkge1xuICAgIHJldHVybiBkLng7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrWShkKSB7XG4gICAgcmV0dXJuIGQueTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tPdXQoZCwgeTAsIHkpIHtcbiAgICBkLnkwID0geTA7XG4gICAgZC55ID0geTtcbiAgfVxuICB2YXIgZDNfbGF5b3V0X3N0YWNrT3JkZXJzID0gZDMubWFwKHtcbiAgICBcImluc2lkZS1vdXRcIjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgaSwgaiwgbWF4ID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgpLCBzdW1zID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKSwgaW5kZXggPSBkMy5yYW5nZShuKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIG1heFthXSAtIG1heFtiXTtcbiAgICAgIH0pLCB0b3AgPSAwLCBib3R0b20gPSAwLCB0b3BzID0gW10sIGJvdHRvbXMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaiA9IGluZGV4W2ldO1xuICAgICAgICBpZiAodG9wIDwgYm90dG9tKSB7XG4gICAgICAgICAgdG9wICs9IHN1bXNbal07XG4gICAgICAgICAgdG9wcy5wdXNoKGopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xuICAgICAgICAgIGJvdHRvbXMucHVzaChqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJvdHRvbXMucmV2ZXJzZSgpLmNvbmNhdCh0b3BzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShkYXRhLmxlbmd0aCkucmV2ZXJzZSgpO1xuICAgIH0sXG4gICAgXCJkZWZhdWx0XCI6IGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdFxuICB9KTtcbiAgdmFyIGQzX2xheW91dF9zdGFja09mZnNldHMgPSBkMy5tYXAoe1xuICAgIHNpbGhvdWV0dGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIG0gPSBkYXRhWzBdLmxlbmd0aCwgc3VtcyA9IFtdLCBtYXggPSAwLCBpLCBqLCBvLCB5MCA9IFtdO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBmb3IgKGkgPSAwLCBvID0gMDsgaSA8IG47IGkrKykgbyArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBpZiAobyA+IG1heCkgbWF4ID0gbztcbiAgICAgICAgc3Vtcy5wdXNoKG8pO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICB5MFtqXSA9IChtYXggLSBzdW1zW2pdKSAvIDI7XG4gICAgICB9XG4gICAgICByZXR1cm4geTA7XG4gICAgfSxcbiAgICB3aWdnbGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIHggPSBkYXRhWzBdLCBtID0geC5sZW5ndGgsIGksIGosIGssIHMxLCBzMiwgczMsIGR4LCBvLCBvMCwgeTAgPSBbXTtcbiAgICAgIHkwWzBdID0gbyA9IG8wID0gMDtcbiAgICAgIGZvciAoaiA9IDE7IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgczEgPSAwOyBpIDwgbjsgKytpKSBzMSArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBmb3IgKGkgPSAwLCBzMiA9IDAsIGR4ID0geFtqXVswXSAtIHhbaiAtIDFdWzBdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZm9yIChrID0gMCwgczMgPSAoZGF0YVtpXVtqXVsxXSAtIGRhdGFbaV1baiAtIDFdWzFdKSAvICgyICogZHgpOyBrIDwgaTsgKytrKSB7XG4gICAgICAgICAgICBzMyArPSAoZGF0YVtrXVtqXVsxXSAtIGRhdGFba11baiAtIDFdWzFdKSAvIGR4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzMiArPSBzMyAqIGRhdGFbaV1bal1bMV07XG4gICAgICAgIH1cbiAgICAgICAgeTBbal0gPSBvIC09IHMxID8gczIgLyBzMSAqIGR4IDogMDtcbiAgICAgICAgaWYgKG8gPCBvMCkgbzAgPSBvO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgeTBbal0gLT0gbzA7XG4gICAgICByZXR1cm4geTA7XG4gICAgfSxcbiAgICBleHBhbmQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIG0gPSBkYXRhWzBdLmxlbmd0aCwgayA9IDEgLyBuLCBpLCBqLCBvLCB5MCA9IFtdO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBmb3IgKGkgPSAwLCBvID0gMDsgaSA8IG47IGkrKykgbyArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBpZiAobykgZm9yIChpID0gMDsgaSA8IG47IGkrKykgZGF0YVtpXVtqXVsxXSAvPSBvOyBlbHNlIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGRhdGFbaV1bal1bMV0gPSBrO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgeTBbal0gPSAwO1xuICAgICAgcmV0dXJuIHkwO1xuICAgIH0sXG4gICAgemVybzogZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVyb1xuICB9KTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0KGRhdGEpIHtcbiAgICByZXR1cm4gZDMucmFuZ2UoZGF0YS5sZW5ndGgpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja09mZnNldFplcm8oZGF0YSkge1xuICAgIHZhciBqID0gLTEsIG0gPSBkYXRhWzBdLmxlbmd0aCwgeTAgPSBbXTtcbiAgICB3aGlsZSAoKytqIDwgbSkgeTBbal0gPSAwO1xuICAgIHJldHVybiB5MDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tNYXhJbmRleChhcnJheSkge1xuICAgIHZhciBpID0gMSwgaiA9IDAsIHYgPSBhcnJheVswXVsxXSwgaywgbiA9IGFycmF5Lmxlbmd0aDtcbiAgICBmb3IgKDtpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGsgPSBhcnJheVtpXVsxXSkgPiB2KSB7XG4gICAgICAgIGogPSBpO1xuICAgICAgICB2ID0gaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGo7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKGQpIHtcbiAgICByZXR1cm4gZC5yZWR1Y2UoZDNfbGF5b3V0X3N0YWNrU3VtLCAwKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tTdW0ocCwgZCkge1xuICAgIHJldHVybiBwICsgZFsxXTtcbiAgfVxuICBkMy5sYXlvdXQuaGlzdG9ncmFtID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZyZXF1ZW5jeSA9IHRydWUsIHZhbHVlciA9IE51bWJlciwgcmFuZ2VyID0gZDNfbGF5b3V0X2hpc3RvZ3JhbVJhbmdlLCBiaW5uZXIgPSBkM19sYXlvdXRfaGlzdG9ncmFtQmluU3R1cmdlcztcbiAgICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSwgaSkge1xuICAgICAgdmFyIGJpbnMgPSBbXSwgdmFsdWVzID0gZGF0YS5tYXAodmFsdWVyLCB0aGlzKSwgcmFuZ2UgPSByYW5nZXIuY2FsbCh0aGlzLCB2YWx1ZXMsIGkpLCB0aHJlc2hvbGRzID0gYmlubmVyLmNhbGwodGhpcywgcmFuZ2UsIHZhbHVlcywgaSksIGJpbiwgaSA9IC0xLCBuID0gdmFsdWVzLmxlbmd0aCwgbSA9IHRocmVzaG9sZHMubGVuZ3RoIC0gMSwgayA9IGZyZXF1ZW5jeSA/IDEgOiAxIC8gbiwgeDtcbiAgICAgIHdoaWxlICgrK2kgPCBtKSB7XG4gICAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcbiAgICAgICAgYmluLmR4ID0gdGhyZXNob2xkc1tpICsgMV0gLSAoYmluLnggPSB0aHJlc2hvbGRzW2ldKTtcbiAgICAgICAgYmluLnkgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKG0gPiAwKSB7XG4gICAgICAgIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICB4ID0gdmFsdWVzW2ldO1xuICAgICAgICAgIGlmICh4ID49IHJhbmdlWzBdICYmIHggPD0gcmFuZ2VbMV0pIHtcbiAgICAgICAgICAgIGJpbiA9IGJpbnNbZDMuYmlzZWN0KHRocmVzaG9sZHMsIHgsIDEsIG0pIC0gMV07XG4gICAgICAgICAgICBiaW4ueSArPSBrO1xuICAgICAgICAgICAgYmluLnB1c2goZGF0YVtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmlucztcbiAgICB9XG4gICAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWVyO1xuICAgICAgdmFsdWVyID0geDtcbiAgICAgIHJldHVybiBoaXN0b2dyYW07XG4gICAgfTtcbiAgICBoaXN0b2dyYW0ucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZXI7XG4gICAgICByYW5nZXIgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgICB9O1xuICAgIGhpc3RvZ3JhbS5iaW5zID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYmlubmVyO1xuICAgICAgYmlubmVyID0gdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICByZXR1cm4gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpbkZpeGVkKHJhbmdlLCB4KTtcbiAgICAgIH0gOiBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgICB9O1xuICAgIGhpc3RvZ3JhbS5mcmVxdWVuY3kgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmcmVxdWVuY3k7XG4gICAgICBmcmVxdWVuY3kgPSAhIXg7XG4gICAgICByZXR1cm4gaGlzdG9ncmFtO1xuICAgIH07XG4gICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpblN0dXJnZXMocmFuZ2UsIHZhbHVlcykge1xuICAgIHJldHVybiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yICsgMSkpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1CaW5GaXhlZChyYW5nZSwgbikge1xuICAgIHZhciB4ID0gLTEsIGIgPSArcmFuZ2VbMF0sIG0gPSAocmFuZ2VbMV0gLSBiKSAvIG4sIGYgPSBbXTtcbiAgICB3aGlsZSAoKyt4IDw9IG4pIGZbeF0gPSBtICogeCArIGI7XG4gICAgcmV0dXJuIGY7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpc3RvZ3JhbVJhbmdlKHZhbHVlcykge1xuICAgIHJldHVybiBbIGQzLm1pbih2YWx1ZXMpLCBkMy5tYXgodmFsdWVzKSBdO1xuICB9XG4gIGQzLmxheW91dC5wYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KGQzX2xheW91dF9wYWNrU29ydCksIHBhZGRpbmcgPSAwLCBzaXplID0gWyAxLCAxIF0sIHJhZGl1cztcbiAgICBmdW5jdGlvbiBwYWNrKGQsIGkpIHtcbiAgICAgIHZhciBub2RlcyA9IGhpZXJhcmNoeS5jYWxsKHRoaXMsIGQsIGkpLCByb290ID0gbm9kZXNbMF0sIHcgPSBzaXplWzBdLCBoID0gc2l6ZVsxXSwgciA9IHJhZGl1cyA9PSBudWxsID8gTWF0aC5zcXJ0IDogdHlwZW9mIHJhZGl1cyA9PT0gXCJmdW5jdGlvblwiID8gcmFkaXVzIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByYWRpdXM7XG4gICAgICB9O1xuICAgICAgcm9vdC54ID0gcm9vdC55ID0gMDtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgZC5yID0gK3IoZC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGQzX2xheW91dF9wYWNrU2libGluZ3MpO1xuICAgICAgaWYgKHBhZGRpbmcpIHtcbiAgICAgICAgdmFyIGRyID0gcGFkZGluZyAqIChyYWRpdXMgPyAxIDogTWF0aC5tYXgoMiAqIHJvb3QuciAvIHcsIDIgKiByb290LnIgLyBoKSkgLyAyO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgZC5yICs9IGRyO1xuICAgICAgICB9KTtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZDNfbGF5b3V0X3BhY2tTaWJsaW5ncyk7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICBkLnIgLT0gZHI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZDNfbGF5b3V0X3BhY2tUcmFuc2Zvcm0ocm9vdCwgdyAvIDIsIGggLyAyLCByYWRpdXMgPyAxIDogMSAvIE1hdGgubWF4KDIgKiByb290LnIgLyB3LCAyICogcm9vdC5yIC8gaCkpO1xuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICBwYWNrLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgICAgc2l6ZSA9IF87XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHBhY2sucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFkaXVzO1xuICAgICAgcmFkaXVzID0gXyA9PSBudWxsIHx8IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogK187XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHBhY2sucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZGRpbmc7XG4gICAgICBwYWRkaW5nID0gK187XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHBhY2ssIGhpZXJhcmNoeSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU29ydChhLCBiKSB7XG4gICAgcmV0dXJuIGEudmFsdWUgLSBiLnZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGIpIHtcbiAgICB2YXIgYyA9IGEuX3BhY2tfbmV4dDtcbiAgICBhLl9wYWNrX25leHQgPSBiO1xuICAgIGIuX3BhY2tfcHJldiA9IGE7XG4gICAgYi5fcGFja19uZXh0ID0gYztcbiAgICBjLl9wYWNrX3ByZXYgPSBiO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU3BsaWNlKGEsIGIpIHtcbiAgICBhLl9wYWNrX25leHQgPSBiO1xuICAgIGIuX3BhY2tfcHJldiA9IGE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGEsIGIpIHtcbiAgICB2YXIgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55LCBkciA9IGEuciArIGIucjtcbiAgICByZXR1cm4gLjk5OSAqIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1NpYmxpbmdzKG5vZGUpIHtcbiAgICBpZiAoIShub2RlcyA9IG5vZGUuY2hpbGRyZW4pIHx8ICEobiA9IG5vZGVzLmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbm9kZXMsIHhNaW4gPSBJbmZpbml0eSwgeE1heCA9IC1JbmZpbml0eSwgeU1pbiA9IEluZmluaXR5LCB5TWF4ID0gLUluZmluaXR5LCBhLCBiLCBjLCBpLCBqLCBrLCBuO1xuICAgIGZ1bmN0aW9uIGJvdW5kKG5vZGUpIHtcbiAgICAgIHhNaW4gPSBNYXRoLm1pbihub2RlLnggLSBub2RlLnIsIHhNaW4pO1xuICAgICAgeE1heCA9IE1hdGgubWF4KG5vZGUueCArIG5vZGUuciwgeE1heCk7XG4gICAgICB5TWluID0gTWF0aC5taW4obm9kZS55IC0gbm9kZS5yLCB5TWluKTtcbiAgICAgIHlNYXggPSBNYXRoLm1heChub2RlLnkgKyBub2RlLnIsIHlNYXgpO1xuICAgIH1cbiAgICBub2Rlcy5mb3JFYWNoKGQzX2xheW91dF9wYWNrTGluayk7XG4gICAgYSA9IG5vZGVzWzBdO1xuICAgIGEueCA9IC1hLnI7XG4gICAgYS55ID0gMDtcbiAgICBib3VuZChhKTtcbiAgICBpZiAobiA+IDEpIHtcbiAgICAgIGIgPSBub2Rlc1sxXTtcbiAgICAgIGIueCA9IGIucjtcbiAgICAgIGIueSA9IDA7XG4gICAgICBib3VuZChiKTtcbiAgICAgIGlmIChuID4gMikge1xuICAgICAgICBjID0gbm9kZXNbMl07XG4gICAgICAgIGQzX2xheW91dF9wYWNrUGxhY2UoYSwgYiwgYyk7XG4gICAgICAgIGJvdW5kKGMpO1xuICAgICAgICBkM19sYXlvdXRfcGFja0luc2VydChhLCBjKTtcbiAgICAgICAgYS5fcGFja19wcmV2ID0gYztcbiAgICAgICAgZDNfbGF5b3V0X3BhY2tJbnNlcnQoYywgYik7XG4gICAgICAgIGIgPSBhLl9wYWNrX25leHQ7XG4gICAgICAgIGZvciAoaSA9IDM7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBkM19sYXlvdXRfcGFja1BsYWNlKGEsIGIsIGMgPSBub2Rlc1tpXSk7XG4gICAgICAgICAgdmFyIGlzZWN0ID0gMCwgczEgPSAxLCBzMiA9IDE7XG4gICAgICAgICAgZm9yIChqID0gYi5fcGFja19uZXh0OyBqICE9PSBiOyBqID0gai5fcGFja19uZXh0LCBzMSsrKSB7XG4gICAgICAgICAgICBpZiAoZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGosIGMpKSB7XG4gICAgICAgICAgICAgIGlzZWN0ID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc2VjdCA9PSAxKSB7XG4gICAgICAgICAgICBmb3IgKGsgPSBhLl9wYWNrX3ByZXY7IGsgIT09IGouX3BhY2tfcHJldjsgayA9IGsuX3BhY2tfcHJldiwgczIrKykge1xuICAgICAgICAgICAgICBpZiAoZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGssIGMpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzZWN0KSB7XG4gICAgICAgICAgICBpZiAoczEgPCBzMiB8fCBzMSA9PSBzMiAmJiBiLnIgPCBhLnIpIGQzX2xheW91dF9wYWNrU3BsaWNlKGEsIGIgPSBqKTsgZWxzZSBkM19sYXlvdXRfcGFja1NwbGljZShhID0gaywgYik7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGMpO1xuICAgICAgICAgICAgYiA9IGM7XG4gICAgICAgICAgICBib3VuZChjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGN4ID0gKHhNaW4gKyB4TWF4KSAvIDIsIGN5ID0gKHlNaW4gKyB5TWF4KSAvIDIsIGNyID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICBjID0gbm9kZXNbaV07XG4gICAgICBjLnggLT0gY3g7XG4gICAgICBjLnkgLT0gY3k7XG4gICAgICBjciA9IE1hdGgubWF4KGNyLCBjLnIgKyBNYXRoLnNxcnQoYy54ICogYy54ICsgYy55ICogYy55KSk7XG4gICAgfVxuICAgIG5vZGUuciA9IGNyO1xuICAgIG5vZGVzLmZvckVhY2goZDNfbGF5b3V0X3BhY2tVbmxpbmspO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrTGluayhub2RlKSB7XG4gICAgbm9kZS5fcGFja19uZXh0ID0gbm9kZS5fcGFja19wcmV2ID0gbm9kZTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1VubGluayhub2RlKSB7XG4gICAgZGVsZXRlIG5vZGUuX3BhY2tfbmV4dDtcbiAgICBkZWxldGUgbm9kZS5fcGFja19wcmV2O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKG5vZGUsIHgsIHksIGspIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIG5vZGUueCA9IHggKz0gayAqIG5vZGUueDtcbiAgICBub2RlLnkgPSB5ICs9IGsgKiBub2RlLnk7XG4gICAgbm9kZS5yICo9IGs7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKGNoaWxkcmVuW2ldLCB4LCB5LCBrKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjKSB7XG4gICAgdmFyIGRiID0gYS5yICsgYy5yLCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gICAgaWYgKGRiICYmIChkeCB8fCBkeSkpIHtcbiAgICAgIHZhciBkYSA9IGIuciArIGMuciwgZGMgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGRhICo9IGRhO1xuICAgICAgZGIgKj0gZGI7XG4gICAgICB2YXIgeCA9IC41ICsgKGRiIC0gZGEpIC8gKDIgKiBkYyksIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgMiAqIGRhICogKGRiICsgZGMpIC0gKGRiIC09IGRjKSAqIGRiIC0gZGEgKiBkYSkpIC8gKDIgKiBkYyk7XG4gICAgICBjLnggPSBhLnggKyB4ICogZHggKyB5ICogZHk7XG4gICAgICBjLnkgPSBhLnkgKyB4ICogZHkgLSB5ICogZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMueCA9IGEueCArIGRiO1xuICAgICAgYy55ID0gYS55O1xuICAgIH1cbiAgfVxuICBkMy5sYXlvdXQudHJlZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChudWxsKS52YWx1ZShudWxsKSwgc2VwYXJhdGlvbiA9IGQzX2xheW91dF90cmVlU2VwYXJhdGlvbiwgc2l6ZSA9IFsgMSwgMSBdLCBub2RlU2l6ZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gdHJlZShkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdDAgPSBub2Rlc1swXSwgcm9vdDEgPSB3cmFwVHJlZShyb290MCk7XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290MSwgZmlyc3RXYWxrKSwgcm9vdDEucGFyZW50Lm0gPSAtcm9vdDEuejtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MSwgc2Vjb25kV2Fsayk7XG4gICAgICBpZiAobm9kZVNpemUpIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgc2l6ZU5vZGUpOyBlbHNlIHtcbiAgICAgICAgdmFyIGxlZnQgPSByb290MCwgcmlnaHQgPSByb290MCwgYm90dG9tID0gcm9vdDA7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG4gICAgICAgICAgaWYgKG5vZGUuZGVwdGggPiBib3R0b20uZGVwdGgpIGJvdHRvbSA9IG5vZGU7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdHggPSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIgLSBsZWZ0LngsIGt4ID0gc2l6ZVswXSAvIChyaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyICsgdHgpLCBreSA9IHNpemVbMV0gLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDAsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG4gICAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JhcFRyZWUocm9vdDApIHtcbiAgICAgIHZhciByb290MSA9IHtcbiAgICAgICAgQTogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IFsgcm9vdDAgXVxuICAgICAgfSwgcXVldWUgPSBbIHJvb3QxIF0sIG5vZGUxO1xuICAgICAgd2hpbGUgKChub2RlMSA9IHF1ZXVlLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gbm9kZTEuY2hpbGRyZW4sIGNoaWxkLCBpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIHF1ZXVlLnB1c2goKGNoaWxkcmVuW2ldID0gY2hpbGQgPSB7XG4gICAgICAgICAgICBfOiBjaGlsZHJlbltpXSxcbiAgICAgICAgICAgIHBhcmVudDogbm9kZTEsXG4gICAgICAgICAgICBjaGlsZHJlbjogKGNoaWxkID0gY2hpbGRyZW5baV0uY2hpbGRyZW4pICYmIGNoaWxkLnNsaWNlKCkgfHwgW10sXG4gICAgICAgICAgICBBOiBudWxsLFxuICAgICAgICAgICAgYTogbnVsbCxcbiAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICBtOiAwLFxuICAgICAgICAgICAgYzogMCxcbiAgICAgICAgICAgIHM6IDAsXG4gICAgICAgICAgICB0OiBudWxsLFxuICAgICAgICAgICAgaTogaVxuICAgICAgICAgIH0pLmEgPSBjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByb290MS5jaGlsZHJlblswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIGQzX2xheW91dF90cmVlU2hpZnQodik7XG4gICAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xuICAgICAgICBpZiAodykge1xuICAgICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICB9XG4gICAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZWNvbmRXYWxrKHYpIHtcbiAgICAgIHYuXy54ID0gdi56ICsgdi5wYXJlbnQubTtcbiAgICAgIHYubSArPSB2LnBhcmVudC5tO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHZhciB2aXAgPSB2LCB2b3AgPSB2LCB2aW0gPSB3LCB2b20gPSB2aXAucGFyZW50LmNoaWxkcmVuWzBdLCBzaXAgPSB2aXAubSwgc29wID0gdm9wLm0sIHNpbSA9IHZpbS5tLCBzb20gPSB2b20ubSwgc2hpZnQ7XG4gICAgICAgIHdoaWxlICh2aW0gPSBkM19sYXlvdXRfdHJlZVJpZ2h0KHZpbSksIHZpcCA9IGQzX2xheW91dF90cmVlTGVmdCh2aXApLCB2aW0gJiYgdmlwKSB7XG4gICAgICAgICAgdm9tID0gZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSk7XG4gICAgICAgICAgdm9wID0gZDNfbGF5b3V0X3RyZWVSaWdodCh2b3ApO1xuICAgICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgICAgZDNfbGF5b3V0X3RyZWVNb3ZlKGQzX2xheW91dF90cmVlQW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcbiAgICAgICAgICAgIHNpcCArPSBzaGlmdDtcbiAgICAgICAgICAgIHNvcCArPSBzaGlmdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2ltICs9IHZpbS5tO1xuICAgICAgICAgIHNpcCArPSB2aXAubTtcbiAgICAgICAgICBzb20gKz0gdm9tLm07XG4gICAgICAgICAgc29wICs9IHZvcC5tO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aW0gJiYgIWQzX2xheW91dF90cmVlUmlnaHQodm9wKSkge1xuICAgICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlwICYmICFkM19sYXlvdXRfdHJlZUxlZnQodm9tKSkge1xuICAgICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICAgIHZvbS5tICs9IHNpcCAtIHNvbTtcbiAgICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbmNlc3RvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgICAgbm9kZS54ICo9IHNpemVbMF07XG4gICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogc2l6ZVsxXTtcbiAgICB9XG4gICAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2VwYXJhdGlvbjtcbiAgICAgIHNlcGFyYXRpb24gPSB4O1xuICAgICAgcmV0dXJuIHRyZWU7XG4gICAgfTtcbiAgICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IG51bGwgOiBzaXplO1xuICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBzaXplTm9kZSA6IG51bGw7XG4gICAgICByZXR1cm4gdHJlZTtcbiAgICB9O1xuICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IHNpemUgOiBudWxsO1xuICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBudWxsIDogc2l6ZU5vZGU7XG4gICAgICByZXR1cm4gdHJlZTtcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWUsIGhpZXJhcmNoeSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlU2VwYXJhdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEucGFyZW50ID09IGIucGFyZW50ID8gMSA6IDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVMZWZ0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbi5sZW5ndGggPyBjaGlsZHJlblswXSA6IHYudDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVJpZ2h0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLCBuO1xuICAgIHJldHVybiAobiA9IGNoaWxkcmVuLmxlbmd0aCkgPyBjaGlsZHJlbltuIC0gMV0gOiB2LnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVNb3ZlKHdtLCB3cCwgc2hpZnQpIHtcbiAgICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICAgIHdwLmMgLT0gY2hhbmdlO1xuICAgIHdwLnMgKz0gc2hpZnQ7XG4gICAgd20uYyArPSBjaGFuZ2U7XG4gICAgd3AueiArPSBzaGlmdDtcbiAgICB3cC5tICs9IHNoaWZ0O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlU2hpZnQodikge1xuICAgIHZhciBzaGlmdCA9IDAsIGNoYW5nZSA9IDAsIGNoaWxkcmVuID0gdi5jaGlsZHJlbiwgaSA9IGNoaWxkcmVuLmxlbmd0aCwgdztcbiAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgIHcgPSBjaGlsZHJlbltpXTtcbiAgICAgIHcueiArPSBzaGlmdDtcbiAgICAgIHcubSArPSBzaGlmdDtcbiAgICAgIHNoaWZ0ICs9IHcucyArIChjaGFuZ2UgKz0gdy5jKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gICAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xuICB9XG4gIGQzLmxheW91dC5jbHVzdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KG51bGwpLnZhbHVlKG51bGwpLCBzZXBhcmF0aW9uID0gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uLCBzaXplID0gWyAxLCAxIF0sIG5vZGVTaXplID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gY2x1c3RlcihkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdCA9IG5vZGVzWzBdLCBwcmV2aW91c05vZGUsIHggPSAwO1xuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgbm9kZS54ID0gZDNfbGF5b3V0X2NsdXN0ZXJYKGNoaWxkcmVuKTtcbiAgICAgICAgICBub2RlLnkgPSBkM19sYXlvdXRfY2x1c3RlclkoY2hpbGRyZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDtcbiAgICAgICAgICBub2RlLnkgPSAwO1xuICAgICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGxlZnQgPSBkM19sYXlvdXRfY2x1c3RlckxlZnQocm9vdCksIHJpZ2h0ID0gZDNfbGF5b3V0X2NsdXN0ZXJSaWdodChyb290KSwgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIG5vZGVTaXplID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54IC0gcm9vdC54KSAqIHNpemVbMF07XG4gICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogc2l6ZVsxXTtcbiAgICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggLSB4MCkgLyAoeDEgLSB4MCkgKiBzaXplWzBdO1xuICAgICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBzaXplWzFdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNlcGFyYXRpb247XG4gICAgICBzZXBhcmF0aW9uID0geDtcbiAgICAgIHJldHVybiBjbHVzdGVyO1xuICAgIH07XG4gICAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBudWxsIDogc2l6ZTtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSA9PSBudWxsO1xuICAgICAgcmV0dXJuIGNsdXN0ZXI7XG4gICAgfTtcbiAgICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBzaXplIDogbnVsbDtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSAhPSBudWxsO1xuICAgICAgcmV0dXJuIGNsdXN0ZXI7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZChjbHVzdGVyLCBoaWVyYXJjaHkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclkoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gMSArIGQzLm1heChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC55O1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyWChjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24oeCwgY2hpbGQpIHtcbiAgICAgIHJldHVybiB4ICsgY2hpbGQueDtcbiAgICB9LCAwKSAvIGNoaWxkcmVuLmxlbmd0aDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlckxlZnQobm9kZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA/IGQzX2xheW91dF9jbHVzdGVyTGVmdChjaGlsZHJlblswXSkgOiBub2RlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyUmlnaHQobm9kZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIG47XG4gICAgcmV0dXJuIGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSA/IGQzX2xheW91dF9jbHVzdGVyUmlnaHQoY2hpbGRyZW5bbiAtIDFdKSA6IG5vZGU7XG4gIH1cbiAgZDMubGF5b3V0LnRyZWVtYXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLCByb3VuZCA9IE1hdGgucm91bmQsIHNpemUgPSBbIDEsIDEgXSwgcGFkZGluZyA9IG51bGwsIHBhZCA9IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbCwgc3RpY2t5ID0gZmFsc2UsIHN0aWNraWVzLCBtb2RlID0gXCJzcXVhcmlmeVwiLCByYXRpbyA9IC41ICogKDEgKyBNYXRoLnNxcnQoNSkpO1xuICAgIGZ1bmN0aW9uIHNjYWxlKGNoaWxkcmVuLCBrKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gY2hpbGRyZW4ubGVuZ3RoLCBjaGlsZCwgYXJlYTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGFyZWEgPSAoY2hpbGQgPSBjaGlsZHJlbltpXSkudmFsdWUgKiAoayA8IDAgPyAwIDogayk7XG4gICAgICAgIGNoaWxkLmFyZWEgPSBpc05hTihhcmVhKSB8fCBhcmVhIDw9IDAgPyAwIDogYXJlYTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3F1YXJpZnkobm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBwYWQobm9kZSksIHJvdyA9IFtdLCByZW1haW5pbmcgPSBjaGlsZHJlbi5zbGljZSgpLCBjaGlsZCwgYmVzdCA9IEluZmluaXR5LCBzY29yZSwgdSA9IG1vZGUgPT09IFwic2xpY2VcIiA/IHJlY3QuZHggOiBtb2RlID09PSBcImRpY2VcIiA/IHJlY3QuZHkgOiBtb2RlID09PSBcInNsaWNlLWRpY2VcIiA/IG5vZGUuZGVwdGggJiAxID8gcmVjdC5keSA6IHJlY3QuZHggOiBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KSwgbjtcbiAgICAgICAgc2NhbGUocmVtYWluaW5nLCByZWN0LmR4ICogcmVjdC5keSAvIG5vZGUudmFsdWUpO1xuICAgICAgICByb3cuYXJlYSA9IDA7XG4gICAgICAgIHdoaWxlICgobiA9IHJlbWFpbmluZy5sZW5ndGgpID4gMCkge1xuICAgICAgICAgIHJvdy5wdXNoKGNoaWxkID0gcmVtYWluaW5nW24gLSAxXSk7XG4gICAgICAgICAgcm93LmFyZWEgKz0gY2hpbGQuYXJlYTtcbiAgICAgICAgICBpZiAobW9kZSAhPT0gXCJzcXVhcmlmeVwiIHx8IChzY29yZSA9IHdvcnN0KHJvdywgdSkpIDw9IGJlc3QpIHtcbiAgICAgICAgICAgIHJlbWFpbmluZy5wb3AoKTtcbiAgICAgICAgICAgIGJlc3QgPSBzY29yZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm93LmFyZWEgLT0gcm93LnBvcCgpLmFyZWE7XG4gICAgICAgICAgICBwb3NpdGlvbihyb3csIHUsIHJlY3QsIGZhbHNlKTtcbiAgICAgICAgICAgIHUgPSBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KTtcbiAgICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG4gICAgICAgICAgICBiZXN0ID0gSW5maW5pdHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyb3cubGVuZ3RoKSB7XG4gICAgICAgICAgcG9zaXRpb24ocm93LCB1LCByZWN0LCB0cnVlKTtcbiAgICAgICAgICByb3cubGVuZ3RoID0gcm93LmFyZWEgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goc3F1YXJpZnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdGlja2lmeShub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICB2YXIgcmVjdCA9IHBhZChub2RlKSwgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSwgY2hpbGQsIHJvdyA9IFtdO1xuICAgICAgICBzY2FsZShyZW1haW5pbmcsIHJlY3QuZHggKiByZWN0LmR5IC8gbm9kZS52YWx1ZSk7XG4gICAgICAgIHJvdy5hcmVhID0gMDtcbiAgICAgICAgd2hpbGUgKGNoaWxkID0gcmVtYWluaW5nLnBvcCgpKSB7XG4gICAgICAgICAgcm93LnB1c2goY2hpbGQpO1xuICAgICAgICAgIHJvdy5hcmVhICs9IGNoaWxkLmFyZWE7XG4gICAgICAgICAgaWYgKGNoaWxkLnogIT0gbnVsbCkge1xuICAgICAgICAgICAgcG9zaXRpb24ocm93LCBjaGlsZC56ID8gcmVjdC5keCA6IHJlY3QuZHksIHJlY3QsICFyZW1haW5pbmcubGVuZ3RoKTtcbiAgICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goc3RpY2tpZnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3b3JzdChyb3csIHUpIHtcbiAgICAgIHZhciBzID0gcm93LmFyZWEsIHIsIHJtYXggPSAwLCBybWluID0gSW5maW5pdHksIGkgPSAtMSwgbiA9IHJvdy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIShyID0gcm93W2ldLmFyZWEpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKHIgPCBybWluKSBybWluID0gcjtcbiAgICAgICAgaWYgKHIgPiBybWF4KSBybWF4ID0gcjtcbiAgICAgIH1cbiAgICAgIHMgKj0gcztcbiAgICAgIHUgKj0gdTtcbiAgICAgIHJldHVybiBzID8gTWF0aC5tYXgodSAqIHJtYXggKiByYXRpbyAvIHMsIHMgLyAodSAqIHJtaW4gKiByYXRpbykpIDogSW5maW5pdHk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgZmx1c2gpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSByb3cubGVuZ3RoLCB4ID0gcmVjdC54LCB5ID0gcmVjdC55LCB2ID0gdSA/IHJvdW5kKHJvdy5hcmVhIC8gdSkgOiAwLCBvO1xuICAgICAgaWYgKHUgPT0gcmVjdC5keCkge1xuICAgICAgICBpZiAoZmx1c2ggfHwgdiA+IHJlY3QuZHkpIHYgPSByZWN0LmR5O1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIG8gPSByb3dbaV07XG4gICAgICAgICAgby54ID0geDtcbiAgICAgICAgICBvLnkgPSB5O1xuICAgICAgICAgIG8uZHkgPSB2O1xuICAgICAgICAgIHggKz0gby5keCA9IE1hdGgubWluKHJlY3QueCArIHJlY3QuZHggLSB4LCB2ID8gcm91bmQoby5hcmVhIC8gdikgOiAwKTtcbiAgICAgICAgfVxuICAgICAgICBvLnogPSB0cnVlO1xuICAgICAgICBvLmR4ICs9IHJlY3QueCArIHJlY3QuZHggLSB4O1xuICAgICAgICByZWN0LnkgKz0gdjtcbiAgICAgICAgcmVjdC5keSAtPSB2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZsdXNoIHx8IHYgPiByZWN0LmR4KSB2ID0gcmVjdC5keDtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBvID0gcm93W2ldO1xuICAgICAgICAgIG8ueCA9IHg7XG4gICAgICAgICAgby55ID0geTtcbiAgICAgICAgICBvLmR4ID0gdjtcbiAgICAgICAgICB5ICs9IG8uZHkgPSBNYXRoLm1pbihyZWN0LnkgKyByZWN0LmR5IC0geSwgdiA/IHJvdW5kKG8uYXJlYSAvIHYpIDogMCk7XG4gICAgICAgIH1cbiAgICAgICAgby56ID0gZmFsc2U7XG4gICAgICAgIG8uZHkgKz0gcmVjdC55ICsgcmVjdC5keSAtIHk7XG4gICAgICAgIHJlY3QueCArPSB2O1xuICAgICAgICByZWN0LmR4IC09IHY7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyZWVtYXAoZCkge1xuICAgICAgdmFyIG5vZGVzID0gc3RpY2tpZXMgfHwgaGllcmFyY2h5KGQpLCByb290ID0gbm9kZXNbMF07XG4gICAgICByb290LnggPSByb290LnkgPSAwO1xuICAgICAgaWYgKHJvb3QudmFsdWUpIHJvb3QuZHggPSBzaXplWzBdLCByb290LmR5ID0gc2l6ZVsxXTsgZWxzZSByb290LmR4ID0gcm9vdC5keSA9IDA7XG4gICAgICBpZiAoc3RpY2tpZXMpIGhpZXJhcmNoeS5yZXZhbHVlKHJvb3QpO1xuICAgICAgc2NhbGUoWyByb290IF0sIHJvb3QuZHggKiByb290LmR5IC8gcm9vdC52YWx1ZSk7XG4gICAgICAoc3RpY2tpZXMgPyBzdGlja2lmeSA6IHNxdWFyaWZ5KShyb290KTtcbiAgICAgIGlmIChzdGlja3kpIHN0aWNraWVzID0gbm9kZXM7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIHRyZWVtYXAuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0geDtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkZGluZztcbiAgICAgIGZ1bmN0aW9uIHBhZEZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdmFyIHAgPSB4LmNhbGwodHJlZW1hcCwgbm9kZSwgbm9kZS5kZXB0aCk7XG4gICAgICAgIHJldHVybiBwID09IG51bGwgPyBkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwobm9kZSkgOiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCB0eXBlb2YgcCA9PT0gXCJudW1iZXJcIiA/IFsgcCwgcCwgcCwgcCBdIDogcCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwYWRDb25zdGFudChub2RlKSB7XG4gICAgICAgIHJldHVybiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCB4KTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlO1xuICAgICAgcGFkID0gKHBhZGRpbmcgPSB4KSA9PSBudWxsID8gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsIDogKHR5cGUgPSB0eXBlb2YgeCkgPT09IFwiZnVuY3Rpb25cIiA/IHBhZEZ1bmN0aW9uIDogdHlwZSA9PT0gXCJudW1iZXJcIiA/ICh4ID0gWyB4LCB4LCB4LCB4IF0sIFxuICAgICAgcGFkQ29uc3RhbnQpIDogcGFkQ29uc3RhbnQ7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByb3VuZCAhPSBOdW1iZXI7XG4gICAgICByb3VuZCA9IHggPyBNYXRoLnJvdW5kIDogTnVtYmVyO1xuICAgICAgcmV0dXJuIHRyZWVtYXA7XG4gICAgfTtcbiAgICB0cmVlbWFwLnN0aWNreSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0aWNreTtcbiAgICAgIHN0aWNreSA9IHg7XG4gICAgICBzdGlja2llcyA9IG51bGw7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYXRpbztcbiAgICAgIHJhdGlvID0geDtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgdHJlZW1hcC5tb2RlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbW9kZTtcbiAgICAgIG1vZGUgPSB4ICsgXCJcIjtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQodHJlZW1hcCwgaGllcmFyY2h5KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsKG5vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogbm9kZS54LFxuICAgICAgeTogbm9kZS55LFxuICAgICAgZHg6IG5vZGUuZHgsXG4gICAgICBkeTogbm9kZS5keVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgcGFkZGluZykge1xuICAgIHZhciB4ID0gbm9kZS54ICsgcGFkZGluZ1szXSwgeSA9IG5vZGUueSArIHBhZGRpbmdbMF0sIGR4ID0gbm9kZS5keCAtIHBhZGRpbmdbMV0gLSBwYWRkaW5nWzNdLCBkeSA9IG5vZGUuZHkgLSBwYWRkaW5nWzBdIC0gcGFkZGluZ1syXTtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICB4ICs9IGR4IC8gMjtcbiAgICAgIGR4ID0gMDtcbiAgICB9XG4gICAgaWYgKGR5IDwgMCkge1xuICAgICAgeSArPSBkeSAvIDI7XG4gICAgICBkeSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeSxcbiAgICAgIGR4OiBkeCxcbiAgICAgIGR5OiBkeVxuICAgIH07XG4gIH1cbiAgZDMucmFuZG9tID0ge1xuICAgIG5vcm1hbDogZnVuY3Rpb24owrUsIM+DKSB7XG4gICAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAobiA8IDIpIM+DID0gMTtcbiAgICAgIGlmIChuIDwgMSkgwrUgPSAwO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgeCwgeSwgcjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHggPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG4gICAgICAgICAgeSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuICAgICAgICByZXR1cm4gwrUgKyDPgyAqIHggKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGxvZ05vcm1hbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmFuZG9tID0gZDMucmFuZG9tLm5vcm1hbC5hcHBseShkMywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbSgpKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBiYXRlczogZnVuY3Rpb24obSkge1xuICAgICAgdmFyIHJhbmRvbSA9IGQzLnJhbmRvbS5pcndpbkhhbGwobSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByYW5kb20oKSAvIG07XG4gICAgICB9O1xuICAgIH0sXG4gICAgaXJ3aW5IYWxsOiBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIHMgPSAwLCBqID0gMDsgaiA8IG07IGorKykgcyArPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICBkMy5zY2FsZSA9IHt9O1xuICBmdW5jdGlvbiBkM19zY2FsZUV4dGVudChkb21haW4pIHtcbiAgICB2YXIgc3RhcnQgPSBkb21haW5bMF0sIHN0b3AgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBzdGFydCA8IHN0b3AgPyBbIHN0YXJ0LCBzdG9wIF0gOiBbIHN0b3AsIHN0YXJ0IF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVSYW5nZShzY2FsZSkge1xuICAgIHJldHVybiBzY2FsZS5yYW5nZUV4dGVudCA/IHNjYWxlLnJhbmdlRXh0ZW50KCkgOiBkM19zY2FsZUV4dGVudChzY2FsZS5yYW5nZSgpKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9iaWxpbmVhcihkb21haW4sIHJhbmdlLCB1bmludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSkge1xuICAgIHZhciB1ID0gdW5pbnRlcnBvbGF0ZShkb21haW5bMF0sIGRvbWFpblsxXSksIGkgPSBpbnRlcnBvbGF0ZShyYW5nZVswXSwgcmFuZ2VbMV0pO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gaSh1KHgpKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX25pY2UoZG9tYWluLCBuaWNlKSB7XG4gICAgdmFyIGkwID0gMCwgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSwgeDAgPSBkb21haW5baTBdLCB4MSA9IGRvbWFpbltpMV0sIGR4O1xuICAgIGlmICh4MSA8IHgwKSB7XG4gICAgICBkeCA9IGkwLCBpMCA9IGkxLCBpMSA9IGR4O1xuICAgICAgZHggPSB4MCwgeDAgPSB4MSwgeDEgPSBkeDtcbiAgICB9XG4gICAgZG9tYWluW2kwXSA9IG5pY2UuZmxvb3IoeDApO1xuICAgIGRvbWFpbltpMV0gPSBuaWNlLmNlaWwoeDEpO1xuICAgIHJldHVybiBkb21haW47XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbmljZVN0ZXAoc3RlcCkge1xuICAgIHJldHVybiBzdGVwID8ge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoeCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoeCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH1cbiAgICB9IDogZDNfc2NhbGVfbmljZUlkZW50aXR5O1xuICB9XG4gIHZhciBkM19zY2FsZV9uaWNlSWRlbnRpdHkgPSB7XG4gICAgZmxvb3I6IGQzX2lkZW50aXR5LFxuICAgIGNlaWw6IGQzX2lkZW50aXR5XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3BvbHlsaW5lYXIoZG9tYWluLCByYW5nZSwgdW5pbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgdSA9IFtdLCBpID0gW10sIGogPSAwLCBrID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDE7XG4gICAgaWYgKGRvbWFpbltrXSA8IGRvbWFpblswXSkge1xuICAgICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgd2hpbGUgKCsraiA8PSBrKSB7XG4gICAgICB1LnB1c2godW5pbnRlcnBvbGF0ZShkb21haW5baiAtIDFdLCBkb21haW5bal0pKTtcbiAgICAgIGkucHVzaChpbnRlcnBvbGF0ZShyYW5nZVtqIC0gMV0sIHJhbmdlW2pdKSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICB2YXIgaiA9IGQzLmJpc2VjdChkb21haW4sIHgsIDEsIGspIC0gMTtcbiAgICAgIHJldHVybiBpW2pdKHVbal0oeCkpO1xuICAgIH07XG4gIH1cbiAgZDMuc2NhbGUubGluZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihbIDAsIDEgXSwgWyAwLCAxIF0sIGQzX2ludGVycG9sYXRlLCBmYWxzZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApIHtcbiAgICB2YXIgb3V0cHV0LCBpbnB1dDtcbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgdmFyIGxpbmVhciA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gZDNfc2NhbGVfcG9seWxpbmVhciA6IGQzX3NjYWxlX2JpbGluZWFyLCB1bmludGVycG9sYXRlID0gY2xhbXAgPyBkM191bmludGVycG9sYXRlQ2xhbXAgOiBkM191bmludGVycG9sYXRlTnVtYmVyO1xuICAgICAgb3V0cHV0ID0gbGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKTtcbiAgICAgIGlucHV0ID0gbGluZWFyKHJhbmdlLCBkb21haW4sIHVuaW50ZXJwb2xhdGUsIGQzX2ludGVycG9sYXRlKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIG91dHB1dCh4KTtcbiAgICB9XG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIGlucHV0KHkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0geC5tYXAoTnVtYmVyKTtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuICAgICAgcmFuZ2UgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gc2NhbGUucmFuZ2UoeCkuaW50ZXJwb2xhdGUoZDNfaW50ZXJwb2xhdGVSb3VuZCk7XG4gICAgfTtcbiAgICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsYW1wO1xuICAgICAgY2xhbXAgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGU7XG4gICAgICBpbnRlcnBvbGF0ZSA9IHg7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihtLCBmb3JtYXQpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrRm9ybWF0KGRvbWFpbiwgbSwgZm9ybWF0KTtcbiAgICB9O1xuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihtKSB7XG4gICAgICBkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApO1xuICAgIH07XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcikge1xuICAgIHJldHVybiBkMy5yZWJpbmQoc2NhbGUsIGxpbmVhciwgXCJyYW5nZVwiLCBcInJhbmdlUm91bmRcIiwgXCJpbnRlcnBvbGF0ZVwiLCBcImNsYW1wXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhck5pY2UoZG9tYWluLCBtKSB7XG4gICAgZDNfc2NhbGVfbmljZShkb21haW4sIGQzX3NjYWxlX25pY2VTdGVwKGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pWzJdKSk7XG4gICAgZDNfc2NhbGVfbmljZShkb21haW4sIGQzX3NjYWxlX25pY2VTdGVwKGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pWzJdKSk7XG4gICAgcmV0dXJuIGRvbWFpbjtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKSB7XG4gICAgaWYgKG0gPT0gbnVsbCkgbSA9IDEwO1xuICAgIHZhciBleHRlbnQgPSBkM19zY2FsZUV4dGVudChkb21haW4pLCBzcGFuID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdLCBzdGVwID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3BhbiAvIG0pIC8gTWF0aC5MTjEwKSksIGVyciA9IG0gLyBzcGFuICogc3RlcDtcbiAgICBpZiAoZXJyIDw9IC4xNSkgc3RlcCAqPSAxMDsgZWxzZSBpZiAoZXJyIDw9IC4zNSkgc3RlcCAqPSA1OyBlbHNlIGlmIChlcnIgPD0gLjc1KSBzdGVwICo9IDI7XG4gICAgZXh0ZW50WzBdID0gTWF0aC5jZWlsKGV4dGVudFswXSAvIHN0ZXApICogc3RlcDtcbiAgICBleHRlbnRbMV0gPSBNYXRoLmZsb29yKGV4dGVudFsxXSAvIHN0ZXApICogc3RlcCArIHN0ZXAgKiAuNTtcbiAgICBleHRlbnRbMl0gPSBzdGVwO1xuICAgIHJldHVybiBleHRlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKSB7XG4gICAgcmV0dXJuIGQzLnJhbmdlLmFwcGx5KGQzLCBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCkge1xuICAgIHZhciByYW5nZSA9IGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pO1xuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIHZhciBtYXRjaCA9IGQzX2Zvcm1hdF9yZS5leGVjKGZvcm1hdCk7XG4gICAgICBtYXRjaC5zaGlmdCgpO1xuICAgICAgaWYgKG1hdGNoWzhdID09PSBcInNcIikge1xuICAgICAgICB2YXIgcHJlZml4ID0gZDMuZm9ybWF0UHJlZml4KE1hdGgubWF4KGFicyhyYW5nZVswXSksIGFicyhyYW5nZVsxXSkpKTtcbiAgICAgICAgaWYgKCFtYXRjaFs3XSkgbWF0Y2hbN10gPSBcIi5cIiArIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbihwcmVmaXguc2NhbGUocmFuZ2VbMl0pKTtcbiAgICAgICAgbWF0Y2hbOF0gPSBcImZcIjtcbiAgICAgICAgZm9ybWF0ID0gZDMuZm9ybWF0KG1hdGNoLmpvaW4oXCJcIikpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBmb3JtYXQocHJlZml4LnNjYWxlKGQpKSArIHByZWZpeC5zeW1ib2w7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoIW1hdGNoWzddKSBtYXRjaFs3XSA9IFwiLlwiICsgZDNfc2NhbGVfbGluZWFyRm9ybWF0UHJlY2lzaW9uKG1hdGNoWzhdLCByYW5nZSk7XG4gICAgICBmb3JtYXQgPSBtYXRjaC5qb2luKFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtYXQgPSBcIiwuXCIgKyBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24ocmFuZ2VbMl0pICsgXCJmXCI7XG4gICAgfVxuICAgIHJldHVybiBkMy5mb3JtYXQoZm9ybWF0KTtcbiAgfVxuICB2YXIgZDNfc2NhbGVfbGluZWFyRm9ybWF0U2lnbmlmaWNhbnQgPSB7XG4gICAgczogMSxcbiAgICBnOiAxLFxuICAgIHA6IDEsXG4gICAgcjogMSxcbiAgICBlOiAxXG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbih2YWx1ZSkge1xuICAgIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMTAgKyAuMDEpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbih0eXBlLCByYW5nZSkge1xuICAgIHZhciBwID0gZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKHJhbmdlWzJdKTtcbiAgICByZXR1cm4gdHlwZSBpbiBkM19zY2FsZV9saW5lYXJGb3JtYXRTaWduaWZpY2FudCA/IE1hdGguYWJzKHAgLSBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24oTWF0aC5tYXgoYWJzKHJhbmdlWzBdKSwgYWJzKHJhbmdlWzFdKSkpKSArICsodHlwZSAhPT0gXCJlXCIpIDogcCAtICh0eXBlID09PSBcIiVcIikgKiAyO1xuICB9XG4gIGQzLnNjYWxlLmxvZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9sb2coZDMuc2NhbGUubGluZWFyKCkuZG9tYWluKFsgMCwgMSBdKSwgMTAsIHRydWUsIFsgMSwgMTAgXSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xvZyhsaW5lYXIsIGJhc2UsIHBvc2l0aXZlLCBkb21haW4pIHtcbiAgICBmdW5jdGlvbiBsb2coeCkge1xuICAgICAgcmV0dXJuIChwb3NpdGl2ZSA/IE1hdGgubG9nKHggPCAwID8gMCA6IHgpIDogLU1hdGgubG9nKHggPiAwID8gMCA6IC14KSkgLyBNYXRoLmxvZyhiYXNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG93KHgpIHtcbiAgICAgIHJldHVybiBwb3NpdGl2ZSA/IE1hdGgucG93KGJhc2UsIHgpIDogLU1hdGgucG93KGJhc2UsIC14KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIGxpbmVhcihsb2coeCkpO1xuICAgIH1cbiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gcG93KGxpbmVhci5pbnZlcnQoeCkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgcG9zaXRpdmUgPSB4WzBdID49IDA7XG4gICAgICBsaW5lYXIuZG9tYWluKChkb21haW4gPSB4Lm1hcChOdW1iZXIpKS5tYXAobG9nKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYmFzZTtcbiAgICAgIGJhc2UgPSArXztcbiAgICAgIGxpbmVhci5kb21haW4oZG9tYWluLm1hcChsb2cpKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBuaWNlZCA9IGQzX3NjYWxlX25pY2UoZG9tYWluLm1hcChsb2cpLCBwb3NpdGl2ZSA/IE1hdGggOiBkM19zY2FsZV9sb2dOaWNlTmVnYXRpdmUpO1xuICAgICAgbGluZWFyLmRvbWFpbihuaWNlZCk7XG4gICAgICBkb21haW4gPSBuaWNlZC5tYXAocG93KTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSwgdGlja3MgPSBbXSwgdSA9IGV4dGVudFswXSwgdiA9IGV4dGVudFsxXSwgaSA9IE1hdGguZmxvb3IobG9nKHUpKSwgaiA9IE1hdGguY2VpbChsb2codikpLCBuID0gYmFzZSAlIDEgPyAyIDogYmFzZTtcbiAgICAgIGlmIChpc0Zpbml0ZShqIC0gaSkpIHtcbiAgICAgICAgaWYgKHBvc2l0aXZlKSB7XG4gICAgICAgICAgZm9yICg7aSA8IGo7IGkrKykgZm9yICh2YXIgayA9IDE7IGsgPCBuOyBrKyspIHRpY2tzLnB1c2gocG93KGkpICogayk7XG4gICAgICAgICAgdGlja3MucHVzaChwb3coaSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tzLnB1c2gocG93KGkpKTtcbiAgICAgICAgICBmb3IgKDtpKysgPCBqOyApIGZvciAodmFyIGsgPSBuIC0gMTsgayA+IDA7IGstLSkgdGlja3MucHVzaChwb3coaSkgKiBrKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyB0aWNrc1tpXSA8IHU7IGkrKykge31cbiAgICAgICAgZm9yIChqID0gdGlja3MubGVuZ3RoOyB0aWNrc1tqIC0gMV0gPiB2OyBqLS0pIHt9XG4gICAgICAgIHRpY2tzID0gdGlja3Muc2xpY2UoaSwgaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGlja3M7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obiwgZm9ybWF0KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkM19zY2FsZV9sb2dGb3JtYXQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGZvcm1hdCA9IGQzX3NjYWxlX2xvZ0Zvcm1hdDsgZWxzZSBpZiAodHlwZW9mIGZvcm1hdCAhPT0gXCJmdW5jdGlvblwiKSBmb3JtYXQgPSBkMy5mb3JtYXQoZm9ybWF0KTtcbiAgICAgIHZhciBrID0gTWF0aC5tYXgoMSwgYmFzZSAqIG4gLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgaSA9IGQgLyBwb3coTWF0aC5yb3VuZChsb2coZCkpKTtcbiAgICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIC41KSBpICo9IGJhc2U7XG4gICAgICAgIHJldHVybiBpIDw9IGsgPyBmb3JtYXQoZCkgOiBcIlwiO1xuICAgICAgfTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9sb2cobGluZWFyLmNvcHkoKSwgYmFzZSwgcG9zaXRpdmUsIGRvbWFpbik7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpO1xuICB9XG4gIHZhciBkM19zY2FsZV9sb2dGb3JtYXQgPSBkMy5mb3JtYXQoXCIuMGVcIiksIGQzX3NjYWxlX2xvZ05pY2VOZWdhdGl2ZSA9IHtcbiAgICBmbG9vcjogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmNlaWwoLXgpO1xuICAgIH0sXG4gICAgY2VpbDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmZsb29yKC14KTtcbiAgICB9XG4gIH07XG4gIGQzLnNjYWxlLnBvdyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9wb3coZDMuc2NhbGUubGluZWFyKCksIDEsIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfcG93KGxpbmVhciwgZXhwb25lbnQsIGRvbWFpbikge1xuICAgIHZhciBwb3dwID0gZDNfc2NhbGVfcG93UG93KGV4cG9uZW50KSwgcG93YiA9IGQzX3NjYWxlX3Bvd1BvdygxIC8gZXhwb25lbnQpO1xuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIocG93cCh4KSk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBwb3diKGxpbmVhci5pbnZlcnQoeCkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgbGluZWFyLmRvbWFpbigoZG9tYWluID0geC5tYXAoTnVtYmVyKSkubWFwKHBvd3ApKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG4gICAgfTtcbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSkpO1xuICAgIH07XG4gICAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBleHBvbmVudDtcbiAgICAgIHBvd3AgPSBkM19zY2FsZV9wb3dQb3coZXhwb25lbnQgPSB4KTtcbiAgICAgIHBvd2IgPSBkM19zY2FsZV9wb3dQb3coMSAvIGV4cG9uZW50KTtcbiAgICAgIGxpbmVhci5kb21haW4oZG9tYWluLm1hcChwb3dwKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcG93KGxpbmVhci5jb3B5KCksIGV4cG9uZW50LCBkb21haW4pO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9wb3dQb3coZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGUpIDogTWF0aC5wb3coeCwgZSk7XG4gICAgfTtcbiAgfVxuICBkMy5zY2FsZS5zcXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnNjYWxlLnBvdygpLmV4cG9uZW50KC41KTtcbiAgfTtcbiAgZDMuc2NhbGUub3JkaW5hbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9vcmRpbmFsKFtdLCB7XG4gICAgICB0OiBcInJhbmdlXCIsXG4gICAgICBhOiBbIFtdIF1cbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfb3JkaW5hbChkb21haW4sIHJhbmdlcikge1xuICAgIHZhciBpbmRleCwgcmFuZ2UsIHJhbmdlQmFuZDtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gcmFuZ2VbKChpbmRleC5nZXQoeCkgfHwgKHJhbmdlci50ID09PSBcInJhbmdlXCIgPyBpbmRleC5zZXQoeCwgZG9tYWluLnB1c2goeCkpIDogTmFOKSkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0ZXBzKHN0YXJ0LCBzdGVwKSB7XG4gICAgICByZXR1cm4gZDMucmFuZ2UoZG9tYWluLmxlbmd0aCkubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0gW107XG4gICAgICBpbmRleCA9IG5ldyBkM19NYXAoKTtcbiAgICAgIHZhciBpID0gLTEsIG4gPSB4Lmxlbmd0aCwgeGk7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoeGkgPSB4W2ldKSkgaW5kZXguc2V0KHhpLCBkb21haW4ucHVzaCh4aSkpO1xuICAgICAgcmV0dXJuIHNjYWxlW3Jhbmdlci50XS5hcHBseShzY2FsZSwgcmFuZ2VyLmEpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJhbmdlQmFuZCA9IDA7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VQb2ludHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuICAgICAgdmFyIHN0YXJ0ID0geFswXSwgc3RvcCA9IHhbMV0sIHN0ZXAgPSBkb21haW4ubGVuZ3RoIDwgMiA/IChzdGFydCA9IChzdGFydCArIHN0b3ApIC8gMiwgXG4gICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZyk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgc3RlcCAqIHBhZGRpbmcgLyAyLCBzdGVwKTtcbiAgICAgIHJhbmdlQmFuZCA9IDA7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VQb2ludHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VSb3VuZFBvaW50cyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICB2YXIgc3RhcnQgPSB4WzBdLCBzdG9wID0geFsxXSwgc3RlcCA9IGRvbWFpbi5sZW5ndGggPCAyID8gKHN0YXJ0ID0gc3RvcCA9IE1hdGgucm91bmQoKHN0YXJ0ICsgc3RvcCkgLyAyKSwgXG4gICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZykgfCAwO1xuICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIE1hdGgucm91bmQoc3RlcCAqIHBhZGRpbmcgLyAyICsgKHN0b3AgLSBzdGFydCAtIChkb21haW4ubGVuZ3RoIC0gMSArIHBhZGRpbmcpICogc3RlcCkgLyAyKSwgc3RlcCk7XG4gICAgICByYW5nZUJhbmQgPSAwO1xuICAgICAgcmFuZ2VyID0ge1xuICAgICAgICB0OiBcInJhbmdlUm91bmRQb2ludHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VCYW5kcyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcsIG91dGVyUGFkZGluZykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwYWRkaW5nID0gMDtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgb3V0ZXJQYWRkaW5nID0gcGFkZGluZztcbiAgICAgIHZhciByZXZlcnNlID0geFsxXSA8IHhbMF0sIHN0YXJ0ID0geFtyZXZlcnNlIC0gMF0sIHN0b3AgPSB4WzEgLSByZXZlcnNlXSwgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSBwYWRkaW5nICsgMiAqIG91dGVyUGFkZGluZyk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgc3RlcCAqIG91dGVyUGFkZGluZywgc3RlcCk7XG4gICAgICBpZiAocmV2ZXJzZSkgcmFuZ2UucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2VCYW5kID0gc3RlcCAqICgxIC0gcGFkZGluZyk7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VCYW5kc1wiLFxuICAgICAgICBhOiBhcmd1bWVudHNcbiAgICAgIH07XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZVJvdW5kQmFuZHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nLCBvdXRlclBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIG91dGVyUGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICB2YXIgcmV2ZXJzZSA9IHhbMV0gPCB4WzBdLCBzdGFydCA9IHhbcmV2ZXJzZSAtIDBdLCBzdG9wID0geFsxIC0gcmV2ZXJzZV0sIHN0ZXAgPSBNYXRoLmZsb29yKChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSBwYWRkaW5nICsgMiAqIG91dGVyUGFkZGluZykpO1xuICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIE1hdGgucm91bmQoKHN0b3AgLSBzdGFydCAtIChkb21haW4ubGVuZ3RoIC0gcGFkZGluZykgKiBzdGVwKSAvIDIpLCBzdGVwKTtcbiAgICAgIGlmIChyZXZlcnNlKSByYW5nZS5yZXZlcnNlKCk7XG4gICAgICByYW5nZUJhbmQgPSBNYXRoLnJvdW5kKHN0ZXAgKiAoMSAtIHBhZGRpbmcpKTtcbiAgICAgIHJhbmdlciA9IHtcbiAgICAgICAgdDogXCJyYW5nZVJvdW5kQmFuZHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VCYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmFuZ2VCYW5kO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VFeHRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZUV4dGVudChyYW5nZXIuYVswXSk7XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfb3JkaW5hbChkb21haW4sIHJhbmdlcik7XG4gICAgfTtcbiAgICByZXR1cm4gc2NhbGUuZG9tYWluKGRvbWFpbik7XG4gIH1cbiAgZDMuc2NhbGUuY2F0ZWdvcnkxMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkxMCk7XG4gIH07XG4gIGQzLnNjYWxlLmNhdGVnb3J5MjAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MjApO1xuICB9O1xuICBkMy5zY2FsZS5jYXRlZ29yeTIwYiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMGIpO1xuICB9O1xuICBkMy5zY2FsZS5jYXRlZ29yeTIwYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMGMpO1xuICB9O1xuICB2YXIgZDNfY2F0ZWdvcnkxMCA9IFsgMjA2MjI2MCwgMTY3NDQyMDYsIDI5MjQ1ODgsIDE0MDM0NzI4LCA5NzI1ODg1LCA5MTk3MTMxLCAxNDkwNzMzMCwgODM1NTcxMSwgMTIzNjkxODYsIDE1NTYxNzUgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgdmFyIGQzX2NhdGVnb3J5MjAgPSBbIDIwNjIyNjAsIDExNDU0NDQwLCAxNjc0NDIwNiwgMTY3NTk2NzIsIDI5MjQ1ODgsIDEwMDE4Njk4LCAxNDAzNDcyOCwgMTY3NTA3NDIsIDk3MjU4ODUsIDEyOTU1ODYxLCA5MTk3MTMxLCAxMjg4NTE0MCwgMTQ5MDczMzAsIDE2MjM0MTk0LCA4MzU1NzExLCAxMzA5MjgwNywgMTIzNjkxODYsIDE0NDA4NTg5LCAxNTU2MTc1LCAxMDQxMDcyNSBdLm1hcChkM19yZ2JTdHJpbmcpO1xuICB2YXIgZDNfY2F0ZWdvcnkyMGIgPSBbIDM3NTA3NzcsIDUzOTU2MTksIDcwNDA3MTksIDEwMjY0Mjg2LCA2NTE5MDk3LCA5MjE2NTk0LCAxMTkxNTExNSwgMTM1NTY2MzYsIDkyMDI5OTMsIDEyNDI2ODA5LCAxNTE4NjUxNCwgMTUxOTA5MzIsIDg2NjYxNjksIDExMzU2NDkwLCAxNDA0OTY0MywgMTUxNzczNzIsIDgwNzc2ODMsIDEwODM0MzI0LCAxMzUyODUwOSwgMTQ1ODk2NTQgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgdmFyIGQzX2NhdGVnb3J5MjBjID0gWyAzMjQ0NzMzLCA3MDU3MTEwLCAxMDQwNjYyNSwgMTMwMzI0MzEsIDE1MDk1MDUzLCAxNjYxNjc2NCwgMTY2MjUyNTksIDE2NjM0MDE4LCAzMjUzMDc2LCA3NjUyNDcwLCAxMDYwNzAwMywgMTMxMDE1MDQsIDc2OTUyODEsIDEwMzk0MzEyLCAxMjM2OTM3MiwgMTQzNDI4OTEsIDY1MTM1MDcsIDk4Njg5NTAsIDEyNDM0ODc3LCAxNDI3NzA4MSBdLm1hcChkM19yZ2JTdHJpbmcpO1xuICBkMy5zY2FsZS5xdWFudGlsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9xdWFudGlsZShbXSwgW10pO1xuICB9O1xuICBmdW5jdGlvbiBkM19zY2FsZV9xdWFudGlsZShkb21haW4sIHJhbmdlKSB7XG4gICAgdmFyIHRocmVzaG9sZHM7XG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIHZhciBrID0gMCwgcSA9IHJhbmdlLmxlbmd0aDtcbiAgICAgIHRocmVzaG9sZHMgPSBbXTtcbiAgICAgIHdoaWxlICgrK2sgPCBxKSB0aHJlc2hvbGRzW2sgLSAxXSA9IGQzLnF1YW50aWxlKGRvbWFpbiwgayAvIHEpO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtkMy5iaXNlY3QodGhyZXNob2xkcywgeCldO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG4gICAgICBkb21haW4gPSB4Lm1hcChkM19udW1iZXIpLmZpbHRlcihkM19udW1lcmljKS5zb3J0KGQzX2FzY2VuZGluZyk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aHJlc2hvbGRzO1xuICAgIH07XG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICByZXR1cm4geSA8IDAgPyBbIE5hTiwgTmFOIF0gOiBbIHkgPiAwID8gdGhyZXNob2xkc1t5IC0gMV0gOiBkb21haW5bMF0sIHkgPCB0aHJlc2hvbGRzLmxlbmd0aCA/IHRocmVzaG9sZHNbeV0gOiBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdIF07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcXVhbnRpbGUoZG9tYWluLCByYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9XG4gIGQzLnNjYWxlLnF1YW50aXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aXplKDAsIDEsIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfcXVhbnRpemUoeDAsIHgxLCByYW5nZSkge1xuICAgIHZhciBreCwgaTtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4oaSwgTWF0aC5mbG9vcihreCAqICh4IC0geDApKSkpXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIGt4ID0gcmFuZ2UubGVuZ3RoIC8gKHgxIC0geDApO1xuICAgICAgaSA9IHJhbmdlLmxlbmd0aCAtIDE7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgeDAsIHgxIF07XG4gICAgICB4MCA9ICt4WzBdO1xuICAgICAgeDEgPSAreFt4Lmxlbmd0aCAtIDFdO1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG4gICAgICByYW5nZSA9IHg7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICB5ID0geSA8IDAgPyBOYU4gOiB5IC8ga3ggKyB4MDtcbiAgICAgIHJldHVybiBbIHksIHkgKyAxIC8ga3ggXTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9xdWFudGl6ZSh4MCwgeDEsIHJhbmdlKTtcbiAgICB9O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cbiAgZDMuc2NhbGUudGhyZXNob2xkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX3RocmVzaG9sZChbIC41IF0sIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfdGhyZXNob2xkKGRvbWFpbiwgcmFuZ2UpIHtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbZDMuYmlzZWN0KGRvbWFpbiwgeCldO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG4gICAgICBkb21haW4gPSBfO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0gXztcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgICAgcmV0dXJuIFsgZG9tYWluW3kgLSAxXSwgZG9tYWluW3ldIF07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfdGhyZXNob2xkKGRvbWFpbiwgcmFuZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG4gIGQzLnNjYWxlLmlkZW50aXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX2lkZW50aXR5KFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfaWRlbnRpdHkoZG9tYWluKSB7XG4gICAgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgICAgcmV0dXJuICt4O1xuICAgIH1cbiAgICBpZGVudGl0eS5pbnZlcnQgPSBpZGVudGl0eTtcbiAgICBpZGVudGl0eS5kb21haW4gPSBpZGVudGl0eS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcbiAgICAgIGRvbWFpbiA9IHgubWFwKGlkZW50aXR5KTtcbiAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9O1xuICAgIGlkZW50aXR5LnRpY2tzID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG4gICAgfTtcbiAgICBpZGVudGl0eS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG4gICAgfTtcbiAgICBpZGVudGl0eS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfaWRlbnRpdHkoZG9tYWluKTtcbiAgICB9O1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBkMy5zdmcgPSB7fTtcbiAgZnVuY3Rpb24gZDNfemVybygpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBkMy5zdmcuYXJjID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlubmVyUmFkaXVzID0gZDNfc3ZnX2FyY0lubmVyUmFkaXVzLCBvdXRlclJhZGl1cyA9IGQzX3N2Z19hcmNPdXRlclJhZGl1cywgY29ybmVyUmFkaXVzID0gZDNfemVybywgcGFkUmFkaXVzID0gZDNfc3ZnX2FyY0F1dG8sIHN0YXJ0QW5nbGUgPSBkM19zdmdfYXJjU3RhcnRBbmdsZSwgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGUsIHBhZEFuZ2xlID0gZDNfc3ZnX2FyY1BhZEFuZ2xlO1xuICAgIGZ1bmN0aW9uIGFyYygpIHtcbiAgICAgIHZhciByMCA9IE1hdGgubWF4KDAsICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgcjEgPSBNYXRoLm1heCgwLCArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZs+ALCBhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmz4AsIGRhID0gTWF0aC5hYnMoYTEgLSBhMCksIGN3ID0gYTAgPiBhMSA/IDAgOiAxO1xuICAgICAgaWYgKHIxIDwgcjApIHJjID0gcjEsIHIxID0gcjAsIHIwID0gcmM7XG4gICAgICBpZiAoZGEgPj0gz4TOtSkgcmV0dXJuIGNpcmNsZVNlZ21lbnQocjEsIGN3KSArIChyMCA/IGNpcmNsZVNlZ21lbnQocjAsIDEgLSBjdykgOiBcIlwiKSArIFwiWlwiO1xuICAgICAgdmFyIHJjLCBjciwgcnAsIGFwLCBwMCA9IDAsIHAxID0gMCwgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCBwYXRoID0gW107XG4gICAgICBpZiAoYXAgPSAoK3BhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMCkgLyAyKSB7XG4gICAgICAgIHJwID0gcGFkUmFkaXVzID09PSBkM19zdmdfYXJjQXV0byA/IE1hdGguc3FydChyMCAqIHIwICsgcjEgKiByMSkgOiArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICghY3cpIHAxICo9IC0xO1xuICAgICAgICBpZiAocjEpIHAxID0gZDNfYXNpbihycCAvIHIxICogTWF0aC5zaW4oYXApKTtcbiAgICAgICAgaWYgKHIwKSBwMCA9IGQzX2FzaW4ocnAgLyByMCAqIE1hdGguc2luKGFwKSk7XG4gICAgICB9XG4gICAgICBpZiAocjEpIHtcbiAgICAgICAgeDAgPSByMSAqIE1hdGguY29zKGEwICsgcDEpO1xuICAgICAgICB5MCA9IHIxICogTWF0aC5zaW4oYTAgKyBwMSk7XG4gICAgICAgIHgxID0gcjEgKiBNYXRoLmNvcyhhMSAtIHAxKTtcbiAgICAgICAgeTEgPSByMSAqIE1hdGguc2luKGExIC0gcDEpO1xuICAgICAgICB2YXIgbDEgPSBNYXRoLmFicyhhMSAtIGEwIC0gMiAqIHAxKSA8PSDPgCA/IDAgOiAxO1xuICAgICAgICBpZiAocDEgJiYgZDNfc3ZnX2FyY1N3ZWVwKHgwLCB5MCwgeDEsIHkxKSA9PT0gY3cgXiBsMSkge1xuICAgICAgICAgIHZhciBoMSA9IChhMCArIGExKSAvIDI7XG4gICAgICAgICAgeDAgPSByMSAqIE1hdGguY29zKGgxKTtcbiAgICAgICAgICB5MCA9IHIxICogTWF0aC5zaW4oaDEpO1xuICAgICAgICAgIHgxID0geTEgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MCA9IHkwID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChyMCkge1xuICAgICAgICB4MiA9IHIwICogTWF0aC5jb3MoYTEgLSBwMCk7XG4gICAgICAgIHkyID0gcjAgKiBNYXRoLnNpbihhMSAtIHAwKTtcbiAgICAgICAgeDMgPSByMCAqIE1hdGguY29zKGEwICsgcDApO1xuICAgICAgICB5MyA9IHIwICogTWF0aC5zaW4oYTAgKyBwMCk7XG4gICAgICAgIHZhciBsMCA9IE1hdGguYWJzKGEwIC0gYTEgKyAyICogcDApIDw9IM+AID8gMCA6IDE7XG4gICAgICAgIGlmIChwMCAmJiBkM19zdmdfYXJjU3dlZXAoeDIsIHkyLCB4MywgeTMpID09PSAxIC0gY3cgXiBsMCkge1xuICAgICAgICAgIHZhciBoMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgICAgeDIgPSByMCAqIE1hdGguY29zKGgwKTtcbiAgICAgICAgICB5MiA9IHIwICogTWF0aC5zaW4oaDApO1xuICAgICAgICAgIHgzID0geTMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHkyID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChkYSA+IM61ICYmIChyYyA9IE1hdGgubWluKE1hdGguYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSkgPiAuMDAxKSB7XG4gICAgICAgIGNyID0gcjAgPCByMSBeIGN3ID8gMCA6IDE7XG4gICAgICAgIHZhciByYzEgPSByYywgcmMwID0gcmM7XG4gICAgICAgIGlmIChkYSA8IM+AKSB7XG4gICAgICAgICAgdmFyIG9jID0geDMgPT0gbnVsbCA/IFsgeDIsIHkyIF0gOiB4MSA9PSBudWxsID8gWyB4MCwgeTAgXSA6IGQzX2dlb21fcG9seWdvbkludGVyc2VjdChbIHgwLCB5MCBdLCBbIHgzLCB5MyBdLCBbIHgxLCB5MSBdLCBbIHgyLCB5MiBdKSwgYXggPSB4MCAtIG9jWzBdLCBheSA9IHkwIC0gb2NbMV0sIGJ4ID0geDEgLSBvY1swXSwgYnkgPSB5MSAtIG9jWzFdLCBrYyA9IDEgLyBNYXRoLnNpbihNYXRoLmFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChNYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkpICogTWF0aC5zcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksIGxjID0gTWF0aC5zcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICByYzAgPSBNYXRoLm1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgIHJjMSA9IE1hdGgubWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHgxICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgdDMwID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKHgzID09IG51bGwgPyBbIHgyLCB5MiBdIDogWyB4MywgeTMgXSwgWyB4MCwgeTAgXSwgcjEsIHJjMSwgY3cpLCB0MTIgPSBkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMoWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICAgIGlmIChyYyA9PT0gcmMxKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQzMFsxXSwgXCJBXCIsIHIxLCBcIixcIiwgcjEsIFwiIDAgXCIsIDEgLSBjdyBeIGQzX3N2Z19hcmNTd2VlcCh0MzBbMV1bMF0sIHQzMFsxXVsxXSwgdDEyWzFdWzBdLCB0MTJbMV1bMV0pLCBcIixcIiwgY3csIFwiIFwiLCB0MTJbMV0sIFwiQVwiLCByYzEsIFwiLFwiLCByYzEsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MTJbMF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAxLFwiLCBjciwgXCIgXCIsIHQxMlswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGgucHVzaChcIk1cIiwgeDAsIFwiLFwiLCB5MCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHgzICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgdDAzID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKFsgeDAsIHkwIF0sIFsgeDMsIHkzIF0sIHIwLCAtcmMwLCBjdyksIHQyMSA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhbIHgyLCB5MiBdLCB4MSA9PSBudWxsID8gWyB4MCwgeTAgXSA6IFsgeDEsIHkxIF0sIHIwLCAtcmMwLCBjdyk7XG4gICAgICAgICAgaWYgKHJjID09PSByYzApIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgdDIxWzBdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDIxWzFdLCBcIkFcIiwgcjAsIFwiLFwiLCByMCwgXCIgMCBcIiwgY3cgXiBkM19zdmdfYXJjU3dlZXAodDIxWzFdWzBdLCB0MjFbMV1bMV0sIHQwM1sxXVswXSwgdDAzWzFdWzFdKSwgXCIsXCIsIDEgLSBjdywgXCIgXCIsIHQwM1sxXSwgXCJBXCIsIHJjMCwgXCIsXCIsIHJjMCwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQwM1swXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgdDIxWzBdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDAzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB4MiwgXCIsXCIsIHkyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0aC5wdXNoKFwiTVwiLCB4MCwgXCIsXCIsIHkwKTtcbiAgICAgICAgaWYgKHgxICE9IG51bGwpIHBhdGgucHVzaChcIkFcIiwgcjEsIFwiLFwiLCByMSwgXCIgMCBcIiwgbDEsIFwiLFwiLCBjdywgXCIgXCIsIHgxLCBcIixcIiwgeTEpO1xuICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHgyLCBcIixcIiwgeTIpO1xuICAgICAgICBpZiAoeDMgIT0gbnVsbCkgcGF0aC5wdXNoKFwiQVwiLCByMCwgXCIsXCIsIHIwLCBcIiAwIFwiLCBsMCwgXCIsXCIsIDEgLSBjdywgXCIgXCIsIHgzLCBcIixcIiwgeTMpO1xuICAgICAgfVxuICAgICAgcGF0aC5wdXNoKFwiWlwiKTtcbiAgICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNpcmNsZVNlZ21lbnQocjEsIGN3KSB7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIHIxICsgXCJBXCIgKyByMSArIFwiLFwiICsgcjEgKyBcIiAwIDEsXCIgKyBjdyArIFwiIDAsXCIgKyAtcjEgKyBcIkFcIiArIHIxICsgXCIsXCIgKyByMSArIFwiIDAgMSxcIiArIGN3ICsgXCIgMCxcIiArIHIxO1xuICAgIH1cbiAgICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbm5lclJhZGl1cztcbiAgICAgIGlubmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMub3V0ZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvdXRlclJhZGl1cztcbiAgICAgIG91dGVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29ybmVyUmFkaXVzO1xuICAgICAgY29ybmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkUmFkaXVzO1xuICAgICAgcGFkUmFkaXVzID0gdiA9PSBkM19zdmdfYXJjQXV0byA/IGQzX3N2Z19hcmNBdXRvIDogZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG4gICAgICBzdGFydEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcbiAgICAgIGVuZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcbiAgICAgIHBhZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiwgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiAtIGhhbGbPgDtcbiAgICAgIHJldHVybiBbIE1hdGguY29zKGEpICogciwgTWF0aC5zaW4oYSkgKiByIF07XG4gICAgfTtcbiAgICByZXR1cm4gYXJjO1xuICB9O1xuICB2YXIgZDNfc3ZnX2FyY0F1dG8gPSBcImF1dG9cIjtcbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY0lubmVyUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gZC5pbm5lclJhZGl1cztcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfYXJjT3V0ZXJSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLm91dGVyUmFkaXVzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNTdGFydEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNFbmRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQuZW5kQW5nbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY1BhZEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNTd2VlcCh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHJldHVybiAoeDAgLSB4MSkgKiB5MCAtICh5MCAtIHkxKSAqIHgwID4gMCA/IDAgOiAxO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhwMCwgcDEsIHIxLCByYywgY3cpIHtcbiAgICB2YXIgeDAxID0gcDBbMF0gLSBwMVswXSwgeTAxID0gcDBbMV0gLSBwMVsxXSwgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBNYXRoLnNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSwgb3ggPSBsbyAqIHkwMSwgb3kgPSAtbG8gKiB4MDEsIHgxID0gcDBbMF0gKyBveCwgeTEgPSBwMFsxXSArIG95LCB4MiA9IHAxWzBdICsgb3gsIHkyID0gcDFbMV0gKyBveSwgeDMgPSAoeDEgKyB4MikgLyAyLCB5MyA9ICh5MSArIHkyKSAvIDIsIGR4ID0geDIgLSB4MSwgZHkgPSB5MiAtIHkxLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5LCByID0gcjEgLSByYywgRCA9IHgxICogeTIgLSB4MiAqIHkxLCBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLCBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLCBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMiwgZHgwID0gY3gwIC0geDMsIGR5MCA9IGN5MCAtIHkzLCBkeDEgPSBjeDEgLSB4MywgZHkxID0gY3kxIC0geTM7XG4gICAgaWYgKGR4MCAqIGR4MCArIGR5MCAqIGR5MCA+IGR4MSAqIGR4MSArIGR5MSAqIGR5MSkgY3gwID0gY3gxLCBjeTAgPSBjeTE7XG4gICAgcmV0dXJuIFsgWyBjeDAgLSBveCwgY3kwIC0gb3kgXSwgWyBjeDAgKiByMSAvIHIsIGN5MCAqIHIxIC8gciBdIF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmUocHJvamVjdGlvbikge1xuICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WSwgZGVmaW5lZCA9IGQzX3RydWUsIGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVMaW5lYXIsIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUua2V5LCB0ZW5zaW9uID0gLjc7XG4gICAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgICB2YXIgc2VnbWVudHMgPSBbXSwgcG9pbnRzID0gW10sIGkgPSAtMSwgbiA9IGRhdGEubGVuZ3RoLCBkLCBmeCA9IGQzX2Z1bmN0b3IoeCksIGZ5ID0gZDNfZnVuY3Rvcih5KTtcbiAgICAgIGZ1bmN0aW9uIHNlZ21lbnQoKSB7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goXCJNXCIsIGludGVycG9sYXRlKHByb2plY3Rpb24ocG9pbnRzKSwgdGVuc2lvbikpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcbiAgICAgICAgICBwb2ludHMucHVzaChbICtmeC5jYWxsKHRoaXMsIGQsIGkpLCArZnkuY2FsbCh0aGlzLCBkLCBpKSBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgc2VnbWVudCgpO1xuICAgICAgICAgIHBvaW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCkgc2VnbWVudCgpO1xuICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzLmpvaW4oXCJcIikgOiBudWxsO1xuICAgIH1cbiAgICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4O1xuICAgICAgeCA9IF87XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHk7XG4gICAgICB5ID0gXztcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGVmaW5lZDtcbiAgICAgIGRlZmluZWQgPSBfO1xuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfTtcbiAgICBsaW5lLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGVLZXk7XG4gICAgICBpZiAodHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIikgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZSA9IF87IGVsc2UgaW50ZXJwb2xhdGVLZXkgPSAoaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUludGVycG9sYXRvcnMuZ2V0KF8pIHx8IGQzX3N2Z19saW5lTGluZWFyKS5rZXk7XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIGxpbmUudGVuc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRlbnNpb247XG4gICAgICB0ZW5zaW9uID0gXztcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgcmV0dXJuIGxpbmU7XG4gIH1cbiAgZDMuc3ZnLmxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc3ZnX2xpbmUoZDNfaWRlbnRpdHkpO1xuICB9O1xuICB2YXIgZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzID0gZDMubWFwKHtcbiAgICBsaW5lYXI6IGQzX3N2Z19saW5lTGluZWFyLFxuICAgIFwibGluZWFyLWNsb3NlZFwiOiBkM19zdmdfbGluZUxpbmVhckNsb3NlZCxcbiAgICBzdGVwOiBkM19zdmdfbGluZVN0ZXAsXG4gICAgXCJzdGVwLWJlZm9yZVwiOiBkM19zdmdfbGluZVN0ZXBCZWZvcmUsXG4gICAgXCJzdGVwLWFmdGVyXCI6IGQzX3N2Z19saW5lU3RlcEFmdGVyLFxuICAgIGJhc2lzOiBkM19zdmdfbGluZUJhc2lzLFxuICAgIFwiYmFzaXMtb3BlblwiOiBkM19zdmdfbGluZUJhc2lzT3BlbixcbiAgICBcImJhc2lzLWNsb3NlZFwiOiBkM19zdmdfbGluZUJhc2lzQ2xvc2VkLFxuICAgIGJ1bmRsZTogZDNfc3ZnX2xpbmVCdW5kbGUsXG4gICAgY2FyZGluYWw6IGQzX3N2Z19saW5lQ2FyZGluYWwsXG4gICAgXCJjYXJkaW5hbC1vcGVuXCI6IGQzX3N2Z19saW5lQ2FyZGluYWxPcGVuLFxuICAgIFwiY2FyZGluYWwtY2xvc2VkXCI6IGQzX3N2Z19saW5lQ2FyZGluYWxDbG9zZWQsXG4gICAgbW9ub3RvbmU6IGQzX3N2Z19saW5lTW9ub3RvbmVcbiAgfSk7XG4gIGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB2YWx1ZS5rZXkgPSBrZXk7XG4gICAgdmFsdWUuY2xvc2VkID0gLy1jbG9zZWQkLy50ZXN0KGtleSk7XG4gIH0pO1xuICBmdW5jdGlvbiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA+IDEgPyBwb2ludHMuam9pbihcIkxcIikgOiBwb2ludHMgKyBcIlpcIjtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUxpbmVhckNsb3NlZChwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmpvaW4oXCJMXCIpICsgXCJaXCI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTdGVwKHBvaW50cykge1xuICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sIFwiLFwiLCBwWzFdIF07XG4gICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaChcIkhcIiwgKHBbMF0gKyAocCA9IHBvaW50c1tpXSlbMF0pIC8gMiwgXCJWXCIsIHBbMV0pO1xuICAgIGlmIChuID4gMSkgcGF0aC5wdXNoKFwiSFwiLCBwWzBdKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcEJlZm9yZShwb2ludHMpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoLCBwID0gcG9pbnRzWzBdLCBwYXRoID0gWyBwWzBdLCBcIixcIiwgcFsxXSBdO1xuICAgIHdoaWxlICgrK2kgPCBuKSBwYXRoLnB1c2goXCJWXCIsIChwID0gcG9pbnRzW2ldKVsxXSwgXCJIXCIsIHBbMF0pO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTdGVwQWZ0ZXIocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aCwgcCA9IHBvaW50c1swXSwgcGF0aCA9IFsgcFswXSwgXCIsXCIsIHBbMV0gXTtcbiAgICB3aGlsZSAoKytpIDwgbikgcGF0aC5wdXNoKFwiSFwiLCAocCA9IHBvaW50c1tpXSlbMF0sIFwiVlwiLCBwWzFdKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxPcGVuKHBvaW50cywgdGVuc2lvbikge1xuICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgNCA/IGQzX3N2Z19saW5lTGluZWFyKHBvaW50cykgOiBwb2ludHNbMV0gKyBkM19zdmdfbGluZUhlcm1pdGUocG9pbnRzLnNsaWNlKDEsIC0xKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxDbG9zZWQocG9pbnRzLCB0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXJDbG9zZWQocG9pbnRzKSA6IHBvaW50c1swXSArIGQzX3N2Z19saW5lSGVybWl0ZSgocG9pbnRzLnB1c2gocG9pbnRzWzBdKSwgXG4gICAgcG9pbnRzKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKFsgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXSBdLmNvbmNhdChwb2ludHMsIFsgcG9pbnRzWzFdIF0pLCB0ZW5zaW9uKSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVDYXJkaW5hbChwb2ludHMsIHRlbnNpb24pIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMsIHRhbmdlbnRzKSB7XG4gICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA8IDEgfHwgcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGggJiYgcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGggKyAyKSB7XG4gICAgICByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB9XG4gICAgdmFyIHF1YWQgPSBwb2ludHMubGVuZ3RoICE9IHRhbmdlbnRzLmxlbmd0aCwgcGF0aCA9IFwiXCIsIHAwID0gcG9pbnRzWzBdLCBwID0gcG9pbnRzWzFdLCB0MCA9IHRhbmdlbnRzWzBdLCB0ID0gdDAsIHBpID0gMTtcbiAgICBpZiAocXVhZCkge1xuICAgICAgcGF0aCArPSBcIlFcIiArIChwWzBdIC0gdDBbMF0gKiAyIC8gMykgKyBcIixcIiArIChwWzFdIC0gdDBbMV0gKiAyIC8gMykgKyBcIixcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICBwMCA9IHBvaW50c1sxXTtcbiAgICAgIHBpID0gMjtcbiAgICB9XG4gICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHQgPSB0YW5nZW50c1sxXTtcbiAgICAgIHAgPSBwb2ludHNbcGldO1xuICAgICAgcGkrKztcbiAgICAgIHBhdGggKz0gXCJDXCIgKyAocDBbMF0gKyB0MFswXSkgKyBcIixcIiArIChwMFsxXSArIHQwWzFdKSArIFwiLFwiICsgKHBbMF0gLSB0WzBdKSArIFwiLFwiICsgKHBbMV0gLSB0WzFdKSArIFwiLFwiICsgcFswXSArIFwiLFwiICsgcFsxXTtcbiAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgdGFuZ2VudHMubGVuZ3RoOyBpKyssIHBpKyspIHtcbiAgICAgICAgcCA9IHBvaW50c1twaV07XG4gICAgICAgIHQgPSB0YW5nZW50c1tpXTtcbiAgICAgICAgcGF0aCArPSBcIlNcIiArIChwWzBdIC0gdFswXSkgKyBcIixcIiArIChwWzFdIC0gdFsxXSkgKyBcIixcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxdWFkKSB7XG4gICAgICB2YXIgbHAgPSBwb2ludHNbcGldO1xuICAgICAgcGF0aCArPSBcIlFcIiArIChwWzBdICsgdFswXSAqIDIgLyAzKSArIFwiLFwiICsgKHBbMV0gKyB0WzFdICogMiAvIDMpICsgXCIsXCIgKyBscFswXSArIFwiLFwiICsgbHBbMV07XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhwb2ludHMsIHRlbnNpb24pIHtcbiAgICB2YXIgdGFuZ2VudHMgPSBbXSwgYSA9ICgxIC0gdGVuc2lvbikgLyAyLCBwMCwgcDEgPSBwb2ludHNbMF0sIHAyID0gcG9pbnRzWzFdLCBpID0gMSwgbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHAwID0gcDE7XG4gICAgICBwMSA9IHAyO1xuICAgICAgcDIgPSBwb2ludHNbaV07XG4gICAgICB0YW5nZW50cy5wdXNoKFsgYSAqIChwMlswXSAtIHAwWzBdKSwgYSAqIChwMlsxXSAtIHAwWzFdKSBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhbmdlbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXMocG9pbnRzKSB7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAzKSByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB2YXIgaSA9IDEsIG4gPSBwb2ludHMubGVuZ3RoLCBwaSA9IHBvaW50c1swXSwgeDAgPSBwaVswXSwgeTAgPSBwaVsxXSwgcHggPSBbIHgwLCB4MCwgeDAsIChwaSA9IHBvaW50c1sxXSlbMF0gXSwgcHkgPSBbIHkwLCB5MCwgeTAsIHBpWzFdIF0sIHBhdGggPSBbIHgwLCBcIixcIiwgeTAsIFwiTFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpIF07XG4gICAgcG9pbnRzLnB1c2gocG9pbnRzW24gLSAxXSk7XG4gICAgd2hpbGUgKCsraSA8PSBuKSB7XG4gICAgICBwaSA9IHBvaW50c1tpXTtcbiAgICAgIHB4LnNoaWZ0KCk7XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnNoaWZ0KCk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcbiAgICB9XG4gICAgcG9pbnRzLnBvcCgpO1xuICAgIHBhdGgucHVzaChcIkxcIiwgcGkpO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc09wZW4ocG9pbnRzKSB7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCA0KSByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB2YXIgcGF0aCA9IFtdLCBpID0gLTEsIG4gPSBwb2ludHMubGVuZ3RoLCBwaSwgcHggPSBbIDAgXSwgcHkgPSBbIDAgXTtcbiAgICB3aGlsZSAoKytpIDwgMykge1xuICAgICAgcGkgPSBwb2ludHNbaV07XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgIH1cbiAgICBwYXRoLnB1c2goZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCkgKyBcIixcIiArIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpKTtcbiAgICAtLWk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHBpID0gcG9pbnRzW2ldO1xuICAgICAgcHguc2hpZnQoKTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkuc2hpZnQoKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXNDbG9zZWQocG9pbnRzKSB7XG4gICAgdmFyIHBhdGgsIGkgPSAtMSwgbiA9IHBvaW50cy5sZW5ndGgsIG0gPSBuICsgNCwgcGksIHB4ID0gW10sIHB5ID0gW107XG4gICAgd2hpbGUgKCsraSA8IDQpIHtcbiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkucHVzaChwaVsxXSk7XG4gICAgfVxuICAgIHBhdGggPSBbIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSkgXTtcbiAgICAtLWk7XG4gICAgd2hpbGUgKCsraSA8IG0pIHtcbiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcbiAgICAgIHB4LnNoaWZ0KCk7XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnNoaWZ0KCk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUJ1bmRsZShwb2ludHMsIHRlbnNpb24pIHtcbiAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGggLSAxO1xuICAgIGlmIChuKSB7XG4gICAgICB2YXIgeDAgPSBwb2ludHNbMF1bMF0sIHkwID0gcG9pbnRzWzBdWzFdLCBkeCA9IHBvaW50c1tuXVswXSAtIHgwLCBkeSA9IHBvaW50c1tuXVsxXSAtIHkwLCBpID0gLTEsIHAsIHQ7XG4gICAgICB3aGlsZSAoKytpIDw9IG4pIHtcbiAgICAgICAgcCA9IHBvaW50c1tpXTtcbiAgICAgICAgdCA9IGkgLyBuO1xuICAgICAgICBwWzBdID0gdGVuc2lvbiAqIHBbMF0gKyAoMSAtIHRlbnNpb24pICogKHgwICsgdCAqIGR4KTtcbiAgICAgICAgcFsxXSA9IHRlbnNpb24gKiBwWzFdICsgKDEgLSB0ZW5zaW9uKSAqICh5MCArIHQgKiBkeSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zdmdfbGluZUJhc2lzKHBvaW50cyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVEb3Q0KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG4gIH1cbiAgdmFyIGQzX3N2Z19saW5lQmFzaXNCZXppZXIxID0gWyAwLCAyIC8gMywgMSAvIDMsIDAgXSwgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjIgPSBbIDAsIDEgLyAzLCAyIC8gMywgMCBdLCBkM19zdmdfbGluZUJhc2lzQmV6aWVyMyA9IFsgMCwgMSAvIDYsIDIgLyAzLCAxIC8gNiBdO1xuICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHgsIHkpIHtcbiAgICBwYXRoLnB1c2goXCJDXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMSwgeCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEsIHkpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIyLCB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMiwgeSksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCB5KSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTbG9wZShwMCwgcDEpIHtcbiAgICByZXR1cm4gKHAxWzFdIC0gcDBbMV0pIC8gKHAxWzBdIC0gcDBbMF0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLCBqID0gcG9pbnRzLmxlbmd0aCAtIDEsIG0gPSBbXSwgcDAgPSBwb2ludHNbMF0sIHAxID0gcG9pbnRzWzFdLCBkID0gbVswXSA9IGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKTtcbiAgICB3aGlsZSAoKytpIDwgaikge1xuICAgICAgbVtpXSA9IChkICsgKGQgPSBkM19zdmdfbGluZVNsb3BlKHAwID0gcDEsIHAxID0gcG9pbnRzW2kgKyAxXSkpKSAvIDI7XG4gICAgfVxuICAgIG1baV0gPSBkO1xuICAgIHJldHVybiBtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lTW9ub3RvbmVUYW5nZW50cyhwb2ludHMpIHtcbiAgICB2YXIgdGFuZ2VudHMgPSBbXSwgZCwgYSwgYiwgcywgbSA9IGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSwgaSA9IC0xLCBqID0gcG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCsraSA8IGopIHtcbiAgICAgIGQgPSBkM19zdmdfbGluZVNsb3BlKHBvaW50c1tpXSwgcG9pbnRzW2kgKyAxXSk7XG4gICAgICBpZiAoYWJzKGQpIDwgzrUpIHtcbiAgICAgICAgbVtpXSA9IG1baSArIDFdID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGEgPSBtW2ldIC8gZDtcbiAgICAgICAgYiA9IG1baSArIDFdIC8gZDtcbiAgICAgICAgcyA9IGEgKiBhICsgYiAqIGI7XG4gICAgICAgIGlmIChzID4gOSkge1xuICAgICAgICAgIHMgPSBkICogMyAvIE1hdGguc3FydChzKTtcbiAgICAgICAgICBtW2ldID0gcyAqIGE7XG4gICAgICAgICAgbVtpICsgMV0gPSBzICogYjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8PSBqKSB7XG4gICAgICBzID0gKHBvaW50c1tNYXRoLm1pbihqLCBpICsgMSldWzBdIC0gcG9pbnRzW01hdGgubWF4KDAsIGkgLSAxKV1bMF0pIC8gKDYgKiAoMSArIG1baV0gKiBtW2ldKSk7XG4gICAgICB0YW5nZW50cy5wdXNoKFsgcyB8fCAwLCBtW2ldICogcyB8fCAwIF0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFuZ2VudHM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVNb25vdG9uZShwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzKHBvaW50cykpO1xuICB9XG4gIGQzLnN2Zy5saW5lLnJhZGlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsaW5lID0gZDNfc3ZnX2xpbmUoZDNfc3ZnX2xpbmVSYWRpYWwpO1xuICAgIGxpbmUucmFkaXVzID0gbGluZS54LCBkZWxldGUgbGluZS54O1xuICAgIGxpbmUuYW5nbGUgPSBsaW5lLnksIGRlbGV0ZSBsaW5lLnk7XG4gICAgcmV0dXJuIGxpbmU7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lUmFkaWFsKHBvaW50cykge1xuICAgIHZhciBwb2ludCwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgciwgYTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICByID0gcG9pbnRbMF07XG4gICAgICBhID0gcG9pbnRbMV0gLSBoYWxmz4A7XG4gICAgICBwb2ludFswXSA9IHIgKiBNYXRoLmNvcyhhKTtcbiAgICAgIHBvaW50WzFdID0gciAqIE1hdGguc2luKGEpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmVhKHByb2plY3Rpb24pIHtcbiAgICB2YXIgeDAgPSBkM19nZW9tX3BvaW50WCwgeDEgPSBkM19nZW9tX3BvaW50WCwgeTAgPSAwLCB5MSA9IGQzX2dlb21fcG9pbnRZLCBkZWZpbmVkID0gZDNfdHJ1ZSwgaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUxpbmVhciwgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZS5rZXksIGludGVycG9sYXRlUmV2ZXJzZSA9IGludGVycG9sYXRlLCBMID0gXCJMXCIsIHRlbnNpb24gPSAuNztcbiAgICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICAgIHZhciBzZWdtZW50cyA9IFtdLCBwb2ludHMwID0gW10sIHBvaW50czEgPSBbXSwgaSA9IC0xLCBuID0gZGF0YS5sZW5ndGgsIGQsIGZ4MCA9IGQzX2Z1bmN0b3IoeDApLCBmeTAgPSBkM19mdW5jdG9yKHkwKSwgZngxID0geDAgPT09IHgxID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfSA6IGQzX2Z1bmN0b3IoeDEpLCBmeTEgPSB5MCA9PT0geTEgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9IDogZDNfZnVuY3Rvcih5MSksIHgsIHk7XG4gICAgICBmdW5jdGlvbiBzZWdtZW50KCkge1xuICAgICAgICBzZWdtZW50cy5wdXNoKFwiTVwiLCBpbnRlcnBvbGF0ZShwcm9qZWN0aW9uKHBvaW50czEpLCB0ZW5zaW9uKSwgTCwgaW50ZXJwb2xhdGVSZXZlcnNlKHByb2plY3Rpb24ocG9pbnRzMC5yZXZlcnNlKCkpLCB0ZW5zaW9uKSwgXCJaXCIpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcbiAgICAgICAgICBwb2ludHMwLnB1c2goWyB4ID0gK2Z4MC5jYWxsKHRoaXMsIGQsIGkpLCB5ID0gK2Z5MC5jYWxsKHRoaXMsIGQsIGkpIF0pO1xuICAgICAgICAgIHBvaW50czEucHVzaChbICtmeDEuY2FsbCh0aGlzLCBkLCBpKSwgK2Z5MS5jYWxsKHRoaXMsIGQsIGkpIF0pO1xuICAgICAgICB9IGVsc2UgaWYgKHBvaW50czAubGVuZ3RoKSB7XG4gICAgICAgICAgc2VnbWVudCgpO1xuICAgICAgICAgIHBvaW50czAgPSBbXTtcbiAgICAgICAgICBwb2ludHMxID0gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwb2ludHMwLmxlbmd0aCkgc2VnbWVudCgpO1xuICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzLmpvaW4oXCJcIikgOiBudWxsO1xuICAgIH1cbiAgICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MTtcbiAgICAgIHgwID0geDEgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDA7XG4gICAgICB4MCA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MTtcbiAgICAgIHgxID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTE7XG4gICAgICB5MCA9IHkxID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkwO1xuICAgICAgeTAgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTE7XG4gICAgICB5MSA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRlZmluZWQ7XG4gICAgICBkZWZpbmVkID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlS2V5O1xuICAgICAgaWYgKHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIpIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUgPSBfOyBlbHNlIGludGVycG9sYXRlS2V5ID0gKGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzLmdldChfKSB8fCBkM19zdmdfbGluZUxpbmVhcikua2V5O1xuICAgICAgaW50ZXJwb2xhdGVSZXZlcnNlID0gaW50ZXJwb2xhdGUucmV2ZXJzZSB8fCBpbnRlcnBvbGF0ZTtcbiAgICAgIEwgPSBpbnRlcnBvbGF0ZS5jbG9zZWQgPyBcIk1cIiA6IFwiTFwiO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLnRlbnNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0ZW5zaW9uO1xuICAgICAgdGVuc2lvbiA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIHJldHVybiBhcmVhO1xuICB9XG4gIGQzX3N2Z19saW5lU3RlcEJlZm9yZS5yZXZlcnNlID0gZDNfc3ZnX2xpbmVTdGVwQWZ0ZXI7XG4gIGQzX3N2Z19saW5lU3RlcEFmdGVyLnJldmVyc2UgPSBkM19zdmdfbGluZVN0ZXBCZWZvcmU7XG4gIGQzLnN2Zy5hcmVhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3N2Z19hcmVhKGQzX2lkZW50aXR5KTtcbiAgfTtcbiAgZDMuc3ZnLmFyZWEucmFkaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWEgPSBkM19zdmdfYXJlYShkM19zdmdfbGluZVJhZGlhbCk7XG4gICAgYXJlYS5yYWRpdXMgPSBhcmVhLngsIGRlbGV0ZSBhcmVhLng7XG4gICAgYXJlYS5pbm5lclJhZGl1cyA9IGFyZWEueDAsIGRlbGV0ZSBhcmVhLngwO1xuICAgIGFyZWEub3V0ZXJSYWRpdXMgPSBhcmVhLngxLCBkZWxldGUgYXJlYS54MTtcbiAgICBhcmVhLmFuZ2xlID0gYXJlYS55LCBkZWxldGUgYXJlYS55O1xuICAgIGFyZWEuc3RhcnRBbmdsZSA9IGFyZWEueTAsIGRlbGV0ZSBhcmVhLnkwO1xuICAgIGFyZWEuZW5kQW5nbGUgPSBhcmVhLnkxLCBkZWxldGUgYXJlYS55MTtcbiAgICByZXR1cm4gYXJlYTtcbiAgfTtcbiAgZDMuc3ZnLmNob3JkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNvdXJjZSA9IGQzX3NvdXJjZSwgdGFyZ2V0ID0gZDNfdGFyZ2V0LCByYWRpdXMgPSBkM19zdmdfY2hvcmRSYWRpdXMsIHN0YXJ0QW5nbGUgPSBkM19zdmdfYXJjU3RhcnRBbmdsZSwgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGU7XG4gICAgZnVuY3Rpb24gY2hvcmQoZCwgaSkge1xuICAgICAgdmFyIHMgPSBzdWJncm91cCh0aGlzLCBzb3VyY2UsIGQsIGkpLCB0ID0gc3ViZ3JvdXAodGhpcywgdGFyZ2V0LCBkLCBpKTtcbiAgICAgIHJldHVybiBcIk1cIiArIHMucDAgKyBhcmMocy5yLCBzLnAxLCBzLmExIC0gcy5hMCkgKyAoZXF1YWxzKHMsIHQpID8gY3VydmUocy5yLCBzLnAxLCBzLnIsIHMucDApIDogY3VydmUocy5yLCBzLnAxLCB0LnIsIHQucDApICsgYXJjKHQuciwgdC5wMSwgdC5hMSAtIHQuYTApICsgY3VydmUodC5yLCB0LnAxLCBzLnIsIHMucDApKSArIFwiWlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdWJncm91cChzZWxmLCBmLCBkLCBpKSB7XG4gICAgICB2YXIgc3ViZ3JvdXAgPSBmLmNhbGwoc2VsZiwgZCwgaSksIHIgPSByYWRpdXMuY2FsbChzZWxmLCBzdWJncm91cCwgaSksIGEwID0gc3RhcnRBbmdsZS5jYWxsKHNlbGYsIHN1Ymdyb3VwLCBpKSAtIGhhbGbPgCwgYTEgPSBlbmRBbmdsZS5jYWxsKHNlbGYsIHN1Ymdyb3VwLCBpKSAtIGhhbGbPgDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHI6IHIsXG4gICAgICAgIGEwOiBhMCxcbiAgICAgICAgYTE6IGExLFxuICAgICAgICBwMDogWyByICogTWF0aC5jb3MoYTApLCByICogTWF0aC5zaW4oYTApIF0sXG4gICAgICAgIHAxOiBbIHIgKiBNYXRoLmNvcyhhMSksIHIgKiBNYXRoLnNpbihhMSkgXVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmEwID09IGIuYTAgJiYgYS5hMSA9PSBiLmExO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcmMociwgcCwgYSkge1xuICAgICAgcmV0dXJuIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgXCIgKyArKGEgPiDPgCkgKyBcIiwxIFwiICsgcDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3VydmUocjAsIHAwLCByMSwgcDEpIHtcbiAgICAgIHJldHVybiBcIlEgMCwwIFwiICsgcDE7XG4gICAgfVxuICAgIGNob3JkLnJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhZGl1cztcbiAgICAgIHJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3VyY2UgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG4gICAgICBzb3VyY2UgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQudGFyZ2V0ID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICAgICAgdGFyZ2V0ID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuICAgICAgc3RhcnRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5lbmRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGVuZEFuZ2xlO1xuICAgICAgZW5kQW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgcmV0dXJuIGNob3JkO1xuICB9O1xuICBmdW5jdGlvbiBkM19zdmdfY2hvcmRSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLnJhZGl1cztcbiAgfVxuICBkMy5zdmcuZGlhZ29uYWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc291cmNlID0gZDNfc291cmNlLCB0YXJnZXQgPSBkM190YXJnZXQsIHByb2plY3Rpb24gPSBkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uO1xuICAgIGZ1bmN0aW9uIGRpYWdvbmFsKGQsIGkpIHtcbiAgICAgIHZhciBwMCA9IHNvdXJjZS5jYWxsKHRoaXMsIGQsIGkpLCBwMyA9IHRhcmdldC5jYWxsKHRoaXMsIGQsIGkpLCBtID0gKHAwLnkgKyBwMy55KSAvIDIsIHAgPSBbIHAwLCB7XG4gICAgICAgIHg6IHAwLngsXG4gICAgICAgIHk6IG1cbiAgICAgIH0sIHtcbiAgICAgICAgeDogcDMueCxcbiAgICAgICAgeTogbVxuICAgICAgfSwgcDMgXTtcbiAgICAgIHAgPSBwLm1hcChwcm9qZWN0aW9uKTtcbiAgICAgIHJldHVybiBcIk1cIiArIHBbMF0gKyBcIkNcIiArIHBbMV0gKyBcIiBcIiArIHBbMl0gKyBcIiBcIiArIHBbM107XG4gICAgfVxuICAgIGRpYWdvbmFsLnNvdXJjZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvdXJjZTtcbiAgICAgIHNvdXJjZSA9IGQzX2Z1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gZGlhZ29uYWw7XG4gICAgfTtcbiAgICBkaWFnb25hbC50YXJnZXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0YXJnZXQ7XG4gICAgICB0YXJnZXQgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGRpYWdvbmFsO1xuICAgIH07XG4gICAgZGlhZ29uYWwucHJvamVjdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByb2plY3Rpb247XG4gICAgICBwcm9qZWN0aW9uID0geDtcbiAgICAgIHJldHVybiBkaWFnb25hbDtcbiAgICB9O1xuICAgIHJldHVybiBkaWFnb25hbDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUHJvamVjdGlvbihkKSB7XG4gICAgcmV0dXJuIFsgZC54LCBkLnkgXTtcbiAgfVxuICBkMy5zdmcuZGlhZ29uYWwucmFkaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpYWdvbmFsID0gZDMuc3ZnLmRpYWdvbmFsKCksIHByb2plY3Rpb24gPSBkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uLCBwcm9qZWN0aW9uXyA9IGRpYWdvbmFsLnByb2plY3Rpb247XG4gICAgZGlhZ29uYWwucHJvamVjdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcHJvamVjdGlvbl8oZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uID0geCkpIDogcHJvamVjdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBkaWFnb25hbDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGQgPSBwcm9qZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHIgPSBkWzBdLCBhID0gZFsxXSAtIGhhbGbPgDtcbiAgICAgIHJldHVybiBbIHIgKiBNYXRoLmNvcyhhKSwgciAqIE1hdGguc2luKGEpIF07XG4gICAgfTtcbiAgfVxuICBkMy5zdmcuc3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHR5cGUgPSBkM19zdmdfc3ltYm9sVHlwZSwgc2l6ZSA9IGQzX3N2Z19zeW1ib2xTaXplO1xuICAgIGZ1bmN0aW9uIHN5bWJvbChkLCBpKSB7XG4gICAgICByZXR1cm4gKGQzX3N2Z19zeW1ib2xzLmdldCh0eXBlLmNhbGwodGhpcywgZCwgaSkpIHx8IGQzX3N2Z19zeW1ib2xDaXJjbGUpKHNpemUuY2FsbCh0aGlzLCBkLCBpKSk7XG4gICAgfVxuICAgIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdHlwZTtcbiAgICAgIHR5cGUgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgICB9O1xuICAgIHN5bWJvbC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgICB9O1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3N2Z19zeW1ib2xTaXplKCkge1xuICAgIHJldHVybiA2NDtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sVHlwZSgpIHtcbiAgICByZXR1cm4gXCJjaXJjbGVcIjtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sQ2lyY2xlKHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gz4ApO1xuICAgIHJldHVybiBcIk0wLFwiICsgciArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgMSwxIDAsXCIgKyAtciArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgMSwxIDAsXCIgKyByICsgXCJaXCI7XG4gIH1cbiAgdmFyIGQzX3N2Z19zeW1ib2xzID0gZDMubWFwKHtcbiAgICBjaXJjbGU6IGQzX3N2Z19zeW1ib2xDaXJjbGUsXG4gICAgY3Jvc3M6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG4gICAgICByZXR1cm4gXCJNXCIgKyAtMyAqIHIgKyBcIixcIiArIC1yICsgXCJIXCIgKyAtciArIFwiVlwiICsgLTMgKiByICsgXCJIXCIgKyByICsgXCJWXCIgKyAtciArIFwiSFwiICsgMyAqIHIgKyBcIlZcIiArIHIgKyBcIkhcIiArIHIgKyBcIlZcIiArIDMgKiByICsgXCJIXCIgKyAtciArIFwiVlwiICsgciArIFwiSFwiICsgLTMgKiByICsgXCJaXCI7XG4gICAgfSxcbiAgICBkaWFtb25kOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgcnkgPSBNYXRoLnNxcnQoc2l6ZSAvICgyICogZDNfc3ZnX3N5bWJvbFRhbjMwKSksIHJ4ID0gcnkgKiBkM19zdmdfc3ltYm9sVGFuMzA7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIC1yeSArIFwiTFwiICsgcnggKyBcIiwwXCIgKyBcIiAwLFwiICsgcnkgKyBcIiBcIiArIC1yeCArIFwiLDBcIiArIFwiWlwiO1xuICAgIH0sXG4gICAgc3F1YXJlOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplKSAvIDI7XG4gICAgICByZXR1cm4gXCJNXCIgKyAtciArIFwiLFwiICsgLXIgKyBcIkxcIiArIHIgKyBcIixcIiArIC1yICsgXCIgXCIgKyByICsgXCIsXCIgKyByICsgXCIgXCIgKyAtciArIFwiLFwiICsgciArIFwiWlwiO1xuICAgIH0sXG4gICAgXCJ0cmlhbmdsZS1kb3duXCI6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHZhciByeCA9IE1hdGguc3FydChzaXplIC8gZDNfc3ZnX3N5bWJvbFNxcnQzKSwgcnkgPSByeCAqIGQzX3N2Z19zeW1ib2xTcXJ0MyAvIDI7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIHJ5ICsgXCJMXCIgKyByeCArIFwiLFwiICsgLXJ5ICsgXCIgXCIgKyAtcnggKyBcIixcIiArIC1yeSArIFwiWlwiO1xuICAgIH0sXG4gICAgXCJ0cmlhbmdsZS11cFwiOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgcnggPSBNYXRoLnNxcnQoc2l6ZSAvIGQzX3N2Z19zeW1ib2xTcXJ0MyksIHJ5ID0gcnggKiBkM19zdmdfc3ltYm9sU3FydDMgLyAyO1xuICAgICAgcmV0dXJuIFwiTTAsXCIgKyAtcnkgKyBcIkxcIiArIHJ4ICsgXCIsXCIgKyByeSArIFwiIFwiICsgLXJ4ICsgXCIsXCIgKyByeSArIFwiWlwiO1xuICAgIH1cbiAgfSk7XG4gIGQzLnN2Zy5zeW1ib2xUeXBlcyA9IGQzX3N2Z19zeW1ib2xzLmtleXMoKTtcbiAgdmFyIGQzX3N2Z19zeW1ib2xTcXJ0MyA9IE1hdGguc3FydCgzKSwgZDNfc3ZnX3N5bWJvbFRhbjMwID0gTWF0aC50YW4oMzAgKiBkM19yYWRpYW5zKTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGlkID0gZDNfdHJhbnNpdGlvbkluaGVyaXRJZCB8fCArK2QzX3RyYW5zaXRpb25JZCwgbnMgPSBkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIG5vZGUsIHRyYW5zaXRpb24gPSBkM190cmFuc2l0aW9uSW5oZXJpdCB8fCB7XG4gICAgICB0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZWFzZTogZDNfZWFzZV9jdWJpY0luT3V0LFxuICAgICAgZGVsYXk6IDAsXG4gICAgICBkdXJhdGlvbjogMjUwXG4gICAgfTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgZDNfdHJhbnNpdGlvbk5vZGUobm9kZSwgaSwgbnMsIGlkLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVhY2gobmFtZSA9PSBudWxsID8gZDNfc2VsZWN0aW9uX2ludGVycnVwdCA6IGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpKSk7XG4gIH07XG4gIHZhciBkM19zZWxlY3Rpb25faW50ZXJydXB0ID0gZDNfc2VsZWN0aW9uX2ludGVycnVwdE5TKGQzX3RyYW5zaXRpb25OYW1lc3BhY2UoKSk7XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhucykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsb2NrLCBhY3RpdmVJZCwgYWN0aXZlO1xuICAgICAgaWYgKChsb2NrID0gdGhpc1tuc10pICYmIChhY3RpdmUgPSBsb2NrW2FjdGl2ZUlkID0gbG9jay5hY3RpdmVdKSkge1xuICAgICAgICBhY3RpdmUudGltZXIuYyA9IG51bGw7XG4gICAgICAgIGFjdGl2ZS50aW1lci50ID0gTmFOO1xuICAgICAgICBpZiAoLS1sb2NrLmNvdW50KSBkZWxldGUgbG9ja1thY3RpdmVJZF07IGVsc2UgZGVsZXRlIHRoaXNbbnNdO1xuICAgICAgICBsb2NrLmFjdGl2ZSArPSAuNTtcbiAgICAgICAgYWN0aXZlLmV2ZW50ICYmIGFjdGl2ZS5ldmVudC5pbnRlcnJ1cHQuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBhY3RpdmUuaW5kZXgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbihncm91cHMsIG5zLCBpZCkge1xuICAgIGQzX3N1YmNsYXNzKGdyb3VwcywgZDNfdHJhbnNpdGlvblByb3RvdHlwZSk7XG4gICAgZ3JvdXBzLm5hbWVzcGFjZSA9IG5zO1xuICAgIGdyb3Vwcy5pZCA9IGlkO1xuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgdmFyIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUgPSBbXSwgZDNfdHJhbnNpdGlvbklkID0gMCwgZDNfdHJhbnNpdGlvbkluaGVyaXRJZCwgZDNfdHJhbnNpdGlvbkluaGVyaXQ7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuY2FsbCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsO1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmVtcHR5ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLm5vZGUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zaXplID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNpemU7XG4gIGQzLnRyYW5zaXRpb24gPSBmdW5jdGlvbihzZWxlY3Rpb24sIG5hbWUpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uICYmIHNlbGVjdGlvbi50cmFuc2l0aW9uID8gZDNfdHJhbnNpdGlvbkluaGVyaXRJZCA/IHNlbGVjdGlvbi50cmFuc2l0aW9uKG5hbWUpIDogc2VsZWN0aW9uIDogZDMuc2VsZWN0aW9uKCkudHJhbnNpdGlvbihzZWxlY3Rpb24pO1xuICB9O1xuICBkMy50cmFuc2l0aW9uLnByb3RvdHlwZSA9IGQzX3RyYW5zaXRpb25Qcm90b3R5cGU7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIG5vZGU7XG4gICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSkge1xuICAgICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgICAgZDNfdHJhbnNpdGlvbk5vZGUoc3Vibm9kZSwgaSwgbnMsIGlkLCBub2RlW25zXVtpZF0pO1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIG5zLCBpZCk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGVzLCBub2RlLCBzdWJub2RlLCB0cmFuc2l0aW9uO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuICAgICAgICAgIHN1Ym5vZGVzID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgICAgICBmb3IgKHZhciBrID0gLTEsIG8gPSBzdWJub2Rlcy5sZW5ndGg7ICsrayA8IG87ICkge1xuICAgICAgICAgICAgaWYgKHN1Ym5vZGUgPSBzdWJub2Rlc1trXSkgZDNfdHJhbnNpdGlvbk5vZGUoc3Vibm9kZSwgaywgbnMsIGlkLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgbnMsIGlkKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZTtcbiAgICBpZiAodHlwZW9mIGZpbHRlciAhPT0gXCJmdW5jdGlvblwiKSBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fZmlsdGVyKGZpbHRlcik7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBmaWx0ZXIuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLm5hbWVzcGFjZSwgdGhpcy5pZCk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudHdlZW4gPSBmdW5jdGlvbihuYW1lLCB0d2Vlbikge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS50d2Vlbi5nZXQobmFtZSk7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIHR3ZWVuID09IG51bGwgPyBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0udHdlZW4ucmVtb3ZlKG5hbWUpO1xuICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0udHdlZW4uc2V0KG5hbWUsIHR3ZWVuKTtcbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbl90d2Vlbihncm91cHMsIG5hbWUsIHZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBpZCA9IGdyb3Vwcy5pZCwgbnMgPSBncm91cHMubmFtZXNwYWNlO1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gZnVuY3Rpb24obm9kZSwgaSwgaikge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB0d2Vlbih2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSk7XG4gICAgfSA6ICh2YWx1ZSA9IHR3ZWVuKHZhbHVlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgfSkpO1xuICB9XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWVOUywgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZU5TKSB0aGlzLmF0dHIodmFsdWUsIG5hbWVOU1t2YWx1ZV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBpbnRlcnBvbGF0ZSA9IG5hbWVOUyA9PSBcInRyYW5zZm9ybVwiID8gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBkM19pbnRlcnBvbGF0ZSwgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZU5TKTtcbiAgICBmdW5jdGlvbiBhdHRyTnVsbCgpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyTnVsbE5TKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXR0clR3ZWVuKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbCA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpLCBpO1xuICAgICAgICByZXR1cm4gYSAhPT0gYiAmJiAoaSA9IGludGVycG9sYXRlKGEsIGIpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaSh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbE5TIDogKGIgKz0gXCJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSwgaTtcbiAgICAgICAgcmV0dXJuIGEgIT09IGIgJiYgKGkgPSBpbnRlcnBvbGF0ZShhLCBiKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uX3R3ZWVuKHRoaXMsIFwiYXR0ci5cIiArIG5hbWVOUywgdmFsdWUsIG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2Vlbik7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0clR3ZWVuID0gZnVuY3Rpb24obmFtZU5TLCB0d2Vlbikge1xuICAgIHZhciBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lTlMpO1xuICAgIGZ1bmN0aW9uIGF0dHJUd2VlbihkLCBpKSB7XG4gICAgICB2YXIgZiA9IHR3ZWVuLmNhbGwodGhpcywgZCwgaSwgdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSkpO1xuICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBmKHQpKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGQsIGkpIHtcbiAgICAgIHZhciBmID0gdHdlZW4uY2FsbCh0aGlzLCBkLCBpLCB0aGlzLmdldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpKTtcbiAgICAgIHJldHVybiBmICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCBmKHQpKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwiYXR0ci5cIiArIG5hbWVOUywgbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobiA8IDMpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAobiA8IDIpIHZhbHVlID0gXCJcIjtcbiAgICAgICAgZm9yIChwcmlvcml0eSBpbiBuYW1lKSB0aGlzLnN0eWxlKHByaW9yaXR5LCBuYW1lW3ByaW9yaXR5XSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHByaW9yaXR5ID0gXCJcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3R5bGVOdWxsKCkge1xuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3R5bGVTdHJpbmcoYikge1xuICAgICAgcmV0dXJuIGIgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYSA9IGQzX3dpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSksIGk7XG4gICAgICAgIHJldHVybiBhICE9PSBiICYmIChpID0gZDNfaW50ZXJwb2xhdGUoYSwgYiksIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlLCBzdHlsZVN0cmluZyk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc3R5bGVUd2VlbiA9IGZ1bmN0aW9uKG5hbWUsIHR3ZWVuLCBwcmlvcml0eSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgcHJpb3JpdHkgPSBcIlwiO1xuICAgIGZ1bmN0aW9uIHN0eWxlVHdlZW4oZCwgaSkge1xuICAgICAgdmFyIGYgPSB0d2Vlbi5jYWxsKHRoaXMsIGQsIGksIGQzX3dpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSkpO1xuICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGYodCksIHByaW9yaXR5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwic3R5bGUuXCIgKyBuYW1lLCBzdHlsZVR3ZWVuKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbl90d2Vlbih0aGlzLCBcInRleHRcIiwgdmFsdWUsIGQzX3RyYW5zaXRpb25fdGV4dCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb25fdGV4dChiKSB7XG4gICAgaWYgKGIgPT0gbnVsbCkgYiA9IFwiXCI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IGI7XG4gICAgfTtcbiAgfVxuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIHJldHVybiB0aGlzLmVhY2goXCJlbmQudHJhbnNpdGlvblwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwO1xuICAgICAgaWYgKHRoaXNbbnNdLmNvdW50IDwgMiAmJiAocCA9IHRoaXMucGFyZW50Tm9kZSkpIHAucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgfSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZWFzZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHJldHVybiB0aGlzLm5vZGUoKVtuc11baWRdLmVhc2U7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGQzLmVhc2UuYXBwbHkoZDMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGVbbnNdW2lkXS5lYXNlID0gdmFsdWU7XG4gICAgfSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kZWxheTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBub2RlW25zXVtpZF0uZGVsYXkgPSArdmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcbiAgICB9IDogKHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0uZGVsYXkgPSB2YWx1ZTtcbiAgICB9KSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kdXJhdGlvbjtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBub2RlW25zXVtpZF0uZHVyYXRpb24gPSBNYXRoLm1heCgxLCB2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKTtcbiAgICB9IDogKHZhbHVlID0gTWF0aC5tYXgoMSwgdmFsdWUpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0uZHVyYXRpb24gPSB2YWx1ZTtcbiAgICB9KSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBpbmhlcml0ID0gZDNfdHJhbnNpdGlvbkluaGVyaXQsIGluaGVyaXRJZCA9IGQzX3RyYW5zaXRpb25Jbmhlcml0SWQ7XG4gICAgICB0cnkge1xuICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaWQ7XG4gICAgICAgIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcbiAgICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdCA9IG5vZGVbbnNdW2lkXTtcbiAgICAgICAgICB0eXBlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG4gICAgICAgIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXQgPSBpbmhlcml0O1xuICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaW5oZXJpdElkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuICAgICAgICAodHJhbnNpdGlvbi5ldmVudCB8fCAodHJhbnNpdGlvbi5ldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJpbnRlcnJ1cHRcIikpKS5vbih0eXBlLCBsaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZDAgPSB0aGlzLmlkLCBpZDEgPSArK2QzX3RyYW5zaXRpb25JZCwgbnMgPSB0aGlzLm5hbWVzcGFjZSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZSwgdHJhbnNpdGlvbjtcbiAgICBmb3IgKHZhciBqID0gMCwgbSA9IHRoaXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHRyYW5zaXRpb24gPSBub2RlW25zXVtpZDBdO1xuICAgICAgICAgIGQzX3RyYW5zaXRpb25Ob2RlKG5vZGUsIGksIG5zLCBpZDEsIHtcbiAgICAgICAgICAgIHRpbWU6IHRyYW5zaXRpb24udGltZSxcbiAgICAgICAgICAgIGVhc2U6IHRyYW5zaXRpb24uZWFzZSxcbiAgICAgICAgICAgIGRlbGF5OiB0cmFuc2l0aW9uLmRlbGF5ICsgdHJhbnNpdGlvbi5kdXJhdGlvbixcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uLmR1cmF0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQxKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbk5hbWVzcGFjZShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgPT0gbnVsbCA/IFwiX190cmFuc2l0aW9uX19cIiA6IFwiX190cmFuc2l0aW9uX1wiICsgbmFtZSArIFwiX19cIjtcbiAgfVxuICBmdW5jdGlvbiBkM190cmFuc2l0aW9uTm9kZShub2RlLCBpLCBucywgaWQsIGluaGVyaXQpIHtcbiAgICB2YXIgbG9jayA9IG5vZGVbbnNdIHx8IChub2RlW25zXSA9IHtcbiAgICAgIGFjdGl2ZTogMCxcbiAgICAgIGNvdW50OiAwXG4gICAgfSksIHRyYW5zaXRpb24gPSBsb2NrW2lkXSwgdGltZSwgdGltZXIsIGR1cmF0aW9uLCBlYXNlLCB0d2VlbnM7XG4gICAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgICAgdmFyIGRlbGF5ID0gdHJhbnNpdGlvbi5kZWxheTtcbiAgICAgIHRpbWVyLnQgPSBkZWxheSArIHRpbWU7XG4gICAgICBpZiAoZGVsYXkgPD0gZWxhcHNlZCkgcmV0dXJuIHN0YXJ0KGVsYXBzZWQgLSBkZWxheSk7XG4gICAgICB0aW1lci5jID0gc3RhcnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICAgIHZhciBhY3RpdmVJZCA9IGxvY2suYWN0aXZlLCBhY3RpdmUgPSBsb2NrW2FjdGl2ZUlkXTtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlLnRpbWVyLmMgPSBudWxsO1xuICAgICAgICBhY3RpdmUudGltZXIudCA9IE5hTjtcbiAgICAgICAgLS1sb2NrLmNvdW50O1xuICAgICAgICBkZWxldGUgbG9ja1thY3RpdmVJZF07XG4gICAgICAgIGFjdGl2ZS5ldmVudCAmJiBhY3RpdmUuZXZlbnQuaW50ZXJydXB0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgYWN0aXZlLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGNhbmNlbElkIGluIGxvY2spIHtcbiAgICAgICAgaWYgKCtjYW5jZWxJZCA8IGlkKSB7XG4gICAgICAgICAgdmFyIGNhbmNlbCA9IGxvY2tbY2FuY2VsSWRdO1xuICAgICAgICAgIGNhbmNlbC50aW1lci5jID0gbnVsbDtcbiAgICAgICAgICBjYW5jZWwudGltZXIudCA9IE5hTjtcbiAgICAgICAgICAtLWxvY2suY291bnQ7XG4gICAgICAgICAgZGVsZXRlIGxvY2tbY2FuY2VsSWRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aW1lci5jID0gdGljaztcbiAgICAgIGQzX3RpbWVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGltZXIuYyAmJiB0aWNrKGVsYXBzZWQgfHwgMSkpIHtcbiAgICAgICAgICB0aW1lci5jID0gbnVsbDtcbiAgICAgICAgICB0aW1lci50ID0gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSwgMCwgdGltZSk7XG4gICAgICBsb2NrLmFjdGl2ZSA9IGlkO1xuICAgICAgdHJhbnNpdGlvbi5ldmVudCAmJiB0cmFuc2l0aW9uLmV2ZW50LnN0YXJ0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSk7XG4gICAgICB0d2VlbnMgPSBbXTtcbiAgICAgIHRyYW5zaXRpb24udHdlZW4uZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9IHZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSkpIHtcbiAgICAgICAgICB0d2VlbnMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZWFzZSA9IHRyYW5zaXRpb24uZWFzZTtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbi5kdXJhdGlvbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgICB2YXIgdCA9IGVsYXBzZWQgLyBkdXJhdGlvbiwgZSA9IGVhc2UodCksIG4gPSB0d2VlbnMubGVuZ3RoO1xuICAgICAgd2hpbGUgKG4gPiAwKSB7XG4gICAgICAgIHR3ZWVuc1stLW5dLmNhbGwobm9kZSwgZSk7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb24uZXZlbnQgJiYgdHJhbnNpdGlvbi5ldmVudC5lbmQuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpKTtcbiAgICAgICAgaWYgKC0tbG9jay5jb3VudCkgZGVsZXRlIGxvY2tbaWRdOyBlbHNlIGRlbGV0ZSBub2RlW25zXTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdHJhbnNpdGlvbikge1xuICAgICAgdGltZSA9IGluaGVyaXQudGltZTtcbiAgICAgIHRpbWVyID0gZDNfdGltZXIoc2NoZWR1bGUsIDAsIHRpbWUpO1xuICAgICAgdHJhbnNpdGlvbiA9IGxvY2tbaWRdID0ge1xuICAgICAgICB0d2VlbjogbmV3IGQzX01hcCgpLFxuICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICB0aW1lcjogdGltZXIsXG4gICAgICAgIGRlbGF5OiBpbmhlcml0LmRlbGF5LFxuICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlLFxuICAgICAgICBpbmRleDogaVxuICAgICAgfTtcbiAgICAgIGluaGVyaXQgPSBudWxsO1xuICAgICAgKytsb2NrLmNvdW50O1xuICAgIH1cbiAgfVxuICBkMy5zdmcuYXhpcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpLCBvcmllbnQgPSBkM19zdmdfYXhpc0RlZmF1bHRPcmllbnQsIGlubmVyVGlja1NpemUgPSA2LCBvdXRlclRpY2tTaXplID0gNiwgdGlja1BhZGRpbmcgPSAzLCB0aWNrQXJndW1lbnRzXyA9IFsgMTAgXSwgdGlja1ZhbHVlcyA9IG51bGwsIHRpY2tGb3JtYXRfO1xuICAgIGZ1bmN0aW9uIGF4aXMoZykge1xuICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZyA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgdmFyIHNjYWxlMCA9IHRoaXMuX19jaGFydF9fIHx8IHNjYWxlLCBzY2FsZTEgPSB0aGlzLl9fY2hhcnRfXyA9IHNjYWxlLmNvcHkoKTtcbiAgICAgICAgdmFyIHRpY2tzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gc2NhbGUxLnRpY2tzID8gc2NhbGUxLnRpY2tzLmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDogc2NhbGUxLmRvbWFpbigpIDogdGlja1ZhbHVlcywgdGlja0Zvcm1hdCA9IHRpY2tGb3JtYXRfID09IG51bGwgPyBzY2FsZTEudGlja0Zvcm1hdCA/IHNjYWxlMS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDogZDNfaWRlbnRpdHkgOiB0aWNrRm9ybWF0XywgdGljayA9IGcuc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh0aWNrcywgc2NhbGUxKSwgdGlja0VudGVyID0gdGljay5lbnRlcigpLmluc2VydChcImdcIiwgXCIuZG9tYWluXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIikuc3R5bGUoXCJvcGFjaXR5XCIsIM61KSwgdGlja0V4aXQgPSBkMy50cmFuc2l0aW9uKHRpY2suZXhpdCgpKS5zdHlsZShcIm9wYWNpdHlcIiwgzrUpLnJlbW92ZSgpLCB0aWNrVXBkYXRlID0gZDMudHJhbnNpdGlvbih0aWNrLm9yZGVyKCkpLnN0eWxlKFwib3BhY2l0eVwiLCAxKSwgdGlja1NwYWNpbmcgPSBNYXRoLm1heChpbm5lclRpY2tTaXplLCAwKSArIHRpY2tQYWRkaW5nLCB0aWNrVHJhbnNmb3JtO1xuICAgICAgICB2YXIgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHNjYWxlMSksIHBhdGggPSBnLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbIDAgXSksIHBhdGhVcGRhdGUgPSAocGF0aC5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpLCBcbiAgICAgICAgZDMudHJhbnNpdGlvbihwYXRoKSk7XG4gICAgICAgIHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpO1xuICAgICAgICB0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKTtcbiAgICAgICAgdmFyIGxpbmVFbnRlciA9IHRpY2tFbnRlci5zZWxlY3QoXCJsaW5lXCIpLCBsaW5lVXBkYXRlID0gdGlja1VwZGF0ZS5zZWxlY3QoXCJsaW5lXCIpLCB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpLnRleHQodGlja0Zvcm1hdCksIHRleHRFbnRlciA9IHRpY2tFbnRlci5zZWxlY3QoXCJ0ZXh0XCIpLCB0ZXh0VXBkYXRlID0gdGlja1VwZGF0ZS5zZWxlY3QoXCJ0ZXh0XCIpLCBzaWduID0gb3JpZW50ID09PSBcInRvcFwiIHx8IG9yaWVudCA9PT0gXCJsZWZ0XCIgPyAtMSA6IDEsIHgxLCB4MiwgeTEsIHkyO1xuICAgICAgICBpZiAob3JpZW50ID09PSBcImJvdHRvbVwiIHx8IG9yaWVudCA9PT0gXCJ0b3BcIikge1xuICAgICAgICAgIHRpY2tUcmFuc2Zvcm0gPSBkM19zdmdfYXhpc1gsIHgxID0gXCJ4XCIsIHkxID0gXCJ5XCIsIHgyID0gXCJ4MlwiLCB5MiA9IFwieTJcIjtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJkeVwiLCBzaWduIDwgMCA/IFwiMGVtXCIgOiBcIi43MWVtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIik7XG4gICAgICAgICAgcGF0aFVwZGF0ZS5hdHRyKFwiZFwiLCBcIk1cIiArIHJhbmdlWzBdICsgXCIsXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSArIFwiVjBIXCIgKyByYW5nZVsxXSArIFwiVlwiICsgc2lnbiAqIG91dGVyVGlja1NpemUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tUcmFuc2Zvcm0gPSBkM19zdmdfYXhpc1ksIHgxID0gXCJ5XCIsIHkxID0gXCJ4XCIsIHgyID0gXCJ5MlwiLCB5MiA9IFwieDJcIjtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJkeVwiLCBcIi4zMmVtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgc2lnbiA8IDAgPyBcImVuZFwiIDogXCJzdGFydFwiKTtcbiAgICAgICAgICBwYXRoVXBkYXRlLmF0dHIoXCJkXCIsIFwiTVwiICsgc2lnbiAqIG91dGVyVGlja1NpemUgKyBcIixcIiArIHJhbmdlWzBdICsgXCJIMFZcIiArIHJhbmdlWzFdICsgXCJIXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUVudGVyLmF0dHIoeTIsIHNpZ24gKiBpbm5lclRpY2tTaXplKTtcbiAgICAgICAgdGV4dEVudGVyLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG4gICAgICAgIGxpbmVVcGRhdGUuYXR0cih4MiwgMCkuYXR0cih5Miwgc2lnbiAqIGlubmVyVGlja1NpemUpO1xuICAgICAgICB0ZXh0VXBkYXRlLmF0dHIoeDEsIDApLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG4gICAgICAgIGlmIChzY2FsZTEucmFuZ2VCYW5kKSB7XG4gICAgICAgICAgdmFyIHggPSBzY2FsZTEsIGR4ID0geC5yYW5nZUJhbmQoKSAvIDI7XG4gICAgICAgICAgc2NhbGUwID0gc2NhbGUxID0gZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIHgoZCkgKyBkeDtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHNjYWxlMC5yYW5nZUJhbmQpIHtcbiAgICAgICAgICBzY2FsZTAgPSBzY2FsZTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGlja0V4aXQuY2FsbCh0aWNrVHJhbnNmb3JtLCBzY2FsZTEsIHNjYWxlMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGlja0VudGVyLmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUwLCBzY2FsZTEpO1xuICAgICAgICB0aWNrVXBkYXRlLmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUxLCBzY2FsZTEpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGF4aXMuc2NhbGUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzY2FsZTtcbiAgICAgIHNjYWxlID0geDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy5vcmllbnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmllbnQ7XG4gICAgICBvcmllbnQgPSB4IGluIGQzX3N2Z19heGlzT3JpZW50cyA/IHggKyBcIlwiIDogZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrQXJndW1lbnRzXztcbiAgICAgIHRpY2tBcmd1bWVudHNfID0gZDNfYXJyYXkoYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja1ZhbHVlcztcbiAgICAgIHRpY2tWYWx1ZXMgPSB4O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrRm9ybWF0XztcbiAgICAgIHRpY2tGb3JtYXRfID0geDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbikgcmV0dXJuIGlubmVyVGlja1NpemU7XG4gICAgICBpbm5lclRpY2tTaXplID0gK3g7XG4gICAgICBvdXRlclRpY2tTaXplID0gK2FyZ3VtZW50c1tuIC0gMV07XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMuaW5uZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGlubmVyVGlja1NpemU7XG4gICAgICBpbm5lclRpY2tTaXplID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMub3V0ZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dGVyVGlja1NpemU7XG4gICAgICBvdXRlclRpY2tTaXplID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrUGFkZGluZztcbiAgICAgIHRpY2tQYWRkaW5nID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1N1YmRpdmlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggJiYgYXhpcztcbiAgICB9O1xuICAgIHJldHVybiBheGlzO1xuICB9O1xuICB2YXIgZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50ID0gXCJib3R0b21cIiwgZDNfc3ZnX2F4aXNPcmllbnRzID0ge1xuICAgIHRvcDogMSxcbiAgICByaWdodDogMSxcbiAgICBib3R0b206IDEsXG4gICAgbGVmdDogMVxuICB9O1xuICBmdW5jdGlvbiBkM19zdmdfYXhpc1goc2VsZWN0aW9uLCB4MCwgeDEpIHtcbiAgICBzZWxlY3Rpb24uYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgdjAgPSB4MChkKTtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIChpc0Zpbml0ZSh2MCkgPyB2MCA6IHgxKGQpKSArIFwiLDApXCI7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2F4aXNZKHNlbGVjdGlvbiwgeTAsIHkxKSB7XG4gICAgc2VsZWN0aW9uLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIHYwID0geTAoZCk7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArIChpc0Zpbml0ZSh2MCkgPyB2MCA6IHkxKGQpKSArIFwiKVwiO1xuICAgIH0pO1xuICB9XG4gIGQzLnN2Zy5icnVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goYnJ1c2gsIFwiYnJ1c2hzdGFydFwiLCBcImJydXNoXCIsIFwiYnJ1c2hlbmRcIiksIHggPSBudWxsLCB5ID0gbnVsbCwgeEV4dGVudCA9IFsgMCwgMCBdLCB5RXh0ZW50ID0gWyAwLCAwIF0sIHhFeHRlbnREb21haW4sIHlFeHRlbnREb21haW4sIHhDbGFtcCA9IHRydWUsIHlDbGFtcCA9IHRydWUsIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWzBdO1xuICAgIGZ1bmN0aW9uIGJydXNoKGcpIHtcbiAgICAgIGcuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGcgPSBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKS5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIikub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgYnJ1c2hzdGFydCkub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIGJydXNoc3RhcnQpO1xuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGcuc2VsZWN0QWxsKFwiLmJhY2tncm91bmRcIikuZGF0YShbIDAgXSk7XG4gICAgICAgIGJhY2tncm91bmQuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBcImJhY2tncm91bmRcIikuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpLnN0eWxlKFwiY3Vyc29yXCIsIFwiY3Jvc3NoYWlyXCIpO1xuICAgICAgICBnLnNlbGVjdEFsbChcIi5leHRlbnRcIikuZGF0YShbIDAgXSkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBcImV4dGVudFwiKS5zdHlsZShcImN1cnNvclwiLCBcIm1vdmVcIik7XG4gICAgICAgIHZhciByZXNpemUgPSBnLnNlbGVjdEFsbChcIi5yZXNpemVcIikuZGF0YShyZXNpemVzLCBkM19pZGVudGl0eSk7XG4gICAgICAgIHJlc2l6ZS5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgIHJlc2l6ZS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gXCJyZXNpemUgXCIgKyBkO1xuICAgICAgICB9KS5zdHlsZShcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIGQzX3N2Z19icnVzaEN1cnNvcltkXTtcbiAgICAgICAgfSkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIC9bZXddJC8udGVzdChkKSA/IC0zIDogbnVsbDtcbiAgICAgICAgfSkuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiAvXltuc10vLnRlc3QoZCkgPyAtMyA6IG51bGw7XG4gICAgICAgIH0pLmF0dHIoXCJ3aWR0aFwiLCA2KS5hdHRyKFwiaGVpZ2h0XCIsIDYpLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgcmVzaXplLnN0eWxlKFwiZGlzcGxheVwiLCBicnVzaC5lbXB0eSgpID8gXCJub25lXCIgOiBudWxsKTtcbiAgICAgICAgdmFyIGdVcGRhdGUgPSBkMy50cmFuc2l0aW9uKGcpLCBiYWNrZ3JvdW5kVXBkYXRlID0gZDMudHJhbnNpdGlvbihiYWNrZ3JvdW5kKSwgcmFuZ2U7XG4gICAgICAgIGlmICh4KSB7XG4gICAgICAgICAgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHgpO1xuICAgICAgICAgIGJhY2tncm91bmRVcGRhdGUuYXR0cihcInhcIiwgcmFuZ2VbMF0pLmF0dHIoXCJ3aWR0aFwiLCByYW5nZVsxXSAtIHJhbmdlWzBdKTtcbiAgICAgICAgICByZWRyYXdYKGdVcGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh5KSB7XG4gICAgICAgICAgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHkpO1xuICAgICAgICAgIGJhY2tncm91bmRVcGRhdGUuYXR0cihcInlcIiwgcmFuZ2VbMF0pLmF0dHIoXCJoZWlnaHRcIiwgcmFuZ2VbMV0gLSByYW5nZVswXSk7XG4gICAgICAgICAgcmVkcmF3WShnVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZWRyYXcoZ1VwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYnJ1c2guZXZlbnQgPSBmdW5jdGlvbihnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBldmVudF8gPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpLCBleHRlbnQxID0ge1xuICAgICAgICAgIHg6IHhFeHRlbnQsXG4gICAgICAgICAgeTogeUV4dGVudCxcbiAgICAgICAgICBpOiB4RXh0ZW50RG9tYWluLFxuICAgICAgICAgIGo6IHlFeHRlbnREb21haW5cbiAgICAgICAgfSwgZXh0ZW50MCA9IHRoaXMuX19jaGFydF9fIHx8IGV4dGVudDE7XG4gICAgICAgIHRoaXMuX19jaGFydF9fID0gZXh0ZW50MTtcbiAgICAgICAgaWYgKGQzX3RyYW5zaXRpb25Jbmhlcml0SWQpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSBleHRlbnQwLmk7XG4gICAgICAgICAgICB5RXh0ZW50RG9tYWluID0gZXh0ZW50MC5qO1xuICAgICAgICAgICAgeEV4dGVudCA9IGV4dGVudDAueDtcbiAgICAgICAgICAgIHlFeHRlbnQgPSBleHRlbnQwLnk7XG4gICAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkudHdlZW4oXCJicnVzaDpicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB4aSA9IGQzX2ludGVycG9sYXRlQXJyYXkoeEV4dGVudCwgZXh0ZW50MS54KSwgeWkgPSBkM19pbnRlcnBvbGF0ZUFycmF5KHlFeHRlbnQsIGV4dGVudDEueSk7XG4gICAgICAgICAgICB4RXh0ZW50RG9tYWluID0geUV4dGVudERvbWFpbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICB4RXh0ZW50ID0gZXh0ZW50MS54ID0geGkodCk7XG4gICAgICAgICAgICAgIHlFeHRlbnQgPSBleHRlbnQxLnkgPSB5aSh0KTtcbiAgICAgICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG4gICAgICAgICAgICAgICAgbW9kZTogXCJyZXNpemVcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkuZWFjaChcImVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSBleHRlbnQxLmk7XG4gICAgICAgICAgICB5RXh0ZW50RG9tYWluID0gZXh0ZW50MS5qO1xuICAgICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJicnVzaFwiLFxuICAgICAgICAgICAgICBtb2RlOiBcInJlc2l6ZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hzdGFydFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hcIixcbiAgICAgICAgICAgIG1vZGU6IFwicmVzaXplXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgdHlwZTogXCJicnVzaGVuZFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgZnVuY3Rpb24gcmVkcmF3KGcpIHtcbiAgICAgIGcuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeEV4dGVudFsrL2UkLy50ZXN0KGQpXSArIFwiLFwiICsgeUV4dGVudFsrL15zLy50ZXN0KGQpXSArIFwiKVwiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHJhd1goZykge1xuICAgICAgZy5zZWxlY3QoXCIuZXh0ZW50XCIpLmF0dHIoXCJ4XCIsIHhFeHRlbnRbMF0pO1xuICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50LC5uPnJlY3QsLnM+cmVjdFwiKS5hdHRyKFwid2lkdGhcIiwgeEV4dGVudFsxXSAtIHhFeHRlbnRbMF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWRyYXdZKGcpIHtcbiAgICAgIGcuc2VsZWN0KFwiLmV4dGVudFwiKS5hdHRyKFwieVwiLCB5RXh0ZW50WzBdKTtcbiAgICAgIGcuc2VsZWN0QWxsKFwiLmV4dGVudCwuZT5yZWN0LC53PnJlY3RcIikuYXR0cihcImhlaWdodFwiLCB5RXh0ZW50WzFdIC0geUV4dGVudFswXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJydXNoc3RhcnQoKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgZXZlbnRUYXJnZXQgPSBkMy5zZWxlY3QoZDMuZXZlbnQudGFyZ2V0KSwgZXZlbnRfID0gZXZlbnQub2YodGFyZ2V0LCBhcmd1bWVudHMpLCBnID0gZDMuc2VsZWN0KHRhcmdldCksIHJlc2l6aW5nID0gZXZlbnRUYXJnZXQuZGF0dW0oKSwgcmVzaXppbmdYID0gIS9eKG58cykkLy50ZXN0KHJlc2l6aW5nKSAmJiB4LCByZXNpemluZ1kgPSAhL14oZXx3KSQvLnRlc3QocmVzaXppbmcpICYmIHksIGRyYWdnaW5nID0gZXZlbnRUYXJnZXQuY2xhc3NlZChcImV4dGVudFwiKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgY2VudGVyLCBvcmlnaW4gPSBkMy5tb3VzZSh0YXJnZXQpLCBvZmZzZXQ7XG4gICAgICB2YXIgdyA9IGQzLnNlbGVjdChkM193aW5kb3codGFyZ2V0KSkub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd24pLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXApO1xuICAgICAgaWYgKGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIHcub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcInRvdWNoZW5kLmJydXNoXCIsIGJydXNoZW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHcub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcIm1vdXNldXAuYnJ1c2hcIiwgYnJ1c2hlbmQpO1xuICAgICAgfVxuICAgICAgZy5pbnRlcnJ1cHQoKS5zZWxlY3RBbGwoXCIqXCIpLmludGVycnVwdCgpO1xuICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbMF0gLSBvcmlnaW5bMF07XG4gICAgICAgIG9yaWdpblsxXSA9IHlFeHRlbnRbMF0gLSBvcmlnaW5bMV07XG4gICAgICB9IGVsc2UgaWYgKHJlc2l6aW5nKSB7XG4gICAgICAgIHZhciBleCA9ICsvdyQvLnRlc3QocmVzaXppbmcpLCBleSA9ICsvXm4vLnRlc3QocmVzaXppbmcpO1xuICAgICAgICBvZmZzZXQgPSBbIHhFeHRlbnRbMSAtIGV4XSAtIG9yaWdpblswXSwgeUV4dGVudFsxIC0gZXldIC0gb3JpZ2luWzFdIF07XG4gICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbZXhdO1xuICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50W2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoZDMuZXZlbnQuYWx0S2V5KSBjZW50ZXIgPSBvcmlnaW4uc2xpY2UoKTtcbiAgICAgIGcuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIikuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5zdHlsZShcImRpc3BsYXlcIiwgbnVsbCk7XG4gICAgICBkMy5zZWxlY3QoXCJib2R5XCIpLnN0eWxlKFwiY3Vyc29yXCIsIGV2ZW50VGFyZ2V0LnN0eWxlKFwiY3Vyc29yXCIpKTtcbiAgICAgIGV2ZW50Xyh7XG4gICAgICAgIHR5cGU6IFwiYnJ1c2hzdGFydFwiXG4gICAgICB9KTtcbiAgICAgIGJydXNobW92ZSgpO1xuICAgICAgZnVuY3Rpb24ga2V5ZG93bigpIHtcbiAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIpIHtcbiAgICAgICAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICAgICAgICBjZW50ZXIgPSBudWxsO1xuICAgICAgICAgICAgb3JpZ2luWzBdIC09IHhFeHRlbnRbMV07XG4gICAgICAgICAgICBvcmlnaW5bMV0gLT0geUV4dGVudFsxXTtcbiAgICAgICAgICAgIGRyYWdnaW5nID0gMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBrZXl1cCgpIHtcbiAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIgJiYgZHJhZ2dpbmcgPT0gMikge1xuICAgICAgICAgIG9yaWdpblswXSArPSB4RXh0ZW50WzFdO1xuICAgICAgICAgIG9yaWdpblsxXSArPSB5RXh0ZW50WzFdO1xuICAgICAgICAgIGRyYWdnaW5nID0gMDtcbiAgICAgICAgICBkM19ldmVudFByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJydXNobW92ZSgpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gZDMubW91c2UodGFyZ2V0KSwgbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgIHBvaW50WzBdICs9IG9mZnNldFswXTtcbiAgICAgICAgICBwb2ludFsxXSArPSBvZmZzZXRbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgICAgIGlmIChkMy5ldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgIGlmICghY2VudGVyKSBjZW50ZXIgPSBbICh4RXh0ZW50WzBdICsgeEV4dGVudFsxXSkgLyAyLCAoeUV4dGVudFswXSArIHlFeHRlbnRbMV0pIC8gMiBdO1xuICAgICAgICAgICAgb3JpZ2luWzBdID0geEV4dGVudFsrKHBvaW50WzBdIDwgY2VudGVyWzBdKV07XG4gICAgICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50WysocG9pbnRbMV0gPCBjZW50ZXJbMV0pXTtcbiAgICAgICAgICB9IGVsc2UgY2VudGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzaXppbmdYICYmIG1vdmUxKHBvaW50LCB4LCAwKSkge1xuICAgICAgICAgIHJlZHJhd1goZyk7XG4gICAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNpemluZ1kgJiYgbW92ZTEocG9pbnQsIHksIDEpKSB7XG4gICAgICAgICAgcmVkcmF3WShnKTtcbiAgICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vdmVkKSB7XG4gICAgICAgICAgcmVkcmF3KGcpO1xuICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG4gICAgICAgICAgICBtb2RlOiBkcmFnZ2luZyA/IFwibW92ZVwiIDogXCJyZXNpemVcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBtb3ZlMShwb2ludCwgc2NhbGUsIGkpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gZDNfc2NhbGVSYW5nZShzY2FsZSksIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV0sIHBvc2l0aW9uID0gb3JpZ2luW2ldLCBleHRlbnQgPSBpID8geUV4dGVudCA6IHhFeHRlbnQsIHNpemUgPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIG1pbiwgbWF4O1xuICAgICAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgICAgICByMCAtPSBwb3NpdGlvbjtcbiAgICAgICAgICByMSAtPSBzaXplICsgcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gKGkgPyB5Q2xhbXAgOiB4Q2xhbXApID8gTWF0aC5tYXgocjAsIE1hdGgubWluKHIxLCBwb2ludFtpXSkpIDogcG9pbnRbaV07XG4gICAgICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgICAgIG1heCA9IChtaW4gKz0gcG9zaXRpb24pICsgc2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY2VudGVyKSBwb3NpdGlvbiA9IE1hdGgubWF4KHIwLCBNYXRoLm1pbihyMSwgMiAqIGNlbnRlcltpXSAtIG1pbikpO1xuICAgICAgICAgIGlmIChwb3NpdGlvbiA8IG1pbikge1xuICAgICAgICAgICAgbWF4ID0gbWluO1xuICAgICAgICAgICAgbWluID0gcG9zaXRpb247XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heCA9IHBvc2l0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZW50WzBdICE9IG1pbiB8fCBleHRlbnRbMV0gIT0gbWF4KSB7XG4gICAgICAgICAgaWYgKGkpIHlFeHRlbnREb21haW4gPSBudWxsOyBlbHNlIHhFeHRlbnREb21haW4gPSBudWxsO1xuICAgICAgICAgIGV4dGVudFswXSA9IG1pbjtcbiAgICAgICAgICBleHRlbnRbMV0gPSBtYXg7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJydXNoZW5kKCkge1xuICAgICAgICBicnVzaG1vdmUoKTtcbiAgICAgICAgZy5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpLnNlbGVjdEFsbChcIi5yZXNpemVcIikuc3R5bGUoXCJkaXNwbGF5XCIsIGJydXNoLmVtcHR5KCkgPyBcIm5vbmVcIiA6IG51bGwpO1xuICAgICAgICBkMy5zZWxlY3QoXCJib2R5XCIpLnN0eWxlKFwiY3Vyc29yXCIsIG51bGwpO1xuICAgICAgICB3Lm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG51bGwpLm9uKFwibW91c2V1cC5icnVzaFwiLCBudWxsKS5vbihcInRvdWNobW92ZS5icnVzaFwiLCBudWxsKS5vbihcInRvdWNoZW5kLmJydXNoXCIsIG51bGwpLm9uKFwia2V5ZG93bi5icnVzaFwiLCBudWxsKS5vbihcImtleXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgICBkcmFnUmVzdG9yZSgpO1xuICAgICAgICBldmVudF8oe1xuICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYnJ1c2gueCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHg7XG4gICAgICB4ID0gejtcbiAgICAgIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWyF4IDw8IDEgfCAheV07XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC55ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTtcbiAgICAgIHkgPSB6O1xuICAgICAgcmVzaXplcyA9IGQzX3N2Z19icnVzaFJlc2l6ZXNbIXggPDwgMSB8ICF5XTtcbiAgICAgIHJldHVybiBicnVzaDtcbiAgICB9O1xuICAgIGJydXNoLmNsYW1wID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geCAmJiB5ID8gWyB4Q2xhbXAsIHlDbGFtcCBdIDogeCA/IHhDbGFtcCA6IHkgPyB5Q2xhbXAgOiBudWxsO1xuICAgICAgaWYgKHggJiYgeSkgeENsYW1wID0gISF6WzBdLCB5Q2xhbXAgPSAhIXpbMV07IGVsc2UgaWYgKHgpIHhDbGFtcCA9ICEhejsgZWxzZSBpZiAoeSkgeUNsYW1wID0gISF6O1xuICAgICAgcmV0dXJuIGJydXNoO1xuICAgIH07XG4gICAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oeikge1xuICAgICAgdmFyIHgwLCB4MSwgeTAsIHkxLCB0O1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGlmICh4KSB7XG4gICAgICAgICAgaWYgKHhFeHRlbnREb21haW4pIHtcbiAgICAgICAgICAgIHgwID0geEV4dGVudERvbWFpblswXSwgeDEgPSB4RXh0ZW50RG9tYWluWzFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4MCA9IHhFeHRlbnRbMF0sIHgxID0geEV4dGVudFsxXTtcbiAgICAgICAgICAgIGlmICh4LmludmVydCkgeDAgPSB4LmludmVydCh4MCksIHgxID0geC5pbnZlcnQoeDEpO1xuICAgICAgICAgICAgaWYgKHgxIDwgeDApIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoeSkge1xuICAgICAgICAgIGlmICh5RXh0ZW50RG9tYWluKSB7XG4gICAgICAgICAgICB5MCA9IHlFeHRlbnREb21haW5bMF0sIHkxID0geUV4dGVudERvbWFpblsxXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeTAgPSB5RXh0ZW50WzBdLCB5MSA9IHlFeHRlbnRbMV07XG4gICAgICAgICAgICBpZiAoeS5pbnZlcnQpIHkwID0geS5pbnZlcnQoeTApLCB5MSA9IHkuaW52ZXJ0KHkxKTtcbiAgICAgICAgICAgIGlmICh5MSA8IHkwKSB0ID0geTAsIHkwID0geTEsIHkxID0gdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggJiYgeSA/IFsgWyB4MCwgeTAgXSwgWyB4MSwgeTEgXSBdIDogeCA/IFsgeDAsIHgxIF0gOiB5ICYmIFsgeTAsIHkxIF07XG4gICAgICB9XG4gICAgICBpZiAoeCkge1xuICAgICAgICB4MCA9IHpbMF0sIHgxID0gelsxXTtcbiAgICAgICAgaWYgKHkpIHgwID0geDBbMF0sIHgxID0geDFbMF07XG4gICAgICAgIHhFeHRlbnREb21haW4gPSBbIHgwLCB4MSBdO1xuICAgICAgICBpZiAoeC5pbnZlcnQpIHgwID0geCh4MCksIHgxID0geCh4MSk7XG4gICAgICAgIGlmICh4MSA8IHgwKSB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgICAgICAgaWYgKHgwICE9IHhFeHRlbnRbMF0gfHwgeDEgIT0geEV4dGVudFsxXSkgeEV4dGVudCA9IFsgeDAsIHgxIF07XG4gICAgICB9XG4gICAgICBpZiAoeSkge1xuICAgICAgICB5MCA9IHpbMF0sIHkxID0gelsxXTtcbiAgICAgICAgaWYgKHgpIHkwID0geTBbMV0sIHkxID0geTFbMV07XG4gICAgICAgIHlFeHRlbnREb21haW4gPSBbIHkwLCB5MSBdO1xuICAgICAgICBpZiAoeS5pbnZlcnQpIHkwID0geSh5MCksIHkxID0geSh5MSk7XG4gICAgICAgIGlmICh5MSA8IHkwKSB0ID0geTAsIHkwID0geTEsIHkxID0gdDtcbiAgICAgICAgaWYgKHkwICE9IHlFeHRlbnRbMF0gfHwgeTEgIT0geUV4dGVudFsxXSkgeUV4dGVudCA9IFsgeTAsIHkxIF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFicnVzaC5lbXB0eSgpKSB7XG4gICAgICAgIHhFeHRlbnQgPSBbIDAsIDAgXSwgeUV4dGVudCA9IFsgMCwgMCBdO1xuICAgICAgICB4RXh0ZW50RG9tYWluID0geUV4dGVudERvbWFpbiA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICEheCAmJiB4RXh0ZW50WzBdID09IHhFeHRlbnRbMV0gfHwgISF5ICYmIHlFeHRlbnRbMF0gPT0geUV4dGVudFsxXTtcbiAgICB9O1xuICAgIHJldHVybiBkMy5yZWJpbmQoYnJ1c2gsIGV2ZW50LCBcIm9uXCIpO1xuICB9O1xuICB2YXIgZDNfc3ZnX2JydXNoQ3Vyc29yID0ge1xuICAgIG46IFwibnMtcmVzaXplXCIsXG4gICAgZTogXCJldy1yZXNpemVcIixcbiAgICBzOiBcIm5zLXJlc2l6ZVwiLFxuICAgIHc6IFwiZXctcmVzaXplXCIsXG4gICAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICAgIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gICAgc3c6IFwibmVzdy1yZXNpemVcIlxuICB9O1xuICB2YXIgZDNfc3ZnX2JydXNoUmVzaXplcyA9IFsgWyBcIm5cIiwgXCJlXCIsIFwic1wiLCBcIndcIiwgXCJud1wiLCBcIm5lXCIsIFwic2VcIiwgXCJzd1wiIF0sIFsgXCJlXCIsIFwid1wiIF0sIFsgXCJuXCIsIFwic1wiIF0sIFtdIF07XG4gIHZhciBkM190aW1lX2Zvcm1hdCA9IGQzX3RpbWUuZm9ybWF0ID0gZDNfbG9jYWxlX2VuVVMudGltZUZvcm1hdDtcbiAgdmFyIGQzX3RpbWVfZm9ybWF0VXRjID0gZDNfdGltZV9mb3JtYXQudXRjO1xuICB2YXIgZDNfdGltZV9mb3JtYXRJc28gPSBkM190aW1lX2Zvcm1hdFV0YyhcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiKTtcbiAgZDNfdGltZV9mb3JtYXQuaXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpID8gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUgOiBkM190aW1lX2Zvcm1hdElzbztcbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgZDNfdGltZV9mb3JtYXRJc29OYXRpdmUucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG4gIH07XG4gIGQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlLnRvU3RyaW5nID0gZDNfdGltZV9mb3JtYXRJc28udG9TdHJpbmc7XG4gIGQzX3RpbWUuc2Vjb25kID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDFlMykgKiAxZTMpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAxZTMpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpO1xuICB9KTtcbiAgZDNfdGltZS5zZWNvbmRzID0gZDNfdGltZS5zZWNvbmQucmFuZ2U7XG4gIGQzX3RpbWUuc2Vjb25kcy51dGMgPSBkM190aW1lLnNlY29uZC51dGMucmFuZ2U7XG4gIGQzX3RpbWUubWludXRlID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDZlNCkgKiA2ZTQpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiA2ZTQpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xuICB9KTtcbiAgZDNfdGltZS5taW51dGVzID0gZDNfdGltZS5taW51dGUucmFuZ2U7XG4gIGQzX3RpbWUubWludXRlcy51dGMgPSBkM190aW1lLm1pbnV0ZS51dGMucmFuZ2U7XG4gIGQzX3RpbWUuaG91ciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB0aW1lem9uZSA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwO1xuICAgIHJldHVybiBuZXcgZDNfZGF0ZSgoTWF0aC5mbG9vcihkYXRlIC8gMzZlNSAtIHRpbWV6b25lKSArIHRpbWV6b25lKSAqIDM2ZTUpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAzNmU1KTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG4gIH0pO1xuICBkM190aW1lLmhvdXJzID0gZDNfdGltZS5ob3VyLnJhbmdlO1xuICBkM190aW1lLmhvdXJzLnV0YyA9IGQzX3RpbWUuaG91ci51dGMucmFuZ2U7XG4gIGQzX3RpbWUubW9udGggPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSk7XG4gICAgZGF0ZS5zZXREYXRlKDEpO1xuICAgIHJldHVybiBkYXRlO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xuICB9KTtcbiAgZDNfdGltZS5tb250aHMgPSBkM190aW1lLm1vbnRoLnJhbmdlO1xuICBkM190aW1lLm1vbnRocy51dGMgPSBkM190aW1lLm1vbnRoLnV0Yy5yYW5nZTtcbiAgZnVuY3Rpb24gZDNfdGltZV9zY2FsZShsaW5lYXIsIG1ldGhvZHMsIGZvcm1hdCkge1xuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIoeCk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3NjYWxlRGF0ZShsaW5lYXIuaW52ZXJ0KHgpKTtcbiAgICB9O1xuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmVhci5kb21haW4oKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpO1xuICAgICAgbGluZWFyLmRvbWFpbih4KTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRpY2tNZXRob2QoZXh0ZW50LCBjb3VudCkge1xuICAgICAgdmFyIHNwYW4gPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIHRhcmdldCA9IHNwYW4gLyBjb3VudCwgaSA9IGQzLmJpc2VjdChkM190aW1lX3NjYWxlU3RlcHMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gaSA9PSBkM190aW1lX3NjYWxlU3RlcHMubGVuZ3RoID8gWyBtZXRob2RzLnllYXIsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShleHRlbnQubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQgLyAzMTUzNmU2O1xuICAgICAgfSksIGNvdW50KVsyXSBdIDogIWkgPyBbIGQzX3RpbWVfc2NhbGVNaWxsaXNlY29uZHMsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShleHRlbnQsIGNvdW50KVsyXSBdIDogbWV0aG9kc1t0YXJnZXQgLyBkM190aW1lX3NjYWxlU3RlcHNbaSAtIDFdIDwgZDNfdGltZV9zY2FsZVN0ZXBzW2ldIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcbiAgICB9XG4gICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBza2lwKSB7XG4gICAgICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluKCksIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGRvbWFpbiksIG1ldGhvZCA9IGludGVydmFsID09IG51bGwgPyB0aWNrTWV0aG9kKGV4dGVudCwgMTApIDogdHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiICYmIHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCk7XG4gICAgICBpZiAobWV0aG9kKSBpbnRlcnZhbCA9IG1ldGhvZFswXSwgc2tpcCA9IG1ldGhvZFsxXTtcbiAgICAgIGZ1bmN0aW9uIHNraXBwZWQoZGF0ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKGRhdGUpICYmICFpbnRlcnZhbC5yYW5nZShkYXRlLCBkM190aW1lX3NjYWxlRGF0ZSgrZGF0ZSArIDEpLCBza2lwKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2NhbGUuZG9tYWluKGQzX3NjYWxlX25pY2UoZG9tYWluLCBza2lwID4gMSA/IHtcbiAgICAgICAgZmxvb3I6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB3aGlsZSAoc2tpcHBlZChkYXRlID0gaW50ZXJ2YWwuZmxvb3IoZGF0ZSkpKSBkYXRlID0gZDNfdGltZV9zY2FsZURhdGUoZGF0ZSAtIDEpO1xuICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9LFxuICAgICAgICBjZWlsOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgd2hpbGUgKHNraXBwZWQoZGF0ZSA9IGludGVydmFsLmNlaWwoZGF0ZSkpKSBkYXRlID0gZDNfdGltZV9zY2FsZURhdGUoK2RhdGUgKyAxKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSA6IGludGVydmFsKSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBza2lwKSB7XG4gICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoc2NhbGUuZG9tYWluKCkpLCBtZXRob2QgPSBpbnRlcnZhbCA9PSBudWxsID8gdGlja01ldGhvZChleHRlbnQsIDEwKSA6IHR5cGVvZiBpbnRlcnZhbCA9PT0gXCJudW1iZXJcIiA/IHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCkgOiAhaW50ZXJ2YWwucmFuZ2UgJiYgWyB7XG4gICAgICAgIHJhbmdlOiBpbnRlcnZhbFxuICAgICAgfSwgc2tpcCBdO1xuICAgICAgaWYgKG1ldGhvZCkgaW50ZXJ2YWwgPSBtZXRob2RbMF0sIHNraXAgPSBtZXRob2RbMV07XG4gICAgICByZXR1cm4gaW50ZXJ2YWwucmFuZ2UoZXh0ZW50WzBdLCBkM190aW1lX3NjYWxlRGF0ZSgrZXh0ZW50WzFdICsgMSksIHNraXAgPCAxID8gMSA6IHNraXApO1xuICAgIH07XG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3NjYWxlKGxpbmVhci5jb3B5KCksIG1ldGhvZHMsIGZvcm1hdCk7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGVEYXRlKHQpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodCk7XG4gIH1cbiAgdmFyIGQzX3RpbWVfc2NhbGVTdGVwcyA9IFsgMWUzLCA1ZTMsIDE1ZTMsIDNlNCwgNmU0LCAzZTUsIDllNSwgMThlNSwgMzZlNSwgMTA4ZTUsIDIxNmU1LCA0MzJlNSwgODY0ZTUsIDE3MjhlNSwgNjA0OGU1LCAyNTkyZTYsIDc3NzZlNiwgMzE1MzZlNiBdO1xuICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcyA9IFsgWyBkM190aW1lLnNlY29uZCwgMSBdLCBbIGQzX3RpbWUuc2Vjb25kLCA1IF0sIFsgZDNfdGltZS5zZWNvbmQsIDE1IF0sIFsgZDNfdGltZS5zZWNvbmQsIDMwIF0sIFsgZDNfdGltZS5taW51dGUsIDEgXSwgWyBkM190aW1lLm1pbnV0ZSwgNSBdLCBbIGQzX3RpbWUubWludXRlLCAxNSBdLCBbIGQzX3RpbWUubWludXRlLCAzMCBdLCBbIGQzX3RpbWUuaG91ciwgMSBdLCBbIGQzX3RpbWUuaG91ciwgMyBdLCBbIGQzX3RpbWUuaG91ciwgNiBdLCBbIGQzX3RpbWUuaG91ciwgMTIgXSwgWyBkM190aW1lLmRheSwgMSBdLCBbIGQzX3RpbWUuZGF5LCAyIF0sIFsgZDNfdGltZS53ZWVrLCAxIF0sIFsgZDNfdGltZS5tb250aCwgMSBdLCBbIGQzX3RpbWUubW9udGgsIDMgXSwgWyBkM190aW1lLnllYXIsIDEgXSBdO1xuICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsRm9ybWF0ID0gZDNfdGltZV9mb3JtYXQubXVsdGkoWyBbIFwiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgfSBdLCBbIFwiOiVTXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRTZWNvbmRzKCk7XG4gIH0gXSwgWyBcIiVJOiVNXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRNaW51dGVzKCk7XG4gIH0gXSwgWyBcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRIb3VycygpO1xuICB9IF0sIFsgXCIlYSAlZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0RGF5KCkgJiYgZC5nZXREYXRlKCkgIT0gMTtcbiAgfSBdLCBbIFwiJWIgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldERhdGUoKSAhPSAxO1xuICB9IF0sIFsgXCIlQlwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0TW9udGgoKTtcbiAgfSBdLCBbIFwiJVlcIiwgZDNfdHJ1ZSBdIF0pO1xuICB2YXIgZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcyA9IHtcbiAgICByYW5nZTogZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKSAqIHN0ZXAsICtzdG9wLCBzdGVwKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpO1xuICAgIH0sXG4gICAgZmxvb3I6IGQzX2lkZW50aXR5LFxuICAgIGNlaWw6IGQzX2lkZW50aXR5XG4gIH07XG4gIGQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMueWVhciA9IGQzX3RpbWUueWVhcjtcbiAgZDNfdGltZS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM190aW1lX3NjYWxlKGQzLnNjYWxlLmxpbmVhcigpLCBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLCBkM190aW1lX3NjYWxlTG9jYWxGb3JtYXQpO1xuICB9O1xuICB2YXIgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMgPSBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLm1hcChmdW5jdGlvbihtKSB7XG4gICAgcmV0dXJuIFsgbVswXS51dGMsIG1bMV0gXTtcbiAgfSk7XG4gIHZhciBkM190aW1lX3NjYWxlVXRjRm9ybWF0ID0gZDNfdGltZV9mb3JtYXRVdGMubXVsdGkoWyBbIFwiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgfSBdLCBbIFwiOiVTXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENTZWNvbmRzKCk7XG4gIH0gXSwgWyBcIiVJOiVNXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENNaW51dGVzKCk7XG4gIH0gXSwgWyBcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENIb3VycygpO1xuICB9IF0sIFsgXCIlYSAlZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDRGF5KCkgJiYgZC5nZXRVVENEYXRlKCkgIT0gMTtcbiAgfSBdLCBbIFwiJWIgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldFVUQ0RhdGUoKSAhPSAxO1xuICB9IF0sIFsgXCIlQlwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDTW9udGgoKTtcbiAgfSBdLCBbIFwiJVlcIiwgZDNfdHJ1ZSBdIF0pO1xuICBkM190aW1lX3NjYWxlVXRjTWV0aG9kcy55ZWFyID0gZDNfdGltZS55ZWFyLnV0YztcbiAgZDNfdGltZS5zY2FsZS51dGMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfdGltZV9zY2FsZShkMy5zY2FsZS5saW5lYXIoKSwgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMsIGQzX3RpbWVfc2NhbGVVdGNGb3JtYXQpO1xuICB9O1xuICBkMy50ZXh0ID0gZDNfeGhyVHlwZShmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9KTtcbiAgZDMuanNvbiA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZDNfeGhyKHVybCwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIGQzX2pzb24sIGNhbGxiYWNrKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfanNvbihyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICB9XG4gIGQzLmh0bWwgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGQzX3hocih1cmwsIFwidGV4dC9odG1sXCIsIGQzX2h0bWwsIGNhbGxiYWNrKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfaHRtbChyZXF1ZXN0KSB7XG4gICAgdmFyIHJhbmdlID0gZDNfZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZWxlY3ROb2RlKGQzX2RvY3VtZW50LmJvZHkpO1xuICAgIHJldHVybiByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICB9XG4gIGQzLnhtbCA9IGQzX3hoclR5cGUoZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlWE1MO1xuICB9KTtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB0aGlzLmQzID0gZDMsIGRlZmluZShkMyk7IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZDM7IGVsc2UgdGhpcy5kMyA9IGQzO1xufSgpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2QzL2QzLmpzXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0ICogYXMgJCBmcm9tIFwianF1ZXJ5XCI7XG5cbmV4cG9ydCBjbGFzcyBCYXNlRWxlbWVudCB7XG5cbiAgIGNvbnN0cnVjdG9yIChwcm90ZWN0ZWQgc3ZnOiBkMy5TZWxlY3Rpb248YW55PikgeyB9XG5cbiAgICBnZXQgY3goKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggLyAyO1xuICAgIH1cblxuICAgIGdldCBjeSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQgLyAyO1xuICAgIH1cblxuICAgIGdldCB3aWR0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKyQoXCIudmlzdWFsaXplclwiKS53aWR0aCgpXG4gICAgfVxuXG4gICAgZ2V0IGhlaWdodCgpOiBudW1iZXIgIHtcbiAgICAgICAgcmV0dXJuICskKFwiLnZpc3VhbGl6ZXJcIikuaGVpZ2h0KClcbiAgICB9XG5cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NvbXBvbmVudHMvdmlzdWFsaXplci9lbGVtZW50cy9iYXNlLWVsZW1lbnQudHNcbiAqKi8iLCIvKlxyXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qL1xyXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBsaXN0ID0gW107XHJcblxyXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcclxuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IHRoaXNbaV07XHJcblx0XHRcdGlmKGl0ZW1bMl0pIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGl0ZW1bMV0gKyBcIn1cIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goaXRlbVsxXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcclxuXHR9O1xyXG5cclxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxyXG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcclxuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxyXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XHJcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcclxuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxyXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xyXG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXHJcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXHJcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXHJcblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXHJcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XHJcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XHJcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRyZXR1cm4gbGlzdDtcclxufTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9TYW5zdW1pLVJlZ3VsYXIuZW90XCI7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9zdGF0aWMvZm9udHMvU2Fuc3VtaS1SZWd1bGFyLmVvdFxuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbnZhciBzdHlsZXNJbkRvbSA9IHt9LFxyXG5cdG1lbW9pemUgPSBmdW5jdGlvbihmbikge1xyXG5cdFx0dmFyIG1lbW87XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRyZXR1cm4gbWVtbztcclxuXHRcdH07XHJcblx0fSxcclxuXHRpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiAvbXNpZSBbNi05XVxcYi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcclxuXHR9KSxcclxuXHRnZXRIZWFkRWxlbWVudCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cdH0pLFxyXG5cdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxyXG5cdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxyXG5cdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wID0gW107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRpZih0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcclxuXHRcdGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xyXG5cdH1cclxuXHJcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XHJcblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xyXG5cclxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XHJcblxyXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcclxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xyXG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHR9XHJcblx0XHRpZihuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XHJcblx0XHR9XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcclxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKCk7XHJcblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XHJcblx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XHJcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHR2YXIgc3R5bGVzID0gW107XHJcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XHJcblx0XHR2YXIgaWQgPSBpdGVtWzBdO1xyXG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XHJcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRpZighbmV3U3R5bGVzW2lkXSlcclxuXHRcdFx0c3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcclxuXHRcdGVsc2VcclxuXHRcdFx0bmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xyXG5cdH1cclxuXHRyZXR1cm4gc3R5bGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wW3N0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xyXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRpZighbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcclxuXHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBoZWFkLmZpcnN0Q2hpbGQpO1xyXG5cdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AucHVzaChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XHJcblx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdGlmKGlkeCA+PSAwKSB7XHJcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuXHRzdHlsZUVsZW1lbnQudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRyZXR1cm4gc3R5bGVFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XHJcblx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmtFbGVtZW50KTtcclxuXHRyZXR1cm4gbGlua0VsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xyXG5cdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cclxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcclxuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0c3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XHJcblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSk7XHJcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHR9IGVsc2UgaWYob2JqLnNvdXJjZU1hcCAmJlxyXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHRpZihzdHlsZUVsZW1lbnQuaHJlZilcclxuXHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZShvYmopO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRpZihuZXdPYmopIHtcclxuXHRcdFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcclxuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xyXG5cdH07XHJcbn0pKCk7XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cclxuXHRpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xyXG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGVFbGVtZW50LCBvYmopIHtcclxuXHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblxyXG5cdGlmKG1lZGlhKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXHJcblx0fVxyXG5cclxuXHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcclxuXHR9IGVsc2Uge1xyXG5cdFx0d2hpbGUoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuXHRcdH1cclxuXHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUxpbmsobGlua0VsZW1lbnQsIG9iaikge1xyXG5cdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cclxuXHRpZihzb3VyY2VNYXApIHtcclxuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XHJcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XHJcblx0fVxyXG5cclxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcclxuXHJcblx0dmFyIG9sZFNyYyA9IGxpbmtFbGVtZW50LmhyZWY7XHJcblxyXG5cdGxpbmtFbGVtZW50LmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cclxuXHRpZihvbGRTcmMpXHJcblx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XHJcbn1cclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydCAqIGZyb20gJy4vdHJhbnNmb3JtcydcbmV4cG9ydCAqIGZyb20gJy4vdGV4dC1tYW5pcHVsYXRpb24nXG5leHBvcnQgKiBmcm9tICcuL2RhdGEtbWFwcGVyJ1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2luZGV4LnRzXG4gKiovIiwiKGZ1bmN0aW9uKHNlbGYpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChzZWxmLmZldGNoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gICAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVyYXRvclxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIGxpc3QgPSB0aGlzLm1hcFtuYW1lXVxuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IFtdXG4gICAgICB0aGlzLm1hcFtuYW1lXSA9IGxpc3RcbiAgICB9XG4gICAgbGlzdC5wdXNoKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICAgIHJldHVybiB2YWx1ZXMgPyB2YWx1ZXNbMF0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldIHx8IFtdXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gW25vcm1hbGl6ZVZhbHVlKHZhbHVlKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMubWFwKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwgbmFtZSwgdGhpcylcbiAgICAgIH0sIHRoaXMpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgICByZXR1cm4gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIC8vIE9ubHkgc3VwcG9ydCBBcnJheUJ1ZmZlcnMgZm9yIFBPU1QgbWV0aG9kLlxuICAgICAgICAvLyBSZWNlaXZpbmcgQXJyYXlCdWZmZXJzIGhhcHBlbnMgdmlhIEJsb2JzLCBpbnN0ZWFkLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG5cbiAgICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkID8gcmVqZWN0ZWQgOiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG4gICAgaWYgKFJlcXVlc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoaW5wdXQpKSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gaW5wdXRcbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0J1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcylcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gaGVhZGVycyh4aHIpIHtcbiAgICB2YXIgaGVhZCA9IG5ldyBIZWFkZXJzKClcbiAgICB2YXIgcGFpcnMgPSAoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKS50cmltKCkuc3BsaXQoJ1xcbicpXG4gICAgcGFpcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHZhciBzcGxpdCA9IGhlYWRlci50cmltKCkuc3BsaXQoJzonKVxuICAgICAgdmFyIGtleSA9IHNwbGl0LnNoaWZ0KCkudHJpbSgpXG4gICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc6JykudHJpbSgpXG4gICAgICBoZWFkLmFwcGVuZChrZXksIHZhbHVlKVxuICAgIH0pXG4gICAgcmV0dXJuIGhlYWRcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1c1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHRcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzID8gb3B0aW9ucy5oZWFkZXJzIDogbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfVxuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2VcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdFxuICAgICAgaWYgKFJlcXVlc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoaW5wdXQpICYmICFpbml0KSB7XG4gICAgICAgIHJlcXVlc3QgPSBpbnB1dFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICAgICAgfVxuXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgZnVuY3Rpb24gcmVzcG9uc2VVUkwoKSB7XG4gICAgICAgIGlmICgncmVzcG9uc2VVUkwnIGluIHhocikge1xuICAgICAgICAgIHJldHVybiB4aHIucmVzcG9uc2VVUkxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF2b2lkIHNlY3VyaXR5IHdhcm5pbmdzIG9uIGdldFJlc3BvbnNlSGVhZGVyIHdoZW4gbm90IGFsbG93ZWQgYnkgQ09SU1xuICAgICAgICBpZiAoL15YLVJlcXVlc3QtVVJMOi9tLnRlc3QoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkge1xuICAgICAgICAgIHJldHVybiB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoeGhyKSxcbiAgICAgICAgICB1cmw6IHJlc3BvbnNlVVJMKClcbiAgICAgICAgfVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vd2hhdHdnLWZldGNoL2ZldGNoLmpzXG4gKiogbW9kdWxlIGlkID0gOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNle2ZvbnQtZmFtaWx5OlNhbnN1bWktUmVndWxhcjtzcmM6dXJsKFwiICsgcmVxdWlyZShcIi4vU2Fuc3VtaS1SZWd1bGFyLmVvdFwiKSArIFwiKTtzcmM6dXJsKFwiICsgcmVxdWlyZShcIi4vU2Fuc3VtaS1SZWd1bGFyLndvZmYyXCIpICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSx1cmwoXCIgKyByZXF1aXJlKFwiLi9TYW5zdW1pLVJlZ3VsYXIud29mZlwiKSArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSx1cmwoXCIgKyByZXF1aXJlKFwiLi9TYW5zdW1pLVJlZ3VsYXIudHRmXCIpICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXCIgKyByZXF1aXJlKFwiLi9TYW5zdW1pLVJlZ3VsYXIuc3ZnXCIpICsgXCIjU2Fuc3VtaS1SZWd1bGFyKSBmb3JtYXQoXFxcInN2Z1xcXCIpLHVybChcIiArIHJlcXVpcmUoXCIuL1NhbnN1bWktUmVndWxhci5lb3RcIikgKyBcIj8jaWVmaXgpIGZvcm1hdChcXFwiZW1iZWRkZWQtb3BlbnR5cGVcXFwiKTtmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL34vcG9zdGNzcy1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyIS4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3JtYWxpemUtc2NzcyB8IE1JVC9HUEx2MiBMaWNlbnNlIHwgYml0Lmx5L25vcm1hbGl6ZS1zY3NzICovaHRtbHtmb250LWZhbWlseTpzYW5zLXNlcmlmOy1tcy10ZXh0LXNpemUtYWRqdXN0OjEwMCU7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OjEwMCV9Ym9keXttYXJnaW46MH1hcnRpY2xlLGFzaWRlLGRldGFpbHMsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGhlYWRlcixtYWluLG1lbnUsbmF2LHNlY3Rpb24sc3VtbWFyeXtkaXNwbGF5OmJsb2NrfWF1ZGlvLGNhbnZhcyxwcm9ncmVzcyx2aWRlb3tkaXNwbGF5OmlubGluZS1ibG9ja31hdWRpbzpub3QoW2NvbnRyb2xzXSl7ZGlzcGxheTpub25lO2hlaWdodDowfXByb2dyZXNze3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfVtoaWRkZW5dLHRlbXBsYXRle2Rpc3BsYXk6bm9uZX1he2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcDpvYmplY3RzfWE6YWN0aXZlLGE6aG92ZXJ7b3V0bGluZS13aWR0aDowfWFiYnJbdGl0bGVde2JvcmRlci1ib3R0b206bm9uZTt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUgZG90dGVkfWIsc3Ryb25ne2ZvbnQtd2VpZ2h0OmluaGVyaXQ7Zm9udC13ZWlnaHQ6Ym9sZGVyfWNvZGUsa2JkLHNhbXB7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLG1vbm9zcGFjZTtmb250LXNpemU6MWVtfWRmbntmb250LXN0eWxlOml0YWxpY31oMXtmb250LXNpemU6MmVtO21hcmdpbjouNzVlbSAwfW1hcmt7YmFja2dyb3VuZC1jb2xvcjojZmYwO2NvbG9yOiMwMDB9c21hbGx7Zm9udC1zaXplOjgwJX1zdWIsc3Vwe2ZvbnQtc2l6ZTo3NSU7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjpyZWxhdGl2ZTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX1zdWJ7Ym90dG9tOi0uMjVlbX1zdXB7dG9wOi0uNWVtfWltZ3tib3JkZXItc3R5bGU6bm9uZX1zdmc6bm90KDpyb290KXtvdmVyZmxvdzpoaWRkZW59ZmlndXJle21hcmdpbjoxLjVlbSA0MHB4fWhye2JveC1zaXppbmc6Y29udGVudC1ib3g7aGVpZ2h0OjA7b3ZlcmZsb3c6dmlzaWJsZX1wcmV7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLG1vbm9zcGFjZTtmb250LXNpemU6MWVtfWJ1dHRvbixpbnB1dCxvcHRncm91cCxzZWxlY3QsdGV4dGFyZWF7Zm9udDppbmhlcml0O21hcmdpbjowfWJ1dHRvbntvdmVyZmxvdzp2aXNpYmxlfWJ1dHRvbixzZWxlY3R7dGV4dC10cmFuc2Zvcm06bm9uZX1bdHlwZT1yZXNldF0sW3R5cGU9c3VibWl0XSxidXR0b24saHRtbCBbdHlwZT1idXR0b25dey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b259W3R5cGU9YnV0dG9uXTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1yZXNldF06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9c3VibWl0XTo6LW1vei1mb2N1cy1pbm5lcixidXR0b246Oi1tb3otZm9jdXMtaW5uZXJ7Ym9yZGVyLXN0eWxlOm5vbmU7cGFkZGluZzowfVt0eXBlPWJ1dHRvbl06LW1vei1mb2N1c3JpbmcsW3R5cGU9cmVzZXRdOi1tb3otZm9jdXNyaW5nLFt0eXBlPXN1Ym1pdF06LW1vei1mb2N1c3JpbmcsYnV0dG9uOi1tb3otZm9jdXNyaW5ne291dGxpbmU6MXB4IGRvdHRlZCBCdXR0b25UZXh0fWlucHV0e292ZXJmbG93OnZpc2libGV9W3R5cGU9Y2hlY2tib3hdLFt0eXBlPXJhZGlvXXtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzowfVt0eXBlPW51bWJlcl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sW3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbntoZWlnaHQ6YXV0b31bdHlwZT1zZWFyY2hdey13ZWJraXQtYXBwZWFyYW5jZTp0ZXh0ZmllbGQ7b3V0bGluZS1vZmZzZXQ6LTJweH1bdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb257LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOmluaGVyaXQ7b3BhY2l0eTouNTR9Ojotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbnstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO2ZvbnQ6aW5oZXJpdH1maWVsZHNldHtib3JkZXI6MXB4IHNvbGlkIHNpbHZlcjttYXJnaW46MCAycHg7cGFkZGluZzouMzVlbSAuNjI1ZW0gLjc1ZW19bGVnZW5ke2JveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OnRhYmxlO21heC13aWR0aDoxMDAlO3doaXRlLXNwYWNlOm5vcm1hbDtjb2xvcjppbmhlcml0O3BhZGRpbmc6MH1vcHRncm91cHtmb250LXdlaWdodDo3MDB9dGV4dGFyZWF7b3ZlcmZsb3c6YXV0b31oMSxoMixsYWJlbCxwe2ZvbnQtZmFtaWx5OlNhbnN1bWktUmVndWxhcn1ib2R5LGh0bWx7aGVpZ2h0OjEwMCU7ZmxleC1kaXJlY3Rpb246Y29sdW1uO21pbi1oZWlnaHQ6MTAwdmh9bGFiZWx7Zm9udC1zaXplOjEycHh9aDF7Zm9udC1zaXplOjE4cHh9aDJ7Zm9udC1zaXplOjE2cHh9LmNvbnRlbnR7d2lkdGg6MTAwJTtoZWlnaHQ6Y2FsYygxMDAlIC0gODBweCk7ZGlzcGxheTpmbGV4O2ZsZXg6MX0ubm9kZSBjaXJjbGV7c3Ryb2tlOiMxZmJhZDc7c3Ryb2tlLXdpZHRoOjJweH0ubm9kZSAubm9kZS1jb2xvci0xe2ZpbGw6IzZlODY4ZH0ubm9kZSAubm9kZS1jb2xvci0ye2ZpbGw6IzU2NzE3YX0ubm9kZSAubm9kZS1jb2xvci0ze2ZpbGw6IzNlNWQ2N30ubm9kZSAubm9kZS1jb2xvci00e2ZpbGw6IzI2NDk1NH0ubm9kZSAubm9kZS1jb2xvci01e2ZpbGw6IzBlMzU0MX0ubm9kZSBkaXZ7ZGlzcGxheTp0YWJsZTtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO292ZXJmbG93OmhpZGRlbn0ubm9kZSBwe2ZvbnQtc2l6ZTo4cHg7Y29sb3I6I2YyZjJmMjt0ZXh0LXNoYWRvdzoxcHggMXB4IDRweCAjMGUzNTQxO2Rpc3BsYXk6dGFibGUtY2VsbDt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LmxvYWRlciBjaXJjbGV7ZmlsbC1vcGFjaXR5OjA7c3Ryb2tlOiMxZjc3YjQ7c3Ryb2tlLXdpZHRoOjNweH0ubG9hZGVyIHJlY3R7ZmlsbDojZmZmfS52aXN1YWxpemVye3dpZHRoOjEwMCU7ZmxleDoxfS50b3AtYmFye2JhY2tncm91bmQtY29sb3I6IzA5MDkxYTtoZWlnaHQ6ODBweDtjb2xvcjojZjJmMmYyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZy1sZWZ0OjQ4cHh9LnRvcC1iYXIgcHtwYWRkaW5nLWxlZnQ6MTZweDttYXJnaW46MH0ubWVudXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Y29sb3I6IzA5MDkxYTtmbGV4OjAgMCAxNmVtO2JvcmRlci1yaWdodDoxcHggc29saWQgIzA5MDkxYTtwYWRkaW5nLXRvcDo1MHB4fS5tZW51IGRpdiwubWVudSBoMiwubWVudSBpbWcsLm1lbnUgaW5wdXR7cGFkZGluZy1sZWZ0OjQ4cHh9Lm1lbnUgaDEsLm1lbnUgaW1ne2Rpc3BsYXk6aW5saW5lfS5tZW51IGgxe2xpbmUtaGVpZ2h0OjB9Lm1lbnUgaHJ7Y29sb3I6IzA5MDkxYTt3aWR0aDo4MCU7bWFyZ2luLWJvdHRvbToyMHB4fS5tZW51IGlucHV0e21hcmdpbjo1cHggMH1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vc2Fzcy1sb2FkZXIhLi9zcmMvc3R5bGVzLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnN2Z1wiO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci5zdmdcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvU2Fuc3VtaS1SZWd1bGFyLnR0ZlwiO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvc3RhdGljL2ZvbnRzL1NhbnN1bWktUmVndWxhci50dGZcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvU2Fuc3VtaS1SZWd1bGFyLndvZmZcIjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIud29mZlxuICoqIG1vZHVsZSBpZCA9IDE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9TYW5zdW1pLVJlZ3VsYXIud29mZjJcIjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIud29mZjJcbiAqKiBtb2R1bGUgaWQgPSAxNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL1NhbnN1bWktUmVndWxhci5zY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvc3R5bGVzLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0ICcuL3N0eWxlcy5zY3NzJ1xuaW1wb3J0ICcuL3N0YXRpYy9mb250cy9TYW5zdW1pLVJlZ3VsYXIuc2NzcydcblxuaW1wb3J0IHsgTWVudUNvbXBvbmVudCwgVmlzdWFsaXplciB9IGZyb20gJy4vY29tcG9uZW50cydcbmltcG9ydCAqIGFzIGxvZyBmcm9tICdsb2dsZXZlbCdcbmltcG9ydCAqIGFzICQgZnJvbSAnanF1ZXJ5J1xuXG5sb2cuc2V0TGV2ZWwoXCJkZWJ1Z1wiKVxuXG5leHBvcnQgY2xhc3MgQXBwIHtcbiAgICBwcml2YXRlIF92aXN1YWxpemVyOiBWaXN1YWxpemVyO1xuXG4gICAgY29uc3RydWN0b3IoICl7XG4gICAgICAgIHRoaXMuX3Zpc3VhbGl6ZXIgPSBuZXcgVmlzdWFsaXplcihuZXcgTWVudUNvbXBvbmVudCgpLCB7IH0pO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgJCgnYm9keScpLmZhZGVJbihcImZhc3RcIik7XG4gICAgICAgIHRoaXMuX3Zpc3VhbGl6ZXIuZHJhdygpO1xuICAgIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuXG5hcHAuaW5pdCgpO1xuXG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC50c1xuICoqLyIsImV4cG9ydCAqIGZyb20gJy4vbWVudS9tZW51J1xuZXhwb3J0ICogZnJvbSAnLi92aXN1YWxpemVyL3Zpc3VhbGl6ZXInXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY29tcG9uZW50cy9pbmRleC50c1xuICoqLyIsIlxuaW1wb3J0IHsgSVNlbGVjdG9yLCBJU2VsZWN0b3JNYW5hZ2VyLCBJU2VsZWN0b3JIaWVyYXJjaHkgfSBmcm9tICcuLi8uLi9tb2RlbCdcblxuaW1wb3J0ICogYXMgJCBmcm9tICdqcXVlcnknXG5cbmNvbnN0IHByaW1hcnlTZWxlY3RvciA9IFwicHJpbWFyeS1zZWxlY3RvcnNcIjtcbmNvbnN0IHNlY29uZGFyeVNlbGVjdG9yID0gXCJzZWNvbmRhcnktc2VsZWN0b3JzXCI7XG5cbmltcG9ydCAqIGFzIGxvZ01hbmFnZXIgZnJvbSAnbG9nbGV2ZWwnXG5sZXQgbG9nID0gbG9nTWFuYWdlci5nZXRMb2dnZXIoXCJtZW51XCIpO1xuXG5cbmludGVyZmFjZSBJRGljdGlvbmFyeSB7XG4gICAgW2luZGV4OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBNZW51Q29tcG9uZW50IGltcGxlbWVudHMgSVNlbGVjdG9yTWFuYWdlciB7XG5cbiAgICBwcml2YXRlIF9zZWxlY3RvcnNIaWVyYXJjaHk6IEFycmF5PElTZWxlY3RvckhpZXJhcmNoeT47XG4gICAgcHJpdmF0ZSBfY2FsbGJhY2s6IChwcmltYXJ5OiBJU2VsZWN0b3IsIHNlY29uZGFyeTogSVNlbGVjdG9yKSA9PiB2b2lkO1xuXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IElEaWN0aW9uYXJ5ID0ge30gYXMgSURpY3Rpb25hcnk7XG5cbiAgICBzZXRTZWxlY3RvcnMoc2VsZWN0b3JzOiBBcnJheTxJU2VsZWN0b3JIaWVyYXJjaHk+KSB7XG4gICAgICAgIGxldCBzZWxlY3RlZFByaW1hcnkgPSBzZWxlY3RvcnNbMF0ucXVlcnk7XG4gICAgICAgIGxldCBzZWxlY3RlZFNlY29uZGFyeSA9IHNlbGVjdG9yc1swXS5jaGlsZHJlblswXS5xdWVyeTtcblxuXG4gICAgICAgIHRoaXMuc2V0U2VsZWN0b3JzSW50ZXJuYWwocHJpbWFyeVNlbGVjdG9yLCBzZWxlY3RvcnMsIHNlbGVjdGVkUHJpbWFyeSk7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0b3JzSW50ZXJuYWwoc2Vjb25kYXJ5U2VsZWN0b3IsIHNlbGVjdG9yc1swXS5jaGlsZHJlbiwgc2VsZWN0ZWRTZWNvbmRhcnkpO1xuXG4gICAgICAgIHRoaXMuX3NlbGVjdG9yc0hpZXJhcmNoeSA9IHNlbGVjdG9ycztcbiAgICB9XG5cbiAgICBzZXRPblNlbGVjdG9yc0NhbGxiYWNrKGNhbGxiYWNrOiAocHJpbWFyeTogSVNlbGVjdG9yLCBzZWNvbmRhcnk6IElTZWxlY3RvcikgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBzZXRTZWxlY3RvcnNJbnRlcm5hbChjYXRlZ29yeTogc3RyaW5nLCBzZWxlY3RvcnM6IEFycmF5PElTZWxlY3Rvcj4sIHNlbGVjdGVkPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkW2NhdGVnb3J5XSA9IHNlbGVjdGVkO1xuICAgICAgICBsZXQgY2F0ZWdvcnlDbGFzcyA9IGAuJHtjYXRlZ29yeX1gXG4gICAgICAgICQoY2F0ZWdvcnlDbGFzcykuZW1wdHkoKTtcblxuICAgICAgICBzZWxlY3RvcnMuZm9yRWFjaCgoc2VsZWN0b3IsIGkpID0+IHtcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZFN0cmluZyA9IHNlbGVjdGVkID09PSBzZWxlY3Rvci5xdWVyeSA/IFwiY2hlY2tlZFwiIDogXCJcIjtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBgXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCIke2NhdGVnb3J5fVwiIGlkPVwiJHtjYXRlZ29yeX0tJHtpfVwiIHZhbHVlPVwiJHtzZWxlY3Rvci5xdWVyeX1cIiAke3NlbGVjdGVkU3RyaW5nfSAvPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCIke2NhdGVnb3J5fS0ke2l9XCI+JHtzZWxlY3Rvci5sYWJlbH08L2xhYmVsPjxicj5cbiAgICAgICAgICAgIGBcbiAgICAgICAgICAgICQoY2F0ZWdvcnlDbGFzcykuYXBwZW5kKGh0bWwpXG4gICAgICAgIH0pO1xuXG4gICAgICAgdGhpcy5hZGRDaGFuZ2VMaXN0ZW5lcihjYXRlZ29yeSk7IFxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkQ2hhbmdlTGlzdGVuZXIoY2F0ZWdvcnk6IHN0cmluZykge1xuICAgICAgICAgbGV0IGNhdGVnb3J5Q2xhc3MgPSBgLiR7Y2F0ZWdvcnl9YFxuICAgICAgICAgJChjYXRlZ29yeUNsYXNzICsgJyBpbnB1dCcpLm9uKFwiY2hhbmdlXCIsIChldmVudDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkVmFsdWUgPSAkKGBpbnB1dFtuYW1lPVwiJHtjYXRlZ29yeX1cIl06Y2hlY2tlZGAsIGNhdGVnb3J5Q2xhc3MpLnZhbCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZFtjYXRlZ29yeV0gPSBzZWxlY3RlZFZhbHVlXG5cbiAgICAgICAgICAgIGlmIChjYXRlZ29yeSA9PT0gcHJpbWFyeVNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gdGhpcy5fc2VsZWN0b3JzSGllcmFyY2h5LmZpbmQoKHMpID0+IHMucXVlcnkgPT09IHNlbGVjdGVkVmFsdWUpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RvcnNJbnRlcm5hbChzZWNvbmRhcnlTZWxlY3Rvciwgc2VsZWN0ZWQuY2hpbGRyZW4sIHNlbGVjdGVkLmNoaWxkcmVuWzBdLnF1ZXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW52b2tlQ2FsbGJhY2soKTtcbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIHByaXZhdGUgaW52b2tlQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihcIkNhbGxiYWNrIGhhcyBub3QgYmVlbiBzZXRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsbGJhY2soeyBxdWVyeTogdGhpcy5fc2VsZWN0ZWRbcHJpbWFyeVNlbGVjdG9yXSB9LCB7IHF1ZXJ5OiB0aGlzLl9zZWxlY3RlZFtzZWNvbmRhcnlTZWxlY3Rvcl0gfSlcbiAgICB9XG5cbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9jb21wb25lbnRzL21lbnUvbWVudS50c1xuICoqLyIsImV4cG9ydCAqIGZyb20gJy4vYmFzZS1lbGVtZW50J1xuZXhwb3J0ICogZnJvbSAnLi9sb2FkZXInXG5leHBvcnQgKiBmcm9tICcuL25vZGUtaGllcmFyY2h5J1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NvbXBvbmVudHMvdmlzdWFsaXplci9lbGVtZW50cy9pbmRleC50c1xuICoqLyIsIlxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnXG5pbXBvcnQgeyBCYXNlRWxlbWVudCB9IGZyb20gJy4vYmFzZS1lbGVtZW50JyBcbmltcG9ydCAqIGFzIGxvZ01hbmFnZXIgZnJvbSAnbG9nbGV2ZWwnXG5sZXQgbG9nID0gbG9nTWFuYWdlci5nZXRMb2dnZXIoXCJsb2FkZXJcIik7XG5cblxuZXhwb3J0IGludGVyZmFjZSBJTG9hZGVyIHtcbiAgICBzdGFydExvYWRlcigpOiB2b2lkO1xuICAgIHN0b3BMb2FkZXIoKTogdm9pZDtcbn1cblxuXG5leHBvcnQgY2xhc3MgU3RhbmRhcmRMb2FkZXIgZXh0ZW5kcyBCYXNlRWxlbWVudCBpbXBsZW1lbnRzIElMb2FkZXIge1xuXG4gICAgLyoqXG4gICAgICogUmFkaXVzIG9mIHRoZSBsb2FkZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIHIgPSA1MDtcbiAgICBwcml2YXRlIGc6IGQzLlNlbGVjdGlvbjxhbnk+O1xuXG4gICAgY29uc3RydWN0b3IgKHN2ZzogZDMuU2VsZWN0aW9uPGFueT4pIHsgXG4gICAgICAgIHN1cGVyKHN2Zyk7XG4gICAgfVxuXG4gXG5cbiAgICBzdGFydExvYWRlcigpIHtcbiAgICAgICAgaWYodGhpcy5nKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoXCJDYWxsaW5nIGFscmVhZHkgc3RhcnRlZCBsb2FkZXJcIilcbiAgICAgICAgICAgIHJldHVybjsgLy8gV2UgaWdub3JlIGNhbGwgaWYgYWxyZWFkeSBsb2FkaW5nLlxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZyA9IHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKFwibG9hZGVyXCIsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuYWRkQ2lyY2xlKHRoaXMuZyk7XG4gICAgICAgIHRoaXMuYWRkUmVjdCh0aGlzLmcpO1xuXG4gICAgfVxuXG4gICAgc3RvcExvYWRlcigpIHtcbiAgICAgICAgaWYodGhpcy5nKSAge1xuICAgICAgICAgICAgdGhpcy5nLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vLyBBZGRzIGEgY2lyY2xlIHRvIHRoZSBzZWxlY3Rpb24uIFRoZSBjaXJjbGUgaXMgcGxhY2VkIGluIHRoZSBjZW50ZXIgb2YgdGhlIGJvYXJkLlxuICAgIHByaXZhdGUgYWRkQ2lyY2xlKHNlbGVjdGlvbjogZDMuU2VsZWN0aW9uPGFueT4pIHtcbiAgICAgICAgIHNlbGVjdGlvbi5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKCkgPT4gdGhpcy5jeClcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKCkgPT4gdGhpcy5jeSlcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCB0aGlzLnIpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRSZWN0KHNlbGVjdGlvbjogZDMuU2VsZWN0aW9uPGFueT4pIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5yICogMiArIDUgIC8vICoyID0gZGlhbWV0ZXIuICs1IHRvIGFjY291bnQgZm9yIHRoZSBjaXJjbGVzIGJvcmRlci5cbiAgICAgICAgY29uc3Qgd2lkdGggPSAyMDsgLy8gRGVmaW5lcyB0aGUgd2lkdGggb2YgdGhlIGdhcCBpbiB0aGUgY2lyY2xlXG4gICAgICAgIGNvbnN0IHJlY3QgPSBzZWxlY3Rpb24uYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsICgpID0+IHRoaXMuY3ggLSAyMCAvIDIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKCkgPT4gdGhpcy5jeSAtIGhlaWdodCAvIDIgKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCAyMClcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZFJvdGF0aW9uKHJlY3QpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkUm90YXRpb24oc2VsZWN0aW9uOiBkMy5TZWxlY3Rpb248YW55Pikge1xuICAgICAgICBjb25zdCB0cmFuc2lzdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5hdHRyVHdlZW4oXCJ0cmFuc2Zvcm1cIiwgXG4gICAgICAgICAgICAgICAgKCkgPT4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoYHJvdGF0ZSgwLCAgICR7dGhpcy5jeH0sICR7dGhpcy5jeX0pYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcm90YXRlKDM2MCwgJHt0aGlzLmN4fSwgJHt0aGlzLmN5fSlgKSlcbiAgICAgICAgICAgIC5kdXJhdGlvbigyMDAwKVxuICAgICAgICAgICAgLmVhY2goXCJlbmRcIiwgIHRyYW5zaXN0aW9uKTsgLy8gUmVwZWF0IHRyYW5zaXRpb25cbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zaXN0aW9uKCk7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL2VsZW1lbnRzL2xvYWRlci50c1xuICoqLyIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IEJhc2VFbGVtZW50IH0gZnJvbSAnLi9iYXNlLWVsZW1lbnQnO1xuaW1wb3J0IHsgSUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwnO1xuaW1wb3J0IHsgdHJhbnNsYXRlVG9Cb3JkZXJGYWN0b3J5LCBzaG9ydGVuVG9XaXRoaW5SYWRpdXMgfSBmcm9tICcuLi8uLi8uLi91dGlscyc7XG5pbXBvcnQgKiBhcyBsb2dNYW5hZ2VyIGZyb20gJ2xvZ2xldmVsJ1xuXG5sZXQgbG9nID0gbG9nTWFuYWdlci5nZXRMb2dnZXIoXCJub2RlLWhpZXJhcmNoeVwiKVxuXG5cbi8qKlxuICogQSBjb21iaW5lZCBpbnRlcmZhY2UgZm9yIElHcm91cCBhbmQgZDMubGF5b3V0LnBhY2suTm9kZVxuICogT25jZSB3ZSBhZGQgdGhlIElHcm91cCB0byBwYWNrIGxheW91dCBpdCB3aWxsIGV4dGVuZCB0aGUgb2JqZWN0cyBhbmQgYWRkIHRoZVxuICogZDMgcHJvcGVydGllcyAociwgeCwgeS4uLikgd2hpbGUga2VlcGluZyB0aGUgb3JpZ2luYWwgcHJvcGVydGllcyAobmFtZSwgdmFsdWUpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm9kZSBleHRlbmRzIElHcm91cCwgZDMubGF5b3V0LnBhY2suTm9kZSB7XG4gICAgcmFkaXVzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24ge1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgbWluaW11bVZhbHVlIHRvIGJlIGRyYXduXG4gICAgICovXG4gICAgbWluaW11bVZhbHVlPzogbnVtYmVyOyAgXG59XG5cbi8qKlxuICogVGhlIG5vZGUgSGllcmFyY2h5IHJlcHJlc2VudHMgYSBoaWVyYXJjaHkgb2Ygbm9kZXMuIFxuICogVGhlIGRlcHRoIG9mIHRoZSBoaWVyYXJjaHkgaXMgYWx3YXlzIG9uZS4gXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlSGllcmFyY2h5RWxlbWVudCBleHRlbmRzIEJhc2VFbGVtZW50IHtcblxuICAgIHByaXZhdGUgX2NvbG9yU2NoZW1lOiBkMy5zY2FsZS5PcmRpbmFsPHN0cmluZywgc3RyaW5nPjtcbiAgICBwcml2YXRlIF9kYXRhOiBBcnJheTxJR3JvdXA+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgICAgICBzdmc6IGQzLlNlbGVjdGlvbjxhbnk+LCBcbiAgICAgICAgICAgIHByaXZhdGUgX2NvbmZpZzogTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24pIHtcbiAgICAgICAgc3VwZXIgKHN2Zyk7XG5cbiAgICAgICAgaWYoIXRoaXMuX2NvbmZpZykge1xuICAgICAgICAgICAgbG9nLmVycm9yKFwiTm8gY29uZmlndXJhdGlvbiBpcyBzcGVjaWZpZWRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogXG4gICAgICogVGhlIGRlZmF1bHQgY29sb3JzY2hlbWUgY2FuIGJlIG92ZXJyaWRlblxuICAgICovXG4gICAgcHVibGljIHNldCBjb2xvclNjaGVtZSh2YWx1ZTogZDMuc2NhbGUuT3JkaW5hbDxzdHJpbmcsIHN0cmluZz4pIHtcbiAgICAgICAgdGhpcy5fY29sb3JTY2hlbWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IG1pbmltdW1WYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5taW5pbXVtVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG1pbmltdW1WYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5taW5pbXVtVmFsdWUgfHzCoDA7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjb2xvclNjaGVtZSgpOiBkMy5zY2FsZS5PcmRpbmFsPHN0cmluZywgc3RyaW5nPiB7XG4gICAgICAgIGlmKCF0aGlzLl9jb2xvclNjaGVtZSkge1xuICAgICAgICAgICAgdGhpcy5fY29sb3JTY2hlbWUgPSBkMy5zY2FsZS5jYXRlZ29yeTIwYygpO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yU2NoZW1lO1xuIFxuXG4gICAgfVxuXG4gICAgLyoqIFxuICAgICAqIFNldHMgZGF0YSBhbmQgc3RhcnRzIGRyYXdpbmcgbm9kZWRlc1xuICAgICAqICAqL1xuICAgIHB1YmxpYyBzZXQgZGF0YShkYXRhOiBBcnJheTxJR3JvdXA+KSB7XG4gICAgICAgIGlmKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYW4oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYW4oKSB7XG4gICAgICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIi5ub2RlXCIpIC5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVkcmF3KCkge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVOb2RlVG9Cb3JkZXIgPSB0cmFuc2xhdGVUb0JvcmRlckZhY3RvcnkodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgIFxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fZGF0YS5maWx0ZXIoKGQpID0+IGQudmFsdWUgPj0gdGhpcy5taW5pbXVtVmFsdWUgJiYgZC5uYW1lKVxuICAgICAgICBcblxuICAgICAgICAgY29uc3QgcGFjayA9IGQzLmxheW91dC5wYWNrPE5vZGU+KClcbiAgICAgICAgICAgICAgICAuc29ydCgoYSxiKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICAtIGEubmFtZS5sZW5ndGggLSBiLm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciB0aHJlc2hvbGQgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKChhLnZhbHVlID4gdGhyZXNob2xkKSAmJiAoYi52YWx1ZSA+IHRocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiAoYS52YWx1ZSAtIGIudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zaXplKFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoNSk7XG5cbiAgICAgICAgbGV0IGxheW91dE5vZGVzID0gcGFjay5ub2Rlcyh7Y2hpbGRyZW46IGRhdGF9KVxuICAgICAgICAgICAgLmZpbHRlcigoZCkgPT4gICFkLmNoaWxkcmVuICkgLy8gUmVtb3ZlIHRoZSByb290IG5vZGUgYXMgdGhlIGhpZXJhcmNoaWNhbCBuYXR1cmUgaXMgcmVtb3ZlZC4gXG4gICAgICAgIFxuICAgICAgICAgbGF5b3V0Tm9kZXMuZm9yRWFjaCgoZCkgPT4gZC5yYWRpdXMgPSBkLnIpO1xuICAgICAgICBcblxuICAgICAgICBjb25zdCBub2Rlc1NlbGVjdGlvbiA9IHRoaXMuc3ZnXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiLm5vZGVcIikgXG4gICAgICAgICAgICAuZGF0YShsYXlvdXROb2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJub2RlXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2xhdGVOb2RlVG9Cb3JkZXIpO1xuXG4gICAgICAgIHRoaXMuYWRkVGl0bGUobm9kZXNTZWxlY3Rpb24pO1xuICAgICAgXG4gICAgICAgIHRoaXMuYWRkQ2lyY2xlKG5vZGVzU2VsZWN0aW9uKTtcbiAgICAgICAgdGhpcy5hZGRMYWJlbChub2Rlc1NlbGVjdGlvbik7XG4gICAgICBcbiAgICAgICAgdGhpcy50cmFuc2xhdGVUb0NlbnRlcihub2Rlc1NlbGVjdGlvbik7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIHRyYW5zbGF0ZVRvQ2VudGVyKG5vZGVzU2VsZWN0aW9uOiBkMy5TZWxlY3Rpb248Tm9kZT4pIHtcblxuXG4gICAgICAgIG5vZGVzU2VsZWN0aW9uLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKDIwMDApXG4gICAgICAgICAgICAuZWFzZShcImN1YmljLWluLW91dFwiKVxuICAgICAgICAgICAgLmRlbGF5KChkLCBpKSA9PiBpICogMjAgKiBNYXRoLnJhbmRvbSgpKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHsgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHtkLnh9LCAke2QueX0pYDsgXG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIHByaXZhdGUgYWRkQ2lyY2xlKHNlbGVjdGlvbjogZDMuU2VsZWN0aW9uPE5vZGU+KSB7XG4gICAgICAgICBzZWxlY3Rpb24uYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgKGQpID0+IGQuciApXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkLGkgKSA9PiBcIm5vZGUtY29sb3ItXCIgKyAoKGkgJSA2ICkrIDEpKTtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRUaXRsZShzZWxlY3Rpb246IGQzLlNlbGVjdGlvbjxOb2RlPikge1xuICAgICAgICBzZWxlY3Rpb24uYXBwZW5kKFwidGl0bGVcIilcbiAgICAgICAgICAgIC50ZXh0KChkOiBJR3JvdXApID0+IHsgcmV0dXJuIGQubmFtZSArIFwiOiBcIiArIGQudmFsdWU7IH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkTGFiZWwoc2VsZWN0aW9uOiBkMy5TZWxlY3Rpb248Tm9kZT4pIHtcbiAgICAgICAgXG4gICAgICAgIC8vIEEgZm9yZWlnbk9qZWN0IGlzIGFkZGVkIGhlcmUgaW5zdGVhZCBvZiBqdXN0IHVzaW5nIFNWRyB0ZXh0LiBcbiAgICAgICAgLy8gU1ZHIHRleHQgZG9lcyBub3Qgc3VwcG9ydCB3b3JkIHdyYXAgaW4gYW55IGNsZWFuIHdheSBhdGxlYXN0LiBcbiAgICAgICAgLy8gVXNpbmcgZm9yZWlnbk9iamVjdCBkaXYgYW5kIHAncyBjYW4gYmUgaW5zZXJ0ZWQgXG4gICAgICAgIC8vIGFuZCBDU1MgY2FuIGVuc3VyZSB0aGUgYXJlIHBsYWNlZCBwcm9wZXJseS4gXG4gICAgICAgIHNlbGVjdGlvbi5hcHBlbmQoXCJmb3JlaWduT2JqZWN0XCIpXG4gICAgICAgIFx0LmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC5yICogMilcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIChkKSA9PiBkLnIgKiAyKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IGB0cmFuc2xhdGUoJHstZC5yfSwkey1kLnJ9KWApXG4gICAgICAgICAgICAuYXBwZW5kKFwieGh0bWw6ZGl2XCIpXG4gICAgICAgICAgICAuYXBwZW5kKFwieGh0bWw6cFwiKVxuICAgICAgICAgICAgLmh0bWwoKGQ6IGFueSkgPT4gc2hvcnRlblRvV2l0aGluUmFkaXVzKGQuciwgZC5uYW1lKSk7XG5cbiAgICB9XG5cbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9jb21wb25lbnRzL3Zpc3VhbGl6ZXIvZWxlbWVudHMvbm9kZS1oaWVyYXJjaHkudHNcbiAqKi8iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMydcbmltcG9ydCAqIGFzICQgZnJvbSBcImpxdWVyeVwiO1xuaW1wb3J0IHsgSUxvYWRlciwgU3RhbmRhcmRMb2FkZXIsTm9kZUhpZXJhcmNoeUVsZW1lbnQsIE5vZGUsIE5vZGVIaWVyYXJjaHlFbGVtZW50T3B0aW9uIH0gZnJvbSAnLi9lbGVtZW50cyc7XG5pbXBvcnQgeyBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vcmVwb3NpdG9yaWVzJ1xuaW1wb3J0IHsgSUdyb3VwLCBJU2VsZWN0b3IsIElTZWxlY3Rvck1hbmFnZXIgfSBmcm9tICcuLi8uLi9tb2RlbCdcblxuXG5leHBvcnQgaW50ZXJmYWNlIElWaXN1YWxpemVyQ29uZmlnIHtcblxuICAgIHRhcmdldElkPzogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBWaXN1YWxpemVyIHtcblxuICAgIHByaXZhdGUgX3JlcG9zaXRvcnk6IFNvZGFGaWxtTG9jYXRpb1JlcG9zaXRvcnk7XG4gICAgcHJpdmF0ZSBfbG9hZGVyOiBJTG9hZGVyOyBcbiAgICBwcml2YXRlIF9zdmc6IGQzLlNlbGVjdGlvbjxhbnk+O1xuICAgIHByaXZhdGUgX25vZGVIaWVyYXJjaHk6IE5vZGVIaWVyYXJjaHlFbGVtZW50O1xuXG4gICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX21hbmFnZXI6IElTZWxlY3Rvck1hbmFnZXIsIHByaXZhdGUgY29uZmlnPzogSVZpc3VhbGl6ZXJDb25maWcpIHtcbiAgICAgICAgdGhpcy5fcmVwb3NpdG9yeSA9IG5ldyBTb2RhRmlsbUxvY2F0aW9SZXBvc2l0b3J5KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNlbGVjdG9yQ2hhbmdlZCA9IChwcmltYXJ5OiBJU2VsZWN0b3IsIHNlY29uZGFyeTogSVNlbGVjdG9yICkgPT4ge1xuICAgICAgICBpZih0aGlzLl9ub2RlSGllcmFyY2h5KSB7XG4gICAgICAgICAgICB0aGlzLl9ub2RlSGllcmFyY2h5LmNsZWFuKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHRoaXMuX3JlcG9zaXRvcnkuZ2V0R3JvdXBzKHByaW1hcnksIHNlY29uZGFyeSlcbiAgICAgICAgICAgIC50aGVuKChncm91cHMpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0YShncm91cHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gIFxuICAgIGdldCB0YXJnZXRJZCgpIHtcbiAgICAgICAgaWYodGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcudGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy50YXJnZXRJZDtcbiAgICAgICAgfSBcbiAgICAgICAgcmV0dXJuIFwiLnZpc3VhbGl6ZXJcIjtcbiAgICB9XG5cbiAgICBcbiAgICAvKiogXG4gICAgICogRHJhd3MgdGhlIGJvYXJkIGFuZCBpbml0aWFsaXNlZCByZWxhdGVkIGNvbXBvbmVudHMuXG4gICAgICogRHJhdyBpcyBkZWZpbmVkIGVsc2V3aGVyZSBhcyBpdCBlbnN1cmVzIHRoZSBjbGFzcyBjYW4gYmUgY29uc3RydWN0ZWQgcHJpb3IgdG8gYWN0dWFsbHkgYmUgc2hvd24uXG4gICAgICogZHJhdygpIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIHNldERhdGEgdG8gc2hvdyBsb2FkaW5nIHdoaWxlIGRhdGEgaXMgYmVpbmcgZmV0Y2hlZFxuICAgICAqICovXG4gICAgIGRyYXcoKSB7XG4gICAgICBcbiAgICAgICAgdGhpcy5fcmVwb3NpdG9yeS5nZXRTZWxlY3RvcnMoKS50aGVuKChzZWxlY3RvcnMpID0+IHtcbiAgICAgICAgICAgICBpZighc2VsZWN0b3JzIHx8wqBzZWxlY3RvcnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgbG9nLmVycm9yKFwiTm8gc2VsZWN0b3JzIGZvdW5kXCIpXG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHRoaXMub25TZWxlY3RvckNoYW5nZWQoeyBxdWVyeTogc2VsZWN0b3JzWzBdLnF1ZXJ5IH0sIHtxdWVyeTogIHNlbGVjdG9yc1swXS5jaGlsZHJlblswXS5xdWVyeX0pO1xuICAgICAgICAgICAgIHRoaXMuX21hbmFnZXIuc2V0U2VsZWN0b3JzKHNlbGVjdG9ycyk7XG4gICAgICAgIH0pXG4gICAgICAgXG4gICAgICAgIGxldCB0YXJnZXQgPSBkMy5zZWxlY3QodGhpcy50YXJnZXRJZCk7XG5cbiAgICAgICAgdGhpcy5fc3ZnID0gdGFyZ2V0LmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAgICAgICAuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAkeyQodGhpcy50YXJnZXRJZCkud2lkdGgoKX0gJHskKHRoaXMudGFyZ2V0SWQpLmhlaWdodCgpfWApXG5cbiAgICAgICAgdGhpcy5fbG9hZGVyID0gbmV3IFN0YW5kYXJkTG9hZGVyKHRoaXMuX3N2Zyk7XG4gICAgICAgIHRoaXMuc2V0SXNMb2FkaW5nKHRydWUpO1xuXG4gICAgXG4gICAgICAgIGNvbnN0IGNvbmZpZzogTm9kZUhpZXJhcmNoeUVsZW1lbnRPcHRpb24gID0ge1xuICAgICAgICAgICAgbWluaW11bVZhbHVlOiAyICBcbiAgICAgICAgfVxuXG4gICAgICAgICAvLyBCb290c3RyYXAgd2l0aCBkZWZhdWx0IGRhdGFcbiAgICAgXG4gICAgICAgIHRoaXMuX21hbmFnZXIuc2V0T25TZWxlY3RvcnNDYWxsYmFjayh0aGlzLm9uU2VsZWN0b3JDaGFuZ2VkKTtcbiAgICAgICAgdGhpcy5fbm9kZUhpZXJhcmNoeSA9IG5ldyBOb2RlSGllcmFyY2h5RWxlbWVudCh0aGlzLl9zdmcsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBkYXRhIGFuZCBzaG93cyBpdCBvbiB0aGUgc2NyZWVuLlxuICAgICAqICBAcGFyYW0ge2Jvb2xlYW59IGlzTG9hZGluZ1xuICAgICAqL1xuICAgIHNldERhdGEoZGF0YTogQXJyYXk8SUdyb3VwPikge1xuICAgICAgIFxuICAgICAgICBpZighdGhpcy5fbm9kZUhpZXJhcmNoeSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIF9ub2RlSGllcmFyY2h5IGlzIG5vdCBjcmVhdGVkIGRyYXcgaGFzIG5vdCBiZWVuIGNhbGxlZFxuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICB0aGlzLl9ub2RlSGllcmFyY2h5LmRhdGEgPSBkYXRhO1xuXG4gICAgfVxuICBcbiAgICAvKipcbiAgICAgKiBTZXQgd2hldGhlciBvciBub3QgYSBsb2FkZXIgc2hvdWxkIGJlIHNob3duLlxuICAgICAqICBAcGFyYW0ge2Jvb2xlYW59IGlzTG9hZGluZ1xuICAgICAqL1xuICAgIHNldElzTG9hZGluZyhpc0xvYWRpbmc6IGJvb2xlYW4pe1xuICAgICAgICBpZihpc0xvYWRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlci5zdGFydExvYWRlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbG9hZGVyLnN0b3BMb2FkZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY29tcG9uZW50cy92aXN1YWxpemVyL3Zpc3VhbGl6ZXIudHNcbiAqKi8iLCJleHBvcnQgKiBmcm9tICcuL21vdmllLWxvY2F0aW9uLnJlcG9zaXRvcnknXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcmVwb3NpdG9yaWVzL2luZGV4LnRzXG4gKiovIiwiXG5pbXBvcnQgICd3aGF0d2ctZmV0Y2gnO1xuaW1wb3J0IHsgSUdyb3VwLCBJU2VsZWN0b3IsIElTZWxlY3RvckhpZXJhcmNoeSB9IGZyb20gJy4uL21vZGVsJ1xuaW1wb3J0ICogYXMgbG9nTWFuYWdlciBmcm9tICdsb2dsZXZlbCdcbmltcG9ydCB7IGdyb3VwTWFwcGVyRmFjdG9yeSB9IGZyb20gJy4uL3V0aWxzJyBcbmxldCBsb2cgPSBsb2dNYW5hZ2VyLmdldExvZ2dlcihcIm1vdmllLWxvY2F0aW9uLXJlcG9cIik7XG5pbXBvcnQgKiBhcyAkIGZyb20gJ2pxdWVyeSdcblxuLyoqXG4gKiBUaGUgSUZpbG1Mb2NhdGlvblJlcG9zaXRvcnkgaXMgdXNlZCB0byBmZXRjaCB0aGUgaW5mb3JtYXRpb24gXG4gKiBUaGUgaWRlYSBpcyB0byBjcmVhdGUgYW4gYWJzdHJhY3Rpb24gYmV0d2VlbiB0aGUgZGF0YSwgYXMgaXQgY2FuIGhhdmUgc2V2ZXJhbCBvcmlnaW5zXG4gKiAgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbG1Mb2NhdGlvblJlcG9zaXRvcnkge1xuXG4gICAgZ2V0R3JvdXBzKHByaW1hcnk6IElTZWxlY3Rvciwgc2Vjb25kYXJ5OiBJU2VsZWN0b3IpOiBQcm9taXNlPEFycmF5PElHcm91cD4+O1xuICAgIGdldFNlbGVjdG9ycygpOiBQcm9taXNlPEFycmF5PElTZWxlY3Rvcj4+O1xufVxuXG4vKiogIFxuICogVGhlIEluTWVtb3J5RmlsbUxvY2F0aW9uIHJlcG9zaXRvcnkgZmV0Y2hlcyB0aGUgZW50aXJlIGRhdGEgc2V0IHVwIGZyb250IGFuZCBzdG9yZXMgaXQgaW4gbWVtb3J5LiBcbiAqIEZvciBzbWFsbGVyIGRhdGEgc2V0cyB0aGlzIGlzIHN1ZmZpY2llbnQsIGJ1dCBmb3IgbGFyZ2VyIGl0IGlzIG5vdFxuICovXG5leHBvcnQgY2xhc3MgU29kYUZpbG1Mb2NhdGlvUmVwb3NpdG9yeSBpbXBsZW1lbnRzICBJRmlsbUxvY2F0aW9uUmVwb3NpdG9yeSB7XG5cbiAgICBwcml2YXRlIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgIHByaXZhdGUgdXJsID0gJ2h0dHBzOi8vZGF0YS5zZmdvdi5vcmcvcmVzb3VyY2Uvd3dtdS1nbXpjLmpzb24nXG4gICBcbiAgICBnZXRHcm91cHMocHJpbWFyeTogSVNlbGVjdG9yLCBzZWNvbmRhcnk6SVNlbGVjdG9yKTogUHJvbWlzZTxBcnJheTxJR3JvdXA+PiB7XG4gICAgICAgICBcblxuICAgICAgICAvLyBBIG1hcHBlciBpcyBjcmVhdGVkLiBJdCBjb252ZXJ0cyB0aGUgcmVzdWx0IGZyb20gdGhlIGFwaSB0byBhbiBhcnJheSBvZiBJR3JvdXBcbiAgICAgICAgY29uc3QgbWFwcGVyID0gZ3JvdXBNYXBwZXJGYWN0b3J5KHByaW1hcnkucXVlcnksIFwiQ09VTlRfXCIgKyBzZWNvbmRhcnkucXVlcnkpO1xuXG4gICAgICAgIC8vIElmIG5laXRoZXIgc2VsZWN0b3IgaXMgdGhlIGxvY2F0aW9uIHdlIG5lZWQgYSBtb3JlIGFkdmFuY2VkIHF1ZXJ5IGFzIHdlIHdvdWxkIG90aGVyIHdpc2UgZ2V0IFxuICAgICAgICAvLyB2ZXJ5IG1pc2xlYWRpbmcgcmVzdWx0cyAob3Igc2ltcGx5IHBsYWluIHdyb25nIHJlc3VsdHMpXG4gICAgICAgIC8vIGUuZy4gaWYgcHJpbWFyeSA9IHByb2R1Y3Rpb25fY29tcGFueSBhbmQgc2Vjb25kYXJ5ID0gd3JpdGVyIGl0IHdpbGwgc2hvdyB0aGUgbnVtYmVyIG9mIGxvY2F0aW9ucyBcbiAgICAgICAgLy8gdGhhdCBwcm9kdWN0aW9uIGNvbXBhbnkgaGFzIHVzZWQgdGhhdCB3cml0ZXIgbm90IGJhc2VkIG9uIG51bWJlciBvZiBmaWxtcyBcbiAgICAgICAgaWYocHJpbWFyeS5xdWVyeSAhPT0gXCJsb2NhdGlvbnNcIiAmJiBzZWNvbmRhcnkucXVlcnkgIT09IFwibG9jYXRpb25zXCIpIFxuICAgICAgICB7XG4gICAgICAgICAgIC8vIHJldHVybiB0aGlzLmdldEF2YW5jZWRHcm91cHMocHJpbWFyeSwgc2Vjb25kYXJ5LCBtYXBwZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYCR7dGhpcy51cmx9PyRncm91cD0ke3ByaW1hcnkucXVlcnl9JiRzZWxlY3Q9JHtwcmltYXJ5LnF1ZXJ5fSxDT1VOVCgke3NlY29uZGFyeS5xdWVyeX0pYCkgICAgICAgICAgIFxuICAgICAgICAgICAgLnRoZW4obWFwcGVyKVxuICAgIH1cblxuICAgIFxuICAgIHByaXZhdGUgZ2V0QXZhbmNlZEdyb3VwcyhwcmltYXJ5OiBJU2VsZWN0b3IsIHNlY29uZGFyeTpJU2VsZWN0b3IsIG1hcHBlcjogKGQ6IGFueSk9PiBBcnJheTxJR3JvdXA+KTogUHJvbWlzZTxBcnJheTxJR3JvdXA+PiAge1xuXG4gICAgICAgIGxldCBxdWVyeSA9IGBTRUxFQ1QgJHtwcmltYXJ5LnF1ZXJ5fSwgY291bnQoKikgXG4gICAgICAgICAgICAgICAgICAgICBHUk9VUCBCWSAke3NlY29uZGFyeS5xdWVyeX0sICR7cHJpbWFyeS5xdWVyeX0gfD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRUxFQ1QgJHtwcmltYXJ5LnF1ZXJ5fSwgQ09VTlQoKikgQVMgY291bnQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR1JPVVAgQlkgJHtwcmltYXJ5LnF1ZXJ5fWBcbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYCR7dGhpcy51cmx9PyRxdWVyeSR7cXVlcnl9YClcbiAgICAgICAgICAgIC50aGVuKG1hcHBlcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmZXRjaChxdWVyeTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZldGNoKHF1ZXJ5KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlOmFueSkgID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwb3NzaWJsZSBzZWxlY3RvcnMuIFxuICAgICAqIFRoZXNlIGFyZSBoYXJkY29kZWQgZm9yIG5vdywgYnV0IHNob3VsZCBwcmVmZXJhYmx5IGJlIGZldGNoZWQgZnJvbSB0aGUgQVBJXG4gICAgICovXG4gICAgZ2V0U2VsZWN0b3JzKCk6IFByb21pc2U8QXJyYXk8SVNlbGVjdG9ySGllcmFyY2h5Pj4ge1xuICAgICAgICBjb25zdCB0aXRsZVNlbGVjdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJNb3ZpZVwiLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogXCJ0aXRsZVwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbG9jYXRpb25zU2VsZWN0b3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkxvY2F0aW9uc1wiLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogXCJsb2NhdGlvbnNcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnN0IHdyaXRlclNlbGVjdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJXcml0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IFwid3JpdGVyXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICBjb25zdCBkaXJlY3RvclNlbGVjdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEaXJlY3RvclwiLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogXCJkaXJlY3RvclwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHJvZHVjdGlvbkNvbXBhbnkgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlByb2R1Y3Rpb24gQ29tcGFueVwiLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogXCJwcm9kdWN0aW9uX2NvbXBhbnlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEFycmF5PElTZWxlY3RvckhpZXJhcmNoeT4+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gW1xuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRpdGxlU2VsZWN0b3IsICAgICB7IGNoaWxkcmVuOiBbIGxvY2F0aW9uc1NlbGVjdG9yICBdfSksXG4gICAgICAgICAgICAgICAgJC5leHRlbmQobG9jYXRpb25zU2VsZWN0b3IsIHsgY2hpbGRyZW46IFsgdGl0bGVTZWxlY3RvciAgIF19KSxcbiAgICAgICAgICAgICAgICAkLmV4dGVuZCh3cml0ZXJTZWxlY3RvciwgICAgeyBjaGlsZHJlbjogWyB0aXRsZVNlbGVjdG9yLCBsb2NhdGlvbnNTZWxlY3RvciwgZGlyZWN0b3JTZWxlY3RvciwgcHJvZHVjdGlvbkNvbXBhbnkgIF19KSxcbiAgICAgICAgICAgICAgICAkLmV4dGVuZChkaXJlY3RvclNlbGVjdG9yLCAgeyBjaGlsZHJlbjogWyB0aXRsZVNlbGVjdG9yLCBsb2NhdGlvbnNTZWxlY3Rvciwgd3JpdGVyU2VsZWN0b3IsIHByb2R1Y3Rpb25Db21wYW55ICBdfSksXG4gICAgICAgICAgICAgICAgJC5leHRlbmQocHJvZHVjdGlvbkNvbXBhbnksIHsgY2hpbGRyZW46IFsgdGl0bGVTZWxlY3RvciwgbG9jYXRpb25zU2VsZWN0b3IsIHdyaXRlclNlbGVjdG9yLCBkaXJlY3RvclNlbGVjdG9yICBdfSksXG4gICAgICAgICAgICBdXG4gICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICB9KVxuICAgIH1cblxuXG4gIFxufVxuXG5cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcmVwb3NpdG9yaWVzL21vdmllLWxvY2F0aW9uLnJlcG9zaXRvcnkudHNcbiAqKi8iLCJcbmltcG9ydCB7IElHcm91cCB9IGZyb20gJy4uL21vZGVsJ1xuXG5leHBvcnQgY29uc3QgZ3JvdXBNYXBwZXJGYWN0b3J5ID0gPFQ+KG5hbWVMYWJlbDogc3RyaW5nLCB2YWx1ZUxhYmVsOnN0cmluZyk6IFxuICAgICAgICAoZWxlbWVudHM6IEFycmF5PFQ+KSA9PiBBcnJheTxJR3JvdXA+ID0+IHtcbiAgICBcbiAgICByZXR1cm4gKGVsZW1lbnRzICk6IEFycmF5PElHcm91cD4gPT4ge1xuICAgICAgICByZXR1cm4gZWxlbWVudHMubWFwKChlbGVtOmFueSkgPT4geyAgIFxuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgbmFtZTogZWxlbVtuYW1lTGFiZWxdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiArZWxlbVt2YWx1ZUxhYmVsXVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgICAgICAgICBcbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvZGF0YS1tYXBwZXIudHNcbiAqKi8iLCJcblxuLyoqIFxuICogVGhpcyBtZXRob2QgdGFrZXMgdGhlIHJhZGl1cyBvZiB0aGUgY2lyY2xlIGFuZCB0aGUgdGV4dCBhbmQgYXR0ZW1wdHMgdG8gXG4gKiBzaG9ydGVuIHRoZSB0ZXh0IHN1Y2ggdGhhdCBpdCBmaXRzIHdpdGhpbiB0aGUgY2lyY2xlLiBcbiAqIFRoZSBtZXRob2QgY291bGQgdXNlIGFuIG92ZXJoYXVsIGFuZCB0YWtlIHRoZSBmb250IHNpemUgYXMgaW5wdXQuIFxuICogT3IgYmV0dGVyIGl0IHNob3VsZCB0cnkgYW5kIGNhbGN1bGF0ZSB0aGUgc2l6ZSBhbmQgdGhlbiBmaXQgd29yZHMgaW50byB0byBlYWNoIGxpbmUgXG4gKiBzdWNoIHRoYXQgdGhleSBmb3JtIGEgY2lyY2xlLiBcbiAqL1xuZXhwb3J0IGNvbnN0IHNob3J0ZW5Ub1dpdGhpblJhZGl1cyA9IChyYWRpdXM6IG51bWJlciwgdGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgICAgdmFyIG1heFdpZHRoID0gcmFkaXVzIC8gMy4xO1xuICAgICAgICB2YXIgbGluZXMgPSByYWRpdXMgLyAxMDtcbiAgICAgICAgdGV4dCA9IHRleHQuc3BsaXQoL1xccysvZykubWFwKChzKSA9PiB7XG4gICAgICAgICAgICBpZihzLmxlbmd0aCA+PSBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpbiA9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMuc3Vic3RyKDAsIG1heFdpZHRoIC0gbWFyZ2luKSArIFxuICAgICAgICAgICAgICAgICAgICAgICAgXCItPGJyPlwiICsgXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnN1YnN0cihtYXhXaWR0aCAtIG1hcmdpbiArIDEsIHMubGVuZ3RoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH0pLmpvaW4oXCIgXCIpO1xuXG4gICAgICAgIFxuICAgICAgICBpZih0ZXh0ICYmIHRleHQubGVuZ3RoID4gbWF4V2lkdGggKiBsaW5lcykge1xuICAgICAgICAgICAgbGV0IHN1YnN0ciA9ICB0ZXh0LnN1YnN0cigwLCBtYXhXaWR0aCAtIDMpO1xuICAgICAgICAgICAgaWYoc3Vic3RyLmxlbmd0aCA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzdHIgKyBcIiZoZWxsaXA7XCJcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbn1cbiAgIFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL3RleHQtbWFuaXB1bGF0aW9uLnRzXG4gKiovIiwiXG5cbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlVG9Cb3JkZXJGYWN0b3J5ID0gKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogKGc6ZDMubGF5b3V0LnBhY2suTm9kZSkgPT4gc3RyaW5nID0+IHtcblxuXG4gICAgIHJldHVybiAoZCk6IHN0cmluZyA9PiB7XG5cbiAgICAgICAgIGxldCBjeCA9IHdpZHRoIC8gMjtcbiAgICAgICAgIGxldCBjeSA9IGhlaWdodCAvIDI7XG4gICAgICAgIFxuICAgICAgICAgbGV0IHhDZW50ZXJEaXN0YW5jZSA9IChkLnggLSBjeClcbiAgICAgICAgIGxldCB5Q2VudGVyRGlzdGFuY2UgPSAoZC55IC0gY3kpXG5cbiAgICAgICAgIGxldCBjbG9zZXRzWEJvcmRlciA9IHhDZW50ZXJEaXN0YW5jZSA8IDA/IDAgOiB3aWR0aDtcbiAgICAgICAgIGxldCBjbG9zZXRzWUJvcmRlciA9IHlDZW50ZXJEaXN0YW5jZSA8IDA/IDAgOiBoZWlnaHQ7XG4gICAgIFxuICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIChoZWlnaHQgKyBkLnIpICArIFwiKVwiO1xuXG4gICAgIH1cbn0gXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvdHJhbnNmb3Jtcy50c1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceMappingURL=bundle.min.js.map