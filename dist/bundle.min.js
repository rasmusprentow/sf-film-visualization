!function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){n(9),t.exports=n(18)},function(t,e,n){var r,i;/*!
	 * jQuery JavaScript Library v3.1.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-09-22T22:30Z
	 */
!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,o){"use strict";function a(t,e){e=e||ot;var n=e.createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function u(t){var e=!!t&&"length"in t&&t.length,n=mt.type(t);return"function"!==n&&!mt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function s(t,e,n){return mt.isFunction(e)?mt.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?mt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?mt.grep(t,function(t){return ct.call(e,t)>-1!==n}):Ct.test(e)?mt.filter(e,t,n):(e=mt.filter(e,t),mt.grep(t,function(t){return ct.call(e,t)>-1!==n&&1===t.nodeType}))}function l(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function c(t){var e={};return mt.each(t.match(jt)||[],function(t,n){e[n]=!0}),e}function f(t){return t}function h(t){throw t}function p(t,e,n){var r;try{t&&mt.isFunction(r=t.promise)?r.call(t).done(e).fail(n):t&&mt.isFunction(r=t.then)?r.call(t,e,n):e.call(void 0,t)}catch(t){n.call(void 0,t)}}function d(){ot.removeEventListener("DOMContentLoaded",d),n.removeEventListener("load",d),mt.ready()}function g(){this.expando=mt.expando+g.uid++}function v(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:It.test(t)?JSON.parse(t):t)}function y(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(Ut,"-$&").toLowerCase(),n=t.getAttribute(r),"string"==typeof n){try{n=v(n)}catch(i){}Ht.set(t,e,n)}else n=void 0;return n}function m(t,e,n,r){var i,o=1,a=20,u=r?function(){return r.cur()}:function(){return mt.css(t,e,"")},s=u(),l=n&&n[3]||(mt.cssNumber[e]?"":"px"),c=(mt.cssNumber[e]||"px"!==l&&+s)&&Wt.exec(mt.css(t,e));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+s||1;do o=o||".5",c/=o,mt.style(t,e,c+l);while(o!==(o=u()/s)&&1!==o&&--a)}return n&&(c=+c||+s||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function x(t){var e,n=t.ownerDocument,r=t.nodeName,i=Xt[r];return i?i:(e=n.body.appendChild(n.createElement(r)),i=mt.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),Xt[r]=i,i)}function b(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)r=t[o],r.style&&(n=r.style.display,e?("none"===n&&(i[o]=Ft.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Yt(r)&&(i[o]=x(r))):"none"!==n&&(i[o]="none",Ft.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}function w(t,e){var n;return n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&mt.nodeName(t,e)?mt.merge([t],n):n}function M(t,e){for(var n=0,r=t.length;n<r;n++)Ft.set(t[n],"globalEval",!e||Ft.get(e[n],"globalEval"))}function _(t,e,n,r,i){for(var o,a,u,s,l,c,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if(o=t[p],o||0===o)if("object"===mt.type(o))mt.merge(h,o.nodeType?[o]:o);else if(Kt.test(o)){for(a=a||f.appendChild(e.createElement("div")),u=(Zt.exec(o)||["",""])[1].toLowerCase(),s=Qt[u]||Qt._default,a.innerHTML=s[1]+mt.htmlPrefilter(o)+s[2],c=s[0];c--;)a=a.lastChild;mt.merge(h,a.childNodes),a=f.firstChild,a.textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&mt.inArray(o,r)>-1)i&&i.push(o);else if(l=mt.contains(o.ownerDocument,o),a=w(f.appendChild(o),"script"),l&&M(a),n)for(c=0;o=a[c++];)Jt.test(o.type||"")&&n.push(o);return f}function k(){return!0}function S(){return!1}function T(){try{return ot.activeElement}catch(t){}}function E(t,e,n,r,i,o){var a,u;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=void 0);for(u in e)E(t,u,n,r,e[u],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=S;else if(!i)return t;return 1===o&&(a=i,i=function(t){return mt().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=mt.guid++)),t.each(function(){mt.event.add(this,e,i,r,n)})}function C(t,e){return mt.nodeName(t,"table")&&mt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t:t}function N(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function A(t){var e=ue.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function L(t,e){var n,r,i,o,a,u,s,l;if(1===e.nodeType){if(Ft.hasData(t)&&(o=Ft.access(t),a=Ft.set(e,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)mt.event.add(e,i,l[i][n])}Ht.hasData(t)&&(u=Ht.access(t),s=mt.extend({},u),Ht.set(e,s))}}function q(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function D(t,e,n,r){e=st.apply([],e);var i,o,u,s,l,c,f=0,h=t.length,p=h-1,d=e[0],g=mt.isFunction(d);if(g||h>1&&"string"==typeof d&&!vt.checkClone&&ae.test(d))return t.each(function(i){var o=t.eq(i);g&&(e[0]=d.call(this,i,o.html())),D(o,e,n,r)});if(h&&(i=_(e,t[0].ownerDocument,!1,t,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=mt.map(w(i,"script"),N),s=u.length;f<h;f++)l=i,f!==p&&(l=mt.clone(l,!0,!0),s&&mt.merge(u,w(l,"script"))),n.call(t[f],l,f);if(s)for(c=u[u.length-1].ownerDocument,mt.map(u,A),f=0;f<s;f++)l=u[f],Jt.test(l.type||"")&&!Ft.access(l,"globalEval")&&mt.contains(c,l)&&(l.src?mt._evalUrl&&mt._evalUrl(l.src):a(l.textContent.replace(se,""),c))}return t}function j(t,e,n){for(var r,i=e?mt.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||mt.cleanData(w(r)),r.parentNode&&(n&&mt.contains(r.ownerDocument,r)&&M(w(r,"script")),r.parentNode.removeChild(r));return t}function R(t,e,n){var r,i,o,a,u=t.style;return n=n||fe(t),n&&(a=n.getPropertyValue(e)||n[e],""!==a||mt.contains(t.ownerDocument,t)||(a=mt.style(t,e)),!vt.pixelMarginRight()&&ce.test(a)&&le.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function P(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function O(t){if(t in ve)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ge.length;n--;)if(t=ge[n]+e,t in ve)return t}function z(t,e,n){var r=Wt.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function F(t,e,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(a+=mt.css(t,n+$t[o],!0,i)),r?("content"===n&&(a-=mt.css(t,"padding"+$t[o],!0,i)),"margin"!==n&&(a-=mt.css(t,"border"+$t[o]+"Width",!0,i))):(a+=mt.css(t,"padding"+$t[o],!0,i),"padding"!==n&&(a+=mt.css(t,"border"+$t[o]+"Width",!0,i)));return a}function H(t,e,n){var r,i=!0,o=fe(t),a="border-box"===mt.css(t,"boxSizing",!1,o);if(t.getClientRects().length&&(r=t.getBoundingClientRect()[e]),r<=0||null==r){if(r=R(t,e,o),(r<0||null==r)&&(r=t.style[e]),ce.test(r))return r;i=a&&(vt.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+F(t,e,n||(a?"border":"content"),i,o)+"px"}function I(t,e,n,r,i){return new I.prototype.init(t,e,n,r,i)}function U(){me&&(n.requestAnimationFrame(U),mt.fx.tick())}function B(){return n.setTimeout(function(){ye=void 0}),ye=mt.now()}function W(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)n=$t[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function $(t,e,n){for(var r,i=(X.tweeners[e]||[]).concat(X.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function Y(t,e,n){var r,i,o,a,u,s,l,c,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&Yt(t),v=Ft.get(t,"fxshow");n.queue||(a=mt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,mt.queue(t,"fx").length||a.empty.fire()})}));for(r in e)if(i=e[r],xe.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}p[r]=v&&v[r]||mt.style(t,r)}if(s=!mt.isEmptyObject(e),s||!mt.isEmptyObject(p)){f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],l=v&&v.display,null==l&&(l=Ft.get(t,"display")),c=mt.css(t,"display"),"none"===c&&(l?c=l:(b([t],!0),l=t.style.display||l,c=mt.css(t,"display"),b([t]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===mt.css(t,"float")&&(s||(h.done(function(){d.display=l}),null==l&&(c=d.display,l="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),s=!1;for(r in p)s||(v?"hidden"in v&&(g=v.hidden):v=Ft.access(t,"fxshow",{display:l}),o&&(v.hidden=!g),g&&b([t],!0),h.done(function(){g||b([t]),Ft.remove(t,"fxshow");for(r in p)mt.style(t,r,p[r])})),s=$(g?v[r]:0,r,h),r in v||(v[r]=s.start,g&&(s.end=s.start,s.start=0))}}function V(t,e){var n,r,i,o,a;for(n in t)if(r=mt.camelCase(n),i=e[r],o=t[n],mt.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),a=mt.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function X(t,e,n){var r,i,o=0,a=X.prefilters.length,u=mt.Deferred().always(function(){delete s.elem}),s=function(){if(i)return!1;for(var e=ye||B(),n=Math.max(0,l.startTime+l.duration-e),r=n/l.duration||0,o=1-r,a=0,s=l.tweens.length;a<s;a++)l.tweens[a].run(o);return u.notifyWith(t,[l,o,n]),o<1&&s?n:(u.resolveWith(t,[l]),!1)},l=u.promise({elem:t,props:mt.extend({},e),opts:mt.extend(!0,{specialEasing:{},easing:mt.easing._default},n),originalProperties:e,originalOptions:n,startTime:ye||B(),duration:n.duration,tweens:[],createTween:function(e,n){var r=mt.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(r),r},stop:function(e){var n=0,r=e?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return e?(u.notifyWith(t,[l,1,0]),u.resolveWith(t,[l,e])):u.rejectWith(t,[l,e]),this}}),c=l.props;for(V(c,l.opts.specialEasing);o<a;o++)if(r=X.prefilters[o].call(l,t,c,l.opts))return mt.isFunction(r.stop)&&(mt._queueHooks(l.elem,l.opts.queue).stop=mt.proxy(r.stop,r)),r;return mt.map(c,$,l),mt.isFunction(l.opts.start)&&l.opts.start.call(t,l),mt.fx.timer(mt.extend(s,{elem:t,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function G(t){var e=t.match(jt)||[];return e.join(" ")}function Z(t){return t.getAttribute&&t.getAttribute("class")||""}function J(t,e,n,r){var i;if(mt.isArray(e))mt.each(e,function(e,i){n||Ae.test(t)?r(t,i):J(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==mt.type(e))r(t,e);else for(i in e)J(t+"["+i+"]",e[i],n,r)}function Q(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(jt)||[];if(mt.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function K(t,e,n,r){function i(u){var s;return o[u]=!0,mt.each(t[u]||[],function(t,u){var l=u(e,n,r);return"string"!=typeof l||a||o[l]?a?!(s=l):void 0:(e.dataTypes.unshift(l),i(l),!1)}),s}var o={},a=t===Ue;return i(e.dataTypes[0])||!o["*"]&&i("*")}function tt(t,e){var n,r,i=mt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&mt.extend(!0,t,r),t}function et(t,e,n){for(var r,i,o,a,u=t.contents,s=t.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in u)if(u[i]&&u[i].test(r)){s.unshift(i);break}if(s[0]in n)o=s[0];else{for(i in n){if(!s[0]||t.converters[i+" "+s[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==s[0]&&s.unshift(o),n[o]}function nt(t,e,n,r){var i,o,a,u,s,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!s&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),s=o,o=c.shift())if("*"===o)o=s;else if("*"!==s&&s!==o){if(a=l[s+" "+o]||l["* "+o],!a)for(i in l)if(u=i.split(" "),u[1]===o&&(a=l[s+" "+u[0]]||l["* "+u[0]])){a===!0?a=l[i]:l[i]!==!0&&(o=u[0],c.unshift(u[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+s+" to "+o}}}return{state:"success",data:e}}function rt(t){return mt.isWindow(t)?t:9===t.nodeType&&t.defaultView}var it=[],ot=n.document,at=Object.getPrototypeOf,ut=it.slice,st=it.concat,lt=it.push,ct=it.indexOf,ft={},ht=ft.toString,pt=ft.hasOwnProperty,dt=pt.toString,gt=dt.call(Object),vt={},yt="3.1.1",mt=function(t,e){return new mt.fn.init(t,e)},xt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,bt=/^-ms-/,wt=/-([a-z])/g,Mt=function(t,e){return e.toUpperCase()};mt.fn=mt.prototype={jquery:yt,constructor:mt,length:0,toArray:function(){return ut.call(this)},get:function(t){return null==t?ut.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=mt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return mt.each(this,t)},map:function(t){return this.pushStack(mt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(ut.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:lt,sort:it.sort,splice:it.splice},mt.extend=mt.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},u=1,s=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[u]||{},u++),"object"==typeof a||mt.isFunction(a)||(a={}),u===s&&(a=this,u--);u<s;u++)if(null!=(t=arguments[u]))for(e in t)n=a[e],r=t[e],a!==r&&(l&&r&&(mt.isPlainObject(r)||(i=mt.isArray(r)))?(i?(i=!1,o=n&&mt.isArray(n)?n:[]):o=n&&mt.isPlainObject(n)?n:{},a[e]=mt.extend(l,o,r)):void 0!==r&&(a[e]=r));return a},mt.extend({expando:"jQuery"+(yt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===mt.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=mt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==ht.call(t)||(e=at(t))&&(n=pt.call(e,"constructor")&&e.constructor,"function"!=typeof n||dt.call(n)!==gt))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?ft[ht.call(t)]||"object":typeof t},globalEval:function(t){a(t)},camelCase:function(t){return t.replace(bt,"ms-").replace(wt,Mt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,r=0;if(u(t))for(n=t.length;r<n&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(xt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(u(Object(t))?mt.merge(n,"string"==typeof t?[t]:t):lt.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:ct.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r,i=[],o=0,a=t.length,u=!n;o<a;o++)r=!e(t[o],o),r!==u&&i.push(t[o]);return i},map:function(t,e,n){var r,i,o=0,a=[];if(u(t))for(r=t.length;o<r;o++)i=e(t[o],o,n),null!=i&&a.push(i);else for(o in t)i=e(t[o],o,n),null!=i&&a.push(i);return st.apply([],a)},guid:1,proxy:function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),mt.isFunction(t))return r=ut.call(arguments,2),i=function(){return t.apply(e||this,r.concat(ut.call(arguments)))},i.guid=t.guid=t.guid||mt.guid++,i},now:Date.now,support:vt}),"function"==typeof Symbol&&(mt.fn[Symbol.iterator]=it[Symbol.iterator]),mt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){ft["[object "+e+"]"]=e.toLowerCase()});var _t=/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
function(t){function e(t,e,n,r){var i,o,a,u,s,l,c,h=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&((e?e.ownerDocument||e:I)!==D&&q(e),e=e||D,R)){if(11!==d&&(s=yt.exec(t)))if(i=s[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(h&&(a=h.getElementById(i))&&F(e,a)&&a.id===i)return n.push(a),n}else{if(s[2])return Q.apply(n,e.getElementsByTagName(t)),n;if((i=s[3])&&M.getElementsByClassName&&e.getElementsByClassName)return Q.apply(n,e.getElementsByClassName(i)),n}if(M.qsa&&!Y[t+" "]&&(!P||!P.test(t))){if(1!==d)h=e,c=t;else if("object"!==e.nodeName.toLowerCase()){for((u=e.getAttribute("id"))?u=u.replace(wt,Mt):e.setAttribute("id",u=H),l=T(t),o=l.length;o--;)l[o]="#"+u+" "+p(l[o]);c=l.join(","),h=mt.test(t)&&f(e.parentNode)||e}if(c)try{return Q.apply(n,h.querySelectorAll(c)),n}catch(g){}finally{u===H&&e.removeAttribute("id")}}}return C(t.replace(ut,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>_.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[H]=!0,t}function i(t){var e=D.createElement("fieldset");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=n.length;r--;)_.attrHandle[n[r]]=e}function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function u(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function s(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function l(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&kt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function c(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function f(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function d(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,u=B++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,s){var l,c,f,h=[U,u];if(s){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,s))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(f=e[H]||(e[H]={}),c=f[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((l=c[o])&&l[0]===U&&l[1]===u)return h[2]=l[2];if(c[o]=h,h[2]=t(e,n,s))return!0}return!1}}function g(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function v(t,n,r){for(var i=0,o=n.length;i<o;i++)e(t,n[i],r);return r}function y(t,e,n,r,i){for(var o,a=[],u=0,s=t.length,l=null!=e;u<s;u++)(o=t[u])&&(n&&!n(o,r,i)||(a.push(o),l&&e.push(u)));return a}function m(t,e,n,i,o,a){return i&&!i[H]&&(i=m(i)),o&&!o[H]&&(o=m(o,a)),r(function(r,a,u,s){var l,c,f,h=[],p=[],d=a.length,g=r||v(e||"*",u.nodeType?[u]:u,[]),m=!t||!r&&e?g:y(g,h,t,u,s),x=n?o||(r?t:d||i)?[]:a:m;if(n&&n(m,x,u,s),i)for(l=y(x,p),i(l,[],u,s),c=l.length;c--;)(f=l[c])&&(x[p[c]]=!(m[p[c]]=f));if(r){if(o||t){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(m[c]=f);o(null,x=[],l,s)}for(c=x.length;c--;)(f=x[c])&&(l=o?tt(r,f):h[c])>-1&&(r[l]=!(a[l]=f))}}else x=y(x===a?x.splice(d,x.length):x),o?o(null,a,x,s):Q.apply(a,x)})}function x(t){for(var e,n,r,i=t.length,o=_.relative[t[0].type],a=o||_.relative[" "],u=o?1:0,s=d(function(t){return t===e},a,!0),l=d(function(t){return tt(e,t)>-1},a,!0),c=[function(t,n,r){var i=!o&&(r||n!==N)||((e=n).nodeType?s(t,n,r):l(t,n,r));return e=null,i}];u<i;u++)if(n=_.relative[t[u].type])c=[d(g(c),n)];else{if(n=_.filter[t[u].type].apply(null,t[u].matches),n[H]){for(r=++u;r<i&&!_.relative[t[r].type];r++);return m(u>1&&g(c),u>1&&p(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(ut,"$1"),n,u<r&&x(t.slice(u,r)),r<i&&x(t=t.slice(r)),r<i&&p(t))}c.push(n)}return g(c)}function b(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,u,s,l){var c,f,h,p=0,d="0",g=r&&[],v=[],m=N,x=r||o&&_.find.TAG("*",l),b=U+=null==m?1:Math.random()||.1,w=x.length;for(l&&(N=a===D||a||l);d!==w&&null!=(c=x[d]);d++){if(o&&c){for(f=0,a||c.ownerDocument===D||(q(c),u=!R);h=t[f++];)if(h(c,a||D,u)){s.push(c);break}l&&(U=b)}i&&((c=!h&&c)&&p--,r&&g.push(c))}if(p+=d,i&&d!==p){for(f=0;h=n[f++];)h(g,v,a,u);if(r){if(p>0)for(;d--;)g[d]||v[d]||(v[d]=Z.call(s));v=y(v)}Q.apply(s,v),l&&!r&&v.length>0&&p+n.length>1&&e.uniqueSort(s)}return l&&(U=b,N=m),g};return i?r(a):a}var w,M,_,k,S,T,E,C,N,A,L,q,D,j,R,P,O,z,F,H="sizzle"+1*new Date,I=t.document,U=0,B=0,W=n(),$=n(),Y=n(),V=function(t,e){return t===e&&(L=!0),0},X={}.hasOwnProperty,G=[],Z=G.pop,J=G.push,Q=G.push,K=G.slice,tt=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",it="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",ot=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),ut=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),st=new RegExp("^"+nt+"*,"+nt+"*"),lt=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ct=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ft=new RegExp(ot),ht=new RegExp("^"+rt+"$"),pt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,mt=/[+~]/,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),bt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Mt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},_t=function(){q()},kt=d(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Q.apply(G=K.call(I.childNodes),I.childNodes),G[I.childNodes.length].nodeType}catch(St){Q={apply:G.length?function(t,e){J.apply(t,K.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}M=e.support={},S=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},q=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:I;return r!==D&&9===r.nodeType&&r.documentElement?(D=r,j=D.documentElement,R=!S(D),I!==D&&(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",_t,!1):n.attachEvent&&n.attachEvent("onunload",_t)),M.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),M.getElementsByTagName=i(function(t){return t.appendChild(D.createComment("")),!t.getElementsByTagName("*").length}),M.getElementsByClassName=vt.test(D.getElementsByClassName),M.getById=i(function(t){return j.appendChild(t).id=H,!D.getElementsByName||!D.getElementsByName(H).length}),M.getById?(_.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){return t.getAttribute("id")===e}},_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&R){var n=e.getElementById(t);return n?[n]:[]}}):(_.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&R){var n,r,i,o=e.getElementById(t);if(o){if(n=o.getAttributeNode("id"),n&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if(n=o.getAttributeNode("id"),n&&n.value===t)return[o]}return[]}}),_.find.TAG=M.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):M.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},_.find.CLASS=M.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&R)return e.getElementsByClassName(t)},O=[],P=[],(M.qsa=vt.test(D.querySelectorAll))&&(i(function(t){j.appendChild(t).innerHTML="<a id='"+H+"'></a><select id='"+H+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||P.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+H+"-]").length||P.push("~="),t.querySelectorAll(":checked").length||P.push(":checked"),t.querySelectorAll("a#"+H+"+*").length||P.push(".#.+[+~]")}),i(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=D.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&P.push("name"+nt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&P.push(":enabled",":disabled"),j.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&P.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),P.push(",.*:")})),(M.matchesSelector=vt.test(z=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&i(function(t){M.disconnectedMatch=z.call(t,"*"),z.call(t,"[s!='']:x"),O.push("!=",ot)}),P=P.length&&new RegExp(P.join("|")),O=O.length&&new RegExp(O.join("|")),e=vt.test(j.compareDocumentPosition),F=e||vt.test(j.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},V=e?function(t,e){if(t===e)return L=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!M.sortDetached&&e.compareDocumentPosition(t)===n?t===D||t.ownerDocument===I&&F(I,t)?-1:e===D||e.ownerDocument===I&&F(I,e)?1:A?tt(A,t)-tt(A,e):0:4&n?-1:1)}:function(t,e){if(t===e)return L=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,u=[t],s=[e];if(!i||!o)return t===D?-1:e===D?1:i?-1:o?1:A?tt(A,t)-tt(A,e):0;if(i===o)return a(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;u[r]===s[r];)r++;return r?a(u[r],s[r]):u[r]===I?-1:s[r]===I?1:0},D):D},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==D&&q(t),n=n.replace(ct,"='$1']"),M.matchesSelector&&R&&!Y[n+" "]&&(!O||!O.test(n))&&(!P||!P.test(n)))try{var r=z.call(t,n);if(r||M.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(i){}return e(n,D,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==D&&q(t),F(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==D&&q(t);var n=_.attrHandle[e.toLowerCase()],r=n&&X.call(_.attrHandle,e.toLowerCase())?n(t,e,!R):void 0;return void 0!==r?r:M.attributes||!R?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.escape=function(t){return(t+"").replace(wt,Mt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(L=!M.detectDuplicates,A=!M.sortStable&&t.slice(0),t.sort(V),L){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return A=null,t},k=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=k(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=k(e);return n},_=e.selectors={cacheLength:50,createPseudo:r,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,bt),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,bt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ft.test(n)&&(e=T(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,bt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(at," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),u="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,s){var l,c,f,h,p,d,g=o!==a?"nextSibling":"previousSibling",v=e.parentNode,y=u&&e.nodeName.toLowerCase(),m=!s&&!u,x=!1;if(v){if(o){for(;g;){for(h=e;h=h[g];)if(u?h.nodeName.toLowerCase()===y:1===h.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?v.firstChild:v.lastChild],a&&m){for(h=v,f=h[H]||(h[H]={}),c=f[h.uniqueID]||(f[h.uniqueID]={}),l=c[t]||[],p=l[0]===U&&l[1],x=p&&l[2],h=p&&v.childNodes[p];h=++p&&h&&h[g]||(x=p=0)||d.pop();)if(1===h.nodeType&&++x&&h===e){c[t]=[U,p,x];break}}else if(m&&(h=e,f=h[H]||(h[H]={}),c=f[h.uniqueID]||(f[h.uniqueID]={}),l=c[t]||[],p=l[0]===U&&l[1],x=p),x===!1)for(;(h=++p&&h&&h[g]||(x=p=0)||d.pop())&&((u?h.nodeName.toLowerCase()!==y:1!==h.nodeType)||!++x||(m&&(f=h[H]||(h[H]={}),c=f[h.uniqueID]||(f[h.uniqueID]={}),c[t]=[U,x]),h!==e)););return x-=i,x===r||x%r===0&&x/r>=0}}},PSEUDO:function(t,n){var i,o=_.pseudos[t]||_.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[H]?o(n):o.length>1?(i=[t,t,"",n],_.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)r=tt(t,i[a]),t[r]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=E(t.replace(ut,"$1"));return i[H]?r(function(t,e,n,r){for(var o,a=i(t,null,r,[]),u=t.length;u--;)(o=a[u])&&(t[u]=!(e[u]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(xt,bt),function(e){return(e.textContent||e.innerText||k(e)).indexOf(t)>-1}}),lang:r(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,bt).toLowerCase(),function(e){var n;do if(n=R?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===j},focus:function(t){return t===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:l(!1),disabled:l(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!_.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[n<0?n+e:n]}),even:c(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:c(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}},_.pseudos.nth=_.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[w]=u(w);for(w in{submit:!0,reset:!0})_.pseudos[w]=s(w);return h.prototype=_.filters=_.pseudos,_.setFilters=new h,T=e.tokenize=function(t,n){var r,i,o,a,u,s,l,c=$[t+" "];if(c)return n?0:c.slice(0);for(u=t,s=[],l=_.preFilter;u;){r&&!(i=st.exec(u))||(i&&(u=u.slice(i[0].length)||u),s.push(o=[])),r=!1,(i=lt.exec(u))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ut," ")}),u=u.slice(r.length));for(a in _.filter)!(i=pt[a].exec(u))||l[a]&&!(i=l[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),u=u.slice(r.length));if(!r)break}return n?u.length:u?e.error(t):$(t,s).slice(0)},E=e.compile=function(t,e){var n,r=[],i=[],o=Y[t+" "];if(!o){for(e||(e=T(t)),n=e.length;n--;)o=x(e[n]),o[H]?r.push(o):i.push(o);o=Y(t,b(i,r)),o.selector=t}return o},C=e.select=function(t,e,n,r){var i,o,a,u,s,l="function"==typeof t&&t,c=!r&&T(t=l.selector||t);if(n=n||[],1===c.length){if(o=c[0]=c[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===e.nodeType&&R&&_.relative[o[1].type]){if(e=(_.find.ID(a.matches[0].replace(xt,bt),e)||[])[0],!e)return n;l&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=pt.needsContext.test(t)?0:o.length;i--&&(a=o[i],!_.relative[u=a.type]);)if((s=_.find[u])&&(r=s(a.matches[0].replace(xt,bt),mt.test(o[0].type)&&f(e.parentNode)||e))){if(o.splice(i,1),t=r.length&&p(o),!t)return Q.apply(n,r),n;break}}return(l||E(t,c))(r,e,!R,n,!e||mt.test(t)&&f(e.parentNode)||e),n},M.sortStable=H.split("").sort(V).join("")===H,M.detectDuplicates=!!L,q(),M.sortDetached=i(function(t){return 1&t.compareDocumentPosition(D.createElement("fieldset"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),M.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var r;if(!n)return t[e]===!0?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(n);mt.find=_t,mt.expr=_t.selectors,mt.expr[":"]=mt.expr.pseudos,mt.uniqueSort=mt.unique=_t.uniqueSort,mt.text=_t.getText,mt.isXMLDoc=_t.isXML,mt.contains=_t.contains,mt.escapeSelector=_t.escape;var kt=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&mt(t).is(n))break;r.push(t)}return r},St=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},Tt=mt.expr.match.needsContext,Et=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ct=/^.[^:#\[\.,]*$/;mt.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?mt.find.matchesSelector(r,t)?[r]:[]:mt.find.matches(t,mt.grep(e,function(t){return 1===t.nodeType}))},mt.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(mt(t).filter(function(){for(e=0;e<r;e++)if(mt.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)mt.find(t,i[e],n);return r>1?mt.uniqueSort(n):n},filter:function(t){return this.pushStack(s(this,t||[],!1))},not:function(t){return this.pushStack(s(this,t||[],!0))},is:function(t){return!!s(this,"string"==typeof t&&Tt.test(t)?mt(t):t||[],!1).length}});var Nt,At=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Lt=mt.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||Nt,"string"==typeof t){if(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:At.exec(t),!r||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof mt?e[0]:e,mt.merge(this,mt.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:ot,!0)),Et.test(r[1])&&mt.isPlainObject(e))for(r in e)mt.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return i=ot.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):mt.isFunction(t)?void 0!==n.ready?n.ready(t):t(mt):mt.makeArray(t,this)};Lt.prototype=mt.fn,Nt=mt(ot);var qt=/^(?:parents|prev(?:Until|All))/,Dt={children:!0,contents:!0,next:!0,prev:!0};mt.fn.extend({has:function(t){var e=mt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(mt.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&mt(t);if(!Tt.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&mt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?mt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?ct.call(mt(t),this[0]):ct.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(mt.uniqueSort(mt.merge(this.get(),mt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),mt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return kt(t,"parentNode")},parentsUntil:function(t,e,n){return kt(t,"parentNode",n)},next:function(t){return l(t,"nextSibling")},prev:function(t){return l(t,"previousSibling")},nextAll:function(t){return kt(t,"nextSibling")},prevAll:function(t){return kt(t,"previousSibling")},nextUntil:function(t,e,n){return kt(t,"nextSibling",n)},prevUntil:function(t,e,n){return kt(t,"previousSibling",n)},siblings:function(t){return St((t.parentNode||{}).firstChild,t)},children:function(t){return St(t.firstChild)},contents:function(t){return t.contentDocument||mt.merge([],t.childNodes)}},function(t,e){mt.fn[t]=function(n,r){var i=mt.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=mt.filter(r,i)),this.length>1&&(Dt[t]||mt.uniqueSort(i),qt.test(t)&&i.reverse()),this.pushStack(i)}});var jt=/[^\x20\t\r\n\f]+/g;mt.Callbacks=function(t){t="string"==typeof t?c(t):mt.extend({},t);var e,n,r,i,o=[],a=[],u=-1,s=function(){for(i=t.once,r=e=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)o[u].apply(n[0],n[1])===!1&&t.stopOnFalse&&(u=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!e&&(u=o.length-1,a.push(n)),function r(e){mt.each(e,function(e,n){mt.isFunction(n)?t.unique&&l.has(n)||o.push(n):n&&n.length&&"string"!==mt.type(n)&&r(n)})}(arguments),n&&!e&&s()),this},remove:function(){return mt.each(arguments,function(t,e){for(var n;(n=mt.inArray(e,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(t){return t?mt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||s()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},mt.extend({Deferred:function(t){var e=[["notify","progress",mt.Callbacks("memory"),mt.Callbacks("memory"),2],["resolve","done",mt.Callbacks("once memory"),mt.Callbacks("once memory"),0,"resolved"],["reject","fail",mt.Callbacks("once memory"),mt.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(t){return i.then(null,t)},pipe:function(){var t=arguments;return mt.Deferred(function(n){mt.each(e,function(e,r){var i=mt.isFunction(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&mt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,r,i){function o(t,e,r,i){return function(){var u=this,s=arguments,l=function(){var n,l;if(!(t<a)){if(n=r.apply(u,s),n===e.promise())throw new TypeError("Thenable self-resolution");l=n&&("object"==typeof n||"function"==typeof n)&&n.then,mt.isFunction(l)?i?l.call(n,o(a,e,f,i),o(a,e,h,i)):(a++,l.call(n,o(a,e,f,i),o(a,e,h,i),o(a,e,f,e.notifyWith))):(r!==f&&(u=void 0,s=[n]),(i||e.resolveWith)(u,s))}},c=i?l:function(){try{l()}catch(n){mt.Deferred.exceptionHook&&mt.Deferred.exceptionHook(n,c.stackTrace),t+1>=a&&(r!==h&&(u=void 0,s=[n]),e.rejectWith(u,s))}};t?c():(mt.Deferred.getStackHook&&(c.stackTrace=mt.Deferred.getStackHook()),n.setTimeout(c))}}var a=0;return mt.Deferred(function(n){e[0][3].add(o(0,n,mt.isFunction(i)?i:f,n.notifyWith)),e[1][3].add(o(0,n,mt.isFunction(t)?t:f)),e[2][3].add(o(0,n,mt.isFunction(r)?r:h))}).promise()},promise:function(t){return null!=t?mt.extend(t,i):i}},o={};return mt.each(e,function(t,n){var a=n[2],u=n[5];i[n[1]]=a.add,u&&a.add(function(){r=u},e[3-t][2].disable,e[0][2].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=ut.call(arguments),o=mt.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?ut.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(p(t,o.done(a(n)).resolve,o.reject),"pending"===o.state()||mt.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)p(i[n],a(n),o.reject);return o.promise()}});var Rt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;mt.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&Rt.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},mt.readyException=function(t){n.setTimeout(function(){throw t})};var Pt=mt.Deferred();mt.fn.ready=function(t){return Pt.then(t)["catch"](function(t){mt.readyException(t)}),this},mt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?mt.readyWait++:mt.ready(!0)},ready:function(t){(t===!0?--mt.readyWait:mt.isReady)||(mt.isReady=!0,t!==!0&&--mt.readyWait>0||Pt.resolveWith(ot,[mt]))}}),mt.ready.then=Pt.then,"complete"===ot.readyState||"loading"!==ot.readyState&&!ot.documentElement.doScroll?n.setTimeout(mt.ready):(ot.addEventListener("DOMContentLoaded",d),n.addEventListener("load",d));var Ot=function(t,e,n,r,i,o,a){var u=0,s=t.length,l=null==n;if("object"===mt.type(n)){i=!0;for(u in n)Ot(t,e,u,n[u],!0,o,a)}else if(void 0!==r&&(i=!0,mt.isFunction(r)||(a=!0),l&&(a?(e.call(t,r),e=null):(l=e,e=function(t,e,n){return l.call(mt(t),n)})),e))for(;u<s;u++)e(t[u],n,a?r:r.call(t[u],u,e(t[u],n)));return i?t:l?e.call(t):s?e(t[0],n):o},zt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};g.uid=1,g.prototype={cache:function(t){var e=t[this.expando];return e||(e={},zt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[mt.camelCase(e)]=n;else for(r in e)i[mt.camelCase(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][mt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){mt.isArray(e)?e=e.map(mt.camelCase):(e=mt.camelCase(e),e=e in r?[e]:e.match(jt)||[]),n=e.length;for(;n--;)delete r[e[n]]}(void 0===e||mt.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!mt.isEmptyObject(e)}};var Ft=new g,Ht=new g,It=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ut=/[A-Z]/g;mt.extend({hasData:function(t){return Ht.hasData(t)||Ft.hasData(t)},data:function(t,e,n){return Ht.access(t,e,n)},removeData:function(t,e){Ht.remove(t,e)},_data:function(t,e,n){return Ft.access(t,e,n)},_removeData:function(t,e){Ft.remove(t,e)}}),mt.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=Ht.get(o),1===o.nodeType&&!Ft.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=mt.camelCase(r.slice(5)),y(o,r,i[r])));Ft.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Ht.set(this,t)}):Ot(this,function(e){var n;if(o&&void 0===e){if(n=Ht.get(o,t),void 0!==n)return n;if(n=y(o,t),void 0!==n)return n}else this.each(function(){Ht.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Ht.remove(this,t)})}}),mt.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Ft.get(t,e),n&&(!r||mt.isArray(n)?r=Ft.access(t,e,mt.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=mt.queue(t,e),r=n.length,i=n.shift(),o=mt._queueHooks(t,e),a=function(){mt.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Ft.get(t,n)||Ft.access(t,n,{empty:mt.Callbacks("once memory").add(function(){Ft.remove(t,[e+"queue",n])})})}}),mt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?mt.queue(this[0],t):void 0===e?this:this.each(function(){var n=mt.queue(this,t,e);mt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&mt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){mt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=mt.Deferred(),o=this,a=this.length,u=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)n=Ft.get(o[a],t+"queueHooks"),n&&n.empty&&(r++,n.empty.add(u));return u(),i.promise(e)}});var Bt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Wt=new RegExp("^(?:([+-])=|)("+Bt+")([a-z%]*)$","i"),$t=["Top","Right","Bottom","Left"],Yt=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&mt.contains(t.ownerDocument,t)&&"none"===mt.css(t,"display")},Vt=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=a[o];return i},Xt={};mt.fn.extend({show:function(){return b(this,!0)},hide:function(){return b(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Yt(this)?mt(this).show():mt(this).hide()})}});var Gt=/^(?:checkbox|radio)$/i,Zt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Jt=/^$|\/(?:java|ecma)script/i,Qt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Qt.optgroup=Qt.option,Qt.tbody=Qt.tfoot=Qt.colgroup=Qt.caption=Qt.thead,
Qt.th=Qt.td;var Kt=/<|&#?\w+;/;!function(){var t=ot.createDocumentFragment(),e=t.appendChild(ot.createElement("div")),n=ot.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),vt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",vt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var te=ot.documentElement,ee=/^key/,ne=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,re=/^([^.]*)(?:\.(.+)|)/;mt.event={global:{},add:function(t,e,n,r,i){var o,a,u,s,l,c,f,h,p,d,g,v=Ft.get(t);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&mt.find.matchesSelector(te,i),n.guid||(n.guid=mt.guid++),(s=v.events)||(s=v.events={}),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof mt&&mt.event.triggered!==e.type?mt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(jt)||[""],l=e.length;l--;)u=re.exec(e[l])||[],p=g=u[1],d=(u[2]||"").split(".").sort(),p&&(f=mt.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=mt.event.special[p]||{},c=mt.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&mt.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=s[p])||(h=s[p]=[],h.delegateCount=0,f.setup&&f.setup.call(t,r,d,a)!==!1||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),mt.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,u,s,l,c,f,h,p,d,g,v=Ft.hasData(t)&&Ft.get(t);if(v&&(s=v.events)){for(e=(e||"").match(jt)||[""],l=e.length;l--;)if(u=re.exec(e[l])||[],p=g=u[1],d=(u[2]||"").split(".").sort(),p){for(f=mt.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,h=s[p]||[],u=u[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||u&&!u.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&f.teardown.call(t,d,v.handle)!==!1||mt.removeEvent(t,p,v.handle),delete s[p])}else for(p in s)mt.event.remove(t,p+e[l],n,r,!0);mt.isEmptyObject(s)&&Ft.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,u=mt.event.fix(t),s=new Array(arguments.length),l=(Ft.get(this,"events")||{})[u.type]||[],c=mt.event.special[u.type]||{};for(s[0]=u,e=1;e<arguments.length;e++)s[e]=arguments[e];if(u.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,u)!==!1){for(a=mt.event.handlers.call(this,u,l),e=0;(i=a[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,r=((mt.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(u.result=r)===!1&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,a,u=[],s=e.delegateCount,l=t.target;if(s&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||l.disabled!==!0)){for(o=[],a={},n=0;n<s;n++)r=e[n],i=r.selector+" ",void 0===a[i]&&(a[i]=r.needsContext?mt(i,this).index(l)>-1:mt.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&u.push({elem:l,handlers:o})}return l=this,s<e.length&&u.push({elem:l,handlers:e.slice(s)}),u},addProp:function(t,e){Object.defineProperty(mt.Event.prototype,t,{enumerable:!0,configurable:!0,get:mt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[mt.expando]?t:new mt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&mt.nodeName(this,"input"))return this.click(),!1},_default:function(t){return mt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},mt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},mt.Event=function(t,e){return this instanceof mt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?k:S,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&mt.extend(this,e),this.timeStamp=t&&t.timeStamp||mt.now(),void(this[mt.expando]=!0)):new mt.Event(t,e)},mt.Event.prototype={constructor:mt.Event,isDefaultPrevented:S,isPropagationStopped:S,isImmediatePropagationStopped:S,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=k,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=k,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=k,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},mt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&ee.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&ne.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},mt.event.addProp),mt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){mt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||mt.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),mt.fn.extend({on:function(t,e,n,r){return E(this,t,e,n,r)},one:function(t,e,n,r){return E(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,mt(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=S),this.each(function(){mt.event.remove(this,t,n,e)})}});var ie=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,oe=/<script|<style|<link/i,ae=/checked\s*(?:[^=]|=\s*.checked.)/i,ue=/^true\/(.*)/,se=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;mt.extend({htmlPrefilter:function(t){return t.replace(ie,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,u=t.cloneNode(!0),s=mt.contains(t.ownerDocument,t);if(!(vt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||mt.isXMLDoc(t)))for(a=w(u),o=w(t),r=0,i=o.length;r<i;r++)q(o[r],a[r]);if(e)if(n)for(o=o||w(t),a=a||w(u),r=0,i=o.length;r<i;r++)L(o[r],a[r]);else L(t,u);return a=w(u,"script"),a.length>0&&M(a,!s&&w(t,"script")),u},cleanData:function(t){for(var e,n,r,i=mt.event.special,o=0;void 0!==(n=t[o]);o++)if(zt(n)){if(e=n[Ft.expando]){if(e.events)for(r in e.events)i[r]?mt.event.remove(n,r):mt.removeEvent(n,r,e.handle);n[Ft.expando]=void 0}n[Ht.expando]&&(n[Ht.expando]=void 0)}}}),mt.fn.extend({detach:function(t){return j(this,t,!0)},remove:function(t){return j(this,t)},text:function(t){return Ot(this,function(t){return void 0===t?mt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return D(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=C(this,t);e.appendChild(t)}})},prepend:function(){return D(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=C(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return D(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return D(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(mt.cleanData(w(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return mt.clone(this,t,e)})},html:function(t){return Ot(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!oe.test(t)&&!Qt[(Zt.exec(t)||["",""])[1].toLowerCase()]){t=mt.htmlPrefilter(t);try{for(;n<r;n++)e=this[n]||{},1===e.nodeType&&(mt.cleanData(w(e,!1)),e.innerHTML=t);e=0}catch(i){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return D(this,arguments,function(e){var n=this.parentNode;mt.inArray(this,t)<0&&(mt.cleanData(w(this)),n&&n.replaceChild(e,this))},t)}}),mt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){mt.fn[t]=function(t){for(var n,r=[],i=mt(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),mt(i[a])[e](n),lt.apply(r,n.get());return this.pushStack(r)}});var le=/^margin/,ce=new RegExp("^("+Bt+")(?!px)[a-z%]+$","i"),fe=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)};!function(){function t(){if(u){u.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",u.innerHTML="",te.appendChild(a);var t=n.getComputedStyle(u);e="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,u.style.marginRight="50%",i="4px"===t.marginRight,te.removeChild(a),u=null}}var e,r,i,o,a=ot.createElement("div"),u=ot.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",vt.clearCloneStyle="content-box"===u.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(u),mt.extend(vt,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var he=/^(none|table(?!-c[ea]).+)/,pe={position:"absolute",visibility:"hidden",display:"block"},de={letterSpacing:"0",fontWeight:"400"},ge=["Webkit","Moz","ms"],ve=ot.createElement("div").style;mt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=R(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,u=mt.camelCase(e),s=t.style;return e=mt.cssProps[u]||(mt.cssProps[u]=O(u)||u),a=mt.cssHooks[e]||mt.cssHooks[u],void 0===n?a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:s[e]:(o=typeof n,"string"===o&&(i=Wt.exec(n))&&i[1]&&(n=m(t,e,i),o="number"),void(null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(mt.cssNumber[u]?"":"px")),vt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(s[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(s[e]=n))))}},css:function(t,e,n,r){var i,o,a,u=mt.camelCase(e);return e=mt.cssProps[u]||(mt.cssProps[u]=O(u)||u),a=mt.cssHooks[e]||mt.cssHooks[u],a&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=R(t,e,r)),"normal"===i&&e in de&&(i=de[e]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),mt.each(["height","width"],function(t,e){mt.cssHooks[e]={get:function(t,n,r){if(n)return!he.test(mt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?H(t,e,r):Vt(t,pe,function(){return H(t,e,r)})},set:function(t,n,r){var i,o=r&&fe(t),a=r&&F(t,e,r,"border-box"===mt.css(t,"boxSizing",!1,o),o);return a&&(i=Wt.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=mt.css(t,e)),z(t,n,a)}}}),mt.cssHooks.marginLeft=P(vt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(R(t,"marginLeft"))||t.getBoundingClientRect().left-Vt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),mt.each({margin:"",padding:"",border:"Width"},function(t,e){mt.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+$t[r]+e]=o[r]||o[r-2]||o[0];return i}},le.test(t)||(mt.cssHooks[t+e].set=z)}),mt.fn.extend({css:function(t,e){return Ot(this,function(t,e,n){var r,i,o={},a=0;if(mt.isArray(e)){for(r=fe(t),i=e.length;a<i;a++)o[e[a]]=mt.css(t,e[a],!1,r);return o}return void 0!==n?mt.style(t,e,n):mt.css(t,e)},t,e,arguments.length>1)}}),mt.Tween=I,I.prototype={constructor:I,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||mt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(mt.cssNumber[n]?"":"px")},cur:function(){var t=I.propHooks[this.prop];return t&&t.get?t.get(this):I.propHooks._default.get(this)},run:function(t){var e,n=I.propHooks[this.prop];return this.options.duration?this.pos=e=mt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=mt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){mt.fx.step[t.prop]?mt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[mt.cssProps[t.prop]]&&!mt.cssHooks[t.prop]?t.elem[t.prop]=t.now:mt.style(t.elem,t.prop,t.now+t.unit)}}},I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},mt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},mt.fx=I.prototype.init,mt.fx.step={};var ye,me,xe=/^(?:toggle|show|hide)$/,be=/queueHooks$/;mt.Animation=mt.extend(X,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return m(n.elem,t,Wt.exec(e),n),n}]},tweener:function(t,e){mt.isFunction(t)?(e=t,t=["*"]):t=t.match(jt);for(var n,r=0,i=t.length;r<i;r++)n=t[r],X.tweeners[n]=X.tweeners[n]||[],X.tweeners[n].unshift(e)},prefilters:[Y],prefilter:function(t,e){e?X.prefilters.unshift(t):X.prefilters.push(t)}}),mt.speed=function(t,e,n){var r=t&&"object"==typeof t?mt.extend({},t):{complete:n||!n&&e||mt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!mt.isFunction(e)&&e};return mt.fx.off||ot.hidden?r.duration=0:"number"!=typeof r.duration&&(r.duration in mt.fx.speeds?r.duration=mt.fx.speeds[r.duration]:r.duration=mt.fx.speeds._default),null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){mt.isFunction(r.old)&&r.old.call(this),r.queue&&mt.dequeue(this,r.queue)},r},mt.fn.extend({fadeTo:function(t,e,n,r){return this.filter(Yt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=mt.isEmptyObject(t),o=mt.speed(e,n,r),a=function(){var e=X(this,mt.extend({},t),o);(i||Ft.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=mt.timers,a=Ft.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&be.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||mt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Ft.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=mt.timers,a=r?r.length:0;for(n.finish=!0,mt.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),mt.each(["toggle","show","hide"],function(t,e){var n=mt.fn[e];mt.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(W(e,!0),t,r,i)}}),mt.each({slideDown:W("show"),slideUp:W("hide"),slideToggle:W("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){mt.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),mt.timers=[],mt.fx.tick=function(){var t,e=0,n=mt.timers;for(ye=mt.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||mt.fx.stop(),ye=void 0},mt.fx.timer=function(t){mt.timers.push(t),t()?mt.fx.start():mt.timers.pop()},mt.fx.interval=13,mt.fx.start=function(){me||(me=n.requestAnimationFrame?n.requestAnimationFrame(U):n.setInterval(mt.fx.tick,mt.fx.interval))},mt.fx.stop=function(){n.cancelAnimationFrame?n.cancelAnimationFrame(me):n.clearInterval(me),me=null},mt.fx.speeds={slow:600,fast:200,_default:400},mt.fn.delay=function(t,e){return t=mt.fx?mt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}})},function(){var t=ot.createElement("input"),e=ot.createElement("select"),n=e.appendChild(ot.createElement("option"));t.type="checkbox",vt.checkOn=""!==t.value,vt.optSelected=n.selected,t=ot.createElement("input"),t.value="t",t.type="radio",vt.radioValue="t"===t.value}();var we,Me=mt.expr.attrHandle;mt.fn.extend({attr:function(t,e){return Ot(this,mt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){mt.removeAttr(this,t)})}}),mt.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?mt.prop(t,e,n):(1===o&&mt.isXMLDoc(t)||(i=mt.attrHooks[e.toLowerCase()]||(mt.expr.match.bool.test(e)?we:void 0)),void 0!==n?null===n?void mt.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=mt.find.attr(t,e),null==r?void 0:r))},attrHooks:{type:{set:function(t,e){if(!vt.radioValue&&"radio"===e&&mt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(jt);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),we={set:function(t,e,n){return e===!1?mt.removeAttr(t,n):t.setAttribute(n,n),n}},mt.each(mt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=Me[e]||mt.find.attr;Me[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=Me[a],Me[a]=i,i=null!=n(t,e,r)?a:null,Me[a]=o),i}});var _e=/^(?:input|select|textarea|button)$/i,ke=/^(?:a|area)$/i;mt.fn.extend({prop:function(t,e){return Ot(this,mt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[mt.propFix[t]||t]})}}),mt.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&mt.isXMLDoc(t)||(e=mt.propFix[e]||e,i=mt.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=mt.find.attr(t,"tabindex");return e?parseInt(e,10):_e.test(t.nodeName)||ke.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),vt.optSelected||(mt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),mt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){mt.propFix[this.toLowerCase()]=this}),mt.fn.extend({addClass:function(t){var e,n,r,i,o,a,u,s=0;if(mt.isFunction(t))return this.each(function(e){mt(this).addClass(t.call(this,e,Z(this)))});if("string"==typeof t&&t)for(e=t.match(jt)||[];n=this[s++];)if(i=Z(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");u=G(r),i!==u&&n.setAttribute("class",u)}return this},removeClass:function(t){var e,n,r,i,o,a,u,s=0;if(mt.isFunction(t))return this.each(function(e){mt(this).removeClass(t.call(this,e,Z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(jt)||[];n=this[s++];)if(i=Z(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");u=G(r),i!==u&&n.setAttribute("class",u)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):mt.isFunction(t)?this.each(function(n){mt(this).toggleClass(t.call(this,n,Z(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(r=0,i=mt(this),o=t.match(jt)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||(e=Z(this),e&&Ft.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Ft.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+G(Z(n))+" ").indexOf(e)>-1)return!0;return!1}});var Se=/\r/g;mt.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=mt.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,mt(this).val()):t,null==i?i="":"number"==typeof i?i+="":mt.isArray(i)&&(i=mt.map(i,function(t){return null==t?"":t+""})),e=mt.valHooks[this.type]||mt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))})):i?(e=mt.valHooks[i.type]||mt.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(Se,""):null==n?"":n)):void 0}}),mt.extend({valHooks:{option:{get:function(t){var e=mt.find.attr(t,"value");return null!=e?e:G(mt.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,u=a?null:[],s=a?o+1:i.length;for(r=o<0?s:a?o:0;r<s;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!mt.nodeName(n.parentNode,"optgroup"))){if(e=mt(n).val(),a)return e;u.push(e)}return u},set:function(t,e){for(var n,r,i=t.options,o=mt.makeArray(e),a=i.length;a--;)r=i[a],(r.selected=mt.inArray(mt.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),mt.each(["radio","checkbox"],function(){mt.valHooks[this]={set:function(t,e){if(mt.isArray(e))return t.checked=mt.inArray(mt(t).val(),e)>-1}},vt.checkOn||(mt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Te=/^(?:focusinfocus|focusoutblur)$/;mt.extend(mt.event,{trigger:function(t,e,r,i){var o,a,u,s,l,c,f,h=[r||ot],p=pt.call(t,"type")?t.type:t,d=pt.call(t,"namespace")?t.namespace.split("."):[];if(a=u=r=r||ot,3!==r.nodeType&&8!==r.nodeType&&!Te.test(p+mt.event.triggered)&&(p.indexOf(".")>-1&&(d=p.split("."),p=d.shift(),d.sort()),l=p.indexOf(":")<0&&"on"+p,t=t[mt.expando]?t:new mt.Event(p,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:mt.makeArray(e,[t]),f=mt.event.special[p]||{},i||!f.trigger||f.trigger.apply(r,e)!==!1)){if(!i&&!f.noBubble&&!mt.isWindow(r)){for(s=f.delegateType||p,Te.test(s+p)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||ot)&&h.push(u.defaultView||u.parentWindow||n)}for(o=0;(a=h[o++])&&!t.isPropagationStopped();)t.type=o>1?s:f.bindType||p,c=(Ft.get(a,"events")||{})[t.type]&&Ft.get(a,"handle"),c&&c.apply(a,e),c=l&&a[l],c&&c.apply&&zt(a)&&(t.result=c.apply(a,e),t.result===!1&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),e)!==!1||!zt(r)||l&&mt.isFunction(r[p])&&!mt.isWindow(r)&&(u=r[l],u&&(r[l]=null),mt.event.triggered=p,r[p](),mt.event.triggered=void 0,u&&(r[l]=u)),t.result}},simulate:function(t,e,n){var r=mt.extend(new mt.Event,n,{type:t,isSimulated:!0});mt.event.trigger(r,null,e)}}),mt.fn.extend({trigger:function(t,e){return this.each(function(){mt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return mt.event.trigger(t,e,n,!0)}}),mt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){mt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),mt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),vt.focusin="onfocusin"in n,vt.focusin||mt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){mt.event.simulate(e,t.target,mt.event.fix(t))};mt.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Ft.access(r,e);i||r.addEventListener(t,n,!0),Ft.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ft.access(r,e)-1;i?Ft.access(r,e,i):(r.removeEventListener(t,n,!0),Ft.remove(r,e))}}});var Ee=n.location,Ce=mt.now(),Ne=/\?/;mt.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(r){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||mt.error("Invalid XML: "+t),e};var Ae=/\[\]$/,Le=/\r?\n/g,qe=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;mt.param=function(t,e){var n,r=[],i=function(t,e){var n=mt.isFunction(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(mt.isArray(t)||t.jquery&&!mt.isPlainObject(t))mt.each(t,function(){i(this.name,this.value)});else for(n in t)J(n,t[n],e,i);return r.join("&")},mt.fn.extend({serialize:function(){return mt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=mt.prop(this,"elements");return t?mt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!mt(this).is(":disabled")&&De.test(this.nodeName)&&!qe.test(t)&&(this.checked||!Gt.test(t))}).map(function(t,e){var n=mt(this).val();return null==n?null:mt.isArray(n)?mt.map(n,function(t){return{name:e.name,value:t.replace(Le,"\r\n")}}):{name:e.name,value:n.replace(Le,"\r\n")}}).get()}});var je=/%20/g,Re=/#.*$/,Pe=/([?&])_=[^&]*/,Oe=/^(.*?):[ \t]*([^\r\n]*)$/gm,ze=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Fe=/^(?:GET|HEAD)$/,He=/^\/\//,Ie={},Ue={},Be="*/".concat("*"),We=ot.createElement("a");We.href=Ee.href,mt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ee.href,type:"GET",isLocal:ze.test(Ee.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":mt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?tt(tt(t,mt.ajaxSettings),e):tt(mt.ajaxSettings,t)},ajaxPrefilter:Q(Ie),ajaxTransport:Q(Ue),ajax:function(t,e){function r(t,e,r,u){var l,h,p,b,w,M=e;c||(c=!0,s&&n.clearTimeout(s),i=void 0,a=u||"",_.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(b=et(d,_,r)),b=nt(d,b,_,l),l?(d.ifModified&&(w=_.getResponseHeader("Last-Modified"),w&&(mt.lastModified[o]=w),w=_.getResponseHeader("etag"),w&&(mt.etag[o]=w)),204===t||"HEAD"===d.type?M="nocontent":304===t?M="notmodified":(M=b.state,h=b.data,p=b.error,l=!p)):(p=M,!t&&M||(M="error",t<0&&(t=0))),_.status=t,_.statusText=(e||M)+"",l?y.resolveWith(g,[h,M,_]):y.rejectWith(g,[_,M,p]),_.statusCode(x),x=void 0,f&&v.trigger(l?"ajaxSuccess":"ajaxError",[_,d,l?h:p]),m.fireWith(g,[_,M]),f&&(v.trigger("ajaxComplete",[_,d]),--mt.active||mt.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,o,a,u,s,l,c,f,h,p,d=mt.ajaxSetup({},e),g=d.context||d,v=d.context&&(g.nodeType||g.jquery)?mt(g):mt.event,y=mt.Deferred(),m=mt.Callbacks("once memory"),x=d.statusCode||{},b={},w={},M="canceled",_={readyState:0,getResponseHeader:function(t){var e;if(c){if(!u)for(u={};e=Oe.exec(a);)u[e[1].toLowerCase()]=e[2];e=u[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==c&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)_.always(t[_.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||M;return i&&i.abort(e),r(0,e),this}};if(y.promise(_),d.url=((t||d.url||Ee.href)+"").replace(He,Ee.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(jt)||[""],null==d.crossDomain){l=ot.createElement("a");try{l.href=d.url,l.href=l.href,d.crossDomain=We.protocol+"//"+We.host!=l.protocol+"//"+l.host}catch(k){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=mt.param(d.data,d.traditional)),K(Ie,d,e,_),c)return _;f=mt.event&&d.global,f&&0===mt.active++&&mt.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Fe.test(d.type),o=d.url.replace(Re,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(je,"+")):(p=d.url.slice(o.length),d.data&&(o+=(Ne.test(o)?"&":"?")+d.data,delete d.data),d.cache===!1&&(o=o.replace(Pe,"$1"),p=(Ne.test(o)?"&":"?")+"_="+Ce++ +p),d.url=o+p),d.ifModified&&(mt.lastModified[o]&&_.setRequestHeader("If-Modified-Since",mt.lastModified[o]),mt.etag[o]&&_.setRequestHeader("If-None-Match",mt.etag[o])),(d.data&&d.hasContent&&d.contentType!==!1||e.contentType)&&_.setRequestHeader("Content-Type",d.contentType),_.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]);for(h in d.headers)_.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(d.beforeSend.call(g,_,d)===!1||c))return _.abort();if(M="abort",m.add(d.complete),_.done(d.success),_.fail(d.error),i=K(Ue,d,e,_)){if(_.readyState=1,f&&v.trigger("ajaxSend",[_,d]),c)return _;d.async&&d.timeout>0&&(s=n.setTimeout(function(){_.abort("timeout")},d.timeout));try{c=!1,i.send(b,r)}catch(k){if(c)throw k;r(-1,k)}}else r(-1,"No Transport");return _},getJSON:function(t,e,n){return mt.get(t,e,n,"json")},getScript:function(t,e){return mt.get(t,void 0,e,"script")}}),mt.each(["get","post"],function(t,e){mt[e]=function(t,n,r,i){return mt.isFunction(n)&&(i=i||r,r=n,n=void 0),mt.ajax(mt.extend({url:t,type:e,dataType:i,data:n,success:r},mt.isPlainObject(t)&&t))}}),mt._evalUrl=function(t){return mt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},mt.fn.extend({wrapAll:function(t){var e;return this[0]&&(mt.isFunction(t)&&(t=t.call(this[0])),e=mt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return mt.isFunction(t)?this.each(function(e){mt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=mt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=mt.isFunction(t);return this.each(function(n){mt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){
return this.parent(t).not("body").each(function(){mt(this).replaceWith(this.childNodes)}),this}}),mt.expr.pseudos.hidden=function(t){return!mt.expr.pseudos.visible(t)},mt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},mt.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},Ye=mt.ajaxSettings.xhr();vt.cors=!!Ye&&"withCredentials"in Ye,vt.ajax=Ye=!!Ye,mt.ajaxTransport(function(t){var e,r;if(vt.cors||Ye&&!t.crossDomain)return{send:function(i,o){var a,u=t.xhr();if(u.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)u[a]=t.xhrFields[a];t.mimeType&&u.overrideMimeType&&u.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)u.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=u.onload=u.onerror=u.onabort=u.onreadystatechange=null,"abort"===t?u.abort():"error"===t?"number"!=typeof u.status?o(0,"error"):o(u.status,u.statusText):o($e[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=e(),r=u.onerror=e("error"),void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){4===u.readyState&&n.setTimeout(function(){e&&r()})},e=e("abort");try{u.send(t.hasContent&&t.data||null)}catch(s){if(e)throw s}},abort:function(){e&&e()}}}),mt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),mt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return mt.globalEval(t),t}}}),mt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),mt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=mt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),ot.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ve=[],Xe=/(=)\?(?=&|$)|\?\?/;mt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||mt.expando+"_"+Ce++;return this[t]=!0,t}}),mt.ajaxPrefilter("json jsonp",function(t,e,r){var i,o,a,u=t.jsonp!==!1&&(Xe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xe.test(t.data)&&"data");if(u||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=mt.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,u?t[u]=t[u].replace(Xe,"$1"+i):t.jsonp!==!1&&(t.url+=(Ne.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||mt.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?mt(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(i)),a&&mt.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),vt.createHTMLDocument=function(){var t=ot.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),mt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var r,i,o;return e||(vt.createHTMLDocument?(e=ot.implementation.createHTMLDocument(""),r=e.createElement("base"),r.href=ot.location.href,e.head.appendChild(r)):e=ot),i=Et.exec(t),o=!n&&[],i?[e.createElement(i[1])]:(i=_([t],e,o),o&&o.length&&mt(o).remove(),mt.merge([],i.childNodes))},mt.fn.load=function(t,e,n){var r,i,o,a=this,u=t.indexOf(" ");return u>-1&&(r=G(t.slice(u)),t=t.slice(0,u)),mt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&mt.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?mt("<div>").append(mt.parseHTML(t)).find(r):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},mt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){mt.fn[e]=function(t){return this.on(e,t)}}),mt.expr.pseudos.animated=function(t){return mt.grep(mt.timers,function(e){return t===e.elem}).length},mt.offset={setOffset:function(t,e,n){var r,i,o,a,u,s,l,c=mt.css(t,"position"),f=mt(t),h={};"static"===c&&(t.style.position="relative"),u=f.offset(),o=mt.css(t,"top"),s=mt.css(t,"left"),l=("absolute"===c||"fixed"===c)&&(o+s).indexOf("auto")>-1,l?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(s)||0),mt.isFunction(e)&&(e=e.call(t,n,mt.extend({},u))),null!=e.top&&(h.top=e.top-u.top+a),null!=e.left&&(h.left=e.left-u.left+i),"using"in e?e.using.call(t,h):f.css(h)}},mt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){mt.offset.setOffset(this,t,e)});var e,n,r,i,o=this[0];return o?o.getClientRects().length?(r=o.getBoundingClientRect(),r.width||r.height?(i=o.ownerDocument,n=rt(i),e=i.documentElement,{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===mt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),mt.nodeName(t[0],"html")||(r=t.offset()),r={top:r.top+mt.css(t[0],"borderTopWidth",!0),left:r.left+mt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-r.top-mt.css(n,"marginTop",!0),left:e.left-r.left-mt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===mt.css(t,"position");)t=t.offsetParent;return t||te})}}),mt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;mt.fn[t]=function(r){return Ot(this,function(t,r,i){var o=rt(t);return void 0===i?o?o[e]:t[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i)},t,r,arguments.length)}}),mt.each(["top","left"],function(t,e){mt.cssHooks[e]=P(vt.pixelPosition,function(t,n){if(n)return n=R(t,e),ce.test(n)?mt(t).position()[e]+"px":n})}),mt.each({Height:"height",Width:"width"},function(t,e){mt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){mt.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),u=n||(i===!0||o===!0?"margin":"border");return Ot(this,function(e,n,i){var o;return mt.isWindow(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?mt.css(e,n,u):mt.style(e,n,i,u)},e,a?i:void 0,a)}})}),mt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),mt.parseJSON=JSON.parse,r=[],i=function(){return mt}.apply(e,r),!(void 0!==i&&(t.exports=i));var Ge=n.jQuery,Ze=n.$;return mt.noConflict=function(t){return n.$===mt&&(n.$=Ze),t&&n.jQuery===mt&&(n.jQuery=Ge),mt},o||(n.jQuery=n.$=mt),mt})},function(t,e,n){var r,i;!function(o,a){"use strict";r=a,i="function"==typeof r?r.call(e,n,e,t):r,!(void 0!==i&&(t.exports=i))}(this,function(){"use strict";function t(t){return typeof console!==u&&(void 0!==console[t]?e(console,t):void 0!==console.log?e(console,"log"):a)}function e(t,e){var n=t[e];if("function"==typeof n.bind)return n.bind(t);try{return Function.prototype.bind.call(n,t)}catch(r){return function(){return Function.prototype.apply.apply(n,[t,arguments])}}}function n(t,e,n){return function(){typeof console!==u&&(r.call(this,e,n),this[t].apply(this,arguments))}}function r(t,e){for(var n=0;n<s.length;n++){var r=s[n];this[r]=n<t?a:this.methodFactory(r,t,e)}}function i(e,r,i){return t(e)||n.apply(this,arguments)}function o(t,e,n){function o(t){var e=(s[t]||"silent").toUpperCase();try{return void(window.localStorage[f]=e)}catch(n){}try{window.document.cookie=encodeURIComponent(f)+"="+e+";"}catch(n){}}function a(){var t;try{t=window.localStorage[f]}catch(e){}if(typeof t===u)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(f)+"=");r&&(t=/^([^;]+)/.exec(n.slice(r))[1])}catch(e){}return void 0===c.levels[t]&&(t=void 0),t}var l,c=this,f="loglevel";t&&(f+=":"+t),c.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},c.methodFactory=n||i,c.getLevel=function(){return l},c.setLevel=function(e,n){if("string"==typeof e&&void 0!==c.levels[e.toUpperCase()]&&(e=c.levels[e.toUpperCase()]),!("number"==typeof e&&e>=0&&e<=c.levels.SILENT))throw"log.setLevel() called with invalid level: "+e;if(l=e,n!==!1&&o(e),r.call(c,e,t),typeof console===u&&e<c.levels.SILENT)return"No console available for logging"},c.setDefaultLevel=function(t){a()||c.setLevel(t,!1)},c.enableAll=function(t){c.setLevel(c.levels.TRACE,t)},c.disableAll=function(t){c.setLevel(c.levels.SILENT,t)};var h=a();null==h&&(h=null==e?"WARN":e),c.setLevel(h,!1)}var a=function(){},u="undefined",s=["trace","debug","info","warn","error"],l=new o,c={};l.getLogger=function(t){if("string"!=typeof t||""===t)throw new TypeError("You must supply a name when creating a logger.");var e=c[t];return e||(e=c[t]=new o(t,l.getLevel(),l.methodFactory)),e};var f=typeof window!==u?window.log:void 0;return l.noConflict=function(){return typeof window!==u&&window.log===l&&(window.log=f),l},l})},function(t,e,n){var r,i;!function(){function o(t){return t&&(t.ownerDocument||t.document||t).documentElement}function a(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}function u(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function s(t){return null===t?NaN:+t}function l(t){return!isNaN(t)}function c(t){return{left:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}}function f(t){return t.length}function h(t){for(var e=1;t*e%1;)e*=10;return e}function p(t,e){for(var n in e)Object.defineProperty(t.prototype,n,{value:e[n],enumerable:!1})}function d(){this._=Object.create(null)}function g(t){return(t+="")===Ta||t[0]===Ea?Ea+t:t}function v(t){return(t+="")[0]===Ea?t.slice(1):t}function y(t){return g(t)in this._}function m(t){return(t=g(t))in this._&&delete this._[t]}function x(){var t=[];for(var e in this._)t.push(v(e));return t}function b(){var t=0;for(var e in this._)++t;return t}function w(){for(var t in this._)return!1;return!0}function M(){this._=Object.create(null)}function _(t){return t}function k(t,e,n){return function(){var r=n.apply(e,arguments);return r===e?t:r}}function S(t,e){if(e in t)return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var n=0,r=Ca.length;n<r;++n){var i=Ca[n]+e;if(i in t)return i}}function T(){}function E(){}function C(t){function e(){for(var e,r=n,i=-1,o=r.length;++i<o;)(e=r[i].on)&&e.apply(this,arguments);return t}var n=[],r=new d;return e.on=function(e,i){var o,a=r.get(e);return arguments.length<2?a&&a.on:(a&&(a.on=null,n=n.slice(0,o=n.indexOf(a)).concat(n.slice(o+1)),r.remove(e)),i&&n.push(r.set(e,{on:i})),t)},e}function N(){pa.event.preventDefault()}function A(){for(var t,e=pa.event;t=e.sourceEvent;)e=t;return e}function L(t){for(var e=new E,n=0,r=arguments.length;++n<r;)e[arguments[n]]=C(e);return e.of=function(n,r){return function(i){try{var o=i.sourceEvent=pa.event;i.target=t,pa.event=i,e[i.type].apply(n,r)}finally{pa.event=o}}},e}function q(t){return Aa(t,ja),t}function D(t){return"function"==typeof t?t:function(){return La(t,this)}}function j(t){return"function"==typeof t?t:function(){return qa(t,this)}}function R(t,e){function n(){this.removeAttribute(t)}function r(){this.removeAttributeNS(t.space,t.local)}function i(){this.setAttribute(t,e)}function o(){this.setAttributeNS(t.space,t.local,e)}function a(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}function u(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}return t=pa.ns.qualify(t),null==e?t.local?r:n:"function"==typeof e?t.local?u:a:t.local?o:i}function P(t){return t.trim().replace(/\s+/g," ")}function O(t){return new RegExp("(?:^|\\s+)"+pa.requote(t)+"(?:\\s+|$)","g")}function z(t){return(t+"").trim().split(/^|\s+/)}function F(t,e){function n(){for(var n=-1;++n<i;)t[n](this,e)}function r(){for(var n=-1,r=e.apply(this,arguments);++n<i;)t[n](this,r)}t=z(t).map(H);var i=t.length;return"function"==typeof e?r:n}function H(t){var e=O(t);return function(n,r){if(i=n.classList)return r?i.add(t):i.remove(t);var i=n.getAttribute("class")||"";r?(e.lastIndex=0,e.test(i)||n.setAttribute("class",P(i+" "+t))):n.setAttribute("class",P(i.replace(e," ")))}}function I(t,e,n){function r(){this.style.removeProperty(t)}function i(){this.style.setProperty(t,e,n)}function o(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}return null==e?r:"function"==typeof e?o:i}function U(t,e){function n(){delete this[t]}function r(){this[t]=e}function i(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}return null==e?n:"function"==typeof e?i:r}function B(t){function e(){var e=this.ownerDocument,n=this.namespaceURI;return n===Ra&&e.documentElement.namespaceURI===Ra?e.createElement(t):e.createElementNS(n,t)}function n(){return this.ownerDocument.createElementNS(t.space,t.local)}return"function"==typeof t?t:(t=pa.ns.qualify(t)).local?n:e}function W(){var t=this.parentNode;t&&t.removeChild(this)}function $(t){return{__data__:t}}function Y(t){return function(){return Da(this,t)}}function V(t){return arguments.length||(t=u),function(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}}function X(t,e){for(var n=0,r=t.length;n<r;n++)for(var i,o=t[n],a=0,u=o.length;a<u;a++)(i=o[a])&&e(i,a,n);return t}function G(t){return Aa(t,Oa),t}function Z(t){var e,n;return function(r,i,o){var a,u=t[o].update,s=u.length;for(o!=n&&(n=o,e=0),i>=e&&(e=i+1);!(a=u[e])&&++e<s;);return a}}function J(t,e,n){function r(){var e=this[a];e&&(this.removeEventListener(t,e,e.$),delete this[a])}function i(){var i=s(e,ga(arguments));r.call(this),this.addEventListener(t,this[a]=i,i.$=n),i._=e}function o(){var e,n=new RegExp("^__on([^.]+)"+pa.requote(t)+"$");for(var r in this)if(e=r.match(n)){var i=this[r];this.removeEventListener(e[1],i,i.$),delete this[r]}}var a="__on"+t,u=t.indexOf("."),s=Q;u>0&&(t=t.slice(0,u));var l=za.get(t);return l&&(t=l,s=K),u?e?i:r:e?T:o}function Q(t,e){return function(n){var r=pa.event;pa.event=n,e[0]=this.__data__;try{t.apply(this,e)}finally{pa.event=r}}}function K(t,e){var n=Q(t,e);return function(t){var e=this,r=t.relatedTarget;r&&(r===e||8&r.compareDocumentPosition(e))||n.call(e,t)}}function tt(t){var e=".dragsuppress-"+ ++Ha,n="click"+e,r=pa.select(a(t)).on("touchmove"+e,N).on("dragstart"+e,N).on("selectstart"+e,N);if(null==Fa&&(Fa=!("onselectstart"in t)&&S(t.style,"userSelect")),Fa){var i=o(t).style,u=i[Fa];i[Fa]="none"}return function(t){if(r.on(e,null),Fa&&(i[Fa]=u),t){var o=function(){r.on(n,null)};r.on(n,function(){N(),o()},!0),setTimeout(o,0)}}}function et(t,e){e.changedTouches&&(e=e.changedTouches[0]);var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();if(Ia<0){var i=a(t);if(i.scrollX||i.scrollY){n=pa.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var o=n[0][0].getScreenCTM();Ia=!(o.f||o.e),n.remove()}}return Ia?(r.x=e.pageX,r.y=e.pageY):(r.x=e.clientX,r.y=e.clientY),r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var u=t.getBoundingClientRect();return[e.clientX-u.left-t.clientLeft,e.clientY-u.top-t.clientTop]}function nt(){return pa.event.changedTouches[0].identifier}function rt(t){return t>0?1:t<0?-1:0}function it(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function ot(t){return t>1?0:t<-1?Wa:Math.acos(t)}function at(t){return t>1?Va:t<-1?-Va:Math.asin(t)}function ut(t){return((t=Math.exp(t))-1/t)/2}function st(t){return((t=Math.exp(t))+1/t)/2}function lt(t){return((t=Math.exp(2*t))-1)/(t+1)}function ct(t){return(t=Math.sin(t/2))*t}function ft(){}function ht(t,e,n){return this instanceof ht?(this.h=+t,this.s=+e,void(this.l=+n)):arguments.length<2?t instanceof ht?new ht(t.h,t.s,t.l):Tt(""+t,Et,ht):new ht(t,e,n)}function pt(t,e,n){function r(t){return t>360?t-=360:t<0&&(t+=360),t<60?o+(a-o)*t/60:t<180?a:t<240?o+(a-o)*(240-t)/60:o}function i(t){return Math.round(255*r(t))}var o,a;return t=isNaN(t)?0:(t%=360)<0?t+360:t,e=isNaN(e)?0:e<0?0:e>1?1:e,n=n<0?0:n>1?1:n,a=n<=.5?n*(1+e):n+e-n*e,o=2*n-a,new Mt(i(t+120),i(t),i(t-120))}function dt(t,e,n){return this instanceof dt?(this.h=+t,this.c=+e,void(this.l=+n)):arguments.length<2?t instanceof dt?new dt(t.h,t.c,t.l):t instanceof vt?mt(t.l,t.a,t.b):mt((t=Ct((t=pa.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new dt(t,e,n)}function gt(t,e,n){return isNaN(t)&&(t=0),isNaN(e)&&(e=0),new vt(n,Math.cos(t*=Xa)*e,Math.sin(t)*e)}function vt(t,e,n){return this instanceof vt?(this.l=+t,this.a=+e,void(this.b=+n)):arguments.length<2?t instanceof vt?new vt(t.l,t.a,t.b):t instanceof dt?gt(t.h,t.c,t.l):Ct((t=Mt(t)).r,t.g,t.b):new vt(t,e,n)}function yt(t,e,n){var r=(t+16)/116,i=r+e/500,o=r-n/200;return i=xt(i)*ou,r=xt(r)*au,o=xt(o)*uu,new Mt(wt(3.2404542*i-1.5371385*r-.4985314*o),wt(-.969266*i+1.8760108*r+.041556*o),wt(.0556434*i-.2040259*r+1.0572252*o))}function mt(t,e,n){return t>0?new dt(Math.atan2(n,e)*Ga,Math.sqrt(e*e+n*n),t):new dt(NaN,NaN,t)}function xt(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function bt(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function wt(t){return Math.round(255*(t<=.00304?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function Mt(t,e,n){return this instanceof Mt?(this.r=~~t,this.g=~~e,void(this.b=~~n)):arguments.length<2?t instanceof Mt?new Mt(t.r,t.g,t.b):Tt(""+t,Mt,pt):new Mt(t,e,n)}function _t(t){return new Mt(t>>16,t>>8&255,255&t)}function kt(t){return _t(t)+""}function St(t){return t<16?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function Tt(t,e,n){var r,i,o,a=0,u=0,s=0;if(r=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return n(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return e(At(i[0]),At(i[1]),At(i[2]))}return(o=cu.get(t))?e(o.r,o.g,o.b):(null==t||"#"!==t.charAt(0)||isNaN(o=parseInt(t.slice(1),16))||(4===t.length?(a=(3840&o)>>4,a=a>>4|a,u=240&o,u=u>>4|u,s=15&o,s=s<<4|s):7===t.length&&(a=(16711680&o)>>16,u=(65280&o)>>8,s=255&o)),e(a,u,s))}function Et(t,e,n){var r,i,o=Math.min(t/=255,e/=255,n/=255),a=Math.max(t,e,n),u=a-o,s=(a+o)/2;return u?(i=s<.5?u/(a+o):u/(2-a-o),r=t==a?(e-n)/u+(e<n?6:0):e==a?(n-t)/u+2:(t-e)/u+4,r*=60):(r=NaN,i=s>0&&s<1?0:r),new ht(r,i,s)}function Ct(t,e,n){t=Nt(t),e=Nt(e),n=Nt(n);var r=bt((.4124564*t+.3575761*e+.1804375*n)/ou),i=bt((.2126729*t+.7151522*e+.072175*n)/au),o=bt((.0193339*t+.119192*e+.9503041*n)/uu);return vt(116*i-16,500*(r-i),200*(i-o))}function Nt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function At(t){var e=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*e):e}function Lt(t){return"function"==typeof t?t:function(){return t}}function qt(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=null),Dt(e,n,t,r)}}function Dt(t,e,n,r){function i(){var t,e=s.status;if(!e&&Rt(s)||e>=200&&e<300||304===e){try{t=n.call(o,s)}catch(r){return void a.error.call(o,r)}a.load.call(o,t)}else a.error.call(o,s)}var o={},a=pa.dispatch("beforesend","progress","load","error"),u={},s=new XMLHttpRequest,l=null;return!this.XDomainRequest||"withCredentials"in s||!/^(http(s)?:)?\/\//.test(t)||(s=new XDomainRequest),"onload"in s?s.onload=s.onerror=i:s.onreadystatechange=function(){s.readyState>3&&i()},s.onprogress=function(t){var e=pa.event;pa.event=t;try{a.progress.call(o,s)}finally{pa.event=e}},o.header=function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?u[t]:(null==e?delete u[t]:u[t]=e+"",o)},o.mimeType=function(t){return arguments.length?(e=null==t?null:t+"",o):e},o.responseType=function(t){return arguments.length?(l=t,o):l},o.response=function(t){return n=t,o},["get","post"].forEach(function(t){o[t]=function(){return o.send.apply(o,[t].concat(ga(arguments)))}}),o.send=function(n,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),s.open(n,t,!0),null==e||"accept"in u||(u.accept=e+",*/*"),s.setRequestHeader)for(var c in u)s.setRequestHeader(c,u[c]);return null!=e&&s.overrideMimeType&&s.overrideMimeType(e),null!=l&&(s.responseType=l),null!=i&&o.on("error",i).on("load",function(t){i(null,t)}),a.beforesend.call(o,s),s.send(null==r?null:r),o},o.abort=function(){return s.abort(),o},pa.rebind(o,a,"on"),null==r?o:o.get(jt(r))}function jt(t){return 1===t.length?function(e,n){t(null==e?n:null)}:t}function Rt(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}function Pt(t,e,n){var r=arguments.length;r<2&&(e=0),r<3&&(n=Date.now());var i=n+e,o={c:t,t:i,n:null};return hu?hu.n=o:fu=o,hu=o,pu||(du=clearTimeout(du),pu=1,gu(Ot)),o}function Ot(){var t=zt(),e=Ft()-t;e>24?(isFinite(e)&&(clearTimeout(du),du=setTimeout(Ot,e)),pu=0):(pu=1,gu(Ot))}function zt(){for(var t=Date.now(),e=fu;e;)t>=e.t&&e.c(t-e.t)&&(e.c=null),e=e.n;return t}function Ft(){for(var t,e=fu,n=1/0;e;)e.c?(e.t<n&&(n=e.t),e=(t=e).n):e=t?t.n=e.n:fu=e.n;return hu=t,n}function Ht(t,e){return e-(t?Math.ceil(Math.log(t)/Math.LN10):1)}function It(t,e){var n=Math.pow(10,3*Sa(8-e));return{scale:e>8?function(t){return t/n}:function(t){return t*n},symbol:t}}function Ut(t){var e=t.decimal,n=t.thousands,r=t.grouping,i=t.currency,o=r&&n?function(t,e){for(var i=t.length,o=[],a=0,u=r[0],s=0;i>0&&u>0&&(s+u+1>e&&(u=Math.max(1,e-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>e));)u=r[a=(a+1)%r.length];return o.reverse().join(n)}:_;return function(t){var n=yu.exec(t),r=n[1]||" ",a=n[2]||">",u=n[3]||"-",s=n[4]||"",l=n[5],c=+n[6],f=n[7],h=n[8],p=n[9],d=1,g="",v="",y=!1,m=!0;switch(h&&(h=+h.substring(1)),(l||"0"===r&&"="===a)&&(l=r="0",a="="),p){case"n":f=!0,p="g";break;case"%":d=100,v="%",p="f";break;case"p":d=100,v="%",p="r";break;case"b":case"o":case"x":case"X":"#"===s&&(g="0"+p.toLowerCase());case"c":m=!1;case"d":y=!0,h=0;break;case"s":d=-1,p="r"}"$"===s&&(g=i[0],v=i[1]),"r"!=p||h||(p="g"),null!=h&&("g"==p?h=Math.max(1,Math.min(21,h)):"e"!=p&&"f"!=p||(h=Math.max(0,Math.min(20,h)))),p=mu.get(p)||Bt;var x=l&&f;return function(t){var n=v;if(y&&t%1)return"";var i=t<0||0===t&&1/t<0?(t=-t,"-"):"-"===u?"":u;if(d<0){var s=pa.formatPrefix(t,h);t=s.scale(t),n=s.symbol+v}else t*=d;t=p(t,h);var b,w,M=t.lastIndexOf(".");if(M<0){var _=m?t.lastIndexOf("e"):-1;_<0?(b=t,w=""):(b=t.substring(0,_),w=t.substring(_))}else b=t.substring(0,M),w=e+t.substring(M+1);!l&&f&&(b=o(b,1/0));var k=g.length+b.length+w.length+(x?0:i.length),S=k<c?new Array(k=c-k+1).join(r):"";return x&&(b=o(S+b,S.length?c-w.length:1/0)),i+=g,t=b+w,("<"===a?i+t+S:">"===a?S+i+t:"^"===a?S.substring(0,k>>=1)+i+t+S.substring(k):i+(x?t:S+t))+n}}}function Bt(t){return t+""}function Wt(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function $t(t,e,n){function r(e){var n=t(e),r=o(n,1);return e-n<r-e?n:r}function i(n){return e(n=t(new bu(n-1)),1),n}function o(t,n){return e(t=new bu((+t)),n),t}function a(t,r,o){var a=i(t),u=[];if(o>1)for(;a<r;)n(a)%o||u.push(new Date((+a))),e(a,1);else for(;a<r;)u.push(new Date((+a))),e(a,1);return u}function u(t,e,n){try{bu=Wt;var r=new Wt;return r._=t,a(r,e,n)}finally{bu=Date}}t.floor=t,t.round=r,t.ceil=i,t.offset=o,t.range=a;var s=t.utc=Yt(t);return s.floor=s,s.round=Yt(r),s.ceil=Yt(i),s.offset=Yt(o),s.range=u,t}function Yt(t){return function(e,n){try{bu=Wt;var r=new Wt;return r._=e,t(r,n)._}finally{bu=Date}}}function Vt(t){function e(t){function e(e){for(var n,i,o,a=[],u=-1,s=0;++u<r;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Mu[n=t.charAt(++u)])&&(n=t.charAt(++u)),(o=C[n])&&(n=o(e,null==i?"e"===n?" ":"0":i)),a.push(n),s=u+1);return a.push(t.slice(s,u)),a.join("")}var r=t.length;return e.parse=function(e){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},i=n(r,t,e,0);if(i!=e.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var o=null!=r.Z&&bu!==Wt,a=new(o?Wt:bu);return"j"in r?a.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),a.setFullYear(r.y,0,1),a.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(a.getDay()+5)%7:r.w+7*r.U-(a.getDay()+6)%7)):a.setFullYear(r.y,r.m,r.d),a.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),o?a._:a},e.toString=function(){return t},e}function n(t,e,n,r){for(var i,o,a,u=0,s=e.length,l=n.length;u<s;){if(r>=l)return-1;if(i=e.charCodeAt(u++),37===i){if(a=e.charAt(u++),o=N[a in Mu?e.charAt(u++):a],!o||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}function r(t,e,n){M.lastIndex=0;var r=M.exec(e.slice(n));return r?(t.w=_.get(r[0].toLowerCase()),n+r[0].length):-1}function i(t,e,n){b.lastIndex=0;var r=b.exec(e.slice(n));return r?(t.w=w.get(r[0].toLowerCase()),n+r[0].length):-1}function o(t,e,n){T.lastIndex=0;var r=T.exec(e.slice(n));return r?(t.m=E.get(r[0].toLowerCase()),n+r[0].length):-1}function a(t,e,n){k.lastIndex=0;var r=k.exec(e.slice(n));return r?(t.m=S.get(r[0].toLowerCase()),n+r[0].length):-1}function u(t,e,r){return n(t,C.c.toString(),e,r)}function s(t,e,r){return n(t,C.x.toString(),e,r)}function l(t,e,r){return n(t,C.X.toString(),e,r)}function c(t,e,n){var r=x.get(e.slice(n,n+=2).toLowerCase());return null==r?-1:(t.p=r,n)}var f=t.dateTime,h=t.date,p=t.time,d=t.periods,g=t.days,v=t.shortDays,y=t.months,m=t.shortMonths;e.utc=function(t){function n(t){try{bu=Wt;var e=new bu;return e._=t,r(e)}finally{bu=Date}}var r=e(t);return n.parse=function(t){try{bu=Wt;var e=r.parse(t);return e&&e._}finally{bu=Date}},n.toString=r.toString,n},e.multi=e.utc.multi=pe;var x=pa.map(),b=Gt(g),w=Zt(g),M=Gt(v),_=Zt(v),k=Gt(y),S=Zt(y),T=Gt(m),E=Zt(m);d.forEach(function(t,e){x.set(t.toLowerCase(),e)});var C={a:function(t){return v[t.getDay()]},A:function(t){return g[t.getDay()]},b:function(t){return m[t.getMonth()]},B:function(t){return y[t.getMonth()]},c:e(f),d:function(t,e){return Xt(t.getDate(),e,2)},e:function(t,e){return Xt(t.getDate(),e,2)},H:function(t,e){return Xt(t.getHours(),e,2)},I:function(t,e){return Xt(t.getHours()%12||12,e,2)},j:function(t,e){return Xt(1+xu.dayOfYear(t),e,3)},L:function(t,e){return Xt(t.getMilliseconds(),e,3)},m:function(t,e){return Xt(t.getMonth()+1,e,2)},M:function(t,e){return Xt(t.getMinutes(),e,2)},p:function(t){return d[+(t.getHours()>=12)]},S:function(t,e){return Xt(t.getSeconds(),e,2)},U:function(t,e){return Xt(xu.sundayOfYear(t),e,2)},w:function(t){return t.getDay()},W:function(t,e){return Xt(xu.mondayOfYear(t),e,2)},x:e(h),X:e(p),y:function(t,e){return Xt(t.getFullYear()%100,e,2)},Y:function(t,e){return Xt(t.getFullYear()%1e4,e,4)},Z:fe,"%":function(){return"%"}},N={a:r,A:i,b:o,B:a,c:u,d:oe,e:oe,H:ue,I:ue,j:ae,L:ce,m:ie,M:se,p:c,S:le,U:Qt,w:Jt,W:Kt,x:s,X:l,y:ee,Y:te,Z:ne,"%":he};return e}function Xt(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function Gt(t){return new RegExp("^(?:"+t.map(pa.requote).join("|")+")","i")}function Zt(t){for(var e=new d,n=-1,r=t.length;++n<r;)e.set(t[n].toLowerCase(),n);return e}function Jt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Qt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n));return r?(t.U=+r[0],n+r[0].length):-1}function Kt(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n));return r?(t.W=+r[0],n+r[0].length):-1}function te(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ee(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.y=re(+r[0]),n+r[0].length):-1}function ne(t,e,n){return/^[+-]\d{4}$/.test(e=e.slice(n,n+5))?(t.Z=-e,n+5):-1}function re(t){return t+(t>68?1900:2e3)}function ie(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function oe(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function ae(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+3));return r?(t.j=+r[0],n+r[0].length):-1}function ue(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function se(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function le(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function ce(t,e,n){_u.lastIndex=0;var r=_u.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function fe(t){var e=t.getTimezoneOffset(),n=e>0?"-":"+",r=Sa(e)/60|0,i=Sa(e)%60;return n+Xt(r,"0",2)+Xt(i,"0",2)}function he(t,e,n){ku.lastIndex=0;var r=ku.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function pe(t){for(var e=t.length,n=-1;++n<e;)t[n][0]=this(t[n][0]);return function(e){for(var n=0,r=t[n];!r[1](e);)r=t[++n];return r[0](e)}}function de(){}function ge(t,e,n){var r=n.s=t+e,i=r-t,o=r-i;n.t=t-o+(e-i)}function ve(t,e){t&&Cu.hasOwnProperty(t.type)&&Cu[t.type](t,e)}function ye(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function me(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)ye(t[n],e,1);e.polygonEnd()}function xe(){function t(t,e){t*=Xa,e=e*Xa/2+Wa/4;var n=t-r,a=n>=0?1:-1,u=a*n,s=Math.cos(e),l=Math.sin(e),c=o*l,f=i*s+c*Math.cos(u),h=c*a*Math.sin(u);Au.add(Math.atan2(h,f)),r=t,i=s,o=l}var e,n,r,i,o;Lu.point=function(a,u){Lu.point=t,r=(e=a)*Xa,i=Math.cos(u=(n=u)*Xa/2+Wa/4),o=Math.sin(u)},Lu.lineEnd=function(){t(e,n)}}function be(t){var e=t[0],n=t[1],r=Math.cos(n);return[r*Math.cos(e),r*Math.sin(e),Math.sin(n)]}function we(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Me(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function _e(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function ke(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function Se(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function Te(t){return[Math.atan2(t[1],t[0]),at(t[2])]}function Ee(t,e){return Sa(t[0]-e[0])<Ua&&Sa(t[1]-e[1])<Ua}function Ce(t,e){t*=Xa;var n=Math.cos(e*=Xa);Ne(n*Math.cos(t),n*Math.sin(t),Math.sin(e))}function Ne(t,e,n){++qu,ju+=(t-ju)/qu,Ru+=(e-Ru)/qu,Pu+=(n-Pu)/qu}function Ae(){function t(t,i){t*=Xa;var o=Math.cos(i*=Xa),a=o*Math.cos(t),u=o*Math.sin(t),s=Math.sin(i),l=Math.atan2(Math.sqrt((l=n*s-r*u)*l+(l=r*a-e*s)*l+(l=e*u-n*a)*l),e*a+n*u+r*s);Du+=l,Ou+=l*(e+(e=a)),zu+=l*(n+(n=u)),Fu+=l*(r+(r=s)),Ne(e,n,r)}var e,n,r;Bu.point=function(i,o){i*=Xa;var a=Math.cos(o*=Xa);e=a*Math.cos(i),n=a*Math.sin(i),r=Math.sin(o),Bu.point=t,Ne(e,n,r)}}function Le(){Bu.point=Ce}function qe(){function t(t,e){t*=Xa;var n=Math.cos(e*=Xa),a=n*Math.cos(t),u=n*Math.sin(t),s=Math.sin(e),l=i*s-o*u,c=o*a-r*s,f=r*u-i*a,h=Math.sqrt(l*l+c*c+f*f),p=r*a+i*u+o*s,d=h&&-ot(p)/h,g=Math.atan2(h,p);Hu+=d*l,Iu+=d*c,Uu+=d*f,Du+=g,Ou+=g*(r+(r=a)),zu+=g*(i+(i=u)),Fu+=g*(o+(o=s)),Ne(r,i,o)}var e,n,r,i,o;Bu.point=function(a,u){e=a,n=u,Bu.point=t,a*=Xa;var s=Math.cos(u*=Xa);r=s*Math.cos(a),i=s*Math.sin(a),o=Math.sin(u),Ne(r,i,o)},Bu.lineEnd=function(){t(e,n),Bu.lineEnd=Le,Bu.point=Ce}}function De(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return n=e.invert(n,r),n&&t.invert(n[0],n[1])}),n}function je(){return!0}function Re(t,e,n,r,i){var o=[],a=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n=t[0],r=t[e];if(Ee(n,r)){i.lineStart();for(var u=0;u<e;++u)i.point((n=t[u])[0],n[1]);return void i.lineEnd()}var s=new Oe(n,t,null,(!0)),l=new Oe(n,null,s,(!1));s.o=l,o.push(s),a.push(l),s=new Oe(r,t,null,(!1)),l=new Oe(r,null,s,(!0)),s.o=l,o.push(s),a.push(l)}}),a.sort(e),Pe(o),Pe(a),o.length){for(var u=0,s=n,l=a.length;u<l;++u)a[u].e=s=!s;for(var c,f,h=o[0];;){for(var p=h,d=!0;p.v;)if((p=p.n)===h)return;c=p.z,i.lineStart();
do{if(p.v=p.o.v=!0,p.e){if(d)for(var u=0,l=c.length;u<l;++u)i.point((f=c[u])[0],f[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(d){c=p.p.z;for(var u=c.length-1;u>=0;--u)i.point((f=c[u])[0],f[1])}else r(p.x,p.p.x,-1,i);p=p.p}p=p.o,c=p.z,d=!d}while(!p.v);i.lineEnd()}}}function Pe(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function Oe(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function ze(t,e,n,r){return function(i,o){function a(e,n){var r=i(e,n);t(e=r[0],n=r[1])&&o.point(e,n)}function u(t,e){var n=i(t,e);v.point(n[0],n[1])}function s(){m.point=u,v.lineStart()}function l(){m.point=a,v.lineEnd()}function c(t,e){g.push([t,e]);var n=i(t,e);b.point(n[0],n[1])}function f(){b.lineStart(),g=[]}function h(){c(g[0][0],g[0][1]),b.lineEnd();var t,e=b.clean(),n=x.buffer(),r=n.length;if(g.pop(),d.push(g),g=null,r)if(1&e){t=n[0];var i,r=t.length-1,a=-1;if(r>0){for(w||(o.polygonStart(),w=!0),o.lineStart();++a<r;)o.point((i=t[a])[0],i[1]);o.lineEnd()}}else r>1&&2&e&&n.push(n.pop().concat(n.shift())),p.push(n.filter(Fe))}var p,d,g,v=e(o),y=i.invert(r[0],r[1]),m={point:a,lineStart:s,lineEnd:l,polygonStart:function(){m.point=c,m.lineStart=f,m.lineEnd=h,p=[],d=[]},polygonEnd:function(){m.point=a,m.lineStart=s,m.lineEnd=l,p=pa.merge(p);var t=$e(y,d);p.length?(w||(o.polygonStart(),w=!0),Re(p,Ie,t,n,o)):t&&(w||(o.polygonStart(),w=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),w&&(o.polygonEnd(),w=!1),p=d=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}},x=He(),b=e(x),w=!1;return m}}function Fe(t){return t.length>1}function He(){var t,e=[];return{lineStart:function(){e.push(t=[])},point:function(e,n){t.push([e,n])},lineEnd:T,buffer:function(){var n=e;return e=[],t=null,n},rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))}}}function Ie(t,e){return((t=t.x)[0]<0?t[1]-Va-Ua:Va-t[1])-((e=e.x)[0]<0?e[1]-Va-Ua:Va-e[1])}function Ue(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var u=o>0?Wa:-Wa,s=Sa(o-n);Sa(s-Wa)<Ua?(t.point(n,r=(r+a)/2>0?Va:-Va),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),e=0):i!==u&&s>=Wa&&(Sa(n-i)<Ua&&(n-=i*Ua),Sa(o-u)<Ua&&(o-=u*Ua),r=Be(n,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=o,r=a),i=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}function Be(t,e,n,r){var i,o,a=Math.sin(t-n);return Sa(a)>Ua?Math.atan((Math.sin(e)*(o=Math.cos(r))*Math.sin(n)-Math.sin(r)*(i=Math.cos(e))*Math.sin(t))/(i*o*a)):(e+r)/2}function We(t,e,n,r){var i;if(null==t)i=n*Va,r.point(-Wa,i),r.point(0,i),r.point(Wa,i),r.point(Wa,0),r.point(Wa,-i),r.point(0,-i),r.point(-Wa,-i),r.point(-Wa,0),r.point(-Wa,i);else if(Sa(t[0]-e[0])>Ua){var o=t[0]<e[0]?Wa:-Wa;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])}function $e(t,e){var n=t[0],r=t[1],i=[Math.sin(n),-Math.cos(n),0],o=0,a=0;Au.reset();for(var u=0,s=e.length;u<s;++u){var l=e[u],c=l.length;if(c)for(var f=l[0],h=f[0],p=f[1]/2+Wa/4,d=Math.sin(p),g=Math.cos(p),v=1;;){v===c&&(v=0),t=l[v];var y=t[0],m=t[1]/2+Wa/4,x=Math.sin(m),b=Math.cos(m),w=y-h,M=w>=0?1:-1,_=M*w,k=_>Wa,S=d*x;if(Au.add(Math.atan2(S*M*Math.sin(_),g*b+S*Math.cos(_))),o+=k?w+M*$a:w,k^h>=n^y>=n){var T=Me(be(f),be(t));Se(T);var E=Me(i,T);Se(E);var C=(k^w>=0?-1:1)*at(E[2]);(r>C||r===C&&(T[0]||T[1]))&&(a+=k^w>=0?1:-1)}if(!v++)break;h=y,d=x,g=b,f=t}}return(o<-Ua||o<Ua&&Au<-Ua)^1&a}function Ye(t){function e(t,e){return Math.cos(t)*Math.cos(e)>o}function n(t){var n,o,s,l,c;return{lineStart:function(){l=s=!1,c=1},point:function(f,h){var p,d=[f,h],g=e(f,h),v=a?g?0:i(f,h):g?i(f+(f<0?Wa:-Wa),h):0;if(!n&&(l=s=g)&&t.lineStart(),g!==s&&(p=r(n,d),(Ee(n,p)||Ee(d,p))&&(d[0]+=Ua,d[1]+=Ua,g=e(d[0],d[1]))),g!==s)c=0,g?(t.lineStart(),p=r(d,n),t.point(p[0],p[1])):(p=r(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(u&&n&&a^g){var y;v&o||!(y=r(d,n,!0))||(c=0,a?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!g||n&&Ee(n,d)||t.point(d[0],d[1]),n=d,s=g,o=v},lineEnd:function(){s&&t.lineEnd(),n=null},clean:function(){return c|(l&&s)<<1}}}function r(t,e,n){var r=be(t),i=be(e),a=[1,0,0],u=Me(r,i),s=we(u,u),l=u[0],c=s-l*l;if(!c)return!n&&t;var f=o*s/c,h=-o*l/c,p=Me(a,u),d=ke(a,f),g=ke(u,h);_e(d,g);var v=p,y=we(d,v),m=we(v,v),x=y*y-m*(we(d,d)-1);if(!(x<0)){var b=Math.sqrt(x),w=ke(v,(-y-b)/m);if(_e(w,d),w=Te(w),!n)return w;var M,_=t[0],k=e[0],S=t[1],T=e[1];k<_&&(M=_,_=k,k=M);var E=k-_,C=Sa(E-Wa)<Ua,N=C||E<Ua;if(!C&&T<S&&(M=S,S=T,T=M),N?C?S+T>0^w[1]<(Sa(w[0]-_)<Ua?S:T):S<=w[1]&&w[1]<=T:E>Wa^(_<=w[0]&&w[0]<=k)){var A=ke(v,(-y+b)/m);return _e(A,d),[w,Te(A)]}}}function i(e,n){var r=a?t:Wa-t,i=0;return e<-r?i|=1:e>r&&(i|=2),n<-r?i|=4:n>r&&(i|=8),i}var o=Math.cos(t),a=o>0,u=Sa(o)>Ua,s=bn(t,6*Xa);return ze(e,n,s,a?[0,-t]:[-Wa,t-Wa])}function Ve(t,e,n,r){return function(i){var o,a=i.a,u=i.b,s=a.x,l=a.y,c=u.x,f=u.y,h=0,p=1,d=c-s,g=f-l;if(o=t-s,d||!(o>0)){if(o/=d,d<0){if(o<h)return;o<p&&(p=o)}else if(d>0){if(o>p)return;o>h&&(h=o)}if(o=n-s,d||!(o<0)){if(o/=d,d<0){if(o>p)return;o>h&&(h=o)}else if(d>0){if(o<h)return;o<p&&(p=o)}if(o=e-l,g||!(o>0)){if(o/=g,g<0){if(o<h)return;o<p&&(p=o)}else if(g>0){if(o>p)return;o>h&&(h=o)}if(o=r-l,g||!(o<0)){if(o/=g,g<0){if(o>p)return;o>h&&(h=o)}else if(g>0){if(o<h)return;o<p&&(p=o)}return h>0&&(i.a={x:s+h*d,y:l+h*g}),p<1&&(i.b={x:s+p*d,y:l+p*g}),i}}}}}}function Xe(t,e,n,r){function i(r,i){return Sa(r[0]-t)<Ua?i>0?0:3:Sa(r[0]-n)<Ua?i>0?2:1:Sa(r[1]-e)<Ua?i>0?1:0:i>0?3:2}function o(t,e){return a(t.x,e.x)}function a(t,e){var n=i(t,1),r=i(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(u){function s(t){for(var e=0,n=v.length,r=t[1],i=0;i<n;++i)for(var o,a=1,u=v[i],s=u.length,l=u[0];a<s;++a)o=u[a],l[1]<=r?o[1]>r&&it(l,o,t)>0&&++e:o[1]<=r&&it(l,o,t)<0&&--e,l=o;return 0!==e}function l(o,u,s,l){var c=0,f=0;if(null==o||(c=i(o,s))!==(f=i(u,s))||a(o,u)<0^s>0){do l.point(0===c||3===c?t:n,c>1?r:e);while((c=(c+s+4)%4)!==f)}else l.point(u[0],u[1])}function c(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function f(t,e){c(t,e)&&u.point(t,e)}function h(){N.point=d,v&&v.push(y=[]),k=!0,_=!1,w=M=NaN}function p(){g&&(d(m,x),b&&_&&E.rejoin(),g.push(E.buffer())),N.point=f,_&&u.lineEnd()}function d(t,e){t=Math.max(-$u,Math.min($u,t)),e=Math.max(-$u,Math.min($u,e));var n=c(t,e);if(v&&y.push([t,e]),k)m=t,x=e,b=n,k=!1,n&&(u.lineStart(),u.point(t,e));else if(n&&_)u.point(t,e);else{var r={a:{x:w,y:M},b:{x:t,y:e}};C(r)?(_||(u.lineStart(),u.point(r.a.x,r.a.y)),u.point(r.b.x,r.b.y),n||u.lineEnd(),S=!1):n&&(u.lineStart(),u.point(t,e),S=!1)}w=t,M=e,_=n}var g,v,y,m,x,b,w,M,_,k,S,T=u,E=He(),C=Ve(t,e,n,r),N={point:f,lineStart:h,lineEnd:p,polygonStart:function(){u=E,g=[],v=[],S=!0},polygonEnd:function(){u=T,g=pa.merge(g);var e=s([t,r]),n=S&&e,i=g.length;(n||i)&&(u.polygonStart(),n&&(u.lineStart(),l(null,null,1,u),u.lineEnd()),i&&Re(g,o,e,l,u),u.polygonEnd()),g=v=y=null}};return N}}function Ge(t){var e=0,n=Wa/3,r=hn(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*Wa/180,n=t[1]*Wa/180):[e/Wa*180,n/Wa*180]},i}function Ze(t,e){function n(t,e){var n=Math.sqrt(o-2*i*Math.sin(e))/i;return[n*Math.sin(t*=i),a-n*Math.cos(t)]}var r=Math.sin(t),i=(r+Math.sin(e))/2,o=1+r*(2*i-r),a=Math.sqrt(o)/i;return n.invert=function(t,e){var n=a-e;return[Math.atan2(t,n)/i,at((o-(t*t+n*n)*i*i)/(2*i))]},n}function Je(){function t(t,e){Vu+=i*t-r*e,r=t,i=e}var e,n,r,i;Qu.point=function(o,a){Qu.point=t,e=r=o,n=i=a},Qu.lineEnd=function(){t(e,n)}}function Qe(t,e){t<Xu&&(Xu=t),t>Zu&&(Zu=t),e<Gu&&(Gu=e),e>Ju&&(Ju=e)}function Ke(){function t(t,e){a.push("M",t,",",e,o)}function e(t,e){a.push("M",t,",",e),u.point=n}function n(t,e){a.push("L",t,",",e)}function r(){u.point=t}function i(){a.push("Z")}var o=tn(4.5),a=[],u={point:t,lineStart:function(){u.point=e},lineEnd:r,polygonStart:function(){u.lineEnd=i},polygonEnd:function(){u.lineEnd=r,u.point=t},pointRadius:function(t){return o=tn(t),u},result:function(){if(a.length){var t=a.join("");return a=[],t}}};return u}function tn(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function en(t,e){ju+=t,Ru+=e,++Pu}function nn(){function t(t,r){var i=t-e,o=r-n,a=Math.sqrt(i*i+o*o);Ou+=a*(e+t)/2,zu+=a*(n+r)/2,Fu+=a,en(e=t,n=r)}var e,n;ts.point=function(r,i){ts.point=t,en(e=r,n=i)}}function rn(){ts.point=en}function on(){function t(t,e){var n=t-r,o=e-i,a=Math.sqrt(n*n+o*o);Ou+=a*(r+t)/2,zu+=a*(i+e)/2,Fu+=a,a=i*t-r*e,Hu+=a*(r+t),Iu+=a*(i+e),Uu+=3*a,en(r=t,i=e)}var e,n,r,i;ts.point=function(o,a){ts.point=t,en(e=r=o,n=i=a)},ts.lineEnd=function(){t(e,n)}}function an(t){function e(e,n){t.moveTo(e+a,n),t.arc(e,n,a,0,$a)}function n(e,n){t.moveTo(e,n),u.point=r}function r(e,n){t.lineTo(e,n)}function i(){u.point=e}function o(){t.closePath()}var a=4.5,u={point:e,lineStart:function(){u.point=n},lineEnd:i,polygonStart:function(){u.lineEnd=o},polygonEnd:function(){u.lineEnd=i,u.point=e},pointRadius:function(t){return a=t,u},result:T};return u}function un(t){function e(t){return(u?r:n)(t)}function n(e){return cn(e,function(n,r){n=t(n,r),e.point(n[0],n[1])})}function r(e){function n(n,r){n=t(n,r),e.point(n[0],n[1])}function r(){x=NaN,k.point=o,e.lineStart()}function o(n,r){var o=be([n,r]),a=t(n,r);i(x,b,m,w,M,_,x=a[0],b=a[1],m=n,w=o[0],M=o[1],_=o[2],u,e),e.point(x,b)}function a(){k.point=n,e.lineEnd()}function s(){r(),k.point=l,k.lineEnd=c}function l(t,e){o(f=t,h=e),p=x,d=b,g=w,v=M,y=_,k.point=o}function c(){i(x,b,m,w,M,_,p,d,f,g,v,y,u,e),k.lineEnd=a,a()}var f,h,p,d,g,v,y,m,x,b,w,M,_,k={point:n,lineStart:r,lineEnd:a,polygonStart:function(){e.polygonStart(),k.lineStart=s},polygonEnd:function(){e.polygonEnd(),k.lineStart=r}};return k}function i(e,n,r,u,s,l,c,f,h,p,d,g,v,y){var m=c-e,x=f-n,b=m*m+x*x;if(b>4*o&&v--){var w=u+p,M=s+d,_=l+g,k=Math.sqrt(w*w+M*M+_*_),S=Math.asin(_/=k),T=Sa(Sa(_)-1)<Ua||Sa(r-h)<Ua?(r+h)/2:Math.atan2(M,w),E=t(T,S),C=E[0],N=E[1],A=C-e,L=N-n,q=x*A-m*L;(q*q/b>o||Sa((m*A+x*L)/b-.5)>.3||u*p+s*d+l*g<a)&&(i(e,n,r,u,s,l,C,N,T,w/=k,M/=k,_,v,y),y.point(C,N),i(C,N,T,w,M,_,c,f,h,p,d,g,v,y))}}var o=.5,a=Math.cos(30*Xa),u=16;return e.precision=function(t){return arguments.length?(u=(o=t*t)>0&&16,e):Math.sqrt(o)},e}function sn(t){var e=un(function(e,n){return t([e*Ga,n*Ga])});return function(t){return pn(e(t))}}function ln(t){this.stream=t}function cn(t,e){return{point:e,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function fn(t){return hn(function(){return t})()}function hn(t){function e(t){return t=u(t[0]*Xa,t[1]*Xa),[t[0]*h+s,l-t[1]*h]}function n(t){return t=u.invert((t[0]-s)/h,(l-t[1])/h),t&&[t[0]*Ga,t[1]*Ga]}function r(){u=De(a=vn(y,m,x),o);var t=o(g,v);return s=p-t[0]*h,l=d+t[1]*h,i()}function i(){return c&&(c.valid=!1,c=null),e}var o,a,u,s,l,c,f=un(function(t,e){return t=o(t,e),[t[0]*h+s,l-t[1]*h]}),h=150,p=480,d=250,g=0,v=0,y=0,m=0,x=0,b=Wu,w=_,M=null,k=null;return e.stream=function(t){return c&&(c.valid=!1),c=pn(b(a,f(w(t)))),c.valid=!0,c},e.clipAngle=function(t){return arguments.length?(b=null==t?(M=t,Wu):Ye((M=+t)*Xa),i()):M},e.clipExtent=function(t){return arguments.length?(k=t,w=t?Xe(t[0][0],t[0][1],t[1][0],t[1][1]):_,i()):k},e.scale=function(t){return arguments.length?(h=+t,r()):h},e.translate=function(t){return arguments.length?(p=+t[0],d=+t[1],r()):[p,d]},e.center=function(t){return arguments.length?(g=t[0]%360*Xa,v=t[1]%360*Xa,r()):[g*Ga,v*Ga]},e.rotate=function(t){return arguments.length?(y=t[0]%360*Xa,m=t[1]%360*Xa,x=t.length>2?t[2]%360*Xa:0,r()):[y*Ga,m*Ga,x*Ga]},pa.rebind(e,f,"precision"),function(){return o=t.apply(this,arguments),e.invert=o.invert&&n,r()}}function pn(t){return cn(t,function(e,n){t.point(e*Xa,n*Xa)})}function dn(t,e){return[t,e]}function gn(t,e){return[t>Wa?t-$a:t<-Wa?t+$a:t,e]}function vn(t,e,n){return t?e||n?De(mn(t),xn(e,n)):mn(t):e||n?xn(e,n):gn}function yn(t){return function(e,n){return e+=t,[e>Wa?e-$a:e<-Wa?e+$a:e,n]}}function mn(t){var e=yn(t);return e.invert=yn(-t),e}function xn(t,e){function n(t,e){var n=Math.cos(e),u=Math.cos(t)*n,s=Math.sin(t)*n,l=Math.sin(e),c=l*r+u*i;return[Math.atan2(s*o-c*a,u*r-l*i),at(c*o+s*a)]}var r=Math.cos(t),i=Math.sin(t),o=Math.cos(e),a=Math.sin(e);return n.invert=function(t,e){var n=Math.cos(e),u=Math.cos(t)*n,s=Math.sin(t)*n,l=Math.sin(e),c=l*o-s*a;return[Math.atan2(s*o+l*a,u*r+c*i),at(c*r-u*i)]},n}function bn(t,e){var n=Math.cos(t),r=Math.sin(t);return function(i,o,a,u){var s=a*e;null!=i?(i=wn(n,i),o=wn(n,o),(a>0?i<o:i>o)&&(i+=a*$a)):(i=t+a*$a,o=t-.5*s);for(var l,c=i;a>0?c>o:c<o;c-=s)u.point((l=Te([n,-r*Math.cos(c),-r*Math.sin(c)]))[0],l[1])}}function wn(t,e){var n=be(e);n[0]-=t,Se(n);var r=ot(-n[1]);return((-n[2]<0?-r:r)+2*Math.PI-Ua)%(2*Math.PI)}function Mn(t,e,n){var r=pa.range(t,e-Ua,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function _n(t,e,n){var r=pa.range(t,e-Ua,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function kn(t){return t.source}function Sn(t){return t.target}function Tn(t,e,n,r){var i=Math.cos(e),o=Math.sin(e),a=Math.cos(r),u=Math.sin(r),s=i*Math.cos(t),l=i*Math.sin(t),c=a*Math.cos(n),f=a*Math.sin(n),h=2*Math.asin(Math.sqrt(ct(r-e)+i*a*ct(n-t))),p=1/Math.sin(h),d=h?function(t){var e=Math.sin(t*=h)*p,n=Math.sin(h-t)*p,r=n*s+e*c,i=n*l+e*f,a=n*o+e*u;return[Math.atan2(i,r)*Ga,Math.atan2(a,Math.sqrt(r*r+i*i))*Ga]}:function(){return[t*Ga,e*Ga]};return d.distance=h,d}function En(){function t(t,i){var o=Math.sin(i*=Xa),a=Math.cos(i),u=Sa((t*=Xa)-e),s=Math.cos(u);es+=Math.atan2(Math.sqrt((u=a*Math.sin(u))*u+(u=r*o-n*a*s)*u),n*o+r*a*s),e=t,n=o,r=a}var e,n,r;ns.point=function(i,o){e=i*Xa,n=Math.sin(o*=Xa),r=Math.cos(o),ns.point=t},ns.lineEnd=function(){ns.point=ns.lineEnd=T}}function Cn(t,e){function n(e,n){var r=Math.cos(e),i=Math.cos(n),o=t(r*i);return[o*i*Math.sin(e),o*Math.sin(n)]}return n.invert=function(t,n){var r=Math.sqrt(t*t+n*n),i=e(r),o=Math.sin(i),a=Math.cos(i);return[Math.atan2(t*o,r*a),Math.asin(r&&n*o/r)]},n}function Nn(t,e){function n(t,e){a>0?e<-Va+Ua&&(e=-Va+Ua):e>Va-Ua&&(e=Va-Ua);var n=a/Math.pow(i(e),o);return[n*Math.sin(o*t),a-n*Math.cos(o*t)]}var r=Math.cos(t),i=function(t){return Math.tan(Wa/4+t/2)},o=t===e?Math.sin(t):Math.log(r/Math.cos(e))/Math.log(i(e)/i(t)),a=r*Math.pow(i(t),o)/o;return o?(n.invert=function(t,e){var n=a-e,r=rt(o)*Math.sqrt(t*t+n*n);return[Math.atan2(t,n)/o,2*Math.atan(Math.pow(a/r,1/o))-Va]},n):Ln}function An(t,e){function n(t,e){var n=o-e;return[n*Math.sin(i*t),o-n*Math.cos(i*t)]}var r=Math.cos(t),i=t===e?Math.sin(t):(r-Math.cos(e))/(e-t),o=r/i+t;return Sa(i)<Ua?dn:(n.invert=function(t,e){var n=o-e;return[Math.atan2(t,n)/i,o-rt(i)*Math.sqrt(t*t+n*n)]},n)}function Ln(t,e){return[t,Math.log(Math.tan(Wa/4+e/2))]}function qn(t){var e,n=fn(t),r=n.scale,i=n.translate,o=n.clipExtent;return n.scale=function(){var t=r.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.translate=function(){var t=i.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.clipExtent=function(t){var a=o.apply(n,arguments);if(a===n){if(e=null==t){var u=Wa*r(),s=i();o([[s[0]-u,s[1]-u],[s[0]+u,s[1]+u]])}}else e&&(a=null);return a},n.clipExtent(null)}function Dn(t,e){return[Math.log(Math.tan(Wa/4+e/2)),-t]}function jn(t){return t[0]}function Rn(t){return t[1]}function Pn(t){for(var e=t.length,n=[0,1],r=2,i=2;i<e;i++){for(;r>1&&it(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function On(t,e){return t[0]-e[0]||t[1]-e[1]}function zn(t,e,n){return(n[0]-e[0])*(t[1]-e[1])<(n[1]-e[1])*(t[0]-e[0])}function Fn(t,e,n,r){var i=t[0],o=n[0],a=e[0]-i,u=r[0]-o,s=t[1],l=n[1],c=e[1]-s,f=r[1]-l,h=(u*(s-l)-f*(i-o))/(f*a-u*c);return[i+h*a,s+h*c]}function Hn(t){var e=t[0],n=t[t.length-1];return!(e[0]-n[0]||e[1]-n[1])}function In(){sr(this),this.edge=this.site=this.circle=null}function Un(t){var e=ds.pop()||new In;return e.site=t,e}function Bn(t){Kn(t),fs.remove(t),ds.push(t),sr(t)}function Wn(t){var e=t.circle,n=e.x,r=e.cy,i={x:n,y:r},o=t.P,a=t.N,u=[t];Bn(t);for(var s=o;s.circle&&Sa(n-s.circle.x)<Ua&&Sa(r-s.circle.cy)<Ua;)o=s.P,u.unshift(s),Bn(s),s=o;u.unshift(s),Kn(s);for(var l=a;l.circle&&Sa(n-l.circle.x)<Ua&&Sa(r-l.circle.cy)<Ua;)a=l.N,u.push(l),Bn(l),l=a;u.push(l),Kn(l);var c,f=u.length;for(c=1;c<f;++c)l=u[c],s=u[c-1],or(l.edge,s.site,l.site,i);s=u[0],l=u[f-1],l.edge=rr(s.site,l.site,null,i),Qn(s),Qn(l)}function $n(t){for(var e,n,r,i,o=t.x,a=t.y,u=fs._;u;)if(r=Yn(u,a)-o,r>Ua)u=u.L;else{if(i=o-Vn(u,a),!(i>Ua)){r>-Ua?(e=u.P,n=u):i>-Ua?(e=u,n=u.N):e=n=u;break}if(!u.R){e=u;break}u=u.R}var s=Un(t);if(fs.insert(e,s),e||n){if(e===n)return Kn(e),n=Un(e.site),fs.insert(s,n),s.edge=n.edge=rr(e.site,s.site),Qn(e),void Qn(n);if(!n)return void(s.edge=rr(e.site,s.site));Kn(e),Kn(n);var l=e.site,c=l.x,f=l.y,h=t.x-c,p=t.y-f,d=n.site,g=d.x-c,v=d.y-f,y=2*(h*v-p*g),m=h*h+p*p,x=g*g+v*v,b={x:(v*m-p*x)/y+c,y:(h*x-g*m)/y+f};or(n.edge,l,d,b),s.edge=rr(l,t,null,b),n.edge=rr(t,d,null,b),Qn(e),Qn(n)}}function Yn(t,e){var n=t.site,r=n.x,i=n.y,o=i-e;if(!o)return r;var a=t.P;if(!a)return-(1/0);n=a.site;var u=n.x,s=n.y,l=s-e;if(!l)return u;var c=u-r,f=1/o-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-s+l/2+i-o/2)))/f+r:(r+u)/2}function Vn(t,e){var n=t.N;if(n)return Yn(n,e);var r=t.site;return r.y===e?r.x:1/0}function Xn(t){this.site=t,this.edges=[]}function Gn(t){for(var e,n,r,i,o,a,u,s,l,c,f=t[0][0],h=t[1][0],p=t[0][1],d=t[1][1],g=cs,v=g.length;v--;)if(o=g[v],o&&o.prepare())for(u=o.edges,s=u.length,a=0;a<s;)c=u[a].end(),r=c.x,i=c.y,l=u[++a%s].start(),e=l.x,n=l.y,(Sa(r-e)>Ua||Sa(i-n)>Ua)&&(u.splice(a,0,new ar(ir(o.site,c,Sa(r-f)<Ua&&d-i>Ua?{x:f,y:Sa(e-f)<Ua?n:d}:Sa(i-d)<Ua&&h-r>Ua?{x:Sa(n-d)<Ua?e:h,y:d}:Sa(r-h)<Ua&&i-p>Ua?{x:h,y:Sa(e-h)<Ua?n:p}:Sa(i-p)<Ua&&r-f>Ua?{x:Sa(n-p)<Ua?e:f,y:p}:null),o.site,null)),++s)}function Zn(t,e){return e.angle-t.angle}function Jn(){sr(this),this.x=this.y=this.arc=this.site=this.cy=null}function Qn(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i.x,u=i.y,s=r.x-a,l=r.y-u,c=o.x-a,f=o.y-u,h=2*(s*f-l*c);if(!(h>=-Ba)){var p=s*s+l*l,d=c*c+f*f,g=(f*p-l*d)/h,v=(s*d-c*p)/h,f=v+u,y=gs.pop()||new Jn;y.arc=t,y.site=i,y.x=g+a,y.y=f+Math.sqrt(g*g+v*v),y.cy=f,t.circle=y;for(var m=null,x=ps._;x;)if(y.y<x.y||y.y===x.y&&y.x<=x.x){if(!x.L){m=x.P;break}x=x.L}else{if(!x.R){m=x;break}x=x.R}ps.insert(m,y),m||(hs=y)}}}}function Kn(t){var e=t.circle;e&&(e.P||(hs=e.N),ps.remove(e),gs.push(e),sr(e),t.circle=null)}function tr(t){for(var e,n=ls,r=Ve(t[0][0],t[0][1],t[1][0],t[1][1]),i=n.length;i--;)e=n[i],(!er(e,t)||!r(e)||Sa(e.a.x-e.b.x)<Ua&&Sa(e.a.y-e.b.y)<Ua)&&(e.a=e.b=null,n.splice(i,1))}function er(t,e){var n=t.b;if(n)return!0;var r,i,o=t.a,a=e[0][0],u=e[1][0],s=e[0][1],l=e[1][1],c=t.l,f=t.r,h=c.x,p=c.y,d=f.x,g=f.y,v=(h+d)/2,y=(p+g)/2;if(g===p){if(v<a||v>=u)return;if(h>d){if(o){if(o.y>=l)return}else o={x:v,y:s};n={x:v,y:l}}else{if(o){if(o.y<s)return}else o={x:v,y:l};n={x:v,y:s}}}else if(r=(h-d)/(g-p),i=y-r*v,r<-1||r>1)if(h>d){if(o){if(o.y>=l)return}else o={x:(s-i)/r,y:s};n={x:(l-i)/r,y:l}}else{if(o){if(o.y<s)return}else o={x:(l-i)/r,y:l};n={x:(s-i)/r,y:s}}else if(p<g){if(o){if(o.x>=u)return}else o={x:a,y:r*a+i};n={x:u,y:r*u+i}}else{if(o){if(o.x<a)return}else o={x:u,y:r*u+i};n={x:a,y:r*a+i}}return t.a=o,t.b=n,!0}function nr(t,e){this.l=t,this.r=e,this.a=this.b=null}function rr(t,e,n,r){var i=new nr(t,e);return ls.push(i),n&&or(i,t,e,n),r&&or(i,e,t,r),cs[t.i].edges.push(new ar(i,t,e)),cs[e.i].edges.push(new ar(i,e,t)),i}function ir(t,e,n){var r=new nr(t,null);return r.a=e,r.b=n,ls.push(r),r}function or(t,e,n,r){t.a||t.b?t.l===n?t.b=r:t.a=r:(t.a=r,t.l=e,t.r=n)}function ar(t,e,n){var r=t.a,i=t.b;this.edge=t,this.site=e,this.angle=n?Math.atan2(n.y-e.y,n.x-e.x):t.l===e?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function ur(){this._=null}function sr(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function lr(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function cr(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function fr(t){for(;t.L;)t=t.L;return t}function hr(t,e){var n,r,i,o=t.sort(pr).pop();for(ls=[],cs=new Array(t.length),fs=new ur,ps=new ur;;)if(i=hs,o&&(!i||o.y<i.y||o.y===i.y&&o.x<i.x))o.x===n&&o.y===r||(cs[o.i]=new Xn(o),$n(o),n=o.x,r=o.y),o=t.pop();else{if(!i)break;Wn(i.arc)}e&&(tr(e),Gn(e));var a={cells:cs,edges:ls};return fs=ps=ls=cs=null,a}function pr(t,e){return e.y-t.y||e.x-t.x}function dr(t,e,n){return(t.x-n.x)*(e.y-t.y)-(t.x-e.x)*(n.y-t.y)}function gr(t){return t.x}function vr(t){return t.y}function yr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function mr(t,e,n,r,i,o){if(!t(e,n,r,i,o)){var a=.5*(n+i),u=.5*(r+o),s=e.nodes;s[0]&&mr(t,s[0],n,r,a,u),s[1]&&mr(t,s[1],a,r,i,u),s[2]&&mr(t,s[2],n,u,a,o),s[3]&&mr(t,s[3],a,u,i,o)}}function xr(t,e,n,r,i,o,a){var u,s=1/0;return function l(t,c,f,h,p){if(!(c>o||f>a||h<r||p<i)){if(d=t.point){var d,g=e-t.x,v=n-t.y,y=g*g+v*v;if(y<s){var m=Math.sqrt(s=y);r=e-m,i=n-m,o=e+m,a=n+m,u=d}}for(var x=t.nodes,b=.5*(c+h),w=.5*(f+p),M=e>=b,_=n>=w,k=_<<1|M,S=k+4;k<S;++k)if(t=x[3&k])switch(3&k){case 0:l(t,c,f,b,w);break;case 1:l(t,b,f,h,w);break;case 2:l(t,c,w,b,p);break;case 3:l(t,b,w,h,p)}}}(t,r,i,o,a),u}function br(t,e){t=pa.rgb(t),e=pa.rgb(e);var n=t.r,r=t.g,i=t.b,o=e.r-n,a=e.g-r,u=e.b-i;return function(t){return"#"+St(Math.round(n+o*t))+St(Math.round(r+a*t))+St(Math.round(i+u*t))}}function wr(t,e){var n,r={},i={};for(n in t)n in e?r[n]=kr(t[n],e[n]):i[n]=t[n];for(n in e)n in t||(i[n]=e[n]);return function(t){for(n in r)i[n]=r[n](t);return i}}function Mr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function _r(t,e){var n,r,i,o=ys.lastIndex=ms.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=ys.exec(t))&&(r=ms.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Mr(n,r)})),o=ms.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?(e=s[0].x,function(t){return e(t)+""}):function(){return e}:(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})}function kr(t,e){for(var n,r=pa.interpolators.length;--r>=0&&!(n=pa.interpolators[r](t,e)););return n}function Sr(t,e){var n,r=[],i=[],o=t.length,a=e.length,u=Math.min(t.length,e.length);for(n=0;n<u;++n)r.push(kr(t[n],e[n]));for(;n<o;++n)i[n]=t[n];for(;n<a;++n)i[n]=e[n];return function(t){for(n=0;n<u;++n)i[n]=r[n](t);return i}}function Tr(t){return function(e){return e<=0?0:e>=1?1:t(e)}}function Er(t){return function(e){return 1-t(1-e)}}function Cr(t){return function(e){return.5*(e<.5?t(2*e):2-t(2-2*e))}}function Nr(t){return t*t}function Ar(t){return t*t*t}function Lr(t){if(t<=0)return 0;if(t>=1)return 1;var e=t*t,n=e*t;return 4*(t<.5?n:3*(t-e)+n-.75)}function qr(t){return function(e){return Math.pow(e,t)}}function Dr(t){return 1-Math.cos(t*Va)}function jr(t){return Math.pow(2,10*(t-1))}function Rr(t){return 1-Math.sqrt(1-t*t)}function Pr(t,e){var n;return arguments.length<2&&(e=.45),arguments.length?n=e/$a*Math.asin(1/t):(t=1,n=e/4),function(r){return 1+t*Math.pow(2,-10*r)*Math.sin((r-n)*$a/e)}}function Or(t){return t||(t=1.70158),function(e){return e*e*((t+1)*e-t)}}function zr(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function Fr(t,e){t=pa.hcl(t),e=pa.hcl(e);var n=t.h,r=t.c,i=t.l,o=e.h-n,a=e.c-r,u=e.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?e.c:r),isNaN(o)?(o=0,n=isNaN(n)?e.h:n):o>180?o-=360:o<-180&&(o+=360),function(t){return gt(n+o*t,r+a*t,i+u*t)+""}}function Hr(t,e){t=pa.hsl(t),e=pa.hsl(e);var n=t.h,r=t.s,i=t.l,o=e.h-n,a=e.s-r,u=e.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?e.s:r),isNaN(o)?(o=0,n=isNaN(n)?e.h:n):o>180?o-=360:o<-180&&(o+=360),function(t){return pt(n+o*t,r+a*t,i+u*t)+""}}function Ir(t,e){t=pa.lab(t),e=pa.lab(e);var n=t.l,r=t.a,i=t.b,o=e.l-n,a=e.a-r,u=e.b-i;return function(t){return yt(n+o*t,r+a*t,i+u*t)+""}}function Ur(t,e){return e-=t,function(n){return Math.round(t+e*n)}}function Br(t){var e=[t.a,t.b],n=[t.c,t.d],r=$r(e),i=Wr(e,n),o=$r(Yr(n,e,-i))||0;e[0]*n[1]<n[0]*e[1]&&(e[0]*=-1,e[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(e[1],e[0]):Math.atan2(-n[0],n[1]))*Ga,this.translate=[t.e,t.f],this.scale=[r,o],this.skew=o?Math.atan2(i,o)*Ga:0}function Wr(t,e){return t[0]*e[0]+t[1]*e[1]}function $r(t){var e=Math.sqrt(Wr(t,t));return e&&(t[0]/=e,t[1]/=e),e}function Yr(t,e,n){return t[0]+=n*e[0],t[1]+=n*e[1],t}function Vr(t){return t.length?t.pop()+",":""}function Xr(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push("translate(",null,",",null,")");r.push({i:i-4,x:Mr(t[0],e[0])},{i:i-2,x:Mr(t[1],e[1])})}else(e[0]||e[1])&&n.push("translate("+e+")")}function Gr(t,e,n,r){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),r.push({i:n.push(Vr(n)+"rotate(",null,")")-2,x:Mr(t,e)})):e&&n.push(Vr(n)+"rotate("+e+")")}function Zr(t,e,n,r){t!==e?r.push({i:n.push(Vr(n)+"skewX(",null,")")-2,x:Mr(t,e)}):e&&n.push(Vr(n)+"skewX("+e+")")}function Jr(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push(Vr(n)+"scale(",null,",",null,")");r.push({i:i-4,x:Mr(t[0],e[0])},{i:i-2,x:Mr(t[1],e[1])})}else 1===e[0]&&1===e[1]||n.push(Vr(n)+"scale("+e+")")}function Qr(t,e){var n=[],r=[];return t=pa.transform(t),e=pa.transform(e),Xr(t.translate,e.translate,n,r),Gr(t.rotate,e.rotate,n,r),Zr(t.skew,e.skew,n,r),Jr(t.scale,e.scale,n,r),t=e=null,function(t){for(var e,i=-1,o=r.length;++i<o;)n[(e=r[i]).i]=e.x(t);return n.join("")}}function Kr(t,e){return e=(e-=t=+t)||1/e,function(n){return(n-t)/e}}function ti(t,e){return e=(e-=t=+t)||1/e,function(n){return Math.max(0,Math.min(1,(n-t)/e))}}function ei(t){for(var e=t.source,n=t.target,r=ri(e,n),i=[e];e!==r;)e=e.parent,i.push(e);for(var o=i.length;n!==r;)i.splice(o,0,n),n=n.parent;return i}function ni(t){for(var e=[],n=t.parent;null!=n;)e.push(t),t=n,n=n.parent;return e.push(t),e}function ri(t,e){if(t===e)return t;for(var n=ni(t),r=ni(e),i=n.pop(),o=r.pop(),a=null;i===o;)a=i,i=n.pop(),o=r.pop();return a}function ii(t){t.fixed|=2}function oi(t){t.fixed&=-7}function ai(t){t.fixed|=4,t.px=t.x,t.py=t.y}function ui(t){t.fixed&=-5}function si(t,e,n){var r=0,i=0;if(t.charge=0,!t.leaf)for(var o,a=t.nodes,u=a.length,s=-1;++s<u;)o=a[s],null!=o&&(si(o,e,n),t.charge+=o.charge,r+=o.charge*o.cx,i+=o.charge*o.cy);if(t.point){t.leaf||(t.point.x+=Math.random()-.5,t.point.y+=Math.random()-.5);var l=e*n[t.point.index];t.charge+=t.pointCharge=l,r+=l*t.point.x,i+=l*t.point.y}t.cx=r/t.charge,t.cy=i/t.charge}function li(t,e){return pa.rebind(t,e,"sort","children","value"),t.nodes=t,t.links=gi,t}function ci(t,e){for(var n=[t];null!=(t=n.pop());)if(e(t),(i=t.children)&&(r=i.length))for(var r,i;--r>=0;)n.push(i[r])}function fi(t,e){for(var n=[t],r=[];null!=(t=n.pop());)if(r.push(t),(o=t.children)&&(i=o.length))for(var i,o,a=-1;++a<i;)n.push(o[a]);for(;null!=(t=r.pop());)e(t)}function hi(t){return t.children}function pi(t){return t.value}function di(t,e){return e.value-t.value}function gi(t){return pa.merge(t.map(function(t){return(t.children||[]).map(function(e){return{source:t,target:e}})}))}function vi(t){return t.x}function yi(t){return t.y}function mi(t,e,n){t.y0=e,t.y=n}function xi(t){return pa.range(t.length)}function bi(t){for(var e=-1,n=t[0].length,r=[];++e<n;)r[e]=0;return r}function wi(t){for(var e,n=1,r=0,i=t[0][1],o=t.length;n<o;++n)(e=t[n][1])>i&&(r=n,i=e);return r}function Mi(t){return t.reduce(_i,0)}function _i(t,e){return t+e[1]}function ki(t,e){return Si(t,Math.ceil(Math.log(e.length)/Math.LN2+1))}function Si(t,e){for(var n=-1,r=+t[0],i=(t[1]-r)/e,o=[];++n<=e;)o[n]=i*n+r;return o}function Ti(t){return[pa.min(t),pa.max(t)]}function Ei(t,e){return t.value-e.value}function Ci(t,e){var n=t._pack_next;t._pack_next=e,e._pack_prev=t,e._pack_next=n,n._pack_prev=e}function Ni(t,e){t._pack_next=e,e._pack_prev=t}function Ai(t,e){var n=e.x-t.x,r=e.y-t.y,i=t.r+e.r;return.999*i*i>n*n+r*r}function Li(t){function e(t){c=Math.min(t.x-t.r,c),f=Math.max(t.x+t.r,f),h=Math.min(t.y-t.r,h),p=Math.max(t.y+t.r,p)}if((n=t.children)&&(l=n.length)){var n,r,i,o,a,u,s,l,c=1/0,f=-(1/0),h=1/0,p=-(1/0);if(n.forEach(qi),r=n[0],r.x=-r.r,r.y=0,e(r),l>1&&(i=n[1],i.x=i.r,i.y=0,e(i),l>2))for(o=n[2],Ri(r,i,o),e(o),Ci(r,o),r._pack_prev=o,Ci(o,i),i=r._pack_next,a=3;a<l;a++){Ri(r,i,o=n[a]);var d=0,g=1,v=1;for(u=i._pack_next;u!==i;u=u._pack_next,g++)if(Ai(u,o)){d=1;break}if(1==d)for(s=r._pack_prev;s!==u._pack_prev&&!Ai(s,o);s=s._pack_prev,v++);d?(g<v||g==v&&i.r<r.r?Ni(r,i=u):Ni(r=s,i),a--):(Ci(r,o),i=o,e(o))}var y=(c+f)/2,m=(h+p)/2,x=0;for(a=0;a<l;a++)o=n[a],o.x-=y,o.y-=m,x=Math.max(x,o.r+Math.sqrt(o.x*o.x+o.y*o.y));t.r=x,n.forEach(Di)}}function qi(t){t._pack_next=t._pack_prev=t}function Di(t){delete t._pack_next,delete t._pack_prev}function ji(t,e,n,r){var i=t.children;if(t.x=e+=r*t.x,t.y=n+=r*t.y,t.r*=r,i)for(var o=-1,a=i.length;++o<a;)ji(i[o],e,n,r)}function Ri(t,e,n){var r=t.r+n.r,i=e.x-t.x,o=e.y-t.y;if(r&&(i||o)){var a=e.r+n.r,u=i*i+o*o;a*=a,r*=r;var s=.5+(r-a)/(2*u),l=Math.sqrt(Math.max(0,2*a*(r+u)-(r-=u)*r-a*a))/(2*u);n.x=t.x+s*i+l*o,n.y=t.y+s*o-l*i}else n.x=t.x+r,n.y=t.y}function Pi(t,e){return t.parent==e.parent?1:2}function Oi(t){var e=t.children;return e.length?e[0]:t.t}function zi(t){var e,n=t.children;return(e=n.length)?n[e-1]:t.t}function Fi(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function Hi(t){for(var e,n=0,r=0,i=t.children,o=i.length;--o>=0;)e=i[o],e.z+=n,e.m+=n,n+=e.s+(r+=e.c)}function Ii(t,e,n){return t.a.parent===e.parent?t.a:n}function Ui(t){return 1+pa.max(t,function(t){return t.y})}function Bi(t){return t.reduce(function(t,e){return t+e.x},0)/t.length}function Wi(t){var e=t.children;return e&&e.length?Wi(e[0]):t}function $i(t){var e,n=t.children;return n&&(e=n.length)?$i(n[e-1]):t}function Yi(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function Vi(t,e){var n=t.x+e[3],r=t.y+e[0],i=t.dx-e[1]-e[3],o=t.dy-e[0]-e[2];return i<0&&(n+=i/2,i=0),o<0&&(r+=o/2,o=0),{x:n,y:r,dx:i,dy:o}}function Xi(t){var e=t[0],n=t[t.length-1];return e<n?[e,n]:[n,e]}function Gi(t){return t.rangeExtent?t.rangeExtent():Xi(t.range())}function Zi(t,e,n,r){var i=n(t[0],t[1]),o=r(e[0],e[1]);return function(t){return o(i(t))}}function Ji(t,e){var n,r=0,i=t.length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}function Qi(t){return t?{floor:function(e){return Math.floor(e/t)*t},ceil:function(e){return Math.ceil(e/t)*t}}:Ns}function Ki(t,e,n,r){var i=[],o=[],a=0,u=Math.min(t.length,e.length)-1;for(t[u]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<=u;)i.push(n(t[a-1],t[a])),o.push(r(e[a-1],e[a]));return function(e){var n=pa.bisect(t,e,1,u)-1;return o[n](i[n](e))}}function to(t,e,n,r){function i(){var i=Math.min(t.length,e.length)>2?Ki:Zi,s=r?ti:Kr;return a=i(t,e,s,n),u=i(e,t,s,kr),o}function o(t){return a(t)}var a,u;return o.invert=function(t){return u(t)},o.domain=function(e){return arguments.length?(t=e.map(Number),i()):t},o.range=function(t){return arguments.length?(e=t,i()):e},o.rangeRound=function(t){return o.range(t).interpolate(Ur)},o.clamp=function(t){return arguments.length?(r=t,i()):r},o.interpolate=function(t){return arguments.length?(n=t,i()):n},o.ticks=function(e){return io(t,e)},o.tickFormat=function(e,n){return oo(t,e,n)},o.nice=function(e){return no(t,e),i()},o.copy=function(){return to(t,e,n,r)},i()}function eo(t,e){return pa.rebind(t,e,"range","rangeRound","interpolate","clamp")}function no(t,e){return Ji(t,Qi(ro(t,e)[2])),Ji(t,Qi(ro(t,e)[2])),t}function ro(t,e){null==e&&(e=10);var n=Xi(t),r=n[1]-n[0],i=Math.pow(10,Math.floor(Math.log(r/e)/Math.LN10)),o=e/r*i;return o<=.15?i*=10:o<=.35?i*=5:o<=.75&&(i*=2),n[0]=Math.ceil(n[0]/i)*i,n[1]=Math.floor(n[1]/i)*i+.5*i,n[2]=i,n}function io(t,e){return pa.range.apply(pa,ro(t,e))}function oo(t,e,n){var r=ro(t,e);if(n){var i=yu.exec(n);if(i.shift(),"s"===i[8]){var o=pa.formatPrefix(Math.max(Sa(r[0]),Sa(r[1])));return i[7]||(i[7]="."+ao(o.scale(r[2]))),
i[8]="f",n=pa.format(i.join("")),function(t){return n(o.scale(t))+o.symbol}}i[7]||(i[7]="."+uo(i[8],r)),n=i.join("")}else n=",."+ao(r[2])+"f";return pa.format(n)}function ao(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}function uo(t,e){var n=ao(e[2]);return t in As?Math.abs(n-ao(Math.max(Sa(e[0]),Sa(e[1]))))+ +("e"!==t):n-2*("%"===t)}function so(t,e,n,r){function i(t){return(n?Math.log(t<0?0:t):-Math.log(t>0?0:-t))/Math.log(e)}function o(t){return n?Math.pow(e,t):-Math.pow(e,-t)}function a(e){return t(i(e))}return a.invert=function(e){return o(t.invert(e))},a.domain=function(e){return arguments.length?(n=e[0]>=0,t.domain((r=e.map(Number)).map(i)),a):r},a.base=function(n){return arguments.length?(e=+n,t.domain(r.map(i)),a):e},a.nice=function(){var e=Ji(r.map(i),n?Math:qs);return t.domain(e),r=e.map(o),a},a.ticks=function(){var t=Xi(r),a=[],u=t[0],s=t[1],l=Math.floor(i(u)),c=Math.ceil(i(s)),f=e%1?2:e;if(isFinite(c-l)){if(n){for(;l<c;l++)for(var h=1;h<f;h++)a.push(o(l)*h);a.push(o(l))}else for(a.push(o(l));l++<c;)for(var h=f-1;h>0;h--)a.push(o(l)*h);for(l=0;a[l]<u;l++);for(c=a.length;a[c-1]>s;c--);a=a.slice(l,c)}return a},a.tickFormat=function(t,n){if(!arguments.length)return Ls;arguments.length<2?n=Ls:"function"!=typeof n&&(n=pa.format(n));var r=Math.max(1,e*t/a.ticks().length);return function(t){var a=t/o(Math.round(i(t)));return a*e<e-.5&&(a*=e),a<=r?n(t):""}},a.copy=function(){return so(t.copy(),e,n,r)},eo(a,t)}function lo(t,e,n){function r(e){return t(i(e))}var i=co(e),o=co(1/e);return r.invert=function(e){return o(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain((n=e.map(Number)).map(i)),r):n},r.ticks=function(t){return io(n,t)},r.tickFormat=function(t,e){return oo(n,t,e)},r.nice=function(t){return r.domain(no(n,t))},r.exponent=function(a){return arguments.length?(i=co(e=a),o=co(1/e),t.domain(n.map(i)),r):e},r.copy=function(){return lo(t.copy(),e,n)},eo(r,t)}function co(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function fo(t,e){function n(n){return o[((i.get(n)||("range"===e.t?i.set(n,t.push(n)):NaN))-1)%o.length]}function r(e,n){return pa.range(t.length).map(function(t){return e+n*t})}var i,o,a;return n.domain=function(r){if(!arguments.length)return t;t=[],i=new d;for(var o,a=-1,u=r.length;++a<u;)i.has(o=r[a])||i.set(o,t.push(o));return n[e.t].apply(n,e.a)},n.range=function(t){return arguments.length?(o=t,a=0,e={t:"range",a:arguments},n):o},n.rangePoints=function(i,u){arguments.length<2&&(u=0);var s=i[0],l=i[1],c=t.length<2?(s=(s+l)/2,0):(l-s)/(t.length-1+u);return o=r(s+c*u/2,c),a=0,e={t:"rangePoints",a:arguments},n},n.rangeRoundPoints=function(i,u){arguments.length<2&&(u=0);var s=i[0],l=i[1],c=t.length<2?(s=l=Math.round((s+l)/2),0):(l-s)/(t.length-1+u)|0;return o=r(s+Math.round(c*u/2+(l-s-(t.length-1+u)*c)/2),c),a=0,e={t:"rangeRoundPoints",a:arguments},n},n.rangeBands=function(i,u,s){arguments.length<2&&(u=0),arguments.length<3&&(s=u);var l=i[1]<i[0],c=i[l-0],f=i[1-l],h=(f-c)/(t.length-u+2*s);return o=r(c+h*s,h),l&&o.reverse(),a=h*(1-u),e={t:"rangeBands",a:arguments},n},n.rangeRoundBands=function(i,u,s){arguments.length<2&&(u=0),arguments.length<3&&(s=u);var l=i[1]<i[0],c=i[l-0],f=i[1-l],h=Math.floor((f-c)/(t.length-u+2*s));return o=r(c+Math.round((f-c-(t.length-u)*h)/2),h),l&&o.reverse(),a=Math.round(h*(1-u)),e={t:"rangeRoundBands",a:arguments},n},n.rangeBand=function(){return a},n.rangeExtent=function(){return Xi(e.a[0])},n.copy=function(){return fo(t,e)},n.domain(t)}function ho(t,e){function n(){var n=0,o=e.length;for(i=[];++n<o;)i[n-1]=pa.quantile(t,n/o);return r}function r(t){if(!isNaN(t=+t))return e[pa.bisect(i,t)]}var i;return r.domain=function(e){return arguments.length?(t=e.map(s).filter(l).sort(u),n()):t},r.range=function(t){return arguments.length?(e=t,n()):e},r.quantiles=function(){return i},r.invertExtent=function(n){return n=e.indexOf(n),n<0?[NaN,NaN]:[n>0?i[n-1]:t[0],n<i.length?i[n]:t[t.length-1]]},r.copy=function(){return ho(t,e)},n()}function po(t,e,n){function r(e){return n[Math.max(0,Math.min(a,Math.floor(o*(e-t))))]}function i(){return o=n.length/(e-t),a=n.length-1,r}var o,a;return r.domain=function(n){return arguments.length?(t=+n[0],e=+n[n.length-1],i()):[t,e]},r.range=function(t){return arguments.length?(n=t,i()):n},r.invertExtent=function(e){return e=n.indexOf(e),e=e<0?NaN:e/o+t,[e,e+1/o]},r.copy=function(){return po(t,e,n)},i()}function go(t,e){function n(n){if(n<=n)return e[pa.bisect(t,n)]}return n.domain=function(e){return arguments.length?(t=e,n):t},n.range=function(t){return arguments.length?(e=t,n):e},n.invertExtent=function(n){return n=e.indexOf(n),[t[n-1],t[n]]},n.copy=function(){return go(t,e)},n}function vo(t){function e(t){return+t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=n.map(e),e):t},e.ticks=function(e){return io(t,e)},e.tickFormat=function(e,n){return oo(t,e,n)},e.copy=function(){return vo(t)},e}function yo(){return 0}function mo(t){return t.innerRadius}function xo(t){return t.outerRadius}function bo(t){return t.startAngle}function wo(t){return t.endAngle}function Mo(t){return t&&t.padAngle}function _o(t,e,n,r){return(t-n)*e-(e-r)*t>0?0:1}function ko(t,e,n,r,i){var o=t[0]-e[0],a=t[1]-e[1],u=(i?r:-r)/Math.sqrt(o*o+a*a),s=u*a,l=-u*o,c=t[0]+s,f=t[1]+l,h=e[0]+s,p=e[1]+l,d=(c+h)/2,g=(f+p)/2,v=h-c,y=p-f,m=v*v+y*y,x=n-r,b=c*p-h*f,w=(y<0?-1:1)*Math.sqrt(Math.max(0,x*x*m-b*b)),M=(b*y-v*w)/m,_=(-b*v-y*w)/m,k=(b*y+v*w)/m,S=(-b*v+y*w)/m,T=M-d,E=_-g,C=k-d,N=S-g;return T*T+E*E>C*C+N*N&&(M=k,_=S),[[M-s,_-l],[M*n/x,_*n/x]]}function So(t){function e(e){function a(){l.push("M",o(t(c),u))}for(var s,l=[],c=[],f=-1,h=e.length,p=Lt(n),d=Lt(r);++f<h;)i.call(this,s=e[f],f)?c.push([+p.call(this,s,f),+d.call(this,s,f)]):c.length&&(a(),c=[]);return c.length&&a(),l.length?l.join(""):null}var n=jn,r=Rn,i=je,o=To,a=o.key,u=.7;return e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(r=t,e):r},e.defined=function(t){return arguments.length?(i=t,e):i},e.interpolate=function(t){return arguments.length?(a="function"==typeof t?o=t:(o=zs.get(t)||To).key,e):a},e.tension=function(t){return arguments.length?(u=t,e):u},e}function To(t){return t.length>1?t.join("L"):t+"Z"}function Eo(t){return t.join("L")+"Z"}function Co(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r[0]+(r=t[e])[0])/2,"V",r[1]);return n>1&&i.push("H",r[0]),i.join("")}function No(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("V",(r=t[e])[1],"H",r[0]);return i.join("")}function Ao(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r=t[e])[0],"V",r[1]);return i.join("")}function Lo(t,e){return t.length<4?To(t):t[1]+jo(t.slice(1,-1),Ro(t,e))}function qo(t,e){return t.length<3?Eo(t):t[0]+jo((t.push(t[0]),t),Ro([t[t.length-2]].concat(t,[t[1]]),e))}function Do(t,e){return t.length<3?To(t):t[0]+jo(t,Ro(t,e))}function jo(t,e){if(e.length<1||t.length!=e.length&&t.length!=e.length+2)return To(t);var n=t.length!=e.length,r="",i=t[0],o=t[1],a=e[0],u=a,s=1;if(n&&(r+="Q"+(o[0]-2*a[0]/3)+","+(o[1]-2*a[1]/3)+","+o[0]+","+o[1],i=t[1],s=2),e.length>1){u=e[1],o=t[s],s++,r+="C"+(i[0]+a[0])+","+(i[1]+a[1])+","+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1];for(var l=2;l<e.length;l++,s++)o=t[s],u=e[l],r+="S"+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1]}if(n){var c=t[s];r+="Q"+(o[0]+2*u[0]/3)+","+(o[1]+2*u[1]/3)+","+c[0]+","+c[1]}return r}function Ro(t,e){for(var n,r=[],i=(1-e)/2,o=t[0],a=t[1],u=1,s=t.length;++u<s;)n=o,o=a,a=t[u],r.push([i*(a[0]-n[0]),i*(a[1]-n[1])]);return r}function Po(t){if(t.length<3)return To(t);var e=1,n=t.length,r=t[0],i=r[0],o=r[1],a=[i,i,i,(r=t[1])[0]],u=[o,o,o,r[1]],s=[i,",",o,"L",Ho(Is,a),",",Ho(Is,u)];for(t.push(t[n-1]);++e<=n;)r=t[e],a.shift(),a.push(r[0]),u.shift(),u.push(r[1]),Io(s,a,u);return t.pop(),s.push("L",r),s.join("")}function Oo(t){if(t.length<4)return To(t);for(var e,n=[],r=-1,i=t.length,o=[0],a=[0];++r<3;)e=t[r],o.push(e[0]),a.push(e[1]);for(n.push(Ho(Is,o)+","+Ho(Is,a)),--r;++r<i;)e=t[r],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),Io(n,o,a);return n.join("")}function zo(t){for(var e,n,r=-1,i=t.length,o=i+4,a=[],u=[];++r<4;)n=t[r%i],a.push(n[0]),u.push(n[1]);for(e=[Ho(Is,a),",",Ho(Is,u)],--r;++r<o;)n=t[r%i],a.shift(),a.push(n[0]),u.shift(),u.push(n[1]),Io(e,a,u);return e.join("")}function Fo(t,e){var n=t.length-1;if(n)for(var r,i,o=t[0][0],a=t[0][1],u=t[n][0]-o,s=t[n][1]-a,l=-1;++l<=n;)r=t[l],i=l/n,r[0]=e*r[0]+(1-e)*(o+i*u),r[1]=e*r[1]+(1-e)*(a+i*s);return Po(t)}function Ho(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function Io(t,e,n){t.push("C",Ho(Fs,e),",",Ho(Fs,n),",",Ho(Hs,e),",",Ho(Hs,n),",",Ho(Is,e),",",Ho(Is,n))}function Uo(t,e){return(e[1]-t[1])/(e[0]-t[0])}function Bo(t){for(var e=0,n=t.length-1,r=[],i=t[0],o=t[1],a=r[0]=Uo(i,o);++e<n;)r[e]=(a+(a=Uo(i=o,o=t[e+1])))/2;return r[e]=a,r}function Wo(t){for(var e,n,r,i,o=[],a=Bo(t),u=-1,s=t.length-1;++u<s;)e=Uo(t[u],t[u+1]),Sa(e)<Ua?a[u]=a[u+1]=0:(n=a[u]/e,r=a[u+1]/e,i=n*n+r*r,i>9&&(i=3*e/Math.sqrt(i),a[u]=i*n,a[u+1]=i*r));for(u=-1;++u<=s;)i=(t[Math.min(s,u+1)][0]-t[Math.max(0,u-1)][0])/(6*(1+a[u]*a[u])),o.push([i||0,a[u]*i||0]);return o}function $o(t){return t.length<3?To(t):t[0]+jo(t,Wo(t))}function Yo(t){for(var e,n,r,i=-1,o=t.length;++i<o;)e=t[i],n=e[0],r=e[1]-Va,e[0]=n*Math.cos(r),e[1]=n*Math.sin(r);return t}function Vo(t){function e(e){function s(){g.push("M",u(t(y),f),c,l(t(v.reverse()),f),"Z")}for(var h,p,d,g=[],v=[],y=[],m=-1,x=e.length,b=Lt(n),w=Lt(i),M=n===r?function(){return p}:Lt(r),_=i===o?function(){return d}:Lt(o);++m<x;)a.call(this,h=e[m],m)?(v.push([p=+b.call(this,h,m),d=+w.call(this,h,m)]),y.push([+M.call(this,h,m),+_.call(this,h,m)])):v.length&&(s(),v=[],y=[]);return v.length&&s(),g.length?g.join(""):null}var n=jn,r=jn,i=0,o=Rn,a=je,u=To,s=u.key,l=u,c="L",f=.7;return e.x=function(t){return arguments.length?(n=r=t,e):r},e.x0=function(t){return arguments.length?(n=t,e):n},e.x1=function(t){return arguments.length?(r=t,e):r},e.y=function(t){return arguments.length?(i=o=t,e):o},e.y0=function(t){return arguments.length?(i=t,e):i},e.y1=function(t){return arguments.length?(o=t,e):o},e.defined=function(t){return arguments.length?(a=t,e):a},e.interpolate=function(t){return arguments.length?(s="function"==typeof t?u=t:(u=zs.get(t)||To).key,l=u.reverse||u,c=u.closed?"M":"L",e):s},e.tension=function(t){return arguments.length?(f=t,e):f},e}function Xo(t){return t.radius}function Go(t){return[t.x,t.y]}function Zo(t){return function(){var e=t.apply(this,arguments),n=e[0],r=e[1]-Va;return[n*Math.cos(r),n*Math.sin(r)]}}function Jo(){return 64}function Qo(){return"circle"}function Ko(t){var e=Math.sqrt(t/Wa);return"M0,"+e+"A"+e+","+e+" 0 1,1 0,"+-e+"A"+e+","+e+" 0 1,1 0,"+e+"Z"}function ta(t){return function(){var e,n,r;(e=this[t])&&(r=e[n=e.active])&&(r.timer.c=null,r.timer.t=NaN,--e.count?delete e[n]:delete this[t],e.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function ea(t,e,n){return Aa(t,Xs),t.namespace=e,t.id=n,t}function na(t,e,n,r){var i=t.id,o=t.namespace;return X(t,"function"==typeof n?function(t,a,u){t[o][i].tween.set(e,r(n.call(t,t.__data__,a,u)))}:(n=r(n),function(t){t[o][i].tween.set(e,n)}))}function ra(t){return null==t&&(t=""),function(){this.textContent=t}}function ia(t){return null==t?"__transition__":"__transition_"+t+"__"}function oa(t,e,n,r,i){function o(t){var e=g.delay;return l.t=e+s,e<=t?a(t-e):void(l.c=a)}function a(n){var i=p.active,o=p[i];o&&(o.timer.c=null,o.timer.t=NaN,--p.count,delete p[i],o.event&&o.event.interrupt.call(t,t.__data__,o.index));for(var a in p)if(+a<r){var d=p[a];d.timer.c=null,d.timer.t=NaN,--p.count,delete p[a]}l.c=u,Pt(function(){return l.c&&u(n||1)&&(l.c=null,l.t=NaN),1},0,s),p.active=r,g.event&&g.event.start.call(t,t.__data__,e),h=[],g.tween.forEach(function(n,r){(r=r.call(t,t.__data__,e))&&h.push(r)}),f=g.ease,c=g.duration}function u(i){for(var o=i/c,a=f(o),u=h.length;u>0;)h[--u].call(t,a);if(o>=1)return g.event&&g.event.end.call(t,t.__data__,e),--p.count?delete p[r]:delete t[n],1}var s,l,c,f,h,p=t[n]||(t[n]={active:0,count:0}),g=p[r];g||(s=i.time,l=Pt(o,0,s),g=p[r]={tween:new d,time:s,timer:l,delay:i.delay,duration:i.duration,ease:i.ease,index:e},i=null,++p.count)}function aa(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate("+(isFinite(r)?r:n(t))+",0)"})}function ua(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate(0,"+(isFinite(r)?r:n(t))+")"})}function sa(t){return t.toISOString()}function la(t,e,n){function r(e){return t(e)}function i(t,n){var r=t[1]-t[0],i=r/n,o=pa.bisect(rl,i);return o==rl.length?[e.year,ro(t.map(function(t){return t/31536e6}),n)[2]]:o?e[i/rl[o-1]<rl[o]/i?o-1:o]:[al,ro(t,n)[2]]}return r.invert=function(e){return ca(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain(e),r):t.domain().map(ca)},r.nice=function(t,e){function n(n){return!isNaN(n)&&!t.range(n,ca(+n+1),e).length}var o=r.domain(),a=Xi(o),u=null==t?i(a,10):"number"==typeof t&&i(a,t);return u&&(t=u[0],e=u[1]),r.domain(Ji(o,e>1?{floor:function(e){for(;n(e=t.floor(e));)e=ca(e-1);return e},ceil:function(e){for(;n(e=t.ceil(e));)e=ca(+e+1);return e}}:t))},r.ticks=function(t,e){var n=Xi(r.domain()),o=null==t?i(n,10):"number"==typeof t?i(n,t):!t.range&&[{range:t},e];return o&&(t=o[0],e=o[1]),t.range(n[0],ca(+n[1]+1),e<1?1:e)},r.tickFormat=function(){return n},r.copy=function(){return la(t.copy(),e,n)},eo(r,t)}function ca(t){return new Date(t)}function fa(t){return JSON.parse(t.responseText)}function ha(t){var e=va.createRange();return e.selectNode(va.body),e.createContextualFragment(t.responseText)}var pa={version:"3.5.17"},da=[].slice,ga=function(t){return da.call(t)},va=this.document;if(va)try{ga(va.documentElement.childNodes)[0].nodeType}catch(ya){ga=function(t){for(var e=t.length,n=new Array(e);e--;)n[e]=t[e];return n}}if(Date.now||(Date.now=function(){return+new Date}),va)try{va.createElement("DIV").style.setProperty("opacity",0,"")}catch(ma){var xa=this.Element.prototype,ba=xa.setAttribute,wa=xa.setAttributeNS,Ma=this.CSSStyleDeclaration.prototype,_a=Ma.setProperty;xa.setAttribute=function(t,e){ba.call(this,t,e+"")},xa.setAttributeNS=function(t,e,n){wa.call(this,t,e,n+"")},Ma.setProperty=function(t,e,n){_a.call(this,t,e+"",n)}}pa.ascending=u,pa.descending=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},pa.min=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&n>r&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&n>r&&(n=r)}return n},pa.max=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&r>n&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&r>n&&(n=r)}return n},pa.extent=function(t,e){var n,r,i,o=-1,a=t.length;if(1===arguments.length){for(;++o<a;)if(null!=(r=t[o])&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=t[o])&&(n>r&&(n=r),i<r&&(i=r))}else{for(;++o<a;)if(null!=(r=e.call(t,t[o],o))&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=e.call(t,t[o],o))&&(n>r&&(n=r),i<r&&(i=r))}return[n,i]},pa.sum=function(t,e){var n,r=0,i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)l(n=+t[o])&&(r+=n);else for(;++o<i;)l(n=+e.call(t,t[o],o))&&(r+=n);return r},pa.mean=function(t,e){var n,r=0,i=t.length,o=-1,a=i;if(1===arguments.length)for(;++o<i;)l(n=s(t[o]))?r+=n:--a;else for(;++o<i;)l(n=s(e.call(t,t[o],o)))?r+=n:--a;if(a)return r/a},pa.quantile=function(t,e){var n=(t.length-1)*e+1,r=Math.floor(n),i=+t[r-1],o=n-r;return o?i+o*(t[r]-i):i},pa.median=function(t,e){var n,r=[],i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)l(n=s(t[o]))&&r.push(n);else for(;++o<i;)l(n=s(e.call(t,t[o],o)))&&r.push(n);if(r.length)return pa.quantile(r.sort(u),.5)},pa.variance=function(t,e){var n,r,i=t.length,o=0,a=0,u=-1,c=0;if(1===arguments.length)for(;++u<i;)l(n=s(t[u]))&&(r=n-o,o+=r/++c,a+=r*(n-o));else for(;++u<i;)l(n=s(e.call(t,t[u],u)))&&(r=n-o,o+=r/++c,a+=r*(n-o));if(c>1)return a/(c-1)},pa.deviation=function(){var t=pa.variance.apply(this,arguments);return t?Math.sqrt(t):t};var ka=c(u);pa.bisectLeft=ka.left,pa.bisect=pa.bisectRight=ka.right,pa.bisector=function(t){return c(1===t.length?function(e,n){return u(t(e),n)}:t)},pa.shuffle=function(t,e,n){(o=arguments.length)<3&&(n=t.length,o<2&&(e=0));for(var r,i,o=n-e;o;)i=Math.random()*o--|0,r=t[o+e],t[o+e]=t[i+e],t[i+e]=r;return t},pa.permute=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},pa.pairs=function(t){for(var e,n=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);n<r;)o[n]=[e=i,i=t[++n]];return o},pa.transpose=function(t){if(!(i=t.length))return[];for(var e=-1,n=pa.min(t,f),r=new Array(n);++e<n;)for(var i,o=-1,a=r[e]=new Array(i);++o<i;)a[o]=t[o][e];return r},pa.zip=function(){return pa.transpose(arguments)},pa.keys=function(t){var e=[];for(var n in t)e.push(n);return e},pa.values=function(t){var e=[];for(var n in t)e.push(t[n]);return e},pa.entries=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},pa.merge=function(t){for(var e,n,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(n=new Array(a);--i>=0;)for(r=t[i],e=r.length;--e>=0;)n[--a]=r[e];return n};var Sa=Math.abs;pa.range=function(t,e,n){if(arguments.length<3&&(n=1,arguments.length<2&&(e=t,t=0)),(e-t)/n===1/0)throw new Error("infinite range");var r,i=[],o=h(Sa(n)),a=-1;if(t*=o,e*=o,n*=o,n<0)for(;(r=t+n*++a)>e;)i.push(r/o);else for(;(r=t+n*++a)<e;)i.push(r/o);return i},pa.map=function(t,e){var n=new d;if(t instanceof d)t.forEach(function(t,e){n.set(t,e)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(1===arguments.length)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e.call(t,r=t[i],i),r)}else for(var a in t)n.set(a,t[a]);return n};var Ta="__proto__",Ea="\0";p(d,{has:y,get:function(t){return this._[g(t)]},set:function(t,e){return this._[g(t)]=e},remove:m,keys:x,values:function(){var t=[];for(var e in this._)t.push(this._[e]);return t},entries:function(){var t=[];for(var e in this._)t.push({key:v(e),value:this._[e]});return t},size:b,empty:w,forEach:function(t){for(var e in this._)t.call(this,v(e),this._[e])}}),pa.nest=function(){function t(e,a,u){if(u>=o.length)return r?r.call(i,a):n?a.sort(n):a;for(var s,l,c,f,h=-1,p=a.length,g=o[u++],v=new d;++h<p;)(f=v.get(s=g(l=a[h])))?f.push(l):v.set(s,[l]);return e?(l=e(),c=function(n,r){l.set(n,t(e,r,u))}):(l={},c=function(n,r){l[n]=t(e,r,u)}),v.forEach(c),l}function e(t,n){if(n>=o.length)return t;var r=[],i=a[n++];return t.forEach(function(t,i){r.push({key:t,values:e(i,n)})}),i?r.sort(function(t,e){return i(t.key,e.key)}):r}var n,r,i={},o=[],a=[];return i.map=function(e,n){return t(n,e,0)},i.entries=function(n){return e(t(pa.map,n,0),0)},i.key=function(t){return o.push(t),i},i.sortKeys=function(t){return a[o.length-1]=t,i},i.sortValues=function(t){return n=t,i},i.rollup=function(t){return r=t,i},i},pa.set=function(t){var e=new M;if(t)for(var n=0,r=t.length;n<r;++n)e.add(t[n]);return e},p(M,{has:y,add:function(t){return this._[g(t+="")]=!0,t},remove:m,values:x,size:b,empty:w,forEach:function(t){for(var e in this._)t.call(this,v(e))}}),pa.behavior={},pa.rebind=function(t,e){for(var n,r=1,i=arguments.length;++r<i;)t[n=arguments[r]]=k(t,e,e[n]);return t};var Ca=["webkit","ms","moz","Moz","o","O"];pa.dispatch=function(){for(var t=new E,e=-1,n=arguments.length;++e<n;)t[arguments[e]]=C(t);return t},E.prototype.on=function(t,e){var n=t.indexOf("."),r="";if(n>=0&&(r=t.slice(n+1),t=t.slice(0,n)),t)return arguments.length<2?this[t].on(r):this[t].on(r,e);if(2===arguments.length){if(null==e)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},pa.event=null,pa.requote=function(t){return t.replace(Na,"\\$&")};var Na=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,Aa={}.__proto__?function(t,e){t.__proto__=e}:function(t,e){for(var n in e)t[n]=e[n]},La=function(t,e){return e.querySelector(t)},qa=function(t,e){return e.querySelectorAll(t)},Da=function(t,e){var n=t.matches||t[S(t,"matchesSelector")];return(Da=function(t,e){return n.call(t,e)})(t,e)};"function"==typeof Sizzle&&(La=function(t,e){return Sizzle(t,e)[0]||null},qa=Sizzle,Da=Sizzle.matchesSelector),pa.selection=function(){return pa.select(va.documentElement)};var ja=pa.selection.prototype=[];ja.select=function(t){var e,n,r,i,o=[];t=D(t);for(var a=-1,u=this.length;++a<u;){o.push(e=[]),e.parentNode=(r=this[a]).parentNode;for(var s=-1,l=r.length;++s<l;)(i=r[s])?(e.push(n=t.call(i,i.__data__,s,a)),n&&"__data__"in i&&(n.__data__=i.__data__)):e.push(null)}return q(o)},ja.selectAll=function(t){var e,n,r=[];t=j(t);for(var i=-1,o=this.length;++i<o;)for(var a=this[i],u=-1,s=a.length;++u<s;)(n=a[u])&&(r.push(e=ga(t.call(n,n.__data__,u,i))),e.parentNode=n);return q(r)};var Ra="http://www.w3.org/1999/xhtml",Pa={svg:"http://www.w3.org/2000/svg",xhtml:Ra,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};pa.ns={prefix:Pa,qualify:function(t){var e=t.indexOf(":"),n=t;return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Pa.hasOwnProperty(n)?{space:Pa[n],local:t}:t}},ja.attr=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node();return t=pa.ns.qualify(t),t.local?n.getAttributeNS(t.space,t.local):n.getAttribute(t)}for(e in t)this.each(R(e,t[e]));return this}return this.each(R(t,e))},ja.classed=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node(),r=(t=z(t)).length,i=-1;if(e=n.classList){for(;++i<r;)if(!e.contains(t[i]))return!1}else for(e=n.getAttribute("class");++i<r;)if(!O(t[i]).test(e))return!1;return!0}for(e in t)this.each(F(e,t[e]));return this}return this.each(F(t,e))},ja.style=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){r<2&&(e="");for(n in t)this.each(I(n,t[n],e));return this}if(r<2){var i=this.node();return a(i).getComputedStyle(i,null).getPropertyValue(t)}n=""}return this.each(I(t,e,n))},ja.property=function(t,e){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(e in t)this.each(U(e,t[e]));return this}return this.each(U(t,e))},ja.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},ja.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},ja.append=function(t){return t=B(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},ja.insert=function(t,e){return t=B(t),e=D(e),this.select(function(){return this.insertBefore(t.apply(this,arguments),e.apply(this,arguments)||null)})},ja.remove=function(){return this.each(W)},ja.data=function(t,e){function n(t,n){var r,i,o,a=t.length,c=n.length,f=Math.min(a,c),h=new Array(c),p=new Array(c),g=new Array(a);if(e){var v,y=new d,m=new Array(a);for(r=-1;++r<a;)(i=t[r])&&(y.has(v=e.call(i,i.__data__,r))?g[r]=i:y.set(v,i),m[r]=v);for(r=-1;++r<c;)(i=y.get(v=e.call(n,o=n[r],r)))?i!==!0&&(h[r]=i,i.__data__=o):p[r]=$(o),y.set(v,!0);for(r=-1;++r<a;)r in m&&y.get(m[r])!==!0&&(g[r]=t[r])}else{for(r=-1;++r<f;)i=t[r],o=n[r],i?(i.__data__=o,h[r]=i):p[r]=$(o);for(;r<c;++r)p[r]=$(n[r]);for(;r<a;++r)g[r]=t[r]}p.update=h,p.parentNode=h.parentNode=g.parentNode=t.parentNode,u.push(p),s.push(h),l.push(g)}var r,i,o=-1,a=this.length;if(!arguments.length){for(t=new Array(a=(r=this[0]).length);++o<a;)(i=r[o])&&(t[o]=i.__data__);return t}var u=G([]),s=q([]),l=q([]);if("function"==typeof t)for(;++o<a;)n(r=this[o],t.call(r,r.parentNode.__data__,o));else for(;++o<a;)n(r=this[o],t);return s.enter=function(){return u},s.exit=function(){return l},s},ja.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},ja.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=Y(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]),e.parentNode=(n=this[o]).parentNode;for(var u=0,s=n.length;u<s;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return q(i)},ja.order=function(){for(var t=-1,e=this.length;++t<e;)for(var n,r=this[t],i=r.length-1,o=r[i];--i>=0;)(n=r[i])&&(o&&o!==n.nextSibling&&o.parentNode.insertBefore(n,o),o=n);return this},ja.sort=function(t){t=V.apply(this,arguments);for(var e=-1,n=this.length;++e<n;)this[e].sort(t);return this.order()},ja.each=function(t){return X(this,function(e,n,r){t.call(e,e.__data__,n,r)})},ja.call=function(t){var e=ga(arguments);return t.apply(e[0]=this,e),this},ja.empty=function(){return!this.node()},ja.node=function(){for(var t=0,e=this.length;t<e;t++)for(var n=this[t],r=0,i=n.length;r<i;r++){var o=n[r];if(o)return o}return null},ja.size=function(){var t=0;return X(this,function(){++t}),t};var Oa=[];pa.selection.enter=G,pa.selection.enter.prototype=Oa,Oa.append=ja.append,Oa.empty=ja.empty,Oa.node=ja.node,Oa.call=ja.call,Oa.size=ja.size,Oa.select=function(t){for(var e,n,r,i,o,a=[],u=-1,s=this.length;++u<s;){r=(i=this[u]).update,a.push(e=[]),e.parentNode=i.parentNode;for(var l=-1,c=i.length;++l<c;)(o=i[l])?(e.push(r[l]=n=t.call(i.parentNode,o.__data__,l,u)),n.__data__=o.__data__):e.push(null)}return q(a)},Oa.insert=function(t,e){return arguments.length<2&&(e=Z(this)),ja.insert.call(this,t,e)},pa.select=function(t){var e;return"string"==typeof t?(e=[La(t,va)],e.parentNode=va.documentElement):(e=[t],e.parentNode=o(t)),q([e])},pa.selectAll=function(t){var e;return"string"==typeof t?(e=ga(qa(t,va)),e.parentNode=va.documentElement):(e=ga(t),e.parentNode=null),q([e])},ja.on=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){r<2&&(e=!1);for(n in t)this.each(J(n,t[n],e));return this}if(r<2)return(r=this.node()["__on"+t])&&r._;n=!1}return this.each(J(t,e,n))};var za=pa.map({mouseenter:"mouseover",mouseleave:"mouseout"});va&&za.forEach(function(t){"on"+t in va&&za.remove(t)});var Fa,Ha=0;pa.mouse=function(t){return et(t,A())};var Ia=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;pa.touch=function(t,e,n){if(arguments.length<3&&(n=e,e=A().changedTouches),e)for(var r,i=0,o=e.length;i<o;++i)if((r=e[i]).identifier===n)return et(t,r)},pa.behavior.drag=function(){function t(){this.on("mousedown.drag",i).on("touchstart.drag",o)}function e(t,e,i,o,a){return function(){function u(){var t,n,r=e(h,g);r&&(t=r[0]-x[0],n=r[1]-x[1],d|=t|n,x=r,p({type:"drag",x:r[0]+l[0],y:r[1]+l[1],dx:t,dy:n}))}function s(){e(h,g)&&(y.on(o+v,null).on(a+v,null),m(d),p({type:"dragend"}))}var l,c=this,f=pa.event.target.correspondingElement||pa.event.target,h=c.parentNode,p=n.of(c,arguments),d=0,g=t(),v=".drag"+(null==g?"":"-"+g),y=pa.select(i(f)).on(o+v,u).on(a+v,s),m=tt(f),x=e(h,g);r?(l=r.apply(c,arguments),l=[l.x-x[0],l.y-x[1]]):l=[0,0],p({type:"dragstart"})}}var n=L(t,"drag","dragstart","dragend"),r=null,i=e(T,pa.mouse,a,"mousemove","mouseup"),o=e(nt,pa.touch,_,"touchmove","touchend");return t.origin=function(e){return arguments.length?(r=e,t):r},pa.rebind(t,n,"on")},pa.touches=function(t,e){return arguments.length<2&&(e=A().touches),e?ga(e).map(function(e){var n=et(t,e);return n.identifier=e.identifier,n}):[]};var Ua=1e-6,Ba=Ua*Ua,Wa=Math.PI,$a=2*Wa,Ya=$a-Ua,Va=Wa/2,Xa=Wa/180,Ga=180/Wa,Za=Math.SQRT2,Ja=2,Qa=4;pa.interpolateZoom=function(t,e){var n,r,i=t[0],o=t[1],a=t[2],u=e[0],s=e[1],l=e[2],c=u-i,f=s-o,h=c*c+f*f;if(h<Ba)r=Math.log(l/a)/Za,n=function(t){return[i+t*c,o+t*f,a*Math.exp(Za*t*r)]};else{var p=Math.sqrt(h),d=(l*l-a*a+Qa*h)/(2*a*Ja*p),g=(l*l-a*a-Qa*h)/(2*l*Ja*p),v=Math.log(Math.sqrt(d*d+1)-d),y=Math.log(Math.sqrt(g*g+1)-g);r=(y-v)/Za,n=function(t){var e=t*r,n=st(v),u=a/(Ja*p)*(n*lt(Za*e+v)-ut(v));return[i+u*c,o+u*f,a*n/st(Za*e+v)]}}return n.duration=1e3*r,n},pa.behavior.zoom=function(){function t(t){t.on(A,f).on(tu+".zoom",p).on("dblclick.zoom",d).on(j,h)}function e(t){return[(t[0]-k.x)/k.k,(t[1]-k.y)/k.k]}function n(t){return[t[0]*k.k+k.x,t[1]*k.k+k.y]}function r(t){k.k=Math.max(T[0],Math.min(T[1],t))}function i(t,e){e=n(e),k.x+=t[0]-e[0],k.y+=t[1]-e[1]}function o(e,n,o,a){e.__chart__={x:k.x,y:k.y,k:k.k},r(Math.pow(2,a)),i(v=n,o),e=pa.select(e),E>0&&(e=e.transition().duration(E)),e.call(t.event)}function u(){w&&w.domain(b.range().map(function(t){return(t-k.x)/k.k}).map(b.invert)),_&&_.domain(M.range().map(function(t){return(t-k.y)/k.k}).map(M.invert))}function s(t){C++||t({type:"zoomstart"})}function l(t){u(),t({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function c(t){--C||(t({type:"zoomend"}),v=null)}function f(){function t(){u=1,i(pa.mouse(r),h),l(o)}function n(){f.on(q,null).on(D,null),p(u),c(o)}var r=this,o=R.of(r,arguments),u=0,f=pa.select(a(r)).on(q,t).on(D,n),h=e(pa.mouse(r)),p=tt(r);Vs.call(r),s(o)}function h(){function t(){var t=pa.touches(d);return p=k.k,t.forEach(function(t){t.identifier in v&&(v[t.identifier]=e(t))}),t}function n(){var e=pa.event.target;pa.select(e).on(b,a).on(w,u),M.push(e);for(var n=pa.event.changedTouches,r=0,i=n.length;r<i;++r)v[n[r].identifier]=null;var s=t(),l=Date.now();if(1===s.length){if(l-x<500){var c=s[0];o(d,c,v[c.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),N()}x=l}else if(s.length>1){var c=s[0],f=s[1],h=c[0]-f[0],p=c[1]-f[1];y=h*h+p*p}}function a(){var t,e,n,o,a=pa.touches(d);Vs.call(d);for(var u=0,s=a.length;u<s;++u,o=null)if(n=a[u],o=v[n.identifier]){if(e)break;t=n,e=o}if(o){var c=(c=n[0]-t[0])*c+(c=n[1]-t[1])*c,f=y&&Math.sqrt(c/y);t=[(t[0]+n[0])/2,(t[1]+n[1])/2],e=[(e[0]+o[0])/2,(e[1]+o[1])/2],r(f*p)}x=null,i(t,e),l(g)}function u(){if(pa.event.touches.length){for(var e=pa.event.changedTouches,n=0,r=e.length;n<r;++n)delete v[e[n].identifier];for(var i in v)return void t()}pa.selectAll(M).on(m,null),_.on(A,f).on(j,h),S(),c(g)}var p,d=this,g=R.of(d,arguments),v={},y=0,m=".zoom-"+pa.event.changedTouches[0].identifier,b="touchmove"+m,w="touchend"+m,M=[],_=pa.select(d),S=tt(d);n(),s(g),_.on(A,null).on(j,n)}function p(){var t=R.of(this,arguments);m?clearTimeout(m):(Vs.call(this),g=e(v=y||pa.mouse(this)),s(t)),m=setTimeout(function(){m=null,c(t)},50),N(),r(Math.pow(2,.002*Ka())*k.k),i(v,g),l(t)}function d(){var t=pa.mouse(this),n=Math.log(k.k)/Math.LN2;o(this,t,e(t),pa.event.shiftKey?Math.ceil(n)-1:Math.floor(n)+1)}var g,v,y,m,x,b,w,M,_,k={x:0,y:0,k:1},S=[960,500],T=eu,E=250,C=0,A="mousedown.zoom",q="mousemove.zoom",D="mouseup.zoom",j="touchstart.zoom",R=L(t,"zoomstart","zoom","zoomend");return tu||(tu="onwheel"in va?(Ka=function(){return-pa.event.deltaY*(pa.event.deltaMode?120:1)},"wheel"):"onmousewheel"in va?(Ka=function(){return pa.event.wheelDelta},"mousewheel"):(Ka=function(){return-pa.event.detail},"MozMousePixelScroll")),t.event=function(t){t.each(function(){var t=R.of(this,arguments),e=k;$s?pa.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},s(t)}).tween("zoom:zoom",function(){var n=S[0],r=S[1],i=v?v[0]:n/2,o=v?v[1]:r/2,a=pa.interpolateZoom([(i-k.x)/k.k,(o-k.y)/k.k,n/k.k],[(i-e.x)/e.k,(o-e.y)/e.k,n/e.k]);return function(e){var r=a(e),u=n/r[2];this.__chart__=k={x:i-r[0]*u,y:o-r[1]*u,k:u},l(t)}}).each("interrupt.zoom",function(){c(t)}).each("end.zoom",function(){c(t)}):(this.__chart__=k,s(t),l(t),c(t))})},t.translate=function(e){return arguments.length?(k={x:+e[0],y:+e[1],k:k.k},u(),t):[k.x,k.y]},t.scale=function(e){return arguments.length?(k={x:k.x,y:k.y,k:null},r(+e),u(),t):k.k},t.scaleExtent=function(e){return arguments.length?(T=null==e?eu:[+e[0],+e[1]],t):T},t.center=function(e){return arguments.length?(y=e&&[+e[0],+e[1]],t):y},t.size=function(e){return arguments.length?(S=e&&[+e[0],+e[1]],t):S},t.duration=function(e){return arguments.length?(E=+e,t):E},t.x=function(e){return arguments.length?(w=e,b=e.copy(),k={x:0,y:0,k:1},t):w},t.y=function(e){return arguments.length?(_=e,M=e.copy(),k={x:0,y:0,k:1},t):_},pa.rebind(t,R,"on")};var Ka,tu,eu=[0,1/0];pa.color=ft,ft.prototype.toString=function(){return this.rgb()+""},pa.hsl=ht;var nu=ht.prototype=new ft;nu.brighter=function(t){
return t=Math.pow(.7,arguments.length?t:1),new ht(this.h,this.s,this.l/t)},nu.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new ht(this.h,this.s,t*this.l)},nu.rgb=function(){return pt(this.h,this.s,this.l)},pa.hcl=dt;var ru=dt.prototype=new ft;ru.brighter=function(t){return new dt(this.h,this.c,Math.min(100,this.l+iu*(arguments.length?t:1)))},ru.darker=function(t){return new dt(this.h,this.c,Math.max(0,this.l-iu*(arguments.length?t:1)))},ru.rgb=function(){return gt(this.h,this.c,this.l).rgb()},pa.lab=vt;var iu=18,ou=.95047,au=1,uu=1.08883,su=vt.prototype=new ft;su.brighter=function(t){return new vt(Math.min(100,this.l+iu*(arguments.length?t:1)),this.a,this.b)},su.darker=function(t){return new vt(Math.max(0,this.l-iu*(arguments.length?t:1)),this.a,this.b)},su.rgb=function(){return yt(this.l,this.a,this.b)},pa.rgb=Mt;var lu=Mt.prototype=new ft;lu.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var e=this.r,n=this.g,r=this.b,i=30;return e||n||r?(e&&e<i&&(e=i),n&&n<i&&(n=i),r&&r<i&&(r=i),new Mt(Math.min(255,e/t),Math.min(255,n/t),Math.min(255,r/t))):new Mt(i,i,i)},lu.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new Mt(t*this.r,t*this.g,t*this.b)},lu.hsl=function(){return Et(this.r,this.g,this.b)},lu.toString=function(){return"#"+St(this.r)+St(this.g)+St(this.b)};var cu=pa.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});cu.forEach(function(t,e){cu.set(t,_t(e))}),pa.functor=Lt,pa.xhr=qt(_),pa.dsv=function(t,e){function n(t,n,o){arguments.length<3&&(o=n,n=null);var a=Dt(t,e,null==n?r:i(n),o);return a.row=function(t){return arguments.length?a.response(null==(n=t)?r:i(t)):n},a}function r(t){return n.parse(t.responseText)}function i(t){return function(e){return n.parse(e.responseText,t)}}function o(e){return e.map(a).join(t)}function a(t){return u.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}var u=new RegExp('["'+t+"\n]"),s=t.charCodeAt(0);return n.parse=function(t,e){var r;return n.parseRows(t,function(t,n){if(r)return r(t,n-1);var i=new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}");r=e?function(t,n){return e(i(t),n)}:i})},n.parseRows=function(t,e){function n(){if(c>=l)return a;if(i)return i=!1,o;var e=c;if(34===t.charCodeAt(e)){for(var n=e;n++<l;)if(34===t.charCodeAt(n)){if(34!==t.charCodeAt(n+1))break;++n}c=n+2;var r=t.charCodeAt(n+1);return 13===r?(i=!0,10===t.charCodeAt(n+2)&&++c):10===r&&(i=!0),t.slice(e+1,n).replace(/""/g,'"')}for(;c<l;){var r=t.charCodeAt(c++),u=1;if(10===r)i=!0;else if(13===r)i=!0,10===t.charCodeAt(c)&&(++c,++u);else if(r!==s)continue;return t.slice(e,c-u)}return t.slice(e)}for(var r,i,o={},a={},u=[],l=t.length,c=0,f=0;(r=n())!==a;){for(var h=[];r!==o&&r!==a;)h.push(r),r=n();e&&null==(h=e(h,f++))||u.push(h)}return u},n.format=function(e){if(Array.isArray(e[0]))return n.formatRows(e);var r=new M,i=[];return e.forEach(function(t){for(var e in t)r.has(e)||i.push(r.add(e))}),[i.map(a).join(t)].concat(e.map(function(e){return i.map(function(t){return a(e[t])}).join(t)})).join("\n")},n.formatRows=function(t){return t.map(o).join("\n")},n},pa.csv=pa.dsv(",","text/csv"),pa.tsv=pa.dsv("\t","text/tab-separated-values");var fu,hu,pu,du,gu=this[S(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};pa.timer=function(){Pt.apply(this,arguments)},pa.timer.flush=function(){zt(),Ft()},pa.round=function(t,e){return e?Math.round(t*(e=Math.pow(10,e)))/e:Math.round(t)};var vu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(It);pa.formatPrefix=function(t,e){var n=0;return(t=+t)&&(t<0&&(t*=-1),e&&(t=pa.round(t,Ht(t,e))),n=1+Math.floor(1e-12+Math.log(t)/Math.LN10),n=Math.max(-24,Math.min(24,3*Math.floor((n-1)/3)))),vu[8+n/3]};var yu=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,mu=pa.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,e){return t.toPrecision(e)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},r:function(t,e){return(t=pa.round(t,Ht(t,e))).toFixed(Math.max(0,Math.min(20,Ht(t*(1+1e-15),e))))}}),xu=pa.time={},bu=Date;Wt.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){wu.setUTCDate.apply(this._,arguments)},setDay:function(){wu.setUTCDay.apply(this._,arguments)},setFullYear:function(){wu.setUTCFullYear.apply(this._,arguments)},setHours:function(){wu.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){wu.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){wu.setUTCMinutes.apply(this._,arguments)},setMonth:function(){wu.setUTCMonth.apply(this._,arguments)},setSeconds:function(){wu.setUTCSeconds.apply(this._,arguments)},setTime:function(){wu.setTime.apply(this._,arguments)}};var wu=Date.prototype;xu.year=$t(function(t){return t=xu.day(t),t.setMonth(0,1),t},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t){return t.getFullYear()}),xu.years=xu.year.range,xu.years.utc=xu.year.utc.range,xu.day=$t(function(t){var e=new bu(2e3,0);return e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),e},function(t,e){t.setDate(t.getDate()+e)},function(t){return t.getDate()-1}),xu.days=xu.day.range,xu.days.utc=xu.day.utc.range,xu.dayOfYear=function(t){var e=xu.year(t);return Math.floor((t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(t,e){e=7-e;var n=xu[t]=$t(function(t){return(t=xu.day(t)).setDate(t.getDate()-(t.getDay()+e)%7),t},function(t,e){t.setDate(t.getDate()+7*Math.floor(e))},function(t){var n=xu.year(t).getDay();return Math.floor((xu.dayOfYear(t)+(n+e)%7)/7)-(n!==e)});xu[t+"s"]=n.range,xu[t+"s"].utc=n.utc.range,xu[t+"OfYear"]=function(t){var n=xu.year(t).getDay();return Math.floor((xu.dayOfYear(t)+(n+e)%7)/7)}}),xu.week=xu.sunday,xu.weeks=xu.sunday.range,xu.weeks.utc=xu.sunday.utc.range,xu.weekOfYear=xu.sundayOfYear;var Mu={"-":"",_:" ",0:"0"},_u=/^\s*\d+/,ku=/^%/;pa.locale=function(t){return{numberFormat:Ut(t),timeFormat:Vt(t)}};var Su=pa.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});pa.format=Su.numberFormat,pa.geo={},de.prototype={s:0,t:0,add:function(t){ge(t,this.t,Tu),ge(Tu.s,this.s,this),this.s?this.t+=Tu.t:this.s=Tu.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var Tu=new de;pa.geo.stream=function(t,e){t&&Eu.hasOwnProperty(t.type)?Eu[t.type](t,e):ve(t,e)};var Eu={Feature:function(t,e){ve(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)ve(n[r].geometry,e)}},Cu={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){ye(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)ye(n[r],e,0)},Polygon:function(t,e){me(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)me(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)ve(n[r],e)}};pa.geo.area=function(t){return Nu=0,pa.geo.stream(t,Lu),Nu};var Nu,Au=new de,Lu={sphere:function(){Nu+=4*Wa},point:T,lineStart:T,lineEnd:T,polygonStart:function(){Au.reset(),Lu.lineStart=xe},polygonEnd:function(){var t=2*Au;Nu+=t<0?4*Wa+t:t,Lu.lineStart=Lu.lineEnd=Lu.point=T}};pa.geo.bounds=function(){function t(t,e){x.push(b=[c=t,h=t]),e<f&&(f=e),e>p&&(p=e)}function e(e,n){var r=be([e*Xa,n*Xa]);if(y){var i=Me(y,r),o=[i[1],-i[0],0],a=Me(o,i);Se(a),a=Te(a);var s=e-d,l=s>0?1:-1,g=a[0]*Ga*l,v=Sa(s)>180;if(v^(l*d<g&&g<l*e)){var m=a[1]*Ga;m>p&&(p=m)}else if(g=(g+360)%360-180,v^(l*d<g&&g<l*e)){var m=-a[1]*Ga;m<f&&(f=m)}else n<f&&(f=n),n>p&&(p=n);v?e<d?u(c,e)>u(c,h)&&(h=e):u(e,h)>u(c,h)&&(c=e):h>=c?(e<c&&(c=e),e>h&&(h=e)):e>d?u(c,e)>u(c,h)&&(h=e):u(e,h)>u(c,h)&&(c=e)}else t(e,n);y=r,d=e}function n(){w.point=e}function r(){b[0]=c,b[1]=h,w.point=t,y=null}function i(t,n){if(y){var r=t-d;m+=Sa(r)>180?r+(r>0?360:-360):r}else g=t,v=n;Lu.point(t,n),e(t,n)}function o(){Lu.lineStart()}function a(){i(g,v),Lu.lineEnd(),Sa(m)>Ua&&(c=-(h=180)),b[0]=c,b[1]=h,y=null}function u(t,e){return(e-=t)<0?e+360:e}function s(t,e){return t[0]-e[0]}function l(t,e){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var c,f,h,p,d,g,v,y,m,x,b,w={point:t,lineStart:n,lineEnd:r,polygonStart:function(){w.point=i,w.lineStart=o,w.lineEnd=a,m=0,Lu.polygonStart()},polygonEnd:function(){Lu.polygonEnd(),w.point=t,w.lineStart=n,w.lineEnd=r,Au<0?(c=-(h=180),f=-(p=90)):m>Ua?p=90:m<-Ua&&(f=-90),b[0]=c,b[1]=h}};return function(t){p=h=-(c=f=1/0),x=[],pa.geo.stream(t,w);var e=x.length;if(e){x.sort(s);for(var n,r=1,i=x[0],o=[i];r<e;++r)n=x[r],l(n[0],i)||l(n[1],i)?(u(i[0],n[1])>u(i[0],i[1])&&(i[1]=n[1]),u(n[0],i[1])>u(i[0],i[1])&&(i[0]=n[0])):o.push(i=n);for(var a,n,d=-(1/0),e=o.length-1,r=0,i=o[e];r<=e;i=n,++r)n=o[r],(a=u(i[1],n[0]))>d&&(d=a,c=n[0],h=i[1])}return x=b=null,c===1/0||f===1/0?[[NaN,NaN],[NaN,NaN]]:[[c,f],[h,p]]}}(),pa.geo.centroid=function(t){qu=Du=ju=Ru=Pu=Ou=zu=Fu=Hu=Iu=Uu=0,pa.geo.stream(t,Bu);var e=Hu,n=Iu,r=Uu,i=e*e+n*n+r*r;return i<Ba&&(e=Ou,n=zu,r=Fu,Du<Ua&&(e=ju,n=Ru,r=Pu),i=e*e+n*n+r*r,i<Ba)?[NaN,NaN]:[Math.atan2(n,e)*Ga,at(r/Math.sqrt(i))*Ga]};var qu,Du,ju,Ru,Pu,Ou,zu,Fu,Hu,Iu,Uu,Bu={sphere:T,point:Ce,lineStart:Ae,lineEnd:Le,polygonStart:function(){Bu.lineStart=qe},polygonEnd:function(){Bu.lineStart=Ae}},Wu=ze(je,Ue,We,[-Wa,-Wa/2]),$u=1e9;pa.geo.clipExtent=function(){var t,e,n,r,i,o,a={stream:function(t){return i&&(i.valid=!1),i=o(t),i.valid=!0,i},extent:function(u){return arguments.length?(o=Xe(t=+u[0][0],e=+u[0][1],n=+u[1][0],r=+u[1][1]),i&&(i.valid=!1,i=null),a):[[t,e],[n,r]]}};return a.extent([[0,0],[960,500]])},(pa.geo.conicEqualArea=function(){return Ge(Ze)}).raw=Ze,pa.geo.albers=function(){return pa.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},pa.geo.albersUsa=function(){function t(t){var o=t[0],a=t[1];return e=null,n(o,a),e||(r(o,a),e)||i(o,a),e}var e,n,r,i,o=pa.geo.albers(),a=pa.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=pa.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){e=[t,n]}};return t.invert=function(t){var e=o.scale(),n=o.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?u:o).invert(t)},t.stream=function(t){var e=o.stream(t),n=a.stream(t),r=u.stream(t);return{point:function(t,i){e.point(t,i),n.point(t,i),r.point(t,i)},sphere:function(){e.sphere(),n.sphere(),r.sphere()},lineStart:function(){e.lineStart(),n.lineStart(),r.lineStart()},lineEnd:function(){e.lineEnd(),n.lineEnd(),r.lineEnd()},polygonStart:function(){e.polygonStart(),n.polygonStart(),r.polygonStart()},polygonEnd:function(){e.polygonEnd(),n.polygonEnd(),r.polygonEnd()}}},t.precision=function(e){return arguments.length?(o.precision(e),a.precision(e),u.precision(e),t):o.precision()},t.scale=function(e){return arguments.length?(o.scale(e),a.scale(.35*e),u.scale(e),t.translate(o.translate())):o.scale()},t.translate=function(e){if(!arguments.length)return o.translate();var l=o.scale(),c=+e[0],f=+e[1];return n=o.translate(e).clipExtent([[c-.455*l,f-.238*l],[c+.455*l,f+.238*l]]).stream(s).point,r=a.translate([c-.307*l,f+.201*l]).clipExtent([[c-.425*l+Ua,f+.12*l+Ua],[c-.214*l-Ua,f+.234*l-Ua]]).stream(s).point,i=u.translate([c-.205*l,f+.212*l]).clipExtent([[c-.214*l+Ua,f+.166*l+Ua],[c-.115*l-Ua,f+.234*l-Ua]]).stream(s).point,t},t.scale(1070)};var Yu,Vu,Xu,Gu,Zu,Ju,Qu={point:T,lineStart:T,lineEnd:T,polygonStart:function(){Vu=0,Qu.lineStart=Je},polygonEnd:function(){Qu.lineStart=Qu.lineEnd=Qu.point=T,Yu+=Sa(Vu/2)}},Ku={point:Qe,lineStart:T,lineEnd:T,polygonStart:T,polygonEnd:T},ts={point:en,lineStart:nn,lineEnd:rn,polygonStart:function(){ts.lineStart=on},polygonEnd:function(){ts.point=en,ts.lineStart=nn,ts.lineEnd=rn}};pa.geo.path=function(){function t(t){return t&&("function"==typeof u&&o.pointRadius(+u.apply(this,arguments)),a&&a.valid||(a=i(o)),pa.geo.stream(t,a)),o.result()}function e(){return a=null,t}var n,r,i,o,a,u=4.5;return t.area=function(t){return Yu=0,pa.geo.stream(t,i(Qu)),Yu},t.centroid=function(t){return ju=Ru=Pu=Ou=zu=Fu=Hu=Iu=Uu=0,pa.geo.stream(t,i(ts)),Uu?[Hu/Uu,Iu/Uu]:Fu?[Ou/Fu,zu/Fu]:Pu?[ju/Pu,Ru/Pu]:[NaN,NaN]},t.bounds=function(t){return Zu=Ju=-(Xu=Gu=1/0),pa.geo.stream(t,i(Ku)),[[Xu,Gu],[Zu,Ju]]},t.projection=function(t){return arguments.length?(i=(n=t)?t.stream||sn(t):_,e()):n},t.context=function(t){return arguments.length?(o=null==(r=t)?new Ke:new an(t),"function"!=typeof u&&o.pointRadius(u),e()):r},t.pointRadius=function(e){return arguments.length?(u="function"==typeof e?e:(o.pointRadius(+e),+e),t):u},t.projection(pa.geo.albersUsa()).context(null)},pa.geo.transform=function(t){return{stream:function(e){var n=new ln(e);for(var r in t)n[r]=t[r];return n}}},ln.prototype={point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},pa.geo.projection=fn,pa.geo.projectionMutator=hn,(pa.geo.equirectangular=function(){return fn(dn)}).raw=dn.invert=dn,pa.geo.rotation=function(t){function e(e){return e=t(e[0]*Xa,e[1]*Xa),e[0]*=Ga,e[1]*=Ga,e}return t=vn(t[0]%360*Xa,t[1]*Xa,t.length>2?t[2]*Xa:0),e.invert=function(e){return e=t.invert(e[0]*Xa,e[1]*Xa),e[0]*=Ga,e[1]*=Ga,e},e},gn.invert=dn,pa.geo.circle=function(){function t(){var t="function"==typeof r?r.apply(this,arguments):r,e=vn(-t[0]*Xa,-t[1]*Xa,0).invert,i=[];return n(null,null,1,{point:function(t,n){i.push(t=e(t,n)),t[0]*=Ga,t[1]*=Ga}}),{type:"Polygon",coordinates:[i]}}var e,n,r=[0,0],i=6;return t.origin=function(e){return arguments.length?(r=e,t):r},t.angle=function(r){return arguments.length?(n=bn((e=+r)*Xa,i*Xa),t):e},t.precision=function(r){return arguments.length?(n=bn(e*Xa,(i=+r)*Xa),t):i},t.angle(90)},pa.geo.distance=function(t,e){var n,r=(e[0]-t[0])*Xa,i=t[1]*Xa,o=e[1]*Xa,a=Math.sin(r),u=Math.cos(r),s=Math.sin(i),l=Math.cos(i),c=Math.sin(o),f=Math.cos(o);return Math.atan2(Math.sqrt((n=f*a)*n+(n=l*c-s*f*u)*n),s*c+l*f*u)},pa.geo.graticule=function(){function t(){return{type:"MultiLineString",coordinates:e()}}function e(){return pa.range(Math.ceil(o/v)*v,i,v).map(h).concat(pa.range(Math.ceil(l/y)*y,s,y).map(p)).concat(pa.range(Math.ceil(r/d)*d,n,d).filter(function(t){return Sa(t%v)>Ua}).map(c)).concat(pa.range(Math.ceil(u/g)*g,a,g).filter(function(t){return Sa(t%y)>Ua}).map(f))}var n,r,i,o,a,u,s,l,c,f,h,p,d=10,g=d,v=90,y=360,m=2.5;return t.lines=function(){return e().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(p(s).slice(1),h(i).reverse().slice(1),p(l).reverse().slice(1))]}},t.extent=function(e){return arguments.length?t.majorExtent(e).minorExtent(e):t.minorExtent()},t.majorExtent=function(e){return arguments.length?(o=+e[0][0],i=+e[1][0],l=+e[0][1],s=+e[1][1],o>i&&(e=o,o=i,i=e),l>s&&(e=l,l=s,s=e),t.precision(m)):[[o,l],[i,s]]},t.minorExtent=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],u=+e[0][1],a=+e[1][1],r>n&&(e=r,r=n,n=e),u>a&&(e=u,u=a,a=e),t.precision(m)):[[r,u],[n,a]]},t.step=function(e){return arguments.length?t.majorStep(e).minorStep(e):t.minorStep()},t.majorStep=function(e){return arguments.length?(v=+e[0],y=+e[1],t):[v,y]},t.minorStep=function(e){return arguments.length?(d=+e[0],g=+e[1],t):[d,g]},t.precision=function(e){return arguments.length?(m=+e,c=Mn(u,a,90),f=_n(r,n,m),h=Mn(l,s,90),p=_n(o,i,m),t):m},t.majorExtent([[-180,-90+Ua],[180,90-Ua]]).minorExtent([[-180,-80-Ua],[180,80+Ua]])},pa.geo.greatArc=function(){function t(){return{type:"LineString",coordinates:[e||r.apply(this,arguments),n||i.apply(this,arguments)]}}var e,n,r=kn,i=Sn;return t.distance=function(){return pa.geo.distance(e||r.apply(this,arguments),n||i.apply(this,arguments))},t.source=function(n){return arguments.length?(r=n,e="function"==typeof n?null:n,t):r},t.target=function(e){return arguments.length?(i=e,n="function"==typeof e?null:e,t):i},t.precision=function(){return arguments.length?t:0},t},pa.geo.interpolate=function(t,e){return Tn(t[0]*Xa,t[1]*Xa,e[0]*Xa,e[1]*Xa)},pa.geo.length=function(t){return es=0,pa.geo.stream(t,ns),es};var es,ns={sphere:T,point:T,lineStart:En,lineEnd:T,polygonStart:T,polygonEnd:T},rs=Cn(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(pa.geo.azimuthalEqualArea=function(){return fn(rs)}).raw=rs;var is=Cn(function(t){var e=Math.acos(t);return e&&e/Math.sin(e)},_);(pa.geo.azimuthalEquidistant=function(){return fn(is)}).raw=is,(pa.geo.conicConformal=function(){return Ge(Nn)}).raw=Nn,(pa.geo.conicEquidistant=function(){return Ge(An)}).raw=An;var os=Cn(function(t){return 1/t},Math.atan);(pa.geo.gnomonic=function(){return fn(os)}).raw=os,Ln.invert=function(t,e){return[t,2*Math.atan(Math.exp(e))-Va]},(pa.geo.mercator=function(){return qn(Ln)}).raw=Ln;var as=Cn(function(){return 1},Math.asin);(pa.geo.orthographic=function(){return fn(as)}).raw=as;var us=Cn(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});(pa.geo.stereographic=function(){return fn(us)}).raw=us,Dn.invert=function(t,e){return[-e,2*Math.atan(Math.exp(t))-Va]},(pa.geo.transverseMercator=function(){var t=qn(Dn),e=t.center,n=t.rotate;return t.center=function(t){return t?e([-t[1],t[0]]):(t=e(),[t[1],-t[0]])},t.rotate=function(t){return t?n([t[0],t[1],t.length>2?t[2]+90:90]):(t=n(),[t[0],t[1],t[2]-90])},n([0,0,90])}).raw=Dn,pa.geom={},pa.geom.hull=function(t){function e(t){if(t.length<3)return[];var e,i=Lt(n),o=Lt(r),a=t.length,u=[],s=[];for(e=0;e<a;e++)u.push([+i.call(this,t[e],e),+o.call(this,t[e],e),e]);for(u.sort(On),e=0;e<a;e++)s.push([u[e][0],-u[e][1]]);var l=Pn(u),c=Pn(s),f=c[0]===l[0],h=c[c.length-1]===l[l.length-1],p=[];for(e=l.length-1;e>=0;--e)p.push(t[u[l[e]][2]]);for(e=+f;e<c.length-h;++e)p.push(t[u[c[e]][2]]);return p}var n=jn,r=Rn;return arguments.length?e(t):(e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(r=t,e):r},e)},pa.geom.polygon=function(t){return Aa(t,ss),t};var ss=pa.geom.polygon.prototype=[];ss.area=function(){for(var t,e=-1,n=this.length,r=this[n-1],i=0;++e<n;)t=r,r=this[e],i+=t[1]*r[0]-t[0]*r[1];return.5*i},ss.centroid=function(t){var e,n,r=-1,i=this.length,o=0,a=0,u=this[i-1];for(arguments.length||(t=-1/(6*this.area()));++r<i;)e=u,u=this[r],n=e[0]*u[1]-u[0]*e[1],o+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[o*t,a*t]},ss.clip=function(t){for(var e,n,r,i,o,a,u=Hn(t),s=-1,l=this.length-Hn(this),c=this[l-1];++s<l;){for(e=t.slice(),t.length=0,i=this[s],o=e[(r=e.length-u)-1],n=-1;++n<r;)a=e[n],zn(a,c,i)?(zn(o,c,i)||t.push(Fn(o,a,c,i)),t.push(a)):zn(o,c,i)&&t.push(Fn(o,a,c,i)),o=a;u&&t.push(t[0]),c=i}return t};var ls,cs,fs,hs,ps,ds=[],gs=[];Xn.prototype.prepare=function(){for(var t,e=this.edges,n=e.length;n--;)t=e[n].edge,t.b&&t.a||e.splice(n,1);return e.sort(Zn),e.length},ar.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},ur.prototype={insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=fr(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)r=n.U,n===r.L?(i=r.R,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(lr(this,n),t=n,n=t.U),n.C=!1,r.C=!0,cr(this,r))):(i=r.L,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(cr(this,n),t=n,n=t.U),n.C=!1,r.C=!0,lr(this,r))),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?fr(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(e=i.R,e.C&&(e.C=!1,i.C=!0,lr(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,cr(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,lr(this,i),t=this._;break}}else if(e=i.L,e.C&&(e.C=!1,i.C=!0,cr(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,lr(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,cr(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},pa.geom.voronoi=function(t){function e(t){var e=new Array(t.length),r=u[0][0],i=u[0][1],o=u[1][0],a=u[1][1];return hr(n(t),u).cells.forEach(function(n,u){var s=n.edges,l=n.site,c=e[u]=s.length?s.map(function(t){var e=t.start();return[e.x,e.y]}):l.x>=r&&l.x<=o&&l.y>=i&&l.y<=a?[[r,a],[o,a],[o,i],[r,i]]:[];c.point=t[u]}),e}function n(t){return t.map(function(t,e){return{x:Math.round(o(t,e)/Ua)*Ua,y:Math.round(a(t,e)/Ua)*Ua,i:e}})}var r=jn,i=Rn,o=r,a=i,u=vs;return t?e(t):(e.links=function(t){return hr(n(t)).edges.filter(function(t){return t.l&&t.r}).map(function(e){return{source:t[e.l.i],target:t[e.r.i]}})},e.triangles=function(t){var e=[];return hr(n(t)).cells.forEach(function(n,r){for(var i,o,a=n.site,u=n.edges.sort(Zn),s=-1,l=u.length,c=u[l-1].edge,f=c.l===a?c.r:c.l;++s<l;)i=c,o=f,c=u[s].edge,f=c.l===a?c.r:c.l,r<o.i&&r<f.i&&dr(a,o,f)<0&&e.push([t[r],t[o.i],t[f.i]])}),e},e.x=function(t){return arguments.length?(o=Lt(r=t),e):r},e.y=function(t){return arguments.length?(a=Lt(i=t),e):i},e.clipExtent=function(t){return arguments.length?(u=null==t?vs:t,e):u===vs?null:u},e.size=function(t){return arguments.length?e.clipExtent(t&&[[0,0],t]):u===vs?null:u&&u[1]},e)};var vs=[[-1e6,-1e6],[1e6,1e6]];pa.geom.delaunay=function(t){return pa.geom.voronoi().triangles(t)},pa.geom.quadtree=function(t,e,n,r,i){function o(t){function o(t,e,n,r,i,o,a,u){if(!isNaN(n)&&!isNaN(r))if(t.leaf){var s=t.x,c=t.y;if(null!=s)if(Sa(s-n)+Sa(c-r)<.01)l(t,e,n,r,i,o,a,u);else{var f=t.point;t.x=t.y=t.point=null,l(t,f,s,c,i,o,a,u),l(t,e,n,r,i,o,a,u)}else t.x=n,t.y=r,t.point=e}else l(t,e,n,r,i,o,a,u)}function l(t,e,n,r,i,a,u,s){var l=.5*(i+u),c=.5*(a+s),f=n>=l,h=r>=c,p=h<<1|f;t.leaf=!1,t=t.nodes[p]||(t.nodes[p]=yr()),f?i=l:u=l,h?a=c:s=c,o(t,e,n,r,i,a,u,s)}var c,f,h,p,d,g,v,y,m,x=Lt(u),b=Lt(s);if(null!=e)g=e,v=n,y=r,m=i;else if(y=m=-(g=v=1/0),f=[],h=[],d=t.length,a)for(p=0;p<d;++p)c=t[p],c.x<g&&(g=c.x),c.y<v&&(v=c.y),c.x>y&&(y=c.x),c.y>m&&(m=c.y),f.push(c.x),h.push(c.y);else for(p=0;p<d;++p){var w=+x(c=t[p],p),M=+b(c,p);w<g&&(g=w),M<v&&(v=M),w>y&&(y=w),M>m&&(m=M),f.push(w),h.push(M)}var _=y-g,k=m-v;_>k?m=v+_:y=g+k;var S=yr();if(S.add=function(t){o(S,t,+x(t,++p),+b(t,p),g,v,y,m)},S.visit=function(t){mr(t,S,g,v,y,m)},S.find=function(t){return xr(S,t[0],t[1],g,v,y,m)},p=-1,null==e){for(;++p<d;)o(S,t[p],f[p],h[p],g,v,y,m);--p}else t.forEach(S.add);return f=h=t=c=null,S}var a,u=jn,s=Rn;return(a=arguments.length)?(u=gr,s=vr,3===a&&(i=n,r=e,n=e=0),o(t)):(o.x=function(t){return arguments.length?(u=t,o):u},o.y=function(t){return arguments.length?(s=t,o):s},o.extent=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),o):null==e?null:[[e,n],[r,i]]},o.size=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=n=0,r=+t[0],i=+t[1]),o):null==e?null:[r-e,i-n]},o)},pa.interpolateRgb=br,pa.interpolateObject=wr,pa.interpolateNumber=Mr,pa.interpolateString=_r;var ys=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ms=new RegExp(ys.source,"g");pa.interpolate=kr,pa.interpolators=[function(t,e){var n=typeof e;return("string"===n?cu.has(e.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(e)?br:_r:e instanceof ft?br:Array.isArray(e)?Sr:"object"===n&&isNaN(e)?wr:Mr)(t,e)}],pa.interpolateArray=Sr;var xs=function(){return _},bs=pa.map({linear:xs,poly:qr,quad:function(){return Nr},cubic:function(){return Ar},sin:function(){return Dr},exp:function(){return jr},circle:function(){return Rr},elastic:Pr,back:Or,bounce:function(){return zr}}),ws=pa.map({"in":_,out:Er,"in-out":Cr,"out-in":function(t){return Cr(Er(t))}});pa.ease=function(t){var e=t.indexOf("-"),n=e>=0?t.slice(0,e):t,r=e>=0?t.slice(e+1):"in";return n=bs.get(n)||xs,r=ws.get(r)||_,Tr(r(n.apply(null,da.call(arguments,1))))},pa.interpolateHcl=Fr,pa.interpolateHsl=Hr,pa.interpolateLab=Ir,pa.interpolateRound=Ur,pa.transform=function(t){var e=va.createElementNS(pa.ns.prefix.svg,"g");return(pa.transform=function(t){if(null!=t){e.setAttribute("transform",t);var n=e.transform.baseVal.consolidate()}return new Br(n?n.matrix:Ms)})(t)},Br.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var Ms={a:1,b:0,c:0,d:1,e:0,f:0};pa.interpolateTransform=Qr,pa.layout={},pa.layout.bundle=function(){return function(t){for(var e=[],n=-1,r=t.length;++n<r;)e.push(ei(t[n]));return e}},pa.layout.chord=function(){function t(){var t,l,f,h,p,d={},g=[],v=pa.range(o),y=[];for(n=[],r=[],t=0,h=-1;++h<o;){for(l=0,p=-1;++p<o;)l+=i[h][p];g.push(l),y.push(pa.range(o)),t+=l}for(a&&v.sort(function(t,e){return a(g[t],g[e])}),u&&y.forEach(function(t,e){t.sort(function(t,n){return u(i[e][t],i[e][n])})}),t=($a-c*o)/t,l=0,h=-1;++h<o;){for(f=l,p=-1;++p<o;){var m=v[h],x=y[m][p],b=i[m][x],w=l,M=l+=b*t;d[m+"-"+x]={index:m,subindex:x,startAngle:w,endAngle:M,value:b}}r[m]={index:m,startAngle:f,endAngle:l,value:g[m]},l+=c}for(h=-1;++h<o;)for(p=h-1;++p<o;){var _=d[h+"-"+p],k=d[p+"-"+h];(_.value||k.value)&&n.push(_.value<k.value?{source:k,target:_}:{source:_,target:k})}s&&e()}function e(){n.sort(function(t,e){return s((t.source.value+t.target.value)/2,(e.source.value+e.target.value)/2)})}var n,r,i,o,a,u,s,l={},c=0;return l.matrix=function(t){return arguments.length?(o=(i=t)&&i.length,n=r=null,l):i},l.padding=function(t){return arguments.length?(c=t,n=r=null,l):c},l.sortGroups=function(t){return arguments.length?(a=t,n=r=null,l):a},l.sortSubgroups=function(t){return arguments.length?(u=t,n=null,l):u},l.sortChords=function(t){return arguments.length?(s=t,n&&e(),l):s},l.chords=function(){return n||t(),n},l.groups=function(){return r||t(),r},l},pa.layout.force=function(){function t(t){return function(e,n,r,i){if(e.point!==t){var o=e.cx-t.x,a=e.cy-t.y,u=i-n,s=o*o+a*a;if(u*u/y<s){if(s<g){var l=e.charge/s;t.px-=o*l,t.py-=a*l}return!0}if(e.point&&s&&s<g){var l=e.pointCharge/s;t.px-=o*l,t.py-=a*l}}return!e.charge}}function e(t){t.px=pa.event.x,t.py=pa.event.y,s.resume()}var n,r,i,o,a,u,s={},l=pa.dispatch("start","tick","end"),c=[1,1],f=.9,h=_s,p=ks,d=-30,g=Ss,v=.1,y=.64,m=[],x=[];return s.tick=function(){if((i*=.99)<.005)return n=null,l.end({type:"end",alpha:i=0}),!0;var e,r,s,h,p,g,y,b,w,M=m.length,_=x.length;for(r=0;r<_;++r)s=x[r],h=s.source,p=s.target,b=p.x-h.x,w=p.y-h.y,(g=b*b+w*w)&&(g=i*a[r]*((g=Math.sqrt(g))-o[r])/g,b*=g,w*=g,p.x-=b*(y=h.weight+p.weight?h.weight/(h.weight+p.weight):.5),p.y-=w*y,h.x+=b*(y=1-y),h.y+=w*y);if((y=i*v)&&(b=c[0]/2,w=c[1]/2,r=-1,y))for(;++r<M;)s=m[r],s.x+=(b-s.x)*y,s.y+=(w-s.y)*y;if(d)for(si(e=pa.geom.quadtree(m),i,u),r=-1;++r<M;)(s=m[r]).fixed||e.visit(t(s));for(r=-1;++r<M;)s=m[r],s.fixed?(s.x=s.px,s.y=s.py):(s.x-=(s.px-(s.px=s.x))*f,s.y-=(s.py-(s.py=s.y))*f);l.tick({type:"tick",alpha:i})},s.nodes=function(t){return arguments.length?(m=t,s):m},s.links=function(t){return arguments.length?(x=t,s):x},s.size=function(t){return arguments.length?(c=t,s):c},s.linkDistance=function(t){return arguments.length?(h="function"==typeof t?t:+t,s):h},s.distance=s.linkDistance,s.linkStrength=function(t){return arguments.length?(p="function"==typeof t?t:+t,s):p},s.friction=function(t){return arguments.length?(f=+t,s):f},s.charge=function(t){return arguments.length?(d="function"==typeof t?t:+t,s):d},s.chargeDistance=function(t){return arguments.length?(g=t*t,s):Math.sqrt(g)},s.gravity=function(t){return arguments.length?(v=+t,s):v},s.theta=function(t){return arguments.length?(y=t*t,s):Math.sqrt(y)},s.alpha=function(t){return arguments.length?(t=+t,i?t>0?i=t:(n.c=null,n.t=NaN,n=null,l.end({type:"end",alpha:i=0})):t>0&&(l.start({type:"start",alpha:i=t}),n=Pt(s.tick)),s):i},s.start=function(){function t(t,r){if(!n){for(n=new Array(i),s=0;s<i;++s)n[s]=[];for(s=0;s<l;++s){var o=x[s];n[o.source.index].push(o.target),n[o.target.index].push(o.source)}}for(var a,u=n[e],s=-1,c=u.length;++s<c;)if(!isNaN(a=u[s][t]))return a;return Math.random()*r}var e,n,r,i=m.length,l=x.length,f=c[0],g=c[1];
for(e=0;e<i;++e)(r=m[e]).index=e,r.weight=0;for(e=0;e<l;++e)r=x[e],"number"==typeof r.source&&(r.source=m[r.source]),"number"==typeof r.target&&(r.target=m[r.target]),++r.source.weight,++r.target.weight;for(e=0;e<i;++e)r=m[e],isNaN(r.x)&&(r.x=t("x",f)),isNaN(r.y)&&(r.y=t("y",g)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(o=[],"function"==typeof h)for(e=0;e<l;++e)o[e]=+h.call(this,x[e],e);else for(e=0;e<l;++e)o[e]=h;if(a=[],"function"==typeof p)for(e=0;e<l;++e)a[e]=+p.call(this,x[e],e);else for(e=0;e<l;++e)a[e]=p;if(u=[],"function"==typeof d)for(e=0;e<i;++e)u[e]=+d.call(this,m[e],e);else for(e=0;e<i;++e)u[e]=d;return s.resume()},s.resume=function(){return s.alpha(.1)},s.stop=function(){return s.alpha(0)},s.drag=function(){return r||(r=pa.behavior.drag().origin(_).on("dragstart.force",ii).on("drag.force",e).on("dragend.force",oi)),arguments.length?void this.on("mouseover.force",ai).on("mouseout.force",ui).call(r):r},pa.rebind(s,l,"on")};var _s=20,ks=1,Ss=1/0;pa.layout.hierarchy=function(){function t(i){var o,a=[i],u=[];for(i.depth=0;null!=(o=a.pop());)if(u.push(o),(l=n.call(t,o,o.depth))&&(s=l.length)){for(var s,l,c;--s>=0;)a.push(c=l[s]),c.parent=o,c.depth=o.depth+1;r&&(o.value=0),o.children=l}else r&&(o.value=+r.call(t,o,o.depth)||0),delete o.children;return fi(i,function(t){var n,i;e&&(n=t.children)&&n.sort(e),r&&(i=t.parent)&&(i.value+=t.value)}),u}var e=di,n=hi,r=pi;return t.sort=function(n){return arguments.length?(e=n,t):e},t.children=function(e){return arguments.length?(n=e,t):n},t.value=function(e){return arguments.length?(r=e,t):r},t.revalue=function(e){return r&&(ci(e,function(t){t.children&&(t.value=0)}),fi(e,function(e){var n;e.children||(e.value=+r.call(t,e,e.depth)||0),(n=e.parent)&&(n.value+=e.value)})),e},t},pa.layout.partition=function(){function t(e,n,r,i){var o=e.children;if(e.x=n,e.y=e.depth*i,e.dx=r,e.dy=i,o&&(a=o.length)){var a,u,s,l=-1;for(r=e.value?r/e.value:0;++l<a;)t(u=o[l],n,s=u.value*r,i),n+=s}}function e(t){var n=t.children,r=0;if(n&&(i=n.length))for(var i,o=-1;++o<i;)r=Math.max(r,e(n[o]));return 1+r}function n(n,o){var a=r.call(this,n,o);return t(a[0],0,i[0],i[1]/e(a[0])),a}var r=pa.layout.hierarchy(),i=[1,1];return n.size=function(t){return arguments.length?(i=t,n):i},li(n,r)},pa.layout.pie=function(){function t(a){var u,s=a.length,l=a.map(function(n,r){return+e.call(t,n,r)}),c=+("function"==typeof r?r.apply(this,arguments):r),f=("function"==typeof i?i.apply(this,arguments):i)-c,h=Math.min(Math.abs(f)/s,+("function"==typeof o?o.apply(this,arguments):o)),p=h*(f<0?-1:1),d=pa.sum(l),g=d?(f-s*p)/d:0,v=pa.range(s),y=[];return null!=n&&v.sort(n===Ts?function(t,e){return l[e]-l[t]}:function(t,e){return n(a[t],a[e])}),v.forEach(function(t){y[t]={data:a[t],value:u=l[t],startAngle:c,endAngle:c+=u*g+p,padAngle:h}}),y}var e=Number,n=Ts,r=0,i=$a,o=0;return t.value=function(n){return arguments.length?(e=n,t):e},t.sort=function(e){return arguments.length?(n=e,t):n},t.startAngle=function(e){return arguments.length?(r=e,t):r},t.endAngle=function(e){return arguments.length?(i=e,t):i},t.padAngle=function(e){return arguments.length?(o=e,t):o},t};var Ts={};pa.layout.stack=function(){function t(u,s){if(!(h=u.length))return u;var l=u.map(function(n,r){return e.call(t,n,r)}),c=l.map(function(e){return e.map(function(e,n){return[o.call(t,e,n),a.call(t,e,n)]})}),f=n.call(t,c,s);l=pa.permute(l,f),c=pa.permute(c,f);var h,p,d,g,v=r.call(t,c,s),y=l[0].length;for(d=0;d<y;++d)for(i.call(t,l[0][d],g=v[d],c[0][d][1]),p=1;p<h;++p)i.call(t,l[p][d],g+=c[p-1][d][1],c[p][d][1]);return u}var e=_,n=xi,r=bi,i=mi,o=vi,a=yi;return t.values=function(n){return arguments.length?(e=n,t):e},t.order=function(e){return arguments.length?(n="function"==typeof e?e:Es.get(e)||xi,t):n},t.offset=function(e){return arguments.length?(r="function"==typeof e?e:Cs.get(e)||bi,t):r},t.x=function(e){return arguments.length?(o=e,t):o},t.y=function(e){return arguments.length?(a=e,t):a},t.out=function(e){return arguments.length?(i=e,t):i},t};var Es=pa.map({"inside-out":function(t){var e,n,r=t.length,i=t.map(wi),o=t.map(Mi),a=pa.range(r).sort(function(t,e){return i[t]-i[e]}),u=0,s=0,l=[],c=[];for(e=0;e<r;++e)n=a[e],u<s?(u+=o[n],l.push(n)):(s+=o[n],c.push(n));return c.reverse().concat(l)},reverse:function(t){return pa.range(t.length).reverse()},"default":xi}),Cs=pa.map({silhouette:function(t){var e,n,r,i=t.length,o=t[0].length,a=[],u=0,s=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];r>u&&(u=r),a.push(r)}for(n=0;n<o;++n)s[n]=(u-a[n])/2;return s},wiggle:function(t){var e,n,r,i,o,a,u,s,l,c=t.length,f=t[0],h=f.length,p=[];for(p[0]=s=l=0,n=1;n<h;++n){for(e=0,i=0;e<c;++e)i+=t[e][n][1];for(e=0,o=0,u=f[n][0]-f[n-1][0];e<c;++e){for(r=0,a=(t[e][n][1]-t[e][n-1][1])/(2*u);r<e;++r)a+=(t[r][n][1]-t[r][n-1][1])/u;o+=a*t[e][n][1]}p[n]=s-=i?o/i*u:0,s<l&&(l=s)}for(n=0;n<h;++n)p[n]-=l;return p},expand:function(t){var e,n,r,i=t.length,o=t[0].length,a=1/i,u=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];if(r)for(e=0;e<i;e++)t[e][n][1]/=r;else for(e=0;e<i;e++)t[e][n][1]=a}for(n=0;n<o;++n)u[n]=0;return u},zero:bi});pa.layout.histogram=function(){function t(t,o){for(var a,u,s=[],l=t.map(n,this),c=r.call(this,l,o),f=i.call(this,c,l,o),o=-1,h=l.length,p=f.length-1,d=e?1:1/h;++o<p;)a=s[o]=[],a.dx=f[o+1]-(a.x=f[o]),a.y=0;if(p>0)for(o=-1;++o<h;)u=l[o],u>=c[0]&&u<=c[1]&&(a=s[pa.bisect(f,u,1,p)-1],a.y+=d,a.push(t[o]));return s}var e=!0,n=Number,r=Ti,i=ki;return t.value=function(e){return arguments.length?(n=e,t):n},t.range=function(e){return arguments.length?(r=Lt(e),t):r},t.bins=function(e){return arguments.length?(i="number"==typeof e?function(t){return Si(t,e)}:Lt(e),t):i},t.frequency=function(n){return arguments.length?(e=!!n,t):e},t},pa.layout.pack=function(){function t(t,o){var a=n.call(this,t,o),u=a[0],s=i[0],l=i[1],c=null==e?Math.sqrt:"function"==typeof e?e:function(){return e};if(u.x=u.y=0,fi(u,function(t){t.r=+c(t.value)}),fi(u,Li),r){var f=r*(e?1:Math.max(2*u.r/s,2*u.r/l))/2;fi(u,function(t){t.r+=f}),fi(u,Li),fi(u,function(t){t.r-=f})}return ji(u,s/2,l/2,e?1:1/Math.max(2*u.r/s,2*u.r/l)),a}var e,n=pa.layout.hierarchy().sort(Ei),r=0,i=[1,1];return t.size=function(e){return arguments.length?(i=e,t):i},t.radius=function(n){return arguments.length?(e=null==n||"function"==typeof n?n:+n,t):e},t.padding=function(e){return arguments.length?(r=+e,t):r},li(t,n)},pa.layout.tree=function(){function t(t,i){var c=a.call(this,t,i),f=c[0],h=e(f);if(fi(h,n),h.parent.m=-h.z,ci(h,r),l)ci(f,o);else{var p=f,d=f,g=f;ci(f,function(t){t.x<p.x&&(p=t),t.x>d.x&&(d=t),t.depth>g.depth&&(g=t)});var v=u(p,d)/2-p.x,y=s[0]/(d.x+u(d,p)/2+v),m=s[1]/(g.depth||1);ci(f,function(t){t.x=(t.x+v)*y,t.y=t.depth*m})}return c}function e(t){for(var e,n={A:null,children:[t]},r=[n];null!=(e=r.pop());)for(var i,o=e.children,a=0,u=o.length;a<u;++a)r.push((o[a]=i={_:o[a],parent:e,children:(i=o[a].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=i);return n.children[0]}function n(t){var e=t.children,n=t.parent.children,r=t.i?n[t.i-1]:null;if(e.length){Hi(t);var o=(e[0].z+e[e.length-1].z)/2;r?(t.z=r.z+u(t._,r._),t.m=t.z-o):t.z=o}else r&&(t.z=r.z+u(t._,r._));t.parent.A=i(t,r,t.parent.A||n[0])}function r(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function i(t,e,n){if(e){for(var r,i=t,o=t,a=e,s=i.parent.children[0],l=i.m,c=o.m,f=a.m,h=s.m;a=zi(a),i=Oi(i),a&&i;)s=Oi(s),o=zi(o),o.a=t,r=a.z+f-i.z-l+u(a._,i._),r>0&&(Fi(Ii(a,t,n),t,r),l+=r,c+=r),f+=a.m,l+=i.m,h+=s.m,c+=o.m;a&&!zi(o)&&(o.t=a,o.m+=f-c),i&&!Oi(s)&&(s.t=i,s.m+=l-h,n=t)}return n}function o(t){t.x*=s[0],t.y=t.depth*s[1]}var a=pa.layout.hierarchy().sort(null).value(null),u=Pi,s=[1,1],l=null;return t.separation=function(e){return arguments.length?(u=e,t):u},t.size=function(e){return arguments.length?(l=null==(s=e)?o:null,t):l?null:s},t.nodeSize=function(e){return arguments.length?(l=null==(s=e)?null:o,t):l?s:null},li(t,a)},pa.layout.cluster=function(){function t(t,o){var a,u=e.call(this,t,o),s=u[0],l=0;fi(s,function(t){var e=t.children;e&&e.length?(t.x=Bi(e),t.y=Ui(e)):(t.x=a?l+=n(t,a):0,t.y=0,a=t)});var c=Wi(s),f=$i(s),h=c.x-n(c,f)/2,p=f.x+n(f,c)/2;return fi(s,i?function(t){t.x=(t.x-s.x)*r[0],t.y=(s.y-t.y)*r[1]}:function(t){t.x=(t.x-h)/(p-h)*r[0],t.y=(1-(s.y?t.y/s.y:1))*r[1]}),u}var e=pa.layout.hierarchy().sort(null).value(null),n=Pi,r=[1,1],i=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(e){return arguments.length?(i=null==(r=e),t):i?null:r},t.nodeSize=function(e){return arguments.length?(i=null!=(r=e),t):i?r:null},li(t,e)},pa.layout.treemap=function(){function t(t,e){for(var n,r,i=-1,o=t.length;++i<o;)r=(n=t[i]).value*(e<0?0:e),n.area=isNaN(r)||r<=0?0:r}function e(n){var o=n.children;if(o&&o.length){var a,u,s,l=f(n),c=[],h=o.slice(),d=1/0,g="slice"===p?l.dx:"dice"===p?l.dy:"slice-dice"===p?1&n.depth?l.dy:l.dx:Math.min(l.dx,l.dy);for(t(h,l.dx*l.dy/n.value),c.area=0;(s=h.length)>0;)c.push(a=h[s-1]),c.area+=a.area,"squarify"!==p||(u=r(c,g))<=d?(h.pop(),d=u):(c.area-=c.pop().area,i(c,g,l,!1),g=Math.min(l.dx,l.dy),c.length=c.area=0,d=1/0);c.length&&(i(c,g,l,!0),c.length=c.area=0),o.forEach(e)}}function n(e){var r=e.children;if(r&&r.length){var o,a=f(e),u=r.slice(),s=[];for(t(u,a.dx*a.dy/e.value),s.area=0;o=u.pop();)s.push(o),s.area+=o.area,null!=o.z&&(i(s,o.z?a.dx:a.dy,a,!u.length),s.length=s.area=0);r.forEach(n)}}function r(t,e){for(var n,r=t.area,i=0,o=1/0,a=-1,u=t.length;++a<u;)(n=t[a].area)&&(n<o&&(o=n),n>i&&(i=n));return r*=r,e*=e,r?Math.max(e*i*d/r,r/(e*o*d)):1/0}function i(t,e,n,r){var i,o=-1,a=t.length,u=n.x,l=n.y,c=e?s(t.area/e):0;if(e==n.dx){for((r||c>n.dy)&&(c=n.dy);++o<a;)i=t[o],i.x=u,i.y=l,i.dy=c,u+=i.dx=Math.min(n.x+n.dx-u,c?s(i.area/c):0);i.z=!0,i.dx+=n.x+n.dx-u,n.y+=c,n.dy-=c}else{for((r||c>n.dx)&&(c=n.dx);++o<a;)i=t[o],i.x=u,i.y=l,i.dx=c,l+=i.dy=Math.min(n.y+n.dy-l,c?s(i.area/c):0);i.z=!1,i.dy+=n.y+n.dy-l,n.x+=c,n.dx-=c}}function o(r){var i=a||u(r),o=i[0];return o.x=o.y=0,o.value?(o.dx=l[0],o.dy=l[1]):o.dx=o.dy=0,a&&u.revalue(o),t([o],o.dx*o.dy/o.value),(a?n:e)(o),h&&(a=i),i}var a,u=pa.layout.hierarchy(),s=Math.round,l=[1,1],c=null,f=Yi,h=!1,p="squarify",d=.5*(1+Math.sqrt(5));return o.size=function(t){return arguments.length?(l=t,o):l},o.padding=function(t){function e(e){var n=t.call(o,e,e.depth);return null==n?Yi(e):Vi(e,"number"==typeof n?[n,n,n,n]:n)}function n(e){return Vi(e,t)}if(!arguments.length)return c;var r;return f=null==(c=t)?Yi:"function"==(r=typeof t)?e:"number"===r?(t=[t,t,t,t],n):n,o},o.round=function(t){return arguments.length?(s=t?Math.round:Number,o):s!=Number},o.sticky=function(t){return arguments.length?(h=t,a=null,o):h},o.ratio=function(t){return arguments.length?(d=t,o):d},o.mode=function(t){return arguments.length?(p=t+"",o):p},li(o,u)},pa.random={normal:function(t,e){var n=arguments.length;return n<2&&(e=1),n<1&&(t=0),function(){var n,r,i;do n=2*Math.random()-1,r=2*Math.random()-1,i=n*n+r*r;while(!i||i>1);return t+e*n*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var t=pa.random.normal.apply(pa,arguments);return function(){return Math.exp(t())}},bates:function(t){var e=pa.random.irwinHall(t);return function(){return e()/t}},irwinHall:function(t){return function(){for(var e=0,n=0;n<t;n++)e+=Math.random();return e}}},pa.scale={};var Ns={floor:_,ceil:_};pa.scale.linear=function(){return to([0,1],[0,1],kr,!1)};var As={s:1,g:1,p:1,r:1,e:1};pa.scale.log=function(){return so(pa.scale.linear().domain([0,1]),10,!0,[1,10])};var Ls=pa.format(".0e"),qs={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};pa.scale.pow=function(){return lo(pa.scale.linear(),1,[0,1])},pa.scale.sqrt=function(){return pa.scale.pow().exponent(.5)},pa.scale.ordinal=function(){return fo([],{t:"range",a:[[]]})},pa.scale.category10=function(){return pa.scale.ordinal().range(Ds)},pa.scale.category20=function(){return pa.scale.ordinal().range(js)},pa.scale.category20b=function(){return pa.scale.ordinal().range(Rs)},pa.scale.category20c=function(){return pa.scale.ordinal().range(Ps)};var Ds=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(kt),js=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(kt),Rs=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(kt),Ps=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(kt);pa.scale.quantile=function(){return ho([],[])},pa.scale.quantize=function(){return po(0,1,[0,1])},pa.scale.threshold=function(){return go([.5],[0,1])},pa.scale.identity=function(){return vo([0,1])},pa.svg={},pa.svg.arc=function(){function t(){var t=Math.max(0,+n.apply(this,arguments)),l=Math.max(0,+r.apply(this,arguments)),c=a.apply(this,arguments)-Va,f=u.apply(this,arguments)-Va,h=Math.abs(f-c),p=c>f?0:1;if(l<t&&(d=l,l=t,t=d),h>=Ya)return e(l,p)+(t?e(t,1-p):"")+"Z";var d,g,v,y,m,x,b,w,M,_,k,S,T=0,E=0,C=[];if((y=(+s.apply(this,arguments)||0)/2)&&(v=o===Os?Math.sqrt(t*t+l*l):+o.apply(this,arguments),p||(E*=-1),l&&(E=at(v/l*Math.sin(y))),t&&(T=at(v/t*Math.sin(y)))),l){m=l*Math.cos(c+E),x=l*Math.sin(c+E),b=l*Math.cos(f-E),w=l*Math.sin(f-E);var N=Math.abs(f-c-2*E)<=Wa?0:1;if(E&&_o(m,x,b,w)===p^N){var A=(c+f)/2;m=l*Math.cos(A),x=l*Math.sin(A),b=w=null}}else m=x=0;if(t){M=t*Math.cos(f-T),_=t*Math.sin(f-T),k=t*Math.cos(c+T),S=t*Math.sin(c+T);var L=Math.abs(c-f+2*T)<=Wa?0:1;if(T&&_o(M,_,k,S)===1-p^L){var q=(c+f)/2;M=t*Math.cos(q),_=t*Math.sin(q),k=S=null}}else M=_=0;if(h>Ua&&(d=Math.min(Math.abs(l-t)/2,+i.apply(this,arguments)))>.001){g=t<l^p?0:1;var D=d,j=d;if(h<Wa){var R=null==k?[M,_]:null==b?[m,x]:Fn([m,x],[k,S],[b,w],[M,_]),P=m-R[0],O=x-R[1],z=b-R[0],F=w-R[1],H=1/Math.sin(Math.acos((P*z+O*F)/(Math.sqrt(P*P+O*O)*Math.sqrt(z*z+F*F)))/2),I=Math.sqrt(R[0]*R[0]+R[1]*R[1]);j=Math.min(d,(t-I)/(H-1)),D=Math.min(d,(l-I)/(H+1))}if(null!=b){var U=ko(null==k?[M,_]:[k,S],[m,x],l,D,p),B=ko([b,w],[M,_],l,D,p);d===D?C.push("M",U[0],"A",D,",",D," 0 0,",g," ",U[1],"A",l,",",l," 0 ",1-p^_o(U[1][0],U[1][1],B[1][0],B[1][1]),",",p," ",B[1],"A",D,",",D," 0 0,",g," ",B[0]):C.push("M",U[0],"A",D,",",D," 0 1,",g," ",B[0])}else C.push("M",m,",",x);if(null!=k){var W=ko([m,x],[k,S],t,-j,p),$=ko([M,_],null==b?[m,x]:[b,w],t,-j,p);d===j?C.push("L",$[0],"A",j,",",j," 0 0,",g," ",$[1],"A",t,",",t," 0 ",p^_o($[1][0],$[1][1],W[1][0],W[1][1]),",",1-p," ",W[1],"A",j,",",j," 0 0,",g," ",W[0]):C.push("L",$[0],"A",j,",",j," 0 0,",g," ",W[0])}else C.push("L",M,",",_)}else C.push("M",m,",",x),null!=b&&C.push("A",l,",",l," 0 ",N,",",p," ",b,",",w),C.push("L",M,",",_),null!=k&&C.push("A",t,",",t," 0 ",L,",",1-p," ",k,",",S);return C.push("Z"),C.join("")}function e(t,e){return"M0,"+t+"A"+t+","+t+" 0 1,"+e+" 0,"+-t+"A"+t+","+t+" 0 1,"+e+" 0,"+t}var n=mo,r=xo,i=yo,o=Os,a=bo,u=wo,s=Mo;return t.innerRadius=function(e){return arguments.length?(n=Lt(e),t):n},t.outerRadius=function(e){return arguments.length?(r=Lt(e),t):r},t.cornerRadius=function(e){return arguments.length?(i=Lt(e),t):i},t.padRadius=function(e){return arguments.length?(o=e==Os?Os:Lt(e),t):o},t.startAngle=function(e){return arguments.length?(a=Lt(e),t):a},t.endAngle=function(e){return arguments.length?(u=Lt(e),t):u},t.padAngle=function(e){return arguments.length?(s=Lt(e),t):s},t.centroid=function(){var t=(+n.apply(this,arguments)+ +r.apply(this,arguments))/2,e=(+a.apply(this,arguments)+ +u.apply(this,arguments))/2-Va;return[Math.cos(e)*t,Math.sin(e)*t]},t};var Os="auto";pa.svg.line=function(){return So(_)};var zs=pa.map({linear:To,"linear-closed":Eo,step:Co,"step-before":No,"step-after":Ao,basis:Po,"basis-open":Oo,"basis-closed":zo,bundle:Fo,cardinal:Do,"cardinal-open":Lo,"cardinal-closed":qo,monotone:$o});zs.forEach(function(t,e){e.key=t,e.closed=/-closed$/.test(t)});var Fs=[0,2/3,1/3,0],Hs=[0,1/3,2/3,0],Is=[0,1/6,2/3,1/6];pa.svg.line.radial=function(){var t=So(Yo);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},No.reverse=Ao,Ao.reverse=No,pa.svg.area=function(){return Vo(_)},pa.svg.area.radial=function(){var t=Vo(Yo);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},pa.svg.chord=function(){function t(t,u){var s=e(this,o,t,u),l=e(this,a,t,u);return"M"+s.p0+r(s.r,s.p1,s.a1-s.a0)+(n(s,l)?i(s.r,s.p1,s.r,s.p0):i(s.r,s.p1,l.r,l.p0)+r(l.r,l.p1,l.a1-l.a0)+i(l.r,l.p1,s.r,s.p0))+"Z"}function e(t,e,n,r){var i=e.call(t,n,r),o=u.call(t,i,r),a=s.call(t,i,r)-Va,c=l.call(t,i,r)-Va;return{r:o,a0:a,a1:c,p0:[o*Math.cos(a),o*Math.sin(a)],p1:[o*Math.cos(c),o*Math.sin(c)]}}function n(t,e){return t.a0==e.a0&&t.a1==e.a1}function r(t,e,n){return"A"+t+","+t+" 0 "+ +(n>Wa)+",1 "+e}function i(t,e,n,r){return"Q 0,0 "+r}var o=kn,a=Sn,u=Xo,s=bo,l=wo;return t.radius=function(e){return arguments.length?(u=Lt(e),t):u},t.source=function(e){return arguments.length?(o=Lt(e),t):o},t.target=function(e){return arguments.length?(a=Lt(e),t):a},t.startAngle=function(e){return arguments.length?(s=Lt(e),t):s},t.endAngle=function(e){return arguments.length?(l=Lt(e),t):l},t},pa.svg.diagonal=function(){function t(t,i){var o=e.call(this,t,i),a=n.call(this,t,i),u=(o.y+a.y)/2,s=[o,{x:o.x,y:u},{x:a.x,y:u},a];return s=s.map(r),"M"+s[0]+"C"+s[1]+" "+s[2]+" "+s[3]}var e=kn,n=Sn,r=Go;return t.source=function(n){return arguments.length?(e=Lt(n),t):e},t.target=function(e){return arguments.length?(n=Lt(e),t):n},t.projection=function(e){return arguments.length?(r=e,t):r},t},pa.svg.diagonal.radial=function(){var t=pa.svg.diagonal(),e=Go,n=t.projection;return t.projection=function(t){return arguments.length?n(Zo(e=t)):e},t},pa.svg.symbol=function(){function t(t,r){return(Us.get(e.call(this,t,r))||Ko)(n.call(this,t,r))}var e=Qo,n=Jo;return t.type=function(n){return arguments.length?(e=Lt(n),t):e},t.size=function(e){return arguments.length?(n=Lt(e),t):n},t};var Us=pa.map({circle:Ko,cross:function(t){var e=Math.sqrt(t/5)/2;return"M"+-3*e+","+-e+"H"+-e+"V"+-3*e+"H"+e+"V"+-e+"H"+3*e+"V"+e+"H"+e+"V"+3*e+"H"+-e+"V"+e+"H"+-3*e+"Z"},diamond:function(t){var e=Math.sqrt(t/(2*Ws)),n=e*Ws;return"M0,"+-e+"L"+n+",0 0,"+e+" "+-n+",0Z"},square:function(t){var e=Math.sqrt(t)/2;return"M"+-e+","+-e+"L"+e+","+-e+" "+e+","+e+" "+-e+","+e+"Z"},"triangle-down":function(t){var e=Math.sqrt(t/Bs),n=e*Bs/2;return"M0,"+n+"L"+e+","+-n+" "+-e+","+-n+"Z"},"triangle-up":function(t){var e=Math.sqrt(t/Bs),n=e*Bs/2;return"M0,"+-n+"L"+e+","+n+" "+-e+","+n+"Z"}});pa.svg.symbolTypes=Us.keys();var Bs=Math.sqrt(3),Ws=Math.tan(30*Xa);ja.transition=function(t){for(var e,n,r=$s||++Gs,i=ia(t),o=[],a=Ys||{time:Date.now(),ease:Lr,delay:0,duration:250},u=-1,s=this.length;++u<s;){o.push(e=[]);for(var l=this[u],c=-1,f=l.length;++c<f;)(n=l[c])&&oa(n,c,i,r,a),e.push(n)}return ea(o,i,r)},ja.interrupt=function(t){return this.each(null==t?Vs:ta(ia(t)))};var $s,Ys,Vs=ta(ia()),Xs=[],Gs=0;Xs.call=ja.call,Xs.empty=ja.empty,Xs.node=ja.node,Xs.size=ja.size,pa.transition=function(t,e){return t&&t.transition?$s?t.transition(e):t:pa.selection().transition(t)},pa.transition.prototype=Xs,Xs.select=function(t){var e,n,r,i=this.id,o=this.namespace,a=[];t=D(t);for(var u=-1,s=this.length;++u<s;){a.push(e=[]);for(var l=this[u],c=-1,f=l.length;++c<f;)(r=l[c])&&(n=t.call(r,r.__data__,c,u))?("__data__"in r&&(n.__data__=r.__data__),oa(n,c,o,i,r[o][i]),e.push(n)):e.push(null)}return ea(a,o,i)},Xs.selectAll=function(t){var e,n,r,i,o,a=this.id,u=this.namespace,s=[];t=j(t);for(var l=-1,c=this.length;++l<c;)for(var f=this[l],h=-1,p=f.length;++h<p;)if(r=f[h]){o=r[u][a],n=t.call(r,r.__data__,h,l),s.push(e=[]);for(var d=-1,g=n.length;++d<g;)(i=n[d])&&oa(i,d,u,a,o),e.push(i)}return ea(s,u,a)},Xs.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=Y(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]);for(var n=this[o],u=0,s=n.length;u<s;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return ea(i,this.namespace,this.id)},Xs.tween=function(t,e){var n=this.id,r=this.namespace;return arguments.length<2?this.node()[r][n].tween.get(t):X(this,null==e?function(e){e[r][n].tween.remove(t)}:function(i){i[r][n].tween.set(t,e)})},Xs.attr=function(t,e){function n(){this.removeAttribute(u)}function r(){this.removeAttributeNS(u.space,u.local)}function i(t){return null==t?n:(t+="",function(){var e,n=this.getAttribute(u);return n!==t&&(e=a(n,t),function(t){this.setAttribute(u,e(t))})})}function o(t){return null==t?r:(t+="",function(){var e,n=this.getAttributeNS(u.space,u.local);return n!==t&&(e=a(n,t),function(t){this.setAttributeNS(u.space,u.local,e(t))})})}if(arguments.length<2){for(e in t)this.attr(e,t[e]);return this}var a="transform"==t?Qr:kr,u=pa.ns.qualify(t);return na(this,"attr."+t,e,u.local?o:i)},Xs.attrTween=function(t,e){function n(t,n){var r=e.call(this,t,n,this.getAttribute(i));return r&&function(t){this.setAttribute(i,r(t))}}function r(t,n){var r=e.call(this,t,n,this.getAttributeNS(i.space,i.local));return r&&function(t){this.setAttributeNS(i.space,i.local,r(t))}}var i=pa.ns.qualify(t);return this.tween("attr."+t,i.local?r:n)},Xs.style=function(t,e,n){function r(){this.style.removeProperty(t)}function i(e){return null==e?r:(e+="",function(){var r,i=a(this).getComputedStyle(this,null).getPropertyValue(t);return i!==e&&(r=kr(i,e),function(e){this.style.setProperty(t,r(e),n)})})}var o=arguments.length;if(o<3){if("string"!=typeof t){o<2&&(e="");for(n in t)this.style(n,t[n],e);return this}n=""}return na(this,"style."+t,e,i)},Xs.styleTween=function(t,e,n){function r(r,i){var o=e.call(this,r,i,a(this).getComputedStyle(this,null).getPropertyValue(t));return o&&function(e){this.style.setProperty(t,o(e),n)}}return arguments.length<3&&(n=""),this.tween("style."+t,r)},Xs.text=function(t){return na(this,"text",t,ra)},Xs.remove=function(){var t=this.namespace;return this.each("end.transition",function(){var e;this[t].count<2&&(e=this.parentNode)&&e.removeChild(this)})},Xs.ease=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].ease:("function"!=typeof t&&(t=pa.ease.apply(pa,arguments)),X(this,function(r){r[n][e].ease=t}))},Xs.delay=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].delay:X(this,"function"==typeof t?function(r,i,o){r[n][e].delay=+t.call(r,r.__data__,i,o)}:(t=+t,function(r){r[n][e].delay=t}))},Xs.duration=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].duration:X(this,"function"==typeof t?function(r,i,o){r[n][e].duration=Math.max(1,t.call(r,r.__data__,i,o))}:(t=Math.max(1,t),function(r){r[n][e].duration=t}))},Xs.each=function(t,e){var n=this.id,r=this.namespace;if(arguments.length<2){var i=Ys,o=$s;try{$s=n,X(this,function(e,i,o){Ys=e[r][n],t.call(e,e.__data__,i,o)})}finally{Ys=i,$s=o}}else X(this,function(i){var o=i[r][n];(o.event||(o.event=pa.dispatch("start","end","interrupt"))).on(t,e)});return this},Xs.transition=function(){for(var t,e,n,r,i=this.id,o=++Gs,a=this.namespace,u=[],s=0,l=this.length;s<l;s++){u.push(t=[]);for(var e=this[s],c=0,f=e.length;c<f;c++)(n=e[c])&&(r=n[a][i],oa(n,c,a,o,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),t.push(n)}return ea(u,a,o)},pa.svg.axis=function(){function t(t){t.each(function(){var t,l=pa.select(this),c=this.__chart__||n,f=this.__chart__=n.copy(),h=null==s?f.ticks?f.ticks.apply(f,u):f.domain():s,p=null==e?f.tickFormat?f.tickFormat.apply(f,u):_:e,d=l.selectAll(".tick").data(h,f),g=d.enter().insert("g",".domain").attr("class","tick").style("opacity",Ua),v=pa.transition(d.exit()).style("opacity",Ua).remove(),y=pa.transition(d.order()).style("opacity",1),m=Math.max(i,0)+a,x=Gi(f),b=l.selectAll(".domain").data([0]),w=(b.enter().append("path").attr("class","domain"),pa.transition(b));g.append("line"),g.append("text");var M,k,S,T,E=g.select("line"),C=y.select("line"),N=d.select("text").text(p),A=g.select("text"),L=y.select("text"),q="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(t=aa,M="x",S="y",k="x2",T="y2",N.attr("dy",q<0?"0em":".71em").style("text-anchor","middle"),w.attr("d","M"+x[0]+","+q*o+"V0H"+x[1]+"V"+q*o)):(t=ua,M="y",S="x",k="y2",T="x2",N.attr("dy",".32em").style("text-anchor",q<0?"end":"start"),w.attr("d","M"+q*o+","+x[0]+"H0V"+x[1]+"H"+q*o)),E.attr(T,q*i),A.attr(S,q*m),C.attr(k,0).attr(T,q*i),L.attr(M,0).attr(S,q*m),f.rangeBand){var D=f,j=D.rangeBand()/2;c=f=function(t){return D(t)+j}}else c.rangeBand?c=f:v.call(t,f,c);g.call(t,c,f),y.call(t,f,f)})}var e,n=pa.scale.linear(),r=Zs,i=6,o=6,a=3,u=[10],s=null;return t.scale=function(e){return arguments.length?(n=e,t):n},t.orient=function(e){return arguments.length?(r=e in Js?e+"":Zs,t):r},t.ticks=function(){return arguments.length?(u=ga(arguments),t):u},t.tickValues=function(e){return arguments.length?(s=e,t):s},t.tickFormat=function(n){return arguments.length?(e=n,t):e},t.tickSize=function(e){var n=arguments.length;return n?(i=+e,o=+arguments[n-1],t):i},t.innerTickSize=function(e){return arguments.length?(i=+e,t):i},t.outerTickSize=function(e){return arguments.length?(o=+e,t):o},t.tickPadding=function(e){return arguments.length?(a=+e,t):a},t.tickSubdivide=function(){return arguments.length&&t},t};var Zs="bottom",Js={top:1,right:1,bottom:1,left:1};pa.svg.brush=function(){function t(o){o.each(function(){var o=pa.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",i).on("touchstart.brush",i),a=o.selectAll(".background").data([0]);a.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),o.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var u=o.selectAll(".resize").data(g,_);u.exit().remove(),u.enter().append("g").attr("class",function(t){return"resize "+t}).style("cursor",function(t){return Qs[t]}).append("rect").attr("x",function(t){return/[ew]$/.test(t)?-3:null}).attr("y",function(t){return/^[ns]/.test(t)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),u.style("display",t.empty()?"none":null);var s,f=pa.transition(o),h=pa.transition(a);l&&(s=Gi(l),h.attr("x",s[0]).attr("width",s[1]-s[0]),n(f)),c&&(s=Gi(c),h.attr("y",s[0]).attr("height",s[1]-s[0]),r(f)),e(f)})}function e(t){t.selectAll(".resize").attr("transform",function(t){return"translate("+f[+/e$/.test(t)]+","+h[+/^s/.test(t)]+")"})}function n(t){t.select(".extent").attr("x",f[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",f[1]-f[0])}function r(t){t.select(".extent").attr("y",h[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function i(){function i(){32==pa.event.keyCode&&(C||(x=null,L[0]-=f[1],L[1]-=h[1],C=2),N())}function g(){32==pa.event.keyCode&&2==C&&(L[0]+=f[1],L[1]+=h[1],C=0,N())}function v(){var t=pa.mouse(w),i=!1;b&&(t[0]+=b[0],t[1]+=b[1]),C||(pa.event.altKey?(x||(x=[(f[0]+f[1])/2,(h[0]+h[1])/2]),L[0]=f[+(t[0]<x[0])],L[1]=h[+(t[1]<x[1])]):x=null),T&&y(t,l,0)&&(n(k),i=!0),E&&y(t,c,1)&&(r(k),i=!0),i&&(e(k),_({type:"brush",mode:C?"move":"resize"}))}function y(t,e,n){var r,i,a=Gi(e),s=a[0],l=a[1],c=L[n],g=n?h:f,v=g[1]-g[0];if(C&&(s-=c,l-=v+c),r=(n?d:p)?Math.max(s,Math.min(l,t[n])):t[n],C?i=(r+=c)+v:(x&&(c=Math.max(s,Math.min(l,2*x[n]-r))),c<r?(i=r,r=c):i=c),g[0]!=r||g[1]!=i)return n?u=null:o=null,g[0]=r,g[1]=i,!0}function m(){v(),k.style("pointer-events","all").selectAll(".resize").style("display",t.empty()?"none":null),pa.select("body").style("cursor",null),q.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),A(),_({type:"brushend"})}var x,b,w=this,M=pa.select(pa.event.target),_=s.of(w,arguments),k=pa.select(w),S=M.datum(),T=!/^(n|s)$/.test(S)&&l,E=!/^(e|w)$/.test(S)&&c,C=M.classed("extent"),A=tt(w),L=pa.mouse(w),q=pa.select(a(w)).on("keydown.brush",i).on("keyup.brush",g);if(pa.event.changedTouches?q.on("touchmove.brush",v).on("touchend.brush",m):q.on("mousemove.brush",v).on("mouseup.brush",m),k.interrupt().selectAll("*").interrupt(),C)L[0]=f[0]-L[0],L[1]=h[0]-L[1];else if(S){var D=+/w$/.test(S),j=+/^n/.test(S);b=[f[1-D]-L[0],h[1-j]-L[1]],L[0]=f[D],L[1]=h[j]}else pa.event.altKey&&(x=L.slice());k.style("pointer-events","none").selectAll(".resize").style("display",null),pa.select("body").style("cursor",M.style("cursor")),_({type:"brushstart"}),v()}var o,u,s=L(t,"brushstart","brush","brushend"),l=null,c=null,f=[0,0],h=[0,0],p=!0,d=!0,g=Ks[0];return t.event=function(t){t.each(function(){var t=s.of(this,arguments),e={x:f,y:h,i:o,j:u},n=this.__chart__||e;this.__chart__=e,$s?pa.select(this).transition().each("start.brush",function(){o=n.i,u=n.j,f=n.x,h=n.y,t({type:"brushstart"})}).tween("brush:brush",function(){var n=Sr(f,e.x),r=Sr(h,e.y);return o=u=null,function(i){f=e.x=n(i),h=e.y=r(i),t({type:"brush",mode:"resize"})}}).each("end.brush",function(){o=e.i,u=e.j,t({type:"brush",mode:"resize"}),t({type:"brushend"})}):(t({type:"brushstart"}),t({type:"brush",mode:"resize"}),t({type:"brushend"}))})},t.x=function(e){return arguments.length?(l=e,g=Ks[!l<<1|!c],t):l},t.y=function(e){return arguments.length?(c=e,g=Ks[!l<<1|!c],t):c},t.clamp=function(e){return arguments.length?(l&&c?(p=!!e[0],d=!!e[1]):l?p=!!e:c&&(d=!!e),t):l&&c?[p,d]:l?p:c?d:null},t.extent=function(e){var n,r,i,a,s;return arguments.length?(l&&(n=e[0],r=e[1],c&&(n=n[0],r=r[0]),o=[n,r],l.invert&&(n=l(n),r=l(r)),r<n&&(s=n,n=r,r=s),n==f[0]&&r==f[1]||(f=[n,r])),c&&(i=e[0],a=e[1],l&&(i=i[1],a=a[1]),u=[i,a],c.invert&&(i=c(i),a=c(a)),a<i&&(s=i,i=a,a=s),i==h[0]&&a==h[1]||(h=[i,a])),t):(l&&(o?(n=o[0],r=o[1]):(n=f[0],r=f[1],l.invert&&(n=l.invert(n),r=l.invert(r)),r<n&&(s=n,n=r,r=s))),c&&(u?(i=u[0],a=u[1]):(i=h[0],a=h[1],c.invert&&(i=c.invert(i),a=c.invert(a)),a<i&&(s=i,i=a,a=s))),l&&c?[[n,i],[r,a]]:l?[n,r]:c&&[i,a])},t.clear=function(){return t.empty()||(f=[0,0],h=[0,0],o=u=null),t},t.empty=function(){return!!l&&f[0]==f[1]||!!c&&h[0]==h[1]},pa.rebind(t,s,"on")};var Qs={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ks=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],tl=xu.format=Su.timeFormat,el=tl.utc,nl=el("%Y-%m-%dT%H:%M:%S.%LZ");tl.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?sa:nl,sa.parse=function(t){var e=new Date(t);return isNaN(e)?null:e},sa.toString=nl.toString,xu.second=$t(function(t){return new bu(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(t.getTime()+1e3*Math.floor(e))},function(t){return t.getSeconds()}),xu.seconds=xu.second.range,xu.seconds.utc=xu.second.utc.range,xu.minute=$t(function(t){return new bu(6e4*Math.floor(t/6e4))},function(t,e){t.setTime(t.getTime()+6e4*Math.floor(e))},function(t){return t.getMinutes()}),xu.minutes=xu.minute.range,xu.minutes.utc=xu.minute.utc.range,xu.hour=$t(function(t){var e=t.getTimezoneOffset()/60;return new bu(36e5*(Math.floor(t/36e5-e)+e))},function(t,e){t.setTime(t.getTime()+36e5*Math.floor(e))},function(t){return t.getHours()}),xu.hours=xu.hour.range,xu.hours.utc=xu.hour.utc.range,xu.month=$t(function(t){return t=xu.day(t),t.setDate(1),t},function(t,e){t.setMonth(t.getMonth()+e)},function(t){return t.getMonth()}),xu.months=xu.month.range,xu.months.utc=xu.month.utc.range;var rl=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],il=[[xu.second,1],[xu.second,5],[xu.second,15],[xu.second,30],[xu.minute,1],[xu.minute,5],[xu.minute,15],[xu.minute,30],[xu.hour,1],[xu.hour,3],[xu.hour,6],[xu.hour,12],[xu.day,1],[xu.day,2],[xu.week,1],[xu.month,1],[xu.month,3],[xu.year,1]],ol=tl.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){
return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",je]]),al={range:function(t,e,n){return pa.range(Math.ceil(t/n)*n,+e,n).map(ca)},floor:_,ceil:_};il.year=xu.year,xu.scale=function(){return la(pa.scale.linear(),il,ol)};var ul=il.map(function(t){return[t[0].utc,t[1]]}),sl=el.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",je]]);ul.year=xu.year.utc,xu.scale.utc=function(){return la(pa.scale.linear(),ul,sl)},pa.text=qt(function(t){return t.responseText}),pa.json=function(t,e){return Dt(t,"application/json",fa,e)},pa.html=function(t,e){return Dt(t,"text/html",ha,e)},pa.xml=qt(function(t){return t.responseXML}),this.d3=pa,r=pa,i="function"==typeof r?r.call(e,n,e,t):r,!(void 0!==i&&(t.exports=i))}()},function(t,e,n){"use strict";var r=n(1),i=function(){function t(t){this._config=t}return Object.defineProperty(t.prototype,"cx",{get:function(){return this.width/2},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cy",{get:function(){return this.height/2},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return+r(this.targetId).width()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return+r(this.targetId).height()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"targetId",{get:function(){return this._config&&this._config.targetId?this._config.targetId:".visualizer"},enumerable:!0,configurable:!0}),t}();e.BaseElement=i},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.eot"},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=p[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(l(r.parts[o],e))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(l(r.parts[o],e));p[r.id]={id:r.id,refs:1,parts:a}}}}function i(t){for(var e=[],n={},r=0;r<t.length;r++){var i=t[r],o=i[0],a=i[1],u=i[2],s=i[3],l={css:a,media:u,sourceMap:s};n[o]?n[o].parts.push(l):e.push(n[o]={id:o,parts:[l]})}return e}function o(t,e){var n=v(),r=x[x.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),x.push(e);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(e)}}function a(t){t.parentNode.removeChild(t);var e=x.indexOf(t);e>=0&&x.splice(e,1)}function u(t){var e=document.createElement("style");return e.type="text/css",o(t,e),e}function s(t){var e=document.createElement("link");return e.rel="stylesheet",o(t,e),e}function l(t,e){var n,r,i;if(e.singleton){var o=m++;n=y||(y=u(e)),r=c.bind(null,n,o,!1),i=c.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=s(e),r=h.bind(null,n),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=u(e),r=f.bind(null,n),i=function(){a(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}function c(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function f(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function h(t,e){var n=e.css,r=e.sourceMap;r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var i=new Blob([n],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(i),o&&URL.revokeObjectURL(o)}var p={},d=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},g=d(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),v=d(function(){return document.head||document.getElementsByTagName("head")[0]}),y=null,m=0,x=[];t.exports=function(t,e){e=e||{},"undefined"==typeof e.singleton&&(e.singleton=g()),"undefined"==typeof e.insertAt&&(e.insertAt="bottom");var n=i(t);return r(n,e),function(t){for(var o=[],a=0;a<n.length;a++){var u=n[a],s=p[u.id];s.refs--,o.push(s)}if(t){var l=i(t);r(l,e)}for(var a=0;a<o.length;a++){var s=o[a];if(0===s.refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete p[s.id]}}}};var b=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(29)),r(n(28)),r(n(27))},function(t,e){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function n(t){return"string"!=typeof t&&(t=String(t)),t}function r(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return g.iterable&&(e[Symbol.iterator]=function(){return e}),e}function i(t){this.map={},t instanceof i?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function o(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function a(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function u(t){var e=new FileReader;return e.readAsArrayBuffer(t),a(e)}function s(t){var e=new FileReader;return e.readAsText(t),a(e)}function l(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(g.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(g.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(g.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(t){if(!g.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):g.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},g.blob?(this.blob=function(){var t=o(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(u)},this.text=function(){var t=o(this);if(t)return t;if(this._bodyBlob)return s(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=o(this);return t?t:Promise.resolve(this._bodyText)},g.formData&&(this.formData=function(){return this.text().then(h)}),this.json=function(){return this.text().then(JSON.parse)},this}function c(t){var e=t.toUpperCase();return v.indexOf(e)>-1?e:t}function f(t,e){e=e||{};var n=e.body;if(f.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new i(t.headers)),this.method=t.method,this.mode=t.mode,n||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new i(e.headers)),this.method=c(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function h(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function p(t){var e=new i,n=(t.getAllResponseHeaders()||"").trim().split("\n");return n.forEach(function(t){var n=t.trim().split(":"),r=n.shift().trim(),i=n.join(":").trim();e.append(r,i)}),e}function d(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof i?e.headers:new i(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var g={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};i.prototype.append=function(t,r){t=e(t),r=n(r);var i=this.map[t];i||(i=[],this.map[t]=i),i.push(r)},i.prototype["delete"]=function(t){delete this.map[e(t)]},i.prototype.get=function(t){var n=this.map[e(t)];return n?n[0]:null},i.prototype.getAll=function(t){return this.map[e(t)]||[]},i.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},i.prototype.set=function(t,r){this.map[e(t)]=[n(r)]},i.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(n){this.map[n].forEach(function(r){t.call(e,r,n,this)},this)},this)},i.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),r(t)},i.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),r(t)},i.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),r(t)},g.iterable&&(i.prototype[Symbol.iterator]=i.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];f.prototype.clone=function(){return new f(this)},l.call(f.prototype),l.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new i(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var y=[301,302,303,307,308];d.redirect=function(t,e){if(y.indexOf(e)===-1)throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=i,t.Request=f,t.Response=d,t.fetch=function(t,e){return new Promise(function(n,r){function i(){return"responseURL"in a?a.responseURL:/^X-Request-URL:/m.test(a.getAllResponseHeaders())?a.getResponseHeader("X-Request-URL"):void 0}var o;o=f.prototype.isPrototypeOf(t)&&!e?t:new f(t,e);var a=new XMLHttpRequest;a.onload=function(){var t={status:a.status,statusText:a.statusText,headers:p(a),url:i()},e="response"in a?a.response:a.responseText;n(new d(e,t))},a.onerror=function(){r(new TypeError("Network request failed"))},a.ontimeout=function(){r(new TypeError("Network request failed"))},a.open(o.method,o.url,!0),"include"===o.credentials&&(a.withCredentials=!0),"responseType"in a&&g.blob&&(a.responseType="blob"),o.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send("undefined"==typeof o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(t,e,n){e=t.exports=n(5)(),e.push([t.id,"@font-face{font-family:Sansumi-Regular;src:url("+n(6)+");src:url("+n(15)+') format("woff2"),url('+n(14)+') format("woff"),url('+n(13)+') format("truetype"),url('+n(12)+'#Sansumi-Regular) format("svg"),url('+n(6)+'?#iefix) format("embedded-opentype");font-weight:400;font-style:normal}',""])},function(t,e,n){e=t.exports=n(5)(),e.push([t.id,"/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}dfn{font-style:italic}h1{font-size:2em;margin:.75em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}figure{margin:1.5em 40px}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}input{overflow:visible}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;display:table;max-width:100%;white-space:normal;color:inherit;padding:0}optgroup{font-weight:700}textarea{overflow:auto}h1,h2,label,p{font-family:Sansumi-Regular}body,html{height:100%;flex-direction:column;min-height:100vh}label{font-size:12px}h1{font-size:18px}h2{font-size:16px}.content{width:100%;height:calc(100% - 80px);display:flex;flex:1}.node circle{stroke:#1fbad7;stroke-width:2px}.node .node-color-1{fill:#6e868d}.node .node-color-2{fill:#56717a}.node .node-color-3{fill:#3e5d67}.node .node-color-4{fill:#264954}.node .node-color-5{fill:#0e3541}.node div{display:table;height:100%;width:100%;overflow:hidden}.node p{font-size:8px;color:#f2f2f2;text-shadow:1px 1px 4px #0e3541;display:table-cell;text-align:center;vertical-align:middle}.loader circle{fill-opacity:0;stroke:#1f77b4;stroke-width:3px}.loader rect{fill:#fff}.visualizer{width:100%;flex:1}.top-bar{background-color:#09091a;height:80px;color:#f2f2f2;display:flex;align-items:center;justify-content:space-between}.top-bar .logo{display:flex;padding-left:48px}.top-bar .logo p{padding-left:16px;margin:0}.top-bar .button{border:1px solid #f2f2f2;border-radius:3px;color:#f2f2f2;margin-left:auto;margin-right:48px;padding:10px;display:block;text-decoration:none}.menu{background-color:#fff;color:#09091a;flex:0 0 16em;border-right:1px solid #09091a;padding-top:50px}.menu div,.menu h2,.menu img,.menu input{padding-left:48px}.menu h1,.menu img{display:inline}.menu h1{line-height:0}.menu hr{color:#09091a;width:80%;margin-bottom:20px}.menu input{margin:5px 0}",""])},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.svg"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.ttf"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.woff"},function(t,e,n){t.exports=n.p+"fonts/Sansumi-Regular.woff2"},function(t,e,n){var r=n(10);"string"==typeof r&&(r=[[t.id,r,""]]),n(7)(r,{}),r.locals&&(t.exports=r.locals)},function(t,e,n){var r=n(11);"string"==typeof r&&(r=[[t.id,r,""]]),n(7)(r,{}),r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";n(17),n(16);var r=n(19),i=n(25),o=n(2),a=n(1);o.setLevel("debug");var u=function(){function t(){this._visualizer=new r.Visualizer(new r.MenuComponent,new i.SodaFilmLocatioRepository,{minimumValue:2})}return t.prototype.init=function(){a("body").fadeIn("fast"),this._visualizer.initalize()},t}();e.App=u;var s=new u;s.init()},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(20)),r(n(24))},function(t,e,n){"use strict";var r=n(1),i="primary-selectors",o="secondary-selectors",a=n(2),u=a.getLogger("menu"),s=function(){function t(){this._selected={}}return t.prototype.setSelectors=function(t){var e=t[0].query,n=t[0].children[0].query;this.setSelectorsInternal(i,t,e),this.setSelectorsInternal(o,t[0].children,n),this._selectorsHierarchy=t},t.prototype.setOnSelectorsCallback=function(t){this._callback=t},t.prototype.setSelectorsInternal=function(t,e,n){this._selected[t]=n;var i="."+t;r(i).empty(),e.forEach(function(e,o){var a=n===e.query?"checked":"",u='\n                <input type="radio" name="'+t+'" id="'+t+"-"+o+'" value="'+e.query+'" '+a+' />\n                <label for="'+t+"-"+o+'">'+e.label+"</label><br>\n            ";r(i).append(u)}),this.addChangeListener(t)},t.prototype.addChangeListener=function(t){var e=this,n="."+t;r(n+" input").on("change",function(a){var u=r('input[name="'+t+'"]:checked',n).val();if(e._selected[t]=u,t===i){var s=e._selectorsHierarchy.find(function(t){return t.query===u});e.setSelectorsInternal(o,s.children,s.children[0].query)}e.invokeCallback()})},t.prototype.invokeCallback=function(){return this._callback?void this._callback({query:this._selected[i]},{query:this._selected[o]}):void u.error("Callback has not been set")},t}();e.MenuComponent=s},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(4)),r(n(22)),r(n(23))},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=n(3),o=n(4),a=n(2),u=a.getLogger("loader"),s=function(t){function e(e,n){t.call(this,n),this._svg=e,this.r=50}return r(e,t),e.prototype.startLoader=function(){return this.g?void u.debug("Trying to start an already started loader"):(this.g=this._svg.append("g").classed("loader",!0),this.addCircle(this.g),void this.addRect(this.g))},e.prototype.stopLoader=function(){this.g&&(this.g.remove(),this.g=null)},e.prototype.addCircle=function(t){var e=this;t.append("circle").attr("cx",function(){return e.cx}).attr("cy",function(){return e.cy}).attr("r",this.r)},e.prototype.addRect=function(t){var e=this,n=2*this.r+5,r=t.append("rect").attr("x",function(){return e.cx-10}).attr("y",function(){return e.cy-n/2}).attr("width",20).attr("height",n);this.addRotation(r)},e.prototype.addRotation=function(t){var e=this,n=function(){t.transition().attrTween("transform",function(){return i.interpolateString("rotate(0,   "+e.cx+", "+e.cy+")","rotate(360, "+e.cx+", "+e.cy+")")}).duration(2e3).each("end",n)};n()},e}(o.BaseElement);e.StandardLoader=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=n(3),o=n(4),a=n(8),u=n(2),s=u.getLogger("node-hierarchy"),l=function(t){function e(e,n){var r=this;if(t.call(this,n),this._svg=e,this.redraw=function(){var t=a.translateToBorderFactory(r.width,r.height),e=r._data.length<r._config.ignoreMinimumBelow?1:r._config.minimumValue,n=r._data.filter(function(t){return t.value>=e&&t.name}),o=i.layout.pack().sort(function(t,e){return-t.name.length-e.name.length}).size([r.width,r.height]).padding(5),u=o.nodes({children:n}).filter(function(t){return!t.children}),s=r._svg.selectAll(".node").data(u).enter().append("g").attr("class","node").attr("transform",t);r.addTitle(s),r.addCircle(s),r.addLabel(s),r.translateToCenter(s)},!this._config)return void s.error("No configuration is specified")}return r(e,t),Object.defineProperty(e.prototype,"minimumValue",{get:function(){return this._config.minimumValue||1},set:function(t){this._config.minimumValue=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ignoreMinimumBelow",{get:function(){return this._config.ignoreMinimumBelow||20},set:function(t){this._config.ignoreMinimumBelow=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"data",{set:function(t){this._data&&this.clean(),this._data=t,this.redraw()},enumerable:!0,configurable:!0}),e.prototype.clean=function(){this._svg.selectAll(".node").remove()},e.prototype.translateToCenter=function(t){t.transition().duration(1800).ease("cubic-in-out").delay(function(t,e){return 800*Math.random()}).attr("transform",function(t){return"translate("+t.x+", "+t.y+")"})},e.prototype.addCircle=function(t){t.append("circle").attr("r",function(t){return t.r}).attr("class",function(t,e){return"node-color-"+(e%6+1)})},e.prototype.addTitle=function(t){t.append("title").text(function(t){return t.name+": "+t.value})},e.prototype.addLabel=function(t){t.append("foreignObject").attr("width",function(t){return 2*t.r}).attr("height",function(t){return 2*t.r}).attr("transform",function(t){return"translate("+-t.r+","+-t.r+")"}).append("xhtml:div").append("xhtml:p").html(function(t){return a.shortenToWithinRadius(t.r,t.name)})},e}(o.BaseElement);e.NodeHierarchyElement=l},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=n(3),o=n(1),a=n(21),u=function(t){function e(e,n,r){var i=this;t.call(this,r),this._manager=e,this._repository=n,this.onSelectorChanged=function(t,e){i._nodeHierarchy&&i._nodeHierarchy.clean(),i.isLoading=!0,i._repository.getGroups(t,e).then(function(n){n&&0!==n.length||(log.warn("No data was received for query with primary ("+t.query+") and secondary ("+e.query+") "),i.showError()),i.data=n})["catch"](function(t){log.warn("Received error from repository while getting groups with reason: <"+t+">  "),i.showError()})}}return r(e,t),Object.defineProperty(e.prototype,"data",{set:function(t){this._nodeHierarchy||this.initalize(),this.isLoading=!1,this._nodeHierarchy.data=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isLoading",{set:function(t){t?this._loader.startLoader():this._loader.stopLoader()},enumerable:!0,configurable:!0}),e.prototype.initalize=function(){var t=this;this._repository.getSelectors().then(function(e){e&&0!=e.length||log.error("No selectors found"),t.onSelectorChanged({query:e[0].query},{query:e[0].children[0].query}),t._manager.setSelectors(e)}),this._svg=i.select(this.targetId).append("svg").attr("viewBox","0 0 "+o(this.targetId).width()+" "+o(this.targetId).height()),this._loader=new a.StandardLoader(this._svg,this._config),this.isLoading=!0,this._manager.setOnSelectorsCallback(this.onSelectorChanged),this._nodeHierarchy=new a.NodeHierarchyElement(this._svg,this._config)},e.prototype.showError=function(){this._svg.append("text").attr("x",+o(this.targetId).width()/2).attr("y",+o(this.targetId).height()/2).text("Error while receiving data. Please try again.")},e}(a.BaseElement);e.Visualizer=u},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(26))},function(t,e,n){"use strict";n(9);var r=n(2),i=n(8),o=(r.getLogger("movie-location-repo"),n(1)),a=function(){function t(){this.headers=new Headers,this.url="https://data.sfgov.org/resource/wwmu-gmzc.json"}return t.prototype.getGroups=function(t,e){var n=i.groupMapperFactory(t.query,"COUNT_"+e.query);return"locations"!==t.query&&"locations"!==e.query?this.getAvancedGroups(t,e):this.fetch(this.url+"?$group="+t.query+"&$select="+t.query+",COUNT("+e.query+")").then(n)},t.prototype.getAvancedGroups=function(t,e){var n=i.groupMapperFactory(t.query,"count"),r="SELECT "+t.query+", count(*) \n                     GROUP BY "+e.query+", "+t.query+" |>\n                            SELECT "+t.query+", COUNT(*) AS count \n                            GROUP BY "+t.query;return this.fetch(this.url+"?$query="+r).then(n)},t.prototype.fetch=function(t){return fetch(t).then(function(t){return t.json()})},t.prototype.getSelectors=function(){var t={label:"Movie",query:"title"},e={label:"Locations",query:"locations"},n={label:"Writer",query:"writer"},r={label:"Director",query:"director"},i={label:"Production Company",query:"production_company"};return new Promise(function(a,u){var s=[o.extend(t,{children:[e]}),o.extend(e,{children:[t]}),o.extend(n,{children:[t,e,r,i]}),o.extend(r,{children:[t,e,n,i]}),o.extend(i,{children:[t,e,n,r]})];a(s)})},t}();e.SodaFilmLocatioRepository=a},function(t,e){"use strict";e.groupMapperFactory=function(t,e){return function(n){return n?n.map(function(n){return{name:n[t],value:+n[e]}}):null}}},function(t,e){"use strict";var n={maxWidthDivider:3.1,lineDivider:10,lineBreakBackTrack:2,minimumLenght:4};e.textShortenConfig=n,e.shortenToWithinRadius=function(t,e){var r=t/n.maxWidthDivider,i=t/n.lineDivider;if(!e)return"";if(e=e.split(/\s+/g).map(function(t){if(t.length>=r){var e=n.lineBreakBackTrack;return t.substr(0,r-e)+"-<br>"+t.substr(r-e+1,t.length)}return t}).join(" "),e&&e.length>r*i){var o=e.substr(0,r-3);return o.length<=n.minimumLenght?"":o+"&hellip;"}return e}},function(t,e){"use strict";e.translateToBorderFactory=function(t,e){return function(t){return"translate("+t.x+","+(e+t.r)+")"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,